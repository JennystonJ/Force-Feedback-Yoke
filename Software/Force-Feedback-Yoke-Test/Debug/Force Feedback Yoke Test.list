
Force Feedback Yoke Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e948  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  0800ead8  0800ead8  0001ead8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef44  0800ef44  00020334  2**0
                  CONTENTS
  4 .ARM          00000000  0800ef44  0800ef44  00020334  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ef44  0800ef44  00020334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef44  0800ef44  0001ef44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ef48  0800ef48  0001ef48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  0800ef4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020334  2**0
                  CONTENTS
 10 .bss          00000a38  20000334  20000334  00020334  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000d6c  20000d6c  00020334  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020334  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e34b  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004167  00000000  00000000  0003e6af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018f8  00000000  00000000  00042818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001728  00000000  00000000  00044110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022cda  00000000  00000000  00045838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020657  00000000  00000000  00068512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1371  00000000  00000000  00088b69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00149eda  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000078c4  00000000  00000000  00149f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000334 	.word	0x20000334
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800eac0 	.word	0x0800eac0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000338 	.word	0x20000338
 80001cc:	0800eac0 	.word	0x0800eac0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <FFBInit>:
 *      Author: Jennyston
 */

#include "force_feedback_controller.h"

void FFBInit(FFBController_t *ffb) {
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	ffb->constantGain = 0;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f04f 0200 	mov.w	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
	ffb->periodicGain = 0;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f04f 0200 	mov.w	r2, #0
 8000c5e:	60da      	str	r2, [r3, #12]
	ffb->springGain = 0.5;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000c66:	611a      	str	r2, [r3, #16]
	ffb->damperGain = -0.75;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <FFBInit+0x4c>)
 8000c6c:	615a      	str	r2, [r3, #20]

	ffb->gain = 1;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000c74:	605a      	str	r2, [r3, #4]
	ffb->motorKtConstant = 0.0265;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a07      	ldr	r2, [pc, #28]	; (8000c98 <FFBInit+0x50>)
 8000c7a:	601a      	str	r2, [r3, #0]
	ffb->minimumSpringForce = 0.01;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <FFBInit+0x54>)
 8000c80:	619a      	str	r2, [r3, #24]
	ffb->lockAngle = 90;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <FFBInit+0x58>)
 8000c86:	61da      	str	r2, [r3, #28]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	bf400000 	.word	0xbf400000
 8000c98:	3cd91687 	.word	0x3cd91687
 8000c9c:	3c23d70a 	.word	0x3c23d70a
 8000ca0:	42b40000 	.word	0x42b40000

08000ca4 <FFBComputeDamperForce>:
	}

	return force;
}

float FFBComputeDamperForce(FFBController_t *ffb, float magnitude) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	ed87 0a00 	vstr	s0, [r7]
	float force = ffb->damperGain * -magnitude;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	ed93 7a05 	vldr	s14, [r3, #20]
 8000cb6:	edd7 7a00 	vldr	s15, [r7]
 8000cba:	eef1 7a67 	vneg.f32	s15, s15
 8000cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cc2:	edc7 7a03 	vstr	s15, [r7, #12]
	return force;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	ee07 3a90 	vmov	s15, r3
}
 8000ccc:	eeb0 0a67 	vmov.f32	s0, s15
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <PIDInit>:

#include "pid.h"

static float Abs(float x);

void PIDInit(PID_t *pid) {
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	pid->kP = 10;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a0c      	ldr	r2, [pc, #48]	; (8000d18 <PIDInit+0x3c>)
 8000ce8:	601a      	str	r2, [r3, #0]
	pid->kI = 0;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f04f 0200 	mov.w	r2, #0
 8000cf0:	605a      	str	r2, [r3, #4]
	pid->kD = 0;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f04f 0200 	mov.w	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
	pid->integral = 0;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f04f 0200 	mov.w	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
	pid->preError = 0;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f04f 0200 	mov.w	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	41200000 	.word	0x41200000

08000d1c <RotaryEncInit>:

#include "rotary_encoder.h"
#include "utilities.h"


void RotaryEncInit(RotaryEncoder_t *encoder) {
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	encoder->prevHardCount = 0;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	809a      	strh	r2, [r3, #4]
	encoder->count32 = 0;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
	encoder->speed = 0;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f04f 0200 	mov.w	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <RotaryEncGetCount>:

void RotaryEncSetCount(RotaryEncoder_t *encoder, int32_t count) {
	encoder->count32 = count;
}

int32_t RotaryEncGetCount(RotaryEncoder_t *encoder) {
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	return encoder->count32;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <RotaryEncUpdate>:
	return encoder->speed;
}


void RotaryEncUpdate(RotaryEncoder_t *encoder, uint16_t newCount,
		float deltaTimeMs) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	460b      	mov	r3, r1
 8000d66:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d6a:	817b      	strh	r3, [r7, #10]

	//find change in count
	int32_t deltaCount = (int32_t)newCount - encoder->prevHardCount;
 8000d6c:	897b      	ldrh	r3, [r7, #10]
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	8892      	ldrh	r2, [r2, #4]
 8000d72:	1a9b      	subs	r3, r3, r2
 8000d74:	617b      	str	r3, [r7, #20]

	//newCount did not wrap around
	if(Abs(deltaCount) < ENC_COUNT_WRAP_THRESHOLD) {
 8000d76:	6978      	ldr	r0, [r7, #20]
 8000d78:	f000 f831 	bl	8000dde <Abs>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8000d82:	4293      	cmp	r3, r2
 8000d84:	dc06      	bgt.n	8000d94 <RotaryEncUpdate+0x38>
		encoder->count32 += deltaCount;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	441a      	add	r2, r3
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	e01d      	b.n	8000dd0 <RotaryEncUpdate+0x74>
	}
	//newCount wrapped around
	else {
		//newCount underflow
		if(encoder->prevHardCount < newCount){
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	889b      	ldrh	r3, [r3, #4]
 8000d98:	897a      	ldrh	r2, [r7, #10]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d90d      	bls.n	8000dba <RotaryEncUpdate+0x5e>
			encoder->count32 -= (int32_t)0xFFFF + encoder->prevHardCount -
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	889b      	ldrh	r3, [r3, #4]
 8000da6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000daa:	33ff      	adds	r3, #255	; 0xff
 8000dac:	8979      	ldrh	r1, [r7, #10]
 8000dae:	1a5b      	subs	r3, r3, r1
					newCount + 1;
 8000db0:	3301      	adds	r3, #1
			encoder->count32 -= (int32_t)0xFFFF + encoder->prevHardCount -
 8000db2:	1ad2      	subs	r2, r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	e00a      	b.n	8000dd0 <RotaryEncUpdate+0x74>
		}
		//newCount overflow
		else {
			encoder->count32 += (int32_t)0xFFFF - encoder->prevHardCount + 1 +
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	889b      	ldrh	r3, [r3, #4]
 8000dc2:	f5c3 3180 	rsb	r1, r3, #65536	; 0x10000
 8000dc6:	897b      	ldrh	r3, [r7, #10]
 8000dc8:	440b      	add	r3, r1
 8000dca:	441a      	add	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	601a      	str	r2, [r3, #0]
	//TODO: switch to UnwrapAtThreshold16 function
//	encoder->count32 += UnwrapAtThreshold16(newCount, encoder->prevHardCount,
//			ENC_COUNT_WRAP_THRESHOLD);

	//update previous hardware count
	encoder->prevHardCount = newCount;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	897a      	ldrh	r2, [r7, #10]
 8000dd4:	809a      	strh	r2, [r3, #4]
}
 8000dd6:	bf00      	nop
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <Abs>:
			return 0xFFFF - (int32_t)currentCount + newCount + 1;
		}
	}
}

int32_t Abs(int32_t x) {
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
	return x > 0 ? x : -x;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	bfb8      	it	lt
 8000dec:	425b      	neglt	r3, r3
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <CurrentSenseInit>:

//private function forward declarations
static void Ina219WriteRegister(Ina219_t *cSense, Ina219Reg reg, uint16_t data);
static uint16_t Ina219ReadRegister(Ina219_t *cSense, Ina219Reg reg);

void CurrentSenseInit(Ina219_t *cSense, I2C_HandleTypeDef *hi2c) {
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
 8000e02:	6039      	str	r1, [r7, #0]
	cSense->hi2c = hi2c;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	683a      	ldr	r2, [r7, #0]
 8000e08:	601a      	str	r2, [r3, #0]

	//uint16_t test = Ina219ReadRegister(cSense, INA219_CONFIG);

	//Soft reset INA219
	Ina219WriteRegister(cSense, INA219_CONFIG, 0b1000000000000000);
 8000e0a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e0e:	2100      	movs	r1, #0
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f000 f810 	bl	8000e36 <Ina219WriteRegister>
	 * PGA: +/- 320mV
	 * BADC: 12-bit
	 * SADC: 12-bit
	 * Operating Mode: Shunt and bus, continuous
	 */
	Ina219WriteRegister(cSense, INA219_CONFIG, 0b0001100110011111);
 8000e16:	f641 129f 	movw	r2, #6559	; 0x199f
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f000 f80a 	bl	8000e36 <Ina219WriteRegister>

	//Calibration
	Ina219WriteRegister(cSense, INA219_CALIBRATION, 4096);
 8000e22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e26:	2105      	movs	r1, #5
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f000 f804 	bl	8000e36 <Ina219WriteRegister>

}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <Ina219WriteRegister>:
	int16_t data = *(int16_t *)&rawData;
	return data * 0.0001f;
}

static void Ina219WriteRegister(Ina219_t *cSense, Ina219Reg reg,
		uint16_t data) {
 8000e36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af02      	add	r7, sp, #8
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	460b      	mov	r3, r1
 8000e42:	70fb      	strb	r3, [r7, #3]
 8000e44:	4613      	mov	r3, r2
 8000e46:	803b      	strh	r3, [r7, #0]
 8000e48:	466b      	mov	r3, sp
 8000e4a:	461e      	mov	r6, r3
	//Prepare data for transmit
	const uint8_t TX_DATA_LENGTH = 3;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	74fb      	strb	r3, [r7, #19]
	uint8_t txData[TX_DATA_LENGTH];
 8000e50:	7cfb      	ldrb	r3, [r7, #19]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	7cfb      	ldrb	r3, [r7, #19]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	4698      	mov	r8, r3
 8000e5c:	4691      	mov	r9, r2
 8000e5e:	f04f 0200 	mov.w	r2, #0
 8000e62:	f04f 0300 	mov.w	r3, #0
 8000e66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e72:	7cfb      	ldrb	r3, [r7, #19]
 8000e74:	2200      	movs	r2, #0
 8000e76:	461c      	mov	r4, r3
 8000e78:	4615      	mov	r5, r2
 8000e7a:	f04f 0200 	mov.w	r2, #0
 8000e7e:	f04f 0300 	mov.w	r3, #0
 8000e82:	00eb      	lsls	r3, r5, #3
 8000e84:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e88:	00e2      	lsls	r2, r4, #3
 8000e8a:	7cfb      	ldrb	r3, [r7, #19]
 8000e8c:	3307      	adds	r3, #7
 8000e8e:	08db      	lsrs	r3, r3, #3
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	ebad 0d03 	sub.w	sp, sp, r3
 8000e96:	ab02      	add	r3, sp, #8
 8000e98:	3300      	adds	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
	txData[0] = (uint8_t)reg;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	78fa      	ldrb	r2, [r7, #3]
 8000ea0:	701a      	strb	r2, [r3, #0]
	txData[1] = (uint8_t)((data >> 8) & 0xFF);
 8000ea2:	883b      	ldrh	r3, [r7, #0]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	705a      	strb	r2, [r3, #1]
	txData[2] = (uint8_t)(data & 0xFF);
 8000eae:	883b      	ldrh	r3, [r7, #0]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	709a      	strb	r2, [r3, #2]

	//Transmit register address with provided data
	HAL_I2C_Master_Transmit(cSense->hi2c, INA219_ADDR, txData, TX_DATA_LENGTH,
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6818      	ldr	r0, [r3, #0]
 8000eba:	7cfb      	ldrb	r3, [r7, #19]
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec2:	9200      	str	r2, [sp, #0]
 8000ec4:	68fa      	ldr	r2, [r7, #12]
 8000ec6:	2180      	movs	r1, #128	; 0x80
 8000ec8:	f001 fb50 	bl	800256c <HAL_I2C_Master_Transmit>
 8000ecc:	46b5      	mov	sp, r6
			HAL_MAX_DELAY);
}
 8000ece:	bf00      	nop
 8000ed0:	371c      	adds	r7, #28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000ed8 <MotorInit>:
#include "devices/motor.h"

static int32_t Abs(int32_t x);

void MotorInit(Motor_t *motor, TIM_HandleTypeDef *htim, uint32_t pwmCh,
		GPIO_t reverseGpio, GPIO_t forwardGpio) {
 8000ed8:	b082      	sub	sp, #8
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b084      	sub	sp, #16
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	60f8      	str	r0, [r7, #12]
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
 8000ee6:	61fb      	str	r3, [r7, #28]
	motor->htim = htim;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	601a      	str	r2, [r3, #0]
	motor->pwmCh = pwmCh;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	605a      	str	r2, [r3, #4]
	motor->reverseGpio = reverseGpio;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	3310      	adds	r3, #16
 8000ef8:	f107 021c 	add.w	r2, r7, #28
 8000efc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f00:	e883 0003 	stmia.w	r3, {r0, r1}
	motor->forwardGpio = forwardGpio;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	3308      	adds	r3, #8
 8000f08:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000f0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f10:	e883 0003 	stmia.w	r3, {r0, r1}
	motor->offset = 0;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2200      	movs	r2, #0
 8000f18:	839a      	strh	r2, [r3, #28]
	MotorSetDirection(motor, DIR_STOP);
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	68f8      	ldr	r0, [r7, #12]
 8000f1e:	f000 f81b 	bl	8000f58 <MotorSetDirection>
}
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f2c:	b002      	add	sp, #8
 8000f2e:	4770      	bx	lr

08000f30 <MotorStartPWM>:

void MotorStartPWM(Motor_t *motor) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	//make sure motor is stopped
	MotorSetDirection(motor, DIR_STOP);
 8000f38:	2101      	movs	r1, #1
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f000 f80c 	bl	8000f58 <MotorSetDirection>

	HAL_TIM_PWM_Start(motor->htim, motor->pwmCh);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	f005 f8fc 	bl	8006148 <HAL_TIM_PWM_Start>
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <MotorSetDirection>:

uint16_t MotorGetOffset(Motor_t *motor) {
	return motor->offset;
}

void MotorSetDirection(Motor_t *motor, MotorDirection_t dir) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	70fb      	strb	r3, [r7, #3]

	//Set appropriate GPIO based on requested direction
	switch(dir) {
 8000f64:	78fb      	ldrb	r3, [r7, #3]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d012      	beq.n	8000f90 <MotorSetDirection+0x38>
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d121      	bne.n	8000fb2 <MotorSetDirection+0x5a>
	case DIR_FORWARD:
		HAL_GPIO_WritePin(motor->forwardGpio.port, motor->forwardGpio.pin,
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6898      	ldr	r0, [r3, #8]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	899b      	ldrh	r3, [r3, #12]
 8000f76:	2201      	movs	r2, #1
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f001 fa35 	bl	80023e8 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		HAL_GPIO_WritePin(motor->reverseGpio.port, motor->reverseGpio.pin,
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6918      	ldr	r0, [r3, #16]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	8a9b      	ldrh	r3, [r3, #20]
 8000f86:	2200      	movs	r2, #0
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f001 fa2d 	bl	80023e8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 8000f8e:	e011      	b.n	8000fb4 <MotorSetDirection+0x5c>
	case DIR_REVERSE:
		HAL_GPIO_WritePin(motor->forwardGpio.port, motor->forwardGpio.pin,
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6898      	ldr	r0, [r3, #8]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	899b      	ldrh	r3, [r3, #12]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f001 fa24 	bl	80023e8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(motor->reverseGpio.port, motor->reverseGpio.pin,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6918      	ldr	r0, [r3, #16]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	8a9b      	ldrh	r3, [r3, #20]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4619      	mov	r1, r3
 8000fac:	f001 fa1c 	bl	80023e8 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		break;
 8000fb0:	e000      	b.n	8000fb4 <MotorSetDirection+0x5c>
	default:
		break;
 8000fb2:	bf00      	nop
	}

	motor->direction = dir;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	78fa      	ldrb	r2, [r7, #3]
 8000fb8:	761a      	strb	r2, [r3, #24]

	MotorSetSpeed(motor, 0);
 8000fba:	2100      	movs	r1, #0
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f000 f804 	bl	8000fca <MotorSetSpeed>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <MotorSetSpeed>:
MotorDirection_t MotorGetDirection(Motor_t *motor) {
	return motor->direction;
}


void MotorSetSpeed(Motor_t *motor, uint16_t speed) {
 8000fca:	b480      	push	{r7}
 8000fcc:	b085      	sub	sp, #20
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	807b      	strh	r3, [r7, #2]
	motor->speed = speed;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	887a      	ldrh	r2, [r7, #2]
 8000fda:	835a      	strh	r2, [r3, #26]

	if(motor->speed > 0) {
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	8b5b      	ldrh	r3, [r3, #26]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d03e      	beq.n	8001062 <MotorSetSpeed+0x98>
		uint32_t pwmVal = (uint32_t)motor->speed + motor->offset;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	8b5b      	ldrh	r3, [r3, #26]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	8b9b      	ldrh	r3, [r3, #28]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, pwmVal);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d105      	bne.n	8001006 <MotorSetSpeed+0x3c>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else {
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
	}
}
 8001004:	e065      	b.n	80010d2 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, pwmVal);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	2b04      	cmp	r3, #4
 800100c:	d105      	bne.n	800101a <MotorSetSpeed+0x50>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	6393      	str	r3, [r2, #56]	; 0x38
 8001018:	e05b      	b.n	80010d2 <MotorSetSpeed+0x108>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b08      	cmp	r3, #8
 8001020:	d105      	bne.n	800102e <MotorSetSpeed+0x64>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800102c:	e051      	b.n	80010d2 <MotorSetSpeed+0x108>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b0c      	cmp	r3, #12
 8001034:	d105      	bne.n	8001042 <MotorSetSpeed+0x78>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	6413      	str	r3, [r2, #64]	; 0x40
 8001040:	e047      	b.n	80010d2 <MotorSetSpeed+0x108>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	2b10      	cmp	r3, #16
 8001048:	d105      	bne.n	8001056 <MotorSetSpeed+0x8c>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6593      	str	r3, [r2, #88]	; 0x58
 8001054:	e03d      	b.n	80010d2 <MotorSetSpeed+0x108>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001060:	e037      	b.n	80010d2 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d105      	bne.n	8001076 <MotorSetSpeed+0xac>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2200      	movs	r2, #0
 8001072:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001074:	e02d      	b.n	80010d2 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2b04      	cmp	r3, #4
 800107c:	d105      	bne.n	800108a <MotorSetSpeed+0xc0>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	2300      	movs	r3, #0
 8001086:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001088:	e023      	b.n	80010d2 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b08      	cmp	r3, #8
 8001090:	d105      	bne.n	800109e <MotorSetSpeed+0xd4>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	2300      	movs	r3, #0
 800109a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800109c:	e019      	b.n	80010d2 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b0c      	cmp	r3, #12
 80010a4:	d105      	bne.n	80010b2 <MotorSetSpeed+0xe8>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	2300      	movs	r3, #0
 80010ae:	6413      	str	r3, [r2, #64]	; 0x40
}
 80010b0:	e00f      	b.n	80010d2 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b10      	cmp	r3, #16
 80010b8:	d105      	bne.n	80010c6 <MotorSetSpeed+0xfc>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	2300      	movs	r3, #0
 80010c2:	6593      	str	r3, [r2, #88]	; 0x58
}
 80010c4:	e005      	b.n	80010d2 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	2300      	movs	r3, #0
 80010ce:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80010d0:	e7ff      	b.n	80010d2 <MotorSetSpeed+0x108>
 80010d2:	bf00      	nop
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <MotorSetPower>:

uint16_t MotorGetSpeed(Motor_t *motor) {
	return motor->speed;
}

void MotorSetPower(Motor_t *motor, int32_t power) {
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	6039      	str	r1, [r7, #0]
	//determine direction based on sign of power
	if(power < 0) {
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	da04      	bge.n	80010f8 <MotorSetPower+0x1a>
		MotorSetDirection(motor, DIR_REVERSE);
 80010ee:	2100      	movs	r1, #0
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff31 	bl	8000f58 <MotorSetDirection>
 80010f6:	e006      	b.n	8001106 <MotorSetPower+0x28>
	}
	else if(power > 0) {
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	dd03      	ble.n	8001106 <MotorSetPower+0x28>
		MotorSetDirection(motor, DIR_FORWARD);
 80010fe:	2102      	movs	r1, #2
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff29 	bl	8000f58 <MotorSetDirection>
	}

	MotorSetSpeed(motor, (uint16_t)Abs(power));
 8001106:	6838      	ldr	r0, [r7, #0]
 8001108:	f000 f80a 	bl	8001120 <Abs>
 800110c:	4603      	mov	r3, r0
 800110e:	b29b      	uxth	r3, r3
 8001110:	4619      	mov	r1, r3
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ff59 	bl	8000fca <MotorSetSpeed>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <Abs>:

static int32_t Abs(int32_t x) {
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	if(x < 0) {
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	da02      	bge.n	8001134 <Abs+0x14>
		return x * -1;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	425b      	negs	r3, r3
 8001132:	e000      	b.n	8001136 <Abs+0x16>
	}
	else {
		return x;
 8001134:	687b      	ldr	r3, [r7, #4]
	}
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800114c:	1d39      	adds	r1, r7, #4
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	2201      	movs	r2, #1
 8001154:	4803      	ldr	r0, [pc, #12]	; (8001164 <__io_putchar+0x20>)
 8001156:	f006 f97d 	bl	8007454 <HAL_UART_Transmit>
  return ch;
 800115a:	687b      	ldr	r3, [r7, #4]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200004a0 	.word	0x200004a0

08001168 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	if(htim == &htim4) {
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a06      	ldr	r2, [pc, #24]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d104      	bne.n	8001182 <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin(LD10_GPIO_Port, LD10_Pin);
 8001178:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800117c:	4804      	ldr	r0, [pc, #16]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800117e:	f001 f94b 	bl	8002418 <HAL_GPIO_TogglePin>
	}
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000454 	.word	0x20000454
 8001190:	48001000 	.word	0x48001000
 8001194:	00000000 	.word	0x00000000

08001198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08e      	sub	sp, #56	; 0x38
 800119c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119e:	f000 fe0d 	bl	8001dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a2:	f000 f899 	bl	80012d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a6:	f000 fa8f 	bl	80016c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011aa:	f000 f8fb 	bl	80013a4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80011ae:	f000 f937 	bl	8001420 <MX_SPI1_Init>
  MX_TIM4_Init();
 80011b2:	f000 fa03 	bl	80015bc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80011b6:	f000 fa57 	bl	8001668 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80011ba:	f00a fb53 	bl	800b864 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80011be:	f000 f96d 	bl	800149c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  GameHID_t gameHID = {
 80011c2:	2300      	movs	r3, #0
 80011c4:	743b      	strb	r3, [r7, #16]
 80011c6:	2300      	movs	r3, #0
 80011c8:	747b      	strb	r3, [r7, #17]
 80011ca:	2300      	movs	r3, #0
 80011cc:	74bb      	strb	r3, [r7, #18]
		  .joyX = 0,
		  .joyY = 0,
		  .joyB1 = 0
  };

  PIDInit(&pid);
 80011ce:	4838      	ldr	r0, [pc, #224]	; (80012b0 <main+0x118>)
 80011d0:	f7ff fd84 	bl	8000cdc <PIDInit>
  RotaryEncInit(&encoder);
 80011d4:	4837      	ldr	r0, [pc, #220]	; (80012b4 <main+0x11c>)
 80011d6:	f7ff fda1 	bl	8000d1c <RotaryEncInit>

  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80011da:	213c      	movs	r1, #60	; 0x3c
 80011dc:	4836      	ldr	r0, [pc, #216]	; (80012b8 <main+0x120>)
 80011de:	f005 f959 	bl	8006494 <HAL_TIM_Encoder_Start>

  CurrentSenseInit(&currentSense, &hi2c1);
 80011e2:	4936      	ldr	r1, [pc, #216]	; (80012bc <main+0x124>)
 80011e4:	4836      	ldr	r0, [pc, #216]	; (80012c0 <main+0x128>)
 80011e6:	f7ff fe08 	bl	8000dfa <CurrentSenseInit>

  GPIO_t gpioMotorReverse = {
 80011ea:	4a36      	ldr	r2, [pc, #216]	; (80012c4 <main+0x12c>)
 80011ec:	f107 0308 	add.w	r3, r7, #8
 80011f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011f4:	e883 0003 	stmia.w	r3, {r0, r1}
		  .port = MOTOR_FORWARD_GPIO_Port,
		  .pin = MOTOR_FORWARD_Pin
  };

  GPIO_t gpioMotorForward = {
 80011f8:	4a33      	ldr	r2, [pc, #204]	; (80012c8 <main+0x130>)
 80011fa:	463b      	mov	r3, r7
 80011fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001200:	e883 0003 	stmia.w	r3, {r0, r1}
		  .port = MOTOR_REVERSE_GPIO_Port,
		  .pin = MOTOR_REVERSE_Pin
  };

  MotorInit(&motor, &htim1, TIM_CHANNEL_3, gpioMotorReverse, gpioMotorForward);
 8001204:	aa01      	add	r2, sp, #4
 8001206:	463b      	mov	r3, r7
 8001208:	e893 0003 	ldmia.w	r3, {r0, r1}
 800120c:	e882 0003 	stmia.w	r2, {r0, r1}
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	2208      	movs	r2, #8
 8001218:	492c      	ldr	r1, [pc, #176]	; (80012cc <main+0x134>)
 800121a:	482d      	ldr	r0, [pc, #180]	; (80012d0 <main+0x138>)
 800121c:	f7ff fe5c 	bl	8000ed8 <MotorInit>
  //MotorSetOffset(&motor, MOTOR_OFFSET);
  MotorStartPWM(&motor);
 8001220:	482b      	ldr	r0, [pc, #172]	; (80012d0 <main+0x138>)
 8001222:	f7ff fe85 	bl	8000f30 <MotorStartPWM>

  FFBInit(&ffb);
 8001226:	482b      	ldr	r0, [pc, #172]	; (80012d4 <main+0x13c>)
 8001228:	f7ff fd0e 	bl	8000c48 <FFBInit>

  HAL_TIM_Base_Start_IT(&htim1);
 800122c:	4827      	ldr	r0, [pc, #156]	; (80012cc <main+0x134>)
 800122e:	f004 fec9 	bl	8005fc4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t printfCounter = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	623b      	str	r3, [r7, #32]
  int32_t prevEncCount = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  while (1)
  {
	  RotaryEncUpdate(&encoder, __HAL_TIM_GET_COUNTER(&htim4), 1);
 800123a:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <main+0x120>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001240:	b29b      	uxth	r3, r3
 8001242:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001246:	4619      	mov	r1, r3
 8001248:	481a      	ldr	r0, [pc, #104]	; (80012b4 <main+0x11c>)
 800124a:	f7ff fd87 	bl	8000d5c <RotaryEncUpdate>
	  int32_t joyYOut = RotaryEncGetCount(&encoder);
 800124e:	4819      	ldr	r0, [pc, #100]	; (80012b4 <main+0x11c>)
 8001250:	f7ff fd78 	bl	8000d44 <RotaryEncGetCount>
 8001254:	61f8      	str	r0, [r7, #28]
	  float speed = (joyYOut - prevEncCount)/0.01;
 8001256:	69fa      	ldr	r2, [r7, #28]
 8001258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f961 	bl	8000524 <__aeabi_i2d>
 8001262:	a311      	add	r3, pc, #68	; (adr r3, 80012a8 <main+0x110>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff faf0 	bl	800084c <__aeabi_ddiv>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f7ff fc98 	bl	8000ba8 <__aeabi_d2f>
 8001278:	4603      	mov	r3, r0
 800127a:	61bb      	str	r3, [r7, #24]

	  //constrain to 8-bit signed integer
	  //joyYOut = Constrain(joyYOut, -127, 127);

	  //Motor control
	  float motorPower = FFBComputeDamperForce(&ffb, speed);
 800127c:	ed97 0a06 	vldr	s0, [r7, #24]
 8001280:	4814      	ldr	r0, [pc, #80]	; (80012d4 <main+0x13c>)
 8001282:	f7ff fd0f 	bl	8000ca4 <FFBComputeDamperForce>
 8001286:	ed87 0a05 	vstr	s0, [r7, #20]
	  //float motorPower = ComputePID(&pid, 0, joyYOut);
	  //motorPower = 1500;
	  MotorSetPower(&motor, (int32_t)(motorPower));
 800128a:	edd7 7a05 	vldr	s15, [r7, #20]
 800128e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001292:	ee17 1a90 	vmov	r1, s15
 8001296:	480e      	ldr	r0, [pc, #56]	; (80012d0 <main+0x138>)
 8001298:	f7ff ff21 	bl	80010de <MotorSetPower>
//	  if(printfCounter == 1) {
//		  printf("Current: %f\r\n", CurrentSenseGetCurrent(&currentSense));
//		  printfCounter = 0;
//	  }

	  prevEncCount = joyYOut;
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_Delay(10);
 80012a0:	200a      	movs	r0, #10
 80012a2:	f000 fdf1 	bl	8001e88 <HAL_Delay>
  {
 80012a6:	e7c8      	b.n	800123a <main+0xa2>
 80012a8:	47ae147b 	.word	0x47ae147b
 80012ac:	3f847ae1 	.word	0x3f847ae1
 80012b0:	20000538 	.word	0x20000538
 80012b4:	20000528 	.word	0x20000528
 80012b8:	20000454 	.word	0x20000454
 80012bc:	20000350 	.word	0x20000350
 80012c0:	20000534 	.word	0x20000534
 80012c4:	0800ead8 	.word	0x0800ead8
 80012c8:	0800eae0 	.word	0x0800eae0
 80012cc:	20000408 	.word	0x20000408
 80012d0:	2000054c 	.word	0x2000054c
 80012d4:	2000056c 	.word	0x2000056c

080012d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b09e      	sub	sp, #120	; 0x78
 80012dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80012e2:	2228      	movs	r2, #40	; 0x28
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f00a fecc 	bl	800c084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012fc:	463b      	mov	r3, r7
 80012fe:	223c      	movs	r2, #60	; 0x3c
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f00a febe 	bl	800c084 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001308:	2303      	movs	r3, #3
 800130a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800130c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001310:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001312:	2300      	movs	r3, #0
 8001314:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001316:	2301      	movs	r3, #1
 8001318:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800131a:	2310      	movs	r3, #16
 800131c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800131e:	2302      	movs	r3, #2
 8001320:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001322:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001326:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001328:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800132c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800132e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001332:	4618      	mov	r0, r3
 8001334:	f003 f976 	bl	8004624 <HAL_RCC_OscConfig>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800133e:	f000 fa65 	bl	800180c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001342:	230f      	movs	r3, #15
 8001344:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001346:	2302      	movs	r3, #2
 8001348:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800134a:	2300      	movs	r3, #0
 800134c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800134e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001352:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001354:	2300      	movs	r3, #0
 8001356:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001358:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800135c:	2101      	movs	r1, #1
 800135e:	4618      	mov	r0, r3
 8001360:	f004 f99e 	bl	80056a0 <HAL_RCC_ClockConfig>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800136a:	f000 fa4f 	bl	800180c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <SystemClock_Config+0xc8>)
 8001370:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800137a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800137e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001380:	2300      	movs	r3, #0
 8001382:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001384:	463b      	mov	r3, r7
 8001386:	4618      	mov	r0, r3
 8001388:	f004 fbc0 	bl	8005b0c <HAL_RCCEx_PeriphCLKConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001392:	f000 fa3b 	bl	800180c <Error_Handler>
  }
}
 8001396:	bf00      	nop
 8001398:	3778      	adds	r7, #120	; 0x78
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	00021021 	.word	0x00021021

080013a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <MX_I2C1_Init+0x74>)
 80013aa:	4a1c      	ldr	r2, [pc, #112]	; (800141c <MX_I2C1_Init+0x78>)
 80013ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80013ae:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <MX_I2C1_Init+0x74>)
 80013b0:	f240 220b 	movw	r2, #523	; 0x20b
 80013b4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <MX_I2C1_Init+0x74>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013bc:	4b16      	ldr	r3, [pc, #88]	; (8001418 <MX_I2C1_Init+0x74>)
 80013be:	2201      	movs	r2, #1
 80013c0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <MX_I2C1_Init+0x74>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <MX_I2C1_Init+0x74>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <MX_I2C1_Init+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013d4:	4b10      	ldr	r3, [pc, #64]	; (8001418 <MX_I2C1_Init+0x74>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <MX_I2C1_Init+0x74>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013e0:	480d      	ldr	r0, [pc, #52]	; (8001418 <MX_I2C1_Init+0x74>)
 80013e2:	f001 f833 	bl	800244c <HAL_I2C_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013ec:	f000 fa0e 	bl	800180c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013f0:	2100      	movs	r1, #0
 80013f2:	4809      	ldr	r0, [pc, #36]	; (8001418 <MX_I2C1_Init+0x74>)
 80013f4:	f001 fbbe 	bl	8002b74 <HAL_I2CEx_ConfigAnalogFilter>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80013fe:	f000 fa05 	bl	800180c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001402:	2100      	movs	r1, #0
 8001404:	4804      	ldr	r0, [pc, #16]	; (8001418 <MX_I2C1_Init+0x74>)
 8001406:	f001 fc00 	bl	8002c0a <HAL_I2CEx_ConfigDigitalFilter>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001410:	f000 f9fc 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000350 	.word	0x20000350
 800141c:	40005400 	.word	0x40005400

08001420 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <MX_SPI1_Init+0x74>)
 8001426:	4a1c      	ldr	r2, [pc, #112]	; (8001498 <MX_SPI1_Init+0x78>)
 8001428:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <MX_SPI1_Init+0x74>)
 800142c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001430:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001432:	4b18      	ldr	r3, [pc, #96]	; (8001494 <MX_SPI1_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001438:	4b16      	ldr	r3, [pc, #88]	; (8001494 <MX_SPI1_Init+0x74>)
 800143a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800143e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_SPI1_Init+0x74>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <MX_SPI1_Init+0x74>)
 8001448:	2200      	movs	r2, #0
 800144a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_SPI1_Init+0x74>)
 800144e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001452:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_SPI1_Init+0x74>)
 8001456:	2208      	movs	r2, #8
 8001458:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_SPI1_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_SPI1_Init+0x74>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <MX_SPI1_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_SPI1_Init+0x74>)
 800146e:	2207      	movs	r2, #7
 8001470:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <MX_SPI1_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_SPI1_Init+0x74>)
 800147a:	2208      	movs	r2, #8
 800147c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_SPI1_Init+0x74>)
 8001480:	f004 fcf4 	bl	8005e6c <HAL_SPI_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800148a:	f000 f9bf 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200003a4 	.word	0x200003a4
 8001498:	40013000 	.word	0x40013000

0800149c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b096      	sub	sp, #88	; 0x58
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]
 80014be:	615a      	str	r2, [r3, #20]
 80014c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	222c      	movs	r2, #44	; 0x2c
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f00a fddb 	bl	800c084 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014ce:	4b39      	ldr	r3, [pc, #228]	; (80015b4 <MX_TIM1_Init+0x118>)
 80014d0:	4a39      	ldr	r2, [pc, #228]	; (80015b8 <MX_TIM1_Init+0x11c>)
 80014d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014d4:	4b37      	ldr	r3, [pc, #220]	; (80015b4 <MX_TIM1_Init+0x118>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014da:	4b36      	ldr	r3, [pc, #216]	; (80015b4 <MX_TIM1_Init+0x118>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2400-1;
 80014e0:	4b34      	ldr	r3, [pc, #208]	; (80015b4 <MX_TIM1_Init+0x118>)
 80014e2:	f640 125f 	movw	r2, #2399	; 0x95f
 80014e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e8:	4b32      	ldr	r3, [pc, #200]	; (80015b4 <MX_TIM1_Init+0x118>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014ee:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <MX_TIM1_Init+0x118>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014f4:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <MX_TIM1_Init+0x118>)
 80014f6:	2280      	movs	r2, #128	; 0x80
 80014f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014fa:	482e      	ldr	r0, [pc, #184]	; (80015b4 <MX_TIM1_Init+0x118>)
 80014fc:	f004 fdcc 	bl	8006098 <HAL_TIM_PWM_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001506:	f000 f981 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150a:	2300      	movs	r3, #0
 800150c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001516:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800151a:	4619      	mov	r1, r3
 800151c:	4825      	ldr	r0, [pc, #148]	; (80015b4 <MX_TIM1_Init+0x118>)
 800151e:	f005 fe2f 	bl	8007180 <HAL_TIMEx_MasterConfigSynchronization>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001528:	f000 f970 	bl	800180c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800152c:	2360      	movs	r3, #96	; 0x60
 800152e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001534:	2300      	movs	r3, #0
 8001536:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001538:	2300      	movs	r3, #0
 800153a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001548:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800154c:	2208      	movs	r2, #8
 800154e:	4619      	mov	r1, r3
 8001550:	4818      	ldr	r0, [pc, #96]	; (80015b4 <MX_TIM1_Init+0x118>)
 8001552:	f005 f94d 	bl	80067f0 <HAL_TIM_PWM_ConfigChannel>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800155c:	f000 f956 	bl	800180c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001578:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001582:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	4619      	mov	r1, r3
 8001594:	4807      	ldr	r0, [pc, #28]	; (80015b4 <MX_TIM1_Init+0x118>)
 8001596:	f005 fe73 	bl	8007280 <HAL_TIMEx_ConfigBreakDeadTime>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80015a0:	f000 f934 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015a4:	4803      	ldr	r0, [pc, #12]	; (80015b4 <MX_TIM1_Init+0x118>)
 80015a6:	f000 fa4d 	bl	8001a44 <HAL_TIM_MspPostInit>

}
 80015aa:	bf00      	nop
 80015ac:	3758      	adds	r7, #88	; 0x58
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000408 	.word	0x20000408
 80015b8:	40012c00 	.word	0x40012c00

080015bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08c      	sub	sp, #48	; 0x30
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015c2:	f107 030c 	add.w	r3, r7, #12
 80015c6:	2224      	movs	r2, #36	; 0x24
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f00a fd5a 	bl	800c084 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d0:	463b      	mov	r3, r7
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015da:	4b21      	ldr	r3, [pc, #132]	; (8001660 <MX_TIM4_Init+0xa4>)
 80015dc:	4a21      	ldr	r2, [pc, #132]	; (8001664 <MX_TIM4_Init+0xa8>)
 80015de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015e0:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <MX_TIM4_Init+0xa4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e6:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <MX_TIM4_Init+0xa4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80015ec:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <MX_TIM4_Init+0xa4>)
 80015ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f4:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <MX_TIM4_Init+0xa4>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015fa:	4b19      	ldr	r3, [pc, #100]	; (8001660 <MX_TIM4_Init+0xa4>)
 80015fc:	2280      	movs	r2, #128	; 0x80
 80015fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001600:	2303      	movs	r3, #3
 8001602:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001604:	2300      	movs	r3, #0
 8001606:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001608:	2301      	movs	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800160c:	2300      	movs	r3, #0
 800160e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 4;
 8001610:	2304      	movs	r3, #4
 8001612:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001614:	2300      	movs	r3, #0
 8001616:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001618:	2301      	movs	r3, #1
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800161c:	2300      	movs	r3, #0
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 4;
 8001620:	2304      	movs	r3, #4
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	4619      	mov	r1, r3
 800162a:	480d      	ldr	r0, [pc, #52]	; (8001660 <MX_TIM4_Init+0xa4>)
 800162c:	f004 fe8c 	bl	8006348 <HAL_TIM_Encoder_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001636:	f000 f8e9 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163a:	2300      	movs	r3, #0
 800163c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001642:	463b      	mov	r3, r7
 8001644:	4619      	mov	r1, r3
 8001646:	4806      	ldr	r0, [pc, #24]	; (8001660 <MX_TIM4_Init+0xa4>)
 8001648:	f005 fd9a 	bl	8007180 <HAL_TIMEx_MasterConfigSynchronization>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001652:	f000 f8db 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	3730      	adds	r7, #48	; 0x30
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000454 	.word	0x20000454
 8001664:	40000800 	.word	0x40000800

08001668 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800166c:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <MX_USART1_UART_Init+0x58>)
 800166e:	4a15      	ldr	r2, [pc, #84]	; (80016c4 <MX_USART1_UART_Init+0x5c>)
 8001670:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <MX_USART1_UART_Init+0x58>)
 8001674:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001678:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <MX_USART1_UART_Init+0x58>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <MX_USART1_UART_Init+0x58>)
 8001682:	2200      	movs	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <MX_USART1_UART_Init+0x58>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <MX_USART1_UART_Init+0x58>)
 800168e:	220c      	movs	r2, #12
 8001690:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <MX_USART1_UART_Init+0x58>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_USART1_UART_Init+0x58>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <MX_USART1_UART_Init+0x58>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <MX_USART1_UART_Init+0x58>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <MX_USART1_UART_Init+0x58>)
 80016ac:	f005 fe84 	bl	80073b8 <HAL_UART_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016b6:	f000 f8a9 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200004a0 	.word	0x200004a0
 80016c4:	40013800 	.word	0x40013800

080016c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08c      	sub	sp, #48	; 0x30
 80016cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ce:	f107 031c 	add.w	r3, r7, #28
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
 80016dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016de:	4b49      	ldr	r3, [pc, #292]	; (8001804 <MX_GPIO_Init+0x13c>)
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	4a48      	ldr	r2, [pc, #288]	; (8001804 <MX_GPIO_Init+0x13c>)
 80016e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016e8:	6153      	str	r3, [r2, #20]
 80016ea:	4b46      	ldr	r3, [pc, #280]	; (8001804 <MX_GPIO_Init+0x13c>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f2:	61bb      	str	r3, [r7, #24]
 80016f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f6:	4b43      	ldr	r3, [pc, #268]	; (8001804 <MX_GPIO_Init+0x13c>)
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	4a42      	ldr	r2, [pc, #264]	; (8001804 <MX_GPIO_Init+0x13c>)
 80016fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001700:	6153      	str	r3, [r2, #20]
 8001702:	4b40      	ldr	r3, [pc, #256]	; (8001804 <MX_GPIO_Init+0x13c>)
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800170e:	4b3d      	ldr	r3, [pc, #244]	; (8001804 <MX_GPIO_Init+0x13c>)
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	4a3c      	ldr	r2, [pc, #240]	; (8001804 <MX_GPIO_Init+0x13c>)
 8001714:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001718:	6153      	str	r3, [r2, #20]
 800171a:	4b3a      	ldr	r3, [pc, #232]	; (8001804 <MX_GPIO_Init+0x13c>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	4b37      	ldr	r3, [pc, #220]	; (8001804 <MX_GPIO_Init+0x13c>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	4a36      	ldr	r2, [pc, #216]	; (8001804 <MX_GPIO_Init+0x13c>)
 800172c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001730:	6153      	str	r3, [r2, #20]
 8001732:	4b34      	ldr	r3, [pc, #208]	; (8001804 <MX_GPIO_Init+0x13c>)
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800173e:	4b31      	ldr	r3, [pc, #196]	; (8001804 <MX_GPIO_Init+0x13c>)
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	4a30      	ldr	r2, [pc, #192]	; (8001804 <MX_GPIO_Init+0x13c>)
 8001744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001748:	6153      	str	r3, [r2, #20]
 800174a:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <MX_GPIO_Init+0x13c>)
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001756:	4b2b      	ldr	r3, [pc, #172]	; (8001804 <MX_GPIO_Init+0x13c>)
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	4a2a      	ldr	r2, [pc, #168]	; (8001804 <MX_GPIO_Init+0x13c>)
 800175c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001760:	6153      	str	r3, [r2, #20]
 8001762:	4b28      	ldr	r3, [pc, #160]	; (8001804 <MX_GPIO_Init+0x13c>)
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800176e:	2200      	movs	r2, #0
 8001770:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001774:	4824      	ldr	r0, [pc, #144]	; (8001808 <MX_GPIO_Init+0x140>)
 8001776:	f000 fe37 	bl	80023e8 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_REVERSE_Pin|MOTOR_FORWARD_Pin, GPIO_PIN_RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001784:	f000 fe30 	bl	80023e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001788:	2337      	movs	r3, #55	; 0x37
 800178a:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800178c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	4619      	mov	r1, r3
 800179c:	481a      	ldr	r0, [pc, #104]	; (8001808 <MX_GPIO_Init+0x140>)
 800179e:	f000 fca9 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80017a2:	f64f 7308 	movw	r3, #65288	; 0xff08
 80017a6:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a8:	2301      	movs	r3, #1
 80017aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017b4:	f107 031c 	add.w	r3, r7, #28
 80017b8:	4619      	mov	r1, r3
 80017ba:	4813      	ldr	r0, [pc, #76]	; (8001808 <MX_GPIO_Init+0x140>)
 80017bc:	f000 fc9a 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017c0:	2301      	movs	r3, #1
 80017c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c4:	2300      	movs	r3, #0
 80017c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 031c 	add.w	r3, r7, #28
 80017d0:	4619      	mov	r1, r3
 80017d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d6:	f000 fc8d 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_REVERSE_Pin MOTOR_FORWARD_Pin */
  GPIO_InitStruct.Pin = MOTOR_REVERSE_Pin|MOTOR_FORWARD_Pin;
 80017da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	4619      	mov	r1, r3
 80017f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f6:	f000 fc7d 	bl	80020f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017fa:	bf00      	nop
 80017fc:	3730      	adds	r7, #48	; 0x30
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000
 8001808:	48001000 	.word	0x48001000

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
}
 8001812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001814:	e7fe      	b.n	8001814 <Error_Handler+0x8>
	...

08001818 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <HAL_MspInit+0x44>)
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	4a0e      	ldr	r2, [pc, #56]	; (800185c <HAL_MspInit+0x44>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6193      	str	r3, [r2, #24]
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <HAL_MspInit+0x44>)
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_MspInit+0x44>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	4a08      	ldr	r2, [pc, #32]	; (800185c <HAL_MspInit+0x44>)
 800183c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001840:	61d3      	str	r3, [r2, #28]
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_MspInit+0x44>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800184e:	2007      	movs	r0, #7
 8001850:	f000 fc0e 	bl	8002070 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40021000 	.word	0x40021000

08001860 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a17      	ldr	r2, [pc, #92]	; (80018dc <HAL_I2C_MspInit+0x7c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d127      	bne.n	80018d2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001882:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <HAL_I2C_MspInit+0x80>)
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	4a16      	ldr	r2, [pc, #88]	; (80018e0 <HAL_I2C_MspInit+0x80>)
 8001888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800188c:	6153      	str	r3, [r2, #20]
 800188e:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <HAL_I2C_MspInit+0x80>)
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800189a:	23c0      	movs	r3, #192	; 0xc0
 800189c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800189e:	2312      	movs	r3, #18
 80018a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a6:	2303      	movs	r3, #3
 80018a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018aa:	2304      	movs	r3, #4
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	480b      	ldr	r0, [pc, #44]	; (80018e4 <HAL_I2C_MspInit+0x84>)
 80018b6:	f000 fc1d 	bl	80020f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_I2C_MspInit+0x80>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	4a08      	ldr	r2, [pc, #32]	; (80018e0 <HAL_I2C_MspInit+0x80>)
 80018c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018c4:	61d3      	str	r3, [r2, #28]
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_I2C_MspInit+0x80>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018d2:	bf00      	nop
 80018d4:	3728      	adds	r7, #40	; 0x28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40005400 	.word	0x40005400
 80018e0:	40021000 	.word	0x40021000
 80018e4:	48000400 	.word	0x48000400

080018e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	; 0x28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a17      	ldr	r2, [pc, #92]	; (8001964 <HAL_SPI_MspInit+0x7c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d128      	bne.n	800195c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800190a:	4b17      	ldr	r3, [pc, #92]	; (8001968 <HAL_SPI_MspInit+0x80>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	4a16      	ldr	r2, [pc, #88]	; (8001968 <HAL_SPI_MspInit+0x80>)
 8001910:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001914:	6193      	str	r3, [r2, #24]
 8001916:	4b14      	ldr	r3, [pc, #80]	; (8001968 <HAL_SPI_MspInit+0x80>)
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	4b11      	ldr	r3, [pc, #68]	; (8001968 <HAL_SPI_MspInit+0x80>)
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	4a10      	ldr	r2, [pc, #64]	; (8001968 <HAL_SPI_MspInit+0x80>)
 8001928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192c:	6153      	str	r3, [r2, #20]
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <HAL_SPI_MspInit+0x80>)
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800193a:	23e0      	movs	r3, #224	; 0xe0
 800193c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001946:	2303      	movs	r3, #3
 8001948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800194a:	2305      	movs	r3, #5
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001958:	f000 fbcc 	bl	80020f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800195c:	bf00      	nop
 800195e:	3728      	adds	r7, #40	; 0x28
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40013000 	.word	0x40013000
 8001968:	40021000 	.word	0x40021000

0800196c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <HAL_TIM_PWM_MspInit+0x38>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d10b      	bne.n	8001996 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	4a09      	ldr	r2, [pc, #36]	; (80019a8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001984:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001988:	6193      	str	r3, [r2, #24]
 800198a:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <HAL_TIM_PWM_MspInit+0x3c>)
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001996:	bf00      	nop
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40012c00 	.word	0x40012c00
 80019a8:	40021000 	.word	0x40021000

080019ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a1b      	ldr	r2, [pc, #108]	; (8001a38 <HAL_TIM_Encoder_MspInit+0x8c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d130      	bne.n	8001a30 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019ce:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <HAL_TIM_Encoder_MspInit+0x90>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	4a1a      	ldr	r2, [pc, #104]	; (8001a3c <HAL_TIM_Encoder_MspInit+0x90>)
 80019d4:	f043 0304 	orr.w	r3, r3, #4
 80019d8:	61d3      	str	r3, [r2, #28]
 80019da:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <HAL_TIM_Encoder_MspInit+0x90>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019e6:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <HAL_TIM_Encoder_MspInit+0x90>)
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	4a14      	ldr	r2, [pc, #80]	; (8001a3c <HAL_TIM_Encoder_MspInit+0x90>)
 80019ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019f0:	6153      	str	r3, [r2, #20]
 80019f2:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_TIM_Encoder_MspInit+0x90>)
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80019fe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	2302      	movs	r3, #2
 8001a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a10:	2302      	movs	r3, #2
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4809      	ldr	r0, [pc, #36]	; (8001a40 <HAL_TIM_Encoder_MspInit+0x94>)
 8001a1c:	f000 fb6a 	bl	80020f4 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2100      	movs	r1, #0
 8001a24:	201e      	movs	r0, #30
 8001a26:	f000 fb2e 	bl	8002086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a2a:	201e      	movs	r0, #30
 8001a2c:	f000 fb47 	bl	80020be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a30:	bf00      	nop
 8001a32:	3728      	adds	r7, #40	; 0x28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40000800 	.word	0x40000800
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	48000c00 	.word	0x48000c00

08001a44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 030c 	add.w	r3, r7, #12
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a12      	ldr	r2, [pc, #72]	; (8001aac <HAL_TIM_MspPostInit+0x68>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d11d      	bne.n	8001aa2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_TIM_MspPostInit+0x6c>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	4a11      	ldr	r2, [pc, #68]	; (8001ab0 <HAL_TIM_MspPostInit+0x6c>)
 8001a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a70:	6153      	str	r3, [r2, #20]
 8001a72:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <HAL_TIM_MspPostInit+0x6c>)
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 8001a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001a90:	2306      	movs	r3, #6
 8001a92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a9e:	f000 fb29 	bl	80020f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001aa2:	bf00      	nop
 8001aa4:	3720      	adds	r7, #32
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40012c00 	.word	0x40012c00
 8001ab0:	40021000 	.word	0x40021000

08001ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	; 0x28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a17      	ldr	r2, [pc, #92]	; (8001b30 <HAL_UART_MspInit+0x7c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d127      	bne.n	8001b26 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ad6:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <HAL_UART_MspInit+0x80>)
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	4a16      	ldr	r2, [pc, #88]	; (8001b34 <HAL_UART_MspInit+0x80>)
 8001adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae0:	6193      	str	r3, [r2, #24]
 8001ae2:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <HAL_UART_MspInit+0x80>)
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <HAL_UART_MspInit+0x80>)
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	4a10      	ldr	r2, [pc, #64]	; (8001b34 <HAL_UART_MspInit+0x80>)
 8001af4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001af8:	6153      	str	r3, [r2, #20]
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <HAL_UART_MspInit+0x80>)
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b06:	2330      	movs	r3, #48	; 0x30
 8001b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b12:	2303      	movs	r3, #3
 8001b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b16:	2307      	movs	r3, #7
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4805      	ldr	r0, [pc, #20]	; (8001b38 <HAL_UART_MspInit+0x84>)
 8001b22:	f000 fae7 	bl	80020f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b26:	bf00      	nop
 8001b28:	3728      	adds	r7, #40	; 0x28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40013800 	.word	0x40013800
 8001b34:	40021000 	.word	0x40021000
 8001b38:	48000800 	.word	0x48000800

08001b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <NMI_Handler+0x4>

08001b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b46:	e7fe      	b.n	8001b46 <HardFault_Handler+0x4>

08001b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <MemManage_Handler+0x4>

08001b4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b52:	e7fe      	b.n	8001b52 <BusFault_Handler+0x4>

08001b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <UsageFault_Handler+0x4>

08001b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b88:	f000 f95e 	bl	8001e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b94:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001b96:	f001 f97c 	bl	8002e92 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000a5c 	.word	0x20000a5c

08001ba4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ba8:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <TIM4_IRQHandler+0x10>)
 8001baa:	f004 fd01 	bl	80065b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000454 	.word	0x20000454

08001bb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return 1;
 8001bbc:	2301      	movs	r3, #1
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <_kill>:

int _kill(int pid, int sig)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bd2:	f00a fa2d 	bl	800c030 <__errno>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2216      	movs	r2, #22
 8001bda:	601a      	str	r2, [r3, #0]
  return -1;
 8001bdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <_exit>:

void _exit (int status)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff ffe7 	bl	8001bc8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bfa:	e7fe      	b.n	8001bfa <_exit+0x12>

08001bfc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	e00a      	b.n	8001c24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c0e:	f3af 8000 	nop.w
 8001c12:	4601      	mov	r1, r0
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	60ba      	str	r2, [r7, #8]
 8001c1a:	b2ca      	uxtb	r2, r1
 8001c1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	3301      	adds	r3, #1
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	dbf0      	blt.n	8001c0e <_read+0x12>
  }

  return len;
 8001c2c:	687b      	ldr	r3, [r7, #4]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b086      	sub	sp, #24
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	e009      	b.n	8001c5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	60ba      	str	r2, [r7, #8]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fa77 	bl	8001144 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	dbf1      	blt.n	8001c48 <_write+0x12>
  }
  return len;
 8001c64:	687b      	ldr	r3, [r7, #4]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <_close>:

int _close(int file)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c96:	605a      	str	r2, [r3, #4]
  return 0;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <_isatty>:

int _isatty(int file)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce0:	4a14      	ldr	r2, [pc, #80]	; (8001d34 <_sbrk+0x5c>)
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <_sbrk+0x60>)
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cec:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <_sbrk+0x64>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d102      	bne.n	8001cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <_sbrk+0x64>)
 8001cf6:	4a12      	ldr	r2, [pc, #72]	; (8001d40 <_sbrk+0x68>)
 8001cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <_sbrk+0x64>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d207      	bcs.n	8001d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d08:	f00a f992 	bl	800c030 <__errno>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	220c      	movs	r2, #12
 8001d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295
 8001d16:	e009      	b.n	8001d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d18:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <_sbrk+0x64>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <_sbrk+0x64>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	4a05      	ldr	r2, [pc, #20]	; (8001d3c <_sbrk+0x64>)
 8001d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	2000a000 	.word	0x2000a000
 8001d38:	00000400 	.word	0x00000400
 8001d3c:	2000058c 	.word	0x2000058c
 8001d40:	20000d70 	.word	0x20000d70

08001d44 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <SystemInit+0x20>)
 8001d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d4e:	4a05      	ldr	r2, [pc, #20]	; (8001d64 <SystemInit+0x20>)
 8001d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001da0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d6c:	f7ff ffea 	bl	8001d44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d70:	480c      	ldr	r0, [pc, #48]	; (8001da4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d72:	490d      	ldr	r1, [pc, #52]	; (8001da8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d74:	4a0d      	ldr	r2, [pc, #52]	; (8001dac <LoopForever+0xe>)
  movs r3, #0
 8001d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d78:	e002      	b.n	8001d80 <LoopCopyDataInit>

08001d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7e:	3304      	adds	r3, #4

08001d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d84:	d3f9      	bcc.n	8001d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d86:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d88:	4c0a      	ldr	r4, [pc, #40]	; (8001db4 <LoopForever+0x16>)
  movs r3, #0
 8001d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d8c:	e001      	b.n	8001d92 <LoopFillZerobss>

08001d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d90:	3204      	adds	r2, #4

08001d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d94:	d3fb      	bcc.n	8001d8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d96:	f00a f951 	bl	800c03c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d9a:	f7ff f9fd 	bl	8001198 <main>

08001d9e <LoopForever>:

LoopForever:
    b LoopForever
 8001d9e:	e7fe      	b.n	8001d9e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001da0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da8:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 8001dac:	0800ef4c 	.word	0x0800ef4c
  ldr r2, =_sbss
 8001db0:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8001db4:	20000d6c 	.word	0x20000d6c

08001db8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001db8:	e7fe      	b.n	8001db8 <ADC1_2_IRQHandler>
	...

08001dbc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc0:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <HAL_Init+0x28>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a07      	ldr	r2, [pc, #28]	; (8001de4 <HAL_Init+0x28>)
 8001dc6:	f043 0310 	orr.w	r3, r3, #16
 8001dca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dcc:	2003      	movs	r0, #3
 8001dce:	f000 f94f 	bl	8002070 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f000 f808 	bl	8001de8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dd8:	f7ff fd1e 	bl	8001818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40022000 	.word	0x40022000

08001de8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_InitTick+0x54>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_InitTick+0x58>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 f967 	bl	80020da <HAL_SYSTICK_Config>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00e      	b.n	8001e34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b0f      	cmp	r3, #15
 8001e1a:	d80a      	bhi.n	8001e32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295
 8001e24:	f000 f92f 	bl	8002086 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e28:	4a06      	ldr	r2, [pc, #24]	; (8001e44 <HAL_InitTick+0x5c>)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e000      	b.n	8001e34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	20000008 	.word	0x20000008
 8001e44:	20000004 	.word	0x20000004

08001e48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_IncTick+0x20>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_IncTick+0x24>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	4a04      	ldr	r2, [pc, #16]	; (8001e6c <HAL_IncTick+0x24>)
 8001e5a:	6013      	str	r3, [r2, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000008 	.word	0x20000008
 8001e6c:	20000590 	.word	0x20000590

08001e70 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return uwTick;  
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <HAL_GetTick+0x14>)
 8001e76:	681b      	ldr	r3, [r3, #0]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000590 	.word	0x20000590

08001e88 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e90:	f7ff ffee 	bl	8001e70 <HAL_GetTick>
 8001e94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea0:	d005      	beq.n	8001eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_Delay+0x44>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4413      	add	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001eae:	bf00      	nop
 8001eb0:	f7ff ffde 	bl	8001e70 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d8f7      	bhi.n	8001eb0 <HAL_Delay+0x28>
  {
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000008 	.word	0x20000008

08001ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eec:	4013      	ands	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f02:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	60d3      	str	r3, [r2, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <__NVIC_GetPriorityGrouping+0x18>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	f003 0307 	and.w	r3, r3, #7
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	db0b      	blt.n	8001f5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	f003 021f 	and.w	r2, r3, #31
 8001f4c:	4907      	ldr	r1, [pc, #28]	; (8001f6c <__NVIC_EnableIRQ+0x38>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	2001      	movs	r0, #1
 8001f56:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000e100 	.word	0xe000e100

08001f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	6039      	str	r1, [r7, #0]
 8001f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	db0a      	blt.n	8001f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	490c      	ldr	r1, [pc, #48]	; (8001fbc <__NVIC_SetPriority+0x4c>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	0112      	lsls	r2, r2, #4
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	440b      	add	r3, r1
 8001f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f98:	e00a      	b.n	8001fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4908      	ldr	r1, [pc, #32]	; (8001fc0 <__NVIC_SetPriority+0x50>)
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	3b04      	subs	r3, #4
 8001fa8:	0112      	lsls	r2, r2, #4
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	440b      	add	r3, r1
 8001fae:	761a      	strb	r2, [r3, #24]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000e100 	.word	0xe000e100
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b089      	sub	sp, #36	; 0x24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f1c3 0307 	rsb	r3, r3, #7
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	bf28      	it	cs
 8001fe2:	2304      	movcs	r3, #4
 8001fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	2b06      	cmp	r3, #6
 8001fec:	d902      	bls.n	8001ff4 <NVIC_EncodePriority+0x30>
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3b03      	subs	r3, #3
 8001ff2:	e000      	b.n	8001ff6 <NVIC_EncodePriority+0x32>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43da      	mvns	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	401a      	ands	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800200c:	f04f 31ff 	mov.w	r1, #4294967295
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	fa01 f303 	lsl.w	r3, r1, r3
 8002016:	43d9      	mvns	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	4313      	orrs	r3, r2
         );
}
 800201e:	4618      	mov	r0, r3
 8002020:	3724      	adds	r7, #36	; 0x24
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3b01      	subs	r3, #1
 8002038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800203c:	d301      	bcc.n	8002042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800203e:	2301      	movs	r3, #1
 8002040:	e00f      	b.n	8002062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002042:	4a0a      	ldr	r2, [pc, #40]	; (800206c <SysTick_Config+0x40>)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3b01      	subs	r3, #1
 8002048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800204a:	210f      	movs	r1, #15
 800204c:	f04f 30ff 	mov.w	r0, #4294967295
 8002050:	f7ff ff8e 	bl	8001f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <SysTick_Config+0x40>)
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800205a:	4b04      	ldr	r3, [pc, #16]	; (800206c <SysTick_Config+0x40>)
 800205c:	2207      	movs	r2, #7
 800205e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	e000e010 	.word	0xe000e010

08002070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff ff29 	bl	8001ed0 <__NVIC_SetPriorityGrouping>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b086      	sub	sp, #24
 800208a:	af00      	add	r7, sp, #0
 800208c:	4603      	mov	r3, r0
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002098:	f7ff ff3e 	bl	8001f18 <__NVIC_GetPriorityGrouping>
 800209c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	68b9      	ldr	r1, [r7, #8]
 80020a2:	6978      	ldr	r0, [r7, #20]
 80020a4:	f7ff ff8e 	bl	8001fc4 <NVIC_EncodePriority>
 80020a8:	4602      	mov	r2, r0
 80020aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ae:	4611      	mov	r1, r2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff5d 	bl	8001f70 <__NVIC_SetPriority>
}
 80020b6:	bf00      	nop
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff31 	bl	8001f34 <__NVIC_EnableIRQ>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff ffa2 	bl	800202c <SysTick_Config>
 80020e8:	4603      	mov	r3, r0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002102:	e154      	b.n	80023ae <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	2101      	movs	r1, #1
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	fa01 f303 	lsl.w	r3, r1, r3
 8002110:	4013      	ands	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 8146 	beq.w	80023a8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b01      	cmp	r3, #1
 8002126:	d005      	beq.n	8002134 <HAL_GPIO_Init+0x40>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d130      	bne.n	8002196 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	2203      	movs	r2, #3
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4013      	ands	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800216a:	2201      	movs	r2, #1
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	091b      	lsrs	r3, r3, #4
 8002180:	f003 0201 	and.w	r2, r3, #1
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d017      	beq.n	80021d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	2203      	movs	r2, #3
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4013      	ands	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d123      	bne.n	8002226 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	08da      	lsrs	r2, r3, #3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3208      	adds	r2, #8
 80021e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	220f      	movs	r2, #15
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	691a      	ldr	r2, [r3, #16]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	08da      	lsrs	r2, r3, #3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3208      	adds	r2, #8
 8002220:	6939      	ldr	r1, [r7, #16]
 8002222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	2203      	movs	r2, #3
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 0203 	and.w	r2, r3, #3
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 80a0 	beq.w	80023a8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002268:	4b58      	ldr	r3, [pc, #352]	; (80023cc <HAL_GPIO_Init+0x2d8>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	4a57      	ldr	r2, [pc, #348]	; (80023cc <HAL_GPIO_Init+0x2d8>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6193      	str	r3, [r2, #24]
 8002274:	4b55      	ldr	r3, [pc, #340]	; (80023cc <HAL_GPIO_Init+0x2d8>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002280:	4a53      	ldr	r2, [pc, #332]	; (80023d0 <HAL_GPIO_Init+0x2dc>)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	089b      	lsrs	r3, r3, #2
 8002286:	3302      	adds	r3, #2
 8002288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	220f      	movs	r2, #15
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022aa:	d019      	beq.n	80022e0 <HAL_GPIO_Init+0x1ec>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a49      	ldr	r2, [pc, #292]	; (80023d4 <HAL_GPIO_Init+0x2e0>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d013      	beq.n	80022dc <HAL_GPIO_Init+0x1e8>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a48      	ldr	r2, [pc, #288]	; (80023d8 <HAL_GPIO_Init+0x2e4>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d00d      	beq.n	80022d8 <HAL_GPIO_Init+0x1e4>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a47      	ldr	r2, [pc, #284]	; (80023dc <HAL_GPIO_Init+0x2e8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d007      	beq.n	80022d4 <HAL_GPIO_Init+0x1e0>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a46      	ldr	r2, [pc, #280]	; (80023e0 <HAL_GPIO_Init+0x2ec>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d101      	bne.n	80022d0 <HAL_GPIO_Init+0x1dc>
 80022cc:	2304      	movs	r3, #4
 80022ce:	e008      	b.n	80022e2 <HAL_GPIO_Init+0x1ee>
 80022d0:	2305      	movs	r3, #5
 80022d2:	e006      	b.n	80022e2 <HAL_GPIO_Init+0x1ee>
 80022d4:	2303      	movs	r3, #3
 80022d6:	e004      	b.n	80022e2 <HAL_GPIO_Init+0x1ee>
 80022d8:	2302      	movs	r3, #2
 80022da:	e002      	b.n	80022e2 <HAL_GPIO_Init+0x1ee>
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <HAL_GPIO_Init+0x1ee>
 80022e0:	2300      	movs	r3, #0
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	f002 0203 	and.w	r2, r2, #3
 80022e8:	0092      	lsls	r2, r2, #2
 80022ea:	4093      	lsls	r3, r2
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022f2:	4937      	ldr	r1, [pc, #220]	; (80023d0 <HAL_GPIO_Init+0x2dc>)
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	3302      	adds	r3, #2
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002300:	4b38      	ldr	r3, [pc, #224]	; (80023e4 <HAL_GPIO_Init+0x2f0>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	43db      	mvns	r3, r3
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4013      	ands	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002324:	4a2f      	ldr	r2, [pc, #188]	; (80023e4 <HAL_GPIO_Init+0x2f0>)
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800232a:	4b2e      	ldr	r3, [pc, #184]	; (80023e4 <HAL_GPIO_Init+0x2f0>)
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	43db      	mvns	r3, r3
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	4013      	ands	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800234e:	4a25      	ldr	r2, [pc, #148]	; (80023e4 <HAL_GPIO_Init+0x2f0>)
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002354:	4b23      	ldr	r3, [pc, #140]	; (80023e4 <HAL_GPIO_Init+0x2f0>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	43db      	mvns	r3, r3
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4013      	ands	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002378:	4a1a      	ldr	r2, [pc, #104]	; (80023e4 <HAL_GPIO_Init+0x2f0>)
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800237e:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <HAL_GPIO_Init+0x2f0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	43db      	mvns	r3, r3
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4013      	ands	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023a2:	4a10      	ldr	r2, [pc, #64]	; (80023e4 <HAL_GPIO_Init+0x2f0>)
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	3301      	adds	r3, #1
 80023ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f47f aea3 	bne.w	8002104 <HAL_GPIO_Init+0x10>
  }
}
 80023be:	bf00      	nop
 80023c0:	bf00      	nop
 80023c2:	371c      	adds	r7, #28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40010000 	.word	0x40010000
 80023d4:	48000400 	.word	0x48000400
 80023d8:	48000800 	.word	0x48000800
 80023dc:	48000c00 	.word	0x48000c00
 80023e0:	48001000 	.word	0x48001000
 80023e4:	40010400 	.word	0x40010400

080023e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	807b      	strh	r3, [r7, #2]
 80023f4:	4613      	mov	r3, r2
 80023f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023f8:	787b      	ldrb	r3, [r7, #1]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023fe:	887a      	ldrh	r2, [r7, #2]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002404:	e002      	b.n	800240c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002406:	887a      	ldrh	r2, [r7, #2]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800242a:	887a      	ldrh	r2, [r7, #2]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4013      	ands	r3, r2
 8002430:	041a      	lsls	r2, r3, #16
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	43d9      	mvns	r1, r3
 8002436:	887b      	ldrh	r3, [r7, #2]
 8002438:	400b      	ands	r3, r1
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	619a      	str	r2, [r3, #24]
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e081      	b.n	8002562 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff f9f4 	bl	8001860 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2224      	movs	r2, #36	; 0x24
 800247c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0201 	bic.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800249c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d107      	bne.n	80024c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	e006      	b.n	80024d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d104      	bne.n	80024e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002508:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691a      	ldr	r2, [r3, #16]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69d9      	ldr	r1, [r3, #28]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1a      	ldr	r2, [r3, #32]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0201 	orr.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af02      	add	r7, sp, #8
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	607a      	str	r2, [r7, #4]
 8002576:	461a      	mov	r2, r3
 8002578:	460b      	mov	r3, r1
 800257a:	817b      	strh	r3, [r7, #10]
 800257c:	4613      	mov	r3, r2
 800257e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b20      	cmp	r3, #32
 800258a:	f040 80da 	bne.w	8002742 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002594:	2b01      	cmp	r3, #1
 8002596:	d101      	bne.n	800259c <HAL_I2C_Master_Transmit+0x30>
 8002598:	2302      	movs	r3, #2
 800259a:	e0d3      	b.n	8002744 <HAL_I2C_Master_Transmit+0x1d8>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025a4:	f7ff fc64 	bl	8001e70 <HAL_GetTick>
 80025a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	2319      	movs	r3, #25
 80025b0:	2201      	movs	r2, #1
 80025b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f8f0 	bl	800279c <I2C_WaitOnFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e0be      	b.n	8002744 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2221      	movs	r2, #33	; 0x21
 80025ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2210      	movs	r2, #16
 80025d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	893a      	ldrh	r2, [r7, #8]
 80025e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	2bff      	cmp	r3, #255	; 0xff
 80025f6:	d90e      	bls.n	8002616 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	22ff      	movs	r2, #255	; 0xff
 80025fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002602:	b2da      	uxtb	r2, r3
 8002604:	8979      	ldrh	r1, [r7, #10]
 8002606:	4b51      	ldr	r3, [pc, #324]	; (800274c <HAL_I2C_Master_Transmit+0x1e0>)
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 fa7e 	bl	8002b10 <I2C_TransferConfig>
 8002614:	e06c      	b.n	80026f0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002624:	b2da      	uxtb	r2, r3
 8002626:	8979      	ldrh	r1, [r7, #10]
 8002628:	4b48      	ldr	r3, [pc, #288]	; (800274c <HAL_I2C_Master_Transmit+0x1e0>)
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 fa6d 	bl	8002b10 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002636:	e05b      	b.n	80026f0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	6a39      	ldr	r1, [r7, #32]
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 f8fc 	bl	800283a <I2C_WaitOnTXISFlagUntilTimeout>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e07b      	b.n	8002744 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	781a      	ldrb	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d034      	beq.n	80026f0 <HAL_I2C_Master_Transmit+0x184>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268a:	2b00      	cmp	r3, #0
 800268c:	d130      	bne.n	80026f0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	2200      	movs	r2, #0
 8002696:	2180      	movs	r1, #128	; 0x80
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f87f 	bl	800279c <I2C_WaitOnFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e04d      	b.n	8002744 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	2bff      	cmp	r3, #255	; 0xff
 80026b0:	d90e      	bls.n	80026d0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	22ff      	movs	r2, #255	; 0xff
 80026b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	8979      	ldrh	r1, [r7, #10]
 80026c0:	2300      	movs	r3, #0
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 fa21 	bl	8002b10 <I2C_TransferConfig>
 80026ce:	e00f      	b.n	80026f0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	8979      	ldrh	r1, [r7, #10]
 80026e2:	2300      	movs	r3, #0
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 fa10 	bl	8002b10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d19e      	bne.n	8002638 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	6a39      	ldr	r1, [r7, #32]
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 f8e2 	bl	80028c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e01a      	b.n	8002744 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2220      	movs	r2, #32
 8002714:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6859      	ldr	r1, [r3, #4]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <HAL_I2C_Master_Transmit+0x1e4>)
 8002722:	400b      	ands	r3, r1
 8002724:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2220      	movs	r2, #32
 800272a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	e000      	b.n	8002744 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002742:	2302      	movs	r3, #2
  }
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	80002000 	.word	0x80002000
 8002750:	fe00e800 	.word	0xfe00e800

08002754 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b02      	cmp	r3, #2
 8002768:	d103      	bne.n	8002772 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2200      	movs	r2, #0
 8002770:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b01      	cmp	r3, #1
 800277e:	d007      	beq.n	8002790 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699a      	ldr	r2, [r3, #24]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	619a      	str	r2, [r3, #24]
  }
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	603b      	str	r3, [r7, #0]
 80027a8:	4613      	mov	r3, r2
 80027aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027ac:	e031      	b.n	8002812 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b4:	d02d      	beq.n	8002812 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b6:	f7ff fb5b 	bl	8001e70 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d302      	bcc.n	80027cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d122      	bne.n	8002812 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699a      	ldr	r2, [r3, #24]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	4013      	ands	r3, r2
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	429a      	cmp	r2, r3
 80027da:	bf0c      	ite	eq
 80027dc:	2301      	moveq	r3, #1
 80027de:	2300      	movne	r3, #0
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	461a      	mov	r2, r3
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d113      	bne.n	8002812 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	f043 0220 	orr.w	r2, r3, #32
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2220      	movs	r2, #32
 80027fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e00f      	b.n	8002832 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699a      	ldr	r2, [r3, #24]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	4013      	ands	r3, r2
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	429a      	cmp	r2, r3
 8002820:	bf0c      	ite	eq
 8002822:	2301      	moveq	r3, #1
 8002824:	2300      	movne	r3, #0
 8002826:	b2db      	uxtb	r3, r3
 8002828:	461a      	mov	r2, r3
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	429a      	cmp	r2, r3
 800282e:	d0be      	beq.n	80027ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b084      	sub	sp, #16
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002846:	e033      	b.n	80028b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	68b9      	ldr	r1, [r7, #8]
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f87f 	bl	8002950 <I2C_IsErrorOccurred>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e031      	b.n	80028c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002862:	d025      	beq.n	80028b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002864:	f7ff fb04 	bl	8001e70 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	429a      	cmp	r2, r3
 8002872:	d302      	bcc.n	800287a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d11a      	bne.n	80028b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b02      	cmp	r3, #2
 8002886:	d013      	beq.n	80028b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288c:	f043 0220 	orr.w	r2, r3, #32
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e007      	b.n	80028c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d1c4      	bne.n	8002848 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028d4:	e02f      	b.n	8002936 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 f838 	bl	8002950 <I2C_IsErrorOccurred>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e02d      	b.n	8002946 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ea:	f7ff fac1 	bl	8001e70 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d302      	bcc.n	8002900 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d11a      	bne.n	8002936 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	f003 0320 	and.w	r3, r3, #32
 800290a:	2b20      	cmp	r3, #32
 800290c:	d013      	beq.n	8002936 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	f043 0220 	orr.w	r2, r3, #32
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2220      	movs	r2, #32
 800291e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e007      	b.n	8002946 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	2b20      	cmp	r3, #32
 8002942:	d1c8      	bne.n	80028d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	; 0x28
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b00      	cmp	r3, #0
 800297a:	d068      	beq.n	8002a4e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2210      	movs	r2, #16
 8002982:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002984:	e049      	b.n	8002a1a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298c:	d045      	beq.n	8002a1a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800298e:	f7ff fa6f 	bl	8001e70 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	429a      	cmp	r2, r3
 800299c:	d302      	bcc.n	80029a4 <I2C_IsErrorOccurred+0x54>
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d13a      	bne.n	8002a1a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029c6:	d121      	bne.n	8002a0c <I2C_IsErrorOccurred+0xbc>
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029ce:	d01d      	beq.n	8002a0c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80029d0:	7cfb      	ldrb	r3, [r7, #19]
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	d01a      	beq.n	8002a0c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80029e6:	f7ff fa43 	bl	8001e70 <HAL_GetTick>
 80029ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029ec:	e00e      	b.n	8002a0c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80029ee:	f7ff fa3f 	bl	8001e70 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b19      	cmp	r3, #25
 80029fa:	d907      	bls.n	8002a0c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	f043 0320 	orr.w	r3, r3, #32
 8002a02:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002a0a:	e006      	b.n	8002a1a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	2b20      	cmp	r3, #32
 8002a18:	d1e9      	bne.n	80029ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	f003 0320 	and.w	r3, r3, #32
 8002a24:	2b20      	cmp	r3, #32
 8002a26:	d003      	beq.n	8002a30 <I2C_IsErrorOccurred+0xe0>
 8002a28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0aa      	beq.n	8002986 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d103      	bne.n	8002a40 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	f043 0304 	orr.w	r3, r3, #4
 8002a46:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00b      	beq.n	8002a78 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00b      	beq.n	8002a9a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	f043 0308 	orr.w	r3, r3, #8
 8002a88:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00b      	beq.n	8002abc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	f043 0302 	orr.w	r3, r3, #2
 8002aaa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ab4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d01c      	beq.n	8002afe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f7ff fe45 	bl	8002754 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6859      	ldr	r1, [r3, #4]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <I2C_IsErrorOccurred+0x1bc>)
 8002ad6:	400b      	ands	r3, r1
 8002ad8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002afe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3728      	adds	r7, #40	; 0x28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	fe00e800 	.word	0xfe00e800

08002b10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	607b      	str	r3, [r7, #4]
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	817b      	strh	r3, [r7, #10]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b22:	897b      	ldrh	r3, [r7, #10]
 8002b24:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b28:	7a7b      	ldrb	r3, [r7, #9]
 8002b2a:	041b      	lsls	r3, r3, #16
 8002b2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b30:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b3e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	0d5b      	lsrs	r3, r3, #21
 8002b4a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002b4e:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <I2C_TransferConfig+0x60>)
 8002b50:	430b      	orrs	r3, r1
 8002b52:	43db      	mvns	r3, r3
 8002b54:	ea02 0103 	and.w	r1, r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b62:	bf00      	nop
 8002b64:	371c      	adds	r7, #28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	03ff63ff 	.word	0x03ff63ff

08002b74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	d138      	bne.n	8002bfc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e032      	b.n	8002bfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2224      	movs	r2, #36	; 0x24
 8002ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0201 	bic.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6819      	ldr	r1, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	e000      	b.n	8002bfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bfc:	2302      	movs	r3, #2
  }
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b085      	sub	sp, #20
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
 8002c12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	d139      	bne.n	8002c94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e033      	b.n	8002c96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2224      	movs	r2, #36	; 0x24
 8002c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0201 	bic.w	r2, r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	021b      	lsls	r3, r3, #8
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2220      	movs	r2, #32
 8002c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	e000      	b.n	8002c96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c94:	2302      	movs	r3, #2
  }
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ca2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ca4:	b08b      	sub	sp, #44	; 0x2c
 8002ca6:	af06      	add	r7, sp, #24
 8002ca8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0c4      	b.n	8002e3e <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d106      	bne.n	8002cce <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f008 ff01 	bl	800bad0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f005 f844 	bl	8007d68 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	73fb      	strb	r3, [r7, #15]
 8002ce4:	e040      	b.n	8002d68 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	440b      	add	r3, r1
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	4613      	mov	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	440b      	add	r3, r1
 8002d0c:	7bfa      	ldrb	r2, [r7, #15]
 8002d0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	440b      	add	r3, r1
 8002d20:	3303      	adds	r3, #3
 8002d22:	2200      	movs	r2, #0
 8002d24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d26:	7bfa      	ldrb	r2, [r7, #15]
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	440b      	add	r3, r1
 8002d34:	3338      	adds	r3, #56	; 0x38
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d3a:	7bfa      	ldrb	r2, [r7, #15]
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	440b      	add	r3, r1
 8002d48:	333c      	adds	r3, #60	; 0x3c
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d4e:	7bfa      	ldrb	r2, [r7, #15]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	440b      	add	r3, r1
 8002d5c:	3340      	adds	r3, #64	; 0x40
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	3301      	adds	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
 8002d68:	7bfa      	ldrb	r2, [r7, #15]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d3b9      	bcc.n	8002ce6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d72:	2300      	movs	r3, #0
 8002d74:	73fb      	strb	r3, [r7, #15]
 8002d76:	e044      	b.n	8002e02 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d78:	7bfa      	ldrb	r2, [r7, #15]
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	440b      	add	r3, r1
 8002d86:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d8e:	7bfa      	ldrb	r2, [r7, #15]
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	4613      	mov	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	440b      	add	r3, r1
 8002d9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002da0:	7bfa      	ldrb	r2, [r7, #15]
 8002da2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002da4:	7bfa      	ldrb	r2, [r7, #15]
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	440b      	add	r3, r1
 8002db2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002db6:	2200      	movs	r2, #0
 8002db8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002dba:	7bfa      	ldrb	r2, [r7, #15]
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	440b      	add	r3, r1
 8002dc8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002dd0:	7bfa      	ldrb	r2, [r7, #15]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	440b      	add	r3, r1
 8002dde:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002de6:	7bfa      	ldrb	r2, [r7, #15]
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	440b      	add	r3, r1
 8002df4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	73fb      	strb	r3, [r7, #15]
 8002e02:	7bfa      	ldrb	r2, [r7, #15]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d3b5      	bcc.n	8002d78 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	603b      	str	r3, [r7, #0]
 8002e12:	687e      	ldr	r6, [r7, #4]
 8002e14:	466d      	mov	r5, sp
 8002e16:	f106 0410 	add.w	r4, r6, #16
 8002e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e1e:	6823      	ldr	r3, [r4, #0]
 8002e20:	602b      	str	r3, [r5, #0]
 8002e22:	1d33      	adds	r3, r6, #4
 8002e24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e26:	6838      	ldr	r0, [r7, #0]
 8002e28:	f004 ffb9 	bl	8007d9e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e46 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_PCD_Start+0x16>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e016      	b.n	8002e8a <HAL_PCD_Start+0x44>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f004 ff66 	bl	8007d3a <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002e6e:	2101      	movs	r1, #1
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f009 f8a5 	bl	800bfc0 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f007 fa25 	bl	800a2ca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b084      	sub	sp, #16
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f007 fa1e 	bl	800a2e0 <USB_ReadInterrupts>
 8002ea4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fa9a 	bl	80033ea <PCD_EP_ISR_Handler>

    return;
 8002eb6:	e0bd      	b.n	8003034 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d013      	beq.n	8002eea <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed4:	b292      	uxth	r2, r2
 8002ed6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f008 fe99 	bl	800bc12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f8a9 	bl	800303a <HAL_PCD_SetAddress>

    return;
 8002ee8:	e0a4      	b.n	8003034 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00c      	beq.n	8002f0e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f06:	b292      	uxth	r2, r2
 8002f08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002f0c:	e092      	b.n	8003034 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00c      	beq.n	8002f32 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f2a:	b292      	uxth	r2, r2
 8002f2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002f30:	e080      	b.n	8003034 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d027      	beq.n	8002f8c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0204 	bic.w	r2, r2, #4
 8002f4e:	b292      	uxth	r2, r2
 8002f50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0208 	bic.w	r2, r2, #8
 8002f66:	b292      	uxth	r2, r2
 8002f68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f008 fe89 	bl	800bc84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f84:	b292      	uxth	r2, r2
 8002f86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002f8a:	e053      	b.n	8003034 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d027      	beq.n	8002fe6 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 0208 	orr.w	r2, r2, #8
 8002fa8:	b292      	uxth	r2, r2
 8002faa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fc0:	b292      	uxth	r2, r2
 8002fc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0204 	orr.w	r2, r2, #4
 8002fd8:	b292      	uxth	r2, r2
 8002fda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f008 fe36 	bl	800bc50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002fe4:	e026      	b.n	8003034 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00f      	beq.n	8003010 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003002:	b292      	uxth	r2, r2
 8003004:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f008 fdf4 	bl	800bbf6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800300e:	e011      	b.n	8003034 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00c      	beq.n	8003034 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003022:	b29a      	uxth	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800302c:	b292      	uxth	r2, r2
 800302e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003032:	bf00      	nop
  }
}
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	460b      	mov	r3, r1
 8003044:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800304c:	2b01      	cmp	r3, #1
 800304e:	d101      	bne.n	8003054 <HAL_PCD_SetAddress+0x1a>
 8003050:	2302      	movs	r3, #2
 8003052:	e013      	b.n	800307c <HAL_PCD_SetAddress+0x42>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	78fa      	ldrb	r2, [r7, #3]
 8003060:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	78fa      	ldrb	r2, [r7, #3]
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f007 f918 	bl	800a2a2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	4608      	mov	r0, r1
 800308e:	4611      	mov	r1, r2
 8003090:	461a      	mov	r2, r3
 8003092:	4603      	mov	r3, r0
 8003094:	70fb      	strb	r3, [r7, #3]
 8003096:	460b      	mov	r3, r1
 8003098:	803b      	strh	r3, [r7, #0]
 800309a:	4613      	mov	r3, r2
 800309c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	da0e      	bge.n	80030c8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030aa:	78fb      	ldrb	r3, [r7, #3]
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	4413      	add	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2201      	movs	r2, #1
 80030c4:	705a      	strb	r2, [r3, #1]
 80030c6:	e00e      	b.n	80030e6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	f003 0207 	and.w	r2, r3, #7
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	4413      	add	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030f2:	883a      	ldrh	r2, [r7, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	78ba      	ldrb	r2, [r7, #2]
 80030fc:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030fe:	78bb      	ldrb	r3, [r7, #2]
 8003100:	2b02      	cmp	r3, #2
 8003102:	d102      	bne.n	800310a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003110:	2b01      	cmp	r3, #1
 8003112:	d101      	bne.n	8003118 <HAL_PCD_EP_Open+0x94>
 8003114:	2302      	movs	r3, #2
 8003116:	e00e      	b.n	8003136 <HAL_PCD_EP_Open+0xb2>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68f9      	ldr	r1, [r7, #12]
 8003126:	4618      	mov	r0, r3
 8003128:	f004 fe5a 	bl	8007de0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003134:	7afb      	ldrb	r3, [r7, #11]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b084      	sub	sp, #16
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	460b      	mov	r3, r1
 8003148:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800314a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800314e:	2b00      	cmp	r3, #0
 8003150:	da0e      	bge.n	8003170 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003152:	78fb      	ldrb	r3, [r7, #3]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	4413      	add	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2201      	movs	r2, #1
 800316c:	705a      	strb	r2, [r3, #1]
 800316e:	e00e      	b.n	800318e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	f003 0207 	and.w	r2, r3, #7
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	4413      	add	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800318e:	78fb      	ldrb	r3, [r7, #3]
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	b2da      	uxtb	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_PCD_EP_Close+0x6a>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e00e      	b.n	80031c6 <HAL_PCD_EP_Close+0x88>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68f9      	ldr	r1, [r7, #12]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f005 f9d6 	bl	8008568 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b086      	sub	sp, #24
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	60f8      	str	r0, [r7, #12]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
 80031da:	460b      	mov	r3, r1
 80031dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031de:	7afb      	ldrb	r3, [r7, #11]
 80031e0:	f003 0207 	and.w	r2, r3, #7
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	4413      	add	r3, r2
 80031f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2200      	movs	r2, #0
 8003206:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	2200      	movs	r2, #0
 800320c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800320e:	7afb      	ldrb	r3, [r7, #11]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	b2da      	uxtb	r2, r3
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6979      	ldr	r1, [r7, #20]
 8003220:	4618      	mov	r0, r3
 8003222:	f005 fb8e 	bl	8008942 <USB_EPStartXfer>

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	607a      	str	r2, [r7, #4]
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	460b      	mov	r3, r1
 800323e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003240:	7afb      	ldrb	r3, [r7, #11]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4413      	add	r3, r2
 8003254:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	2200      	movs	r2, #0
 8003274:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2201      	movs	r2, #1
 800327a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800327c:	7afb      	ldrb	r3, [r7, #11]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	b2da      	uxtb	r2, r3
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6979      	ldr	r1, [r7, #20]
 800328e:	4618      	mov	r0, r3
 8003290:	f005 fb57 	bl	8008942 <USB_EPStartXfer>

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b084      	sub	sp, #16
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	460b      	mov	r3, r1
 80032a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	f003 0207 	and.w	r2, r3, #7
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d901      	bls.n	80032bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e03e      	b.n	800333a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	da0e      	bge.n	80032e2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	4413      	add	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2201      	movs	r2, #1
 80032de:	705a      	strb	r2, [r3, #1]
 80032e0:	e00c      	b.n	80032fc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032e2:	78fa      	ldrb	r2, [r7, #3]
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	4413      	add	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2201      	movs	r2, #1
 8003300:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003302:	78fb      	ldrb	r3, [r7, #3]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	b2da      	uxtb	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_PCD_EP_SetStall+0x7e>
 8003318:	2302      	movs	r3, #2
 800331a:	e00e      	b.n	800333a <HAL_PCD_EP_SetStall+0x9c>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68f9      	ldr	r1, [r7, #12]
 800332a:	4618      	mov	r0, r3
 800332c:	f006 feba 	bl	800a0a4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b084      	sub	sp, #16
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	460b      	mov	r3, r1
 800334c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800334e:	78fb      	ldrb	r3, [r7, #3]
 8003350:	f003 020f 	and.w	r2, r3, #15
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	429a      	cmp	r2, r3
 800335a:	d901      	bls.n	8003360 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e040      	b.n	80033e2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003360:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003364:	2b00      	cmp	r3, #0
 8003366:	da0e      	bge.n	8003386 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003368:	78fb      	ldrb	r3, [r7, #3]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	4613      	mov	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	4413      	add	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2201      	movs	r2, #1
 8003382:	705a      	strb	r2, [r3, #1]
 8003384:	e00e      	b.n	80033a4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003386:	78fb      	ldrb	r3, [r7, #3]
 8003388:	f003 0207 	and.w	r2, r3, #7
 800338c:	4613      	mov	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	4413      	add	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033aa:	78fb      	ldrb	r3, [r7, #3]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_PCD_EP_ClrStall+0x82>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e00e      	b.n	80033e2 <HAL_PCD_EP_ClrStall+0xa0>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68f9      	ldr	r1, [r7, #12]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f006 feb7 	bl	800a146 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b096      	sub	sp, #88	; 0x58
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80033f2:	e3bf      	b.n	8003b74 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003400:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003404:	b2db      	uxtb	r3, r3
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800340e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003412:	2b00      	cmp	r3, #0
 8003414:	f040 8179 	bne.w	800370a <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003418:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	2b00      	cmp	r3, #0
 8003422:	d152      	bne.n	80034ca <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	b29b      	uxth	r3, r3
 800342c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003434:	81fb      	strh	r3, [r7, #14]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	89fb      	ldrh	r3, [r7, #14]
 800343c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003444:	b29b      	uxth	r3, r3
 8003446:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3328      	adds	r3, #40	; 0x28
 800344c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003456:	b29b      	uxth	r3, r3
 8003458:	461a      	mov	r2, r3
 800345a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4413      	add	r3, r2
 8003462:	3302      	adds	r3, #2
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6812      	ldr	r2, [r2, #0]
 800346a:	4413      	add	r3, r2
 800346c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003478:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800347a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800347c:	695a      	ldr	r2, [r3, #20]
 800347e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	441a      	add	r2, r3
 8003484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003486:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003488:	2100      	movs	r1, #0
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f008 fb99 	bl	800bbc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 836b 	beq.w	8003b74 <PCD_EP_ISR_Handler+0x78a>
 800349e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f040 8366 	bne.w	8003b74 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	b292      	uxth	r2, r2
 80034bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80034c8:	e354      	b.n	8003b74 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034d0:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80034dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80034e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d034      	beq.n	8003552 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4413      	add	r3, r2
 80034fc:	3306      	adds	r3, #6
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6812      	ldr	r2, [r2, #0]
 8003504:	4413      	add	r3, r2
 8003506:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003512:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6818      	ldr	r0, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800351e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003520:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003524:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003526:	b29b      	uxth	r3, r3
 8003528:	f006 ff30 	bl	800a38c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	b29a      	uxth	r2, r3
 8003534:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003538:	4013      	ands	r3, r2
 800353a:	823b      	strh	r3, [r7, #16]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	8a3a      	ldrh	r2, [r7, #16]
 8003542:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003546:	b292      	uxth	r2, r2
 8003548:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f008 fb0c 	bl	800bb68 <HAL_PCD_SetupStageCallback>
 8003550:	e310      	b.n	8003b74 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003552:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003556:	2b00      	cmp	r3, #0
 8003558:	f280 830c 	bge.w	8003b74 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	b29a      	uxth	r2, r3
 8003564:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003568:	4013      	ands	r3, r2
 800356a:	83fb      	strh	r3, [r7, #30]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	8bfa      	ldrh	r2, [r7, #30]
 8003572:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003576:	b292      	uxth	r2, r2
 8003578:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003582:	b29b      	uxth	r3, r3
 8003584:	461a      	mov	r2, r3
 8003586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4413      	add	r3, r2
 800358e:	3306      	adds	r3, #6
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6812      	ldr	r2, [r2, #0]
 8003596:	4413      	add	r3, r2
 8003598:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80035a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d019      	beq.n	80035e2 <PCD_EP_ISR_Handler+0x1f8>
 80035ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d015      	beq.n	80035e2 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6818      	ldr	r0, [r3, #0]
 80035ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035bc:	6959      	ldr	r1, [r3, #20]
 80035be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80035c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	f006 fee0 	bl	800a38c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80035cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ce:	695a      	ldr	r2, [r3, #20]
 80035d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	441a      	add	r2, r3
 80035d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80035da:	2100      	movs	r1, #0
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f008 fad5 	bl	800bb8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80035ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80035f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f040 82bd 	bne.w	8003b74 <PCD_EP_ISR_Handler+0x78a>
 80035fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80035fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003602:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003606:	f000 82b5 	beq.w	8003b74 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	61bb      	str	r3, [r7, #24]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003618:	b29b      	uxth	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	4413      	add	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	b29b      	uxth	r3, r3
 8003630:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003634:	b29a      	uxth	r2, r3
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	801a      	strh	r2, [r3, #0]
 800363a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b3e      	cmp	r3, #62	; 0x3e
 8003640:	d91d      	bls.n	800367e <PCD_EP_ISR_Handler+0x294>
 8003642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	647b      	str	r3, [r7, #68]	; 0x44
 800364a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 031f 	and.w	r3, r3, #31
 8003652:	2b00      	cmp	r3, #0
 8003654:	d102      	bne.n	800365c <PCD_EP_ISR_Handler+0x272>
 8003656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003658:	3b01      	subs	r3, #1
 800365a:	647b      	str	r3, [r7, #68]	; 0x44
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	b29a      	uxth	r2, r3
 8003662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003664:	b29b      	uxth	r3, r3
 8003666:	029b      	lsls	r3, r3, #10
 8003668:	b29b      	uxth	r3, r3
 800366a:	4313      	orrs	r3, r2
 800366c:	b29b      	uxth	r3, r3
 800366e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003676:	b29a      	uxth	r2, r3
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	801a      	strh	r2, [r3, #0]
 800367c:	e026      	b.n	80036cc <PCD_EP_ISR_Handler+0x2e2>
 800367e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10a      	bne.n	800369c <PCD_EP_ISR_Handler+0x2b2>
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	b29b      	uxth	r3, r3
 800368c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003694:	b29a      	uxth	r2, r3
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	801a      	strh	r2, [r3, #0]
 800369a:	e017      	b.n	80036cc <PCD_EP_ISR_Handler+0x2e2>
 800369c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	085b      	lsrs	r3, r3, #1
 80036a2:	647b      	str	r3, [r7, #68]	; 0x44
 80036a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d002      	beq.n	80036b6 <PCD_EP_ISR_Handler+0x2cc>
 80036b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036b2:	3301      	adds	r3, #1
 80036b4:	647b      	str	r3, [r7, #68]	; 0x44
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036be:	b29b      	uxth	r3, r3
 80036c0:	029b      	lsls	r3, r3, #10
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	4313      	orrs	r3, r2
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036dc:	827b      	strh	r3, [r7, #18]
 80036de:	8a7b      	ldrh	r3, [r7, #18]
 80036e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80036e4:	827b      	strh	r3, [r7, #18]
 80036e6:	8a7b      	ldrh	r3, [r7, #18]
 80036e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80036ec:	827b      	strh	r3, [r7, #18]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	8a7b      	ldrh	r3, [r7, #18]
 80036f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003704:	b29b      	uxth	r3, r3
 8003706:	8013      	strh	r3, [r2, #0]
 8003708:	e234      	b.n	8003b74 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800371e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003722:	2b00      	cmp	r3, #0
 8003724:	f280 80fc 	bge.w	8003920 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	b29a      	uxth	r2, r3
 800373a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800373e:	4013      	ands	r3, r2
 8003740:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	461a      	mov	r2, r3
 800374a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003756:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800375a:	b292      	uxth	r2, r2
 800375c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800375e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	4413      	add	r3, r2
 8003772:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003776:	7b1b      	ldrb	r3, [r3, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d125      	bne.n	80037c8 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003784:	b29b      	uxth	r3, r3
 8003786:	461a      	mov	r2, r3
 8003788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	4413      	add	r3, r2
 8003790:	3306      	adds	r3, #6
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6812      	ldr	r2, [r2, #0]
 8003798:	4413      	add	r3, r2
 800379a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800379e:	881b      	ldrh	r3, [r3, #0]
 80037a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037a4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80037a8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 8092 	beq.w	80038d6 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6818      	ldr	r0, [r3, #0]
 80037b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b8:	6959      	ldr	r1, [r3, #20]
 80037ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037bc:	88da      	ldrh	r2, [r3, #6]
 80037be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037c2:	f006 fde3 	bl	800a38c <USB_ReadPMA>
 80037c6:	e086      	b.n	80038d6 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80037c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ca:	78db      	ldrb	r3, [r3, #3]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d10a      	bne.n	80037e6 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80037d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80037d4:	461a      	mov	r2, r3
 80037d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f9d9 	bl	8003b90 <HAL_PCD_EP_DB_Receive>
 80037de:	4603      	mov	r3, r0
 80037e0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80037e4:	e077      	b.n	80038d6 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003800:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	461a      	mov	r2, r3
 800380a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	441a      	add	r2, r3
 8003812:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003816:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800381a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800381e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003822:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003826:	b29b      	uxth	r3, r3
 8003828:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	b29b      	uxth	r3, r3
 800383c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d024      	beq.n	800388e <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800384c:	b29b      	uxth	r3, r3
 800384e:	461a      	mov	r2, r3
 8003850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	4413      	add	r3, r2
 8003858:	3302      	adds	r3, #2
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6812      	ldr	r2, [r2, #0]
 8003860:	4413      	add	r3, r2
 8003862:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800386c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003870:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003874:	2b00      	cmp	r3, #0
 8003876:	d02e      	beq.n	80038d6 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800387e:	6959      	ldr	r1, [r3, #20]
 8003880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003882:	891a      	ldrh	r2, [r3, #8]
 8003884:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003888:	f006 fd80 	bl	800a38c <USB_ReadPMA>
 800388c:	e023      	b.n	80038d6 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003896:	b29b      	uxth	r3, r3
 8003898:	461a      	mov	r2, r3
 800389a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4413      	add	r3, r2
 80038a2:	3306      	adds	r3, #6
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6812      	ldr	r2, [r2, #0]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038b6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80038ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d009      	beq.n	80038d6 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038c8:	6959      	ldr	r1, [r3, #20]
 80038ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038cc:	895a      	ldrh	r2, [r3, #10]
 80038ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038d2:	f006 fd5b 	bl	800a38c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80038d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038d8:	69da      	ldr	r2, [r3, #28]
 80038da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038de:	441a      	add	r2, r3
 80038e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038e2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80038e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038e6:	695a      	ldr	r2, [r3, #20]
 80038e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038ec:	441a      	add	r2, r3
 80038ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038f0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80038f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d005      	beq.n	8003906 <PCD_EP_ISR_Handler+0x51c>
 80038fa:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80038fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	429a      	cmp	r2, r3
 8003904:	d206      	bcs.n	8003914 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	4619      	mov	r1, r3
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f008 f93d 	bl	800bb8c <HAL_PCD_DataOutStageCallback>
 8003912:	e005      	b.n	8003920 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800391a:	4618      	mov	r0, r3
 800391c:	f005 f811 	bl	8008942 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003920:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 8123 	beq.w	8003b74 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800392e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003932:	1c5a      	adds	r2, r3, #1
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	4413      	add	r3, r2
 8003940:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	b29b      	uxth	r3, r3
 8003954:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800395c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	461a      	mov	r2, r3
 8003966:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	441a      	add	r2, r3
 800396e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800397a:	b29b      	uxth	r3, r3
 800397c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800397e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003980:	78db      	ldrb	r3, [r3, #3]
 8003982:	2b01      	cmp	r3, #1
 8003984:	f040 80a2 	bne.w	8003acc <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8003988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800398a:	2200      	movs	r2, #0
 800398c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800398e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003990:	7b1b      	ldrb	r3, [r3, #12]
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 8093 	beq.w	8003abe <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003998:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800399c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d046      	beq.n	8003a32 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039a6:	785b      	ldrb	r3, [r3, #1]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d126      	bne.n	80039fa <PCD_EP_ISR_Handler+0x610>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	4413      	add	r3, r2
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
 80039c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	011a      	lsls	r2, r3, #4
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	4413      	add	r3, r2
 80039ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039d2:	623b      	str	r3, [r7, #32]
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	881b      	ldrh	r3, [r3, #0]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039de:	b29a      	uxth	r2, r3
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	801a      	strh	r2, [r3, #0]
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	801a      	strh	r2, [r3, #0]
 80039f8:	e061      	b.n	8003abe <PCD_EP_ISR_Handler+0x6d4>
 80039fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039fc:	785b      	ldrb	r3, [r3, #1]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d15d      	bne.n	8003abe <PCD_EP_ISR_Handler+0x6d4>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	461a      	mov	r2, r3
 8003a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a16:	4413      	add	r3, r2
 8003a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	011a      	lsls	r2, r3, #4
 8003a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a22:	4413      	add	r3, r2
 8003a24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	801a      	strh	r2, [r3, #0]
 8003a30:	e045      	b.n	8003abe <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a3a:	785b      	ldrb	r3, [r3, #1]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d126      	bne.n	8003a8e <PCD_EP_ISR_Handler+0x6a4>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	637b      	str	r3, [r7, #52]	; 0x34
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	461a      	mov	r2, r3
 8003a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a54:	4413      	add	r3, r2
 8003a56:	637b      	str	r3, [r7, #52]	; 0x34
 8003a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	011a      	lsls	r2, r3, #4
 8003a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a60:	4413      	add	r3, r2
 8003a62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a66:	633b      	str	r3, [r7, #48]	; 0x30
 8003a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a76:	801a      	strh	r2, [r3, #0]
 8003a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8a:	801a      	strh	r2, [r3, #0]
 8003a8c:	e017      	b.n	8003abe <PCD_EP_ISR_Handler+0x6d4>
 8003a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a90:	785b      	ldrb	r3, [r3, #1]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d113      	bne.n	8003abe <PCD_EP_ISR_Handler+0x6d4>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa4:	4413      	add	r3, r2
 8003aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	011a      	lsls	r2, r3, #4
 8003aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ab6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aba:	2200      	movs	r2, #0
 8003abc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f008 f87c 	bl	800bbc2 <HAL_PCD_DataInStageCallback>
 8003aca:	e053      	b.n	8003b74 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003acc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d146      	bne.n	8003b66 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	4413      	add	r3, r2
 8003aec:	3302      	adds	r3, #2
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6812      	ldr	r2, [r2, #0]
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b00:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b06:	699a      	ldr	r2, [r3, #24]
 8003b08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d907      	bls.n	8003b20 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8003b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b12:	699a      	ldr	r2, [r3, #24]
 8003b14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b18:	1ad2      	subs	r2, r2, r3
 8003b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b1c:	619a      	str	r2, [r3, #24]
 8003b1e:	e002      	b.n	8003b26 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8003b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b22:	2200      	movs	r2, #0
 8003b24:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	4619      	mov	r1, r3
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f008 f844 	bl	800bbc2 <HAL_PCD_DataInStageCallback>
 8003b3a:	e01b      	b.n	8003b74 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b3e:	695a      	ldr	r2, [r3, #20]
 8003b40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b44:	441a      	add	r2, r3
 8003b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b48:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b4c:	69da      	ldr	r2, [r3, #28]
 8003b4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b52:	441a      	add	r2, r3
 8003b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b56:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f004 feef 	bl	8008942 <USB_EPStartXfer>
 8003b64:	e006      	b.n	8003b74 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003b66:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f91b 	bl	8003daa <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	b21b      	sxth	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f6ff ac37 	blt.w	80033f4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3758      	adds	r7, #88	; 0x58
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b9e:	88fb      	ldrh	r3, [r7, #6]
 8003ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d07e      	beq.n	8003ca6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	4413      	add	r3, r2
 8003bbc:	3302      	adds	r3, #2
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	6812      	ldr	r2, [r2, #0]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bd0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	699a      	ldr	r2, [r3, #24]
 8003bd6:	8b7b      	ldrh	r3, [r7, #26]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d306      	bcc.n	8003bea <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	699a      	ldr	r2, [r3, #24]
 8003be0:	8b7b      	ldrh	r3, [r7, #26]
 8003be2:	1ad2      	subs	r2, r2, r3
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	619a      	str	r2, [r3, #24]
 8003be8:	e002      	b.n	8003bf0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2200      	movs	r2, #0
 8003bee:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d123      	bne.n	8003c40 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c12:	833b      	strh	r3, [r7, #24]
 8003c14:	8b3b      	ldrh	r3, [r7, #24]
 8003c16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c1a:	833b      	strh	r3, [r7, #24]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	461a      	mov	r2, r3
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	441a      	add	r2, r3
 8003c2a:	8b3b      	ldrh	r3, [r7, #24]
 8003c2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c40:	88fb      	ldrh	r3, [r7, #6]
 8003c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d01f      	beq.n	8003c8a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c64:	82fb      	strh	r3, [r7, #22]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	441a      	add	r2, r3
 8003c74:	8afb      	ldrh	r3, [r7, #22]
 8003c76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c8a:	8b7b      	ldrh	r3, [r7, #26]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 8087 	beq.w	8003da0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6959      	ldr	r1, [r3, #20]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	891a      	ldrh	r2, [r3, #8]
 8003c9e:	8b7b      	ldrh	r3, [r7, #26]
 8003ca0:	f006 fb74 	bl	800a38c <USB_ReadPMA>
 8003ca4:	e07c      	b.n	8003da0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	4413      	add	r3, r2
 8003cba:	3306      	adds	r3, #6
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	6812      	ldr	r2, [r2, #0]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cce:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	699a      	ldr	r2, [r3, #24]
 8003cd4:	8b7b      	ldrh	r3, [r7, #26]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d306      	bcc.n	8003ce8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	699a      	ldr	r2, [r3, #24]
 8003cde:	8b7b      	ldrh	r3, [r7, #26]
 8003ce0:	1ad2      	subs	r2, r2, r3
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	619a      	str	r2, [r3, #24]
 8003ce6:	e002      	b.n	8003cee <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2200      	movs	r2, #0
 8003cec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d123      	bne.n	8003d3e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d10:	83fb      	strh	r3, [r7, #30]
 8003d12:	8bfb      	ldrh	r3, [r7, #30]
 8003d14:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d18:	83fb      	strh	r3, [r7, #30]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	441a      	add	r2, r3
 8003d28:	8bfb      	ldrh	r3, [r7, #30]
 8003d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003d3e:	88fb      	ldrh	r3, [r7, #6]
 8003d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d11f      	bne.n	8003d88 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d62:	83bb      	strh	r3, [r7, #28]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	441a      	add	r2, r3
 8003d72:	8bbb      	ldrh	r3, [r7, #28]
 8003d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003d88:	8b7b      	ldrh	r3, [r7, #26]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d008      	beq.n	8003da0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6818      	ldr	r0, [r3, #0]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	6959      	ldr	r1, [r3, #20]
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	895a      	ldrh	r2, [r3, #10]
 8003d9a:	8b7b      	ldrh	r3, [r7, #26]
 8003d9c:	f006 faf6 	bl	800a38c <USB_ReadPMA>
    }
  }

  return count;
 8003da0:	8b7b      	ldrh	r3, [r7, #26]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3720      	adds	r7, #32
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b0a4      	sub	sp, #144	; 0x90
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	4613      	mov	r3, r2
 8003db6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003db8:	88fb      	ldrh	r3, [r7, #6]
 8003dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 81dd 	beq.w	800417e <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	4413      	add	r3, r2
 8003dd8:	3302      	adds	r3, #2
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	6812      	ldr	r2, [r2, #0]
 8003de0:	4413      	add	r3, r2
 8003de2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dec:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	699a      	ldr	r2, [r3, #24]
 8003df4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d907      	bls.n	8003e0c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	699a      	ldr	r2, [r3, #24]
 8003e00:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003e04:	1ad2      	subs	r2, r2, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	619a      	str	r2, [r3, #24]
 8003e0a:	e002      	b.n	8003e12 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f040 80b9 	bne.w	8003f8e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	785b      	ldrb	r3, [r3, #1]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d126      	bne.n	8003e72 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	461a      	mov	r2, r3
 8003e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e38:	4413      	add	r3, r2
 8003e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	011a      	lsls	r2, r3, #4
 8003e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e44:	4413      	add	r3, r2
 8003e46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5a:	801a      	strh	r2, [r3, #0]
 8003e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6e:	801a      	strh	r2, [r3, #0]
 8003e70:	e01a      	b.n	8003ea8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	785b      	ldrb	r3, [r3, #1]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d116      	bne.n	8003ea8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8e:	4413      	add	r3, r2
 8003e90:	637b      	str	r3, [r7, #52]	; 0x34
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	011a      	lsls	r2, r3, #4
 8003e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ea0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	785b      	ldrb	r3, [r3, #1]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d126      	bne.n	8003f04 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	61fb      	str	r3, [r7, #28]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	4413      	add	r3, r2
 8003ecc:	61fb      	str	r3, [r7, #28]
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	011a      	lsls	r2, r3, #4
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	801a      	strh	r2, [r3, #0]
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	801a      	strh	r2, [r3, #0]
 8003f02:	e017      	b.n	8003f34 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	785b      	ldrb	r3, [r3, #1]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d113      	bne.n	8003f34 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	461a      	mov	r2, r3
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	4413      	add	r3, r2
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	011a      	lsls	r2, r3, #4
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	4413      	add	r3, r2
 8003f28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f2c:	623b      	str	r3, [r7, #32]
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	2200      	movs	r2, #0
 8003f32:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	4619      	mov	r1, r3
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f007 fe41 	bl	800bbc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f40:	88fb      	ldrh	r3, [r7, #6]
 8003f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 82fc 	beq.w	8004544 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	461a      	mov	r2, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f66:	82fb      	strh	r3, [r7, #22]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	441a      	add	r2, r3
 8003f76:	8afb      	ldrh	r3, [r7, #22]
 8003f78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	8013      	strh	r3, [r2, #0]
 8003f8c:	e2da      	b.n	8004544 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d021      	beq.n	8003fdc <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	441a      	add	r2, r3
 8003fc4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	f040 82ae 	bne.w	8004544 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	695a      	ldr	r2, [r3, #20]
 8003fec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003ff0:	441a      	add	r2, r3
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	69da      	ldr	r2, [r3, #28]
 8003ffa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003ffe:	441a      	add	r2, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	6a1a      	ldr	r2, [r3, #32]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	429a      	cmp	r2, r3
 800400e:	d30b      	bcc.n	8004028 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	6a1a      	ldr	r2, [r3, #32]
 800401c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004020:	1ad2      	subs	r2, r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	621a      	str	r2, [r3, #32]
 8004026:	e017      	b.n	8004058 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d108      	bne.n	8004042 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004030:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004034:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004040:	e00a      	b.n	8004058 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	2200      	movs	r2, #0
 8004056:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	785b      	ldrb	r3, [r3, #1]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d165      	bne.n	800412c <HAL_PCD_EP_DB_Transmit+0x382>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800406e:	b29b      	uxth	r3, r3
 8004070:	461a      	mov	r2, r3
 8004072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004074:	4413      	add	r3, r2
 8004076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	011a      	lsls	r2, r3, #4
 800407e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004080:	4413      	add	r3, r2
 8004082:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004086:	63bb      	str	r3, [r7, #56]	; 0x38
 8004088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	b29b      	uxth	r3, r3
 800408e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004092:	b29a      	uxth	r2, r3
 8004094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004096:	801a      	strh	r2, [r3, #0]
 8004098:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800409c:	2b3e      	cmp	r3, #62	; 0x3e
 800409e:	d91d      	bls.n	80040dc <HAL_PCD_EP_DB_Transmit+0x332>
 80040a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040a4:	095b      	lsrs	r3, r3, #5
 80040a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80040a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d102      	bne.n	80040ba <HAL_PCD_EP_DB_Transmit+0x310>
 80040b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040b6:	3b01      	subs	r3, #1
 80040b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80040ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	b29a      	uxth	r2, r3
 80040c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	029b      	lsls	r3, r3, #10
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	4313      	orrs	r3, r2
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d8:	801a      	strh	r2, [r3, #0]
 80040da:	e044      	b.n	8004166 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80040dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10a      	bne.n	80040fa <HAL_PCD_EP_DB_Transmit+0x350>
 80040e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f6:	801a      	strh	r2, [r3, #0]
 80040f8:	e035      	b.n	8004166 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80040fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040fe:	085b      	lsrs	r3, r3, #1
 8004100:	64bb      	str	r3, [r7, #72]	; 0x48
 8004102:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <HAL_PCD_EP_DB_Transmit+0x36a>
 800410e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004110:	3301      	adds	r3, #1
 8004112:	64bb      	str	r3, [r7, #72]	; 0x48
 8004114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	b29a      	uxth	r2, r3
 800411a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800411c:	b29b      	uxth	r3, r3
 800411e:	029b      	lsls	r3, r3, #10
 8004120:	b29b      	uxth	r3, r3
 8004122:	4313      	orrs	r3, r2
 8004124:	b29a      	uxth	r2, r3
 8004126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004128:	801a      	strh	r2, [r3, #0]
 800412a:	e01c      	b.n	8004166 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	785b      	ldrb	r3, [r3, #1]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d118      	bne.n	8004166 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	647b      	str	r3, [r7, #68]	; 0x44
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004142:	b29b      	uxth	r3, r3
 8004144:	461a      	mov	r2, r3
 8004146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004148:	4413      	add	r3, r2
 800414a:	647b      	str	r3, [r7, #68]	; 0x44
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	011a      	lsls	r2, r3, #4
 8004152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004154:	4413      	add	r3, r2
 8004156:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800415a:	643b      	str	r3, [r7, #64]	; 0x40
 800415c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004160:	b29a      	uxth	r2, r3
 8004162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004164:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	6959      	ldr	r1, [r3, #20]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	891a      	ldrh	r2, [r3, #8]
 8004172:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004176:	b29b      	uxth	r3, r3
 8004178:	f006 f8c2 	bl	800a300 <USB_WritePMA>
 800417c:	e1e2      	b.n	8004544 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004186:	b29b      	uxth	r3, r3
 8004188:	461a      	mov	r2, r3
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	4413      	add	r3, r2
 8004192:	3306      	adds	r3, #6
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	6812      	ldr	r2, [r2, #0]
 800419a:	4413      	add	r3, r2
 800419c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041a6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	699a      	ldr	r2, [r3, #24]
 80041ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d307      	bcc.n	80041c6 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80041be:	1ad2      	subs	r2, r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	619a      	str	r2, [r3, #24]
 80041c4:	e002      	b.n	80041cc <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2200      	movs	r2, #0
 80041ca:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f040 80c0 	bne.w	8004356 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	785b      	ldrb	r3, [r3, #1]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d126      	bne.n	800422c <HAL_PCD_EP_DB_Transmit+0x482>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	461a      	mov	r2, r3
 80041f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041f2:	4413      	add	r3, r2
 80041f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	011a      	lsls	r2, r3, #4
 80041fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041fe:	4413      	add	r3, r2
 8004200:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004204:	67bb      	str	r3, [r7, #120]	; 0x78
 8004206:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	b29b      	uxth	r3, r3
 800420c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004210:	b29a      	uxth	r2, r3
 8004212:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004214:	801a      	strh	r2, [r3, #0]
 8004216:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	b29b      	uxth	r3, r3
 800421c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004224:	b29a      	uxth	r2, r3
 8004226:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004228:	801a      	strh	r2, [r3, #0]
 800422a:	e01a      	b.n	8004262 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	785b      	ldrb	r3, [r3, #1]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d116      	bne.n	8004262 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	667b      	str	r3, [r7, #100]	; 0x64
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004242:	b29b      	uxth	r3, r3
 8004244:	461a      	mov	r2, r3
 8004246:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004248:	4413      	add	r3, r2
 800424a:	667b      	str	r3, [r7, #100]	; 0x64
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	011a      	lsls	r2, r3, #4
 8004252:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004254:	4413      	add	r3, r2
 8004256:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800425a:	663b      	str	r3, [r7, #96]	; 0x60
 800425c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800425e:	2200      	movs	r2, #0
 8004260:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	677b      	str	r3, [r7, #116]	; 0x74
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	785b      	ldrb	r3, [r3, #1]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d12b      	bne.n	80042c8 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800427e:	b29b      	uxth	r3, r3
 8004280:	461a      	mov	r2, r3
 8004282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004284:	4413      	add	r3, r2
 8004286:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	011a      	lsls	r2, r3, #4
 800428e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004290:	4413      	add	r3, r2
 8004292:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004296:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800429a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042ac:	801a      	strh	r2, [r3, #0]
 80042ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042be:	b29a      	uxth	r2, r3
 80042c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042c4:	801a      	strh	r2, [r3, #0]
 80042c6:	e017      	b.n	80042f8 <HAL_PCD_EP_DB_Transmit+0x54e>
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	785b      	ldrb	r3, [r3, #1]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d113      	bne.n	80042f8 <HAL_PCD_EP_DB_Transmit+0x54e>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042d8:	b29b      	uxth	r3, r3
 80042da:	461a      	mov	r2, r3
 80042dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042de:	4413      	add	r3, r2
 80042e0:	677b      	str	r3, [r7, #116]	; 0x74
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	011a      	lsls	r2, r3, #4
 80042e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042ea:	4413      	add	r3, r2
 80042ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042f0:	673b      	str	r3, [r7, #112]	; 0x70
 80042f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042f4:	2200      	movs	r2, #0
 80042f6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	4619      	mov	r1, r3
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f007 fc5f 	bl	800bbc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004304:	88fb      	ldrh	r3, [r7, #6]
 8004306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800430a:	2b00      	cmp	r3, #0
 800430c:	f040 811a 	bne.w	8004544 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	461a      	mov	r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	b29b      	uxth	r3, r3
 8004322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	461a      	mov	r2, r3
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	441a      	add	r2, r3
 800433c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004348:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800434c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004350:	b29b      	uxth	r3, r3
 8004352:	8013      	strh	r3, [r2, #0]
 8004354:	e0f6      	b.n	8004544 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004356:	88fb      	ldrh	r3, [r7, #6]
 8004358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d121      	bne.n	80043a4 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	461a      	mov	r2, r3
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	b29b      	uxth	r3, r3
 8004372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	441a      	add	r2, r3
 800438c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004390:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004394:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004398:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800439c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	f040 80ca 	bne.w	8004544 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	695a      	ldr	r2, [r3, #20]
 80043b4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80043b8:	441a      	add	r2, r3
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	69da      	ldr	r2, [r3, #28]
 80043c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80043c6:	441a      	add	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	6a1a      	ldr	r2, [r3, #32]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d30b      	bcc.n	80043f0 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	6a1a      	ldr	r2, [r3, #32]
 80043e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043e8:	1ad2      	subs	r2, r2, r3
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	621a      	str	r2, [r3, #32]
 80043ee:	e017      	b.n	8004420 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d108      	bne.n	800440a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80043f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80043fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004408:	e00a      	b.n	8004420 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2200      	movs	r2, #0
 8004416:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	657b      	str	r3, [r7, #84]	; 0x54
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	785b      	ldrb	r3, [r3, #1]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d165      	bne.n	80044fa <HAL_PCD_EP_DB_Transmit+0x750>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800443c:	b29b      	uxth	r3, r3
 800443e:	461a      	mov	r2, r3
 8004440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004442:	4413      	add	r3, r2
 8004444:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	011a      	lsls	r2, r3, #4
 800444c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800444e:	4413      	add	r3, r2
 8004450:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004454:	65bb      	str	r3, [r7, #88]	; 0x58
 8004456:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	b29b      	uxth	r3, r3
 800445c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004460:	b29a      	uxth	r2, r3
 8004462:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004464:	801a      	strh	r2, [r3, #0]
 8004466:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800446a:	2b3e      	cmp	r3, #62	; 0x3e
 800446c:	d91d      	bls.n	80044aa <HAL_PCD_EP_DB_Transmit+0x700>
 800446e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004472:	095b      	lsrs	r3, r3, #5
 8004474:	66bb      	str	r3, [r7, #104]	; 0x68
 8004476:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800447a:	f003 031f 	and.w	r3, r3, #31
 800447e:	2b00      	cmp	r3, #0
 8004480:	d102      	bne.n	8004488 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004482:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004484:	3b01      	subs	r3, #1
 8004486:	66bb      	str	r3, [r7, #104]	; 0x68
 8004488:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	b29a      	uxth	r2, r3
 800448e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004490:	b29b      	uxth	r3, r3
 8004492:	029b      	lsls	r3, r3, #10
 8004494:	b29b      	uxth	r3, r3
 8004496:	4313      	orrs	r3, r2
 8004498:	b29b      	uxth	r3, r3
 800449a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800449e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044a6:	801a      	strh	r2, [r3, #0]
 80044a8:	e041      	b.n	800452e <HAL_PCD_EP_DB_Transmit+0x784>
 80044aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10a      	bne.n	80044c8 <HAL_PCD_EP_DB_Transmit+0x71e>
 80044b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044c4:	801a      	strh	r2, [r3, #0]
 80044c6:	e032      	b.n	800452e <HAL_PCD_EP_DB_Transmit+0x784>
 80044c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044cc:	085b      	lsrs	r3, r3, #1
 80044ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80044d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <HAL_PCD_EP_DB_Transmit+0x738>
 80044dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044de:	3301      	adds	r3, #1
 80044e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80044e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	029b      	lsls	r3, r3, #10
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	4313      	orrs	r3, r2
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044f6:	801a      	strh	r2, [r3, #0]
 80044f8:	e019      	b.n	800452e <HAL_PCD_EP_DB_Transmit+0x784>
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	785b      	ldrb	r3, [r3, #1]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d115      	bne.n	800452e <HAL_PCD_EP_DB_Transmit+0x784>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800450a:	b29b      	uxth	r3, r3
 800450c:	461a      	mov	r2, r3
 800450e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004510:	4413      	add	r3, r2
 8004512:	657b      	str	r3, [r7, #84]	; 0x54
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	011a      	lsls	r2, r3, #4
 800451a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800451c:	4413      	add	r3, r2
 800451e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004522:	653b      	str	r3, [r7, #80]	; 0x50
 8004524:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004528:	b29a      	uxth	r2, r3
 800452a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800452c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	6959      	ldr	r1, [r3, #20]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	895a      	ldrh	r2, [r3, #10]
 800453a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800453e:	b29b      	uxth	r3, r3
 8004540:	f005 fede 	bl	800a300 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	461a      	mov	r2, r3
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	b29b      	uxth	r3, r3
 8004556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800455a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800455e:	82bb      	strh	r3, [r7, #20]
 8004560:	8abb      	ldrh	r3, [r7, #20]
 8004562:	f083 0310 	eor.w	r3, r3, #16
 8004566:	82bb      	strh	r3, [r7, #20]
 8004568:	8abb      	ldrh	r3, [r7, #20]
 800456a:	f083 0320 	eor.w	r3, r3, #32
 800456e:	82bb      	strh	r3, [r7, #20]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	461a      	mov	r2, r3
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	441a      	add	r2, r3
 800457e:	8abb      	ldrh	r3, [r7, #20]
 8004580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800458c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004590:	b29b      	uxth	r3, r3
 8004592:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3790      	adds	r7, #144	; 0x90
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800459e:	b480      	push	{r7}
 80045a0:	b087      	sub	sp, #28
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	607b      	str	r3, [r7, #4]
 80045a8:	460b      	mov	r3, r1
 80045aa:	817b      	strh	r3, [r7, #10]
 80045ac:	4613      	mov	r3, r2
 80045ae:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80045b0:	897b      	ldrh	r3, [r7, #10]
 80045b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00b      	beq.n	80045d4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045bc:	897b      	ldrh	r3, [r7, #10]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	4613      	mov	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	4413      	add	r3, r2
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	e009      	b.n	80045e8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045d4:	897a      	ldrh	r2, [r7, #10]
 80045d6:	4613      	mov	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4413      	add	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80045e8:	893b      	ldrh	r3, [r7, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d107      	bne.n	80045fe <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2200      	movs	r2, #0
 80045f2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	80da      	strh	r2, [r3, #6]
 80045fc:	e00b      	b.n	8004616 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2201      	movs	r2, #1
 8004602:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	b29a      	uxth	r2, r3
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	0c1b      	lsrs	r3, r3, #16
 8004610:	b29a      	uxth	r2, r3
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	371c      	adds	r7, #28
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800462a:	af00      	add	r7, sp, #0
 800462c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004630:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004634:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800463a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d102      	bne.n	800464a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	f001 b823 	b.w	8005690 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800464a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800464e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 817d 	beq.w	800495a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004660:	4bbc      	ldr	r3, [pc, #752]	; (8004954 <HAL_RCC_OscConfig+0x330>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f003 030c 	and.w	r3, r3, #12
 8004668:	2b04      	cmp	r3, #4
 800466a:	d00c      	beq.n	8004686 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800466c:	4bb9      	ldr	r3, [pc, #740]	; (8004954 <HAL_RCC_OscConfig+0x330>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f003 030c 	and.w	r3, r3, #12
 8004674:	2b08      	cmp	r3, #8
 8004676:	d15c      	bne.n	8004732 <HAL_RCC_OscConfig+0x10e>
 8004678:	4bb6      	ldr	r3, [pc, #728]	; (8004954 <HAL_RCC_OscConfig+0x330>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004684:	d155      	bne.n	8004732 <HAL_RCC_OscConfig+0x10e>
 8004686:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800468a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004692:	fa93 f3a3 	rbit	r3, r3
 8004696:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800469a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800469e:	fab3 f383 	clz	r3, r3
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	095b      	lsrs	r3, r3, #5
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d102      	bne.n	80046b8 <HAL_RCC_OscConfig+0x94>
 80046b2:	4ba8      	ldr	r3, [pc, #672]	; (8004954 <HAL_RCC_OscConfig+0x330>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	e015      	b.n	80046e4 <HAL_RCC_OscConfig+0xc0>
 80046b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046bc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80046c4:	fa93 f3a3 	rbit	r3, r3
 80046c8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80046cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046d0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80046d4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80046d8:	fa93 f3a3 	rbit	r3, r3
 80046dc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80046e0:	4b9c      	ldr	r3, [pc, #624]	; (8004954 <HAL_RCC_OscConfig+0x330>)
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046e8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80046ec:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80046f0:	fa92 f2a2 	rbit	r2, r2
 80046f4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80046f8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80046fc:	fab2 f282 	clz	r2, r2
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	f042 0220 	orr.w	r2, r2, #32
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	f002 021f 	and.w	r2, r2, #31
 800470c:	2101      	movs	r1, #1
 800470e:	fa01 f202 	lsl.w	r2, r1, r2
 8004712:	4013      	ands	r3, r2
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 811f 	beq.w	8004958 <HAL_RCC_OscConfig+0x334>
 800471a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800471e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	f040 8116 	bne.w	8004958 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	f000 bfaf 	b.w	8005690 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004736:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004742:	d106      	bne.n	8004752 <HAL_RCC_OscConfig+0x12e>
 8004744:	4b83      	ldr	r3, [pc, #524]	; (8004954 <HAL_RCC_OscConfig+0x330>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a82      	ldr	r2, [pc, #520]	; (8004954 <HAL_RCC_OscConfig+0x330>)
 800474a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800474e:	6013      	str	r3, [r2, #0]
 8004750:	e036      	b.n	80047c0 <HAL_RCC_OscConfig+0x19c>
 8004752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004756:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10c      	bne.n	800477c <HAL_RCC_OscConfig+0x158>
 8004762:	4b7c      	ldr	r3, [pc, #496]	; (8004954 <HAL_RCC_OscConfig+0x330>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a7b      	ldr	r2, [pc, #492]	; (8004954 <HAL_RCC_OscConfig+0x330>)
 8004768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	4b79      	ldr	r3, [pc, #484]	; (8004954 <HAL_RCC_OscConfig+0x330>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a78      	ldr	r2, [pc, #480]	; (8004954 <HAL_RCC_OscConfig+0x330>)
 8004774:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	e021      	b.n	80047c0 <HAL_RCC_OscConfig+0x19c>
 800477c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004780:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800478c:	d10c      	bne.n	80047a8 <HAL_RCC_OscConfig+0x184>
 800478e:	4b71      	ldr	r3, [pc, #452]	; (8004954 <HAL_RCC_OscConfig+0x330>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a70      	ldr	r2, [pc, #448]	; (8004954 <HAL_RCC_OscConfig+0x330>)
 8004794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	4b6e      	ldr	r3, [pc, #440]	; (8004954 <HAL_RCC_OscConfig+0x330>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a6d      	ldr	r2, [pc, #436]	; (8004954 <HAL_RCC_OscConfig+0x330>)
 80047a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	e00b      	b.n	80047c0 <HAL_RCC_OscConfig+0x19c>
 80047a8:	4b6a      	ldr	r3, [pc, #424]	; (8004954 <HAL_RCC_OscConfig+0x330>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a69      	ldr	r2, [pc, #420]	; (8004954 <HAL_RCC_OscConfig+0x330>)
 80047ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b2:	6013      	str	r3, [r2, #0]
 80047b4:	4b67      	ldr	r3, [pc, #412]	; (8004954 <HAL_RCC_OscConfig+0x330>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a66      	ldr	r2, [pc, #408]	; (8004954 <HAL_RCC_OscConfig+0x330>)
 80047ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047be:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047c0:	4b64      	ldr	r3, [pc, #400]	; (8004954 <HAL_RCC_OscConfig+0x330>)
 80047c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c4:	f023 020f 	bic.w	r2, r3, #15
 80047c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	495f      	ldr	r1, [pc, #380]	; (8004954 <HAL_RCC_OscConfig+0x330>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d059      	beq.n	800489e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ea:	f7fd fb41 	bl	8001e70 <HAL_GetTick>
 80047ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f2:	e00a      	b.n	800480a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047f4:	f7fd fb3c 	bl	8001e70 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b64      	cmp	r3, #100	; 0x64
 8004802:	d902      	bls.n	800480a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	f000 bf43 	b.w	8005690 <HAL_RCC_OscConfig+0x106c>
 800480a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800480e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004812:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004816:	fa93 f3a3 	rbit	r3, r3
 800481a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800481e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004822:	fab3 f383 	clz	r3, r3
 8004826:	b2db      	uxtb	r3, r3
 8004828:	095b      	lsrs	r3, r3, #5
 800482a:	b2db      	uxtb	r3, r3
 800482c:	f043 0301 	orr.w	r3, r3, #1
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b01      	cmp	r3, #1
 8004834:	d102      	bne.n	800483c <HAL_RCC_OscConfig+0x218>
 8004836:	4b47      	ldr	r3, [pc, #284]	; (8004954 <HAL_RCC_OscConfig+0x330>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	e015      	b.n	8004868 <HAL_RCC_OscConfig+0x244>
 800483c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004840:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004844:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004848:	fa93 f3a3 	rbit	r3, r3
 800484c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004850:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004854:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004858:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800485c:	fa93 f3a3 	rbit	r3, r3
 8004860:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004864:	4b3b      	ldr	r3, [pc, #236]	; (8004954 <HAL_RCC_OscConfig+0x330>)
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800486c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004870:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004874:	fa92 f2a2 	rbit	r2, r2
 8004878:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800487c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004880:	fab2 f282 	clz	r2, r2
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	f042 0220 	orr.w	r2, r2, #32
 800488a:	b2d2      	uxtb	r2, r2
 800488c:	f002 021f 	and.w	r2, r2, #31
 8004890:	2101      	movs	r1, #1
 8004892:	fa01 f202 	lsl.w	r2, r1, r2
 8004896:	4013      	ands	r3, r2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d0ab      	beq.n	80047f4 <HAL_RCC_OscConfig+0x1d0>
 800489c:	e05d      	b.n	800495a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489e:	f7fd fae7 	bl	8001e70 <HAL_GetTick>
 80048a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048a6:	e00a      	b.n	80048be <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048a8:	f7fd fae2 	bl	8001e70 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b64      	cmp	r3, #100	; 0x64
 80048b6:	d902      	bls.n	80048be <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	f000 bee9 	b.w	8005690 <HAL_RCC_OscConfig+0x106c>
 80048be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048c2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80048ca:	fa93 f3a3 	rbit	r3, r3
 80048ce:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80048d2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048d6:	fab3 f383 	clz	r3, r3
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	095b      	lsrs	r3, r3, #5
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	f043 0301 	orr.w	r3, r3, #1
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d102      	bne.n	80048f0 <HAL_RCC_OscConfig+0x2cc>
 80048ea:	4b1a      	ldr	r3, [pc, #104]	; (8004954 <HAL_RCC_OscConfig+0x330>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	e015      	b.n	800491c <HAL_RCC_OscConfig+0x2f8>
 80048f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048f4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80048fc:	fa93 f3a3 	rbit	r3, r3
 8004900:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004904:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004908:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800490c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004910:	fa93 f3a3 	rbit	r3, r3
 8004914:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004918:	4b0e      	ldr	r3, [pc, #56]	; (8004954 <HAL_RCC_OscConfig+0x330>)
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004920:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004924:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004928:	fa92 f2a2 	rbit	r2, r2
 800492c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004930:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004934:	fab2 f282 	clz	r2, r2
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	f042 0220 	orr.w	r2, r2, #32
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	f002 021f 	and.w	r2, r2, #31
 8004944:	2101      	movs	r1, #1
 8004946:	fa01 f202 	lsl.w	r2, r1, r2
 800494a:	4013      	ands	r3, r2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1ab      	bne.n	80048a8 <HAL_RCC_OscConfig+0x284>
 8004950:	e003      	b.n	800495a <HAL_RCC_OscConfig+0x336>
 8004952:	bf00      	nop
 8004954:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800495a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800495e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 817d 	beq.w	8004c6a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004970:	4ba6      	ldr	r3, [pc, #664]	; (8004c0c <HAL_RCC_OscConfig+0x5e8>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f003 030c 	and.w	r3, r3, #12
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00b      	beq.n	8004994 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800497c:	4ba3      	ldr	r3, [pc, #652]	; (8004c0c <HAL_RCC_OscConfig+0x5e8>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f003 030c 	and.w	r3, r3, #12
 8004984:	2b08      	cmp	r3, #8
 8004986:	d172      	bne.n	8004a6e <HAL_RCC_OscConfig+0x44a>
 8004988:	4ba0      	ldr	r3, [pc, #640]	; (8004c0c <HAL_RCC_OscConfig+0x5e8>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d16c      	bne.n	8004a6e <HAL_RCC_OscConfig+0x44a>
 8004994:	2302      	movs	r3, #2
 8004996:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800499e:	fa93 f3a3 	rbit	r3, r3
 80049a2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80049a6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049aa:	fab3 f383 	clz	r3, r3
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	095b      	lsrs	r3, r3, #5
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	f043 0301 	orr.w	r3, r3, #1
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d102      	bne.n	80049c4 <HAL_RCC_OscConfig+0x3a0>
 80049be:	4b93      	ldr	r3, [pc, #588]	; (8004c0c <HAL_RCC_OscConfig+0x5e8>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	e013      	b.n	80049ec <HAL_RCC_OscConfig+0x3c8>
 80049c4:	2302      	movs	r3, #2
 80049c6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ca:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80049ce:	fa93 f3a3 	rbit	r3, r3
 80049d2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80049d6:	2302      	movs	r3, #2
 80049d8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80049dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80049e0:	fa93 f3a3 	rbit	r3, r3
 80049e4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80049e8:	4b88      	ldr	r3, [pc, #544]	; (8004c0c <HAL_RCC_OscConfig+0x5e8>)
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	2202      	movs	r2, #2
 80049ee:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80049f2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80049f6:	fa92 f2a2 	rbit	r2, r2
 80049fa:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80049fe:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004a02:	fab2 f282 	clz	r2, r2
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	f042 0220 	orr.w	r2, r2, #32
 8004a0c:	b2d2      	uxtb	r2, r2
 8004a0e:	f002 021f 	and.w	r2, r2, #31
 8004a12:	2101      	movs	r1, #1
 8004a14:	fa01 f202 	lsl.w	r2, r1, r2
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <HAL_RCC_OscConfig+0x410>
 8004a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d002      	beq.n	8004a34 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	f000 be2e 	b.w	8005690 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a34:	4b75      	ldr	r3, [pc, #468]	; (8004c0c <HAL_RCC_OscConfig+0x5e8>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	21f8      	movs	r1, #248	; 0xf8
 8004a4a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004a52:	fa91 f1a1 	rbit	r1, r1
 8004a56:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004a5a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004a5e:	fab1 f181 	clz	r1, r1
 8004a62:	b2c9      	uxtb	r1, r1
 8004a64:	408b      	lsls	r3, r1
 8004a66:	4969      	ldr	r1, [pc, #420]	; (8004c0c <HAL_RCC_OscConfig+0x5e8>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a6c:	e0fd      	b.n	8004c6a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 8088 	beq.w	8004b90 <HAL_RCC_OscConfig+0x56c>
 8004a80:	2301      	movs	r3, #1
 8004a82:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a86:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004a8a:	fa93 f3a3 	rbit	r3, r3
 8004a8e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004a92:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a96:	fab3 f383 	clz	r3, r3
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004aa0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aac:	f7fd f9e0 	bl	8001e70 <HAL_GetTick>
 8004ab0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab4:	e00a      	b.n	8004acc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ab6:	f7fd f9db 	bl	8001e70 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d902      	bls.n	8004acc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	f000 bde2 	b.w	8005690 <HAL_RCC_OscConfig+0x106c>
 8004acc:	2302      	movs	r3, #2
 8004ace:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004ad6:	fa93 f3a3 	rbit	r3, r3
 8004ada:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004ade:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae2:	fab3 f383 	clz	r3, r3
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	095b      	lsrs	r3, r3, #5
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d102      	bne.n	8004afc <HAL_RCC_OscConfig+0x4d8>
 8004af6:	4b45      	ldr	r3, [pc, #276]	; (8004c0c <HAL_RCC_OscConfig+0x5e8>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	e013      	b.n	8004b24 <HAL_RCC_OscConfig+0x500>
 8004afc:	2302      	movs	r3, #2
 8004afe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b02:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004b06:	fa93 f3a3 	rbit	r3, r3
 8004b0a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004b0e:	2302      	movs	r3, #2
 8004b10:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004b14:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004b18:	fa93 f3a3 	rbit	r3, r3
 8004b1c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004b20:	4b3a      	ldr	r3, [pc, #232]	; (8004c0c <HAL_RCC_OscConfig+0x5e8>)
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	2202      	movs	r2, #2
 8004b26:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004b2a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004b2e:	fa92 f2a2 	rbit	r2, r2
 8004b32:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004b36:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004b3a:	fab2 f282 	clz	r2, r2
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	f042 0220 	orr.w	r2, r2, #32
 8004b44:	b2d2      	uxtb	r2, r2
 8004b46:	f002 021f 	and.w	r2, r2, #31
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b50:	4013      	ands	r3, r2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0af      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b56:	4b2d      	ldr	r3, [pc, #180]	; (8004c0c <HAL_RCC_OscConfig+0x5e8>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	21f8      	movs	r1, #248	; 0xf8
 8004b6c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b70:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004b74:	fa91 f1a1 	rbit	r1, r1
 8004b78:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004b7c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004b80:	fab1 f181 	clz	r1, r1
 8004b84:	b2c9      	uxtb	r1, r1
 8004b86:	408b      	lsls	r3, r1
 8004b88:	4920      	ldr	r1, [pc, #128]	; (8004c0c <HAL_RCC_OscConfig+0x5e8>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	600b      	str	r3, [r1, #0]
 8004b8e:	e06c      	b.n	8004c6a <HAL_RCC_OscConfig+0x646>
 8004b90:	2301      	movs	r3, #1
 8004b92:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b96:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b9a:	fa93 f3a3 	rbit	r3, r3
 8004b9e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004ba2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ba6:	fab3 f383 	clz	r3, r3
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004bb0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	2300      	movs	r3, #0
 8004bba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bbc:	f7fd f958 	bl	8001e70 <HAL_GetTick>
 8004bc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bc4:	e00a      	b.n	8004bdc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bc6:	f7fd f953 	bl	8001e70 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d902      	bls.n	8004bdc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	f000 bd5a 	b.w	8005690 <HAL_RCC_OscConfig+0x106c>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004be6:	fa93 f3a3 	rbit	r3, r3
 8004bea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004bee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bf2:	fab3 f383 	clz	r3, r3
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	f043 0301 	orr.w	r3, r3, #1
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d104      	bne.n	8004c10 <HAL_RCC_OscConfig+0x5ec>
 8004c06:	4b01      	ldr	r3, [pc, #4]	; (8004c0c <HAL_RCC_OscConfig+0x5e8>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	e015      	b.n	8004c38 <HAL_RCC_OscConfig+0x614>
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	2302      	movs	r3, #2
 8004c12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c1a:	fa93 f3a3 	rbit	r3, r3
 8004c1e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004c22:	2302      	movs	r3, #2
 8004c24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004c28:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004c2c:	fa93 f3a3 	rbit	r3, r3
 8004c30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004c34:	4bc8      	ldr	r3, [pc, #800]	; (8004f58 <HAL_RCC_OscConfig+0x934>)
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	2202      	movs	r2, #2
 8004c3a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004c3e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004c42:	fa92 f2a2 	rbit	r2, r2
 8004c46:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004c4a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004c4e:	fab2 f282 	clz	r2, r2
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	f042 0220 	orr.w	r2, r2, #32
 8004c58:	b2d2      	uxtb	r2, r2
 8004c5a:	f002 021f 	and.w	r2, r2, #31
 8004c5e:	2101      	movs	r1, #1
 8004c60:	fa01 f202 	lsl.w	r2, r1, r2
 8004c64:	4013      	ands	r3, r2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1ad      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 8110 	beq.w	8004ea0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d079      	beq.n	8004d84 <HAL_RCC_OscConfig+0x760>
 8004c90:	2301      	movs	r3, #1
 8004c92:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c96:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004c9a:	fa93 f3a3 	rbit	r3, r3
 8004c9e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ca6:	fab3 f383 	clz	r3, r3
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	461a      	mov	r2, r3
 8004cae:	4bab      	ldr	r3, [pc, #684]	; (8004f5c <HAL_RCC_OscConfig+0x938>)
 8004cb0:	4413      	add	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cba:	f7fd f8d9 	bl	8001e70 <HAL_GetTick>
 8004cbe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cc2:	e00a      	b.n	8004cda <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cc4:	f7fd f8d4 	bl	8001e70 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d902      	bls.n	8004cda <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	f000 bcdb 	b.w	8005690 <HAL_RCC_OscConfig+0x106c>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ce4:	fa93 f3a3 	rbit	r3, r3
 8004ce8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cf0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cfc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	fa93 f2a3 	rbit	r2, r3
 8004d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d18:	2202      	movs	r2, #2
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	fa93 f2a3 	rbit	r2, r3
 8004d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d32:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d34:	4b88      	ldr	r3, [pc, #544]	; (8004f58 <HAL_RCC_OscConfig+0x934>)
 8004d36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d3c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004d40:	2102      	movs	r1, #2
 8004d42:	6019      	str	r1, [r3, #0]
 8004d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d48:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	fa93 f1a3 	rbit	r1, r3
 8004d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d56:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004d5a:	6019      	str	r1, [r3, #0]
  return result;
 8004d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d60:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	fab3 f383 	clz	r3, r3
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	f003 031f 	and.w	r3, r3, #31
 8004d76:	2101      	movs	r1, #1
 8004d78:	fa01 f303 	lsl.w	r3, r1, r3
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0a0      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x6a0>
 8004d82:	e08d      	b.n	8004ea0 <HAL_RCC_OscConfig+0x87c>
 8004d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d88:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d94:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	fa93 f2a3 	rbit	r2, r3
 8004d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004da2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004da6:	601a      	str	r2, [r3, #0]
  return result;
 8004da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004db0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004db2:	fab3 f383 	clz	r3, r3
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	461a      	mov	r2, r3
 8004dba:	4b68      	ldr	r3, [pc, #416]	; (8004f5c <HAL_RCC_OscConfig+0x938>)
 8004dbc:	4413      	add	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dc6:	f7fd f853 	bl	8001e70 <HAL_GetTick>
 8004dca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dce:	e00a      	b.n	8004de6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dd0:	f7fd f84e 	bl	8001e70 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d902      	bls.n	8004de6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	f000 bc55 	b.w	8005690 <HAL_RCC_OscConfig+0x106c>
 8004de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004dee:	2202      	movs	r2, #2
 8004df0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004df6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	fa93 f2a3 	rbit	r2, r3
 8004e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e04:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e0e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004e12:	2202      	movs	r2, #2
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e1a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	fa93 f2a3 	rbit	r2, r3
 8004e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e36:	2202      	movs	r2, #2
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	fa93 f2a3 	rbit	r2, r3
 8004e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e4c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004e50:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e52:	4b41      	ldr	r3, [pc, #260]	; (8004f58 <HAL_RCC_OscConfig+0x934>)
 8004e54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e5a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004e5e:	2102      	movs	r1, #2
 8004e60:	6019      	str	r1, [r3, #0]
 8004e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e66:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	fa93 f1a3 	rbit	r1, r3
 8004e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e74:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004e78:	6019      	str	r1, [r3, #0]
  return result;
 8004e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e7e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	fab3 f383 	clz	r3, r3
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	f003 031f 	and.w	r3, r3, #31
 8004e94:	2101      	movs	r1, #1
 8004e96:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d197      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ea4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 81a1 	beq.w	80051f8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ebc:	4b26      	ldr	r3, [pc, #152]	; (8004f58 <HAL_RCC_OscConfig+0x934>)
 8004ebe:	69db      	ldr	r3, [r3, #28]
 8004ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d116      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ec8:	4b23      	ldr	r3, [pc, #140]	; (8004f58 <HAL_RCC_OscConfig+0x934>)
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	4a22      	ldr	r2, [pc, #136]	; (8004f58 <HAL_RCC_OscConfig+0x934>)
 8004ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed2:	61d3      	str	r3, [r2, #28]
 8004ed4:	4b20      	ldr	r3, [pc, #128]	; (8004f58 <HAL_RCC_OscConfig+0x934>)
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eea:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004eee:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef6:	4b1a      	ldr	r3, [pc, #104]	; (8004f60 <HAL_RCC_OscConfig+0x93c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d11a      	bne.n	8004f38 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f02:	4b17      	ldr	r3, [pc, #92]	; (8004f60 <HAL_RCC_OscConfig+0x93c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a16      	ldr	r2, [pc, #88]	; (8004f60 <HAL_RCC_OscConfig+0x93c>)
 8004f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f0c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f0e:	f7fc ffaf 	bl	8001e70 <HAL_GetTick>
 8004f12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f16:	e009      	b.n	8004f2c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f18:	f7fc ffaa 	bl	8001e70 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b64      	cmp	r3, #100	; 0x64
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e3b1      	b.n	8005690 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f2c:	4b0c      	ldr	r3, [pc, #48]	; (8004f60 <HAL_RCC_OscConfig+0x93c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0ef      	beq.n	8004f18 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d10d      	bne.n	8004f64 <HAL_RCC_OscConfig+0x940>
 8004f48:	4b03      	ldr	r3, [pc, #12]	; (8004f58 <HAL_RCC_OscConfig+0x934>)
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	4a02      	ldr	r2, [pc, #8]	; (8004f58 <HAL_RCC_OscConfig+0x934>)
 8004f4e:	f043 0301 	orr.w	r3, r3, #1
 8004f52:	6213      	str	r3, [r2, #32]
 8004f54:	e03c      	b.n	8004fd0 <HAL_RCC_OscConfig+0x9ac>
 8004f56:	bf00      	nop
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	10908120 	.word	0x10908120
 8004f60:	40007000 	.word	0x40007000
 8004f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10c      	bne.n	8004f8e <HAL_RCC_OscConfig+0x96a>
 8004f74:	4bc1      	ldr	r3, [pc, #772]	; (800527c <HAL_RCC_OscConfig+0xc58>)
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	4ac0      	ldr	r2, [pc, #768]	; (800527c <HAL_RCC_OscConfig+0xc58>)
 8004f7a:	f023 0301 	bic.w	r3, r3, #1
 8004f7e:	6213      	str	r3, [r2, #32]
 8004f80:	4bbe      	ldr	r3, [pc, #760]	; (800527c <HAL_RCC_OscConfig+0xc58>)
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	4abd      	ldr	r2, [pc, #756]	; (800527c <HAL_RCC_OscConfig+0xc58>)
 8004f86:	f023 0304 	bic.w	r3, r3, #4
 8004f8a:	6213      	str	r3, [r2, #32]
 8004f8c:	e020      	b.n	8004fd0 <HAL_RCC_OscConfig+0x9ac>
 8004f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	2b05      	cmp	r3, #5
 8004f9c:	d10c      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x994>
 8004f9e:	4bb7      	ldr	r3, [pc, #732]	; (800527c <HAL_RCC_OscConfig+0xc58>)
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	4ab6      	ldr	r2, [pc, #728]	; (800527c <HAL_RCC_OscConfig+0xc58>)
 8004fa4:	f043 0304 	orr.w	r3, r3, #4
 8004fa8:	6213      	str	r3, [r2, #32]
 8004faa:	4bb4      	ldr	r3, [pc, #720]	; (800527c <HAL_RCC_OscConfig+0xc58>)
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	4ab3      	ldr	r2, [pc, #716]	; (800527c <HAL_RCC_OscConfig+0xc58>)
 8004fb0:	f043 0301 	orr.w	r3, r3, #1
 8004fb4:	6213      	str	r3, [r2, #32]
 8004fb6:	e00b      	b.n	8004fd0 <HAL_RCC_OscConfig+0x9ac>
 8004fb8:	4bb0      	ldr	r3, [pc, #704]	; (800527c <HAL_RCC_OscConfig+0xc58>)
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	4aaf      	ldr	r2, [pc, #700]	; (800527c <HAL_RCC_OscConfig+0xc58>)
 8004fbe:	f023 0301 	bic.w	r3, r3, #1
 8004fc2:	6213      	str	r3, [r2, #32]
 8004fc4:	4bad      	ldr	r3, [pc, #692]	; (800527c <HAL_RCC_OscConfig+0xc58>)
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	4aac      	ldr	r2, [pc, #688]	; (800527c <HAL_RCC_OscConfig+0xc58>)
 8004fca:	f023 0304 	bic.w	r3, r3, #4
 8004fce:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 8081 	beq.w	80050e4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fe2:	f7fc ff45 	bl	8001e70 <HAL_GetTick>
 8004fe6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fea:	e00b      	b.n	8005004 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fec:	f7fc ff40 	bl	8001e70 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e345      	b.n	8005690 <HAL_RCC_OscConfig+0x106c>
 8005004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005008:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800500c:	2202      	movs	r2, #2
 800500e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005014:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	fa93 f2a3 	rbit	r2, r3
 800501e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005022:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800502c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005030:	2202      	movs	r2, #2
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005038:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	fa93 f2a3 	rbit	r2, r3
 8005042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005046:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800504a:	601a      	str	r2, [r3, #0]
  return result;
 800504c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005050:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005054:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005056:	fab3 f383 	clz	r3, r3
 800505a:	b2db      	uxtb	r3, r3
 800505c:	095b      	lsrs	r3, r3, #5
 800505e:	b2db      	uxtb	r3, r3
 8005060:	f043 0302 	orr.w	r3, r3, #2
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d102      	bne.n	8005070 <HAL_RCC_OscConfig+0xa4c>
 800506a:	4b84      	ldr	r3, [pc, #528]	; (800527c <HAL_RCC_OscConfig+0xc58>)
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	e013      	b.n	8005098 <HAL_RCC_OscConfig+0xa74>
 8005070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005074:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005078:	2202      	movs	r2, #2
 800507a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800507c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005080:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	fa93 f2a3 	rbit	r2, r3
 800508a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800508e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	4b79      	ldr	r3, [pc, #484]	; (800527c <HAL_RCC_OscConfig+0xc58>)
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800509c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80050a0:	2102      	movs	r1, #2
 80050a2:	6011      	str	r1, [r2, #0]
 80050a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050a8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80050ac:	6812      	ldr	r2, [r2, #0]
 80050ae:	fa92 f1a2 	rbit	r1, r2
 80050b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050b6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80050ba:	6011      	str	r1, [r2, #0]
  return result;
 80050bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050c0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80050c4:	6812      	ldr	r2, [r2, #0]
 80050c6:	fab2 f282 	clz	r2, r2
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	f002 021f 	and.w	r2, r2, #31
 80050d6:	2101      	movs	r1, #1
 80050d8:	fa01 f202 	lsl.w	r2, r1, r2
 80050dc:	4013      	ands	r3, r2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d084      	beq.n	8004fec <HAL_RCC_OscConfig+0x9c8>
 80050e2:	e07f      	b.n	80051e4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050e4:	f7fc fec4 	bl	8001e70 <HAL_GetTick>
 80050e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050ec:	e00b      	b.n	8005106 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050ee:	f7fc febf 	bl	8001e70 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fe:	4293      	cmp	r3, r2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e2c4      	b.n	8005690 <HAL_RCC_OscConfig+0x106c>
 8005106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800510a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800510e:	2202      	movs	r2, #2
 8005110:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005116:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	fa93 f2a3 	rbit	r2, r3
 8005120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005124:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800512e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005132:	2202      	movs	r2, #2
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800513a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	fa93 f2a3 	rbit	r2, r3
 8005144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005148:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800514c:	601a      	str	r2, [r3, #0]
  return result;
 800514e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005152:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005156:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005158:	fab3 f383 	clz	r3, r3
 800515c:	b2db      	uxtb	r3, r3
 800515e:	095b      	lsrs	r3, r3, #5
 8005160:	b2db      	uxtb	r3, r3
 8005162:	f043 0302 	orr.w	r3, r3, #2
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d102      	bne.n	8005172 <HAL_RCC_OscConfig+0xb4e>
 800516c:	4b43      	ldr	r3, [pc, #268]	; (800527c <HAL_RCC_OscConfig+0xc58>)
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	e013      	b.n	800519a <HAL_RCC_OscConfig+0xb76>
 8005172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005176:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800517a:	2202      	movs	r2, #2
 800517c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005182:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	fa93 f2a3 	rbit	r2, r3
 800518c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005190:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	4b39      	ldr	r3, [pc, #228]	; (800527c <HAL_RCC_OscConfig+0xc58>)
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800519e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80051a2:	2102      	movs	r1, #2
 80051a4:	6011      	str	r1, [r2, #0]
 80051a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051aa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80051ae:	6812      	ldr	r2, [r2, #0]
 80051b0:	fa92 f1a2 	rbit	r1, r2
 80051b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051b8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80051bc:	6011      	str	r1, [r2, #0]
  return result;
 80051be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051c2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80051c6:	6812      	ldr	r2, [r2, #0]
 80051c8:	fab2 f282 	clz	r2, r2
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	f002 021f 	and.w	r2, r2, #31
 80051d8:	2101      	movs	r1, #1
 80051da:	fa01 f202 	lsl.w	r2, r1, r2
 80051de:	4013      	ands	r3, r2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d184      	bne.n	80050ee <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80051e4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d105      	bne.n	80051f8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ec:	4b23      	ldr	r3, [pc, #140]	; (800527c <HAL_RCC_OscConfig+0xc58>)
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	4a22      	ldr	r2, [pc, #136]	; (800527c <HAL_RCC_OscConfig+0xc58>)
 80051f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051f6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 8242 	beq.w	800568e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800520a:	4b1c      	ldr	r3, [pc, #112]	; (800527c <HAL_RCC_OscConfig+0xc58>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f003 030c 	and.w	r3, r3, #12
 8005212:	2b08      	cmp	r3, #8
 8005214:	f000 8213 	beq.w	800563e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800521c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	2b02      	cmp	r3, #2
 8005226:	f040 8162 	bne.w	80054ee <HAL_RCC_OscConfig+0xeca>
 800522a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800522e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005232:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005236:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800523c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	fa93 f2a3 	rbit	r2, r3
 8005246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800524a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800524e:	601a      	str	r2, [r3, #0]
  return result;
 8005250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005254:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005258:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800525a:	fab3 f383 	clz	r3, r3
 800525e:	b2db      	uxtb	r3, r3
 8005260:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005264:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	461a      	mov	r2, r3
 800526c:	2300      	movs	r3, #0
 800526e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005270:	f7fc fdfe 	bl	8001e70 <HAL_GetTick>
 8005274:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005278:	e00c      	b.n	8005294 <HAL_RCC_OscConfig+0xc70>
 800527a:	bf00      	nop
 800527c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005280:	f7fc fdf6 	bl	8001e70 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e1fd      	b.n	8005690 <HAL_RCC_OscConfig+0x106c>
 8005294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005298:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800529c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052a6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	fa93 f2a3 	rbit	r2, r3
 80052b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052b4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80052b8:	601a      	str	r2, [r3, #0]
  return result;
 80052ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052be:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80052c2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052c4:	fab3 f383 	clz	r3, r3
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	f043 0301 	orr.w	r3, r3, #1
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d102      	bne.n	80052de <HAL_RCC_OscConfig+0xcba>
 80052d8:	4bb0      	ldr	r3, [pc, #704]	; (800559c <HAL_RCC_OscConfig+0xf78>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	e027      	b.n	800532e <HAL_RCC_OscConfig+0xd0a>
 80052de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052e2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80052e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	fa93 f2a3 	rbit	r2, r3
 80052fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052fe:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005308:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800530c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005316:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	fa93 f2a3 	rbit	r2, r3
 8005320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005324:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	4b9c      	ldr	r3, [pc, #624]	; (800559c <HAL_RCC_OscConfig+0xf78>)
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005332:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005336:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800533a:	6011      	str	r1, [r2, #0]
 800533c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005340:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005344:	6812      	ldr	r2, [r2, #0]
 8005346:	fa92 f1a2 	rbit	r1, r2
 800534a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800534e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005352:	6011      	str	r1, [r2, #0]
  return result;
 8005354:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005358:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800535c:	6812      	ldr	r2, [r2, #0]
 800535e:	fab2 f282 	clz	r2, r2
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	f042 0220 	orr.w	r2, r2, #32
 8005368:	b2d2      	uxtb	r2, r2
 800536a:	f002 021f 	and.w	r2, r2, #31
 800536e:	2101      	movs	r1, #1
 8005370:	fa01 f202 	lsl.w	r2, r1, r2
 8005374:	4013      	ands	r3, r2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d182      	bne.n	8005280 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800537a:	4b88      	ldr	r3, [pc, #544]	; (800559c <HAL_RCC_OscConfig+0xf78>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005386:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800538e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005392:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	430b      	orrs	r3, r1
 800539c:	497f      	ldr	r1, [pc, #508]	; (800559c <HAL_RCC_OscConfig+0xf78>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	604b      	str	r3, [r1, #4]
 80053a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053a6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80053aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053b4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	fa93 f2a3 	rbit	r2, r3
 80053be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053c2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80053c6:	601a      	str	r2, [r3, #0]
  return result;
 80053c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053cc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80053d0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053d2:	fab3 f383 	clz	r3, r3
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80053dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	461a      	mov	r2, r3
 80053e4:	2301      	movs	r3, #1
 80053e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e8:	f7fc fd42 	bl	8001e70 <HAL_GetTick>
 80053ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053f0:	e009      	b.n	8005406 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053f2:	f7fc fd3d 	bl	8001e70 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d901      	bls.n	8005406 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e144      	b.n	8005690 <HAL_RCC_OscConfig+0x106c>
 8005406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800540a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800540e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005412:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005418:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	fa93 f2a3 	rbit	r2, r3
 8005422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005426:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800542a:	601a      	str	r2, [r3, #0]
  return result;
 800542c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005430:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005434:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005436:	fab3 f383 	clz	r3, r3
 800543a:	b2db      	uxtb	r3, r3
 800543c:	095b      	lsrs	r3, r3, #5
 800543e:	b2db      	uxtb	r3, r3
 8005440:	f043 0301 	orr.w	r3, r3, #1
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b01      	cmp	r3, #1
 8005448:	d102      	bne.n	8005450 <HAL_RCC_OscConfig+0xe2c>
 800544a:	4b54      	ldr	r3, [pc, #336]	; (800559c <HAL_RCC_OscConfig+0xf78>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	e027      	b.n	80054a0 <HAL_RCC_OscConfig+0xe7c>
 8005450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005454:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005458:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800545c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005462:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	fa93 f2a3 	rbit	r2, r3
 800546c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005470:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800547a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800547e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005488:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	fa93 f2a3 	rbit	r2, r3
 8005492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005496:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	4b3f      	ldr	r3, [pc, #252]	; (800559c <HAL_RCC_OscConfig+0xf78>)
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054a4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80054a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80054ac:	6011      	str	r1, [r2, #0]
 80054ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054b2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80054b6:	6812      	ldr	r2, [r2, #0]
 80054b8:	fa92 f1a2 	rbit	r1, r2
 80054bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054c0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80054c4:	6011      	str	r1, [r2, #0]
  return result;
 80054c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054ca:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80054ce:	6812      	ldr	r2, [r2, #0]
 80054d0:	fab2 f282 	clz	r2, r2
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	f042 0220 	orr.w	r2, r2, #32
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	f002 021f 	and.w	r2, r2, #31
 80054e0:	2101      	movs	r1, #1
 80054e2:	fa01 f202 	lsl.w	r2, r1, r2
 80054e6:	4013      	ands	r3, r2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d082      	beq.n	80053f2 <HAL_RCC_OscConfig+0xdce>
 80054ec:	e0cf      	b.n	800568e <HAL_RCC_OscConfig+0x106a>
 80054ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054f2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80054f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005500:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	fa93 f2a3 	rbit	r2, r3
 800550a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800550e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005512:	601a      	str	r2, [r3, #0]
  return result;
 8005514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005518:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800551c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800551e:	fab3 f383 	clz	r3, r3
 8005522:	b2db      	uxtb	r3, r3
 8005524:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005528:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	461a      	mov	r2, r3
 8005530:	2300      	movs	r3, #0
 8005532:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005534:	f7fc fc9c 	bl	8001e70 <HAL_GetTick>
 8005538:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800553c:	e009      	b.n	8005552 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800553e:	f7fc fc97 	bl	8001e70 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e09e      	b.n	8005690 <HAL_RCC_OscConfig+0x106c>
 8005552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005556:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800555a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800555e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005564:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	fa93 f2a3 	rbit	r2, r3
 800556e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005572:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005576:	601a      	str	r2, [r3, #0]
  return result;
 8005578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800557c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005580:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005582:	fab3 f383 	clz	r3, r3
 8005586:	b2db      	uxtb	r3, r3
 8005588:	095b      	lsrs	r3, r3, #5
 800558a:	b2db      	uxtb	r3, r3
 800558c:	f043 0301 	orr.w	r3, r3, #1
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b01      	cmp	r3, #1
 8005594:	d104      	bne.n	80055a0 <HAL_RCC_OscConfig+0xf7c>
 8005596:	4b01      	ldr	r3, [pc, #4]	; (800559c <HAL_RCC_OscConfig+0xf78>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	e029      	b.n	80055f0 <HAL_RCC_OscConfig+0xfcc>
 800559c:	40021000 	.word	0x40021000
 80055a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055a4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80055a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055b2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	fa93 f2a3 	rbit	r2, r3
 80055bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ca:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80055ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055d8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	fa93 f2a3 	rbit	r2, r3
 80055e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055e6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	4b2b      	ldr	r3, [pc, #172]	; (800569c <HAL_RCC_OscConfig+0x1078>)
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055f4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80055f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80055fc:	6011      	str	r1, [r2, #0]
 80055fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005602:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005606:	6812      	ldr	r2, [r2, #0]
 8005608:	fa92 f1a2 	rbit	r1, r2
 800560c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005610:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005614:	6011      	str	r1, [r2, #0]
  return result;
 8005616:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800561a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800561e:	6812      	ldr	r2, [r2, #0]
 8005620:	fab2 f282 	clz	r2, r2
 8005624:	b2d2      	uxtb	r2, r2
 8005626:	f042 0220 	orr.w	r2, r2, #32
 800562a:	b2d2      	uxtb	r2, r2
 800562c:	f002 021f 	and.w	r2, r2, #31
 8005630:	2101      	movs	r1, #1
 8005632:	fa01 f202 	lsl.w	r2, r1, r2
 8005636:	4013      	ands	r3, r2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d180      	bne.n	800553e <HAL_RCC_OscConfig+0xf1a>
 800563c:	e027      	b.n	800568e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800563e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005642:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d101      	bne.n	8005652 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e01e      	b.n	8005690 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005652:	4b12      	ldr	r3, [pc, #72]	; (800569c <HAL_RCC_OscConfig+0x1078>)
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800565a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800565e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005666:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	429a      	cmp	r2, r3
 8005670:	d10b      	bne.n	800568a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005672:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005676:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800567a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800567e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005686:	429a      	cmp	r2, r3
 8005688:	d001      	beq.n	800568e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e000      	b.n	8005690 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	40021000 	.word	0x40021000

080056a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b09e      	sub	sp, #120	; 0x78
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e162      	b.n	800597e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056b8:	4b90      	ldr	r3, [pc, #576]	; (80058fc <HAL_RCC_ClockConfig+0x25c>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d910      	bls.n	80056e8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056c6:	4b8d      	ldr	r3, [pc, #564]	; (80058fc <HAL_RCC_ClockConfig+0x25c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f023 0207 	bic.w	r2, r3, #7
 80056ce:	498b      	ldr	r1, [pc, #556]	; (80058fc <HAL_RCC_ClockConfig+0x25c>)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056d6:	4b89      	ldr	r3, [pc, #548]	; (80058fc <HAL_RCC_ClockConfig+0x25c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0307 	and.w	r3, r3, #7
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d001      	beq.n	80056e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e14a      	b.n	800597e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d008      	beq.n	8005706 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056f4:	4b82      	ldr	r3, [pc, #520]	; (8005900 <HAL_RCC_ClockConfig+0x260>)
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	497f      	ldr	r1, [pc, #508]	; (8005900 <HAL_RCC_ClockConfig+0x260>)
 8005702:	4313      	orrs	r3, r2
 8005704:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 80dc 	beq.w	80058cc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d13c      	bne.n	8005796 <HAL_RCC_ClockConfig+0xf6>
 800571c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005720:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005722:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005724:	fa93 f3a3 	rbit	r3, r3
 8005728:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800572a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800572c:	fab3 f383 	clz	r3, r3
 8005730:	b2db      	uxtb	r3, r3
 8005732:	095b      	lsrs	r3, r3, #5
 8005734:	b2db      	uxtb	r3, r3
 8005736:	f043 0301 	orr.w	r3, r3, #1
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b01      	cmp	r3, #1
 800573e:	d102      	bne.n	8005746 <HAL_RCC_ClockConfig+0xa6>
 8005740:	4b6f      	ldr	r3, [pc, #444]	; (8005900 <HAL_RCC_ClockConfig+0x260>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	e00f      	b.n	8005766 <HAL_RCC_ClockConfig+0xc6>
 8005746:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800574a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800574c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800574e:	fa93 f3a3 	rbit	r3, r3
 8005752:	667b      	str	r3, [r7, #100]	; 0x64
 8005754:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005758:	663b      	str	r3, [r7, #96]	; 0x60
 800575a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800575c:	fa93 f3a3 	rbit	r3, r3
 8005760:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005762:	4b67      	ldr	r3, [pc, #412]	; (8005900 <HAL_RCC_ClockConfig+0x260>)
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800576a:	65ba      	str	r2, [r7, #88]	; 0x58
 800576c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800576e:	fa92 f2a2 	rbit	r2, r2
 8005772:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005774:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005776:	fab2 f282 	clz	r2, r2
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	f042 0220 	orr.w	r2, r2, #32
 8005780:	b2d2      	uxtb	r2, r2
 8005782:	f002 021f 	and.w	r2, r2, #31
 8005786:	2101      	movs	r1, #1
 8005788:	fa01 f202 	lsl.w	r2, r1, r2
 800578c:	4013      	ands	r3, r2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d17b      	bne.n	800588a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e0f3      	b.n	800597e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	2b02      	cmp	r3, #2
 800579c:	d13c      	bne.n	8005818 <HAL_RCC_ClockConfig+0x178>
 800579e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057a6:	fa93 f3a3 	rbit	r3, r3
 80057aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80057ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ae:	fab3 f383 	clz	r3, r3
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	095b      	lsrs	r3, r3, #5
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	f043 0301 	orr.w	r3, r3, #1
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d102      	bne.n	80057c8 <HAL_RCC_ClockConfig+0x128>
 80057c2:	4b4f      	ldr	r3, [pc, #316]	; (8005900 <HAL_RCC_ClockConfig+0x260>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	e00f      	b.n	80057e8 <HAL_RCC_ClockConfig+0x148>
 80057c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057cc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057d0:	fa93 f3a3 	rbit	r3, r3
 80057d4:	647b      	str	r3, [r7, #68]	; 0x44
 80057d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057da:	643b      	str	r3, [r7, #64]	; 0x40
 80057dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057de:	fa93 f3a3 	rbit	r3, r3
 80057e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057e4:	4b46      	ldr	r3, [pc, #280]	; (8005900 <HAL_RCC_ClockConfig+0x260>)
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057ec:	63ba      	str	r2, [r7, #56]	; 0x38
 80057ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057f0:	fa92 f2a2 	rbit	r2, r2
 80057f4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80057f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057f8:	fab2 f282 	clz	r2, r2
 80057fc:	b2d2      	uxtb	r2, r2
 80057fe:	f042 0220 	orr.w	r2, r2, #32
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	f002 021f 	and.w	r2, r2, #31
 8005808:	2101      	movs	r1, #1
 800580a:	fa01 f202 	lsl.w	r2, r1, r2
 800580e:	4013      	ands	r3, r2
 8005810:	2b00      	cmp	r3, #0
 8005812:	d13a      	bne.n	800588a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e0b2      	b.n	800597e <HAL_RCC_ClockConfig+0x2de>
 8005818:	2302      	movs	r3, #2
 800581a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800581c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581e:	fa93 f3a3 	rbit	r3, r3
 8005822:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005826:	fab3 f383 	clz	r3, r3
 800582a:	b2db      	uxtb	r3, r3
 800582c:	095b      	lsrs	r3, r3, #5
 800582e:	b2db      	uxtb	r3, r3
 8005830:	f043 0301 	orr.w	r3, r3, #1
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b01      	cmp	r3, #1
 8005838:	d102      	bne.n	8005840 <HAL_RCC_ClockConfig+0x1a0>
 800583a:	4b31      	ldr	r3, [pc, #196]	; (8005900 <HAL_RCC_ClockConfig+0x260>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	e00d      	b.n	800585c <HAL_RCC_ClockConfig+0x1bc>
 8005840:	2302      	movs	r3, #2
 8005842:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005846:	fa93 f3a3 	rbit	r3, r3
 800584a:	627b      	str	r3, [r7, #36]	; 0x24
 800584c:	2302      	movs	r3, #2
 800584e:	623b      	str	r3, [r7, #32]
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	fa93 f3a3 	rbit	r3, r3
 8005856:	61fb      	str	r3, [r7, #28]
 8005858:	4b29      	ldr	r3, [pc, #164]	; (8005900 <HAL_RCC_ClockConfig+0x260>)
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	2202      	movs	r2, #2
 800585e:	61ba      	str	r2, [r7, #24]
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	fa92 f2a2 	rbit	r2, r2
 8005866:	617a      	str	r2, [r7, #20]
  return result;
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	fab2 f282 	clz	r2, r2
 800586e:	b2d2      	uxtb	r2, r2
 8005870:	f042 0220 	orr.w	r2, r2, #32
 8005874:	b2d2      	uxtb	r2, r2
 8005876:	f002 021f 	and.w	r2, r2, #31
 800587a:	2101      	movs	r1, #1
 800587c:	fa01 f202 	lsl.w	r2, r1, r2
 8005880:	4013      	ands	r3, r2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e079      	b.n	800597e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800588a:	4b1d      	ldr	r3, [pc, #116]	; (8005900 <HAL_RCC_ClockConfig+0x260>)
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f023 0203 	bic.w	r2, r3, #3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	491a      	ldr	r1, [pc, #104]	; (8005900 <HAL_RCC_ClockConfig+0x260>)
 8005898:	4313      	orrs	r3, r2
 800589a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800589c:	f7fc fae8 	bl	8001e70 <HAL_GetTick>
 80058a0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058a2:	e00a      	b.n	80058ba <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058a4:	f7fc fae4 	bl	8001e70 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e061      	b.n	800597e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ba:	4b11      	ldr	r3, [pc, #68]	; (8005900 <HAL_RCC_ClockConfig+0x260>)
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f003 020c 	and.w	r2, r3, #12
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d1eb      	bne.n	80058a4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058cc:	4b0b      	ldr	r3, [pc, #44]	; (80058fc <HAL_RCC_ClockConfig+0x25c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d214      	bcs.n	8005904 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058da:	4b08      	ldr	r3, [pc, #32]	; (80058fc <HAL_RCC_ClockConfig+0x25c>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f023 0207 	bic.w	r2, r3, #7
 80058e2:	4906      	ldr	r1, [pc, #24]	; (80058fc <HAL_RCC_ClockConfig+0x25c>)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ea:	4b04      	ldr	r3, [pc, #16]	; (80058fc <HAL_RCC_ClockConfig+0x25c>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0307 	and.w	r3, r3, #7
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d005      	beq.n	8005904 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e040      	b.n	800597e <HAL_RCC_ClockConfig+0x2de>
 80058fc:	40022000 	.word	0x40022000
 8005900:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	d008      	beq.n	8005922 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005910:	4b1d      	ldr	r3, [pc, #116]	; (8005988 <HAL_RCC_ClockConfig+0x2e8>)
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	491a      	ldr	r1, [pc, #104]	; (8005988 <HAL_RCC_ClockConfig+0x2e8>)
 800591e:	4313      	orrs	r3, r2
 8005920:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0308 	and.w	r3, r3, #8
 800592a:	2b00      	cmp	r3, #0
 800592c:	d009      	beq.n	8005942 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800592e:	4b16      	ldr	r3, [pc, #88]	; (8005988 <HAL_RCC_ClockConfig+0x2e8>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	4912      	ldr	r1, [pc, #72]	; (8005988 <HAL_RCC_ClockConfig+0x2e8>)
 800593e:	4313      	orrs	r3, r2
 8005940:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005942:	f000 f829 	bl	8005998 <HAL_RCC_GetSysClockFreq>
 8005946:	4601      	mov	r1, r0
 8005948:	4b0f      	ldr	r3, [pc, #60]	; (8005988 <HAL_RCC_ClockConfig+0x2e8>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005950:	22f0      	movs	r2, #240	; 0xf0
 8005952:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	fa92 f2a2 	rbit	r2, r2
 800595a:	60fa      	str	r2, [r7, #12]
  return result;
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	fab2 f282 	clz	r2, r2
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	40d3      	lsrs	r3, r2
 8005966:	4a09      	ldr	r2, [pc, #36]	; (800598c <HAL_RCC_ClockConfig+0x2ec>)
 8005968:	5cd3      	ldrb	r3, [r2, r3]
 800596a:	fa21 f303 	lsr.w	r3, r1, r3
 800596e:	4a08      	ldr	r2, [pc, #32]	; (8005990 <HAL_RCC_ClockConfig+0x2f0>)
 8005970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005972:	4b08      	ldr	r3, [pc, #32]	; (8005994 <HAL_RCC_ClockConfig+0x2f4>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4618      	mov	r0, r3
 8005978:	f7fc fa36 	bl	8001de8 <HAL_InitTick>
  
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3778      	adds	r7, #120	; 0x78
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	40021000 	.word	0x40021000
 800598c:	0800eb30 	.word	0x0800eb30
 8005990:	20000000 	.word	0x20000000
 8005994:	20000004 	.word	0x20000004

08005998 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005998:	b480      	push	{r7}
 800599a:	b08b      	sub	sp, #44	; 0x2c
 800599c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	61fb      	str	r3, [r7, #28]
 80059a2:	2300      	movs	r3, #0
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	2300      	movs	r3, #0
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
 80059aa:	2300      	movs	r3, #0
 80059ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80059b2:	4b29      	ldr	r3, [pc, #164]	; (8005a58 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	f003 030c 	and.w	r3, r3, #12
 80059be:	2b04      	cmp	r3, #4
 80059c0:	d002      	beq.n	80059c8 <HAL_RCC_GetSysClockFreq+0x30>
 80059c2:	2b08      	cmp	r3, #8
 80059c4:	d003      	beq.n	80059ce <HAL_RCC_GetSysClockFreq+0x36>
 80059c6:	e03c      	b.n	8005a42 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80059c8:	4b24      	ldr	r3, [pc, #144]	; (8005a5c <HAL_RCC_GetSysClockFreq+0xc4>)
 80059ca:	623b      	str	r3, [r7, #32]
      break;
 80059cc:	e03c      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80059d4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80059d8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	fa92 f2a2 	rbit	r2, r2
 80059e0:	607a      	str	r2, [r7, #4]
  return result;
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	fab2 f282 	clz	r2, r2
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	40d3      	lsrs	r3, r2
 80059ec:	4a1c      	ldr	r2, [pc, #112]	; (8005a60 <HAL_RCC_GetSysClockFreq+0xc8>)
 80059ee:	5cd3      	ldrb	r3, [r2, r3]
 80059f0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80059f2:	4b19      	ldr	r3, [pc, #100]	; (8005a58 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	f003 030f 	and.w	r3, r3, #15
 80059fa:	220f      	movs	r2, #15
 80059fc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	fa92 f2a2 	rbit	r2, r2
 8005a04:	60fa      	str	r2, [r7, #12]
  return result;
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	fab2 f282 	clz	r2, r2
 8005a0c:	b2d2      	uxtb	r2, r2
 8005a0e:	40d3      	lsrs	r3, r2
 8005a10:	4a14      	ldr	r2, [pc, #80]	; (8005a64 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005a12:	5cd3      	ldrb	r3, [r2, r3]
 8005a14:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d008      	beq.n	8005a32 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005a20:	4a0e      	ldr	r2, [pc, #56]	; (8005a5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	fb02 f303 	mul.w	r3, r2, r3
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a30:	e004      	b.n	8005a3c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	4a0c      	ldr	r2, [pc, #48]	; (8005a68 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a36:	fb02 f303 	mul.w	r3, r2, r3
 8005a3a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3e:	623b      	str	r3, [r7, #32]
      break;
 8005a40:	e002      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a42:	4b06      	ldr	r3, [pc, #24]	; (8005a5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005a44:	623b      	str	r3, [r7, #32]
      break;
 8005a46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a48:	6a3b      	ldr	r3, [r7, #32]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	372c      	adds	r7, #44	; 0x2c
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	007a1200 	.word	0x007a1200
 8005a60:	0800eb48 	.word	0x0800eb48
 8005a64:	0800eb58 	.word	0x0800eb58
 8005a68:	003d0900 	.word	0x003d0900

08005a6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a70:	4b03      	ldr	r3, [pc, #12]	; (8005a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a72:	681b      	ldr	r3, [r3, #0]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	20000000 	.word	0x20000000

08005a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005a8a:	f7ff ffef 	bl	8005a6c <HAL_RCC_GetHCLKFreq>
 8005a8e:	4601      	mov	r1, r0
 8005a90:	4b0b      	ldr	r3, [pc, #44]	; (8005ac0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a98:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005a9c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	fa92 f2a2 	rbit	r2, r2
 8005aa4:	603a      	str	r2, [r7, #0]
  return result;
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	fab2 f282 	clz	r2, r2
 8005aac:	b2d2      	uxtb	r2, r2
 8005aae:	40d3      	lsrs	r3, r2
 8005ab0:	4a04      	ldr	r2, [pc, #16]	; (8005ac4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005ab2:	5cd3      	ldrb	r3, [r2, r3]
 8005ab4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	40021000 	.word	0x40021000
 8005ac4:	0800eb40 	.word	0x0800eb40

08005ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005ace:	f7ff ffcd 	bl	8005a6c <HAL_RCC_GetHCLKFreq>
 8005ad2:	4601      	mov	r1, r0
 8005ad4:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005adc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005ae0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	fa92 f2a2 	rbit	r2, r2
 8005ae8:	603a      	str	r2, [r7, #0]
  return result;
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	fab2 f282 	clz	r2, r2
 8005af0:	b2d2      	uxtb	r2, r2
 8005af2:	40d3      	lsrs	r3, r2
 8005af4:	4a04      	ldr	r2, [pc, #16]	; (8005b08 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005af6:	5cd3      	ldrb	r3, [r2, r3]
 8005af8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005afc:	4618      	mov	r0, r3
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	40021000 	.word	0x40021000
 8005b08:	0800eb40 	.word	0x0800eb40

08005b0c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b092      	sub	sp, #72	; 0x48
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b14:	2300      	movs	r3, #0
 8005b16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 80d4 	beq.w	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b30:	4b4e      	ldr	r3, [pc, #312]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10e      	bne.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b3c:	4b4b      	ldr	r3, [pc, #300]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	4a4a      	ldr	r2, [pc, #296]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b46:	61d3      	str	r3, [r2, #28]
 8005b48:	4b48      	ldr	r3, [pc, #288]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b50:	60bb      	str	r3, [r7, #8]
 8005b52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b54:	2301      	movs	r3, #1
 8005b56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b5a:	4b45      	ldr	r3, [pc, #276]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d118      	bne.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b66:	4b42      	ldr	r3, [pc, #264]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a41      	ldr	r2, [pc, #260]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b70:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b72:	f7fc f97d 	bl	8001e70 <HAL_GetTick>
 8005b76:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b78:	e008      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b7a:	f7fc f979 	bl	8001e70 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b64      	cmp	r3, #100	; 0x64
 8005b86:	d901      	bls.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e169      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b8c:	4b38      	ldr	r3, [pc, #224]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0f0      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b98:	4b34      	ldr	r3, [pc, #208]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 8084 	beq.w	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d07c      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bb8:	4b2c      	ldr	r3, [pc, #176]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005bc6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bca:	fa93 f3a3 	rbit	r3, r3
 8005bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005bd2:	fab3 f383 	clz	r3, r3
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	461a      	mov	r2, r3
 8005bda:	4b26      	ldr	r3, [pc, #152]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005bdc:	4413      	add	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	461a      	mov	r2, r3
 8005be2:	2301      	movs	r3, #1
 8005be4:	6013      	str	r3, [r2, #0]
 8005be6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005bea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bee:	fa93 f3a3 	rbit	r3, r3
 8005bf2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005bf6:	fab3 f383 	clz	r3, r3
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	4b1d      	ldr	r3, [pc, #116]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c00:	4413      	add	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	461a      	mov	r2, r3
 8005c06:	2300      	movs	r3, #0
 8005c08:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c0a:	4a18      	ldr	r2, [pc, #96]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c0e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d04b      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c1a:	f7fc f929 	bl	8001e70 <HAL_GetTick>
 8005c1e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c20:	e00a      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c22:	f7fc f925 	bl	8001e70 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d901      	bls.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e113      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005c38:	2302      	movs	r3, #2
 8005c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3e:	fa93 f3a3 	rbit	r3, r3
 8005c42:	627b      	str	r3, [r7, #36]	; 0x24
 8005c44:	2302      	movs	r3, #2
 8005c46:	623b      	str	r3, [r7, #32]
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	fa93 f3a3 	rbit	r3, r3
 8005c4e:	61fb      	str	r3, [r7, #28]
  return result;
 8005c50:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c52:	fab3 f383 	clz	r3, r3
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	095b      	lsrs	r3, r3, #5
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	f043 0302 	orr.w	r3, r3, #2
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d108      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005c66:	4b01      	ldr	r3, [pc, #4]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	e00d      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005c6c:	40021000 	.word	0x40021000
 8005c70:	40007000 	.word	0x40007000
 8005c74:	10908100 	.word	0x10908100
 8005c78:	2302      	movs	r3, #2
 8005c7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	fa93 f3a3 	rbit	r3, r3
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	4b78      	ldr	r3, [pc, #480]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	2202      	movs	r2, #2
 8005c8a:	613a      	str	r2, [r7, #16]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	fa92 f2a2 	rbit	r2, r2
 8005c92:	60fa      	str	r2, [r7, #12]
  return result;
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	fab2 f282 	clz	r2, r2
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ca0:	b2d2      	uxtb	r2, r2
 8005ca2:	f002 021f 	and.w	r2, r2, #31
 8005ca6:	2101      	movs	r1, #1
 8005ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8005cac:	4013      	ands	r3, r2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d0b7      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005cb2:	4b6d      	ldr	r3, [pc, #436]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	496a      	ldr	r1, [pc, #424]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005cc4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d105      	bne.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ccc:	4b66      	ldr	r3, [pc, #408]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cce:	69db      	ldr	r3, [r3, #28]
 8005cd0:	4a65      	ldr	r2, [pc, #404]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cd6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d008      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ce4:	4b60      	ldr	r3, [pc, #384]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce8:	f023 0203 	bic.w	r2, r3, #3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	495d      	ldr	r1, [pc, #372]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d008      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d02:	4b59      	ldr	r3, [pc, #356]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	4956      	ldr	r1, [pc, #344]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d008      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d20:	4b51      	ldr	r3, [pc, #324]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	494e      	ldr	r1, [pc, #312]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0320 	and.w	r3, r3, #32
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d008      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d3e:	4b4a      	ldr	r3, [pc, #296]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d42:	f023 0210 	bic.w	r2, r3, #16
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	4947      	ldr	r1, [pc, #284]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d008      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005d5c:	4b42      	ldr	r3, [pc, #264]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	493f      	ldr	r1, [pc, #252]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d008      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d7a:	4b3b      	ldr	r3, [pc, #236]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7e:	f023 0220 	bic.w	r2, r3, #32
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	4938      	ldr	r1, [pc, #224]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d008      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d98:	4b33      	ldr	r3, [pc, #204]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	4930      	ldr	r1, [pc, #192]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0310 	and.w	r3, r3, #16
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d008      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005db6:	4b2c      	ldr	r3, [pc, #176]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	4929      	ldr	r1, [pc, #164]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d008      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005dd4:	4b24      	ldr	r3, [pc, #144]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de0:	4921      	ldr	r1, [pc, #132]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d008      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005df2:	4b1d      	ldr	r3, [pc, #116]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	491a      	ldr	r1, [pc, #104]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d008      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005e10:	4b15      	ldr	r3, [pc, #84]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e14:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1c:	4912      	ldr	r1, [pc, #72]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d008      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005e2e:	4b0e      	ldr	r3, [pc, #56]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3a:	490b      	ldr	r1, [pc, #44]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d008      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005e4c:	4b06      	ldr	r3, [pc, #24]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e50:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e58:	4903      	ldr	r1, [pc, #12]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3748      	adds	r7, #72	; 0x48
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	40021000 	.word	0x40021000

08005e6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e09d      	b.n	8005fba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d108      	bne.n	8005e98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e8e:	d009      	beq.n	8005ea4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	61da      	str	r2, [r3, #28]
 8005e96:	e005      	b.n	8005ea4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d106      	bne.n	8005ec4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7fb fd12 	bl	80018e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ee4:	d902      	bls.n	8005eec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60fb      	str	r3, [r7, #12]
 8005eea:	e002      	b.n	8005ef2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ef0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005efa:	d007      	beq.n	8005f0c <HAL_SPI_Init+0xa0>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f04:	d002      	beq.n	8005f0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	f003 0302 	and.w	r3, r3, #2
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	695b      	ldr	r3, [r3, #20]
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	431a      	orrs	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	69db      	ldr	r3, [r3, #28]
 8005f40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f44:	431a      	orrs	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4e:	ea42 0103 	orr.w	r1, r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f56:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	0c1b      	lsrs	r3, r3, #16
 8005f68:	f003 0204 	and.w	r2, r3, #4
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f70:	f003 0310 	and.w	r3, r3, #16
 8005f74:	431a      	orrs	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005f88:	ea42 0103 	orr.w	r1, r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69da      	ldr	r2, [r3, #28]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fa8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
	...

08005fc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d001      	beq.n	8005fdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e04a      	b.n	8006072 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2202      	movs	r2, #2
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68da      	ldr	r2, [r3, #12]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f042 0201 	orr.w	r2, r2, #1
 8005ff2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a21      	ldr	r2, [pc, #132]	; (8006080 <HAL_TIM_Base_Start_IT+0xbc>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d018      	beq.n	8006030 <HAL_TIM_Base_Start_IT+0x6c>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006006:	d013      	beq.n	8006030 <HAL_TIM_Base_Start_IT+0x6c>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a1d      	ldr	r2, [pc, #116]	; (8006084 <HAL_TIM_Base_Start_IT+0xc0>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d00e      	beq.n	8006030 <HAL_TIM_Base_Start_IT+0x6c>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a1c      	ldr	r2, [pc, #112]	; (8006088 <HAL_TIM_Base_Start_IT+0xc4>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d009      	beq.n	8006030 <HAL_TIM_Base_Start_IT+0x6c>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a1a      	ldr	r2, [pc, #104]	; (800608c <HAL_TIM_Base_Start_IT+0xc8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d004      	beq.n	8006030 <HAL_TIM_Base_Start_IT+0x6c>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a19      	ldr	r2, [pc, #100]	; (8006090 <HAL_TIM_Base_Start_IT+0xcc>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d115      	bne.n	800605c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689a      	ldr	r2, [r3, #8]
 8006036:	4b17      	ldr	r3, [pc, #92]	; (8006094 <HAL_TIM_Base_Start_IT+0xd0>)
 8006038:	4013      	ands	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b06      	cmp	r3, #6
 8006040:	d015      	beq.n	800606e <HAL_TIM_Base_Start_IT+0xaa>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006048:	d011      	beq.n	800606e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f042 0201 	orr.w	r2, r2, #1
 8006058:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800605a:	e008      	b.n	800606e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0201 	orr.w	r2, r2, #1
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	e000      	b.n	8006070 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800606e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	40012c00 	.word	0x40012c00
 8006084:	40000400 	.word	0x40000400
 8006088:	40000800 	.word	0x40000800
 800608c:	40013400 	.word	0x40013400
 8006090:	40014000 	.word	0x40014000
 8006094:	00010007 	.word	0x00010007

08006098 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e049      	b.n	800613e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d106      	bne.n	80060c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7fb fc54 	bl	800196c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2202      	movs	r2, #2
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3304      	adds	r3, #4
 80060d4:	4619      	mov	r1, r3
 80060d6:	4610      	mov	r0, r2
 80060d8:	f000 fcc6 	bl	8006a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
	...

08006148 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d109      	bne.n	800616c <HAL_TIM_PWM_Start+0x24>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b01      	cmp	r3, #1
 8006162:	bf14      	ite	ne
 8006164:	2301      	movne	r3, #1
 8006166:	2300      	moveq	r3, #0
 8006168:	b2db      	uxtb	r3, r3
 800616a:	e03c      	b.n	80061e6 <HAL_TIM_PWM_Start+0x9e>
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2b04      	cmp	r3, #4
 8006170:	d109      	bne.n	8006186 <HAL_TIM_PWM_Start+0x3e>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b01      	cmp	r3, #1
 800617c:	bf14      	ite	ne
 800617e:	2301      	movne	r3, #1
 8006180:	2300      	moveq	r3, #0
 8006182:	b2db      	uxtb	r3, r3
 8006184:	e02f      	b.n	80061e6 <HAL_TIM_PWM_Start+0x9e>
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b08      	cmp	r3, #8
 800618a:	d109      	bne.n	80061a0 <HAL_TIM_PWM_Start+0x58>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b01      	cmp	r3, #1
 8006196:	bf14      	ite	ne
 8006198:	2301      	movne	r3, #1
 800619a:	2300      	moveq	r3, #0
 800619c:	b2db      	uxtb	r3, r3
 800619e:	e022      	b.n	80061e6 <HAL_TIM_PWM_Start+0x9e>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	2b0c      	cmp	r3, #12
 80061a4:	d109      	bne.n	80061ba <HAL_TIM_PWM_Start+0x72>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	bf14      	ite	ne
 80061b2:	2301      	movne	r3, #1
 80061b4:	2300      	moveq	r3, #0
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	e015      	b.n	80061e6 <HAL_TIM_PWM_Start+0x9e>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b10      	cmp	r3, #16
 80061be:	d109      	bne.n	80061d4 <HAL_TIM_PWM_Start+0x8c>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	bf14      	ite	ne
 80061cc:	2301      	movne	r3, #1
 80061ce:	2300      	moveq	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	e008      	b.n	80061e6 <HAL_TIM_PWM_Start+0x9e>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b01      	cmp	r3, #1
 80061de:	bf14      	ite	ne
 80061e0:	2301      	movne	r3, #1
 80061e2:	2300      	moveq	r3, #0
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e097      	b.n	800631e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d104      	bne.n	80061fe <HAL_TIM_PWM_Start+0xb6>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061fc:	e023      	b.n	8006246 <HAL_TIM_PWM_Start+0xfe>
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b04      	cmp	r3, #4
 8006202:	d104      	bne.n	800620e <HAL_TIM_PWM_Start+0xc6>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2202      	movs	r2, #2
 8006208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800620c:	e01b      	b.n	8006246 <HAL_TIM_PWM_Start+0xfe>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b08      	cmp	r3, #8
 8006212:	d104      	bne.n	800621e <HAL_TIM_PWM_Start+0xd6>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800621c:	e013      	b.n	8006246 <HAL_TIM_PWM_Start+0xfe>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b0c      	cmp	r3, #12
 8006222:	d104      	bne.n	800622e <HAL_TIM_PWM_Start+0xe6>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800622c:	e00b      	b.n	8006246 <HAL_TIM_PWM_Start+0xfe>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b10      	cmp	r3, #16
 8006232:	d104      	bne.n	800623e <HAL_TIM_PWM_Start+0xf6>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800623c:	e003      	b.n	8006246 <HAL_TIM_PWM_Start+0xfe>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2202      	movs	r2, #2
 8006242:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2201      	movs	r2, #1
 800624c:	6839      	ldr	r1, [r7, #0]
 800624e:	4618      	mov	r0, r3
 8006250:	f000 ff70 	bl	8007134 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a33      	ldr	r2, [pc, #204]	; (8006328 <HAL_TIM_PWM_Start+0x1e0>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d013      	beq.n	8006286 <HAL_TIM_PWM_Start+0x13e>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a32      	ldr	r2, [pc, #200]	; (800632c <HAL_TIM_PWM_Start+0x1e4>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d00e      	beq.n	8006286 <HAL_TIM_PWM_Start+0x13e>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a30      	ldr	r2, [pc, #192]	; (8006330 <HAL_TIM_PWM_Start+0x1e8>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d009      	beq.n	8006286 <HAL_TIM_PWM_Start+0x13e>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a2f      	ldr	r2, [pc, #188]	; (8006334 <HAL_TIM_PWM_Start+0x1ec>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d004      	beq.n	8006286 <HAL_TIM_PWM_Start+0x13e>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a2d      	ldr	r2, [pc, #180]	; (8006338 <HAL_TIM_PWM_Start+0x1f0>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d101      	bne.n	800628a <HAL_TIM_PWM_Start+0x142>
 8006286:	2301      	movs	r3, #1
 8006288:	e000      	b.n	800628c <HAL_TIM_PWM_Start+0x144>
 800628a:	2300      	movs	r3, #0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d007      	beq.n	80062a0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800629e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a20      	ldr	r2, [pc, #128]	; (8006328 <HAL_TIM_PWM_Start+0x1e0>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d018      	beq.n	80062dc <HAL_TIM_PWM_Start+0x194>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b2:	d013      	beq.n	80062dc <HAL_TIM_PWM_Start+0x194>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a20      	ldr	r2, [pc, #128]	; (800633c <HAL_TIM_PWM_Start+0x1f4>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d00e      	beq.n	80062dc <HAL_TIM_PWM_Start+0x194>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a1f      	ldr	r2, [pc, #124]	; (8006340 <HAL_TIM_PWM_Start+0x1f8>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d009      	beq.n	80062dc <HAL_TIM_PWM_Start+0x194>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a17      	ldr	r2, [pc, #92]	; (800632c <HAL_TIM_PWM_Start+0x1e4>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d004      	beq.n	80062dc <HAL_TIM_PWM_Start+0x194>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a16      	ldr	r2, [pc, #88]	; (8006330 <HAL_TIM_PWM_Start+0x1e8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d115      	bne.n	8006308 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689a      	ldr	r2, [r3, #8]
 80062e2:	4b18      	ldr	r3, [pc, #96]	; (8006344 <HAL_TIM_PWM_Start+0x1fc>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2b06      	cmp	r3, #6
 80062ec:	d015      	beq.n	800631a <HAL_TIM_PWM_Start+0x1d2>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062f4:	d011      	beq.n	800631a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f042 0201 	orr.w	r2, r2, #1
 8006304:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006306:	e008      	b.n	800631a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f042 0201 	orr.w	r2, r2, #1
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	e000      	b.n	800631c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800631a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	40012c00 	.word	0x40012c00
 800632c:	40013400 	.word	0x40013400
 8006330:	40014000 	.word	0x40014000
 8006334:	40014400 	.word	0x40014400
 8006338:	40014800 	.word	0x40014800
 800633c:	40000400 	.word	0x40000400
 8006340:	40000800 	.word	0x40000800
 8006344:	00010007 	.word	0x00010007

08006348 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e097      	b.n	800648c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b00      	cmp	r3, #0
 8006366:	d106      	bne.n	8006376 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f7fb fb1b 	bl	80019ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2202      	movs	r2, #2
 800637a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6812      	ldr	r2, [r2, #0]
 8006388:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800638c:	f023 0307 	bic.w	r3, r3, #7
 8006390:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	3304      	adds	r3, #4
 800639a:	4619      	mov	r1, r3
 800639c:	4610      	mov	r0, r2
 800639e:	f000 fb63 	bl	8006a68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ca:	f023 0303 	bic.w	r3, r3, #3
 80063ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	021b      	lsls	r3, r3, #8
 80063da:	4313      	orrs	r3, r2
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	4313      	orrs	r3, r2
 80063e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80063e8:	f023 030c 	bic.w	r3, r3, #12
 80063ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	68da      	ldr	r2, [r3, #12]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	021b      	lsls	r3, r3, #8
 8006404:	4313      	orrs	r3, r2
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	4313      	orrs	r3, r2
 800640a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	011a      	lsls	r2, r3, #4
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	031b      	lsls	r3, r3, #12
 8006418:	4313      	orrs	r3, r2
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	4313      	orrs	r3, r2
 800641e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006426:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800642e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	011b      	lsls	r3, r3, #4
 800643a:	4313      	orrs	r3, r2
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3718      	adds	r7, #24
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d110      	bne.n	80064e6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d102      	bne.n	80064d0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80064ca:	7b7b      	ldrb	r3, [r7, #13]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d001      	beq.n	80064d4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e069      	b.n	80065a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064e4:	e031      	b.n	800654a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b04      	cmp	r3, #4
 80064ea:	d110      	bne.n	800650e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80064ec:	7bbb      	ldrb	r3, [r7, #14]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d102      	bne.n	80064f8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80064f2:	7b3b      	ldrb	r3, [r7, #12]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d001      	beq.n	80064fc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e055      	b.n	80065a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2202      	movs	r2, #2
 8006508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800650c:	e01d      	b.n	800654a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800650e:	7bfb      	ldrb	r3, [r7, #15]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d108      	bne.n	8006526 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006514:	7bbb      	ldrb	r3, [r7, #14]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d105      	bne.n	8006526 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800651a:	7b7b      	ldrb	r3, [r7, #13]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d102      	bne.n	8006526 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006520:	7b3b      	ldrb	r3, [r7, #12]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d001      	beq.n	800652a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e03e      	b.n	80065a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2202      	movs	r2, #2
 800652e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2202      	movs	r2, #2
 8006536:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2202      	movs	r2, #2
 800653e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2202      	movs	r2, #2
 8006546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d003      	beq.n	8006558 <HAL_TIM_Encoder_Start+0xc4>
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	2b04      	cmp	r3, #4
 8006554:	d008      	beq.n	8006568 <HAL_TIM_Encoder_Start+0xd4>
 8006556:	e00f      	b.n	8006578 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2201      	movs	r2, #1
 800655e:	2100      	movs	r1, #0
 8006560:	4618      	mov	r0, r3
 8006562:	f000 fde7 	bl	8007134 <TIM_CCxChannelCmd>
      break;
 8006566:	e016      	b.n	8006596 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2201      	movs	r2, #1
 800656e:	2104      	movs	r1, #4
 8006570:	4618      	mov	r0, r3
 8006572:	f000 fddf 	bl	8007134 <TIM_CCxChannelCmd>
      break;
 8006576:	e00e      	b.n	8006596 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2201      	movs	r2, #1
 800657e:	2100      	movs	r1, #0
 8006580:	4618      	mov	r0, r3
 8006582:	f000 fdd7 	bl	8007134 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2201      	movs	r2, #1
 800658c:	2104      	movs	r1, #4
 800658e:	4618      	mov	r0, r3
 8006590:	f000 fdd0 	bl	8007134 <TIM_CCxChannelCmd>
      break;
 8006594:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f042 0201 	orr.w	r2, r2, #1
 80065a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d122      	bne.n	800660c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d11b      	bne.n	800660c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f06f 0202 	mvn.w	r2, #2
 80065dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	f003 0303 	and.w	r3, r3, #3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 fa1a 	bl	8006a2c <HAL_TIM_IC_CaptureCallback>
 80065f8:	e005      	b.n	8006606 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fa0c 	bl	8006a18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 fa1d 	bl	8006a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	f003 0304 	and.w	r3, r3, #4
 8006616:	2b04      	cmp	r3, #4
 8006618:	d122      	bne.n	8006660 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f003 0304 	and.w	r3, r3, #4
 8006624:	2b04      	cmp	r3, #4
 8006626:	d11b      	bne.n	8006660 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f06f 0204 	mvn.w	r2, #4
 8006630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2202      	movs	r2, #2
 8006636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f9f0 	bl	8006a2c <HAL_TIM_IC_CaptureCallback>
 800664c:	e005      	b.n	800665a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f9e2 	bl	8006a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f9f3 	bl	8006a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	f003 0308 	and.w	r3, r3, #8
 800666a:	2b08      	cmp	r3, #8
 800666c:	d122      	bne.n	80066b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	f003 0308 	and.w	r3, r3, #8
 8006678:	2b08      	cmp	r3, #8
 800667a:	d11b      	bne.n	80066b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f06f 0208 	mvn.w	r2, #8
 8006684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2204      	movs	r2, #4
 800668a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	f003 0303 	and.w	r3, r3, #3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f9c6 	bl	8006a2c <HAL_TIM_IC_CaptureCallback>
 80066a0:	e005      	b.n	80066ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f9b8 	bl	8006a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f9c9 	bl	8006a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	f003 0310 	and.w	r3, r3, #16
 80066be:	2b10      	cmp	r3, #16
 80066c0:	d122      	bne.n	8006708 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	f003 0310 	and.w	r3, r3, #16
 80066cc:	2b10      	cmp	r3, #16
 80066ce:	d11b      	bne.n	8006708 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f06f 0210 	mvn.w	r2, #16
 80066d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2208      	movs	r2, #8
 80066de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f99c 	bl	8006a2c <HAL_TIM_IC_CaptureCallback>
 80066f4:	e005      	b.n	8006702 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f98e 	bl	8006a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 f99f 	bl	8006a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	2b01      	cmp	r3, #1
 8006714:	d10e      	bne.n	8006734 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b01      	cmp	r3, #1
 8006722:	d107      	bne.n	8006734 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f06f 0201 	mvn.w	r2, #1
 800672c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7fa fd1a 	bl	8001168 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800673e:	2b80      	cmp	r3, #128	; 0x80
 8006740:	d10e      	bne.n	8006760 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800674c:	2b80      	cmp	r3, #128	; 0x80
 800674e:	d107      	bne.n	8006760 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fe18 	bl	8007390 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800676a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800676e:	d10e      	bne.n	800678e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800677a:	2b80      	cmp	r3, #128	; 0x80
 800677c:	d107      	bne.n	800678e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fe0b 	bl	80073a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006798:	2b40      	cmp	r3, #64	; 0x40
 800679a:	d10e      	bne.n	80067ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a6:	2b40      	cmp	r3, #64	; 0x40
 80067a8:	d107      	bne.n	80067ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f94d 	bl	8006a54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	f003 0320 	and.w	r3, r3, #32
 80067c4:	2b20      	cmp	r3, #32
 80067c6:	d10e      	bne.n	80067e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f003 0320 	and.w	r3, r3, #32
 80067d2:	2b20      	cmp	r3, #32
 80067d4:	d107      	bne.n	80067e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f06f 0220 	mvn.w	r2, #32
 80067de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fdcb 	bl	800737c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067e6:	bf00      	nop
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
	...

080067f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067fc:	2300      	movs	r3, #0
 80067fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006806:	2b01      	cmp	r3, #1
 8006808:	d101      	bne.n	800680e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800680a:	2302      	movs	r3, #2
 800680c:	e0ff      	b.n	8006a0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b14      	cmp	r3, #20
 800681a:	f200 80f0 	bhi.w	80069fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800681e:	a201      	add	r2, pc, #4	; (adr r2, 8006824 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006824:	08006879 	.word	0x08006879
 8006828:	080069ff 	.word	0x080069ff
 800682c:	080069ff 	.word	0x080069ff
 8006830:	080069ff 	.word	0x080069ff
 8006834:	080068b9 	.word	0x080068b9
 8006838:	080069ff 	.word	0x080069ff
 800683c:	080069ff 	.word	0x080069ff
 8006840:	080069ff 	.word	0x080069ff
 8006844:	080068fb 	.word	0x080068fb
 8006848:	080069ff 	.word	0x080069ff
 800684c:	080069ff 	.word	0x080069ff
 8006850:	080069ff 	.word	0x080069ff
 8006854:	0800693b 	.word	0x0800693b
 8006858:	080069ff 	.word	0x080069ff
 800685c:	080069ff 	.word	0x080069ff
 8006860:	080069ff 	.word	0x080069ff
 8006864:	0800697d 	.word	0x0800697d
 8006868:	080069ff 	.word	0x080069ff
 800686c:	080069ff 	.word	0x080069ff
 8006870:	080069ff 	.word	0x080069ff
 8006874:	080069bd 	.word	0x080069bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68b9      	ldr	r1, [r7, #8]
 800687e:	4618      	mov	r0, r3
 8006880:	f000 f982 	bl	8006b88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	699a      	ldr	r2, [r3, #24]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f042 0208 	orr.w	r2, r2, #8
 8006892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	699a      	ldr	r2, [r3, #24]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 0204 	bic.w	r2, r2, #4
 80068a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6999      	ldr	r1, [r3, #24]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	691a      	ldr	r2, [r3, #16]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	619a      	str	r2, [r3, #24]
      break;
 80068b6:	e0a5      	b.n	8006a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68b9      	ldr	r1, [r7, #8]
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 f9f2 	bl	8006ca8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	699a      	ldr	r2, [r3, #24]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	699a      	ldr	r2, [r3, #24]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6999      	ldr	r1, [r3, #24]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	021a      	lsls	r2, r3, #8
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	430a      	orrs	r2, r1
 80068f6:	619a      	str	r2, [r3, #24]
      break;
 80068f8:	e084      	b.n	8006a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68b9      	ldr	r1, [r7, #8]
 8006900:	4618      	mov	r0, r3
 8006902:	f000 fa5b 	bl	8006dbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	69da      	ldr	r2, [r3, #28]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f042 0208 	orr.w	r2, r2, #8
 8006914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	69da      	ldr	r2, [r3, #28]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f022 0204 	bic.w	r2, r2, #4
 8006924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	69d9      	ldr	r1, [r3, #28]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	691a      	ldr	r2, [r3, #16]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	61da      	str	r2, [r3, #28]
      break;
 8006938:	e064      	b.n	8006a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68b9      	ldr	r1, [r7, #8]
 8006940:	4618      	mov	r0, r3
 8006942:	f000 fac3 	bl	8006ecc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	69da      	ldr	r2, [r3, #28]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006954:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	69da      	ldr	r2, [r3, #28]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006964:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	69d9      	ldr	r1, [r3, #28]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	021a      	lsls	r2, r3, #8
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	61da      	str	r2, [r3, #28]
      break;
 800697a:	e043      	b.n	8006a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68b9      	ldr	r1, [r7, #8]
 8006982:	4618      	mov	r0, r3
 8006984:	f000 fb0c 	bl	8006fa0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0208 	orr.w	r2, r2, #8
 8006996:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f022 0204 	bic.w	r2, r2, #4
 80069a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	691a      	ldr	r2, [r3, #16]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069ba:	e023      	b.n	8006a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68b9      	ldr	r1, [r7, #8]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 fb50 	bl	8007068 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	021a      	lsls	r2, r3, #8
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	430a      	orrs	r2, r1
 80069fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069fc:	e002      	b.n	8006a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	75fb      	strb	r3, [r7, #23]
      break;
 8006a02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop

08006a18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a3c      	ldr	r2, [pc, #240]	; (8006b6c <TIM_Base_SetConfig+0x104>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d00f      	beq.n	8006aa0 <TIM_Base_SetConfig+0x38>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a86:	d00b      	beq.n	8006aa0 <TIM_Base_SetConfig+0x38>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a39      	ldr	r2, [pc, #228]	; (8006b70 <TIM_Base_SetConfig+0x108>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d007      	beq.n	8006aa0 <TIM_Base_SetConfig+0x38>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a38      	ldr	r2, [pc, #224]	; (8006b74 <TIM_Base_SetConfig+0x10c>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d003      	beq.n	8006aa0 <TIM_Base_SetConfig+0x38>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a37      	ldr	r2, [pc, #220]	; (8006b78 <TIM_Base_SetConfig+0x110>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d108      	bne.n	8006ab2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a2d      	ldr	r2, [pc, #180]	; (8006b6c <TIM_Base_SetConfig+0x104>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d01b      	beq.n	8006af2 <TIM_Base_SetConfig+0x8a>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac0:	d017      	beq.n	8006af2 <TIM_Base_SetConfig+0x8a>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a2a      	ldr	r2, [pc, #168]	; (8006b70 <TIM_Base_SetConfig+0x108>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d013      	beq.n	8006af2 <TIM_Base_SetConfig+0x8a>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a29      	ldr	r2, [pc, #164]	; (8006b74 <TIM_Base_SetConfig+0x10c>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d00f      	beq.n	8006af2 <TIM_Base_SetConfig+0x8a>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a28      	ldr	r2, [pc, #160]	; (8006b78 <TIM_Base_SetConfig+0x110>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d00b      	beq.n	8006af2 <TIM_Base_SetConfig+0x8a>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a27      	ldr	r2, [pc, #156]	; (8006b7c <TIM_Base_SetConfig+0x114>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d007      	beq.n	8006af2 <TIM_Base_SetConfig+0x8a>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a26      	ldr	r2, [pc, #152]	; (8006b80 <TIM_Base_SetConfig+0x118>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d003      	beq.n	8006af2 <TIM_Base_SetConfig+0x8a>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a25      	ldr	r2, [pc, #148]	; (8006b84 <TIM_Base_SetConfig+0x11c>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d108      	bne.n	8006b04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a10      	ldr	r2, [pc, #64]	; (8006b6c <TIM_Base_SetConfig+0x104>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d00f      	beq.n	8006b50 <TIM_Base_SetConfig+0xe8>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a11      	ldr	r2, [pc, #68]	; (8006b78 <TIM_Base_SetConfig+0x110>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d00b      	beq.n	8006b50 <TIM_Base_SetConfig+0xe8>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a10      	ldr	r2, [pc, #64]	; (8006b7c <TIM_Base_SetConfig+0x114>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d007      	beq.n	8006b50 <TIM_Base_SetConfig+0xe8>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a0f      	ldr	r2, [pc, #60]	; (8006b80 <TIM_Base_SetConfig+0x118>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d003      	beq.n	8006b50 <TIM_Base_SetConfig+0xe8>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a0e      	ldr	r2, [pc, #56]	; (8006b84 <TIM_Base_SetConfig+0x11c>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d103      	bne.n	8006b58 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	691a      	ldr	r2, [r3, #16]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	615a      	str	r2, [r3, #20]
}
 8006b5e:	bf00      	nop
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	40012c00 	.word	0x40012c00
 8006b70:	40000400 	.word	0x40000400
 8006b74:	40000800 	.word	0x40000800
 8006b78:	40013400 	.word	0x40013400
 8006b7c:	40014000 	.word	0x40014000
 8006b80:	40014400 	.word	0x40014400
 8006b84:	40014800 	.word	0x40014800

08006b88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b087      	sub	sp, #28
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	f023 0201 	bic.w	r2, r3, #1
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f023 0303 	bic.w	r3, r3, #3
 8006bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f023 0302 	bic.w	r3, r3, #2
 8006bd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a2c      	ldr	r2, [pc, #176]	; (8006c94 <TIM_OC1_SetConfig+0x10c>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d00f      	beq.n	8006c08 <TIM_OC1_SetConfig+0x80>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a2b      	ldr	r2, [pc, #172]	; (8006c98 <TIM_OC1_SetConfig+0x110>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d00b      	beq.n	8006c08 <TIM_OC1_SetConfig+0x80>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a2a      	ldr	r2, [pc, #168]	; (8006c9c <TIM_OC1_SetConfig+0x114>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d007      	beq.n	8006c08 <TIM_OC1_SetConfig+0x80>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a29      	ldr	r2, [pc, #164]	; (8006ca0 <TIM_OC1_SetConfig+0x118>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d003      	beq.n	8006c08 <TIM_OC1_SetConfig+0x80>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a28      	ldr	r2, [pc, #160]	; (8006ca4 <TIM_OC1_SetConfig+0x11c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d10c      	bne.n	8006c22 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	f023 0308 	bic.w	r3, r3, #8
 8006c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f023 0304 	bic.w	r3, r3, #4
 8006c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a1b      	ldr	r2, [pc, #108]	; (8006c94 <TIM_OC1_SetConfig+0x10c>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d00f      	beq.n	8006c4a <TIM_OC1_SetConfig+0xc2>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a1a      	ldr	r2, [pc, #104]	; (8006c98 <TIM_OC1_SetConfig+0x110>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d00b      	beq.n	8006c4a <TIM_OC1_SetConfig+0xc2>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a19      	ldr	r2, [pc, #100]	; (8006c9c <TIM_OC1_SetConfig+0x114>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d007      	beq.n	8006c4a <TIM_OC1_SetConfig+0xc2>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a18      	ldr	r2, [pc, #96]	; (8006ca0 <TIM_OC1_SetConfig+0x118>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d003      	beq.n	8006c4a <TIM_OC1_SetConfig+0xc2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a17      	ldr	r2, [pc, #92]	; (8006ca4 <TIM_OC1_SetConfig+0x11c>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d111      	bne.n	8006c6e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	621a      	str	r2, [r3, #32]
}
 8006c88:	bf00      	nop
 8006c8a:	371c      	adds	r7, #28
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	40012c00 	.word	0x40012c00
 8006c98:	40013400 	.word	0x40013400
 8006c9c:	40014000 	.word	0x40014000
 8006ca0:	40014400 	.word	0x40014400
 8006ca4:	40014800 	.word	0x40014800

08006ca8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b087      	sub	sp, #28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	f023 0210 	bic.w	r2, r3, #16
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	021b      	lsls	r3, r3, #8
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f023 0320 	bic.w	r3, r3, #32
 8006cf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	011b      	lsls	r3, r3, #4
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a28      	ldr	r2, [pc, #160]	; (8006da8 <TIM_OC2_SetConfig+0x100>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d003      	beq.n	8006d14 <TIM_OC2_SetConfig+0x6c>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a27      	ldr	r2, [pc, #156]	; (8006dac <TIM_OC2_SetConfig+0x104>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d10d      	bne.n	8006d30 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	011b      	lsls	r3, r3, #4
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a1d      	ldr	r2, [pc, #116]	; (8006da8 <TIM_OC2_SetConfig+0x100>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d00f      	beq.n	8006d58 <TIM_OC2_SetConfig+0xb0>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a1c      	ldr	r2, [pc, #112]	; (8006dac <TIM_OC2_SetConfig+0x104>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d00b      	beq.n	8006d58 <TIM_OC2_SetConfig+0xb0>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a1b      	ldr	r2, [pc, #108]	; (8006db0 <TIM_OC2_SetConfig+0x108>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d007      	beq.n	8006d58 <TIM_OC2_SetConfig+0xb0>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a1a      	ldr	r2, [pc, #104]	; (8006db4 <TIM_OC2_SetConfig+0x10c>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d003      	beq.n	8006d58 <TIM_OC2_SetConfig+0xb0>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a19      	ldr	r2, [pc, #100]	; (8006db8 <TIM_OC2_SetConfig+0x110>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d113      	bne.n	8006d80 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d5e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d66:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	621a      	str	r2, [r3, #32]
}
 8006d9a:	bf00      	nop
 8006d9c:	371c      	adds	r7, #28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	40012c00 	.word	0x40012c00
 8006dac:	40013400 	.word	0x40013400
 8006db0:	40014000 	.word	0x40014000
 8006db4:	40014400 	.word	0x40014400
 8006db8:	40014800 	.word	0x40014800

08006dbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b087      	sub	sp, #28
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f023 0303 	bic.w	r3, r3, #3
 8006df6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	021b      	lsls	r3, r3, #8
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a27      	ldr	r2, [pc, #156]	; (8006eb8 <TIM_OC3_SetConfig+0xfc>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d003      	beq.n	8006e26 <TIM_OC3_SetConfig+0x6a>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a26      	ldr	r2, [pc, #152]	; (8006ebc <TIM_OC3_SetConfig+0x100>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d10d      	bne.n	8006e42 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	021b      	lsls	r3, r3, #8
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e40:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a1c      	ldr	r2, [pc, #112]	; (8006eb8 <TIM_OC3_SetConfig+0xfc>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d00f      	beq.n	8006e6a <TIM_OC3_SetConfig+0xae>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a1b      	ldr	r2, [pc, #108]	; (8006ebc <TIM_OC3_SetConfig+0x100>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d00b      	beq.n	8006e6a <TIM_OC3_SetConfig+0xae>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a1a      	ldr	r2, [pc, #104]	; (8006ec0 <TIM_OC3_SetConfig+0x104>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d007      	beq.n	8006e6a <TIM_OC3_SetConfig+0xae>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a19      	ldr	r2, [pc, #100]	; (8006ec4 <TIM_OC3_SetConfig+0x108>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d003      	beq.n	8006e6a <TIM_OC3_SetConfig+0xae>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a18      	ldr	r2, [pc, #96]	; (8006ec8 <TIM_OC3_SetConfig+0x10c>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d113      	bne.n	8006e92 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	011b      	lsls	r3, r3, #4
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	011b      	lsls	r3, r3, #4
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	693a      	ldr	r2, [r7, #16]
 8006e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	685a      	ldr	r2, [r3, #4]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	621a      	str	r2, [r3, #32]
}
 8006eac:	bf00      	nop
 8006eae:	371c      	adds	r7, #28
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr
 8006eb8:	40012c00 	.word	0x40012c00
 8006ebc:	40013400 	.word	0x40013400
 8006ec0:	40014000 	.word	0x40014000
 8006ec4:	40014400 	.word	0x40014400
 8006ec8:	40014800 	.word	0x40014800

08006ecc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b087      	sub	sp, #28
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	021b      	lsls	r3, r3, #8
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	031b      	lsls	r3, r3, #12
 8006f22:	693a      	ldr	r2, [r7, #16]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a18      	ldr	r2, [pc, #96]	; (8006f8c <TIM_OC4_SetConfig+0xc0>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d00f      	beq.n	8006f50 <TIM_OC4_SetConfig+0x84>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a17      	ldr	r2, [pc, #92]	; (8006f90 <TIM_OC4_SetConfig+0xc4>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d00b      	beq.n	8006f50 <TIM_OC4_SetConfig+0x84>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a16      	ldr	r2, [pc, #88]	; (8006f94 <TIM_OC4_SetConfig+0xc8>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d007      	beq.n	8006f50 <TIM_OC4_SetConfig+0x84>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a15      	ldr	r2, [pc, #84]	; (8006f98 <TIM_OC4_SetConfig+0xcc>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d003      	beq.n	8006f50 <TIM_OC4_SetConfig+0x84>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a14      	ldr	r2, [pc, #80]	; (8006f9c <TIM_OC4_SetConfig+0xd0>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d109      	bne.n	8006f64 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	695b      	ldr	r3, [r3, #20]
 8006f5c:	019b      	lsls	r3, r3, #6
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	621a      	str	r2, [r3, #32]
}
 8006f7e:	bf00      	nop
 8006f80:	371c      	adds	r7, #28
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	40012c00 	.word	0x40012c00
 8006f90:	40013400 	.word	0x40013400
 8006f94:	40014000 	.word	0x40014000
 8006f98:	40014400 	.word	0x40014400
 8006f9c:	40014800 	.word	0x40014800

08006fa0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b087      	sub	sp, #28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006fe4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	041b      	lsls	r3, r3, #16
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a17      	ldr	r2, [pc, #92]	; (8007054 <TIM_OC5_SetConfig+0xb4>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d00f      	beq.n	800701a <TIM_OC5_SetConfig+0x7a>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a16      	ldr	r2, [pc, #88]	; (8007058 <TIM_OC5_SetConfig+0xb8>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d00b      	beq.n	800701a <TIM_OC5_SetConfig+0x7a>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a15      	ldr	r2, [pc, #84]	; (800705c <TIM_OC5_SetConfig+0xbc>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d007      	beq.n	800701a <TIM_OC5_SetConfig+0x7a>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a14      	ldr	r2, [pc, #80]	; (8007060 <TIM_OC5_SetConfig+0xc0>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d003      	beq.n	800701a <TIM_OC5_SetConfig+0x7a>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a13      	ldr	r2, [pc, #76]	; (8007064 <TIM_OC5_SetConfig+0xc4>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d109      	bne.n	800702e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007020:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	021b      	lsls	r3, r3, #8
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	4313      	orrs	r3, r2
 800702c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	685a      	ldr	r2, [r3, #4]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	621a      	str	r2, [r3, #32]
}
 8007048:	bf00      	nop
 800704a:	371c      	adds	r7, #28
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	40012c00 	.word	0x40012c00
 8007058:	40013400 	.word	0x40013400
 800705c:	40014000 	.word	0x40014000
 8007060:	40014400 	.word	0x40014400
 8007064:	40014800 	.word	0x40014800

08007068 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007068:	b480      	push	{r7}
 800706a:	b087      	sub	sp, #28
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800709a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	021b      	lsls	r3, r3, #8
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	051b      	lsls	r3, r3, #20
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a18      	ldr	r2, [pc, #96]	; (8007120 <TIM_OC6_SetConfig+0xb8>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d00f      	beq.n	80070e4 <TIM_OC6_SetConfig+0x7c>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a17      	ldr	r2, [pc, #92]	; (8007124 <TIM_OC6_SetConfig+0xbc>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d00b      	beq.n	80070e4 <TIM_OC6_SetConfig+0x7c>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a16      	ldr	r2, [pc, #88]	; (8007128 <TIM_OC6_SetConfig+0xc0>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d007      	beq.n	80070e4 <TIM_OC6_SetConfig+0x7c>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a15      	ldr	r2, [pc, #84]	; (800712c <TIM_OC6_SetConfig+0xc4>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d003      	beq.n	80070e4 <TIM_OC6_SetConfig+0x7c>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a14      	ldr	r2, [pc, #80]	; (8007130 <TIM_OC6_SetConfig+0xc8>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d109      	bne.n	80070f8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	695b      	ldr	r3, [r3, #20]
 80070f0:	029b      	lsls	r3, r3, #10
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	621a      	str	r2, [r3, #32]
}
 8007112:	bf00      	nop
 8007114:	371c      	adds	r7, #28
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	40012c00 	.word	0x40012c00
 8007124:	40013400 	.word	0x40013400
 8007128:	40014000 	.word	0x40014000
 800712c:	40014400 	.word	0x40014400
 8007130:	40014800 	.word	0x40014800

08007134 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007134:	b480      	push	{r7}
 8007136:	b087      	sub	sp, #28
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f003 031f 	and.w	r3, r3, #31
 8007146:	2201      	movs	r2, #1
 8007148:	fa02 f303 	lsl.w	r3, r2, r3
 800714c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6a1a      	ldr	r2, [r3, #32]
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	43db      	mvns	r3, r3
 8007156:	401a      	ands	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6a1a      	ldr	r2, [r3, #32]
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	f003 031f 	and.w	r3, r3, #31
 8007166:	6879      	ldr	r1, [r7, #4]
 8007168:	fa01 f303 	lsl.w	r3, r1, r3
 800716c:	431a      	orrs	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	621a      	str	r2, [r3, #32]
}
 8007172:	bf00      	nop
 8007174:	371c      	adds	r7, #28
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
	...

08007180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007190:	2b01      	cmp	r3, #1
 8007192:	d101      	bne.n	8007198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007194:	2302      	movs	r3, #2
 8007196:	e063      	b.n	8007260 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2202      	movs	r2, #2
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a2b      	ldr	r2, [pc, #172]	; (800726c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d004      	beq.n	80071cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a2a      	ldr	r2, [pc, #168]	; (8007270 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d108      	bne.n	80071de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80071d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	4313      	orrs	r3, r2
 80071dc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a1b      	ldr	r2, [pc, #108]	; (800726c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d018      	beq.n	8007234 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800720a:	d013      	beq.n	8007234 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a18      	ldr	r2, [pc, #96]	; (8007274 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d00e      	beq.n	8007234 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a17      	ldr	r2, [pc, #92]	; (8007278 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d009      	beq.n	8007234 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a12      	ldr	r2, [pc, #72]	; (8007270 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d004      	beq.n	8007234 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a13      	ldr	r2, [pc, #76]	; (800727c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d10c      	bne.n	800724e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800723a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	4313      	orrs	r3, r2
 8007244:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3714      	adds	r7, #20
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	40012c00 	.word	0x40012c00
 8007270:	40013400 	.word	0x40013400
 8007274:	40000400 	.word	0x40000400
 8007278:	40000800 	.word	0x40000800
 800727c:	40014000 	.word	0x40014000

08007280 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800728a:	2300      	movs	r3, #0
 800728c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007294:	2b01      	cmp	r3, #1
 8007296:	d101      	bne.n	800729c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007298:	2302      	movs	r3, #2
 800729a:	e065      	b.n	8007368 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	4313      	orrs	r3, r2
 80072be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4313      	orrs	r3, r2
 80072da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007302:	4313      	orrs	r3, r2
 8007304:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	041b      	lsls	r3, r3, #16
 8007312:	4313      	orrs	r3, r2
 8007314:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a16      	ldr	r2, [pc, #88]	; (8007374 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d004      	beq.n	800732a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a14      	ldr	r2, [pc, #80]	; (8007378 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d115      	bne.n	8007356 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007334:	051b      	lsls	r3, r3, #20
 8007336:	4313      	orrs	r3, r2
 8007338:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	69db      	ldr	r3, [r3, #28]
 8007344:	4313      	orrs	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	4313      	orrs	r3, r2
 8007354:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3714      	adds	r7, #20
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	40012c00 	.word	0x40012c00
 8007378:	40013400 	.word	0x40013400

0800737c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e040      	b.n	800744c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d106      	bne.n	80073e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7fa fb6a 	bl	8001ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2224      	movs	r2, #36	; 0x24
 80073e4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f022 0201 	bic.w	r2, r2, #1
 80073f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f8b6 	bl	8007568 <UART_SetConfig>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d101      	bne.n	8007406 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e022      	b.n	800744c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740a:	2b00      	cmp	r3, #0
 800740c:	d002      	beq.n	8007414 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fa7e 	bl	8007910 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007422:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	689a      	ldr	r2, [r3, #8]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007432:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0201 	orr.w	r2, r2, #1
 8007442:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fb05 	bl	8007a54 <UART_CheckIdleState>
 800744a:	4603      	mov	r3, r0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b08a      	sub	sp, #40	; 0x28
 8007458:	af02      	add	r7, sp, #8
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	603b      	str	r3, [r7, #0]
 8007460:	4613      	mov	r3, r2
 8007462:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007468:	2b20      	cmp	r3, #32
 800746a:	d178      	bne.n	800755e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d002      	beq.n	8007478 <HAL_UART_Transmit+0x24>
 8007472:	88fb      	ldrh	r3, [r7, #6]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d101      	bne.n	800747c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e071      	b.n	8007560 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2221      	movs	r2, #33	; 0x21
 8007488:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800748a:	f7fa fcf1 	bl	8001e70 <HAL_GetTick>
 800748e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	88fa      	ldrh	r2, [r7, #6]
 8007494:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	88fa      	ldrh	r2, [r7, #6]
 800749c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074a8:	d108      	bne.n	80074bc <HAL_UART_Transmit+0x68>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d104      	bne.n	80074bc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80074b2:	2300      	movs	r3, #0
 80074b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	61bb      	str	r3, [r7, #24]
 80074ba:	e003      	b.n	80074c4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074c0:	2300      	movs	r3, #0
 80074c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80074c4:	e030      	b.n	8007528 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	2200      	movs	r2, #0
 80074ce:	2180      	movs	r1, #128	; 0x80
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f000 fb67 	bl	8007ba4 <UART_WaitOnFlagUntilTimeout>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d004      	beq.n	80074e6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2220      	movs	r2, #32
 80074e0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e03c      	b.n	8007560 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10b      	bne.n	8007504 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	881a      	ldrh	r2, [r3, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074f8:	b292      	uxth	r2, r2
 80074fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	3302      	adds	r3, #2
 8007500:	61bb      	str	r3, [r7, #24]
 8007502:	e008      	b.n	8007516 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	781a      	ldrb	r2, [r3, #0]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	b292      	uxth	r2, r2
 800750e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	3301      	adds	r3, #1
 8007514:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800751c:	b29b      	uxth	r3, r3
 800751e:	3b01      	subs	r3, #1
 8007520:	b29a      	uxth	r2, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800752e:	b29b      	uxth	r3, r3
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1c8      	bne.n	80074c6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	2200      	movs	r2, #0
 800753c:	2140      	movs	r1, #64	; 0x40
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 fb30 	bl	8007ba4 <UART_WaitOnFlagUntilTimeout>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d004      	beq.n	8007554 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2220      	movs	r2, #32
 800754e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	e005      	b.n	8007560 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2220      	movs	r2, #32
 8007558:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800755a:	2300      	movs	r3, #0
 800755c:	e000      	b.n	8007560 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800755e:	2302      	movs	r3, #2
  }
}
 8007560:	4618      	mov	r0, r3
 8007562:	3720      	adds	r7, #32
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b088      	sub	sp, #32
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007570:	2300      	movs	r3, #0
 8007572:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	689a      	ldr	r2, [r3, #8]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	431a      	orrs	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	695b      	ldr	r3, [r3, #20]
 8007582:	431a      	orrs	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	69db      	ldr	r3, [r3, #28]
 8007588:	4313      	orrs	r3, r2
 800758a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007596:	f023 030c 	bic.w	r3, r3, #12
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	6812      	ldr	r2, [r2, #0]
 800759e:	6979      	ldr	r1, [r7, #20]
 80075a0:	430b      	orrs	r3, r1
 80075a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68da      	ldr	r2, [r3, #12]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	430a      	orrs	r2, r1
 80075b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a1b      	ldr	r3, [r3, #32]
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	430a      	orrs	r2, r1
 80075dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4aa7      	ldr	r2, [pc, #668]	; (8007880 <UART_SetConfig+0x318>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d120      	bne.n	800762a <UART_SetConfig+0xc2>
 80075e8:	4ba6      	ldr	r3, [pc, #664]	; (8007884 <UART_SetConfig+0x31c>)
 80075ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ec:	f003 0303 	and.w	r3, r3, #3
 80075f0:	2b03      	cmp	r3, #3
 80075f2:	d817      	bhi.n	8007624 <UART_SetConfig+0xbc>
 80075f4:	a201      	add	r2, pc, #4	; (adr r2, 80075fc <UART_SetConfig+0x94>)
 80075f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fa:	bf00      	nop
 80075fc:	0800760d 	.word	0x0800760d
 8007600:	08007619 	.word	0x08007619
 8007604:	0800761f 	.word	0x0800761f
 8007608:	08007613 	.word	0x08007613
 800760c:	2301      	movs	r3, #1
 800760e:	77fb      	strb	r3, [r7, #31]
 8007610:	e0b5      	b.n	800777e <UART_SetConfig+0x216>
 8007612:	2302      	movs	r3, #2
 8007614:	77fb      	strb	r3, [r7, #31]
 8007616:	e0b2      	b.n	800777e <UART_SetConfig+0x216>
 8007618:	2304      	movs	r3, #4
 800761a:	77fb      	strb	r3, [r7, #31]
 800761c:	e0af      	b.n	800777e <UART_SetConfig+0x216>
 800761e:	2308      	movs	r3, #8
 8007620:	77fb      	strb	r3, [r7, #31]
 8007622:	e0ac      	b.n	800777e <UART_SetConfig+0x216>
 8007624:	2310      	movs	r3, #16
 8007626:	77fb      	strb	r3, [r7, #31]
 8007628:	e0a9      	b.n	800777e <UART_SetConfig+0x216>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a96      	ldr	r2, [pc, #600]	; (8007888 <UART_SetConfig+0x320>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d124      	bne.n	800767e <UART_SetConfig+0x116>
 8007634:	4b93      	ldr	r3, [pc, #588]	; (8007884 <UART_SetConfig+0x31c>)
 8007636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007638:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800763c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007640:	d011      	beq.n	8007666 <UART_SetConfig+0xfe>
 8007642:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007646:	d817      	bhi.n	8007678 <UART_SetConfig+0x110>
 8007648:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800764c:	d011      	beq.n	8007672 <UART_SetConfig+0x10a>
 800764e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007652:	d811      	bhi.n	8007678 <UART_SetConfig+0x110>
 8007654:	2b00      	cmp	r3, #0
 8007656:	d003      	beq.n	8007660 <UART_SetConfig+0xf8>
 8007658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800765c:	d006      	beq.n	800766c <UART_SetConfig+0x104>
 800765e:	e00b      	b.n	8007678 <UART_SetConfig+0x110>
 8007660:	2300      	movs	r3, #0
 8007662:	77fb      	strb	r3, [r7, #31]
 8007664:	e08b      	b.n	800777e <UART_SetConfig+0x216>
 8007666:	2302      	movs	r3, #2
 8007668:	77fb      	strb	r3, [r7, #31]
 800766a:	e088      	b.n	800777e <UART_SetConfig+0x216>
 800766c:	2304      	movs	r3, #4
 800766e:	77fb      	strb	r3, [r7, #31]
 8007670:	e085      	b.n	800777e <UART_SetConfig+0x216>
 8007672:	2308      	movs	r3, #8
 8007674:	77fb      	strb	r3, [r7, #31]
 8007676:	e082      	b.n	800777e <UART_SetConfig+0x216>
 8007678:	2310      	movs	r3, #16
 800767a:	77fb      	strb	r3, [r7, #31]
 800767c:	e07f      	b.n	800777e <UART_SetConfig+0x216>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a82      	ldr	r2, [pc, #520]	; (800788c <UART_SetConfig+0x324>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d124      	bne.n	80076d2 <UART_SetConfig+0x16a>
 8007688:	4b7e      	ldr	r3, [pc, #504]	; (8007884 <UART_SetConfig+0x31c>)
 800768a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007690:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007694:	d011      	beq.n	80076ba <UART_SetConfig+0x152>
 8007696:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800769a:	d817      	bhi.n	80076cc <UART_SetConfig+0x164>
 800769c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80076a0:	d011      	beq.n	80076c6 <UART_SetConfig+0x15e>
 80076a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80076a6:	d811      	bhi.n	80076cc <UART_SetConfig+0x164>
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d003      	beq.n	80076b4 <UART_SetConfig+0x14c>
 80076ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80076b0:	d006      	beq.n	80076c0 <UART_SetConfig+0x158>
 80076b2:	e00b      	b.n	80076cc <UART_SetConfig+0x164>
 80076b4:	2300      	movs	r3, #0
 80076b6:	77fb      	strb	r3, [r7, #31]
 80076b8:	e061      	b.n	800777e <UART_SetConfig+0x216>
 80076ba:	2302      	movs	r3, #2
 80076bc:	77fb      	strb	r3, [r7, #31]
 80076be:	e05e      	b.n	800777e <UART_SetConfig+0x216>
 80076c0:	2304      	movs	r3, #4
 80076c2:	77fb      	strb	r3, [r7, #31]
 80076c4:	e05b      	b.n	800777e <UART_SetConfig+0x216>
 80076c6:	2308      	movs	r3, #8
 80076c8:	77fb      	strb	r3, [r7, #31]
 80076ca:	e058      	b.n	800777e <UART_SetConfig+0x216>
 80076cc:	2310      	movs	r3, #16
 80076ce:	77fb      	strb	r3, [r7, #31]
 80076d0:	e055      	b.n	800777e <UART_SetConfig+0x216>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a6e      	ldr	r2, [pc, #440]	; (8007890 <UART_SetConfig+0x328>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d124      	bne.n	8007726 <UART_SetConfig+0x1be>
 80076dc:	4b69      	ldr	r3, [pc, #420]	; (8007884 <UART_SetConfig+0x31c>)
 80076de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80076e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80076e8:	d011      	beq.n	800770e <UART_SetConfig+0x1a6>
 80076ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80076ee:	d817      	bhi.n	8007720 <UART_SetConfig+0x1b8>
 80076f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076f4:	d011      	beq.n	800771a <UART_SetConfig+0x1b2>
 80076f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076fa:	d811      	bhi.n	8007720 <UART_SetConfig+0x1b8>
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d003      	beq.n	8007708 <UART_SetConfig+0x1a0>
 8007700:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007704:	d006      	beq.n	8007714 <UART_SetConfig+0x1ac>
 8007706:	e00b      	b.n	8007720 <UART_SetConfig+0x1b8>
 8007708:	2300      	movs	r3, #0
 800770a:	77fb      	strb	r3, [r7, #31]
 800770c:	e037      	b.n	800777e <UART_SetConfig+0x216>
 800770e:	2302      	movs	r3, #2
 8007710:	77fb      	strb	r3, [r7, #31]
 8007712:	e034      	b.n	800777e <UART_SetConfig+0x216>
 8007714:	2304      	movs	r3, #4
 8007716:	77fb      	strb	r3, [r7, #31]
 8007718:	e031      	b.n	800777e <UART_SetConfig+0x216>
 800771a:	2308      	movs	r3, #8
 800771c:	77fb      	strb	r3, [r7, #31]
 800771e:	e02e      	b.n	800777e <UART_SetConfig+0x216>
 8007720:	2310      	movs	r3, #16
 8007722:	77fb      	strb	r3, [r7, #31]
 8007724:	e02b      	b.n	800777e <UART_SetConfig+0x216>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a5a      	ldr	r2, [pc, #360]	; (8007894 <UART_SetConfig+0x32c>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d124      	bne.n	800777a <UART_SetConfig+0x212>
 8007730:	4b54      	ldr	r3, [pc, #336]	; (8007884 <UART_SetConfig+0x31c>)
 8007732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007734:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007738:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800773c:	d011      	beq.n	8007762 <UART_SetConfig+0x1fa>
 800773e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007742:	d817      	bhi.n	8007774 <UART_SetConfig+0x20c>
 8007744:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007748:	d011      	beq.n	800776e <UART_SetConfig+0x206>
 800774a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800774e:	d811      	bhi.n	8007774 <UART_SetConfig+0x20c>
 8007750:	2b00      	cmp	r3, #0
 8007752:	d003      	beq.n	800775c <UART_SetConfig+0x1f4>
 8007754:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007758:	d006      	beq.n	8007768 <UART_SetConfig+0x200>
 800775a:	e00b      	b.n	8007774 <UART_SetConfig+0x20c>
 800775c:	2300      	movs	r3, #0
 800775e:	77fb      	strb	r3, [r7, #31]
 8007760:	e00d      	b.n	800777e <UART_SetConfig+0x216>
 8007762:	2302      	movs	r3, #2
 8007764:	77fb      	strb	r3, [r7, #31]
 8007766:	e00a      	b.n	800777e <UART_SetConfig+0x216>
 8007768:	2304      	movs	r3, #4
 800776a:	77fb      	strb	r3, [r7, #31]
 800776c:	e007      	b.n	800777e <UART_SetConfig+0x216>
 800776e:	2308      	movs	r3, #8
 8007770:	77fb      	strb	r3, [r7, #31]
 8007772:	e004      	b.n	800777e <UART_SetConfig+0x216>
 8007774:	2310      	movs	r3, #16
 8007776:	77fb      	strb	r3, [r7, #31]
 8007778:	e001      	b.n	800777e <UART_SetConfig+0x216>
 800777a:	2310      	movs	r3, #16
 800777c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007786:	d15b      	bne.n	8007840 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8007788:	7ffb      	ldrb	r3, [r7, #31]
 800778a:	2b08      	cmp	r3, #8
 800778c:	d827      	bhi.n	80077de <UART_SetConfig+0x276>
 800778e:	a201      	add	r2, pc, #4	; (adr r2, 8007794 <UART_SetConfig+0x22c>)
 8007790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007794:	080077b9 	.word	0x080077b9
 8007798:	080077c1 	.word	0x080077c1
 800779c:	080077c9 	.word	0x080077c9
 80077a0:	080077df 	.word	0x080077df
 80077a4:	080077cf 	.word	0x080077cf
 80077a8:	080077df 	.word	0x080077df
 80077ac:	080077df 	.word	0x080077df
 80077b0:	080077df 	.word	0x080077df
 80077b4:	080077d7 	.word	0x080077d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077b8:	f7fe f964 	bl	8005a84 <HAL_RCC_GetPCLK1Freq>
 80077bc:	61b8      	str	r0, [r7, #24]
        break;
 80077be:	e013      	b.n	80077e8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077c0:	f7fe f982 	bl	8005ac8 <HAL_RCC_GetPCLK2Freq>
 80077c4:	61b8      	str	r0, [r7, #24]
        break;
 80077c6:	e00f      	b.n	80077e8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077c8:	4b33      	ldr	r3, [pc, #204]	; (8007898 <UART_SetConfig+0x330>)
 80077ca:	61bb      	str	r3, [r7, #24]
        break;
 80077cc:	e00c      	b.n	80077e8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077ce:	f7fe f8e3 	bl	8005998 <HAL_RCC_GetSysClockFreq>
 80077d2:	61b8      	str	r0, [r7, #24]
        break;
 80077d4:	e008      	b.n	80077e8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077da:	61bb      	str	r3, [r7, #24]
        break;
 80077dc:	e004      	b.n	80077e8 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80077de:	2300      	movs	r3, #0
 80077e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	77bb      	strb	r3, [r7, #30]
        break;
 80077e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 8082 	beq.w	80078f4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	005a      	lsls	r2, r3, #1
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	085b      	lsrs	r3, r3, #1
 80077fa:	441a      	add	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	fbb2 f3f3 	udiv	r3, r2, r3
 8007804:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	2b0f      	cmp	r3, #15
 800780a:	d916      	bls.n	800783a <UART_SetConfig+0x2d2>
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007812:	d212      	bcs.n	800783a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	b29b      	uxth	r3, r3
 8007818:	f023 030f 	bic.w	r3, r3, #15
 800781c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	085b      	lsrs	r3, r3, #1
 8007822:	b29b      	uxth	r3, r3
 8007824:	f003 0307 	and.w	r3, r3, #7
 8007828:	b29a      	uxth	r2, r3
 800782a:	89fb      	ldrh	r3, [r7, #14]
 800782c:	4313      	orrs	r3, r2
 800782e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	89fa      	ldrh	r2, [r7, #14]
 8007836:	60da      	str	r2, [r3, #12]
 8007838:	e05c      	b.n	80078f4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	77bb      	strb	r3, [r7, #30]
 800783e:	e059      	b.n	80078f4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007840:	7ffb      	ldrb	r3, [r7, #31]
 8007842:	2b08      	cmp	r3, #8
 8007844:	d835      	bhi.n	80078b2 <UART_SetConfig+0x34a>
 8007846:	a201      	add	r2, pc, #4	; (adr r2, 800784c <UART_SetConfig+0x2e4>)
 8007848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784c:	08007871 	.word	0x08007871
 8007850:	08007879 	.word	0x08007879
 8007854:	0800789d 	.word	0x0800789d
 8007858:	080078b3 	.word	0x080078b3
 800785c:	080078a3 	.word	0x080078a3
 8007860:	080078b3 	.word	0x080078b3
 8007864:	080078b3 	.word	0x080078b3
 8007868:	080078b3 	.word	0x080078b3
 800786c:	080078ab 	.word	0x080078ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007870:	f7fe f908 	bl	8005a84 <HAL_RCC_GetPCLK1Freq>
 8007874:	61b8      	str	r0, [r7, #24]
        break;
 8007876:	e021      	b.n	80078bc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007878:	f7fe f926 	bl	8005ac8 <HAL_RCC_GetPCLK2Freq>
 800787c:	61b8      	str	r0, [r7, #24]
        break;
 800787e:	e01d      	b.n	80078bc <UART_SetConfig+0x354>
 8007880:	40013800 	.word	0x40013800
 8007884:	40021000 	.word	0x40021000
 8007888:	40004400 	.word	0x40004400
 800788c:	40004800 	.word	0x40004800
 8007890:	40004c00 	.word	0x40004c00
 8007894:	40005000 	.word	0x40005000
 8007898:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800789c:	4b1b      	ldr	r3, [pc, #108]	; (800790c <UART_SetConfig+0x3a4>)
 800789e:	61bb      	str	r3, [r7, #24]
        break;
 80078a0:	e00c      	b.n	80078bc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078a2:	f7fe f879 	bl	8005998 <HAL_RCC_GetSysClockFreq>
 80078a6:	61b8      	str	r0, [r7, #24]
        break;
 80078a8:	e008      	b.n	80078bc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078ae:	61bb      	str	r3, [r7, #24]
        break;
 80078b0:	e004      	b.n	80078bc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80078b2:	2300      	movs	r3, #0
 80078b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	77bb      	strb	r3, [r7, #30]
        break;
 80078ba:	bf00      	nop
    }

    if (pclk != 0U)
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d018      	beq.n	80078f4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	085a      	lsrs	r2, r3, #1
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	441a      	add	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	2b0f      	cmp	r3, #15
 80078da:	d909      	bls.n	80078f0 <UART_SetConfig+0x388>
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078e2:	d205      	bcs.n	80078f0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	60da      	str	r2, [r3, #12]
 80078ee:	e001      	b.n	80078f4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007900:	7fbb      	ldrb	r3, [r7, #30]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3720      	adds	r7, #32
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	007a1200 	.word	0x007a1200

08007910 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791c:	f003 0301 	and.w	r3, r3, #1
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00a      	beq.n	800793a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	430a      	orrs	r2, r1
 8007938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00a      	beq.n	800795c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	430a      	orrs	r2, r1
 800795a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007960:	f003 0304 	and.w	r3, r3, #4
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00a      	beq.n	800797e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	430a      	orrs	r2, r1
 800797c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007982:	f003 0308 	and.w	r3, r3, #8
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00a      	beq.n	80079a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	430a      	orrs	r2, r1
 800799e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a4:	f003 0310 	and.w	r3, r3, #16
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00a      	beq.n	80079c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	430a      	orrs	r2, r1
 80079c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c6:	f003 0320 	and.w	r3, r3, #32
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00a      	beq.n	80079e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	430a      	orrs	r2, r1
 80079e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d01a      	beq.n	8007a26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	430a      	orrs	r2, r1
 8007a04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a0e:	d10a      	bne.n	8007a26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00a      	beq.n	8007a48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	605a      	str	r2, [r3, #4]
  }
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b098      	sub	sp, #96	; 0x60
 8007a58:	af02      	add	r7, sp, #8
 8007a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a64:	f7fa fa04 	bl	8001e70 <HAL_GetTick>
 8007a68:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0308 	and.w	r3, r3, #8
 8007a74:	2b08      	cmp	r3, #8
 8007a76:	d12e      	bne.n	8007ad6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a80:	2200      	movs	r2, #0
 8007a82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f88c 	bl	8007ba4 <UART_WaitOnFlagUntilTimeout>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d021      	beq.n	8007ad6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	e853 3f00 	ldrex	r3, [r3]
 8007a9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aa6:	653b      	str	r3, [r7, #80]	; 0x50
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	461a      	mov	r2, r3
 8007aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8007ab2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ab6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ab8:	e841 2300 	strex	r3, r2, [r1]
 8007abc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1e6      	bne.n	8007a92 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2220      	movs	r2, #32
 8007ac8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e062      	b.n	8007b9c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0304 	and.w	r3, r3, #4
 8007ae0:	2b04      	cmp	r3, #4
 8007ae2:	d149      	bne.n	8007b78 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ae4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007aec:	2200      	movs	r2, #0
 8007aee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f856 	bl	8007ba4 <UART_WaitOnFlagUntilTimeout>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d03c      	beq.n	8007b78 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	e853 3f00 	ldrex	r3, [r3]
 8007b0a:	623b      	str	r3, [r7, #32]
   return(result);
 8007b0c:	6a3b      	ldr	r3, [r7, #32]
 8007b0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b1c:	633b      	str	r3, [r7, #48]	; 0x30
 8007b1e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b24:	e841 2300 	strex	r3, r2, [r1]
 8007b28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1e6      	bne.n	8007afe <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3308      	adds	r3, #8
 8007b36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	e853 3f00 	ldrex	r3, [r3]
 8007b3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f023 0301 	bic.w	r3, r3, #1
 8007b46:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	3308      	adds	r3, #8
 8007b4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b50:	61fa      	str	r2, [r7, #28]
 8007b52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b54:	69b9      	ldr	r1, [r7, #24]
 8007b56:	69fa      	ldr	r2, [r7, #28]
 8007b58:	e841 2300 	strex	r3, r2, [r1]
 8007b5c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d1e5      	bne.n	8007b30 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2220      	movs	r2, #32
 8007b68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e011      	b.n	8007b9c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2220      	movs	r2, #32
 8007b7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2220      	movs	r2, #32
 8007b82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3758      	adds	r7, #88	; 0x58
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	603b      	str	r3, [r7, #0]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bb4:	e049      	b.n	8007c4a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bbc:	d045      	beq.n	8007c4a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bbe:	f7fa f957 	bl	8001e70 <HAL_GetTick>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	69ba      	ldr	r2, [r7, #24]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d302      	bcc.n	8007bd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d101      	bne.n	8007bd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	e048      	b.n	8007c6a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0304 	and.w	r3, r3, #4
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d031      	beq.n	8007c4a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	69db      	ldr	r3, [r3, #28]
 8007bec:	f003 0308 	and.w	r3, r3, #8
 8007bf0:	2b08      	cmp	r3, #8
 8007bf2:	d110      	bne.n	8007c16 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2208      	movs	r2, #8
 8007bfa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f000 f838 	bl	8007c72 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2208      	movs	r2, #8
 8007c06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e029      	b.n	8007c6a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	69db      	ldr	r3, [r3, #28]
 8007c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c24:	d111      	bne.n	8007c4a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f000 f81e 	bl	8007c72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2220      	movs	r2, #32
 8007c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e00f      	b.n	8007c6a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	69da      	ldr	r2, [r3, #28]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	4013      	ands	r3, r2
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	bf0c      	ite	eq
 8007c5a:	2301      	moveq	r3, #1
 8007c5c:	2300      	movne	r3, #0
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	461a      	mov	r2, r3
 8007c62:	79fb      	ldrb	r3, [r7, #7]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d0a6      	beq.n	8007bb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c72:	b480      	push	{r7}
 8007c74:	b095      	sub	sp, #84	; 0x54
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c82:	e853 3f00 	ldrex	r3, [r3]
 8007c86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	461a      	mov	r2, r3
 8007c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c98:	643b      	str	r3, [r7, #64]	; 0x40
 8007c9a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ca0:	e841 2300 	strex	r3, r2, [r1]
 8007ca4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1e6      	bne.n	8007c7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	3308      	adds	r3, #8
 8007cb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	e853 3f00 	ldrex	r3, [r3]
 8007cba:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	f023 0301 	bic.w	r3, r3, #1
 8007cc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	3308      	adds	r3, #8
 8007cca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ccc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cd4:	e841 2300 	strex	r3, r2, [r1]
 8007cd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1e5      	bne.n	8007cac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d118      	bne.n	8007d1a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	e853 3f00 	ldrex	r3, [r3]
 8007cf4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	f023 0310 	bic.w	r3, r3, #16
 8007cfc:	647b      	str	r3, [r7, #68]	; 0x44
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	461a      	mov	r2, r3
 8007d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d06:	61bb      	str	r3, [r7, #24]
 8007d08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0a:	6979      	ldr	r1, [r7, #20]
 8007d0c:	69ba      	ldr	r2, [r7, #24]
 8007d0e:	e841 2300 	strex	r3, r2, [r1]
 8007d12:	613b      	str	r3, [r7, #16]
   return(result);
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1e6      	bne.n	8007ce8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2220      	movs	r2, #32
 8007d1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007d2e:	bf00      	nop
 8007d30:	3754      	adds	r7, #84	; 0x54
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b085      	sub	sp, #20
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007d4a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007d4e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007d70:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007d74:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	43db      	mvns	r3, r3
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	4013      	ands	r3, r2
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3714      	adds	r7, #20
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007d9e:	b084      	sub	sp, #16
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	f107 0014 	add.w	r0, r7, #20
 8007dac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	b004      	add	sp, #16
 8007dde:	4770      	bx	lr

08007de0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b09d      	sub	sp, #116	; 0x74
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4413      	add	r3, r2
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e06:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	78db      	ldrb	r3, [r3, #3]
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	d81f      	bhi.n	8007e52 <USB_ActivateEndpoint+0x72>
 8007e12:	a201      	add	r2, pc, #4	; (adr r2, 8007e18 <USB_ActivateEndpoint+0x38>)
 8007e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e18:	08007e29 	.word	0x08007e29
 8007e1c:	08007e45 	.word	0x08007e45
 8007e20:	08007e5b 	.word	0x08007e5b
 8007e24:	08007e37 	.word	0x08007e37
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007e28:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007e2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e30:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007e34:	e012      	b.n	8007e5c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007e36:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007e3a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007e3e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007e42:	e00b      	b.n	8007e5c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007e44:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007e48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e4c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007e50:	e004      	b.n	8007e5c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007e58:	e000      	b.n	8007e5c <USB_ActivateEndpoint+0x7c>
      break;
 8007e5a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	441a      	add	r2, r3
 8007e66:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	4413      	add	r3, r2
 8007e88:	881b      	ldrh	r3, [r3, #0]
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	b21b      	sxth	r3, r3
 8007e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e96:	b21a      	sxth	r2, r3
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	b21b      	sxth	r3, r3
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	b21b      	sxth	r3, r3
 8007ea2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	441a      	add	r2, r3
 8007eb0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	7b1b      	ldrb	r3, [r3, #12]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f040 8178 	bne.w	80081c2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	785b      	ldrb	r3, [r3, #1]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f000 8084 	beq.w	8007fe4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	61bb      	str	r3, [r7, #24]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	461a      	mov	r2, r3
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	4413      	add	r3, r2
 8007eee:	61bb      	str	r3, [r7, #24]
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	011a      	lsls	r2, r3, #4
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	4413      	add	r3, r2
 8007efa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007efe:	617b      	str	r3, [r7, #20]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	88db      	ldrh	r3, [r3, #6]
 8007f04:	085b      	lsrs	r3, r3, #1
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	881b      	ldrh	r3, [r3, #0]
 8007f1c:	827b      	strh	r3, [r7, #18]
 8007f1e:	8a7b      	ldrh	r3, [r7, #18]
 8007f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d01b      	beq.n	8007f60 <USB_ActivateEndpoint+0x180>
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	4413      	add	r3, r2
 8007f32:	881b      	ldrh	r3, [r3, #0]
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f3e:	823b      	strh	r3, [r7, #16]
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	441a      	add	r2, r3
 8007f4a:	8a3b      	ldrh	r3, [r7, #16]
 8007f4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	78db      	ldrb	r3, [r3, #3]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d020      	beq.n	8007faa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	881b      	ldrh	r3, [r3, #0]
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f7e:	81bb      	strh	r3, [r7, #12]
 8007f80:	89bb      	ldrh	r3, [r7, #12]
 8007f82:	f083 0320 	eor.w	r3, r3, #32
 8007f86:	81bb      	strh	r3, [r7, #12]
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	441a      	add	r2, r3
 8007f92:	89bb      	ldrh	r3, [r7, #12]
 8007f94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	8013      	strh	r3, [r2, #0]
 8007fa8:	e2d5      	b.n	8008556 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4413      	add	r3, r2
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fc0:	81fb      	strh	r3, [r7, #14]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	441a      	add	r2, r3
 8007fcc:	89fb      	ldrh	r3, [r7, #14]
 8007fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	8013      	strh	r3, [r2, #0]
 8007fe2:	e2b8      	b.n	8008556 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	633b      	str	r3, [r7, #48]	; 0x30
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff4:	4413      	add	r3, r2
 8007ff6:	633b      	str	r3, [r7, #48]	; 0x30
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	011a      	lsls	r2, r3, #4
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008000:	4413      	add	r3, r2
 8008002:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008006:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	88db      	ldrh	r3, [r3, #6]
 800800c:	085b      	lsrs	r3, r3, #1
 800800e:	b29b      	uxth	r3, r3
 8008010:	005b      	lsls	r3, r3, #1
 8008012:	b29a      	uxth	r2, r3
 8008014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008016:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	62bb      	str	r3, [r7, #40]	; 0x28
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008022:	b29b      	uxth	r3, r3
 8008024:	461a      	mov	r2, r3
 8008026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008028:	4413      	add	r3, r2
 800802a:	62bb      	str	r3, [r7, #40]	; 0x28
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	011a      	lsls	r2, r3, #4
 8008032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008034:	4413      	add	r3, r2
 8008036:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800803a:	627b      	str	r3, [r7, #36]	; 0x24
 800803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803e:	881b      	ldrh	r3, [r3, #0]
 8008040:	b29b      	uxth	r3, r3
 8008042:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008046:	b29a      	uxth	r2, r3
 8008048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804a:	801a      	strh	r2, [r3, #0]
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	2b3e      	cmp	r3, #62	; 0x3e
 8008052:	d91d      	bls.n	8008090 <USB_ActivateEndpoint+0x2b0>
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	095b      	lsrs	r3, r3, #5
 800805a:	66bb      	str	r3, [r7, #104]	; 0x68
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	f003 031f 	and.w	r3, r3, #31
 8008064:	2b00      	cmp	r3, #0
 8008066:	d102      	bne.n	800806e <USB_ActivateEndpoint+0x28e>
 8008068:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800806a:	3b01      	subs	r3, #1
 800806c:	66bb      	str	r3, [r7, #104]	; 0x68
 800806e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008070:	881b      	ldrh	r3, [r3, #0]
 8008072:	b29a      	uxth	r2, r3
 8008074:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008076:	b29b      	uxth	r3, r3
 8008078:	029b      	lsls	r3, r3, #10
 800807a:	b29b      	uxth	r3, r3
 800807c:	4313      	orrs	r3, r2
 800807e:	b29b      	uxth	r3, r3
 8008080:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008084:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008088:	b29a      	uxth	r2, r3
 800808a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808c:	801a      	strh	r2, [r3, #0]
 800808e:	e026      	b.n	80080de <USB_ActivateEndpoint+0x2fe>
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10a      	bne.n	80080ae <USB_ActivateEndpoint+0x2ce>
 8008098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	b29b      	uxth	r3, r3
 800809e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080aa:	801a      	strh	r2, [r3, #0]
 80080ac:	e017      	b.n	80080de <USB_ActivateEndpoint+0x2fe>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	085b      	lsrs	r3, r3, #1
 80080b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d002      	beq.n	80080c8 <USB_ActivateEndpoint+0x2e8>
 80080c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80080c4:	3301      	adds	r3, #1
 80080c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ca:	881b      	ldrh	r3, [r3, #0]
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	029b      	lsls	r3, r3, #10
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	4313      	orrs	r3, r2
 80080d8:	b29a      	uxth	r2, r3
 80080da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080dc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4413      	add	r3, r2
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80080ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80080ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d01b      	beq.n	800812e <USB_ActivateEndpoint+0x34e>
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4413      	add	r3, r2
 8008100:	881b      	ldrh	r3, [r3, #0]
 8008102:	b29b      	uxth	r3, r3
 8008104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800810c:	843b      	strh	r3, [r7, #32]
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	441a      	add	r2, r3
 8008118:	8c3b      	ldrh	r3, [r7, #32]
 800811a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800811e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008122:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800812a:	b29b      	uxth	r3, r3
 800812c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d124      	bne.n	8008180 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4413      	add	r3, r2
 8008140:	881b      	ldrh	r3, [r3, #0]
 8008142:	b29b      	uxth	r3, r3
 8008144:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800814c:	83bb      	strh	r3, [r7, #28]
 800814e:	8bbb      	ldrh	r3, [r7, #28]
 8008150:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008154:	83bb      	strh	r3, [r7, #28]
 8008156:	8bbb      	ldrh	r3, [r7, #28]
 8008158:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800815c:	83bb      	strh	r3, [r7, #28]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	441a      	add	r2, r3
 8008168:	8bbb      	ldrh	r3, [r7, #28]
 800816a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800816e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800817a:	b29b      	uxth	r3, r3
 800817c:	8013      	strh	r3, [r2, #0]
 800817e:	e1ea      	b.n	8008556 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	881b      	ldrh	r3, [r3, #0]
 800818c:	b29b      	uxth	r3, r3
 800818e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008196:	83fb      	strh	r3, [r7, #30]
 8008198:	8bfb      	ldrh	r3, [r7, #30]
 800819a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800819e:	83fb      	strh	r3, [r7, #30]
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	441a      	add	r2, r3
 80081aa:	8bfb      	ldrh	r3, [r7, #30]
 80081ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081bc:	b29b      	uxth	r3, r3
 80081be:	8013      	strh	r3, [r2, #0]
 80081c0:	e1c9      	b.n	8008556 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	78db      	ldrb	r3, [r3, #3]
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d11e      	bne.n	8008208 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4413      	add	r3, r2
 80081d4:	881b      	ldrh	r3, [r3, #0]
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081e0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	441a      	add	r2, r3
 80081ee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80081f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081fa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80081fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008202:	b29b      	uxth	r3, r3
 8008204:	8013      	strh	r3, [r2, #0]
 8008206:	e01d      	b.n	8008244 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	4413      	add	r3, r2
 8008212:	881b      	ldrh	r3, [r3, #0]
 8008214:	b29b      	uxth	r3, r3
 8008216:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800821a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800821e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	441a      	add	r2, r3
 800822c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008230:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008234:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800823c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008240:	b29b      	uxth	r3, r3
 8008242:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800824e:	b29b      	uxth	r3, r3
 8008250:	461a      	mov	r2, r3
 8008252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008254:	4413      	add	r3, r2
 8008256:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	011a      	lsls	r2, r3, #4
 800825e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008260:	4413      	add	r3, r2
 8008262:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008266:	65bb      	str	r3, [r7, #88]	; 0x58
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	891b      	ldrh	r3, [r3, #8]
 800826c:	085b      	lsrs	r3, r3, #1
 800826e:	b29b      	uxth	r3, r3
 8008270:	005b      	lsls	r3, r3, #1
 8008272:	b29a      	uxth	r2, r3
 8008274:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008276:	801a      	strh	r2, [r3, #0]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	657b      	str	r3, [r7, #84]	; 0x54
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008282:	b29b      	uxth	r3, r3
 8008284:	461a      	mov	r2, r3
 8008286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008288:	4413      	add	r3, r2
 800828a:	657b      	str	r3, [r7, #84]	; 0x54
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	011a      	lsls	r2, r3, #4
 8008292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008294:	4413      	add	r3, r2
 8008296:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800829a:	653b      	str	r3, [r7, #80]	; 0x50
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	895b      	ldrh	r3, [r3, #10]
 80082a0:	085b      	lsrs	r3, r3, #1
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	005b      	lsls	r3, r3, #1
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082aa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	785b      	ldrb	r3, [r3, #1]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f040 8093 	bne.w	80083dc <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4413      	add	r3, r2
 80082c0:	881b      	ldrh	r3, [r3, #0]
 80082c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80082c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80082ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d01b      	beq.n	800830a <USB_ActivateEndpoint+0x52a>
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	4413      	add	r3, r2
 80082dc:	881b      	ldrh	r3, [r3, #0]
 80082de:	b29b      	uxth	r3, r3
 80082e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	441a      	add	r2, r3
 80082f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80082f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008306:	b29b      	uxth	r3, r3
 8008308:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	4413      	add	r3, r2
 8008314:	881b      	ldrh	r3, [r3, #0]
 8008316:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008318:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800831a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800831e:	2b00      	cmp	r3, #0
 8008320:	d01b      	beq.n	800835a <USB_ActivateEndpoint+0x57a>
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4413      	add	r3, r2
 800832c:	881b      	ldrh	r3, [r3, #0]
 800832e:	b29b      	uxth	r3, r3
 8008330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008338:	877b      	strh	r3, [r7, #58]	; 0x3a
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	441a      	add	r2, r3
 8008344:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800834a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800834e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008352:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008356:	b29b      	uxth	r3, r3
 8008358:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	881b      	ldrh	r3, [r3, #0]
 8008366:	b29b      	uxth	r3, r3
 8008368:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800836c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008370:	873b      	strh	r3, [r7, #56]	; 0x38
 8008372:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008374:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008378:	873b      	strh	r3, [r7, #56]	; 0x38
 800837a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800837c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008380:	873b      	strh	r3, [r7, #56]	; 0x38
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	441a      	add	r2, r3
 800838c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800838e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800839a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800839e:	b29b      	uxth	r3, r3
 80083a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	881b      	ldrh	r3, [r3, #0]
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083b8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	441a      	add	r2, r3
 80083c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80083c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	8013      	strh	r3, [r2, #0]
 80083da:	e0bc      	b.n	8008556 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4413      	add	r3, r2
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80083ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80083f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d01d      	beq.n	8008434 <USB_ActivateEndpoint+0x654>
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	4413      	add	r3, r2
 8008402:	881b      	ldrh	r3, [r3, #0]
 8008404:	b29b      	uxth	r3, r3
 8008406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800840a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800840e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	441a      	add	r2, r3
 800841c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008428:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800842c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008430:	b29b      	uxth	r3, r3
 8008432:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	881b      	ldrh	r3, [r3, #0]
 8008440:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008444:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800844c:	2b00      	cmp	r3, #0
 800844e:	d01d      	beq.n	800848c <USB_ActivateEndpoint+0x6ac>
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4413      	add	r3, r2
 800845a:	881b      	ldrh	r3, [r3, #0]
 800845c:	b29b      	uxth	r3, r3
 800845e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008466:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	441a      	add	r2, r3
 8008474:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008478:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800847c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008484:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008488:	b29b      	uxth	r3, r3
 800848a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	78db      	ldrb	r3, [r3, #3]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d024      	beq.n	80084de <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4413      	add	r3, r2
 800849e:	881b      	ldrh	r3, [r3, #0]
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80084ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80084b2:	f083 0320 	eor.w	r3, r3, #32
 80084b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	441a      	add	r2, r3
 80084c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80084c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084d8:	b29b      	uxth	r3, r3
 80084da:	8013      	strh	r3, [r2, #0]
 80084dc:	e01d      	b.n	800851a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	4413      	add	r3, r2
 80084e8:	881b      	ldrh	r3, [r3, #0]
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	441a      	add	r2, r3
 8008502:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800850a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800850e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008516:	b29b      	uxth	r3, r3
 8008518:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	4413      	add	r3, r2
 8008524:	881b      	ldrh	r3, [r3, #0]
 8008526:	b29b      	uxth	r3, r3
 8008528:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800852c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008530:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	441a      	add	r2, r3
 800853e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008542:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008546:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800854a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800854e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008552:	b29b      	uxth	r3, r3
 8008554:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008556:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800855a:	4618      	mov	r0, r3
 800855c:	3774      	adds	r7, #116	; 0x74
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop

08008568 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008568:	b480      	push	{r7}
 800856a:	b08d      	sub	sp, #52	; 0x34
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	7b1b      	ldrb	r3, [r3, #12]
 8008576:	2b00      	cmp	r3, #0
 8008578:	f040 808e 	bne.w	8008698 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	785b      	ldrb	r3, [r3, #1]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d044      	beq.n	800860e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	881b      	ldrh	r3, [r3, #0]
 8008590:	81bb      	strh	r3, [r7, #12]
 8008592:	89bb      	ldrh	r3, [r7, #12]
 8008594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008598:	2b00      	cmp	r3, #0
 800859a:	d01b      	beq.n	80085d4 <USB_DeactivateEndpoint+0x6c>
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4413      	add	r3, r2
 80085a6:	881b      	ldrh	r3, [r3, #0]
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b2:	817b      	strh	r3, [r7, #10]
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	441a      	add	r2, r3
 80085be:	897b      	ldrh	r3, [r7, #10]
 80085c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4413      	add	r3, r2
 80085de:	881b      	ldrh	r3, [r3, #0]
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085ea:	813b      	strh	r3, [r7, #8]
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	441a      	add	r2, r3
 80085f6:	893b      	ldrh	r3, [r7, #8]
 80085f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008608:	b29b      	uxth	r3, r3
 800860a:	8013      	strh	r3, [r2, #0]
 800860c:	e192      	b.n	8008934 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4413      	add	r3, r2
 8008618:	881b      	ldrh	r3, [r3, #0]
 800861a:	827b      	strh	r3, [r7, #18]
 800861c:	8a7b      	ldrh	r3, [r7, #18]
 800861e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008622:	2b00      	cmp	r3, #0
 8008624:	d01b      	beq.n	800865e <USB_DeactivateEndpoint+0xf6>
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	4413      	add	r3, r2
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	b29b      	uxth	r3, r3
 8008634:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800863c:	823b      	strh	r3, [r7, #16]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	441a      	add	r2, r3
 8008648:	8a3b      	ldrh	r3, [r7, #16]
 800864a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800864e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008652:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800865a:	b29b      	uxth	r3, r3
 800865c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	4413      	add	r3, r2
 8008668:	881b      	ldrh	r3, [r3, #0]
 800866a:	b29b      	uxth	r3, r3
 800866c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008674:	81fb      	strh	r3, [r7, #14]
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	441a      	add	r2, r3
 8008680:	89fb      	ldrh	r3, [r7, #14]
 8008682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800868a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800868e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008692:	b29b      	uxth	r3, r3
 8008694:	8013      	strh	r3, [r2, #0]
 8008696:	e14d      	b.n	8008934 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	785b      	ldrb	r3, [r3, #1]
 800869c:	2b00      	cmp	r3, #0
 800869e:	f040 80a5 	bne.w	80087ec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	881b      	ldrh	r3, [r3, #0]
 80086ae:	843b      	strh	r3, [r7, #32]
 80086b0:	8c3b      	ldrh	r3, [r7, #32]
 80086b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d01b      	beq.n	80086f2 <USB_DeactivateEndpoint+0x18a>
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	4413      	add	r3, r2
 80086c4:	881b      	ldrh	r3, [r3, #0]
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d0:	83fb      	strh	r3, [r7, #30]
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	441a      	add	r2, r3
 80086dc:	8bfb      	ldrh	r3, [r7, #30]
 80086de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80086ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4413      	add	r3, r2
 80086fc:	881b      	ldrh	r3, [r3, #0]
 80086fe:	83bb      	strh	r3, [r7, #28]
 8008700:	8bbb      	ldrh	r3, [r7, #28]
 8008702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008706:	2b00      	cmp	r3, #0
 8008708:	d01b      	beq.n	8008742 <USB_DeactivateEndpoint+0x1da>
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	881b      	ldrh	r3, [r3, #0]
 8008716:	b29b      	uxth	r3, r3
 8008718:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800871c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008720:	837b      	strh	r3, [r7, #26]
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	441a      	add	r2, r3
 800872c:	8b7b      	ldrh	r3, [r7, #26]
 800872e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800873a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800873e:	b29b      	uxth	r3, r3
 8008740:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4413      	add	r3, r2
 800874c:	881b      	ldrh	r3, [r3, #0]
 800874e:	b29b      	uxth	r3, r3
 8008750:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008758:	833b      	strh	r3, [r7, #24]
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	441a      	add	r2, r3
 8008764:	8b3b      	ldrh	r3, [r7, #24]
 8008766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800876a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800876e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008772:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008776:	b29b      	uxth	r3, r3
 8008778:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4413      	add	r3, r2
 8008784:	881b      	ldrh	r3, [r3, #0]
 8008786:	b29b      	uxth	r3, r3
 8008788:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800878c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008790:	82fb      	strh	r3, [r7, #22]
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	441a      	add	r2, r3
 800879c:	8afb      	ldrh	r3, [r7, #22]
 800879e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	4413      	add	r3, r2
 80087bc:	881b      	ldrh	r3, [r3, #0]
 80087be:	b29b      	uxth	r3, r3
 80087c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087c8:	82bb      	strh	r3, [r7, #20]
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	441a      	add	r2, r3
 80087d4:	8abb      	ldrh	r3, [r7, #20]
 80087d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	8013      	strh	r3, [r2, #0]
 80087ea:	e0a3      	b.n	8008934 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	4413      	add	r3, r2
 80087f6:	881b      	ldrh	r3, [r3, #0]
 80087f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80087fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80087fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008800:	2b00      	cmp	r3, #0
 8008802:	d01b      	beq.n	800883c <USB_DeactivateEndpoint+0x2d4>
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	4413      	add	r3, r2
 800880e:	881b      	ldrh	r3, [r3, #0]
 8008810:	b29b      	uxth	r3, r3
 8008812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800881a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	441a      	add	r2, r3
 8008826:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800882c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008830:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008838:	b29b      	uxth	r3, r3
 800883a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	4413      	add	r3, r2
 8008846:	881b      	ldrh	r3, [r3, #0]
 8008848:	857b      	strh	r3, [r7, #42]	; 0x2a
 800884a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800884c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008850:	2b00      	cmp	r3, #0
 8008852:	d01b      	beq.n	800888c <USB_DeactivateEndpoint+0x324>
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	4413      	add	r3, r2
 800885e:	881b      	ldrh	r3, [r3, #0]
 8008860:	b29b      	uxth	r3, r3
 8008862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800886a:	853b      	strh	r3, [r7, #40]	; 0x28
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	441a      	add	r2, r3
 8008876:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800887c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008884:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008888:	b29b      	uxth	r3, r3
 800888a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	4413      	add	r3, r2
 8008896:	881b      	ldrh	r3, [r3, #0]
 8008898:	b29b      	uxth	r3, r3
 800889a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800889e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	441a      	add	r2, r3
 80088ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80088b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80088bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	4413      	add	r3, r2
 80088ce:	881b      	ldrh	r3, [r3, #0]
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088da:	84bb      	strh	r3, [r7, #36]	; 0x24
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	441a      	add	r2, r3
 80088e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	4413      	add	r3, r2
 8008906:	881b      	ldrh	r3, [r3, #0]
 8008908:	b29b      	uxth	r3, r3
 800890a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800890e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008912:	847b      	strh	r3, [r7, #34]	; 0x22
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	441a      	add	r2, r3
 800891e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008920:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008924:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008928:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800892c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008930:	b29b      	uxth	r3, r3
 8008932:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3734      	adds	r7, #52	; 0x34
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr

08008942 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b0c2      	sub	sp, #264	; 0x108
 8008946:	af00      	add	r7, sp, #0
 8008948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800894c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008950:	6018      	str	r0, [r3, #0]
 8008952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008956:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800895a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800895c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	785b      	ldrb	r3, [r3, #1]
 8008968:	2b01      	cmp	r3, #1
 800896a:	f040 86b7 	bne.w	80096dc <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800896e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	699a      	ldr	r2, [r3, #24]
 800897a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800897e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	429a      	cmp	r2, r3
 8008988:	d908      	bls.n	800899c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800898a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800898e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800899a:	e007      	b.n	80089ac <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800899c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	699b      	ldr	r3, [r3, #24]
 80089a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80089ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	7b1b      	ldrb	r3, [r3, #12]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d13a      	bne.n	8008a32 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80089bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	6959      	ldr	r1, [r3, #20]
 80089c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	88da      	ldrh	r2, [r3, #6]
 80089d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089d8:	b29b      	uxth	r3, r3
 80089da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80089de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80089e2:	6800      	ldr	r0, [r0, #0]
 80089e4:	f001 fc8c 	bl	800a300 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80089e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	613b      	str	r3, [r7, #16]
 80089f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	461a      	mov	r2, r3
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	4413      	add	r3, r2
 8008a0a:	613b      	str	r3, [r7, #16]
 8008a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	011a      	lsls	r2, r3, #4
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a22:	60fb      	str	r3, [r7, #12]
 8008a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	801a      	strh	r2, [r3, #0]
 8008a2e:	f000 be1f 	b.w	8009670 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	78db      	ldrb	r3, [r3, #3]
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	f040 8462 	bne.w	8009308 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	6a1a      	ldr	r2, [r3, #32]
 8008a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	f240 83df 	bls.w	8009220 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4413      	add	r3, r2
 8008a7c:	881b      	ldrh	r3, [r3, #0]
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a88:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	441a      	add	r2, r3
 8008aa6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008aaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ab2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	6a1a      	ldr	r2, [r3, #32]
 8008aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ace:	1ad2      	subs	r2, r2, r3
 8008ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ae0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	4413      	add	r3, r2
 8008af6:	881b      	ldrh	r3, [r3, #0]
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f000 81c7 	beq.w	8008e92 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	633b      	str	r3, [r7, #48]	; 0x30
 8008b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	785b      	ldrb	r3, [r3, #1]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d177      	bne.n	8008c10 <USB_EPStartXfer+0x2ce>
 8008b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b40:	4413      	add	r3, r2
 8008b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	011a      	lsls	r2, r3, #4
 8008b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b54:	4413      	add	r3, r2
 8008b56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5e:	881b      	ldrh	r3, [r3, #0]
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6a:	801a      	strh	r2, [r3, #0]
 8008b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b70:	2b3e      	cmp	r3, #62	; 0x3e
 8008b72:	d921      	bls.n	8008bb8 <USB_EPStartXfer+0x276>
 8008b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b78:	095b      	lsrs	r3, r3, #5
 8008b7a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b82:	f003 031f 	and.w	r3, r3, #31
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d104      	bne.n	8008b94 <USB_EPStartXfer+0x252>
 8008b8a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	029b      	lsls	r3, r3, #10
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bb0:	b29a      	uxth	r2, r3
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb4:	801a      	strh	r2, [r3, #0]
 8008bb6:	e050      	b.n	8008c5a <USB_EPStartXfer+0x318>
 8008bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10a      	bne.n	8008bd6 <USB_EPStartXfer+0x294>
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc2:	881b      	ldrh	r3, [r3, #0]
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd2:	801a      	strh	r2, [r3, #0]
 8008bd4:	e041      	b.n	8008c5a <USB_EPStartXfer+0x318>
 8008bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bda:	085b      	lsrs	r3, r3, #1
 8008bdc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008be4:	f003 0301 	and.w	r3, r3, #1
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d004      	beq.n	8008bf6 <USB_EPStartXfer+0x2b4>
 8008bec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf8:	881b      	ldrh	r3, [r3, #0]
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	029b      	lsls	r3, r3, #10
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	4313      	orrs	r3, r2
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0c:	801a      	strh	r2, [r3, #0]
 8008c0e:	e024      	b.n	8008c5a <USB_EPStartXfer+0x318>
 8008c10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	785b      	ldrb	r3, [r3, #1]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d11c      	bne.n	8008c5a <USB_EPStartXfer+0x318>
 8008c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	461a      	mov	r2, r3
 8008c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c34:	4413      	add	r3, r2
 8008c36:	633b      	str	r3, [r7, #48]	; 0x30
 8008c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	011a      	lsls	r2, r3, #4
 8008c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c48:	4413      	add	r3, r2
 8008c4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c58:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	895b      	ldrh	r3, [r3, #10]
 8008c66:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6959      	ldr	r1, [r3, #20]
 8008c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008c80:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008c84:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008c88:	6800      	ldr	r0, [r0, #0]
 8008c8a:	f001 fb39 	bl	800a300 <USB_WritePMA>
            ep->xfer_buff += len;
 8008c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	695a      	ldr	r2, [r3, #20]
 8008c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c9e:	441a      	add	r2, r3
 8008ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008cac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	6a1a      	ldr	r2, [r3, #32]
 8008cb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d90f      	bls.n	8008ce8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ccc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	6a1a      	ldr	r2, [r3, #32]
 8008cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cd8:	1ad2      	subs	r2, r2, r3
 8008cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	621a      	str	r2, [r3, #32]
 8008ce6:	e00e      	b.n	8008d06 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	6a1b      	ldr	r3, [r3, #32]
 8008cf4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2200      	movs	r2, #0
 8008d04:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	785b      	ldrb	r3, [r3, #1]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d177      	bne.n	8008e06 <USB_EPStartXfer+0x4c4>
 8008d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	61bb      	str	r3, [r7, #24]
 8008d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	461a      	mov	r2, r3
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	4413      	add	r3, r2
 8008d38:	61bb      	str	r3, [r7, #24]
 8008d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	011a      	lsls	r2, r3, #4
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d50:	617b      	str	r3, [r7, #20]
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	881b      	ldrh	r3, [r3, #0]
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	801a      	strh	r2, [r3, #0]
 8008d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d66:	2b3e      	cmp	r3, #62	; 0x3e
 8008d68:	d921      	bls.n	8008dae <USB_EPStartXfer+0x46c>
 8008d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d6e:	095b      	lsrs	r3, r3, #5
 8008d70:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d78:	f003 031f 	and.w	r3, r3, #31
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d104      	bne.n	8008d8a <USB_EPStartXfer+0x448>
 8008d80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d84:	3b01      	subs	r3, #1
 8008d86:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	881b      	ldrh	r3, [r3, #0]
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	029b      	lsls	r3, r3, #10
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008da2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	801a      	strh	r2, [r3, #0]
 8008dac:	e056      	b.n	8008e5c <USB_EPStartXfer+0x51a>
 8008dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d10a      	bne.n	8008dcc <USB_EPStartXfer+0x48a>
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	881b      	ldrh	r3, [r3, #0]
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	801a      	strh	r2, [r3, #0]
 8008dca:	e047      	b.n	8008e5c <USB_EPStartXfer+0x51a>
 8008dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dd0:	085b      	lsrs	r3, r3, #1
 8008dd2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dda:	f003 0301 	and.w	r3, r3, #1
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d004      	beq.n	8008dec <USB_EPStartXfer+0x4aa>
 8008de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008de6:	3301      	adds	r3, #1
 8008de8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	881b      	ldrh	r3, [r3, #0]
 8008df0:	b29a      	uxth	r2, r3
 8008df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	029b      	lsls	r3, r3, #10
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	b29a      	uxth	r2, r3
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	801a      	strh	r2, [r3, #0]
 8008e04:	e02a      	b.n	8008e5c <USB_EPStartXfer+0x51a>
 8008e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	785b      	ldrb	r3, [r3, #1]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d122      	bne.n	8008e5c <USB_EPStartXfer+0x51a>
 8008e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	623b      	str	r3, [r7, #32]
 8008e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	461a      	mov	r2, r3
 8008e34:	6a3b      	ldr	r3, [r7, #32]
 8008e36:	4413      	add	r3, r2
 8008e38:	623b      	str	r3, [r7, #32]
 8008e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	011a      	lsls	r2, r3, #4
 8008e48:	6a3b      	ldr	r3, [r7, #32]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e50:	61fb      	str	r3, [r7, #28]
 8008e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	891b      	ldrh	r3, [r3, #8]
 8008e68:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	6959      	ldr	r1, [r3, #20]
 8008e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008e82:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008e86:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008e8a:	6800      	ldr	r0, [r0, #0]
 8008e8c:	f001 fa38 	bl	800a300 <USB_WritePMA>
 8008e90:	e3ee      	b.n	8009670 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	785b      	ldrb	r3, [r3, #1]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d177      	bne.n	8008f92 <USB_EPStartXfer+0x650>
 8008ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ea6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	64bb      	str	r3, [r7, #72]	; 0x48
 8008eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ec2:	4413      	add	r3, r2
 8008ec4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	011a      	lsls	r2, r3, #4
 8008ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ed6:	4413      	add	r3, r2
 8008ed8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008edc:	647b      	str	r3, [r7, #68]	; 0x44
 8008ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ee0:	881b      	ldrh	r3, [r3, #0]
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008eec:	801a      	strh	r2, [r3, #0]
 8008eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ef2:	2b3e      	cmp	r3, #62	; 0x3e
 8008ef4:	d921      	bls.n	8008f3a <USB_EPStartXfer+0x5f8>
 8008ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008efa:	095b      	lsrs	r3, r3, #5
 8008efc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f04:	f003 031f 	and.w	r3, r3, #31
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d104      	bne.n	8008f16 <USB_EPStartXfer+0x5d4>
 8008f0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f10:	3b01      	subs	r3, #1
 8008f12:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f18:	881b      	ldrh	r3, [r3, #0]
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	029b      	lsls	r3, r3, #10
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	4313      	orrs	r3, r2
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f32:	b29a      	uxth	r2, r3
 8008f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f36:	801a      	strh	r2, [r3, #0]
 8008f38:	e056      	b.n	8008fe8 <USB_EPStartXfer+0x6a6>
 8008f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d10a      	bne.n	8008f58 <USB_EPStartXfer+0x616>
 8008f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f44:	881b      	ldrh	r3, [r3, #0]
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f54:	801a      	strh	r2, [r3, #0]
 8008f56:	e047      	b.n	8008fe8 <USB_EPStartXfer+0x6a6>
 8008f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f5c:	085b      	lsrs	r3, r3, #1
 8008f5e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f66:	f003 0301 	and.w	r3, r3, #1
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d004      	beq.n	8008f78 <USB_EPStartXfer+0x636>
 8008f6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f72:	3301      	adds	r3, #1
 8008f74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	b29a      	uxth	r2, r3
 8008f7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	029b      	lsls	r3, r3, #10
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	b29a      	uxth	r2, r3
 8008f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f8e:	801a      	strh	r2, [r3, #0]
 8008f90:	e02a      	b.n	8008fe8 <USB_EPStartXfer+0x6a6>
 8008f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	785b      	ldrb	r3, [r3, #1]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d122      	bne.n	8008fe8 <USB_EPStartXfer+0x6a6>
 8008fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	653b      	str	r3, [r7, #80]	; 0x50
 8008fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fc2:	4413      	add	r3, r2
 8008fc4:	653b      	str	r3, [r7, #80]	; 0x50
 8008fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	011a      	lsls	r2, r3, #4
 8008fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fe6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	891b      	ldrh	r3, [r3, #8]
 8008ff4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	6959      	ldr	r1, [r3, #20]
 8009004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009008:	b29b      	uxth	r3, r3
 800900a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800900e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009012:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009016:	6800      	ldr	r0, [r0, #0]
 8009018:	f001 f972 	bl	800a300 <USB_WritePMA>
            ep->xfer_buff += len;
 800901c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	695a      	ldr	r2, [r3, #20]
 8009028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800902c:	441a      	add	r2, r3
 800902e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800903a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800903e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	6a1a      	ldr	r2, [r3, #32]
 8009046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800904a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	429a      	cmp	r2, r3
 8009054:	d90f      	bls.n	8009076 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8009056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800905a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	6a1a      	ldr	r2, [r3, #32]
 8009062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009066:	1ad2      	subs	r2, r2, r3
 8009068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800906c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	621a      	str	r2, [r3, #32]
 8009074:	e00e      	b.n	8009094 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800907a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	6a1b      	ldr	r3, [r3, #32]
 8009082:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800908a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2200      	movs	r2, #0
 8009092:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009098:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	643b      	str	r3, [r7, #64]	; 0x40
 80090a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	785b      	ldrb	r3, [r3, #1]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d177      	bne.n	80091a0 <USB_EPStartXfer+0x85e>
 80090b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80090bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	461a      	mov	r2, r3
 80090ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d0:	4413      	add	r3, r2
 80090d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80090d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	011a      	lsls	r2, r3, #4
 80090e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e4:	4413      	add	r3, r2
 80090e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80090ea:	637b      	str	r3, [r7, #52]	; 0x34
 80090ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ee:	881b      	ldrh	r3, [r3, #0]
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090fa:	801a      	strh	r2, [r3, #0]
 80090fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009100:	2b3e      	cmp	r3, #62	; 0x3e
 8009102:	d921      	bls.n	8009148 <USB_EPStartXfer+0x806>
 8009104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009108:	095b      	lsrs	r3, r3, #5
 800910a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800910e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009112:	f003 031f 	and.w	r3, r3, #31
 8009116:	2b00      	cmp	r3, #0
 8009118:	d104      	bne.n	8009124 <USB_EPStartXfer+0x7e2>
 800911a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800911e:	3b01      	subs	r3, #1
 8009120:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009126:	881b      	ldrh	r3, [r3, #0]
 8009128:	b29a      	uxth	r2, r3
 800912a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800912e:	b29b      	uxth	r3, r3
 8009130:	029b      	lsls	r3, r3, #10
 8009132:	b29b      	uxth	r3, r3
 8009134:	4313      	orrs	r3, r2
 8009136:	b29b      	uxth	r3, r3
 8009138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800913c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009140:	b29a      	uxth	r2, r3
 8009142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009144:	801a      	strh	r2, [r3, #0]
 8009146:	e050      	b.n	80091ea <USB_EPStartXfer+0x8a8>
 8009148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10a      	bne.n	8009166 <USB_EPStartXfer+0x824>
 8009150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009152:	881b      	ldrh	r3, [r3, #0]
 8009154:	b29b      	uxth	r3, r3
 8009156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800915a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800915e:	b29a      	uxth	r2, r3
 8009160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009162:	801a      	strh	r2, [r3, #0]
 8009164:	e041      	b.n	80091ea <USB_EPStartXfer+0x8a8>
 8009166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800916a:	085b      	lsrs	r3, r3, #1
 800916c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009174:	f003 0301 	and.w	r3, r3, #1
 8009178:	2b00      	cmp	r3, #0
 800917a:	d004      	beq.n	8009186 <USB_EPStartXfer+0x844>
 800917c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009180:	3301      	adds	r3, #1
 8009182:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009188:	881b      	ldrh	r3, [r3, #0]
 800918a:	b29a      	uxth	r2, r3
 800918c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009190:	b29b      	uxth	r3, r3
 8009192:	029b      	lsls	r3, r3, #10
 8009194:	b29b      	uxth	r3, r3
 8009196:	4313      	orrs	r3, r2
 8009198:	b29a      	uxth	r2, r3
 800919a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800919c:	801a      	strh	r2, [r3, #0]
 800919e:	e024      	b.n	80091ea <USB_EPStartXfer+0x8a8>
 80091a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	785b      	ldrb	r3, [r3, #1]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d11c      	bne.n	80091ea <USB_EPStartXfer+0x8a8>
 80091b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091be:	b29b      	uxth	r3, r3
 80091c0:	461a      	mov	r2, r3
 80091c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091c4:	4413      	add	r3, r2
 80091c6:	643b      	str	r3, [r7, #64]	; 0x40
 80091c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	011a      	lsls	r2, r3, #4
 80091d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091d8:	4413      	add	r3, r2
 80091da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80091de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80091ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	895b      	ldrh	r3, [r3, #10]
 80091f6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80091fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6959      	ldr	r1, [r3, #20]
 8009206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800920a:	b29b      	uxth	r3, r3
 800920c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009210:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009214:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009218:	6800      	ldr	r0, [r0, #0]
 800921a:	f001 f871 	bl	800a300 <USB_WritePMA>
 800921e:	e227      	b.n	8009670 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	6a1b      	ldr	r3, [r3, #32]
 800922c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009234:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800923e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4413      	add	r3, r2
 800924a:	881b      	ldrh	r3, [r3, #0]
 800924c:	b29b      	uxth	r3, r3
 800924e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009256:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800925a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800925e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	441a      	add	r2, r3
 8009274:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009278:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800927c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009288:	b29b      	uxth	r3, r3
 800928a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800928c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009290:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800929c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	461a      	mov	r2, r3
 80092aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092ac:	4413      	add	r3, r2
 80092ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	011a      	lsls	r2, r3, #4
 80092be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092c0:	4413      	add	r3, r2
 80092c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80092c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80092c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092d0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80092d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	891b      	ldrh	r3, [r3, #8]
 80092de:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80092e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6959      	ldr	r1, [r3, #20]
 80092ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80092f8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80092fc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009300:	6800      	ldr	r0, [r0, #0]
 8009302:	f000 fffd 	bl	800a300 <USB_WritePMA>
 8009306:	e1b3      	b.n	8009670 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800930c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	6a1a      	ldr	r2, [r3, #32]
 8009314:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009318:	1ad2      	subs	r2, r2, r3
 800931a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800931e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800932a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	4413      	add	r3, r2
 8009340:	881b      	ldrh	r3, [r3, #0]
 8009342:	b29b      	uxth	r3, r3
 8009344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009348:	2b00      	cmp	r3, #0
 800934a:	f000 80c6 	beq.w	80094da <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800934e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009352:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	673b      	str	r3, [r7, #112]	; 0x70
 800935a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800935e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	785b      	ldrb	r3, [r3, #1]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d177      	bne.n	800945a <USB_EPStartXfer+0xb18>
 800936a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800936e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	66bb      	str	r3, [r7, #104]	; 0x68
 8009376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800937a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009384:	b29b      	uxth	r3, r3
 8009386:	461a      	mov	r2, r3
 8009388:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800938a:	4413      	add	r3, r2
 800938c:	66bb      	str	r3, [r7, #104]	; 0x68
 800938e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	011a      	lsls	r2, r3, #4
 800939c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800939e:	4413      	add	r3, r2
 80093a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80093a4:	667b      	str	r3, [r7, #100]	; 0x64
 80093a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093a8:	881b      	ldrh	r3, [r3, #0]
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093b0:	b29a      	uxth	r2, r3
 80093b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093b4:	801a      	strh	r2, [r3, #0]
 80093b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093ba:	2b3e      	cmp	r3, #62	; 0x3e
 80093bc:	d921      	bls.n	8009402 <USB_EPStartXfer+0xac0>
 80093be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093c2:	095b      	lsrs	r3, r3, #5
 80093c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80093c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093cc:	f003 031f 	and.w	r3, r3, #31
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d104      	bne.n	80093de <USB_EPStartXfer+0xa9c>
 80093d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80093d8:	3b01      	subs	r3, #1
 80093da:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80093de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093e0:	881b      	ldrh	r3, [r3, #0]
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	029b      	lsls	r3, r3, #10
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	4313      	orrs	r3, r2
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093fe:	801a      	strh	r2, [r3, #0]
 8009400:	e050      	b.n	80094a4 <USB_EPStartXfer+0xb62>
 8009402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009406:	2b00      	cmp	r3, #0
 8009408:	d10a      	bne.n	8009420 <USB_EPStartXfer+0xade>
 800940a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800940c:	881b      	ldrh	r3, [r3, #0]
 800940e:	b29b      	uxth	r3, r3
 8009410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009418:	b29a      	uxth	r2, r3
 800941a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800941c:	801a      	strh	r2, [r3, #0]
 800941e:	e041      	b.n	80094a4 <USB_EPStartXfer+0xb62>
 8009420:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009424:	085b      	lsrs	r3, r3, #1
 8009426:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800942a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800942e:	f003 0301 	and.w	r3, r3, #1
 8009432:	2b00      	cmp	r3, #0
 8009434:	d004      	beq.n	8009440 <USB_EPStartXfer+0xafe>
 8009436:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800943a:	3301      	adds	r3, #1
 800943c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009440:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009442:	881b      	ldrh	r3, [r3, #0]
 8009444:	b29a      	uxth	r2, r3
 8009446:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800944a:	b29b      	uxth	r3, r3
 800944c:	029b      	lsls	r3, r3, #10
 800944e:	b29b      	uxth	r3, r3
 8009450:	4313      	orrs	r3, r2
 8009452:	b29a      	uxth	r2, r3
 8009454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009456:	801a      	strh	r2, [r3, #0]
 8009458:	e024      	b.n	80094a4 <USB_EPStartXfer+0xb62>
 800945a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800945e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	785b      	ldrb	r3, [r3, #1]
 8009466:	2b01      	cmp	r3, #1
 8009468:	d11c      	bne.n	80094a4 <USB_EPStartXfer+0xb62>
 800946a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800946e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009478:	b29b      	uxth	r3, r3
 800947a:	461a      	mov	r2, r3
 800947c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800947e:	4413      	add	r3, r2
 8009480:	673b      	str	r3, [r7, #112]	; 0x70
 8009482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	011a      	lsls	r2, r3, #4
 8009490:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009492:	4413      	add	r3, r2
 8009494:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009498:	66fb      	str	r3, [r7, #108]	; 0x6c
 800949a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800949e:	b29a      	uxth	r2, r3
 80094a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094a2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80094a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	895b      	ldrh	r3, [r3, #10]
 80094b0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80094b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	6959      	ldr	r1, [r3, #20]
 80094c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80094ca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80094ce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80094d2:	6800      	ldr	r0, [r0, #0]
 80094d4:	f000 ff14 	bl	800a300 <USB_WritePMA>
 80094d8:	e0ca      	b.n	8009670 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80094da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	785b      	ldrb	r3, [r3, #1]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d177      	bne.n	80095da <USB_EPStartXfer+0xc98>
 80094ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80094f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009504:	b29b      	uxth	r3, r3
 8009506:	461a      	mov	r2, r3
 8009508:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800950a:	4413      	add	r3, r2
 800950c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800950e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	011a      	lsls	r2, r3, #4
 800951c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800951e:	4413      	add	r3, r2
 8009520:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009524:	67bb      	str	r3, [r7, #120]	; 0x78
 8009526:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009528:	881b      	ldrh	r3, [r3, #0]
 800952a:	b29b      	uxth	r3, r3
 800952c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009530:	b29a      	uxth	r2, r3
 8009532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009534:	801a      	strh	r2, [r3, #0]
 8009536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800953a:	2b3e      	cmp	r3, #62	; 0x3e
 800953c:	d921      	bls.n	8009582 <USB_EPStartXfer+0xc40>
 800953e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009542:	095b      	lsrs	r3, r3, #5
 8009544:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800954c:	f003 031f 	and.w	r3, r3, #31
 8009550:	2b00      	cmp	r3, #0
 8009552:	d104      	bne.n	800955e <USB_EPStartXfer+0xc1c>
 8009554:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009558:	3b01      	subs	r3, #1
 800955a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800955e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009560:	881b      	ldrh	r3, [r3, #0]
 8009562:	b29a      	uxth	r2, r3
 8009564:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009568:	b29b      	uxth	r3, r3
 800956a:	029b      	lsls	r3, r3, #10
 800956c:	b29b      	uxth	r3, r3
 800956e:	4313      	orrs	r3, r2
 8009570:	b29b      	uxth	r3, r3
 8009572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800957a:	b29a      	uxth	r2, r3
 800957c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800957e:	801a      	strh	r2, [r3, #0]
 8009580:	e05c      	b.n	800963c <USB_EPStartXfer+0xcfa>
 8009582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009586:	2b00      	cmp	r3, #0
 8009588:	d10a      	bne.n	80095a0 <USB_EPStartXfer+0xc5e>
 800958a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800958c:	881b      	ldrh	r3, [r3, #0]
 800958e:	b29b      	uxth	r3, r3
 8009590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009598:	b29a      	uxth	r2, r3
 800959a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800959c:	801a      	strh	r2, [r3, #0]
 800959e:	e04d      	b.n	800963c <USB_EPStartXfer+0xcfa>
 80095a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095a4:	085b      	lsrs	r3, r3, #1
 80095a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80095aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d004      	beq.n	80095c0 <USB_EPStartXfer+0xc7e>
 80095b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80095ba:	3301      	adds	r3, #1
 80095bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80095c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095c2:	881b      	ldrh	r3, [r3, #0]
 80095c4:	b29a      	uxth	r2, r3
 80095c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	029b      	lsls	r3, r3, #10
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	4313      	orrs	r3, r2
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095d6:	801a      	strh	r2, [r3, #0]
 80095d8:	e030      	b.n	800963c <USB_EPStartXfer+0xcfa>
 80095da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	785b      	ldrb	r3, [r3, #1]
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d128      	bne.n	800963c <USB_EPStartXfer+0xcfa>
 80095ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80095f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009606:	b29b      	uxth	r3, r3
 8009608:	461a      	mov	r2, r3
 800960a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800960e:	4413      	add	r3, r2
 8009610:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009618:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	011a      	lsls	r2, r3, #4
 8009622:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009626:	4413      	add	r3, r2
 8009628:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800962c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009634:	b29a      	uxth	r2, r3
 8009636:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800963a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800963c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	891b      	ldrh	r3, [r3, #8]
 8009648:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800964c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	6959      	ldr	r1, [r3, #20]
 8009658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800965c:	b29b      	uxth	r3, r3
 800965e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009662:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009666:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800966a:	6800      	ldr	r0, [r0, #0]
 800966c:	f000 fe48 	bl	800a300 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009674:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800967e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	4413      	add	r3, r2
 800968a:	881b      	ldrh	r3, [r3, #0]
 800968c:	b29b      	uxth	r3, r3
 800968e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009692:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009696:	817b      	strh	r3, [r7, #10]
 8009698:	897b      	ldrh	r3, [r7, #10]
 800969a:	f083 0310 	eor.w	r3, r3, #16
 800969e:	817b      	strh	r3, [r7, #10]
 80096a0:	897b      	ldrh	r3, [r7, #10]
 80096a2:	f083 0320 	eor.w	r3, r3, #32
 80096a6:	817b      	strh	r3, [r7, #10]
 80096a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	441a      	add	r2, r3
 80096c2:	897b      	ldrh	r3, [r7, #10]
 80096c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	8013      	strh	r3, [r2, #0]
 80096d8:	f000 bcde 	b.w	800a098 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80096dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	7b1b      	ldrb	r3, [r3, #12]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f040 80bb 	bne.w	8009864 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80096ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	699a      	ldr	r2, [r3, #24]
 80096fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	429a      	cmp	r2, r3
 8009708:	d917      	bls.n	800973a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800970a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800970e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800971a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800971e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	699a      	ldr	r2, [r3, #24]
 8009726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800972a:	1ad2      	subs	r2, r2, r3
 800972c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	619a      	str	r2, [r3, #24]
 8009738:	e00e      	b.n	8009758 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800973a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800973e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	699b      	ldr	r3, [r3, #24]
 8009746:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800974a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800974e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2200      	movs	r2, #0
 8009756:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800975c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800976a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009774:	b29b      	uxth	r3, r3
 8009776:	461a      	mov	r2, r3
 8009778:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800977c:	4413      	add	r3, r2
 800977e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009786:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	011a      	lsls	r2, r3, #4
 8009790:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009794:	4413      	add	r3, r2
 8009796:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800979a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800979e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097a2:	881b      	ldrh	r3, [r3, #0]
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097b0:	801a      	strh	r2, [r3, #0]
 80097b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097b6:	2b3e      	cmp	r3, #62	; 0x3e
 80097b8:	d924      	bls.n	8009804 <USB_EPStartXfer+0xec2>
 80097ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097be:	095b      	lsrs	r3, r3, #5
 80097c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80097c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097c8:	f003 031f 	and.w	r3, r3, #31
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d104      	bne.n	80097da <USB_EPStartXfer+0xe98>
 80097d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80097d4:	3b01      	subs	r3, #1
 80097d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80097da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097de:	881b      	ldrh	r3, [r3, #0]
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	029b      	lsls	r3, r3, #10
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	4313      	orrs	r3, r2
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097fe:	801a      	strh	r2, [r3, #0]
 8009800:	f000 bc10 	b.w	800a024 <USB_EPStartXfer+0x16e2>
 8009804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009808:	2b00      	cmp	r3, #0
 800980a:	d10c      	bne.n	8009826 <USB_EPStartXfer+0xee4>
 800980c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009810:	881b      	ldrh	r3, [r3, #0]
 8009812:	b29b      	uxth	r3, r3
 8009814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800981c:	b29a      	uxth	r2, r3
 800981e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009822:	801a      	strh	r2, [r3, #0]
 8009824:	e3fe      	b.n	800a024 <USB_EPStartXfer+0x16e2>
 8009826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800982a:	085b      	lsrs	r3, r3, #1
 800982c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009834:	f003 0301 	and.w	r3, r3, #1
 8009838:	2b00      	cmp	r3, #0
 800983a:	d004      	beq.n	8009846 <USB_EPStartXfer+0xf04>
 800983c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009840:	3301      	adds	r3, #1
 8009842:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009846:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800984a:	881b      	ldrh	r3, [r3, #0]
 800984c:	b29a      	uxth	r2, r3
 800984e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009852:	b29b      	uxth	r3, r3
 8009854:	029b      	lsls	r3, r3, #10
 8009856:	b29b      	uxth	r3, r3
 8009858:	4313      	orrs	r3, r2
 800985a:	b29a      	uxth	r2, r3
 800985c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009860:	801a      	strh	r2, [r3, #0]
 8009862:	e3df      	b.n	800a024 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	78db      	ldrb	r3, [r3, #3]
 8009870:	2b02      	cmp	r3, #2
 8009872:	f040 8218 	bne.w	8009ca6 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800987a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	785b      	ldrb	r3, [r3, #1]
 8009882:	2b00      	cmp	r3, #0
 8009884:	f040 809d 	bne.w	80099c2 <USB_EPStartXfer+0x1080>
 8009888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800988c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800989a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	461a      	mov	r2, r3
 80098a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098ac:	4413      	add	r3, r2
 80098ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80098b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	011a      	lsls	r2, r3, #4
 80098c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098c4:	4413      	add	r3, r2
 80098c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80098ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80098ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80098d2:	881b      	ldrh	r3, [r3, #0]
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098da:	b29a      	uxth	r2, r3
 80098dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80098e0:	801a      	strh	r2, [r3, #0]
 80098e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	2b3e      	cmp	r3, #62	; 0x3e
 80098f0:	d92b      	bls.n	800994a <USB_EPStartXfer+0x1008>
 80098f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	095b      	lsrs	r3, r3, #5
 8009900:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	f003 031f 	and.w	r3, r3, #31
 8009914:	2b00      	cmp	r3, #0
 8009916:	d104      	bne.n	8009922 <USB_EPStartXfer+0xfe0>
 8009918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800991c:	3b01      	subs	r3, #1
 800991e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009922:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009926:	881b      	ldrh	r3, [r3, #0]
 8009928:	b29a      	uxth	r2, r3
 800992a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800992e:	b29b      	uxth	r3, r3
 8009930:	029b      	lsls	r3, r3, #10
 8009932:	b29b      	uxth	r3, r3
 8009934:	4313      	orrs	r3, r2
 8009936:	b29b      	uxth	r3, r3
 8009938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800993c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009940:	b29a      	uxth	r2, r3
 8009942:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009946:	801a      	strh	r2, [r3, #0]
 8009948:	e070      	b.n	8009a2c <USB_EPStartXfer+0x10ea>
 800994a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800994e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	691b      	ldr	r3, [r3, #16]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10c      	bne.n	8009974 <USB_EPStartXfer+0x1032>
 800995a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800995e:	881b      	ldrh	r3, [r3, #0]
 8009960:	b29b      	uxth	r3, r3
 8009962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800996a:	b29a      	uxth	r2, r3
 800996c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009970:	801a      	strh	r2, [r3, #0]
 8009972:	e05b      	b.n	8009a2c <USB_EPStartXfer+0x10ea>
 8009974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	691b      	ldr	r3, [r3, #16]
 8009980:	085b      	lsrs	r3, r3, #1
 8009982:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800998a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	f003 0301 	and.w	r3, r3, #1
 8009996:	2b00      	cmp	r3, #0
 8009998:	d004      	beq.n	80099a4 <USB_EPStartXfer+0x1062>
 800999a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800999e:	3301      	adds	r3, #1
 80099a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80099a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099a8:	881b      	ldrh	r3, [r3, #0]
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	029b      	lsls	r3, r3, #10
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	4313      	orrs	r3, r2
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099be:	801a      	strh	r2, [r3, #0]
 80099c0:	e034      	b.n	8009a2c <USB_EPStartXfer+0x10ea>
 80099c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	785b      	ldrb	r3, [r3, #1]
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d12c      	bne.n	8009a2c <USB_EPStartXfer+0x10ea>
 80099d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80099e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	461a      	mov	r2, r3
 80099f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80099f6:	4413      	add	r3, r2
 80099f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80099fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	011a      	lsls	r2, r3, #4
 8009a0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009a0e:	4413      	add	r3, r2
 8009a10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009a14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	b29a      	uxth	r2, r3
 8009a26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009a2a:	801a      	strh	r2, [r3, #0]
 8009a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009a3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	785b      	ldrb	r3, [r3, #1]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	f040 809d 	bne.w	8009b86 <USB_EPStartXfer+0x1244>
 8009a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a70:	4413      	add	r3, r2
 8009a72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	011a      	lsls	r2, r3, #4
 8009a84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a88:	4413      	add	r3, r2
 8009a8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009a8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009a92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a96:	881b      	ldrh	r3, [r3, #0]
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a9e:	b29a      	uxth	r2, r3
 8009aa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009aa4:	801a      	strh	r2, [r3, #0]
 8009aa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	2b3e      	cmp	r3, #62	; 0x3e
 8009ab4:	d92b      	bls.n	8009b0e <USB_EPStartXfer+0x11cc>
 8009ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	691b      	ldr	r3, [r3, #16]
 8009ac2:	095b      	lsrs	r3, r3, #5
 8009ac4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009acc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	f003 031f 	and.w	r3, r3, #31
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d104      	bne.n	8009ae6 <USB_EPStartXfer+0x11a4>
 8009adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009ae6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009aea:	881b      	ldrh	r3, [r3, #0]
 8009aec:	b29a      	uxth	r2, r3
 8009aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	029b      	lsls	r3, r3, #10
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	4313      	orrs	r3, r2
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b0a:	801a      	strh	r2, [r3, #0]
 8009b0c:	e069      	b.n	8009be2 <USB_EPStartXfer+0x12a0>
 8009b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	691b      	ldr	r3, [r3, #16]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d10c      	bne.n	8009b38 <USB_EPStartXfer+0x11f6>
 8009b1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b22:	881b      	ldrh	r3, [r3, #0]
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b2e:	b29a      	uxth	r2, r3
 8009b30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b34:	801a      	strh	r2, [r3, #0]
 8009b36:	e054      	b.n	8009be2 <USB_EPStartXfer+0x12a0>
 8009b38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	691b      	ldr	r3, [r3, #16]
 8009b44:	085b      	lsrs	r3, r3, #1
 8009b46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	f003 0301 	and.w	r3, r3, #1
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d004      	beq.n	8009b68 <USB_EPStartXfer+0x1226>
 8009b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b62:	3301      	adds	r3, #1
 8009b64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b6c:	881b      	ldrh	r3, [r3, #0]
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	029b      	lsls	r3, r3, #10
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	b29a      	uxth	r2, r3
 8009b7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b82:	801a      	strh	r2, [r3, #0]
 8009b84:	e02d      	b.n	8009be2 <USB_EPStartXfer+0x12a0>
 8009b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	785b      	ldrb	r3, [r3, #1]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d125      	bne.n	8009be2 <USB_EPStartXfer+0x12a0>
 8009b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009bac:	4413      	add	r3, r2
 8009bae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	011a      	lsls	r2, r3, #4
 8009bc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009bc4:	4413      	add	r3, r2
 8009bc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009bca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	b29a      	uxth	r2, r3
 8009bdc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009be0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009be6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	69db      	ldr	r3, [r3, #28]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	f000 8218 	beq.w	800a024 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	4413      	add	r3, r2
 8009c0e:	881b      	ldrh	r3, [r3, #0]
 8009c10:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009c14:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d005      	beq.n	8009c2c <USB_EPStartXfer+0x12ea>
 8009c20:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d10d      	bne.n	8009c48 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009c2c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f040 81f5 	bne.w	800a024 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009c3a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	f040 81ee 	bne.w	800a024 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	4413      	add	r3, r2
 8009c62:	881b      	ldrh	r3, [r3, #0]
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c6e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	441a      	add	r2, r3
 8009c8c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009c90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	8013      	strh	r3, [r2, #0]
 8009ca4:	e1be      	b.n	800a024 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	78db      	ldrb	r3, [r3, #3]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	f040 81b4 	bne.w	800a020 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009cb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	699a      	ldr	r2, [r3, #24]
 8009cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	691b      	ldr	r3, [r3, #16]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d917      	bls.n	8009d04 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	699a      	ldr	r2, [r3, #24]
 8009cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cf4:	1ad2      	subs	r2, r2, r3
 8009cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	619a      	str	r2, [r3, #24]
 8009d02:	e00e      	b.n	8009d22 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	699b      	ldr	r3, [r3, #24]
 8009d10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	785b      	ldrb	r3, [r3, #1]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f040 8085 	bne.w	8009e3e <USB_EPStartXfer+0x14fc>
 8009d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	461a      	mov	r2, r3
 8009d54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009d58:	4413      	add	r3, r2
 8009d5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	011a      	lsls	r2, r3, #4
 8009d6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009d70:	4413      	add	r3, r2
 8009d72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009d76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d7e:	881b      	ldrh	r3, [r3, #0]
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d86:	b29a      	uxth	r2, r3
 8009d88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d8c:	801a      	strh	r2, [r3, #0]
 8009d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d92:	2b3e      	cmp	r3, #62	; 0x3e
 8009d94:	d923      	bls.n	8009dde <USB_EPStartXfer+0x149c>
 8009d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d9a:	095b      	lsrs	r3, r3, #5
 8009d9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009da4:	f003 031f 	and.w	r3, r3, #31
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d104      	bne.n	8009db6 <USB_EPStartXfer+0x1474>
 8009dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009db0:	3b01      	subs	r3, #1
 8009db2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009db6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009dba:	881b      	ldrh	r3, [r3, #0]
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	029b      	lsls	r3, r3, #10
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009dda:	801a      	strh	r2, [r3, #0]
 8009ddc:	e060      	b.n	8009ea0 <USB_EPStartXfer+0x155e>
 8009dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d10c      	bne.n	8009e00 <USB_EPStartXfer+0x14be>
 8009de6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009dea:	881b      	ldrh	r3, [r3, #0]
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009df2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009df6:	b29a      	uxth	r2, r3
 8009df8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009dfc:	801a      	strh	r2, [r3, #0]
 8009dfe:	e04f      	b.n	8009ea0 <USB_EPStartXfer+0x155e>
 8009e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e04:	085b      	lsrs	r3, r3, #1
 8009e06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e0e:	f003 0301 	and.w	r3, r3, #1
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d004      	beq.n	8009e20 <USB_EPStartXfer+0x14de>
 8009e16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009e20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e24:	881b      	ldrh	r3, [r3, #0]
 8009e26:	b29a      	uxth	r2, r3
 8009e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	029b      	lsls	r3, r3, #10
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	4313      	orrs	r3, r2
 8009e34:	b29a      	uxth	r2, r3
 8009e36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e3a:	801a      	strh	r2, [r3, #0]
 8009e3c:	e030      	b.n	8009ea0 <USB_EPStartXfer+0x155e>
 8009e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	785b      	ldrb	r3, [r3, #1]
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d128      	bne.n	8009ea0 <USB_EPStartXfer+0x155e>
 8009e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e72:	4413      	add	r3, r2
 8009e74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	011a      	lsls	r2, r3, #4
 8009e86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e8a:	4413      	add	r3, r2
 8009e8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009e90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e98:	b29a      	uxth	r2, r3
 8009e9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009e9e:	801a      	strh	r2, [r3, #0]
 8009ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ea4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	785b      	ldrb	r3, [r3, #1]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	f040 8085 	bne.w	8009fca <USB_EPStartXfer+0x1688>
 8009ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ec4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ed2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	461a      	mov	r2, r3
 8009ee0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009ee4:	4413      	add	r3, r2
 8009ee6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	011a      	lsls	r2, r3, #4
 8009ef8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009efc:	4413      	add	r3, r2
 8009efe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009f02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f0a:	881b      	ldrh	r3, [r3, #0]
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f12:	b29a      	uxth	r2, r3
 8009f14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f18:	801a      	strh	r2, [r3, #0]
 8009f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f1e:	2b3e      	cmp	r3, #62	; 0x3e
 8009f20:	d923      	bls.n	8009f6a <USB_EPStartXfer+0x1628>
 8009f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f26:	095b      	lsrs	r3, r3, #5
 8009f28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f30:	f003 031f 	and.w	r3, r3, #31
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d104      	bne.n	8009f42 <USB_EPStartXfer+0x1600>
 8009f38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f3c:	3b01      	subs	r3, #1
 8009f3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009f42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f46:	881b      	ldrh	r3, [r3, #0]
 8009f48:	b29a      	uxth	r2, r3
 8009f4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	029b      	lsls	r3, r3, #10
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	4313      	orrs	r3, r2
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f60:	b29a      	uxth	r2, r3
 8009f62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f66:	801a      	strh	r2, [r3, #0]
 8009f68:	e05c      	b.n	800a024 <USB_EPStartXfer+0x16e2>
 8009f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10c      	bne.n	8009f8c <USB_EPStartXfer+0x164a>
 8009f72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f76:	881b      	ldrh	r3, [r3, #0]
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f82:	b29a      	uxth	r2, r3
 8009f84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f88:	801a      	strh	r2, [r3, #0]
 8009f8a:	e04b      	b.n	800a024 <USB_EPStartXfer+0x16e2>
 8009f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f90:	085b      	lsrs	r3, r3, #1
 8009f92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f9a:	f003 0301 	and.w	r3, r3, #1
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d004      	beq.n	8009fac <USB_EPStartXfer+0x166a>
 8009fa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009fac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009fb0:	881b      	ldrh	r3, [r3, #0]
 8009fb2:	b29a      	uxth	r2, r3
 8009fb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	029b      	lsls	r3, r3, #10
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	b29a      	uxth	r2, r3
 8009fc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009fc6:	801a      	strh	r2, [r3, #0]
 8009fc8:	e02c      	b.n	800a024 <USB_EPStartXfer+0x16e2>
 8009fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	785b      	ldrb	r3, [r3, #1]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d124      	bne.n	800a024 <USB_EPStartXfer+0x16e2>
 8009fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	461a      	mov	r2, r3
 8009fec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009ff0:	4413      	add	r3, r2
 8009ff2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ffa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	011a      	lsls	r2, r3, #4
 800a004:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a008:	4413      	add	r3, r2
 800a00a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a00e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a016:	b29a      	uxth	r2, r3
 800a018:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a01c:	801a      	strh	r2, [r3, #0]
 800a01e:	e001      	b.n	800a024 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	e03a      	b.n	800a09a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a028:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	4413      	add	r3, r2
 800a03e:	881b      	ldrh	r3, [r3, #0]
 800a040:	b29b      	uxth	r3, r3
 800a042:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a04a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a04e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a052:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a056:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a05a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a05e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a062:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a06a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	441a      	add	r2, r3
 800a080:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a08c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a094:	b29b      	uxth	r3, r3
 800a096:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b085      	sub	sp, #20
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	785b      	ldrb	r3, [r3, #1]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d020      	beq.n	800a0f8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	4413      	add	r3, r2
 800a0c0:	881b      	ldrh	r3, [r3, #0]
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0cc:	81bb      	strh	r3, [r7, #12]
 800a0ce:	89bb      	ldrh	r3, [r7, #12]
 800a0d0:	f083 0310 	eor.w	r3, r3, #16
 800a0d4:	81bb      	strh	r3, [r7, #12]
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	441a      	add	r2, r3
 800a0e0:	89bb      	ldrh	r3, [r7, #12]
 800a0e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	8013      	strh	r3, [r2, #0]
 800a0f6:	e01f      	b.n	800a138 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	4413      	add	r3, r2
 800a102:	881b      	ldrh	r3, [r3, #0]
 800a104:	b29b      	uxth	r3, r3
 800a106:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a10a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a10e:	81fb      	strh	r3, [r7, #14]
 800a110:	89fb      	ldrh	r3, [r7, #14]
 800a112:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a116:	81fb      	strh	r3, [r7, #14]
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	441a      	add	r2, r3
 800a122:	89fb      	ldrh	r3, [r7, #14]
 800a124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a12c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a134:	b29b      	uxth	r3, r3
 800a136:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3714      	adds	r7, #20
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr

0800a146 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a146:	b480      	push	{r7}
 800a148:	b087      	sub	sp, #28
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
 800a14e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	7b1b      	ldrb	r3, [r3, #12]
 800a154:	2b00      	cmp	r3, #0
 800a156:	f040 809d 	bne.w	800a294 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	785b      	ldrb	r3, [r3, #1]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d04c      	beq.n	800a1fc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	4413      	add	r3, r2
 800a16c:	881b      	ldrh	r3, [r3, #0]
 800a16e:	823b      	strh	r3, [r7, #16]
 800a170:	8a3b      	ldrh	r3, [r7, #16]
 800a172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a176:	2b00      	cmp	r3, #0
 800a178:	d01b      	beq.n	800a1b2 <USB_EPClearStall+0x6c>
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	4413      	add	r3, r2
 800a184:	881b      	ldrh	r3, [r3, #0]
 800a186:	b29b      	uxth	r3, r3
 800a188:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a18c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a190:	81fb      	strh	r3, [r7, #14]
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	441a      	add	r2, r3
 800a19c:	89fb      	ldrh	r3, [r7, #14]
 800a19e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	78db      	ldrb	r3, [r3, #3]
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d06c      	beq.n	800a294 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	4413      	add	r3, r2
 800a1c4:	881b      	ldrh	r3, [r3, #0]
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1d0:	81bb      	strh	r3, [r7, #12]
 800a1d2:	89bb      	ldrh	r3, [r7, #12]
 800a1d4:	f083 0320 	eor.w	r3, r3, #32
 800a1d8:	81bb      	strh	r3, [r7, #12]
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	441a      	add	r2, r3
 800a1e4:	89bb      	ldrh	r3, [r7, #12]
 800a1e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	8013      	strh	r3, [r2, #0]
 800a1fa:	e04b      	b.n	800a294 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	4413      	add	r3, r2
 800a206:	881b      	ldrh	r3, [r3, #0]
 800a208:	82fb      	strh	r3, [r7, #22]
 800a20a:	8afb      	ldrh	r3, [r7, #22]
 800a20c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a210:	2b00      	cmp	r3, #0
 800a212:	d01b      	beq.n	800a24c <USB_EPClearStall+0x106>
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	4413      	add	r3, r2
 800a21e:	881b      	ldrh	r3, [r3, #0]
 800a220:	b29b      	uxth	r3, r3
 800a222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a22a:	82bb      	strh	r3, [r7, #20]
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	441a      	add	r2, r3
 800a236:	8abb      	ldrh	r3, [r7, #20]
 800a238:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a23c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a240:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a248:	b29b      	uxth	r3, r3
 800a24a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	4413      	add	r3, r2
 800a256:	881b      	ldrh	r3, [r3, #0]
 800a258:	b29b      	uxth	r3, r3
 800a25a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a25e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a262:	827b      	strh	r3, [r7, #18]
 800a264:	8a7b      	ldrh	r3, [r7, #18]
 800a266:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a26a:	827b      	strh	r3, [r7, #18]
 800a26c:	8a7b      	ldrh	r3, [r7, #18]
 800a26e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a272:	827b      	strh	r3, [r7, #18]
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	441a      	add	r2, r3
 800a27e:	8a7b      	ldrh	r3, [r7, #18]
 800a280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a28c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a290:	b29b      	uxth	r3, r3
 800a292:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	371c      	adds	r7, #28
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr

0800a2a2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a2a2:	b480      	push	{r7}
 800a2a4:	b083      	sub	sp, #12
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a2ae:	78fb      	ldrb	r3, [r7, #3]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d103      	bne.n	800a2bc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2280      	movs	r2, #128	; 0x80
 800a2b8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a2bc:	2300      	movs	r3, #0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	370c      	adds	r7, #12
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr

0800a2ca <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a2ca:	b480      	push	{r7}
 800a2cc:	b083      	sub	sp, #12
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b085      	sub	sp, #20
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3714      	adds	r7, #20
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a300:	b480      	push	{r7}
 800a302:	b08b      	sub	sp, #44	; 0x2c
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	4611      	mov	r1, r2
 800a30c:	461a      	mov	r2, r3
 800a30e:	460b      	mov	r3, r1
 800a310:	80fb      	strh	r3, [r7, #6]
 800a312:	4613      	mov	r3, r2
 800a314:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a316:	88bb      	ldrh	r3, [r7, #4]
 800a318:	3301      	adds	r3, #1
 800a31a:	085b      	lsrs	r3, r3, #1
 800a31c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a326:	88fb      	ldrh	r3, [r7, #6]
 800a328:	005a      	lsls	r2, r3, #1
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	4413      	add	r3, r2
 800a32e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a332:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	627b      	str	r3, [r7, #36]	; 0x24
 800a338:	e01e      	b.n	800a378 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	3301      	adds	r3, #1
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	021b      	lsls	r3, r3, #8
 800a348:	b21a      	sxth	r2, r3
 800a34a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a34e:	4313      	orrs	r3, r2
 800a350:	b21b      	sxth	r3, r3
 800a352:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a354:	6a3b      	ldr	r3, [r7, #32]
 800a356:	8a7a      	ldrh	r2, [r7, #18]
 800a358:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a35a:	6a3b      	ldr	r3, [r7, #32]
 800a35c:	3302      	adds	r3, #2
 800a35e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a360:	6a3b      	ldr	r3, [r7, #32]
 800a362:	3302      	adds	r3, #2
 800a364:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	3301      	adds	r3, #1
 800a36a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	3301      	adds	r3, #1
 800a370:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a374:	3b01      	subs	r3, #1
 800a376:	627b      	str	r3, [r7, #36]	; 0x24
 800a378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d1dd      	bne.n	800a33a <USB_WritePMA+0x3a>
  }
}
 800a37e:	bf00      	nop
 800a380:	bf00      	nop
 800a382:	372c      	adds	r7, #44	; 0x2c
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b08b      	sub	sp, #44	; 0x2c
 800a390:	af00      	add	r7, sp, #0
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	4611      	mov	r1, r2
 800a398:	461a      	mov	r2, r3
 800a39a:	460b      	mov	r3, r1
 800a39c:	80fb      	strh	r3, [r7, #6]
 800a39e:	4613      	mov	r3, r2
 800a3a0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a3a2:	88bb      	ldrh	r3, [r7, #4]
 800a3a4:	085b      	lsrs	r3, r3, #1
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a3b2:	88fb      	ldrh	r3, [r7, #6]
 800a3b4:	005a      	lsls	r2, r3, #1
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	4413      	add	r3, r2
 800a3ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3be:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	627b      	str	r3, [r7, #36]	; 0x24
 800a3c4:	e01b      	b.n	800a3fe <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a3c6:	6a3b      	ldr	r3, [r7, #32]
 800a3c8:	881b      	ldrh	r3, [r3, #0]
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a3ce:	6a3b      	ldr	r3, [r7, #32]
 800a3d0:	3302      	adds	r3, #2
 800a3d2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	b2da      	uxtb	r2, r3
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a3dc:	69fb      	ldr	r3, [r7, #28]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	0a1b      	lsrs	r3, r3, #8
 800a3e6:	b2da      	uxtb	r2, r3
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a3ec:	69fb      	ldr	r3, [r7, #28]
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a3f2:	6a3b      	ldr	r3, [r7, #32]
 800a3f4:	3302      	adds	r3, #2
 800a3f6:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800a3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fa:	3b01      	subs	r3, #1
 800a3fc:	627b      	str	r3, [r7, #36]	; 0x24
 800a3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a400:	2b00      	cmp	r3, #0
 800a402:	d1e0      	bne.n	800a3c6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a404:	88bb      	ldrh	r3, [r7, #4]
 800a406:	f003 0301 	and.w	r3, r3, #1
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d007      	beq.n	800a420 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800a410:	6a3b      	ldr	r3, [r7, #32]
 800a412:	881b      	ldrh	r3, [r3, #0]
 800a414:	b29b      	uxth	r3, r3
 800a416:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	b2da      	uxtb	r2, r3
 800a41c:	69fb      	ldr	r3, [r7, #28]
 800a41e:	701a      	strb	r2, [r3, #0]
  }
}
 800a420:	bf00      	nop
 800a422:	372c      	adds	r7, #44	; 0x2c
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	460b      	mov	r3, r1
 800a436:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800a438:	2304      	movs	r3, #4
 800a43a:	2203      	movs	r2, #3
 800a43c:	2181      	movs	r1, #129	; 0x81
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f001 fc91 	bl	800bd66 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2201      	movs	r2, #1
 800a448:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800a44a:	2010      	movs	r0, #16
 800a44c:	f001 fda0 	bl	800bf90 <USBD_static_malloc>
 800a450:	4602      	mov	r2, r0
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d101      	bne.n	800a466 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 800a462:	2302      	movs	r3, #2
 800a464:	e005      	b.n	800a472 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a46c:	2200      	movs	r2, #0
 800a46e:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3708      	adds	r7, #8
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b082      	sub	sp, #8
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	460b      	mov	r3, r1
 800a484:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800a486:	2181      	movs	r1, #129	; 0x81
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f001 fc92 	bl	800bdb2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d009      	beq.n	800a4b2 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f001 fd81 	bl	800bfac <USBD_static_free>
    pdev->pClassData = NULL;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800a4b2:	2300      	movs	r3, #0
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3708      	adds	r7, #8
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b088      	sub	sp, #32
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4cc:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d045      	beq.n	800a576 <USBD_HID_Setup+0xba>
 800a4ea:	2b20      	cmp	r3, #32
 800a4ec:	f040 80d3 	bne.w	800a696 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	785b      	ldrb	r3, [r3, #1]
 800a4f4:	3b02      	subs	r3, #2
 800a4f6:	2b09      	cmp	r3, #9
 800a4f8:	d835      	bhi.n	800a566 <USBD_HID_Setup+0xaa>
 800a4fa:	a201      	add	r2, pc, #4	; (adr r2, 800a500 <USBD_HID_Setup+0x44>)
 800a4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a500:	0800a557 	.word	0x0800a557
 800a504:	0800a537 	.word	0x0800a537
 800a508:	0800a567 	.word	0x0800a567
 800a50c:	0800a567 	.word	0x0800a567
 800a510:	0800a567 	.word	0x0800a567
 800a514:	0800a567 	.word	0x0800a567
 800a518:	0800a567 	.word	0x0800a567
 800a51c:	0800a567 	.word	0x0800a567
 800a520:	0800a545 	.word	0x0800a545
 800a524:	0800a529 	.word	0x0800a529
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	885b      	ldrh	r3, [r3, #2]
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	461a      	mov	r2, r3
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	601a      	str	r2, [r3, #0]
          break;
 800a534:	e01e      	b.n	800a574 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	2201      	movs	r2, #1
 800a53a:	4619      	mov	r1, r3
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f001 f92a 	bl	800b796 <USBD_CtlSendData>
          break;
 800a542:	e017      	b.n	800a574 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	885b      	ldrh	r3, [r3, #2]
 800a548:	0a1b      	lsrs	r3, r3, #8
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	461a      	mov	r2, r3
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	605a      	str	r2, [r3, #4]
          break;
 800a554:	e00e      	b.n	800a574 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	3304      	adds	r3, #4
 800a55a:	2201      	movs	r2, #1
 800a55c:	4619      	mov	r1, r3
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f001 f919 	bl	800b796 <USBD_CtlSendData>
          break;
 800a564:	e006      	b.n	800a574 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 800a566:	6839      	ldr	r1, [r7, #0]
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f001 f8a9 	bl	800b6c0 <USBD_CtlError>
          ret = USBD_FAIL;
 800a56e:	2302      	movs	r3, #2
 800a570:	75fb      	strb	r3, [r7, #23]
          break;
 800a572:	bf00      	nop
      }
      break;
 800a574:	e096      	b.n	800a6a4 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	785b      	ldrb	r3, [r3, #1]
 800a57a:	2b0b      	cmp	r3, #11
 800a57c:	f200 8083 	bhi.w	800a686 <USBD_HID_Setup+0x1ca>
 800a580:	a201      	add	r2, pc, #4	; (adr r2, 800a588 <USBD_HID_Setup+0xcc>)
 800a582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a586:	bf00      	nop
 800a588:	0800a5b9 	.word	0x0800a5b9
 800a58c:	0800a687 	.word	0x0800a687
 800a590:	0800a687 	.word	0x0800a687
 800a594:	0800a687 	.word	0x0800a687
 800a598:	0800a687 	.word	0x0800a687
 800a59c:	0800a687 	.word	0x0800a687
 800a5a0:	0800a5e1 	.word	0x0800a5e1
 800a5a4:	0800a687 	.word	0x0800a687
 800a5a8:	0800a687 	.word	0x0800a687
 800a5ac:	0800a687 	.word	0x0800a687
 800a5b0:	0800a639 	.word	0x0800a639
 800a5b4:	0800a661 	.word	0x0800a661
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5be:	2b03      	cmp	r3, #3
 800a5c0:	d107      	bne.n	800a5d2 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a5c2:	f107 030e 	add.w	r3, r7, #14
 800a5c6:	2202      	movs	r2, #2
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f001 f8e3 	bl	800b796 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a5d0:	e060      	b.n	800a694 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800a5d2:	6839      	ldr	r1, [r7, #0]
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f001 f873 	bl	800b6c0 <USBD_CtlError>
            ret = USBD_FAIL;
 800a5da:	2302      	movs	r3, #2
 800a5dc:	75fb      	strb	r3, [r7, #23]
          break;
 800a5de:	e059      	b.n	800a694 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	885b      	ldrh	r3, [r3, #2]
 800a5e4:	0a1b      	lsrs	r3, r3, #8
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	2b22      	cmp	r3, #34	; 0x22
 800a5ea:	d108      	bne.n	800a5fe <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	88db      	ldrh	r3, [r3, #6]
 800a5f0:	2b4a      	cmp	r3, #74	; 0x4a
 800a5f2:	bf28      	it	cs
 800a5f4:	234a      	movcs	r3, #74	; 0x4a
 800a5f6:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 800a5f8:	4b2d      	ldr	r3, [pc, #180]	; (800a6b0 <USBD_HID_Setup+0x1f4>)
 800a5fa:	61bb      	str	r3, [r7, #24]
 800a5fc:	e015      	b.n	800a62a <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	885b      	ldrh	r3, [r3, #2]
 800a602:	0a1b      	lsrs	r3, r3, #8
 800a604:	b29b      	uxth	r3, r3
 800a606:	2b21      	cmp	r3, #33	; 0x21
 800a608:	d108      	bne.n	800a61c <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 800a60a:	4b2a      	ldr	r3, [pc, #168]	; (800a6b4 <USBD_HID_Setup+0x1f8>)
 800a60c:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	88db      	ldrh	r3, [r3, #6]
 800a612:	2b09      	cmp	r3, #9
 800a614:	bf28      	it	cs
 800a616:	2309      	movcs	r3, #9
 800a618:	83fb      	strh	r3, [r7, #30]
 800a61a:	e006      	b.n	800a62a <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800a61c:	6839      	ldr	r1, [r7, #0]
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f001 f84e 	bl	800b6c0 <USBD_CtlError>
            ret = USBD_FAIL;
 800a624:	2302      	movs	r3, #2
 800a626:	75fb      	strb	r3, [r7, #23]
            break;
 800a628:	e034      	b.n	800a694 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800a62a:	8bfb      	ldrh	r3, [r7, #30]
 800a62c:	461a      	mov	r2, r3
 800a62e:	69b9      	ldr	r1, [r7, #24]
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f001 f8b0 	bl	800b796 <USBD_CtlSendData>
          break;
 800a636:	e02d      	b.n	800a694 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a63e:	2b03      	cmp	r3, #3
 800a640:	d107      	bne.n	800a652 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	3308      	adds	r3, #8
 800a646:	2201      	movs	r2, #1
 800a648:	4619      	mov	r1, r3
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f001 f8a3 	bl	800b796 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a650:	e020      	b.n	800a694 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800a652:	6839      	ldr	r1, [r7, #0]
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f001 f833 	bl	800b6c0 <USBD_CtlError>
            ret = USBD_FAIL;
 800a65a:	2302      	movs	r3, #2
 800a65c:	75fb      	strb	r3, [r7, #23]
          break;
 800a65e:	e019      	b.n	800a694 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a666:	2b03      	cmp	r3, #3
 800a668:	d106      	bne.n	800a678 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	885b      	ldrh	r3, [r3, #2]
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	461a      	mov	r2, r3
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a676:	e00d      	b.n	800a694 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800a678:	6839      	ldr	r1, [r7, #0]
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f001 f820 	bl	800b6c0 <USBD_CtlError>
            ret = USBD_FAIL;
 800a680:	2302      	movs	r3, #2
 800a682:	75fb      	strb	r3, [r7, #23]
          break;
 800a684:	e006      	b.n	800a694 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800a686:	6839      	ldr	r1, [r7, #0]
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f001 f819 	bl	800b6c0 <USBD_CtlError>
          ret = USBD_FAIL;
 800a68e:	2302      	movs	r3, #2
 800a690:	75fb      	strb	r3, [r7, #23]
          break;
 800a692:	bf00      	nop
      }
      break;
 800a694:	e006      	b.n	800a6a4 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800a696:	6839      	ldr	r1, [r7, #0]
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f001 f811 	bl	800b6c0 <USBD_CtlError>
      ret = USBD_FAIL;
 800a69e:	2302      	movs	r3, #2
 800a6a0:	75fb      	strb	r3, [r7, #23]
      break;
 800a6a2:	bf00      	nop
  }

  return ret;
 800a6a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3720      	adds	r7, #32
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	200000c8 	.word	0x200000c8
 800a6b4:	200000b0 	.word	0x200000b0

0800a6b8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b083      	sub	sp, #12
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2222      	movs	r2, #34	; 0x22
 800a6c4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800a6c6:	4b03      	ldr	r3, [pc, #12]	; (800a6d4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr
 800a6d4:	20000044 	.word	0x20000044

0800a6d8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2222      	movs	r2, #34	; 0x22
 800a6e4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800a6e6:	4b03      	ldr	r3, [pc, #12]	; (800a6f4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr
 800a6f4:	20000068 	.word	0x20000068

0800a6f8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2222      	movs	r2, #34	; 0x22
 800a704:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800a706:	4b03      	ldr	r3, [pc, #12]	; (800a714 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800a708:	4618      	mov	r0, r3
 800a70a:	370c      	adds	r7, #12
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr
 800a714:	2000008c 	.word	0x2000008c

0800a718 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	460b      	mov	r3, r1
 800a722:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a72a:	2200      	movs	r2, #0
 800a72c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	220a      	movs	r2, #10
 800a748:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800a74a:	4b03      	ldr	r3, [pc, #12]	; (800a758 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr
 800a758:	200000bc 	.word	0x200000bc

0800a75c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	4613      	mov	r3, r2
 800a768:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d101      	bne.n	800a774 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a770:	2302      	movs	r3, #2
 800a772:	e01a      	b.n	800a7aa <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d003      	beq.n	800a786 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2200      	movs	r2, #0
 800a782:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d003      	beq.n	800a794 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	68ba      	ldr	r2, [r7, #8]
 800a790:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2201      	movs	r2, #1
 800a798:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	79fa      	ldrb	r2, [r7, #7]
 800a7a0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	f001 fa7c 	bl	800bca0 <USBD_LL_Init>

  return USBD_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a7b2:	b480      	push	{r7}
 800a7b4:	b085      	sub	sp, #20
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
 800a7ba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d006      	beq.n	800a7d4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	683a      	ldr	r2, [r7, #0]
 800a7ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	73fb      	strb	r3, [r7, #15]
 800a7d2:	e001      	b.n	800a7d8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a7d4:	2302      	movs	r3, #2
 800a7d6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a7d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3714      	adds	r7, #20
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr

0800a7e6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a7e6:	b580      	push	{r7, lr}
 800a7e8:	b082      	sub	sp, #8
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f001 fa9e 	bl	800bd30 <USBD_LL_Start>

  return USBD_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a7fe:	b480      	push	{r7}
 800a800:	b083      	sub	sp, #12
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a806:	2300      	movs	r3, #0
}
 800a808:	4618      	mov	r0, r3
 800a80a:	370c      	adds	r7, #12
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	460b      	mov	r3, r1
 800a81e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a820:	2302      	movs	r3, #2
 800a822:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00c      	beq.n	800a848 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	78fa      	ldrb	r2, [r7, #3]
 800a838:	4611      	mov	r1, r2
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	4798      	blx	r3
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d101      	bne.n	800a848 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a844:	2300      	movs	r3, #0
 800a846:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a848:	7bfb      	ldrb	r3, [r7, #15]
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b082      	sub	sp, #8
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
 800a85a:	460b      	mov	r3, r1
 800a85c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	78fa      	ldrb	r2, [r7, #3]
 800a868:	4611      	mov	r1, r2
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	4798      	blx	r3

  return USBD_OK;
 800a86e:	2300      	movs	r3, #0
}
 800a870:	4618      	mov	r0, r3
 800a872:	3708      	adds	r7, #8
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a888:	6839      	ldr	r1, [r7, #0]
 800a88a:	4618      	mov	r0, r3
 800a88c:	f000 fedb 	bl	800b646 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2201      	movs	r2, #1
 800a894:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a89e:	461a      	mov	r2, r3
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a8ac:	f003 031f 	and.w	r3, r3, #31
 800a8b0:	2b02      	cmp	r3, #2
 800a8b2:	d016      	beq.n	800a8e2 <USBD_LL_SetupStage+0x6a>
 800a8b4:	2b02      	cmp	r3, #2
 800a8b6:	d81c      	bhi.n	800a8f2 <USBD_LL_SetupStage+0x7a>
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d002      	beq.n	800a8c2 <USBD_LL_SetupStage+0x4a>
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d008      	beq.n	800a8d2 <USBD_LL_SetupStage+0x5a>
 800a8c0:	e017      	b.n	800a8f2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 f9ce 	bl	800ac6c <USBD_StdDevReq>
      break;
 800a8d0:	e01a      	b.n	800a908 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a8d8:	4619      	mov	r1, r3
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 fa30 	bl	800ad40 <USBD_StdItfReq>
      break;
 800a8e0:	e012      	b.n	800a908 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 fa70 	bl	800add0 <USBD_StdEPReq>
      break;
 800a8f0:	e00a      	b.n	800a908 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a8f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	4619      	mov	r1, r3
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f001 fa75 	bl	800bdf0 <USBD_LL_StallEP>
      break;
 800a906:	bf00      	nop
  }

  return USBD_OK;
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b086      	sub	sp, #24
 800a916:	af00      	add	r7, sp, #0
 800a918:	60f8      	str	r0, [r7, #12]
 800a91a:	460b      	mov	r3, r1
 800a91c:	607a      	str	r2, [r7, #4]
 800a91e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a920:	7afb      	ldrb	r3, [r7, #11]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d14b      	bne.n	800a9be <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a92c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a934:	2b03      	cmp	r3, #3
 800a936:	d134      	bne.n	800a9a2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	68da      	ldr	r2, [r3, #12]
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	691b      	ldr	r3, [r3, #16]
 800a940:	429a      	cmp	r2, r3
 800a942:	d919      	bls.n	800a978 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	68da      	ldr	r2, [r3, #12]
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	691b      	ldr	r3, [r3, #16]
 800a94c:	1ad2      	subs	r2, r2, r3
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	68da      	ldr	r2, [r3, #12]
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d203      	bcs.n	800a966 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a962:	b29b      	uxth	r3, r3
 800a964:	e002      	b.n	800a96c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	461a      	mov	r2, r3
 800a96e:	6879      	ldr	r1, [r7, #4]
 800a970:	68f8      	ldr	r0, [r7, #12]
 800a972:	f000 ff3e 	bl	800b7f2 <USBD_CtlContinueRx>
 800a976:	e038      	b.n	800a9ea <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00a      	beq.n	800a99a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a98a:	2b03      	cmp	r3, #3
 800a98c:	d105      	bne.n	800a99a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a994:	691b      	ldr	r3, [r3, #16]
 800a996:	68f8      	ldr	r0, [r7, #12]
 800a998:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a99a:	68f8      	ldr	r0, [r7, #12]
 800a99c:	f000 ff3b 	bl	800b816 <USBD_CtlSendStatus>
 800a9a0:	e023      	b.n	800a9ea <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a9a8:	2b05      	cmp	r3, #5
 800a9aa:	d11e      	bne.n	800a9ea <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	f001 fa1a 	bl	800bdf0 <USBD_LL_StallEP>
 800a9bc:	e015      	b.n	800a9ea <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00d      	beq.n	800a9e6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a9d0:	2b03      	cmp	r3, #3
 800a9d2:	d108      	bne.n	800a9e6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9da:	699b      	ldr	r3, [r3, #24]
 800a9dc:	7afa      	ldrb	r2, [r7, #11]
 800a9de:	4611      	mov	r1, r2
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	4798      	blx	r3
 800a9e4:	e001      	b.n	800a9ea <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a9e6:	2302      	movs	r3, #2
 800a9e8:	e000      	b.n	800a9ec <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a9ea:	2300      	movs	r3, #0
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3718      	adds	r7, #24
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b086      	sub	sp, #24
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	607a      	str	r2, [r7, #4]
 800aa00:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800aa02:	7afb      	ldrb	r3, [r7, #11]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d17f      	bne.n	800ab08 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	3314      	adds	r3, #20
 800aa0c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aa14:	2b02      	cmp	r3, #2
 800aa16:	d15c      	bne.n	800aad2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	68da      	ldr	r2, [r3, #12]
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	691b      	ldr	r3, [r3, #16]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d915      	bls.n	800aa50 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	68da      	ldr	r2, [r3, #12]
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	691b      	ldr	r3, [r3, #16]
 800aa2c:	1ad2      	subs	r2, r2, r3
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	461a      	mov	r2, r3
 800aa3a:	6879      	ldr	r1, [r7, #4]
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	f000 fec6 	bl	800b7ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa42:	2300      	movs	r3, #0
 800aa44:	2200      	movs	r2, #0
 800aa46:	2100      	movs	r1, #0
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	f001 fa7e 	bl	800bf4a <USBD_LL_PrepareReceive>
 800aa4e:	e04e      	b.n	800aaee <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	697a      	ldr	r2, [r7, #20]
 800aa56:	6912      	ldr	r2, [r2, #16]
 800aa58:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa5c:	fb01 f202 	mul.w	r2, r1, r2
 800aa60:	1a9b      	subs	r3, r3, r2
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d11c      	bne.n	800aaa0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	689a      	ldr	r2, [r3, #8]
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d316      	bcc.n	800aaa0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	689a      	ldr	r2, [r3, #8]
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d20f      	bcs.n	800aaa0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aa80:	2200      	movs	r2, #0
 800aa82:	2100      	movs	r1, #0
 800aa84:	68f8      	ldr	r0, [r7, #12]
 800aa86:	f000 fea2 	bl	800b7ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa92:	2300      	movs	r3, #0
 800aa94:	2200      	movs	r2, #0
 800aa96:	2100      	movs	r1, #0
 800aa98:	68f8      	ldr	r0, [r7, #12]
 800aa9a:	f001 fa56 	bl	800bf4a <USBD_LL_PrepareReceive>
 800aa9e:	e026      	b.n	800aaee <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaa6:	68db      	ldr	r3, [r3, #12]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d00a      	beq.n	800aac2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800aab2:	2b03      	cmp	r3, #3
 800aab4:	d105      	bne.n	800aac2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	68f8      	ldr	r0, [r7, #12]
 800aac0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800aac2:	2180      	movs	r1, #128	; 0x80
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f001 f993 	bl	800bdf0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800aaca:	68f8      	ldr	r0, [r7, #12]
 800aacc:	f000 feb6 	bl	800b83c <USBD_CtlReceiveStatus>
 800aad0:	e00d      	b.n	800aaee <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aad8:	2b04      	cmp	r3, #4
 800aada:	d004      	beq.n	800aae6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d103      	bne.n	800aaee <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800aae6:	2180      	movs	r1, #128	; 0x80
 800aae8:	68f8      	ldr	r0, [r7, #12]
 800aaea:	f001 f981 	bl	800bdf0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d11d      	bne.n	800ab34 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800aaf8:	68f8      	ldr	r0, [r7, #12]
 800aafa:	f7ff fe80 	bl	800a7fe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ab06:	e015      	b.n	800ab34 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab0e:	695b      	ldr	r3, [r3, #20]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00d      	beq.n	800ab30 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ab1a:	2b03      	cmp	r3, #3
 800ab1c:	d108      	bne.n	800ab30 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab24:	695b      	ldr	r3, [r3, #20]
 800ab26:	7afa      	ldrb	r2, [r7, #11]
 800ab28:	4611      	mov	r1, r2
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	4798      	blx	r3
 800ab2e:	e001      	b.n	800ab34 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ab30:	2302      	movs	r3, #2
 800ab32:	e000      	b.n	800ab36 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3718      	adds	r7, #24
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b082      	sub	sp, #8
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab46:	2340      	movs	r3, #64	; 0x40
 800ab48:	2200      	movs	r2, #0
 800ab4a:	2100      	movs	r1, #0
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f001 f90a 	bl	800bd66 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2201      	movs	r2, #1
 800ab56:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2240      	movs	r2, #64	; 0x40
 800ab5e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab62:	2340      	movs	r3, #64	; 0x40
 800ab64:	2200      	movs	r2, #0
 800ab66:	2180      	movs	r1, #128	; 0x80
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f001 f8fc 	bl	800bd66 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2201      	movs	r2, #1
 800ab72:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2240      	movs	r2, #64	; 0x40
 800ab78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2200      	movs	r2, #0
 800ab86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2200      	movs	r2, #0
 800ab94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d009      	beq.n	800abb6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	6852      	ldr	r2, [r2, #4]
 800abae:	b2d2      	uxtb	r2, r2
 800abb0:	4611      	mov	r1, r2
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	4798      	blx	r3
  }

  return USBD_OK;
 800abb6:	2300      	movs	r3, #0
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3708      	adds	r7, #8
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	460b      	mov	r3, r1
 800abca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	78fa      	ldrb	r2, [r7, #3]
 800abd0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800abd2:	2300      	movs	r3, #0
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2204      	movs	r2, #4
 800abf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800abfc:	2300      	movs	r3, #0
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	370c      	adds	r7, #12
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr

0800ac0a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ac0a:	b480      	push	{r7}
 800ac0c:	b083      	sub	sp, #12
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac18:	2b04      	cmp	r3, #4
 800ac1a:	d105      	bne.n	800ac28 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ac28:	2300      	movs	r3, #0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	370c      	adds	r7, #12
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b082      	sub	sp, #8
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac44:	2b03      	cmp	r3, #3
 800ac46:	d10b      	bne.n	800ac60 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac4e:	69db      	ldr	r3, [r3, #28]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d005      	beq.n	800ac60 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac5a:	69db      	ldr	r3, [r3, #28]
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac60:	2300      	movs	r3, #0
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3708      	adds	r7, #8
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
	...

0800ac6c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac76:	2300      	movs	r3, #0
 800ac78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac82:	2b40      	cmp	r3, #64	; 0x40
 800ac84:	d005      	beq.n	800ac92 <USBD_StdDevReq+0x26>
 800ac86:	2b40      	cmp	r3, #64	; 0x40
 800ac88:	d84f      	bhi.n	800ad2a <USBD_StdDevReq+0xbe>
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d009      	beq.n	800aca2 <USBD_StdDevReq+0x36>
 800ac8e:	2b20      	cmp	r3, #32
 800ac90:	d14b      	bne.n	800ad2a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	6839      	ldr	r1, [r7, #0]
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	4798      	blx	r3
      break;
 800aca0:	e048      	b.n	800ad34 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	785b      	ldrb	r3, [r3, #1]
 800aca6:	2b09      	cmp	r3, #9
 800aca8:	d839      	bhi.n	800ad1e <USBD_StdDevReq+0xb2>
 800acaa:	a201      	add	r2, pc, #4	; (adr r2, 800acb0 <USBD_StdDevReq+0x44>)
 800acac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb0:	0800ad01 	.word	0x0800ad01
 800acb4:	0800ad15 	.word	0x0800ad15
 800acb8:	0800ad1f 	.word	0x0800ad1f
 800acbc:	0800ad0b 	.word	0x0800ad0b
 800acc0:	0800ad1f 	.word	0x0800ad1f
 800acc4:	0800ace3 	.word	0x0800ace3
 800acc8:	0800acd9 	.word	0x0800acd9
 800accc:	0800ad1f 	.word	0x0800ad1f
 800acd0:	0800acf7 	.word	0x0800acf7
 800acd4:	0800aced 	.word	0x0800aced
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800acd8:	6839      	ldr	r1, [r7, #0]
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 f9dc 	bl	800b098 <USBD_GetDescriptor>
          break;
 800ace0:	e022      	b.n	800ad28 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ace2:	6839      	ldr	r1, [r7, #0]
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 fb3f 	bl	800b368 <USBD_SetAddress>
          break;
 800acea:	e01d      	b.n	800ad28 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800acec:	6839      	ldr	r1, [r7, #0]
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 fb7e 	bl	800b3f0 <USBD_SetConfig>
          break;
 800acf4:	e018      	b.n	800ad28 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800acf6:	6839      	ldr	r1, [r7, #0]
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 fc07 	bl	800b50c <USBD_GetConfig>
          break;
 800acfe:	e013      	b.n	800ad28 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ad00:	6839      	ldr	r1, [r7, #0]
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 fc37 	bl	800b576 <USBD_GetStatus>
          break;
 800ad08:	e00e      	b.n	800ad28 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ad0a:	6839      	ldr	r1, [r7, #0]
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 fc65 	bl	800b5dc <USBD_SetFeature>
          break;
 800ad12:	e009      	b.n	800ad28 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ad14:	6839      	ldr	r1, [r7, #0]
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 fc74 	bl	800b604 <USBD_ClrFeature>
          break;
 800ad1c:	e004      	b.n	800ad28 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800ad1e:	6839      	ldr	r1, [r7, #0]
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 fccd 	bl	800b6c0 <USBD_CtlError>
          break;
 800ad26:	bf00      	nop
      }
      break;
 800ad28:	e004      	b.n	800ad34 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800ad2a:	6839      	ldr	r1, [r7, #0]
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 fcc7 	bl	800b6c0 <USBD_CtlError>
      break;
 800ad32:	bf00      	nop
  }

  return ret;
 800ad34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop

0800ad40 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad56:	2b40      	cmp	r3, #64	; 0x40
 800ad58:	d005      	beq.n	800ad66 <USBD_StdItfReq+0x26>
 800ad5a:	2b40      	cmp	r3, #64	; 0x40
 800ad5c:	d82e      	bhi.n	800adbc <USBD_StdItfReq+0x7c>
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d001      	beq.n	800ad66 <USBD_StdItfReq+0x26>
 800ad62:	2b20      	cmp	r3, #32
 800ad64:	d12a      	bne.n	800adbc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad6c:	3b01      	subs	r3, #1
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	d81d      	bhi.n	800adae <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	889b      	ldrh	r3, [r3, #4]
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d813      	bhi.n	800ada4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad82:	689b      	ldr	r3, [r3, #8]
 800ad84:	6839      	ldr	r1, [r7, #0]
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	4798      	blx	r3
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	88db      	ldrh	r3, [r3, #6]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d110      	bne.n	800adb8 <USBD_StdItfReq+0x78>
 800ad96:	7bfb      	ldrb	r3, [r7, #15]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d10d      	bne.n	800adb8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 fd3a 	bl	800b816 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ada2:	e009      	b.n	800adb8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800ada4:	6839      	ldr	r1, [r7, #0]
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 fc8a 	bl	800b6c0 <USBD_CtlError>
          break;
 800adac:	e004      	b.n	800adb8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800adae:	6839      	ldr	r1, [r7, #0]
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 fc85 	bl	800b6c0 <USBD_CtlError>
          break;
 800adb6:	e000      	b.n	800adba <USBD_StdItfReq+0x7a>
          break;
 800adb8:	bf00      	nop
      }
      break;
 800adba:	e004      	b.n	800adc6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800adbc:	6839      	ldr	r1, [r7, #0]
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 fc7e 	bl	800b6c0 <USBD_CtlError>
      break;
 800adc4:	bf00      	nop
  }

  return USBD_OK;
 800adc6:	2300      	movs	r3, #0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3710      	adds	r7, #16
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800adda:	2300      	movs	r3, #0
 800addc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	889b      	ldrh	r3, [r3, #4]
 800ade2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adec:	2b40      	cmp	r3, #64	; 0x40
 800adee:	d007      	beq.n	800ae00 <USBD_StdEPReq+0x30>
 800adf0:	2b40      	cmp	r3, #64	; 0x40
 800adf2:	f200 8146 	bhi.w	800b082 <USBD_StdEPReq+0x2b2>
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00a      	beq.n	800ae10 <USBD_StdEPReq+0x40>
 800adfa:	2b20      	cmp	r3, #32
 800adfc:	f040 8141 	bne.w	800b082 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	6839      	ldr	r1, [r7, #0]
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	4798      	blx	r3
      break;
 800ae0e:	e13d      	b.n	800b08c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae18:	2b20      	cmp	r3, #32
 800ae1a:	d10a      	bne.n	800ae32 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	6839      	ldr	r1, [r7, #0]
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	4798      	blx	r3
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800ae2e:	7bfb      	ldrb	r3, [r7, #15]
 800ae30:	e12d      	b.n	800b08e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	785b      	ldrb	r3, [r3, #1]
 800ae36:	2b03      	cmp	r3, #3
 800ae38:	d007      	beq.n	800ae4a <USBD_StdEPReq+0x7a>
 800ae3a:	2b03      	cmp	r3, #3
 800ae3c:	f300 811b 	bgt.w	800b076 <USBD_StdEPReq+0x2a6>
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d072      	beq.n	800af2a <USBD_StdEPReq+0x15a>
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d03a      	beq.n	800aebe <USBD_StdEPReq+0xee>
 800ae48:	e115      	b.n	800b076 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d002      	beq.n	800ae5a <USBD_StdEPReq+0x8a>
 800ae54:	2b03      	cmp	r3, #3
 800ae56:	d015      	beq.n	800ae84 <USBD_StdEPReq+0xb4>
 800ae58:	e02b      	b.n	800aeb2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae5a:	7bbb      	ldrb	r3, [r7, #14]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d00c      	beq.n	800ae7a <USBD_StdEPReq+0xaa>
 800ae60:	7bbb      	ldrb	r3, [r7, #14]
 800ae62:	2b80      	cmp	r3, #128	; 0x80
 800ae64:	d009      	beq.n	800ae7a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ae66:	7bbb      	ldrb	r3, [r7, #14]
 800ae68:	4619      	mov	r1, r3
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 ffc0 	bl	800bdf0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ae70:	2180      	movs	r1, #128	; 0x80
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 ffbc 	bl	800bdf0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae78:	e020      	b.n	800aebc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800ae7a:	6839      	ldr	r1, [r7, #0]
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 fc1f 	bl	800b6c0 <USBD_CtlError>
              break;
 800ae82:	e01b      	b.n	800aebc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	885b      	ldrh	r3, [r3, #2]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10e      	bne.n	800aeaa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800ae8c:	7bbb      	ldrb	r3, [r7, #14]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00b      	beq.n	800aeaa <USBD_StdEPReq+0xda>
 800ae92:	7bbb      	ldrb	r3, [r7, #14]
 800ae94:	2b80      	cmp	r3, #128	; 0x80
 800ae96:	d008      	beq.n	800aeaa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	88db      	ldrh	r3, [r3, #6]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d104      	bne.n	800aeaa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800aea0:	7bbb      	ldrb	r3, [r7, #14]
 800aea2:	4619      	mov	r1, r3
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 ffa3 	bl	800bdf0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 fcb3 	bl	800b816 <USBD_CtlSendStatus>

              break;
 800aeb0:	e004      	b.n	800aebc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800aeb2:	6839      	ldr	r1, [r7, #0]
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 fc03 	bl	800b6c0 <USBD_CtlError>
              break;
 800aeba:	bf00      	nop
          }
          break;
 800aebc:	e0e0      	b.n	800b080 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aec4:	2b02      	cmp	r3, #2
 800aec6:	d002      	beq.n	800aece <USBD_StdEPReq+0xfe>
 800aec8:	2b03      	cmp	r3, #3
 800aeca:	d015      	beq.n	800aef8 <USBD_StdEPReq+0x128>
 800aecc:	e026      	b.n	800af1c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aece:	7bbb      	ldrb	r3, [r7, #14]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d00c      	beq.n	800aeee <USBD_StdEPReq+0x11e>
 800aed4:	7bbb      	ldrb	r3, [r7, #14]
 800aed6:	2b80      	cmp	r3, #128	; 0x80
 800aed8:	d009      	beq.n	800aeee <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800aeda:	7bbb      	ldrb	r3, [r7, #14]
 800aedc:	4619      	mov	r1, r3
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 ff86 	bl	800bdf0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800aee4:	2180      	movs	r1, #128	; 0x80
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 ff82 	bl	800bdf0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aeec:	e01c      	b.n	800af28 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800aeee:	6839      	ldr	r1, [r7, #0]
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 fbe5 	bl	800b6c0 <USBD_CtlError>
              break;
 800aef6:	e017      	b.n	800af28 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	885b      	ldrh	r3, [r3, #2]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d112      	bne.n	800af26 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800af00:	7bbb      	ldrb	r3, [r7, #14]
 800af02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af06:	2b00      	cmp	r3, #0
 800af08:	d004      	beq.n	800af14 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800af0a:	7bbb      	ldrb	r3, [r7, #14]
 800af0c:	4619      	mov	r1, r3
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 ff8d 	bl	800be2e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 fc7e 	bl	800b816 <USBD_CtlSendStatus>
              }
              break;
 800af1a:	e004      	b.n	800af26 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800af1c:	6839      	ldr	r1, [r7, #0]
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 fbce 	bl	800b6c0 <USBD_CtlError>
              break;
 800af24:	e000      	b.n	800af28 <USBD_StdEPReq+0x158>
              break;
 800af26:	bf00      	nop
          }
          break;
 800af28:	e0aa      	b.n	800b080 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af30:	2b02      	cmp	r3, #2
 800af32:	d002      	beq.n	800af3a <USBD_StdEPReq+0x16a>
 800af34:	2b03      	cmp	r3, #3
 800af36:	d032      	beq.n	800af9e <USBD_StdEPReq+0x1ce>
 800af38:	e097      	b.n	800b06a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af3a:	7bbb      	ldrb	r3, [r7, #14]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d007      	beq.n	800af50 <USBD_StdEPReq+0x180>
 800af40:	7bbb      	ldrb	r3, [r7, #14]
 800af42:	2b80      	cmp	r3, #128	; 0x80
 800af44:	d004      	beq.n	800af50 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800af46:	6839      	ldr	r1, [r7, #0]
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 fbb9 	bl	800b6c0 <USBD_CtlError>
                break;
 800af4e:	e091      	b.n	800b074 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af54:	2b00      	cmp	r3, #0
 800af56:	da0b      	bge.n	800af70 <USBD_StdEPReq+0x1a0>
 800af58:	7bbb      	ldrb	r3, [r7, #14]
 800af5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af5e:	4613      	mov	r3, r2
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	4413      	add	r3, r2
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	3310      	adds	r3, #16
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	4413      	add	r3, r2
 800af6c:	3304      	adds	r3, #4
 800af6e:	e00b      	b.n	800af88 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af70:	7bbb      	ldrb	r3, [r7, #14]
 800af72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af76:	4613      	mov	r3, r2
 800af78:	009b      	lsls	r3, r3, #2
 800af7a:	4413      	add	r3, r2
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	4413      	add	r3, r2
 800af86:	3304      	adds	r3, #4
 800af88:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	2200      	movs	r2, #0
 800af8e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	2202      	movs	r2, #2
 800af94:	4619      	mov	r1, r3
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 fbfd 	bl	800b796 <USBD_CtlSendData>
              break;
 800af9c:	e06a      	b.n	800b074 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800af9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	da11      	bge.n	800afca <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800afa6:	7bbb      	ldrb	r3, [r7, #14]
 800afa8:	f003 020f 	and.w	r2, r3, #15
 800afac:	6879      	ldr	r1, [r7, #4]
 800afae:	4613      	mov	r3, r2
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	4413      	add	r3, r2
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	440b      	add	r3, r1
 800afb8:	3318      	adds	r3, #24
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d117      	bne.n	800aff0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800afc0:	6839      	ldr	r1, [r7, #0]
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 fb7c 	bl	800b6c0 <USBD_CtlError>
                  break;
 800afc8:	e054      	b.n	800b074 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800afca:	7bbb      	ldrb	r3, [r7, #14]
 800afcc:	f003 020f 	and.w	r2, r3, #15
 800afd0:	6879      	ldr	r1, [r7, #4]
 800afd2:	4613      	mov	r3, r2
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	4413      	add	r3, r2
 800afd8:	009b      	lsls	r3, r3, #2
 800afda:	440b      	add	r3, r1
 800afdc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d104      	bne.n	800aff0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800afe6:	6839      	ldr	r1, [r7, #0]
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 fb69 	bl	800b6c0 <USBD_CtlError>
                  break;
 800afee:	e041      	b.n	800b074 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aff0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	da0b      	bge.n	800b010 <USBD_StdEPReq+0x240>
 800aff8:	7bbb      	ldrb	r3, [r7, #14]
 800affa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800affe:	4613      	mov	r3, r2
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	4413      	add	r3, r2
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	3310      	adds	r3, #16
 800b008:	687a      	ldr	r2, [r7, #4]
 800b00a:	4413      	add	r3, r2
 800b00c:	3304      	adds	r3, #4
 800b00e:	e00b      	b.n	800b028 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b010:	7bbb      	ldrb	r3, [r7, #14]
 800b012:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b016:	4613      	mov	r3, r2
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	4413      	add	r3, r2
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	4413      	add	r3, r2
 800b026:	3304      	adds	r3, #4
 800b028:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b02a:	7bbb      	ldrb	r3, [r7, #14]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d002      	beq.n	800b036 <USBD_StdEPReq+0x266>
 800b030:	7bbb      	ldrb	r3, [r7, #14]
 800b032:	2b80      	cmp	r3, #128	; 0x80
 800b034:	d103      	bne.n	800b03e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	2200      	movs	r2, #0
 800b03a:	601a      	str	r2, [r3, #0]
 800b03c:	e00e      	b.n	800b05c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b03e:	7bbb      	ldrb	r3, [r7, #14]
 800b040:	4619      	mov	r1, r3
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 ff12 	bl	800be6c <USBD_LL_IsStallEP>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d003      	beq.n	800b056 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	2201      	movs	r2, #1
 800b052:	601a      	str	r2, [r3, #0]
 800b054:	e002      	b.n	800b05c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	2200      	movs	r2, #0
 800b05a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	2202      	movs	r2, #2
 800b060:	4619      	mov	r1, r3
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 fb97 	bl	800b796 <USBD_CtlSendData>
              break;
 800b068:	e004      	b.n	800b074 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b06a:	6839      	ldr	r1, [r7, #0]
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 fb27 	bl	800b6c0 <USBD_CtlError>
              break;
 800b072:	bf00      	nop
          }
          break;
 800b074:	e004      	b.n	800b080 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b076:	6839      	ldr	r1, [r7, #0]
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 fb21 	bl	800b6c0 <USBD_CtlError>
          break;
 800b07e:	bf00      	nop
      }
      break;
 800b080:	e004      	b.n	800b08c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b082:	6839      	ldr	r1, [r7, #0]
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f000 fb1b 	bl	800b6c0 <USBD_CtlError>
      break;
 800b08a:	bf00      	nop
  }

  return ret;
 800b08c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
	...

0800b098 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	885b      	ldrh	r3, [r3, #2]
 800b0b2:	0a1b      	lsrs	r3, r3, #8
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	3b01      	subs	r3, #1
 800b0b8:	2b06      	cmp	r3, #6
 800b0ba:	f200 8128 	bhi.w	800b30e <USBD_GetDescriptor+0x276>
 800b0be:	a201      	add	r2, pc, #4	; (adr r2, 800b0c4 <USBD_GetDescriptor+0x2c>)
 800b0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0c4:	0800b0e1 	.word	0x0800b0e1
 800b0c8:	0800b0f9 	.word	0x0800b0f9
 800b0cc:	0800b139 	.word	0x0800b139
 800b0d0:	0800b30f 	.word	0x0800b30f
 800b0d4:	0800b30f 	.word	0x0800b30f
 800b0d8:	0800b2af 	.word	0x0800b2af
 800b0dc:	0800b2db 	.word	0x0800b2db
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	687a      	ldr	r2, [r7, #4]
 800b0ea:	7c12      	ldrb	r2, [r2, #16]
 800b0ec:	f107 0108 	add.w	r1, r7, #8
 800b0f0:	4610      	mov	r0, r2
 800b0f2:	4798      	blx	r3
 800b0f4:	60f8      	str	r0, [r7, #12]
      break;
 800b0f6:	e112      	b.n	800b31e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	7c1b      	ldrb	r3, [r3, #16]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d10d      	bne.n	800b11c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b108:	f107 0208 	add.w	r2, r7, #8
 800b10c:	4610      	mov	r0, r2
 800b10e:	4798      	blx	r3
 800b110:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	3301      	adds	r3, #1
 800b116:	2202      	movs	r2, #2
 800b118:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b11a:	e100      	b.n	800b31e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b124:	f107 0208 	add.w	r2, r7, #8
 800b128:	4610      	mov	r0, r2
 800b12a:	4798      	blx	r3
 800b12c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	3301      	adds	r3, #1
 800b132:	2202      	movs	r2, #2
 800b134:	701a      	strb	r2, [r3, #0]
      break;
 800b136:	e0f2      	b.n	800b31e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	885b      	ldrh	r3, [r3, #2]
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	2b05      	cmp	r3, #5
 800b140:	f200 80ac 	bhi.w	800b29c <USBD_GetDescriptor+0x204>
 800b144:	a201      	add	r2, pc, #4	; (adr r2, 800b14c <USBD_GetDescriptor+0xb4>)
 800b146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b14a:	bf00      	nop
 800b14c:	0800b165 	.word	0x0800b165
 800b150:	0800b199 	.word	0x0800b199
 800b154:	0800b1cd 	.word	0x0800b1cd
 800b158:	0800b201 	.word	0x0800b201
 800b15c:	0800b235 	.word	0x0800b235
 800b160:	0800b269 	.word	0x0800b269
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d00b      	beq.n	800b188 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	7c12      	ldrb	r2, [r2, #16]
 800b17c:	f107 0108 	add.w	r1, r7, #8
 800b180:	4610      	mov	r0, r2
 800b182:	4798      	blx	r3
 800b184:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b186:	e091      	b.n	800b2ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b188:	6839      	ldr	r1, [r7, #0]
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 fa98 	bl	800b6c0 <USBD_CtlError>
            err++;
 800b190:	7afb      	ldrb	r3, [r7, #11]
 800b192:	3301      	adds	r3, #1
 800b194:	72fb      	strb	r3, [r7, #11]
          break;
 800b196:	e089      	b.n	800b2ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b19e:	689b      	ldr	r3, [r3, #8]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d00b      	beq.n	800b1bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b1aa:	689b      	ldr	r3, [r3, #8]
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	7c12      	ldrb	r2, [r2, #16]
 800b1b0:	f107 0108 	add.w	r1, r7, #8
 800b1b4:	4610      	mov	r0, r2
 800b1b6:	4798      	blx	r3
 800b1b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1ba:	e077      	b.n	800b2ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1bc:	6839      	ldr	r1, [r7, #0]
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 fa7e 	bl	800b6c0 <USBD_CtlError>
            err++;
 800b1c4:	7afb      	ldrb	r3, [r7, #11]
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	72fb      	strb	r3, [r7, #11]
          break;
 800b1ca:	e06f      	b.n	800b2ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d00b      	beq.n	800b1f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	7c12      	ldrb	r2, [r2, #16]
 800b1e4:	f107 0108 	add.w	r1, r7, #8
 800b1e8:	4610      	mov	r0, r2
 800b1ea:	4798      	blx	r3
 800b1ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1ee:	e05d      	b.n	800b2ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1f0:	6839      	ldr	r1, [r7, #0]
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 fa64 	bl	800b6c0 <USBD_CtlError>
            err++;
 800b1f8:	7afb      	ldrb	r3, [r7, #11]
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	72fb      	strb	r3, [r7, #11]
          break;
 800b1fe:	e055      	b.n	800b2ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b206:	691b      	ldr	r3, [r3, #16]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d00b      	beq.n	800b224 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b212:	691b      	ldr	r3, [r3, #16]
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	7c12      	ldrb	r2, [r2, #16]
 800b218:	f107 0108 	add.w	r1, r7, #8
 800b21c:	4610      	mov	r0, r2
 800b21e:	4798      	blx	r3
 800b220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b222:	e043      	b.n	800b2ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b224:	6839      	ldr	r1, [r7, #0]
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 fa4a 	bl	800b6c0 <USBD_CtlError>
            err++;
 800b22c:	7afb      	ldrb	r3, [r7, #11]
 800b22e:	3301      	adds	r3, #1
 800b230:	72fb      	strb	r3, [r7, #11]
          break;
 800b232:	e03b      	b.n	800b2ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b23a:	695b      	ldr	r3, [r3, #20]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d00b      	beq.n	800b258 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b246:	695b      	ldr	r3, [r3, #20]
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	7c12      	ldrb	r2, [r2, #16]
 800b24c:	f107 0108 	add.w	r1, r7, #8
 800b250:	4610      	mov	r0, r2
 800b252:	4798      	blx	r3
 800b254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b256:	e029      	b.n	800b2ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b258:	6839      	ldr	r1, [r7, #0]
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 fa30 	bl	800b6c0 <USBD_CtlError>
            err++;
 800b260:	7afb      	ldrb	r3, [r7, #11]
 800b262:	3301      	adds	r3, #1
 800b264:	72fb      	strb	r3, [r7, #11]
          break;
 800b266:	e021      	b.n	800b2ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b26e:	699b      	ldr	r3, [r3, #24]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d00b      	beq.n	800b28c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b27a:	699b      	ldr	r3, [r3, #24]
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	7c12      	ldrb	r2, [r2, #16]
 800b280:	f107 0108 	add.w	r1, r7, #8
 800b284:	4610      	mov	r0, r2
 800b286:	4798      	blx	r3
 800b288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b28a:	e00f      	b.n	800b2ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b28c:	6839      	ldr	r1, [r7, #0]
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 fa16 	bl	800b6c0 <USBD_CtlError>
            err++;
 800b294:	7afb      	ldrb	r3, [r7, #11]
 800b296:	3301      	adds	r3, #1
 800b298:	72fb      	strb	r3, [r7, #11]
          break;
 800b29a:	e007      	b.n	800b2ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b29c:	6839      	ldr	r1, [r7, #0]
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 fa0e 	bl	800b6c0 <USBD_CtlError>
          err++;
 800b2a4:	7afb      	ldrb	r3, [r7, #11]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b2aa:	e038      	b.n	800b31e <USBD_GetDescriptor+0x286>
 800b2ac:	e037      	b.n	800b31e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	7c1b      	ldrb	r3, [r3, #16]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d109      	bne.n	800b2ca <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2be:	f107 0208 	add.w	r2, r7, #8
 800b2c2:	4610      	mov	r0, r2
 800b2c4:	4798      	blx	r3
 800b2c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2c8:	e029      	b.n	800b31e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b2ca:	6839      	ldr	r1, [r7, #0]
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 f9f7 	bl	800b6c0 <USBD_CtlError>
        err++;
 800b2d2:	7afb      	ldrb	r3, [r7, #11]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	72fb      	strb	r3, [r7, #11]
      break;
 800b2d8:	e021      	b.n	800b31e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	7c1b      	ldrb	r3, [r3, #16]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d10d      	bne.n	800b2fe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ea:	f107 0208 	add.w	r2, r7, #8
 800b2ee:	4610      	mov	r0, r2
 800b2f0:	4798      	blx	r3
 800b2f2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	2207      	movs	r2, #7
 800b2fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2fc:	e00f      	b.n	800b31e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b2fe:	6839      	ldr	r1, [r7, #0]
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 f9dd 	bl	800b6c0 <USBD_CtlError>
        err++;
 800b306:	7afb      	ldrb	r3, [r7, #11]
 800b308:	3301      	adds	r3, #1
 800b30a:	72fb      	strb	r3, [r7, #11]
      break;
 800b30c:	e007      	b.n	800b31e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b30e:	6839      	ldr	r1, [r7, #0]
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 f9d5 	bl	800b6c0 <USBD_CtlError>
      err++;
 800b316:	7afb      	ldrb	r3, [r7, #11]
 800b318:	3301      	adds	r3, #1
 800b31a:	72fb      	strb	r3, [r7, #11]
      break;
 800b31c:	bf00      	nop
  }

  if (err != 0U)
 800b31e:	7afb      	ldrb	r3, [r7, #11]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d11c      	bne.n	800b35e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b324:	893b      	ldrh	r3, [r7, #8]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d011      	beq.n	800b34e <USBD_GetDescriptor+0x2b6>
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	88db      	ldrh	r3, [r3, #6]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d00d      	beq.n	800b34e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	88da      	ldrh	r2, [r3, #6]
 800b336:	893b      	ldrh	r3, [r7, #8]
 800b338:	4293      	cmp	r3, r2
 800b33a:	bf28      	it	cs
 800b33c:	4613      	movcs	r3, r2
 800b33e:	b29b      	uxth	r3, r3
 800b340:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b342:	893b      	ldrh	r3, [r7, #8]
 800b344:	461a      	mov	r2, r3
 800b346:	68f9      	ldr	r1, [r7, #12]
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 fa24 	bl	800b796 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	88db      	ldrh	r3, [r3, #6]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d104      	bne.n	800b360 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 fa5d 	bl	800b816 <USBD_CtlSendStatus>
 800b35c:	e000      	b.n	800b360 <USBD_GetDescriptor+0x2c8>
    return;
 800b35e:	bf00      	nop
    }
  }
}
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop

0800b368 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	889b      	ldrh	r3, [r3, #4]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d130      	bne.n	800b3dc <USBD_SetAddress+0x74>
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	88db      	ldrh	r3, [r3, #6]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d12c      	bne.n	800b3dc <USBD_SetAddress+0x74>
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	885b      	ldrh	r3, [r3, #2]
 800b386:	2b7f      	cmp	r3, #127	; 0x7f
 800b388:	d828      	bhi.n	800b3dc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	885b      	ldrh	r3, [r3, #2]
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b394:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b39c:	2b03      	cmp	r3, #3
 800b39e:	d104      	bne.n	800b3aa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b3a0:	6839      	ldr	r1, [r7, #0]
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 f98c 	bl	800b6c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3a8:	e01d      	b.n	800b3e6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	7bfa      	ldrb	r2, [r7, #15]
 800b3ae:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b3b2:	7bfb      	ldrb	r3, [r7, #15]
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 fd85 	bl	800bec6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 fa2a 	bl	800b816 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b3c2:	7bfb      	ldrb	r3, [r7, #15]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d004      	beq.n	800b3d2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2202      	movs	r2, #2
 800b3cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3d0:	e009      	b.n	800b3e6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3da:	e004      	b.n	800b3e6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b3dc:	6839      	ldr	r1, [r7, #0]
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 f96e 	bl	800b6c0 <USBD_CtlError>
  }
}
 800b3e4:	bf00      	nop
 800b3e6:	bf00      	nop
 800b3e8:	3710      	adds	r7, #16
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
	...

0800b3f0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	885b      	ldrh	r3, [r3, #2]
 800b3fe:	b2da      	uxtb	r2, r3
 800b400:	4b41      	ldr	r3, [pc, #260]	; (800b508 <USBD_SetConfig+0x118>)
 800b402:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b404:	4b40      	ldr	r3, [pc, #256]	; (800b508 <USBD_SetConfig+0x118>)
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d904      	bls.n	800b416 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b40c:	6839      	ldr	r1, [r7, #0]
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 f956 	bl	800b6c0 <USBD_CtlError>
 800b414:	e075      	b.n	800b502 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b41c:	2b02      	cmp	r3, #2
 800b41e:	d002      	beq.n	800b426 <USBD_SetConfig+0x36>
 800b420:	2b03      	cmp	r3, #3
 800b422:	d023      	beq.n	800b46c <USBD_SetConfig+0x7c>
 800b424:	e062      	b.n	800b4ec <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b426:	4b38      	ldr	r3, [pc, #224]	; (800b508 <USBD_SetConfig+0x118>)
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d01a      	beq.n	800b464 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b42e:	4b36      	ldr	r3, [pc, #216]	; (800b508 <USBD_SetConfig+0x118>)
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	461a      	mov	r2, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2203      	movs	r2, #3
 800b43c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b440:	4b31      	ldr	r3, [pc, #196]	; (800b508 <USBD_SetConfig+0x118>)
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	4619      	mov	r1, r3
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f7ff f9e4 	bl	800a814 <USBD_SetClassConfig>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b02      	cmp	r3, #2
 800b450:	d104      	bne.n	800b45c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b452:	6839      	ldr	r1, [r7, #0]
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f000 f933 	bl	800b6c0 <USBD_CtlError>
            return;
 800b45a:	e052      	b.n	800b502 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 f9da 	bl	800b816 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b462:	e04e      	b.n	800b502 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 f9d6 	bl	800b816 <USBD_CtlSendStatus>
        break;
 800b46a:	e04a      	b.n	800b502 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b46c:	4b26      	ldr	r3, [pc, #152]	; (800b508 <USBD_SetConfig+0x118>)
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d112      	bne.n	800b49a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2202      	movs	r2, #2
 800b478:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b47c:	4b22      	ldr	r3, [pc, #136]	; (800b508 <USBD_SetConfig+0x118>)
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	461a      	mov	r2, r3
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b486:	4b20      	ldr	r3, [pc, #128]	; (800b508 <USBD_SetConfig+0x118>)
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	4619      	mov	r1, r3
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f7ff f9e0 	bl	800a852 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f000 f9bf 	bl	800b816 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b498:	e033      	b.n	800b502 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b49a:	4b1b      	ldr	r3, [pc, #108]	; (800b508 <USBD_SetConfig+0x118>)
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	461a      	mov	r2, r3
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d01d      	beq.n	800b4e4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f7ff f9ce 	bl	800a852 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b4b6:	4b14      	ldr	r3, [pc, #80]	; (800b508 <USBD_SetConfig+0x118>)
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b4c0:	4b11      	ldr	r3, [pc, #68]	; (800b508 <USBD_SetConfig+0x118>)
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f7ff f9a4 	bl	800a814 <USBD_SetClassConfig>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	2b02      	cmp	r3, #2
 800b4d0:	d104      	bne.n	800b4dc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b4d2:	6839      	ldr	r1, [r7, #0]
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 f8f3 	bl	800b6c0 <USBD_CtlError>
            return;
 800b4da:	e012      	b.n	800b502 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 f99a 	bl	800b816 <USBD_CtlSendStatus>
        break;
 800b4e2:	e00e      	b.n	800b502 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 f996 	bl	800b816 <USBD_CtlSendStatus>
        break;
 800b4ea:	e00a      	b.n	800b502 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b4ec:	6839      	ldr	r1, [r7, #0]
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 f8e6 	bl	800b6c0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b4f4:	4b04      	ldr	r3, [pc, #16]	; (800b508 <USBD_SetConfig+0x118>)
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f7ff f9a9 	bl	800a852 <USBD_ClrClassConfig>
        break;
 800b500:	bf00      	nop
    }
  }
}
 800b502:	3708      	adds	r7, #8
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	20000594 	.word	0x20000594

0800b50c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	88db      	ldrh	r3, [r3, #6]
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	d004      	beq.n	800b528 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b51e:	6839      	ldr	r1, [r7, #0]
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f000 f8cd 	bl	800b6c0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b526:	e022      	b.n	800b56e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b52e:	2b02      	cmp	r3, #2
 800b530:	dc02      	bgt.n	800b538 <USBD_GetConfig+0x2c>
 800b532:	2b00      	cmp	r3, #0
 800b534:	dc03      	bgt.n	800b53e <USBD_GetConfig+0x32>
 800b536:	e015      	b.n	800b564 <USBD_GetConfig+0x58>
 800b538:	2b03      	cmp	r3, #3
 800b53a:	d00b      	beq.n	800b554 <USBD_GetConfig+0x48>
 800b53c:	e012      	b.n	800b564 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2200      	movs	r2, #0
 800b542:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	3308      	adds	r3, #8
 800b548:	2201      	movs	r2, #1
 800b54a:	4619      	mov	r1, r3
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f000 f922 	bl	800b796 <USBD_CtlSendData>
        break;
 800b552:	e00c      	b.n	800b56e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	3304      	adds	r3, #4
 800b558:	2201      	movs	r2, #1
 800b55a:	4619      	mov	r1, r3
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f000 f91a 	bl	800b796 <USBD_CtlSendData>
        break;
 800b562:	e004      	b.n	800b56e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b564:	6839      	ldr	r1, [r7, #0]
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 f8aa 	bl	800b6c0 <USBD_CtlError>
        break;
 800b56c:	bf00      	nop
}
 800b56e:	bf00      	nop
 800b570:	3708      	adds	r7, #8
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}

0800b576 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b576:	b580      	push	{r7, lr}
 800b578:	b082      	sub	sp, #8
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
 800b57e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b586:	3b01      	subs	r3, #1
 800b588:	2b02      	cmp	r3, #2
 800b58a:	d81e      	bhi.n	800b5ca <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	88db      	ldrh	r3, [r3, #6]
 800b590:	2b02      	cmp	r3, #2
 800b592:	d004      	beq.n	800b59e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b594:	6839      	ldr	r1, [r7, #0]
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 f892 	bl	800b6c0 <USBD_CtlError>
        break;
 800b59c:	e01a      	b.n	800b5d4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d005      	beq.n	800b5ba <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	f043 0202 	orr.w	r2, r3, #2
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	330c      	adds	r3, #12
 800b5be:	2202      	movs	r2, #2
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 f8e7 	bl	800b796 <USBD_CtlSendData>
      break;
 800b5c8:	e004      	b.n	800b5d4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b5ca:	6839      	ldr	r1, [r7, #0]
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 f877 	bl	800b6c0 <USBD_CtlError>
      break;
 800b5d2:	bf00      	nop
  }
}
 800b5d4:	bf00      	nop
 800b5d6:	3708      	adds	r7, #8
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	885b      	ldrh	r3, [r3, #2]
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	d106      	bne.n	800b5fc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 f90d 	bl	800b816 <USBD_CtlSendStatus>
  }
}
 800b5fc:	bf00      	nop
 800b5fe:	3708      	adds	r7, #8
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b614:	3b01      	subs	r3, #1
 800b616:	2b02      	cmp	r3, #2
 800b618:	d80b      	bhi.n	800b632 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	885b      	ldrh	r3, [r3, #2]
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d10c      	bne.n	800b63c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2200      	movs	r2, #0
 800b626:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f000 f8f3 	bl	800b816 <USBD_CtlSendStatus>
      }
      break;
 800b630:	e004      	b.n	800b63c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b632:	6839      	ldr	r1, [r7, #0]
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 f843 	bl	800b6c0 <USBD_CtlError>
      break;
 800b63a:	e000      	b.n	800b63e <USBD_ClrFeature+0x3a>
      break;
 800b63c:	bf00      	nop
  }
}
 800b63e:	bf00      	nop
 800b640:	3708      	adds	r7, #8
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b646:	b480      	push	{r7}
 800b648:	b083      	sub	sp, #12
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
 800b64e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	781a      	ldrb	r2, [r3, #0]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	785a      	ldrb	r2, [r3, #1]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	3302      	adds	r3, #2
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	b29a      	uxth	r2, r3
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	3303      	adds	r3, #3
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	b29b      	uxth	r3, r3
 800b670:	021b      	lsls	r3, r3, #8
 800b672:	b29b      	uxth	r3, r3
 800b674:	4413      	add	r3, r2
 800b676:	b29a      	uxth	r2, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	3304      	adds	r3, #4
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	b29a      	uxth	r2, r3
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	3305      	adds	r3, #5
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	b29b      	uxth	r3, r3
 800b68c:	021b      	lsls	r3, r3, #8
 800b68e:	b29b      	uxth	r3, r3
 800b690:	4413      	add	r3, r2
 800b692:	b29a      	uxth	r2, r3
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	3306      	adds	r3, #6
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	b29a      	uxth	r2, r3
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	3307      	adds	r3, #7
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	021b      	lsls	r3, r3, #8
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	4413      	add	r3, r2
 800b6ae:	b29a      	uxth	r2, r3
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	80da      	strh	r2, [r3, #6]

}
 800b6b4:	bf00      	nop
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr

0800b6c0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b6ca:	2180      	movs	r1, #128	; 0x80
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f000 fb8f 	bl	800bdf0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b6d2:	2100      	movs	r1, #0
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 fb8b 	bl	800bdf0 <USBD_LL_StallEP>
}
 800b6da:	bf00      	nop
 800b6dc:	3708      	adds	r7, #8
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b6e2:	b580      	push	{r7, lr}
 800b6e4:	b086      	sub	sp, #24
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	60f8      	str	r0, [r7, #12]
 800b6ea:	60b9      	str	r1, [r7, #8]
 800b6ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d032      	beq.n	800b75e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b6f8:	68f8      	ldr	r0, [r7, #12]
 800b6fa:	f000 f834 	bl	800b766 <USBD_GetLen>
 800b6fe:	4603      	mov	r3, r0
 800b700:	3301      	adds	r3, #1
 800b702:	b29b      	uxth	r3, r3
 800b704:	005b      	lsls	r3, r3, #1
 800b706:	b29a      	uxth	r2, r3
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b70c:	7dfb      	ldrb	r3, [r7, #23]
 800b70e:	1c5a      	adds	r2, r3, #1
 800b710:	75fa      	strb	r2, [r7, #23]
 800b712:	461a      	mov	r2, r3
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	4413      	add	r3, r2
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	7812      	ldrb	r2, [r2, #0]
 800b71c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b71e:	7dfb      	ldrb	r3, [r7, #23]
 800b720:	1c5a      	adds	r2, r3, #1
 800b722:	75fa      	strb	r2, [r7, #23]
 800b724:	461a      	mov	r2, r3
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	4413      	add	r3, r2
 800b72a:	2203      	movs	r2, #3
 800b72c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b72e:	e012      	b.n	800b756 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	1c5a      	adds	r2, r3, #1
 800b734:	60fa      	str	r2, [r7, #12]
 800b736:	7dfa      	ldrb	r2, [r7, #23]
 800b738:	1c51      	adds	r1, r2, #1
 800b73a:	75f9      	strb	r1, [r7, #23]
 800b73c:	4611      	mov	r1, r2
 800b73e:	68ba      	ldr	r2, [r7, #8]
 800b740:	440a      	add	r2, r1
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b746:	7dfb      	ldrb	r3, [r7, #23]
 800b748:	1c5a      	adds	r2, r3, #1
 800b74a:	75fa      	strb	r2, [r7, #23]
 800b74c:	461a      	mov	r2, r3
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	4413      	add	r3, r2
 800b752:	2200      	movs	r2, #0
 800b754:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d1e8      	bne.n	800b730 <USBD_GetString+0x4e>
    }
  }
}
 800b75e:	bf00      	nop
 800b760:	3718      	adds	r7, #24
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b766:	b480      	push	{r7}
 800b768:	b085      	sub	sp, #20
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b76e:	2300      	movs	r3, #0
 800b770:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b772:	e005      	b.n	800b780 <USBD_GetLen+0x1a>
  {
    len++;
 800b774:	7bfb      	ldrb	r3, [r7, #15]
 800b776:	3301      	adds	r3, #1
 800b778:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	3301      	adds	r3, #1
 800b77e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d1f5      	bne.n	800b774 <USBD_GetLen+0xe>
  }

  return len;
 800b788:	7bfb      	ldrb	r3, [r7, #15]
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3714      	adds	r7, #20
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr

0800b796 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b796:	b580      	push	{r7, lr}
 800b798:	b084      	sub	sp, #16
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	60f8      	str	r0, [r7, #12]
 800b79e:	60b9      	str	r1, [r7, #8]
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2202      	movs	r2, #2
 800b7a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b7ac:	88fa      	ldrh	r2, [r7, #6]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b7b2:	88fa      	ldrh	r2, [r7, #6]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b7b8:	88fb      	ldrh	r3, [r7, #6]
 800b7ba:	68ba      	ldr	r2, [r7, #8]
 800b7bc:	2100      	movs	r1, #0
 800b7be:	68f8      	ldr	r0, [r7, #12]
 800b7c0:	f000 fba0 	bl	800bf04 <USBD_LL_Transmit>

  return USBD_OK;
 800b7c4:	2300      	movs	r3, #0
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3710      	adds	r7, #16
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}

0800b7ce <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b7ce:	b580      	push	{r7, lr}
 800b7d0:	b084      	sub	sp, #16
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	60f8      	str	r0, [r7, #12]
 800b7d6:	60b9      	str	r1, [r7, #8]
 800b7d8:	4613      	mov	r3, r2
 800b7da:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b7dc:	88fb      	ldrh	r3, [r7, #6]
 800b7de:	68ba      	ldr	r2, [r7, #8]
 800b7e0:	2100      	movs	r1, #0
 800b7e2:	68f8      	ldr	r0, [r7, #12]
 800b7e4:	f000 fb8e 	bl	800bf04 <USBD_LL_Transmit>

  return USBD_OK;
 800b7e8:	2300      	movs	r3, #0
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b084      	sub	sp, #16
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	60f8      	str	r0, [r7, #12]
 800b7fa:	60b9      	str	r1, [r7, #8]
 800b7fc:	4613      	mov	r3, r2
 800b7fe:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b800:	88fb      	ldrh	r3, [r7, #6]
 800b802:	68ba      	ldr	r2, [r7, #8]
 800b804:	2100      	movs	r1, #0
 800b806:	68f8      	ldr	r0, [r7, #12]
 800b808:	f000 fb9f 	bl	800bf4a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b80c:	2300      	movs	r3, #0
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3710      	adds	r7, #16
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b816:	b580      	push	{r7, lr}
 800b818:	b082      	sub	sp, #8
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2204      	movs	r2, #4
 800b822:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b826:	2300      	movs	r3, #0
 800b828:	2200      	movs	r2, #0
 800b82a:	2100      	movs	r1, #0
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 fb69 	bl	800bf04 <USBD_LL_Transmit>

  return USBD_OK;
 800b832:	2300      	movs	r3, #0
}
 800b834:	4618      	mov	r0, r3
 800b836:	3708      	adds	r7, #8
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b082      	sub	sp, #8
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2205      	movs	r2, #5
 800b848:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b84c:	2300      	movs	r3, #0
 800b84e:	2200      	movs	r2, #0
 800b850:	2100      	movs	r1, #0
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f000 fb79 	bl	800bf4a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b858:	2300      	movs	r3, #0
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3708      	adds	r7, #8
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
	...

0800b864 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b868:	2200      	movs	r2, #0
 800b86a:	490e      	ldr	r1, [pc, #56]	; (800b8a4 <MX_USB_DEVICE_Init+0x40>)
 800b86c:	480e      	ldr	r0, [pc, #56]	; (800b8a8 <MX_USB_DEVICE_Init+0x44>)
 800b86e:	f7fe ff75 	bl	800a75c <USBD_Init>
 800b872:	4603      	mov	r3, r0
 800b874:	2b00      	cmp	r3, #0
 800b876:	d001      	beq.n	800b87c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b878:	f7f5 ffc8 	bl	800180c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800b87c:	490b      	ldr	r1, [pc, #44]	; (800b8ac <MX_USB_DEVICE_Init+0x48>)
 800b87e:	480a      	ldr	r0, [pc, #40]	; (800b8a8 <MX_USB_DEVICE_Init+0x44>)
 800b880:	f7fe ff97 	bl	800a7b2 <USBD_RegisterClass>
 800b884:	4603      	mov	r3, r0
 800b886:	2b00      	cmp	r3, #0
 800b888:	d001      	beq.n	800b88e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b88a:	f7f5 ffbf 	bl	800180c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b88e:	4806      	ldr	r0, [pc, #24]	; (800b8a8 <MX_USB_DEVICE_Init+0x44>)
 800b890:	f7fe ffa9 	bl	800a7e6 <USBD_Start>
 800b894:	4603      	mov	r3, r0
 800b896:	2b00      	cmp	r3, #0
 800b898:	d001      	beq.n	800b89e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800b89a:	f7f5 ffb7 	bl	800180c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b89e:	bf00      	nop
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	20000114 	.word	0x20000114
 800b8a8:	20000598 	.word	0x20000598
 800b8ac:	2000000c 	.word	0x2000000c

0800b8b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	6039      	str	r1, [r7, #0]
 800b8ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	2212      	movs	r2, #18
 800b8c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b8c2:	4b03      	ldr	r3, [pc, #12]	; (800b8d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	370c      	adds	r7, #12
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr
 800b8d0:	20000130 	.word	0x20000130

0800b8d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	4603      	mov	r3, r0
 800b8dc:	6039      	str	r1, [r7, #0]
 800b8de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	2204      	movs	r2, #4
 800b8e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b8e6:	4b03      	ldr	r3, [pc, #12]	; (800b8f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	370c      	adds	r7, #12
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr
 800b8f4:	20000144 	.word	0x20000144

0800b8f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	4603      	mov	r3, r0
 800b900:	6039      	str	r1, [r7, #0]
 800b902:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b904:	79fb      	ldrb	r3, [r7, #7]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d105      	bne.n	800b916 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b90a:	683a      	ldr	r2, [r7, #0]
 800b90c:	4907      	ldr	r1, [pc, #28]	; (800b92c <USBD_FS_ProductStrDescriptor+0x34>)
 800b90e:	4808      	ldr	r0, [pc, #32]	; (800b930 <USBD_FS_ProductStrDescriptor+0x38>)
 800b910:	f7ff fee7 	bl	800b6e2 <USBD_GetString>
 800b914:	e004      	b.n	800b920 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b916:	683a      	ldr	r2, [r7, #0]
 800b918:	4904      	ldr	r1, [pc, #16]	; (800b92c <USBD_FS_ProductStrDescriptor+0x34>)
 800b91a:	4805      	ldr	r0, [pc, #20]	; (800b930 <USBD_FS_ProductStrDescriptor+0x38>)
 800b91c:	f7ff fee1 	bl	800b6e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b920:	4b02      	ldr	r3, [pc, #8]	; (800b92c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b922:	4618      	mov	r0, r3
 800b924:	3708      	adds	r7, #8
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	2000085c 	.word	0x2000085c
 800b930:	0800eae8 	.word	0x0800eae8

0800b934 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	4603      	mov	r3, r0
 800b93c:	6039      	str	r1, [r7, #0]
 800b93e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b940:	683a      	ldr	r2, [r7, #0]
 800b942:	4904      	ldr	r1, [pc, #16]	; (800b954 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b944:	4804      	ldr	r0, [pc, #16]	; (800b958 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b946:	f7ff fecc 	bl	800b6e2 <USBD_GetString>
  return USBD_StrDesc;
 800b94a:	4b02      	ldr	r3, [pc, #8]	; (800b954 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3708      	adds	r7, #8
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}
 800b954:	2000085c 	.word	0x2000085c
 800b958:	0800eb00 	.word	0x0800eb00

0800b95c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	4603      	mov	r3, r0
 800b964:	6039      	str	r1, [r7, #0]
 800b966:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	221a      	movs	r2, #26
 800b96c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b96e:	f000 f843 	bl	800b9f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b972:	4b02      	ldr	r3, [pc, #8]	; (800b97c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b974:	4618      	mov	r0, r3
 800b976:	3708      	adds	r7, #8
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	20000148 	.word	0x20000148

0800b980 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	4603      	mov	r3, r0
 800b988:	6039      	str	r1, [r7, #0]
 800b98a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b98c:	79fb      	ldrb	r3, [r7, #7]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d105      	bne.n	800b99e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b992:	683a      	ldr	r2, [r7, #0]
 800b994:	4907      	ldr	r1, [pc, #28]	; (800b9b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b996:	4808      	ldr	r0, [pc, #32]	; (800b9b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b998:	f7ff fea3 	bl	800b6e2 <USBD_GetString>
 800b99c:	e004      	b.n	800b9a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b99e:	683a      	ldr	r2, [r7, #0]
 800b9a0:	4904      	ldr	r1, [pc, #16]	; (800b9b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b9a2:	4805      	ldr	r0, [pc, #20]	; (800b9b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b9a4:	f7ff fe9d 	bl	800b6e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9a8:	4b02      	ldr	r3, [pc, #8]	; (800b9b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3708      	adds	r7, #8
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	2000085c 	.word	0x2000085c
 800b9b8:	0800eb14 	.word	0x0800eb14

0800b9bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b082      	sub	sp, #8
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	6039      	str	r1, [r7, #0]
 800b9c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b9c8:	79fb      	ldrb	r3, [r7, #7]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d105      	bne.n	800b9da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b9ce:	683a      	ldr	r2, [r7, #0]
 800b9d0:	4907      	ldr	r1, [pc, #28]	; (800b9f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b9d2:	4808      	ldr	r0, [pc, #32]	; (800b9f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b9d4:	f7ff fe85 	bl	800b6e2 <USBD_GetString>
 800b9d8:	e004      	b.n	800b9e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b9da:	683a      	ldr	r2, [r7, #0]
 800b9dc:	4904      	ldr	r1, [pc, #16]	; (800b9f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b9de:	4805      	ldr	r0, [pc, #20]	; (800b9f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b9e0:	f7ff fe7f 	bl	800b6e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9e4:	4b02      	ldr	r3, [pc, #8]	; (800b9f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3708      	adds	r7, #8
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}
 800b9ee:	bf00      	nop
 800b9f0:	2000085c 	.word	0x2000085c
 800b9f4:	0800eb20 	.word	0x0800eb20

0800b9f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b084      	sub	sp, #16
 800b9fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b9fe:	4b0f      	ldr	r3, [pc, #60]	; (800ba3c <Get_SerialNum+0x44>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ba04:	4b0e      	ldr	r3, [pc, #56]	; (800ba40 <Get_SerialNum+0x48>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ba0a:	4b0e      	ldr	r3, [pc, #56]	; (800ba44 <Get_SerialNum+0x4c>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ba10:	68fa      	ldr	r2, [r7, #12]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	4413      	add	r3, r2
 800ba16:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d009      	beq.n	800ba32 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ba1e:	2208      	movs	r2, #8
 800ba20:	4909      	ldr	r1, [pc, #36]	; (800ba48 <Get_SerialNum+0x50>)
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f000 f814 	bl	800ba50 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ba28:	2204      	movs	r2, #4
 800ba2a:	4908      	ldr	r1, [pc, #32]	; (800ba4c <Get_SerialNum+0x54>)
 800ba2c:	68b8      	ldr	r0, [r7, #8]
 800ba2e:	f000 f80f 	bl	800ba50 <IntToUnicode>
  }
}
 800ba32:	bf00      	nop
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	1ffff7ac 	.word	0x1ffff7ac
 800ba40:	1ffff7b0 	.word	0x1ffff7b0
 800ba44:	1ffff7b4 	.word	0x1ffff7b4
 800ba48:	2000014a 	.word	0x2000014a
 800ba4c:	2000015a 	.word	0x2000015a

0800ba50 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b087      	sub	sp, #28
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	4613      	mov	r3, r2
 800ba5c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ba62:	2300      	movs	r3, #0
 800ba64:	75fb      	strb	r3, [r7, #23]
 800ba66:	e027      	b.n	800bab8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	0f1b      	lsrs	r3, r3, #28
 800ba6c:	2b09      	cmp	r3, #9
 800ba6e:	d80b      	bhi.n	800ba88 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	0f1b      	lsrs	r3, r3, #28
 800ba74:	b2da      	uxtb	r2, r3
 800ba76:	7dfb      	ldrb	r3, [r7, #23]
 800ba78:	005b      	lsls	r3, r3, #1
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	440b      	add	r3, r1
 800ba80:	3230      	adds	r2, #48	; 0x30
 800ba82:	b2d2      	uxtb	r2, r2
 800ba84:	701a      	strb	r2, [r3, #0]
 800ba86:	e00a      	b.n	800ba9e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	0f1b      	lsrs	r3, r3, #28
 800ba8c:	b2da      	uxtb	r2, r3
 800ba8e:	7dfb      	ldrb	r3, [r7, #23]
 800ba90:	005b      	lsls	r3, r3, #1
 800ba92:	4619      	mov	r1, r3
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	440b      	add	r3, r1
 800ba98:	3237      	adds	r2, #55	; 0x37
 800ba9a:	b2d2      	uxtb	r2, r2
 800ba9c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	011b      	lsls	r3, r3, #4
 800baa2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800baa4:	7dfb      	ldrb	r3, [r7, #23]
 800baa6:	005b      	lsls	r3, r3, #1
 800baa8:	3301      	adds	r3, #1
 800baaa:	68ba      	ldr	r2, [r7, #8]
 800baac:	4413      	add	r3, r2
 800baae:	2200      	movs	r2, #0
 800bab0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bab2:	7dfb      	ldrb	r3, [r7, #23]
 800bab4:	3301      	adds	r3, #1
 800bab6:	75fb      	strb	r3, [r7, #23]
 800bab8:	7dfa      	ldrb	r2, [r7, #23]
 800baba:	79fb      	ldrb	r3, [r7, #7]
 800babc:	429a      	cmp	r2, r3
 800babe:	d3d3      	bcc.n	800ba68 <IntToUnicode+0x18>
  }
}
 800bac0:	bf00      	nop
 800bac2:	bf00      	nop
 800bac4:	371c      	adds	r7, #28
 800bac6:	46bd      	mov	sp, r7
 800bac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bacc:	4770      	bx	lr
	...

0800bad0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b08a      	sub	sp, #40	; 0x28
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bad8:	f107 0314 	add.w	r3, r7, #20
 800badc:	2200      	movs	r2, #0
 800bade:	601a      	str	r2, [r3, #0]
 800bae0:	605a      	str	r2, [r3, #4]
 800bae2:	609a      	str	r2, [r3, #8]
 800bae4:	60da      	str	r2, [r3, #12]
 800bae6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4a1c      	ldr	r2, [pc, #112]	; (800bb60 <HAL_PCD_MspInit+0x90>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d131      	bne.n	800bb56 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800baf2:	4b1c      	ldr	r3, [pc, #112]	; (800bb64 <HAL_PCD_MspInit+0x94>)
 800baf4:	695b      	ldr	r3, [r3, #20]
 800baf6:	4a1b      	ldr	r2, [pc, #108]	; (800bb64 <HAL_PCD_MspInit+0x94>)
 800baf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bafc:	6153      	str	r3, [r2, #20]
 800bafe:	4b19      	ldr	r3, [pc, #100]	; (800bb64 <HAL_PCD_MspInit+0x94>)
 800bb00:	695b      	ldr	r3, [r3, #20]
 800bb02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb06:	613b      	str	r3, [r7, #16]
 800bb08:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800bb0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bb0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb10:	2302      	movs	r3, #2
 800bb12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb14:	2300      	movs	r3, #0
 800bb16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bb18:	2303      	movs	r3, #3
 800bb1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800bb1c:	230e      	movs	r3, #14
 800bb1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb20:	f107 0314 	add.w	r3, r7, #20
 800bb24:	4619      	mov	r1, r3
 800bb26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bb2a:	f7f6 fae3 	bl	80020f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bb2e:	4b0d      	ldr	r3, [pc, #52]	; (800bb64 <HAL_PCD_MspInit+0x94>)
 800bb30:	69db      	ldr	r3, [r3, #28]
 800bb32:	4a0c      	ldr	r2, [pc, #48]	; (800bb64 <HAL_PCD_MspInit+0x94>)
 800bb34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bb38:	61d3      	str	r3, [r2, #28]
 800bb3a:	4b0a      	ldr	r3, [pc, #40]	; (800bb64 <HAL_PCD_MspInit+0x94>)
 800bb3c:	69db      	ldr	r3, [r3, #28]
 800bb3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb42:	60fb      	str	r3, [r7, #12]
 800bb44:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800bb46:	2200      	movs	r2, #0
 800bb48:	2100      	movs	r1, #0
 800bb4a:	2014      	movs	r0, #20
 800bb4c:	f7f6 fa9b 	bl	8002086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800bb50:	2014      	movs	r0, #20
 800bb52:	f7f6 fab4 	bl	80020be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bb56:	bf00      	nop
 800bb58:	3728      	adds	r7, #40	; 0x28
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	40005c00 	.word	0x40005c00
 800bb64:	40021000 	.word	0x40021000

0800bb68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	4610      	mov	r0, r2
 800bb80:	f7fe fe7a 	bl	800a878 <USBD_LL_SetupStage>
}
 800bb84:	bf00      	nop
 800bb86:	3708      	adds	r7, #8
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	460b      	mov	r3, r1
 800bb96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bb9e:	78fa      	ldrb	r2, [r7, #3]
 800bba0:	6879      	ldr	r1, [r7, #4]
 800bba2:	4613      	mov	r3, r2
 800bba4:	009b      	lsls	r3, r3, #2
 800bba6:	4413      	add	r3, r2
 800bba8:	00db      	lsls	r3, r3, #3
 800bbaa:	440b      	add	r3, r1
 800bbac:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	78fb      	ldrb	r3, [r7, #3]
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	f7fe feac 	bl	800a912 <USBD_LL_DataOutStage>
}
 800bbba:	bf00      	nop
 800bbbc:	3708      	adds	r7, #8
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}

0800bbc2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbc2:	b580      	push	{r7, lr}
 800bbc4:	b082      	sub	sp, #8
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	6078      	str	r0, [r7, #4]
 800bbca:	460b      	mov	r3, r1
 800bbcc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bbd4:	78fa      	ldrb	r2, [r7, #3]
 800bbd6:	6879      	ldr	r1, [r7, #4]
 800bbd8:	4613      	mov	r3, r2
 800bbda:	009b      	lsls	r3, r3, #2
 800bbdc:	4413      	add	r3, r2
 800bbde:	00db      	lsls	r3, r3, #3
 800bbe0:	440b      	add	r3, r1
 800bbe2:	333c      	adds	r3, #60	; 0x3c
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	78fb      	ldrb	r3, [r7, #3]
 800bbe8:	4619      	mov	r1, r3
 800bbea:	f7fe ff03 	bl	800a9f4 <USBD_LL_DataInStage>
}
 800bbee:	bf00      	nop
 800bbf0:	3708      	adds	r7, #8
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b082      	sub	sp, #8
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7ff f816 	bl	800ac36 <USBD_LL_SOF>
}
 800bc0a:	bf00      	nop
 800bc0c:	3708      	adds	r7, #8
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}

0800bc12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc12:	b580      	push	{r7, lr}
 800bc14:	b084      	sub	sp, #16
 800bc16:	af00      	add	r7, sp, #0
 800bc18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	689b      	ldr	r3, [r3, #8]
 800bc22:	2b02      	cmp	r3, #2
 800bc24:	d001      	beq.n	800bc2a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bc26:	f7f5 fdf1 	bl	800180c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bc30:	7bfa      	ldrb	r2, [r7, #15]
 800bc32:	4611      	mov	r1, r2
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7fe ffc3 	bl	800abc0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7fe ff7c 	bl	800ab3e <USBD_LL_Reset>
}
 800bc46:	bf00      	nop
 800bc48:	3710      	adds	r7, #16
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
	...

0800bc50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b082      	sub	sp, #8
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f7fe ffbe 	bl	800abe0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	699b      	ldr	r3, [r3, #24]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d005      	beq.n	800bc78 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc6c:	4b04      	ldr	r3, [pc, #16]	; (800bc80 <HAL_PCD_SuspendCallback+0x30>)
 800bc6e:	691b      	ldr	r3, [r3, #16]
 800bc70:	4a03      	ldr	r2, [pc, #12]	; (800bc80 <HAL_PCD_SuspendCallback+0x30>)
 800bc72:	f043 0306 	orr.w	r3, r3, #6
 800bc76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bc78:	bf00      	nop
 800bc7a:	3708      	adds	r7, #8
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	e000ed00 	.word	0xe000ed00

0800bc84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7fe ffb9 	bl	800ac0a <USBD_LL_Resume>
}
 800bc98:	bf00      	nop
 800bc9a:	3708      	adds	r7, #8
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bca8:	4a1f      	ldr	r2, [pc, #124]	; (800bd28 <USBD_LL_Init+0x88>)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	4a1d      	ldr	r2, [pc, #116]	; (800bd28 <USBD_LL_Init+0x88>)
 800bcb4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800bcb8:	4b1b      	ldr	r3, [pc, #108]	; (800bd28 <USBD_LL_Init+0x88>)
 800bcba:	4a1c      	ldr	r2, [pc, #112]	; (800bd2c <USBD_LL_Init+0x8c>)
 800bcbc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bcbe:	4b1a      	ldr	r3, [pc, #104]	; (800bd28 <USBD_LL_Init+0x88>)
 800bcc0:	2208      	movs	r2, #8
 800bcc2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bcc4:	4b18      	ldr	r3, [pc, #96]	; (800bd28 <USBD_LL_Init+0x88>)
 800bcc6:	2202      	movs	r2, #2
 800bcc8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bcca:	4b17      	ldr	r3, [pc, #92]	; (800bd28 <USBD_LL_Init+0x88>)
 800bccc:	2202      	movs	r2, #2
 800bcce:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bcd0:	4b15      	ldr	r3, [pc, #84]	; (800bd28 <USBD_LL_Init+0x88>)
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bcd6:	4b14      	ldr	r3, [pc, #80]	; (800bd28 <USBD_LL_Init+0x88>)
 800bcd8:	2200      	movs	r2, #0
 800bcda:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bcdc:	4812      	ldr	r0, [pc, #72]	; (800bd28 <USBD_LL_Init+0x88>)
 800bcde:	f7f6 ffe0 	bl	8002ca2 <HAL_PCD_Init>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d001      	beq.n	800bcec <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800bce8:	f7f5 fd90 	bl	800180c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bcf2:	2318      	movs	r3, #24
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	2100      	movs	r1, #0
 800bcf8:	f7f8 fc51 	bl	800459e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bd02:	2358      	movs	r3, #88	; 0x58
 800bd04:	2200      	movs	r2, #0
 800bd06:	2180      	movs	r1, #128	; 0x80
 800bd08:	f7f8 fc49 	bl	800459e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bd12:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd16:	2200      	movs	r2, #0
 800bd18:	2181      	movs	r1, #129	; 0x81
 800bd1a:	f7f8 fc40 	bl	800459e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800bd1e:	2300      	movs	r3, #0
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3708      	adds	r7, #8
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}
 800bd28:	20000a5c 	.word	0x20000a5c
 800bd2c:	40005c00 	.word	0x40005c00

0800bd30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7f7 f87d 	bl	8002e46 <HAL_PCD_Start>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd50:	7bfb      	ldrb	r3, [r7, #15]
 800bd52:	4618      	mov	r0, r3
 800bd54:	f000 f940 	bl	800bfd8 <USBD_Get_USB_Status>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3710      	adds	r7, #16
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}

0800bd66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bd66:	b580      	push	{r7, lr}
 800bd68:	b084      	sub	sp, #16
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
 800bd6e:	4608      	mov	r0, r1
 800bd70:	4611      	mov	r1, r2
 800bd72:	461a      	mov	r2, r3
 800bd74:	4603      	mov	r3, r0
 800bd76:	70fb      	strb	r3, [r7, #3]
 800bd78:	460b      	mov	r3, r1
 800bd7a:	70bb      	strb	r3, [r7, #2]
 800bd7c:	4613      	mov	r3, r2
 800bd7e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd80:	2300      	movs	r3, #0
 800bd82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd84:	2300      	movs	r3, #0
 800bd86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bd8e:	78bb      	ldrb	r3, [r7, #2]
 800bd90:	883a      	ldrh	r2, [r7, #0]
 800bd92:	78f9      	ldrb	r1, [r7, #3]
 800bd94:	f7f7 f976 	bl	8003084 <HAL_PCD_EP_Open>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd9c:	7bfb      	ldrb	r3, [r7, #15]
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f000 f91a 	bl	800bfd8 <USBD_Get_USB_Status>
 800bda4:	4603      	mov	r3, r0
 800bda6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bda8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3710      	adds	r7, #16
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}

0800bdb2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdb2:	b580      	push	{r7, lr}
 800bdb4:	b084      	sub	sp, #16
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	6078      	str	r0, [r7, #4]
 800bdba:	460b      	mov	r3, r1
 800bdbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bdcc:	78fa      	ldrb	r2, [r7, #3]
 800bdce:	4611      	mov	r1, r2
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7f7 f9b4 	bl	800313e <HAL_PCD_EP_Close>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdda:	7bfb      	ldrb	r3, [r7, #15]
 800bddc:	4618      	mov	r0, r3
 800bdde:	f000 f8fb 	bl	800bfd8 <USBD_Get_USB_Status>
 800bde2:	4603      	mov	r3, r0
 800bde4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bde6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3710      	adds	r7, #16
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be00:	2300      	movs	r3, #0
 800be02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be0a:	78fa      	ldrb	r2, [r7, #3]
 800be0c:	4611      	mov	r1, r2
 800be0e:	4618      	mov	r0, r3
 800be10:	f7f7 fa45 	bl	800329e <HAL_PCD_EP_SetStall>
 800be14:	4603      	mov	r3, r0
 800be16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be18:	7bfb      	ldrb	r3, [r7, #15]
 800be1a:	4618      	mov	r0, r3
 800be1c:	f000 f8dc 	bl	800bfd8 <USBD_Get_USB_Status>
 800be20:	4603      	mov	r3, r0
 800be22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be24:	7bbb      	ldrb	r3, [r7, #14]
}
 800be26:	4618      	mov	r0, r3
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b084      	sub	sp, #16
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
 800be36:	460b      	mov	r3, r1
 800be38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be3a:	2300      	movs	r3, #0
 800be3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be3e:	2300      	movs	r3, #0
 800be40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be48:	78fa      	ldrb	r2, [r7, #3]
 800be4a:	4611      	mov	r1, r2
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7f7 fa78 	bl	8003342 <HAL_PCD_EP_ClrStall>
 800be52:	4603      	mov	r3, r0
 800be54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be56:	7bfb      	ldrb	r3, [r7, #15]
 800be58:	4618      	mov	r0, r3
 800be5a:	f000 f8bd 	bl	800bfd8 <USBD_Get_USB_Status>
 800be5e:	4603      	mov	r3, r0
 800be60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be62:	7bbb      	ldrb	r3, [r7, #14]
}
 800be64:	4618      	mov	r0, r3
 800be66:	3710      	adds	r7, #16
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b085      	sub	sp, #20
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	460b      	mov	r3, r1
 800be76:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be7e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800be80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be84:	2b00      	cmp	r3, #0
 800be86:	da0c      	bge.n	800bea2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800be88:	78fb      	ldrb	r3, [r7, #3]
 800be8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be8e:	68f9      	ldr	r1, [r7, #12]
 800be90:	1c5a      	adds	r2, r3, #1
 800be92:	4613      	mov	r3, r2
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	4413      	add	r3, r2
 800be98:	00db      	lsls	r3, r3, #3
 800be9a:	440b      	add	r3, r1
 800be9c:	3302      	adds	r3, #2
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	e00b      	b.n	800beba <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bea2:	78fb      	ldrb	r3, [r7, #3]
 800bea4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bea8:	68f9      	ldr	r1, [r7, #12]
 800beaa:	4613      	mov	r3, r2
 800beac:	009b      	lsls	r3, r3, #2
 800beae:	4413      	add	r3, r2
 800beb0:	00db      	lsls	r3, r3, #3
 800beb2:	440b      	add	r3, r1
 800beb4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800beb8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3714      	adds	r7, #20
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr

0800bec6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bec6:	b580      	push	{r7, lr}
 800bec8:	b084      	sub	sp, #16
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
 800bece:	460b      	mov	r3, r1
 800bed0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bed2:	2300      	movs	r3, #0
 800bed4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bed6:	2300      	movs	r3, #0
 800bed8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bee0:	78fa      	ldrb	r2, [r7, #3]
 800bee2:	4611      	mov	r1, r2
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7f7 f8a8 	bl	800303a <HAL_PCD_SetAddress>
 800beea:	4603      	mov	r3, r0
 800beec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800beee:	7bfb      	ldrb	r3, [r7, #15]
 800bef0:	4618      	mov	r0, r3
 800bef2:	f000 f871 	bl	800bfd8 <USBD_Get_USB_Status>
 800bef6:	4603      	mov	r3, r0
 800bef8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800befa:	7bbb      	ldrb	r3, [r7, #14]
}
 800befc:	4618      	mov	r0, r3
 800befe:	3710      	adds	r7, #16
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b086      	sub	sp, #24
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	607a      	str	r2, [r7, #4]
 800bf0e:	461a      	mov	r2, r3
 800bf10:	460b      	mov	r3, r1
 800bf12:	72fb      	strb	r3, [r7, #11]
 800bf14:	4613      	mov	r3, r2
 800bf16:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf26:	893b      	ldrh	r3, [r7, #8]
 800bf28:	7af9      	ldrb	r1, [r7, #11]
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	f7f7 f980 	bl	8003230 <HAL_PCD_EP_Transmit>
 800bf30:	4603      	mov	r3, r0
 800bf32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf34:	7dfb      	ldrb	r3, [r7, #23]
 800bf36:	4618      	mov	r0, r3
 800bf38:	f000 f84e 	bl	800bfd8 <USBD_Get_USB_Status>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf40:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3718      	adds	r7, #24
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}

0800bf4a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bf4a:	b580      	push	{r7, lr}
 800bf4c:	b086      	sub	sp, #24
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	60f8      	str	r0, [r7, #12]
 800bf52:	607a      	str	r2, [r7, #4]
 800bf54:	461a      	mov	r2, r3
 800bf56:	460b      	mov	r3, r1
 800bf58:	72fb      	strb	r3, [r7, #11]
 800bf5a:	4613      	mov	r3, r2
 800bf5c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf62:	2300      	movs	r3, #0
 800bf64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf6c:	893b      	ldrh	r3, [r7, #8]
 800bf6e:	7af9      	ldrb	r1, [r7, #11]
 800bf70:	687a      	ldr	r2, [r7, #4]
 800bf72:	f7f7 f92c 	bl	80031ce <HAL_PCD_EP_Receive>
 800bf76:	4603      	mov	r3, r0
 800bf78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf7a:	7dfb      	ldrb	r3, [r7, #23]
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f000 f82b 	bl	800bfd8 <USBD_Get_USB_Status>
 800bf82:	4603      	mov	r3, r0
 800bf84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf86:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3718      	adds	r7, #24
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b083      	sub	sp, #12
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bf98:	4b03      	ldr	r3, [pc, #12]	; (800bfa8 <USBD_static_malloc+0x18>)
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	370c      	adds	r7, #12
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr
 800bfa6:	bf00      	nop
 800bfa8:	20000d48 	.word	0x20000d48

0800bfac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b083      	sub	sp, #12
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]

}
 800bfb4:	bf00      	nop
 800bfb6:	370c      	adds	r7, #12
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr

0800bfc0 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b083      	sub	sp, #12
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	460b      	mov	r3, r1
 800bfca:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bfcc:	bf00      	nop
 800bfce:	370c      	adds	r7, #12
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b085      	sub	sp, #20
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	4603      	mov	r3, r0
 800bfe0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bfe6:	79fb      	ldrb	r3, [r7, #7]
 800bfe8:	2b03      	cmp	r3, #3
 800bfea:	d817      	bhi.n	800c01c <USBD_Get_USB_Status+0x44>
 800bfec:	a201      	add	r2, pc, #4	; (adr r2, 800bff4 <USBD_Get_USB_Status+0x1c>)
 800bfee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff2:	bf00      	nop
 800bff4:	0800c005 	.word	0x0800c005
 800bff8:	0800c00b 	.word	0x0800c00b
 800bffc:	0800c011 	.word	0x0800c011
 800c000:	0800c017 	.word	0x0800c017
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c004:	2300      	movs	r3, #0
 800c006:	73fb      	strb	r3, [r7, #15]
    break;
 800c008:	e00b      	b.n	800c022 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c00a:	2302      	movs	r3, #2
 800c00c:	73fb      	strb	r3, [r7, #15]
    break;
 800c00e:	e008      	b.n	800c022 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c010:	2301      	movs	r3, #1
 800c012:	73fb      	strb	r3, [r7, #15]
    break;
 800c014:	e005      	b.n	800c022 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c016:	2302      	movs	r3, #2
 800c018:	73fb      	strb	r3, [r7, #15]
    break;
 800c01a:	e002      	b.n	800c022 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c01c:	2302      	movs	r3, #2
 800c01e:	73fb      	strb	r3, [r7, #15]
    break;
 800c020:	bf00      	nop
  }
  return usb_status;
 800c022:	7bfb      	ldrb	r3, [r7, #15]
}
 800c024:	4618      	mov	r0, r3
 800c026:	3714      	adds	r7, #20
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr

0800c030 <__errno>:
 800c030:	4b01      	ldr	r3, [pc, #4]	; (800c038 <__errno+0x8>)
 800c032:	6818      	ldr	r0, [r3, #0]
 800c034:	4770      	bx	lr
 800c036:	bf00      	nop
 800c038:	20000164 	.word	0x20000164

0800c03c <__libc_init_array>:
 800c03c:	b570      	push	{r4, r5, r6, lr}
 800c03e:	4d0d      	ldr	r5, [pc, #52]	; (800c074 <__libc_init_array+0x38>)
 800c040:	4c0d      	ldr	r4, [pc, #52]	; (800c078 <__libc_init_array+0x3c>)
 800c042:	1b64      	subs	r4, r4, r5
 800c044:	10a4      	asrs	r4, r4, #2
 800c046:	2600      	movs	r6, #0
 800c048:	42a6      	cmp	r6, r4
 800c04a:	d109      	bne.n	800c060 <__libc_init_array+0x24>
 800c04c:	4d0b      	ldr	r5, [pc, #44]	; (800c07c <__libc_init_array+0x40>)
 800c04e:	4c0c      	ldr	r4, [pc, #48]	; (800c080 <__libc_init_array+0x44>)
 800c050:	f002 fd36 	bl	800eac0 <_init>
 800c054:	1b64      	subs	r4, r4, r5
 800c056:	10a4      	asrs	r4, r4, #2
 800c058:	2600      	movs	r6, #0
 800c05a:	42a6      	cmp	r6, r4
 800c05c:	d105      	bne.n	800c06a <__libc_init_array+0x2e>
 800c05e:	bd70      	pop	{r4, r5, r6, pc}
 800c060:	f855 3b04 	ldr.w	r3, [r5], #4
 800c064:	4798      	blx	r3
 800c066:	3601      	adds	r6, #1
 800c068:	e7ee      	b.n	800c048 <__libc_init_array+0xc>
 800c06a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c06e:	4798      	blx	r3
 800c070:	3601      	adds	r6, #1
 800c072:	e7f2      	b.n	800c05a <__libc_init_array+0x1e>
 800c074:	0800ef44 	.word	0x0800ef44
 800c078:	0800ef44 	.word	0x0800ef44
 800c07c:	0800ef44 	.word	0x0800ef44
 800c080:	0800ef48 	.word	0x0800ef48

0800c084 <memset>:
 800c084:	4402      	add	r2, r0
 800c086:	4603      	mov	r3, r0
 800c088:	4293      	cmp	r3, r2
 800c08a:	d100      	bne.n	800c08e <memset+0xa>
 800c08c:	4770      	bx	lr
 800c08e:	f803 1b01 	strb.w	r1, [r3], #1
 800c092:	e7f9      	b.n	800c088 <memset+0x4>

0800c094 <__cvt>:
 800c094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c098:	ec55 4b10 	vmov	r4, r5, d0
 800c09c:	2d00      	cmp	r5, #0
 800c09e:	460e      	mov	r6, r1
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	462b      	mov	r3, r5
 800c0a4:	bfbb      	ittet	lt
 800c0a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c0aa:	461d      	movlt	r5, r3
 800c0ac:	2300      	movge	r3, #0
 800c0ae:	232d      	movlt	r3, #45	; 0x2d
 800c0b0:	700b      	strb	r3, [r1, #0]
 800c0b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c0b8:	4691      	mov	r9, r2
 800c0ba:	f023 0820 	bic.w	r8, r3, #32
 800c0be:	bfbc      	itt	lt
 800c0c0:	4622      	movlt	r2, r4
 800c0c2:	4614      	movlt	r4, r2
 800c0c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c0c8:	d005      	beq.n	800c0d6 <__cvt+0x42>
 800c0ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c0ce:	d100      	bne.n	800c0d2 <__cvt+0x3e>
 800c0d0:	3601      	adds	r6, #1
 800c0d2:	2102      	movs	r1, #2
 800c0d4:	e000      	b.n	800c0d8 <__cvt+0x44>
 800c0d6:	2103      	movs	r1, #3
 800c0d8:	ab03      	add	r3, sp, #12
 800c0da:	9301      	str	r3, [sp, #4]
 800c0dc:	ab02      	add	r3, sp, #8
 800c0de:	9300      	str	r3, [sp, #0]
 800c0e0:	ec45 4b10 	vmov	d0, r4, r5
 800c0e4:	4653      	mov	r3, sl
 800c0e6:	4632      	mov	r2, r6
 800c0e8:	f000 fcca 	bl	800ca80 <_dtoa_r>
 800c0ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c0f0:	4607      	mov	r7, r0
 800c0f2:	d102      	bne.n	800c0fa <__cvt+0x66>
 800c0f4:	f019 0f01 	tst.w	r9, #1
 800c0f8:	d022      	beq.n	800c140 <__cvt+0xac>
 800c0fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c0fe:	eb07 0906 	add.w	r9, r7, r6
 800c102:	d110      	bne.n	800c126 <__cvt+0x92>
 800c104:	783b      	ldrb	r3, [r7, #0]
 800c106:	2b30      	cmp	r3, #48	; 0x30
 800c108:	d10a      	bne.n	800c120 <__cvt+0x8c>
 800c10a:	2200      	movs	r2, #0
 800c10c:	2300      	movs	r3, #0
 800c10e:	4620      	mov	r0, r4
 800c110:	4629      	mov	r1, r5
 800c112:	f7f4 fcd9 	bl	8000ac8 <__aeabi_dcmpeq>
 800c116:	b918      	cbnz	r0, 800c120 <__cvt+0x8c>
 800c118:	f1c6 0601 	rsb	r6, r6, #1
 800c11c:	f8ca 6000 	str.w	r6, [sl]
 800c120:	f8da 3000 	ldr.w	r3, [sl]
 800c124:	4499      	add	r9, r3
 800c126:	2200      	movs	r2, #0
 800c128:	2300      	movs	r3, #0
 800c12a:	4620      	mov	r0, r4
 800c12c:	4629      	mov	r1, r5
 800c12e:	f7f4 fccb 	bl	8000ac8 <__aeabi_dcmpeq>
 800c132:	b108      	cbz	r0, 800c138 <__cvt+0xa4>
 800c134:	f8cd 900c 	str.w	r9, [sp, #12]
 800c138:	2230      	movs	r2, #48	; 0x30
 800c13a:	9b03      	ldr	r3, [sp, #12]
 800c13c:	454b      	cmp	r3, r9
 800c13e:	d307      	bcc.n	800c150 <__cvt+0xbc>
 800c140:	9b03      	ldr	r3, [sp, #12]
 800c142:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c144:	1bdb      	subs	r3, r3, r7
 800c146:	4638      	mov	r0, r7
 800c148:	6013      	str	r3, [r2, #0]
 800c14a:	b004      	add	sp, #16
 800c14c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c150:	1c59      	adds	r1, r3, #1
 800c152:	9103      	str	r1, [sp, #12]
 800c154:	701a      	strb	r2, [r3, #0]
 800c156:	e7f0      	b.n	800c13a <__cvt+0xa6>

0800c158 <__exponent>:
 800c158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c15a:	4603      	mov	r3, r0
 800c15c:	2900      	cmp	r1, #0
 800c15e:	bfb8      	it	lt
 800c160:	4249      	neglt	r1, r1
 800c162:	f803 2b02 	strb.w	r2, [r3], #2
 800c166:	bfb4      	ite	lt
 800c168:	222d      	movlt	r2, #45	; 0x2d
 800c16a:	222b      	movge	r2, #43	; 0x2b
 800c16c:	2909      	cmp	r1, #9
 800c16e:	7042      	strb	r2, [r0, #1]
 800c170:	dd2a      	ble.n	800c1c8 <__exponent+0x70>
 800c172:	f10d 0407 	add.w	r4, sp, #7
 800c176:	46a4      	mov	ip, r4
 800c178:	270a      	movs	r7, #10
 800c17a:	46a6      	mov	lr, r4
 800c17c:	460a      	mov	r2, r1
 800c17e:	fb91 f6f7 	sdiv	r6, r1, r7
 800c182:	fb07 1516 	mls	r5, r7, r6, r1
 800c186:	3530      	adds	r5, #48	; 0x30
 800c188:	2a63      	cmp	r2, #99	; 0x63
 800c18a:	f104 34ff 	add.w	r4, r4, #4294967295
 800c18e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c192:	4631      	mov	r1, r6
 800c194:	dcf1      	bgt.n	800c17a <__exponent+0x22>
 800c196:	3130      	adds	r1, #48	; 0x30
 800c198:	f1ae 0502 	sub.w	r5, lr, #2
 800c19c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c1a0:	1c44      	adds	r4, r0, #1
 800c1a2:	4629      	mov	r1, r5
 800c1a4:	4561      	cmp	r1, ip
 800c1a6:	d30a      	bcc.n	800c1be <__exponent+0x66>
 800c1a8:	f10d 0209 	add.w	r2, sp, #9
 800c1ac:	eba2 020e 	sub.w	r2, r2, lr
 800c1b0:	4565      	cmp	r5, ip
 800c1b2:	bf88      	it	hi
 800c1b4:	2200      	movhi	r2, #0
 800c1b6:	4413      	add	r3, r2
 800c1b8:	1a18      	subs	r0, r3, r0
 800c1ba:	b003      	add	sp, #12
 800c1bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c1c6:	e7ed      	b.n	800c1a4 <__exponent+0x4c>
 800c1c8:	2330      	movs	r3, #48	; 0x30
 800c1ca:	3130      	adds	r1, #48	; 0x30
 800c1cc:	7083      	strb	r3, [r0, #2]
 800c1ce:	70c1      	strb	r1, [r0, #3]
 800c1d0:	1d03      	adds	r3, r0, #4
 800c1d2:	e7f1      	b.n	800c1b8 <__exponent+0x60>

0800c1d4 <_printf_float>:
 800c1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d8:	ed2d 8b02 	vpush	{d8}
 800c1dc:	b08d      	sub	sp, #52	; 0x34
 800c1de:	460c      	mov	r4, r1
 800c1e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c1e4:	4616      	mov	r6, r2
 800c1e6:	461f      	mov	r7, r3
 800c1e8:	4605      	mov	r5, r0
 800c1ea:	f001 fa37 	bl	800d65c <_localeconv_r>
 800c1ee:	f8d0 a000 	ldr.w	sl, [r0]
 800c1f2:	4650      	mov	r0, sl
 800c1f4:	f7f3 ffec 	bl	80001d0 <strlen>
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	930a      	str	r3, [sp, #40]	; 0x28
 800c1fc:	6823      	ldr	r3, [r4, #0]
 800c1fe:	9305      	str	r3, [sp, #20]
 800c200:	f8d8 3000 	ldr.w	r3, [r8]
 800c204:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c208:	3307      	adds	r3, #7
 800c20a:	f023 0307 	bic.w	r3, r3, #7
 800c20e:	f103 0208 	add.w	r2, r3, #8
 800c212:	f8c8 2000 	str.w	r2, [r8]
 800c216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c21e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c222:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c226:	9307      	str	r3, [sp, #28]
 800c228:	f8cd 8018 	str.w	r8, [sp, #24]
 800c22c:	ee08 0a10 	vmov	s16, r0
 800c230:	4b9f      	ldr	r3, [pc, #636]	; (800c4b0 <_printf_float+0x2dc>)
 800c232:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c236:	f04f 32ff 	mov.w	r2, #4294967295
 800c23a:	f7f4 fc77 	bl	8000b2c <__aeabi_dcmpun>
 800c23e:	bb88      	cbnz	r0, 800c2a4 <_printf_float+0xd0>
 800c240:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c244:	4b9a      	ldr	r3, [pc, #616]	; (800c4b0 <_printf_float+0x2dc>)
 800c246:	f04f 32ff 	mov.w	r2, #4294967295
 800c24a:	f7f4 fc51 	bl	8000af0 <__aeabi_dcmple>
 800c24e:	bb48      	cbnz	r0, 800c2a4 <_printf_float+0xd0>
 800c250:	2200      	movs	r2, #0
 800c252:	2300      	movs	r3, #0
 800c254:	4640      	mov	r0, r8
 800c256:	4649      	mov	r1, r9
 800c258:	f7f4 fc40 	bl	8000adc <__aeabi_dcmplt>
 800c25c:	b110      	cbz	r0, 800c264 <_printf_float+0x90>
 800c25e:	232d      	movs	r3, #45	; 0x2d
 800c260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c264:	4b93      	ldr	r3, [pc, #588]	; (800c4b4 <_printf_float+0x2e0>)
 800c266:	4894      	ldr	r0, [pc, #592]	; (800c4b8 <_printf_float+0x2e4>)
 800c268:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c26c:	bf94      	ite	ls
 800c26e:	4698      	movls	r8, r3
 800c270:	4680      	movhi	r8, r0
 800c272:	2303      	movs	r3, #3
 800c274:	6123      	str	r3, [r4, #16]
 800c276:	9b05      	ldr	r3, [sp, #20]
 800c278:	f023 0204 	bic.w	r2, r3, #4
 800c27c:	6022      	str	r2, [r4, #0]
 800c27e:	f04f 0900 	mov.w	r9, #0
 800c282:	9700      	str	r7, [sp, #0]
 800c284:	4633      	mov	r3, r6
 800c286:	aa0b      	add	r2, sp, #44	; 0x2c
 800c288:	4621      	mov	r1, r4
 800c28a:	4628      	mov	r0, r5
 800c28c:	f000 f9d8 	bl	800c640 <_printf_common>
 800c290:	3001      	adds	r0, #1
 800c292:	f040 8090 	bne.w	800c3b6 <_printf_float+0x1e2>
 800c296:	f04f 30ff 	mov.w	r0, #4294967295
 800c29a:	b00d      	add	sp, #52	; 0x34
 800c29c:	ecbd 8b02 	vpop	{d8}
 800c2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a4:	4642      	mov	r2, r8
 800c2a6:	464b      	mov	r3, r9
 800c2a8:	4640      	mov	r0, r8
 800c2aa:	4649      	mov	r1, r9
 800c2ac:	f7f4 fc3e 	bl	8000b2c <__aeabi_dcmpun>
 800c2b0:	b140      	cbz	r0, 800c2c4 <_printf_float+0xf0>
 800c2b2:	464b      	mov	r3, r9
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	bfbc      	itt	lt
 800c2b8:	232d      	movlt	r3, #45	; 0x2d
 800c2ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c2be:	487f      	ldr	r0, [pc, #508]	; (800c4bc <_printf_float+0x2e8>)
 800c2c0:	4b7f      	ldr	r3, [pc, #508]	; (800c4c0 <_printf_float+0x2ec>)
 800c2c2:	e7d1      	b.n	800c268 <_printf_float+0x94>
 800c2c4:	6863      	ldr	r3, [r4, #4]
 800c2c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c2ca:	9206      	str	r2, [sp, #24]
 800c2cc:	1c5a      	adds	r2, r3, #1
 800c2ce:	d13f      	bne.n	800c350 <_printf_float+0x17c>
 800c2d0:	2306      	movs	r3, #6
 800c2d2:	6063      	str	r3, [r4, #4]
 800c2d4:	9b05      	ldr	r3, [sp, #20]
 800c2d6:	6861      	ldr	r1, [r4, #4]
 800c2d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c2dc:	2300      	movs	r3, #0
 800c2de:	9303      	str	r3, [sp, #12]
 800c2e0:	ab0a      	add	r3, sp, #40	; 0x28
 800c2e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c2e6:	ab09      	add	r3, sp, #36	; 0x24
 800c2e8:	ec49 8b10 	vmov	d0, r8, r9
 800c2ec:	9300      	str	r3, [sp, #0]
 800c2ee:	6022      	str	r2, [r4, #0]
 800c2f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c2f4:	4628      	mov	r0, r5
 800c2f6:	f7ff fecd 	bl	800c094 <__cvt>
 800c2fa:	9b06      	ldr	r3, [sp, #24]
 800c2fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c2fe:	2b47      	cmp	r3, #71	; 0x47
 800c300:	4680      	mov	r8, r0
 800c302:	d108      	bne.n	800c316 <_printf_float+0x142>
 800c304:	1cc8      	adds	r0, r1, #3
 800c306:	db02      	blt.n	800c30e <_printf_float+0x13a>
 800c308:	6863      	ldr	r3, [r4, #4]
 800c30a:	4299      	cmp	r1, r3
 800c30c:	dd41      	ble.n	800c392 <_printf_float+0x1be>
 800c30e:	f1ab 0b02 	sub.w	fp, fp, #2
 800c312:	fa5f fb8b 	uxtb.w	fp, fp
 800c316:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c31a:	d820      	bhi.n	800c35e <_printf_float+0x18a>
 800c31c:	3901      	subs	r1, #1
 800c31e:	465a      	mov	r2, fp
 800c320:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c324:	9109      	str	r1, [sp, #36]	; 0x24
 800c326:	f7ff ff17 	bl	800c158 <__exponent>
 800c32a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c32c:	1813      	adds	r3, r2, r0
 800c32e:	2a01      	cmp	r2, #1
 800c330:	4681      	mov	r9, r0
 800c332:	6123      	str	r3, [r4, #16]
 800c334:	dc02      	bgt.n	800c33c <_printf_float+0x168>
 800c336:	6822      	ldr	r2, [r4, #0]
 800c338:	07d2      	lsls	r2, r2, #31
 800c33a:	d501      	bpl.n	800c340 <_printf_float+0x16c>
 800c33c:	3301      	adds	r3, #1
 800c33e:	6123      	str	r3, [r4, #16]
 800c340:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c344:	2b00      	cmp	r3, #0
 800c346:	d09c      	beq.n	800c282 <_printf_float+0xae>
 800c348:	232d      	movs	r3, #45	; 0x2d
 800c34a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c34e:	e798      	b.n	800c282 <_printf_float+0xae>
 800c350:	9a06      	ldr	r2, [sp, #24]
 800c352:	2a47      	cmp	r2, #71	; 0x47
 800c354:	d1be      	bne.n	800c2d4 <_printf_float+0x100>
 800c356:	2b00      	cmp	r3, #0
 800c358:	d1bc      	bne.n	800c2d4 <_printf_float+0x100>
 800c35a:	2301      	movs	r3, #1
 800c35c:	e7b9      	b.n	800c2d2 <_printf_float+0xfe>
 800c35e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c362:	d118      	bne.n	800c396 <_printf_float+0x1c2>
 800c364:	2900      	cmp	r1, #0
 800c366:	6863      	ldr	r3, [r4, #4]
 800c368:	dd0b      	ble.n	800c382 <_printf_float+0x1ae>
 800c36a:	6121      	str	r1, [r4, #16]
 800c36c:	b913      	cbnz	r3, 800c374 <_printf_float+0x1a0>
 800c36e:	6822      	ldr	r2, [r4, #0]
 800c370:	07d0      	lsls	r0, r2, #31
 800c372:	d502      	bpl.n	800c37a <_printf_float+0x1a6>
 800c374:	3301      	adds	r3, #1
 800c376:	440b      	add	r3, r1
 800c378:	6123      	str	r3, [r4, #16]
 800c37a:	65a1      	str	r1, [r4, #88]	; 0x58
 800c37c:	f04f 0900 	mov.w	r9, #0
 800c380:	e7de      	b.n	800c340 <_printf_float+0x16c>
 800c382:	b913      	cbnz	r3, 800c38a <_printf_float+0x1b6>
 800c384:	6822      	ldr	r2, [r4, #0]
 800c386:	07d2      	lsls	r2, r2, #31
 800c388:	d501      	bpl.n	800c38e <_printf_float+0x1ba>
 800c38a:	3302      	adds	r3, #2
 800c38c:	e7f4      	b.n	800c378 <_printf_float+0x1a4>
 800c38e:	2301      	movs	r3, #1
 800c390:	e7f2      	b.n	800c378 <_printf_float+0x1a4>
 800c392:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c398:	4299      	cmp	r1, r3
 800c39a:	db05      	blt.n	800c3a8 <_printf_float+0x1d4>
 800c39c:	6823      	ldr	r3, [r4, #0]
 800c39e:	6121      	str	r1, [r4, #16]
 800c3a0:	07d8      	lsls	r0, r3, #31
 800c3a2:	d5ea      	bpl.n	800c37a <_printf_float+0x1a6>
 800c3a4:	1c4b      	adds	r3, r1, #1
 800c3a6:	e7e7      	b.n	800c378 <_printf_float+0x1a4>
 800c3a8:	2900      	cmp	r1, #0
 800c3aa:	bfd4      	ite	le
 800c3ac:	f1c1 0202 	rsble	r2, r1, #2
 800c3b0:	2201      	movgt	r2, #1
 800c3b2:	4413      	add	r3, r2
 800c3b4:	e7e0      	b.n	800c378 <_printf_float+0x1a4>
 800c3b6:	6823      	ldr	r3, [r4, #0]
 800c3b8:	055a      	lsls	r2, r3, #21
 800c3ba:	d407      	bmi.n	800c3cc <_printf_float+0x1f8>
 800c3bc:	6923      	ldr	r3, [r4, #16]
 800c3be:	4642      	mov	r2, r8
 800c3c0:	4631      	mov	r1, r6
 800c3c2:	4628      	mov	r0, r5
 800c3c4:	47b8      	blx	r7
 800c3c6:	3001      	adds	r0, #1
 800c3c8:	d12c      	bne.n	800c424 <_printf_float+0x250>
 800c3ca:	e764      	b.n	800c296 <_printf_float+0xc2>
 800c3cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c3d0:	f240 80e0 	bls.w	800c594 <_printf_float+0x3c0>
 800c3d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c3d8:	2200      	movs	r2, #0
 800c3da:	2300      	movs	r3, #0
 800c3dc:	f7f4 fb74 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	d034      	beq.n	800c44e <_printf_float+0x27a>
 800c3e4:	4a37      	ldr	r2, [pc, #220]	; (800c4c4 <_printf_float+0x2f0>)
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	4631      	mov	r1, r6
 800c3ea:	4628      	mov	r0, r5
 800c3ec:	47b8      	blx	r7
 800c3ee:	3001      	adds	r0, #1
 800c3f0:	f43f af51 	beq.w	800c296 <_printf_float+0xc2>
 800c3f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	db02      	blt.n	800c402 <_printf_float+0x22e>
 800c3fc:	6823      	ldr	r3, [r4, #0]
 800c3fe:	07d8      	lsls	r0, r3, #31
 800c400:	d510      	bpl.n	800c424 <_printf_float+0x250>
 800c402:	ee18 3a10 	vmov	r3, s16
 800c406:	4652      	mov	r2, sl
 800c408:	4631      	mov	r1, r6
 800c40a:	4628      	mov	r0, r5
 800c40c:	47b8      	blx	r7
 800c40e:	3001      	adds	r0, #1
 800c410:	f43f af41 	beq.w	800c296 <_printf_float+0xc2>
 800c414:	f04f 0800 	mov.w	r8, #0
 800c418:	f104 091a 	add.w	r9, r4, #26
 800c41c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c41e:	3b01      	subs	r3, #1
 800c420:	4543      	cmp	r3, r8
 800c422:	dc09      	bgt.n	800c438 <_printf_float+0x264>
 800c424:	6823      	ldr	r3, [r4, #0]
 800c426:	079b      	lsls	r3, r3, #30
 800c428:	f100 8105 	bmi.w	800c636 <_printf_float+0x462>
 800c42c:	68e0      	ldr	r0, [r4, #12]
 800c42e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c430:	4298      	cmp	r0, r3
 800c432:	bfb8      	it	lt
 800c434:	4618      	movlt	r0, r3
 800c436:	e730      	b.n	800c29a <_printf_float+0xc6>
 800c438:	2301      	movs	r3, #1
 800c43a:	464a      	mov	r2, r9
 800c43c:	4631      	mov	r1, r6
 800c43e:	4628      	mov	r0, r5
 800c440:	47b8      	blx	r7
 800c442:	3001      	adds	r0, #1
 800c444:	f43f af27 	beq.w	800c296 <_printf_float+0xc2>
 800c448:	f108 0801 	add.w	r8, r8, #1
 800c44c:	e7e6      	b.n	800c41c <_printf_float+0x248>
 800c44e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c450:	2b00      	cmp	r3, #0
 800c452:	dc39      	bgt.n	800c4c8 <_printf_float+0x2f4>
 800c454:	4a1b      	ldr	r2, [pc, #108]	; (800c4c4 <_printf_float+0x2f0>)
 800c456:	2301      	movs	r3, #1
 800c458:	4631      	mov	r1, r6
 800c45a:	4628      	mov	r0, r5
 800c45c:	47b8      	blx	r7
 800c45e:	3001      	adds	r0, #1
 800c460:	f43f af19 	beq.w	800c296 <_printf_float+0xc2>
 800c464:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c468:	4313      	orrs	r3, r2
 800c46a:	d102      	bne.n	800c472 <_printf_float+0x29e>
 800c46c:	6823      	ldr	r3, [r4, #0]
 800c46e:	07d9      	lsls	r1, r3, #31
 800c470:	d5d8      	bpl.n	800c424 <_printf_float+0x250>
 800c472:	ee18 3a10 	vmov	r3, s16
 800c476:	4652      	mov	r2, sl
 800c478:	4631      	mov	r1, r6
 800c47a:	4628      	mov	r0, r5
 800c47c:	47b8      	blx	r7
 800c47e:	3001      	adds	r0, #1
 800c480:	f43f af09 	beq.w	800c296 <_printf_float+0xc2>
 800c484:	f04f 0900 	mov.w	r9, #0
 800c488:	f104 0a1a 	add.w	sl, r4, #26
 800c48c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c48e:	425b      	negs	r3, r3
 800c490:	454b      	cmp	r3, r9
 800c492:	dc01      	bgt.n	800c498 <_printf_float+0x2c4>
 800c494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c496:	e792      	b.n	800c3be <_printf_float+0x1ea>
 800c498:	2301      	movs	r3, #1
 800c49a:	4652      	mov	r2, sl
 800c49c:	4631      	mov	r1, r6
 800c49e:	4628      	mov	r0, r5
 800c4a0:	47b8      	blx	r7
 800c4a2:	3001      	adds	r0, #1
 800c4a4:	f43f aef7 	beq.w	800c296 <_printf_float+0xc2>
 800c4a8:	f109 0901 	add.w	r9, r9, #1
 800c4ac:	e7ee      	b.n	800c48c <_printf_float+0x2b8>
 800c4ae:	bf00      	nop
 800c4b0:	7fefffff 	.word	0x7fefffff
 800c4b4:	0800eb6c 	.word	0x0800eb6c
 800c4b8:	0800eb70 	.word	0x0800eb70
 800c4bc:	0800eb78 	.word	0x0800eb78
 800c4c0:	0800eb74 	.word	0x0800eb74
 800c4c4:	0800eb7c 	.word	0x0800eb7c
 800c4c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	bfa8      	it	ge
 800c4d0:	461a      	movge	r2, r3
 800c4d2:	2a00      	cmp	r2, #0
 800c4d4:	4691      	mov	r9, r2
 800c4d6:	dc37      	bgt.n	800c548 <_printf_float+0x374>
 800c4d8:	f04f 0b00 	mov.w	fp, #0
 800c4dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c4e0:	f104 021a 	add.w	r2, r4, #26
 800c4e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c4e6:	9305      	str	r3, [sp, #20]
 800c4e8:	eba3 0309 	sub.w	r3, r3, r9
 800c4ec:	455b      	cmp	r3, fp
 800c4ee:	dc33      	bgt.n	800c558 <_printf_float+0x384>
 800c4f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	db3b      	blt.n	800c570 <_printf_float+0x39c>
 800c4f8:	6823      	ldr	r3, [r4, #0]
 800c4fa:	07da      	lsls	r2, r3, #31
 800c4fc:	d438      	bmi.n	800c570 <_printf_float+0x39c>
 800c4fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c500:	9a05      	ldr	r2, [sp, #20]
 800c502:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c504:	1a9a      	subs	r2, r3, r2
 800c506:	eba3 0901 	sub.w	r9, r3, r1
 800c50a:	4591      	cmp	r9, r2
 800c50c:	bfa8      	it	ge
 800c50e:	4691      	movge	r9, r2
 800c510:	f1b9 0f00 	cmp.w	r9, #0
 800c514:	dc35      	bgt.n	800c582 <_printf_float+0x3ae>
 800c516:	f04f 0800 	mov.w	r8, #0
 800c51a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c51e:	f104 0a1a 	add.w	sl, r4, #26
 800c522:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c526:	1a9b      	subs	r3, r3, r2
 800c528:	eba3 0309 	sub.w	r3, r3, r9
 800c52c:	4543      	cmp	r3, r8
 800c52e:	f77f af79 	ble.w	800c424 <_printf_float+0x250>
 800c532:	2301      	movs	r3, #1
 800c534:	4652      	mov	r2, sl
 800c536:	4631      	mov	r1, r6
 800c538:	4628      	mov	r0, r5
 800c53a:	47b8      	blx	r7
 800c53c:	3001      	adds	r0, #1
 800c53e:	f43f aeaa 	beq.w	800c296 <_printf_float+0xc2>
 800c542:	f108 0801 	add.w	r8, r8, #1
 800c546:	e7ec      	b.n	800c522 <_printf_float+0x34e>
 800c548:	4613      	mov	r3, r2
 800c54a:	4631      	mov	r1, r6
 800c54c:	4642      	mov	r2, r8
 800c54e:	4628      	mov	r0, r5
 800c550:	47b8      	blx	r7
 800c552:	3001      	adds	r0, #1
 800c554:	d1c0      	bne.n	800c4d8 <_printf_float+0x304>
 800c556:	e69e      	b.n	800c296 <_printf_float+0xc2>
 800c558:	2301      	movs	r3, #1
 800c55a:	4631      	mov	r1, r6
 800c55c:	4628      	mov	r0, r5
 800c55e:	9205      	str	r2, [sp, #20]
 800c560:	47b8      	blx	r7
 800c562:	3001      	adds	r0, #1
 800c564:	f43f ae97 	beq.w	800c296 <_printf_float+0xc2>
 800c568:	9a05      	ldr	r2, [sp, #20]
 800c56a:	f10b 0b01 	add.w	fp, fp, #1
 800c56e:	e7b9      	b.n	800c4e4 <_printf_float+0x310>
 800c570:	ee18 3a10 	vmov	r3, s16
 800c574:	4652      	mov	r2, sl
 800c576:	4631      	mov	r1, r6
 800c578:	4628      	mov	r0, r5
 800c57a:	47b8      	blx	r7
 800c57c:	3001      	adds	r0, #1
 800c57e:	d1be      	bne.n	800c4fe <_printf_float+0x32a>
 800c580:	e689      	b.n	800c296 <_printf_float+0xc2>
 800c582:	9a05      	ldr	r2, [sp, #20]
 800c584:	464b      	mov	r3, r9
 800c586:	4442      	add	r2, r8
 800c588:	4631      	mov	r1, r6
 800c58a:	4628      	mov	r0, r5
 800c58c:	47b8      	blx	r7
 800c58e:	3001      	adds	r0, #1
 800c590:	d1c1      	bne.n	800c516 <_printf_float+0x342>
 800c592:	e680      	b.n	800c296 <_printf_float+0xc2>
 800c594:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c596:	2a01      	cmp	r2, #1
 800c598:	dc01      	bgt.n	800c59e <_printf_float+0x3ca>
 800c59a:	07db      	lsls	r3, r3, #31
 800c59c:	d538      	bpl.n	800c610 <_printf_float+0x43c>
 800c59e:	2301      	movs	r3, #1
 800c5a0:	4642      	mov	r2, r8
 800c5a2:	4631      	mov	r1, r6
 800c5a4:	4628      	mov	r0, r5
 800c5a6:	47b8      	blx	r7
 800c5a8:	3001      	adds	r0, #1
 800c5aa:	f43f ae74 	beq.w	800c296 <_printf_float+0xc2>
 800c5ae:	ee18 3a10 	vmov	r3, s16
 800c5b2:	4652      	mov	r2, sl
 800c5b4:	4631      	mov	r1, r6
 800c5b6:	4628      	mov	r0, r5
 800c5b8:	47b8      	blx	r7
 800c5ba:	3001      	adds	r0, #1
 800c5bc:	f43f ae6b 	beq.w	800c296 <_printf_float+0xc2>
 800c5c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	f7f4 fa7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5cc:	b9d8      	cbnz	r0, 800c606 <_printf_float+0x432>
 800c5ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5d0:	f108 0201 	add.w	r2, r8, #1
 800c5d4:	3b01      	subs	r3, #1
 800c5d6:	4631      	mov	r1, r6
 800c5d8:	4628      	mov	r0, r5
 800c5da:	47b8      	blx	r7
 800c5dc:	3001      	adds	r0, #1
 800c5de:	d10e      	bne.n	800c5fe <_printf_float+0x42a>
 800c5e0:	e659      	b.n	800c296 <_printf_float+0xc2>
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	4652      	mov	r2, sl
 800c5e6:	4631      	mov	r1, r6
 800c5e8:	4628      	mov	r0, r5
 800c5ea:	47b8      	blx	r7
 800c5ec:	3001      	adds	r0, #1
 800c5ee:	f43f ae52 	beq.w	800c296 <_printf_float+0xc2>
 800c5f2:	f108 0801 	add.w	r8, r8, #1
 800c5f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5f8:	3b01      	subs	r3, #1
 800c5fa:	4543      	cmp	r3, r8
 800c5fc:	dcf1      	bgt.n	800c5e2 <_printf_float+0x40e>
 800c5fe:	464b      	mov	r3, r9
 800c600:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c604:	e6dc      	b.n	800c3c0 <_printf_float+0x1ec>
 800c606:	f04f 0800 	mov.w	r8, #0
 800c60a:	f104 0a1a 	add.w	sl, r4, #26
 800c60e:	e7f2      	b.n	800c5f6 <_printf_float+0x422>
 800c610:	2301      	movs	r3, #1
 800c612:	4642      	mov	r2, r8
 800c614:	e7df      	b.n	800c5d6 <_printf_float+0x402>
 800c616:	2301      	movs	r3, #1
 800c618:	464a      	mov	r2, r9
 800c61a:	4631      	mov	r1, r6
 800c61c:	4628      	mov	r0, r5
 800c61e:	47b8      	blx	r7
 800c620:	3001      	adds	r0, #1
 800c622:	f43f ae38 	beq.w	800c296 <_printf_float+0xc2>
 800c626:	f108 0801 	add.w	r8, r8, #1
 800c62a:	68e3      	ldr	r3, [r4, #12]
 800c62c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c62e:	1a5b      	subs	r3, r3, r1
 800c630:	4543      	cmp	r3, r8
 800c632:	dcf0      	bgt.n	800c616 <_printf_float+0x442>
 800c634:	e6fa      	b.n	800c42c <_printf_float+0x258>
 800c636:	f04f 0800 	mov.w	r8, #0
 800c63a:	f104 0919 	add.w	r9, r4, #25
 800c63e:	e7f4      	b.n	800c62a <_printf_float+0x456>

0800c640 <_printf_common>:
 800c640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c644:	4616      	mov	r6, r2
 800c646:	4699      	mov	r9, r3
 800c648:	688a      	ldr	r2, [r1, #8]
 800c64a:	690b      	ldr	r3, [r1, #16]
 800c64c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c650:	4293      	cmp	r3, r2
 800c652:	bfb8      	it	lt
 800c654:	4613      	movlt	r3, r2
 800c656:	6033      	str	r3, [r6, #0]
 800c658:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c65c:	4607      	mov	r7, r0
 800c65e:	460c      	mov	r4, r1
 800c660:	b10a      	cbz	r2, 800c666 <_printf_common+0x26>
 800c662:	3301      	adds	r3, #1
 800c664:	6033      	str	r3, [r6, #0]
 800c666:	6823      	ldr	r3, [r4, #0]
 800c668:	0699      	lsls	r1, r3, #26
 800c66a:	bf42      	ittt	mi
 800c66c:	6833      	ldrmi	r3, [r6, #0]
 800c66e:	3302      	addmi	r3, #2
 800c670:	6033      	strmi	r3, [r6, #0]
 800c672:	6825      	ldr	r5, [r4, #0]
 800c674:	f015 0506 	ands.w	r5, r5, #6
 800c678:	d106      	bne.n	800c688 <_printf_common+0x48>
 800c67a:	f104 0a19 	add.w	sl, r4, #25
 800c67e:	68e3      	ldr	r3, [r4, #12]
 800c680:	6832      	ldr	r2, [r6, #0]
 800c682:	1a9b      	subs	r3, r3, r2
 800c684:	42ab      	cmp	r3, r5
 800c686:	dc26      	bgt.n	800c6d6 <_printf_common+0x96>
 800c688:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c68c:	1e13      	subs	r3, r2, #0
 800c68e:	6822      	ldr	r2, [r4, #0]
 800c690:	bf18      	it	ne
 800c692:	2301      	movne	r3, #1
 800c694:	0692      	lsls	r2, r2, #26
 800c696:	d42b      	bmi.n	800c6f0 <_printf_common+0xb0>
 800c698:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c69c:	4649      	mov	r1, r9
 800c69e:	4638      	mov	r0, r7
 800c6a0:	47c0      	blx	r8
 800c6a2:	3001      	adds	r0, #1
 800c6a4:	d01e      	beq.n	800c6e4 <_printf_common+0xa4>
 800c6a6:	6823      	ldr	r3, [r4, #0]
 800c6a8:	68e5      	ldr	r5, [r4, #12]
 800c6aa:	6832      	ldr	r2, [r6, #0]
 800c6ac:	f003 0306 	and.w	r3, r3, #6
 800c6b0:	2b04      	cmp	r3, #4
 800c6b2:	bf08      	it	eq
 800c6b4:	1aad      	subeq	r5, r5, r2
 800c6b6:	68a3      	ldr	r3, [r4, #8]
 800c6b8:	6922      	ldr	r2, [r4, #16]
 800c6ba:	bf0c      	ite	eq
 800c6bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6c0:	2500      	movne	r5, #0
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	bfc4      	itt	gt
 800c6c6:	1a9b      	subgt	r3, r3, r2
 800c6c8:	18ed      	addgt	r5, r5, r3
 800c6ca:	2600      	movs	r6, #0
 800c6cc:	341a      	adds	r4, #26
 800c6ce:	42b5      	cmp	r5, r6
 800c6d0:	d11a      	bne.n	800c708 <_printf_common+0xc8>
 800c6d2:	2000      	movs	r0, #0
 800c6d4:	e008      	b.n	800c6e8 <_printf_common+0xa8>
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	4652      	mov	r2, sl
 800c6da:	4649      	mov	r1, r9
 800c6dc:	4638      	mov	r0, r7
 800c6de:	47c0      	blx	r8
 800c6e0:	3001      	adds	r0, #1
 800c6e2:	d103      	bne.n	800c6ec <_printf_common+0xac>
 800c6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6ec:	3501      	adds	r5, #1
 800c6ee:	e7c6      	b.n	800c67e <_printf_common+0x3e>
 800c6f0:	18e1      	adds	r1, r4, r3
 800c6f2:	1c5a      	adds	r2, r3, #1
 800c6f4:	2030      	movs	r0, #48	; 0x30
 800c6f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c6fa:	4422      	add	r2, r4
 800c6fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c700:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c704:	3302      	adds	r3, #2
 800c706:	e7c7      	b.n	800c698 <_printf_common+0x58>
 800c708:	2301      	movs	r3, #1
 800c70a:	4622      	mov	r2, r4
 800c70c:	4649      	mov	r1, r9
 800c70e:	4638      	mov	r0, r7
 800c710:	47c0      	blx	r8
 800c712:	3001      	adds	r0, #1
 800c714:	d0e6      	beq.n	800c6e4 <_printf_common+0xa4>
 800c716:	3601      	adds	r6, #1
 800c718:	e7d9      	b.n	800c6ce <_printf_common+0x8e>
	...

0800c71c <_printf_i>:
 800c71c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c720:	7e0f      	ldrb	r7, [r1, #24]
 800c722:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c724:	2f78      	cmp	r7, #120	; 0x78
 800c726:	4691      	mov	r9, r2
 800c728:	4680      	mov	r8, r0
 800c72a:	460c      	mov	r4, r1
 800c72c:	469a      	mov	sl, r3
 800c72e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c732:	d807      	bhi.n	800c744 <_printf_i+0x28>
 800c734:	2f62      	cmp	r7, #98	; 0x62
 800c736:	d80a      	bhi.n	800c74e <_printf_i+0x32>
 800c738:	2f00      	cmp	r7, #0
 800c73a:	f000 80d8 	beq.w	800c8ee <_printf_i+0x1d2>
 800c73e:	2f58      	cmp	r7, #88	; 0x58
 800c740:	f000 80a3 	beq.w	800c88a <_printf_i+0x16e>
 800c744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c748:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c74c:	e03a      	b.n	800c7c4 <_printf_i+0xa8>
 800c74e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c752:	2b15      	cmp	r3, #21
 800c754:	d8f6      	bhi.n	800c744 <_printf_i+0x28>
 800c756:	a101      	add	r1, pc, #4	; (adr r1, 800c75c <_printf_i+0x40>)
 800c758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c75c:	0800c7b5 	.word	0x0800c7b5
 800c760:	0800c7c9 	.word	0x0800c7c9
 800c764:	0800c745 	.word	0x0800c745
 800c768:	0800c745 	.word	0x0800c745
 800c76c:	0800c745 	.word	0x0800c745
 800c770:	0800c745 	.word	0x0800c745
 800c774:	0800c7c9 	.word	0x0800c7c9
 800c778:	0800c745 	.word	0x0800c745
 800c77c:	0800c745 	.word	0x0800c745
 800c780:	0800c745 	.word	0x0800c745
 800c784:	0800c745 	.word	0x0800c745
 800c788:	0800c8d5 	.word	0x0800c8d5
 800c78c:	0800c7f9 	.word	0x0800c7f9
 800c790:	0800c8b7 	.word	0x0800c8b7
 800c794:	0800c745 	.word	0x0800c745
 800c798:	0800c745 	.word	0x0800c745
 800c79c:	0800c8f7 	.word	0x0800c8f7
 800c7a0:	0800c745 	.word	0x0800c745
 800c7a4:	0800c7f9 	.word	0x0800c7f9
 800c7a8:	0800c745 	.word	0x0800c745
 800c7ac:	0800c745 	.word	0x0800c745
 800c7b0:	0800c8bf 	.word	0x0800c8bf
 800c7b4:	682b      	ldr	r3, [r5, #0]
 800c7b6:	1d1a      	adds	r2, r3, #4
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	602a      	str	r2, [r5, #0]
 800c7bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c7c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	e0a3      	b.n	800c910 <_printf_i+0x1f4>
 800c7c8:	6820      	ldr	r0, [r4, #0]
 800c7ca:	6829      	ldr	r1, [r5, #0]
 800c7cc:	0606      	lsls	r6, r0, #24
 800c7ce:	f101 0304 	add.w	r3, r1, #4
 800c7d2:	d50a      	bpl.n	800c7ea <_printf_i+0xce>
 800c7d4:	680e      	ldr	r6, [r1, #0]
 800c7d6:	602b      	str	r3, [r5, #0]
 800c7d8:	2e00      	cmp	r6, #0
 800c7da:	da03      	bge.n	800c7e4 <_printf_i+0xc8>
 800c7dc:	232d      	movs	r3, #45	; 0x2d
 800c7de:	4276      	negs	r6, r6
 800c7e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7e4:	485e      	ldr	r0, [pc, #376]	; (800c960 <_printf_i+0x244>)
 800c7e6:	230a      	movs	r3, #10
 800c7e8:	e019      	b.n	800c81e <_printf_i+0x102>
 800c7ea:	680e      	ldr	r6, [r1, #0]
 800c7ec:	602b      	str	r3, [r5, #0]
 800c7ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c7f2:	bf18      	it	ne
 800c7f4:	b236      	sxthne	r6, r6
 800c7f6:	e7ef      	b.n	800c7d8 <_printf_i+0xbc>
 800c7f8:	682b      	ldr	r3, [r5, #0]
 800c7fa:	6820      	ldr	r0, [r4, #0]
 800c7fc:	1d19      	adds	r1, r3, #4
 800c7fe:	6029      	str	r1, [r5, #0]
 800c800:	0601      	lsls	r1, r0, #24
 800c802:	d501      	bpl.n	800c808 <_printf_i+0xec>
 800c804:	681e      	ldr	r6, [r3, #0]
 800c806:	e002      	b.n	800c80e <_printf_i+0xf2>
 800c808:	0646      	lsls	r6, r0, #25
 800c80a:	d5fb      	bpl.n	800c804 <_printf_i+0xe8>
 800c80c:	881e      	ldrh	r6, [r3, #0]
 800c80e:	4854      	ldr	r0, [pc, #336]	; (800c960 <_printf_i+0x244>)
 800c810:	2f6f      	cmp	r7, #111	; 0x6f
 800c812:	bf0c      	ite	eq
 800c814:	2308      	moveq	r3, #8
 800c816:	230a      	movne	r3, #10
 800c818:	2100      	movs	r1, #0
 800c81a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c81e:	6865      	ldr	r5, [r4, #4]
 800c820:	60a5      	str	r5, [r4, #8]
 800c822:	2d00      	cmp	r5, #0
 800c824:	bfa2      	ittt	ge
 800c826:	6821      	ldrge	r1, [r4, #0]
 800c828:	f021 0104 	bicge.w	r1, r1, #4
 800c82c:	6021      	strge	r1, [r4, #0]
 800c82e:	b90e      	cbnz	r6, 800c834 <_printf_i+0x118>
 800c830:	2d00      	cmp	r5, #0
 800c832:	d04d      	beq.n	800c8d0 <_printf_i+0x1b4>
 800c834:	4615      	mov	r5, r2
 800c836:	fbb6 f1f3 	udiv	r1, r6, r3
 800c83a:	fb03 6711 	mls	r7, r3, r1, r6
 800c83e:	5dc7      	ldrb	r7, [r0, r7]
 800c840:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c844:	4637      	mov	r7, r6
 800c846:	42bb      	cmp	r3, r7
 800c848:	460e      	mov	r6, r1
 800c84a:	d9f4      	bls.n	800c836 <_printf_i+0x11a>
 800c84c:	2b08      	cmp	r3, #8
 800c84e:	d10b      	bne.n	800c868 <_printf_i+0x14c>
 800c850:	6823      	ldr	r3, [r4, #0]
 800c852:	07de      	lsls	r6, r3, #31
 800c854:	d508      	bpl.n	800c868 <_printf_i+0x14c>
 800c856:	6923      	ldr	r3, [r4, #16]
 800c858:	6861      	ldr	r1, [r4, #4]
 800c85a:	4299      	cmp	r1, r3
 800c85c:	bfde      	ittt	le
 800c85e:	2330      	movle	r3, #48	; 0x30
 800c860:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c864:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c868:	1b52      	subs	r2, r2, r5
 800c86a:	6122      	str	r2, [r4, #16]
 800c86c:	f8cd a000 	str.w	sl, [sp]
 800c870:	464b      	mov	r3, r9
 800c872:	aa03      	add	r2, sp, #12
 800c874:	4621      	mov	r1, r4
 800c876:	4640      	mov	r0, r8
 800c878:	f7ff fee2 	bl	800c640 <_printf_common>
 800c87c:	3001      	adds	r0, #1
 800c87e:	d14c      	bne.n	800c91a <_printf_i+0x1fe>
 800c880:	f04f 30ff 	mov.w	r0, #4294967295
 800c884:	b004      	add	sp, #16
 800c886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c88a:	4835      	ldr	r0, [pc, #212]	; (800c960 <_printf_i+0x244>)
 800c88c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c890:	6829      	ldr	r1, [r5, #0]
 800c892:	6823      	ldr	r3, [r4, #0]
 800c894:	f851 6b04 	ldr.w	r6, [r1], #4
 800c898:	6029      	str	r1, [r5, #0]
 800c89a:	061d      	lsls	r5, r3, #24
 800c89c:	d514      	bpl.n	800c8c8 <_printf_i+0x1ac>
 800c89e:	07df      	lsls	r7, r3, #31
 800c8a0:	bf44      	itt	mi
 800c8a2:	f043 0320 	orrmi.w	r3, r3, #32
 800c8a6:	6023      	strmi	r3, [r4, #0]
 800c8a8:	b91e      	cbnz	r6, 800c8b2 <_printf_i+0x196>
 800c8aa:	6823      	ldr	r3, [r4, #0]
 800c8ac:	f023 0320 	bic.w	r3, r3, #32
 800c8b0:	6023      	str	r3, [r4, #0]
 800c8b2:	2310      	movs	r3, #16
 800c8b4:	e7b0      	b.n	800c818 <_printf_i+0xfc>
 800c8b6:	6823      	ldr	r3, [r4, #0]
 800c8b8:	f043 0320 	orr.w	r3, r3, #32
 800c8bc:	6023      	str	r3, [r4, #0]
 800c8be:	2378      	movs	r3, #120	; 0x78
 800c8c0:	4828      	ldr	r0, [pc, #160]	; (800c964 <_printf_i+0x248>)
 800c8c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c8c6:	e7e3      	b.n	800c890 <_printf_i+0x174>
 800c8c8:	0659      	lsls	r1, r3, #25
 800c8ca:	bf48      	it	mi
 800c8cc:	b2b6      	uxthmi	r6, r6
 800c8ce:	e7e6      	b.n	800c89e <_printf_i+0x182>
 800c8d0:	4615      	mov	r5, r2
 800c8d2:	e7bb      	b.n	800c84c <_printf_i+0x130>
 800c8d4:	682b      	ldr	r3, [r5, #0]
 800c8d6:	6826      	ldr	r6, [r4, #0]
 800c8d8:	6961      	ldr	r1, [r4, #20]
 800c8da:	1d18      	adds	r0, r3, #4
 800c8dc:	6028      	str	r0, [r5, #0]
 800c8de:	0635      	lsls	r5, r6, #24
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	d501      	bpl.n	800c8e8 <_printf_i+0x1cc>
 800c8e4:	6019      	str	r1, [r3, #0]
 800c8e6:	e002      	b.n	800c8ee <_printf_i+0x1d2>
 800c8e8:	0670      	lsls	r0, r6, #25
 800c8ea:	d5fb      	bpl.n	800c8e4 <_printf_i+0x1c8>
 800c8ec:	8019      	strh	r1, [r3, #0]
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	6123      	str	r3, [r4, #16]
 800c8f2:	4615      	mov	r5, r2
 800c8f4:	e7ba      	b.n	800c86c <_printf_i+0x150>
 800c8f6:	682b      	ldr	r3, [r5, #0]
 800c8f8:	1d1a      	adds	r2, r3, #4
 800c8fa:	602a      	str	r2, [r5, #0]
 800c8fc:	681d      	ldr	r5, [r3, #0]
 800c8fe:	6862      	ldr	r2, [r4, #4]
 800c900:	2100      	movs	r1, #0
 800c902:	4628      	mov	r0, r5
 800c904:	f7f3 fc6c 	bl	80001e0 <memchr>
 800c908:	b108      	cbz	r0, 800c90e <_printf_i+0x1f2>
 800c90a:	1b40      	subs	r0, r0, r5
 800c90c:	6060      	str	r0, [r4, #4]
 800c90e:	6863      	ldr	r3, [r4, #4]
 800c910:	6123      	str	r3, [r4, #16]
 800c912:	2300      	movs	r3, #0
 800c914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c918:	e7a8      	b.n	800c86c <_printf_i+0x150>
 800c91a:	6923      	ldr	r3, [r4, #16]
 800c91c:	462a      	mov	r2, r5
 800c91e:	4649      	mov	r1, r9
 800c920:	4640      	mov	r0, r8
 800c922:	47d0      	blx	sl
 800c924:	3001      	adds	r0, #1
 800c926:	d0ab      	beq.n	800c880 <_printf_i+0x164>
 800c928:	6823      	ldr	r3, [r4, #0]
 800c92a:	079b      	lsls	r3, r3, #30
 800c92c:	d413      	bmi.n	800c956 <_printf_i+0x23a>
 800c92e:	68e0      	ldr	r0, [r4, #12]
 800c930:	9b03      	ldr	r3, [sp, #12]
 800c932:	4298      	cmp	r0, r3
 800c934:	bfb8      	it	lt
 800c936:	4618      	movlt	r0, r3
 800c938:	e7a4      	b.n	800c884 <_printf_i+0x168>
 800c93a:	2301      	movs	r3, #1
 800c93c:	4632      	mov	r2, r6
 800c93e:	4649      	mov	r1, r9
 800c940:	4640      	mov	r0, r8
 800c942:	47d0      	blx	sl
 800c944:	3001      	adds	r0, #1
 800c946:	d09b      	beq.n	800c880 <_printf_i+0x164>
 800c948:	3501      	adds	r5, #1
 800c94a:	68e3      	ldr	r3, [r4, #12]
 800c94c:	9903      	ldr	r1, [sp, #12]
 800c94e:	1a5b      	subs	r3, r3, r1
 800c950:	42ab      	cmp	r3, r5
 800c952:	dcf2      	bgt.n	800c93a <_printf_i+0x21e>
 800c954:	e7eb      	b.n	800c92e <_printf_i+0x212>
 800c956:	2500      	movs	r5, #0
 800c958:	f104 0619 	add.w	r6, r4, #25
 800c95c:	e7f5      	b.n	800c94a <_printf_i+0x22e>
 800c95e:	bf00      	nop
 800c960:	0800eb7e 	.word	0x0800eb7e
 800c964:	0800eb8f 	.word	0x0800eb8f

0800c968 <quorem>:
 800c968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c96c:	6903      	ldr	r3, [r0, #16]
 800c96e:	690c      	ldr	r4, [r1, #16]
 800c970:	42a3      	cmp	r3, r4
 800c972:	4607      	mov	r7, r0
 800c974:	f2c0 8081 	blt.w	800ca7a <quorem+0x112>
 800c978:	3c01      	subs	r4, #1
 800c97a:	f101 0814 	add.w	r8, r1, #20
 800c97e:	f100 0514 	add.w	r5, r0, #20
 800c982:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c986:	9301      	str	r3, [sp, #4]
 800c988:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c98c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c990:	3301      	adds	r3, #1
 800c992:	429a      	cmp	r2, r3
 800c994:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c998:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c99c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c9a0:	d331      	bcc.n	800ca06 <quorem+0x9e>
 800c9a2:	f04f 0e00 	mov.w	lr, #0
 800c9a6:	4640      	mov	r0, r8
 800c9a8:	46ac      	mov	ip, r5
 800c9aa:	46f2      	mov	sl, lr
 800c9ac:	f850 2b04 	ldr.w	r2, [r0], #4
 800c9b0:	b293      	uxth	r3, r2
 800c9b2:	fb06 e303 	mla	r3, r6, r3, lr
 800c9b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	ebaa 0303 	sub.w	r3, sl, r3
 800c9c0:	f8dc a000 	ldr.w	sl, [ip]
 800c9c4:	0c12      	lsrs	r2, r2, #16
 800c9c6:	fa13 f38a 	uxtah	r3, r3, sl
 800c9ca:	fb06 e202 	mla	r2, r6, r2, lr
 800c9ce:	9300      	str	r3, [sp, #0]
 800c9d0:	9b00      	ldr	r3, [sp, #0]
 800c9d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c9d6:	b292      	uxth	r2, r2
 800c9d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c9dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c9e0:	f8bd 3000 	ldrh.w	r3, [sp]
 800c9e4:	4581      	cmp	r9, r0
 800c9e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9ea:	f84c 3b04 	str.w	r3, [ip], #4
 800c9ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c9f2:	d2db      	bcs.n	800c9ac <quorem+0x44>
 800c9f4:	f855 300b 	ldr.w	r3, [r5, fp]
 800c9f8:	b92b      	cbnz	r3, 800ca06 <quorem+0x9e>
 800c9fa:	9b01      	ldr	r3, [sp, #4]
 800c9fc:	3b04      	subs	r3, #4
 800c9fe:	429d      	cmp	r5, r3
 800ca00:	461a      	mov	r2, r3
 800ca02:	d32e      	bcc.n	800ca62 <quorem+0xfa>
 800ca04:	613c      	str	r4, [r7, #16]
 800ca06:	4638      	mov	r0, r7
 800ca08:	f001 f8c4 	bl	800db94 <__mcmp>
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	db24      	blt.n	800ca5a <quorem+0xf2>
 800ca10:	3601      	adds	r6, #1
 800ca12:	4628      	mov	r0, r5
 800ca14:	f04f 0c00 	mov.w	ip, #0
 800ca18:	f858 2b04 	ldr.w	r2, [r8], #4
 800ca1c:	f8d0 e000 	ldr.w	lr, [r0]
 800ca20:	b293      	uxth	r3, r2
 800ca22:	ebac 0303 	sub.w	r3, ip, r3
 800ca26:	0c12      	lsrs	r2, r2, #16
 800ca28:	fa13 f38e 	uxtah	r3, r3, lr
 800ca2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ca30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca34:	b29b      	uxth	r3, r3
 800ca36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca3a:	45c1      	cmp	r9, r8
 800ca3c:	f840 3b04 	str.w	r3, [r0], #4
 800ca40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ca44:	d2e8      	bcs.n	800ca18 <quorem+0xb0>
 800ca46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca4e:	b922      	cbnz	r2, 800ca5a <quorem+0xf2>
 800ca50:	3b04      	subs	r3, #4
 800ca52:	429d      	cmp	r5, r3
 800ca54:	461a      	mov	r2, r3
 800ca56:	d30a      	bcc.n	800ca6e <quorem+0x106>
 800ca58:	613c      	str	r4, [r7, #16]
 800ca5a:	4630      	mov	r0, r6
 800ca5c:	b003      	add	sp, #12
 800ca5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca62:	6812      	ldr	r2, [r2, #0]
 800ca64:	3b04      	subs	r3, #4
 800ca66:	2a00      	cmp	r2, #0
 800ca68:	d1cc      	bne.n	800ca04 <quorem+0x9c>
 800ca6a:	3c01      	subs	r4, #1
 800ca6c:	e7c7      	b.n	800c9fe <quorem+0x96>
 800ca6e:	6812      	ldr	r2, [r2, #0]
 800ca70:	3b04      	subs	r3, #4
 800ca72:	2a00      	cmp	r2, #0
 800ca74:	d1f0      	bne.n	800ca58 <quorem+0xf0>
 800ca76:	3c01      	subs	r4, #1
 800ca78:	e7eb      	b.n	800ca52 <quorem+0xea>
 800ca7a:	2000      	movs	r0, #0
 800ca7c:	e7ee      	b.n	800ca5c <quorem+0xf4>
	...

0800ca80 <_dtoa_r>:
 800ca80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca84:	ed2d 8b04 	vpush	{d8-d9}
 800ca88:	ec57 6b10 	vmov	r6, r7, d0
 800ca8c:	b093      	sub	sp, #76	; 0x4c
 800ca8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ca90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ca94:	9106      	str	r1, [sp, #24]
 800ca96:	ee10 aa10 	vmov	sl, s0
 800ca9a:	4604      	mov	r4, r0
 800ca9c:	9209      	str	r2, [sp, #36]	; 0x24
 800ca9e:	930c      	str	r3, [sp, #48]	; 0x30
 800caa0:	46bb      	mov	fp, r7
 800caa2:	b975      	cbnz	r5, 800cac2 <_dtoa_r+0x42>
 800caa4:	2010      	movs	r0, #16
 800caa6:	f000 fddd 	bl	800d664 <malloc>
 800caaa:	4602      	mov	r2, r0
 800caac:	6260      	str	r0, [r4, #36]	; 0x24
 800caae:	b920      	cbnz	r0, 800caba <_dtoa_r+0x3a>
 800cab0:	4ba7      	ldr	r3, [pc, #668]	; (800cd50 <_dtoa_r+0x2d0>)
 800cab2:	21ea      	movs	r1, #234	; 0xea
 800cab4:	48a7      	ldr	r0, [pc, #668]	; (800cd54 <_dtoa_r+0x2d4>)
 800cab6:	f001 fa75 	bl	800dfa4 <__assert_func>
 800caba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cabe:	6005      	str	r5, [r0, #0]
 800cac0:	60c5      	str	r5, [r0, #12]
 800cac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cac4:	6819      	ldr	r1, [r3, #0]
 800cac6:	b151      	cbz	r1, 800cade <_dtoa_r+0x5e>
 800cac8:	685a      	ldr	r2, [r3, #4]
 800caca:	604a      	str	r2, [r1, #4]
 800cacc:	2301      	movs	r3, #1
 800cace:	4093      	lsls	r3, r2
 800cad0:	608b      	str	r3, [r1, #8]
 800cad2:	4620      	mov	r0, r4
 800cad4:	f000 fe1c 	bl	800d710 <_Bfree>
 800cad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cada:	2200      	movs	r2, #0
 800cadc:	601a      	str	r2, [r3, #0]
 800cade:	1e3b      	subs	r3, r7, #0
 800cae0:	bfaa      	itet	ge
 800cae2:	2300      	movge	r3, #0
 800cae4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cae8:	f8c8 3000 	strge.w	r3, [r8]
 800caec:	4b9a      	ldr	r3, [pc, #616]	; (800cd58 <_dtoa_r+0x2d8>)
 800caee:	bfbc      	itt	lt
 800caf0:	2201      	movlt	r2, #1
 800caf2:	f8c8 2000 	strlt.w	r2, [r8]
 800caf6:	ea33 030b 	bics.w	r3, r3, fp
 800cafa:	d11b      	bne.n	800cb34 <_dtoa_r+0xb4>
 800cafc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cafe:	f242 730f 	movw	r3, #9999	; 0x270f
 800cb02:	6013      	str	r3, [r2, #0]
 800cb04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cb08:	4333      	orrs	r3, r6
 800cb0a:	f000 8592 	beq.w	800d632 <_dtoa_r+0xbb2>
 800cb0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb10:	b963      	cbnz	r3, 800cb2c <_dtoa_r+0xac>
 800cb12:	4b92      	ldr	r3, [pc, #584]	; (800cd5c <_dtoa_r+0x2dc>)
 800cb14:	e022      	b.n	800cb5c <_dtoa_r+0xdc>
 800cb16:	4b92      	ldr	r3, [pc, #584]	; (800cd60 <_dtoa_r+0x2e0>)
 800cb18:	9301      	str	r3, [sp, #4]
 800cb1a:	3308      	adds	r3, #8
 800cb1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cb1e:	6013      	str	r3, [r2, #0]
 800cb20:	9801      	ldr	r0, [sp, #4]
 800cb22:	b013      	add	sp, #76	; 0x4c
 800cb24:	ecbd 8b04 	vpop	{d8-d9}
 800cb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb2c:	4b8b      	ldr	r3, [pc, #556]	; (800cd5c <_dtoa_r+0x2dc>)
 800cb2e:	9301      	str	r3, [sp, #4]
 800cb30:	3303      	adds	r3, #3
 800cb32:	e7f3      	b.n	800cb1c <_dtoa_r+0x9c>
 800cb34:	2200      	movs	r2, #0
 800cb36:	2300      	movs	r3, #0
 800cb38:	4650      	mov	r0, sl
 800cb3a:	4659      	mov	r1, fp
 800cb3c:	f7f3 ffc4 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb40:	ec4b ab19 	vmov	d9, sl, fp
 800cb44:	4680      	mov	r8, r0
 800cb46:	b158      	cbz	r0, 800cb60 <_dtoa_r+0xe0>
 800cb48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	6013      	str	r3, [r2, #0]
 800cb4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	f000 856b 	beq.w	800d62c <_dtoa_r+0xbac>
 800cb56:	4883      	ldr	r0, [pc, #524]	; (800cd64 <_dtoa_r+0x2e4>)
 800cb58:	6018      	str	r0, [r3, #0]
 800cb5a:	1e43      	subs	r3, r0, #1
 800cb5c:	9301      	str	r3, [sp, #4]
 800cb5e:	e7df      	b.n	800cb20 <_dtoa_r+0xa0>
 800cb60:	ec4b ab10 	vmov	d0, sl, fp
 800cb64:	aa10      	add	r2, sp, #64	; 0x40
 800cb66:	a911      	add	r1, sp, #68	; 0x44
 800cb68:	4620      	mov	r0, r4
 800cb6a:	f001 f8b9 	bl	800dce0 <__d2b>
 800cb6e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800cb72:	ee08 0a10 	vmov	s16, r0
 800cb76:	2d00      	cmp	r5, #0
 800cb78:	f000 8084 	beq.w	800cc84 <_dtoa_r+0x204>
 800cb7c:	ee19 3a90 	vmov	r3, s19
 800cb80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb84:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cb88:	4656      	mov	r6, sl
 800cb8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cb8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cb92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800cb96:	4b74      	ldr	r3, [pc, #464]	; (800cd68 <_dtoa_r+0x2e8>)
 800cb98:	2200      	movs	r2, #0
 800cb9a:	4630      	mov	r0, r6
 800cb9c:	4639      	mov	r1, r7
 800cb9e:	f7f3 fb73 	bl	8000288 <__aeabi_dsub>
 800cba2:	a365      	add	r3, pc, #404	; (adr r3, 800cd38 <_dtoa_r+0x2b8>)
 800cba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba8:	f7f3 fd26 	bl	80005f8 <__aeabi_dmul>
 800cbac:	a364      	add	r3, pc, #400	; (adr r3, 800cd40 <_dtoa_r+0x2c0>)
 800cbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb2:	f7f3 fb6b 	bl	800028c <__adddf3>
 800cbb6:	4606      	mov	r6, r0
 800cbb8:	4628      	mov	r0, r5
 800cbba:	460f      	mov	r7, r1
 800cbbc:	f7f3 fcb2 	bl	8000524 <__aeabi_i2d>
 800cbc0:	a361      	add	r3, pc, #388	; (adr r3, 800cd48 <_dtoa_r+0x2c8>)
 800cbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc6:	f7f3 fd17 	bl	80005f8 <__aeabi_dmul>
 800cbca:	4602      	mov	r2, r0
 800cbcc:	460b      	mov	r3, r1
 800cbce:	4630      	mov	r0, r6
 800cbd0:	4639      	mov	r1, r7
 800cbd2:	f7f3 fb5b 	bl	800028c <__adddf3>
 800cbd6:	4606      	mov	r6, r0
 800cbd8:	460f      	mov	r7, r1
 800cbda:	f7f3 ffbd 	bl	8000b58 <__aeabi_d2iz>
 800cbde:	2200      	movs	r2, #0
 800cbe0:	9000      	str	r0, [sp, #0]
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	4630      	mov	r0, r6
 800cbe6:	4639      	mov	r1, r7
 800cbe8:	f7f3 ff78 	bl	8000adc <__aeabi_dcmplt>
 800cbec:	b150      	cbz	r0, 800cc04 <_dtoa_r+0x184>
 800cbee:	9800      	ldr	r0, [sp, #0]
 800cbf0:	f7f3 fc98 	bl	8000524 <__aeabi_i2d>
 800cbf4:	4632      	mov	r2, r6
 800cbf6:	463b      	mov	r3, r7
 800cbf8:	f7f3 ff66 	bl	8000ac8 <__aeabi_dcmpeq>
 800cbfc:	b910      	cbnz	r0, 800cc04 <_dtoa_r+0x184>
 800cbfe:	9b00      	ldr	r3, [sp, #0]
 800cc00:	3b01      	subs	r3, #1
 800cc02:	9300      	str	r3, [sp, #0]
 800cc04:	9b00      	ldr	r3, [sp, #0]
 800cc06:	2b16      	cmp	r3, #22
 800cc08:	d85a      	bhi.n	800ccc0 <_dtoa_r+0x240>
 800cc0a:	9a00      	ldr	r2, [sp, #0]
 800cc0c:	4b57      	ldr	r3, [pc, #348]	; (800cd6c <_dtoa_r+0x2ec>)
 800cc0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc16:	ec51 0b19 	vmov	r0, r1, d9
 800cc1a:	f7f3 ff5f 	bl	8000adc <__aeabi_dcmplt>
 800cc1e:	2800      	cmp	r0, #0
 800cc20:	d050      	beq.n	800ccc4 <_dtoa_r+0x244>
 800cc22:	9b00      	ldr	r3, [sp, #0]
 800cc24:	3b01      	subs	r3, #1
 800cc26:	9300      	str	r3, [sp, #0]
 800cc28:	2300      	movs	r3, #0
 800cc2a:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc2e:	1b5d      	subs	r5, r3, r5
 800cc30:	1e6b      	subs	r3, r5, #1
 800cc32:	9305      	str	r3, [sp, #20]
 800cc34:	bf45      	ittet	mi
 800cc36:	f1c5 0301 	rsbmi	r3, r5, #1
 800cc3a:	9304      	strmi	r3, [sp, #16]
 800cc3c:	2300      	movpl	r3, #0
 800cc3e:	2300      	movmi	r3, #0
 800cc40:	bf4c      	ite	mi
 800cc42:	9305      	strmi	r3, [sp, #20]
 800cc44:	9304      	strpl	r3, [sp, #16]
 800cc46:	9b00      	ldr	r3, [sp, #0]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	db3d      	blt.n	800ccc8 <_dtoa_r+0x248>
 800cc4c:	9b05      	ldr	r3, [sp, #20]
 800cc4e:	9a00      	ldr	r2, [sp, #0]
 800cc50:	920a      	str	r2, [sp, #40]	; 0x28
 800cc52:	4413      	add	r3, r2
 800cc54:	9305      	str	r3, [sp, #20]
 800cc56:	2300      	movs	r3, #0
 800cc58:	9307      	str	r3, [sp, #28]
 800cc5a:	9b06      	ldr	r3, [sp, #24]
 800cc5c:	2b09      	cmp	r3, #9
 800cc5e:	f200 8089 	bhi.w	800cd74 <_dtoa_r+0x2f4>
 800cc62:	2b05      	cmp	r3, #5
 800cc64:	bfc4      	itt	gt
 800cc66:	3b04      	subgt	r3, #4
 800cc68:	9306      	strgt	r3, [sp, #24]
 800cc6a:	9b06      	ldr	r3, [sp, #24]
 800cc6c:	f1a3 0302 	sub.w	r3, r3, #2
 800cc70:	bfcc      	ite	gt
 800cc72:	2500      	movgt	r5, #0
 800cc74:	2501      	movle	r5, #1
 800cc76:	2b03      	cmp	r3, #3
 800cc78:	f200 8087 	bhi.w	800cd8a <_dtoa_r+0x30a>
 800cc7c:	e8df f003 	tbb	[pc, r3]
 800cc80:	59383a2d 	.word	0x59383a2d
 800cc84:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cc88:	441d      	add	r5, r3
 800cc8a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cc8e:	2b20      	cmp	r3, #32
 800cc90:	bfc1      	itttt	gt
 800cc92:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cc96:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cc9a:	fa0b f303 	lslgt.w	r3, fp, r3
 800cc9e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cca2:	bfda      	itte	le
 800cca4:	f1c3 0320 	rsble	r3, r3, #32
 800cca8:	fa06 f003 	lslle.w	r0, r6, r3
 800ccac:	4318      	orrgt	r0, r3
 800ccae:	f7f3 fc29 	bl	8000504 <__aeabi_ui2d>
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	4606      	mov	r6, r0
 800ccb6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ccba:	3d01      	subs	r5, #1
 800ccbc:	930e      	str	r3, [sp, #56]	; 0x38
 800ccbe:	e76a      	b.n	800cb96 <_dtoa_r+0x116>
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	e7b2      	b.n	800cc2a <_dtoa_r+0x1aa>
 800ccc4:	900b      	str	r0, [sp, #44]	; 0x2c
 800ccc6:	e7b1      	b.n	800cc2c <_dtoa_r+0x1ac>
 800ccc8:	9b04      	ldr	r3, [sp, #16]
 800ccca:	9a00      	ldr	r2, [sp, #0]
 800cccc:	1a9b      	subs	r3, r3, r2
 800ccce:	9304      	str	r3, [sp, #16]
 800ccd0:	4253      	negs	r3, r2
 800ccd2:	9307      	str	r3, [sp, #28]
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	930a      	str	r3, [sp, #40]	; 0x28
 800ccd8:	e7bf      	b.n	800cc5a <_dtoa_r+0x1da>
 800ccda:	2300      	movs	r3, #0
 800ccdc:	9308      	str	r3, [sp, #32]
 800ccde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	dc55      	bgt.n	800cd90 <_dtoa_r+0x310>
 800cce4:	2301      	movs	r3, #1
 800cce6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ccea:	461a      	mov	r2, r3
 800ccec:	9209      	str	r2, [sp, #36]	; 0x24
 800ccee:	e00c      	b.n	800cd0a <_dtoa_r+0x28a>
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	e7f3      	b.n	800ccdc <_dtoa_r+0x25c>
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccf8:	9308      	str	r3, [sp, #32]
 800ccfa:	9b00      	ldr	r3, [sp, #0]
 800ccfc:	4413      	add	r3, r2
 800ccfe:	9302      	str	r3, [sp, #8]
 800cd00:	3301      	adds	r3, #1
 800cd02:	2b01      	cmp	r3, #1
 800cd04:	9303      	str	r3, [sp, #12]
 800cd06:	bfb8      	it	lt
 800cd08:	2301      	movlt	r3, #1
 800cd0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	6042      	str	r2, [r0, #4]
 800cd10:	2204      	movs	r2, #4
 800cd12:	f102 0614 	add.w	r6, r2, #20
 800cd16:	429e      	cmp	r6, r3
 800cd18:	6841      	ldr	r1, [r0, #4]
 800cd1a:	d93d      	bls.n	800cd98 <_dtoa_r+0x318>
 800cd1c:	4620      	mov	r0, r4
 800cd1e:	f000 fcb7 	bl	800d690 <_Balloc>
 800cd22:	9001      	str	r0, [sp, #4]
 800cd24:	2800      	cmp	r0, #0
 800cd26:	d13b      	bne.n	800cda0 <_dtoa_r+0x320>
 800cd28:	4b11      	ldr	r3, [pc, #68]	; (800cd70 <_dtoa_r+0x2f0>)
 800cd2a:	4602      	mov	r2, r0
 800cd2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cd30:	e6c0      	b.n	800cab4 <_dtoa_r+0x34>
 800cd32:	2301      	movs	r3, #1
 800cd34:	e7df      	b.n	800ccf6 <_dtoa_r+0x276>
 800cd36:	bf00      	nop
 800cd38:	636f4361 	.word	0x636f4361
 800cd3c:	3fd287a7 	.word	0x3fd287a7
 800cd40:	8b60c8b3 	.word	0x8b60c8b3
 800cd44:	3fc68a28 	.word	0x3fc68a28
 800cd48:	509f79fb 	.word	0x509f79fb
 800cd4c:	3fd34413 	.word	0x3fd34413
 800cd50:	0800ebad 	.word	0x0800ebad
 800cd54:	0800ebc4 	.word	0x0800ebc4
 800cd58:	7ff00000 	.word	0x7ff00000
 800cd5c:	0800eba9 	.word	0x0800eba9
 800cd60:	0800eba0 	.word	0x0800eba0
 800cd64:	0800eb7d 	.word	0x0800eb7d
 800cd68:	3ff80000 	.word	0x3ff80000
 800cd6c:	0800ecb8 	.word	0x0800ecb8
 800cd70:	0800ec1f 	.word	0x0800ec1f
 800cd74:	2501      	movs	r5, #1
 800cd76:	2300      	movs	r3, #0
 800cd78:	9306      	str	r3, [sp, #24]
 800cd7a:	9508      	str	r5, [sp, #32]
 800cd7c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cd84:	2200      	movs	r2, #0
 800cd86:	2312      	movs	r3, #18
 800cd88:	e7b0      	b.n	800ccec <_dtoa_r+0x26c>
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	9308      	str	r3, [sp, #32]
 800cd8e:	e7f5      	b.n	800cd7c <_dtoa_r+0x2fc>
 800cd90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cd96:	e7b8      	b.n	800cd0a <_dtoa_r+0x28a>
 800cd98:	3101      	adds	r1, #1
 800cd9a:	6041      	str	r1, [r0, #4]
 800cd9c:	0052      	lsls	r2, r2, #1
 800cd9e:	e7b8      	b.n	800cd12 <_dtoa_r+0x292>
 800cda0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cda2:	9a01      	ldr	r2, [sp, #4]
 800cda4:	601a      	str	r2, [r3, #0]
 800cda6:	9b03      	ldr	r3, [sp, #12]
 800cda8:	2b0e      	cmp	r3, #14
 800cdaa:	f200 809d 	bhi.w	800cee8 <_dtoa_r+0x468>
 800cdae:	2d00      	cmp	r5, #0
 800cdb0:	f000 809a 	beq.w	800cee8 <_dtoa_r+0x468>
 800cdb4:	9b00      	ldr	r3, [sp, #0]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	dd32      	ble.n	800ce20 <_dtoa_r+0x3a0>
 800cdba:	4ab7      	ldr	r2, [pc, #732]	; (800d098 <_dtoa_r+0x618>)
 800cdbc:	f003 030f 	and.w	r3, r3, #15
 800cdc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cdc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cdc8:	9b00      	ldr	r3, [sp, #0]
 800cdca:	05d8      	lsls	r0, r3, #23
 800cdcc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800cdd0:	d516      	bpl.n	800ce00 <_dtoa_r+0x380>
 800cdd2:	4bb2      	ldr	r3, [pc, #712]	; (800d09c <_dtoa_r+0x61c>)
 800cdd4:	ec51 0b19 	vmov	r0, r1, d9
 800cdd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cddc:	f7f3 fd36 	bl	800084c <__aeabi_ddiv>
 800cde0:	f007 070f 	and.w	r7, r7, #15
 800cde4:	4682      	mov	sl, r0
 800cde6:	468b      	mov	fp, r1
 800cde8:	2503      	movs	r5, #3
 800cdea:	4eac      	ldr	r6, [pc, #688]	; (800d09c <_dtoa_r+0x61c>)
 800cdec:	b957      	cbnz	r7, 800ce04 <_dtoa_r+0x384>
 800cdee:	4642      	mov	r2, r8
 800cdf0:	464b      	mov	r3, r9
 800cdf2:	4650      	mov	r0, sl
 800cdf4:	4659      	mov	r1, fp
 800cdf6:	f7f3 fd29 	bl	800084c <__aeabi_ddiv>
 800cdfa:	4682      	mov	sl, r0
 800cdfc:	468b      	mov	fp, r1
 800cdfe:	e028      	b.n	800ce52 <_dtoa_r+0x3d2>
 800ce00:	2502      	movs	r5, #2
 800ce02:	e7f2      	b.n	800cdea <_dtoa_r+0x36a>
 800ce04:	07f9      	lsls	r1, r7, #31
 800ce06:	d508      	bpl.n	800ce1a <_dtoa_r+0x39a>
 800ce08:	4640      	mov	r0, r8
 800ce0a:	4649      	mov	r1, r9
 800ce0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ce10:	f7f3 fbf2 	bl	80005f8 <__aeabi_dmul>
 800ce14:	3501      	adds	r5, #1
 800ce16:	4680      	mov	r8, r0
 800ce18:	4689      	mov	r9, r1
 800ce1a:	107f      	asrs	r7, r7, #1
 800ce1c:	3608      	adds	r6, #8
 800ce1e:	e7e5      	b.n	800cdec <_dtoa_r+0x36c>
 800ce20:	f000 809b 	beq.w	800cf5a <_dtoa_r+0x4da>
 800ce24:	9b00      	ldr	r3, [sp, #0]
 800ce26:	4f9d      	ldr	r7, [pc, #628]	; (800d09c <_dtoa_r+0x61c>)
 800ce28:	425e      	negs	r6, r3
 800ce2a:	4b9b      	ldr	r3, [pc, #620]	; (800d098 <_dtoa_r+0x618>)
 800ce2c:	f006 020f 	and.w	r2, r6, #15
 800ce30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce38:	ec51 0b19 	vmov	r0, r1, d9
 800ce3c:	f7f3 fbdc 	bl	80005f8 <__aeabi_dmul>
 800ce40:	1136      	asrs	r6, r6, #4
 800ce42:	4682      	mov	sl, r0
 800ce44:	468b      	mov	fp, r1
 800ce46:	2300      	movs	r3, #0
 800ce48:	2502      	movs	r5, #2
 800ce4a:	2e00      	cmp	r6, #0
 800ce4c:	d17a      	bne.n	800cf44 <_dtoa_r+0x4c4>
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d1d3      	bne.n	800cdfa <_dtoa_r+0x37a>
 800ce52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	f000 8082 	beq.w	800cf5e <_dtoa_r+0x4de>
 800ce5a:	4b91      	ldr	r3, [pc, #580]	; (800d0a0 <_dtoa_r+0x620>)
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	4650      	mov	r0, sl
 800ce60:	4659      	mov	r1, fp
 800ce62:	f7f3 fe3b 	bl	8000adc <__aeabi_dcmplt>
 800ce66:	2800      	cmp	r0, #0
 800ce68:	d079      	beq.n	800cf5e <_dtoa_r+0x4de>
 800ce6a:	9b03      	ldr	r3, [sp, #12]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d076      	beq.n	800cf5e <_dtoa_r+0x4de>
 800ce70:	9b02      	ldr	r3, [sp, #8]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	dd36      	ble.n	800cee4 <_dtoa_r+0x464>
 800ce76:	9b00      	ldr	r3, [sp, #0]
 800ce78:	4650      	mov	r0, sl
 800ce7a:	4659      	mov	r1, fp
 800ce7c:	1e5f      	subs	r7, r3, #1
 800ce7e:	2200      	movs	r2, #0
 800ce80:	4b88      	ldr	r3, [pc, #544]	; (800d0a4 <_dtoa_r+0x624>)
 800ce82:	f7f3 fbb9 	bl	80005f8 <__aeabi_dmul>
 800ce86:	9e02      	ldr	r6, [sp, #8]
 800ce88:	4682      	mov	sl, r0
 800ce8a:	468b      	mov	fp, r1
 800ce8c:	3501      	adds	r5, #1
 800ce8e:	4628      	mov	r0, r5
 800ce90:	f7f3 fb48 	bl	8000524 <__aeabi_i2d>
 800ce94:	4652      	mov	r2, sl
 800ce96:	465b      	mov	r3, fp
 800ce98:	f7f3 fbae 	bl	80005f8 <__aeabi_dmul>
 800ce9c:	4b82      	ldr	r3, [pc, #520]	; (800d0a8 <_dtoa_r+0x628>)
 800ce9e:	2200      	movs	r2, #0
 800cea0:	f7f3 f9f4 	bl	800028c <__adddf3>
 800cea4:	46d0      	mov	r8, sl
 800cea6:	46d9      	mov	r9, fp
 800cea8:	4682      	mov	sl, r0
 800ceaa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ceae:	2e00      	cmp	r6, #0
 800ceb0:	d158      	bne.n	800cf64 <_dtoa_r+0x4e4>
 800ceb2:	4b7e      	ldr	r3, [pc, #504]	; (800d0ac <_dtoa_r+0x62c>)
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	4640      	mov	r0, r8
 800ceb8:	4649      	mov	r1, r9
 800ceba:	f7f3 f9e5 	bl	8000288 <__aeabi_dsub>
 800cebe:	4652      	mov	r2, sl
 800cec0:	465b      	mov	r3, fp
 800cec2:	4680      	mov	r8, r0
 800cec4:	4689      	mov	r9, r1
 800cec6:	f7f3 fe27 	bl	8000b18 <__aeabi_dcmpgt>
 800ceca:	2800      	cmp	r0, #0
 800cecc:	f040 8295 	bne.w	800d3fa <_dtoa_r+0x97a>
 800ced0:	4652      	mov	r2, sl
 800ced2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ced6:	4640      	mov	r0, r8
 800ced8:	4649      	mov	r1, r9
 800ceda:	f7f3 fdff 	bl	8000adc <__aeabi_dcmplt>
 800cede:	2800      	cmp	r0, #0
 800cee0:	f040 8289 	bne.w	800d3f6 <_dtoa_r+0x976>
 800cee4:	ec5b ab19 	vmov	sl, fp, d9
 800cee8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	f2c0 8148 	blt.w	800d180 <_dtoa_r+0x700>
 800cef0:	9a00      	ldr	r2, [sp, #0]
 800cef2:	2a0e      	cmp	r2, #14
 800cef4:	f300 8144 	bgt.w	800d180 <_dtoa_r+0x700>
 800cef8:	4b67      	ldr	r3, [pc, #412]	; (800d098 <_dtoa_r+0x618>)
 800cefa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cefe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cf02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	f280 80d5 	bge.w	800d0b4 <_dtoa_r+0x634>
 800cf0a:	9b03      	ldr	r3, [sp, #12]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	f300 80d1 	bgt.w	800d0b4 <_dtoa_r+0x634>
 800cf12:	f040 826f 	bne.w	800d3f4 <_dtoa_r+0x974>
 800cf16:	4b65      	ldr	r3, [pc, #404]	; (800d0ac <_dtoa_r+0x62c>)
 800cf18:	2200      	movs	r2, #0
 800cf1a:	4640      	mov	r0, r8
 800cf1c:	4649      	mov	r1, r9
 800cf1e:	f7f3 fb6b 	bl	80005f8 <__aeabi_dmul>
 800cf22:	4652      	mov	r2, sl
 800cf24:	465b      	mov	r3, fp
 800cf26:	f7f3 fded 	bl	8000b04 <__aeabi_dcmpge>
 800cf2a:	9e03      	ldr	r6, [sp, #12]
 800cf2c:	4637      	mov	r7, r6
 800cf2e:	2800      	cmp	r0, #0
 800cf30:	f040 8245 	bne.w	800d3be <_dtoa_r+0x93e>
 800cf34:	9d01      	ldr	r5, [sp, #4]
 800cf36:	2331      	movs	r3, #49	; 0x31
 800cf38:	f805 3b01 	strb.w	r3, [r5], #1
 800cf3c:	9b00      	ldr	r3, [sp, #0]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	9300      	str	r3, [sp, #0]
 800cf42:	e240      	b.n	800d3c6 <_dtoa_r+0x946>
 800cf44:	07f2      	lsls	r2, r6, #31
 800cf46:	d505      	bpl.n	800cf54 <_dtoa_r+0x4d4>
 800cf48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf4c:	f7f3 fb54 	bl	80005f8 <__aeabi_dmul>
 800cf50:	3501      	adds	r5, #1
 800cf52:	2301      	movs	r3, #1
 800cf54:	1076      	asrs	r6, r6, #1
 800cf56:	3708      	adds	r7, #8
 800cf58:	e777      	b.n	800ce4a <_dtoa_r+0x3ca>
 800cf5a:	2502      	movs	r5, #2
 800cf5c:	e779      	b.n	800ce52 <_dtoa_r+0x3d2>
 800cf5e:	9f00      	ldr	r7, [sp, #0]
 800cf60:	9e03      	ldr	r6, [sp, #12]
 800cf62:	e794      	b.n	800ce8e <_dtoa_r+0x40e>
 800cf64:	9901      	ldr	r1, [sp, #4]
 800cf66:	4b4c      	ldr	r3, [pc, #304]	; (800d098 <_dtoa_r+0x618>)
 800cf68:	4431      	add	r1, r6
 800cf6a:	910d      	str	r1, [sp, #52]	; 0x34
 800cf6c:	9908      	ldr	r1, [sp, #32]
 800cf6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cf72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cf76:	2900      	cmp	r1, #0
 800cf78:	d043      	beq.n	800d002 <_dtoa_r+0x582>
 800cf7a:	494d      	ldr	r1, [pc, #308]	; (800d0b0 <_dtoa_r+0x630>)
 800cf7c:	2000      	movs	r0, #0
 800cf7e:	f7f3 fc65 	bl	800084c <__aeabi_ddiv>
 800cf82:	4652      	mov	r2, sl
 800cf84:	465b      	mov	r3, fp
 800cf86:	f7f3 f97f 	bl	8000288 <__aeabi_dsub>
 800cf8a:	9d01      	ldr	r5, [sp, #4]
 800cf8c:	4682      	mov	sl, r0
 800cf8e:	468b      	mov	fp, r1
 800cf90:	4649      	mov	r1, r9
 800cf92:	4640      	mov	r0, r8
 800cf94:	f7f3 fde0 	bl	8000b58 <__aeabi_d2iz>
 800cf98:	4606      	mov	r6, r0
 800cf9a:	f7f3 fac3 	bl	8000524 <__aeabi_i2d>
 800cf9e:	4602      	mov	r2, r0
 800cfa0:	460b      	mov	r3, r1
 800cfa2:	4640      	mov	r0, r8
 800cfa4:	4649      	mov	r1, r9
 800cfa6:	f7f3 f96f 	bl	8000288 <__aeabi_dsub>
 800cfaa:	3630      	adds	r6, #48	; 0x30
 800cfac:	f805 6b01 	strb.w	r6, [r5], #1
 800cfb0:	4652      	mov	r2, sl
 800cfb2:	465b      	mov	r3, fp
 800cfb4:	4680      	mov	r8, r0
 800cfb6:	4689      	mov	r9, r1
 800cfb8:	f7f3 fd90 	bl	8000adc <__aeabi_dcmplt>
 800cfbc:	2800      	cmp	r0, #0
 800cfbe:	d163      	bne.n	800d088 <_dtoa_r+0x608>
 800cfc0:	4642      	mov	r2, r8
 800cfc2:	464b      	mov	r3, r9
 800cfc4:	4936      	ldr	r1, [pc, #216]	; (800d0a0 <_dtoa_r+0x620>)
 800cfc6:	2000      	movs	r0, #0
 800cfc8:	f7f3 f95e 	bl	8000288 <__aeabi_dsub>
 800cfcc:	4652      	mov	r2, sl
 800cfce:	465b      	mov	r3, fp
 800cfd0:	f7f3 fd84 	bl	8000adc <__aeabi_dcmplt>
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	f040 80b5 	bne.w	800d144 <_dtoa_r+0x6c4>
 800cfda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cfdc:	429d      	cmp	r5, r3
 800cfde:	d081      	beq.n	800cee4 <_dtoa_r+0x464>
 800cfe0:	4b30      	ldr	r3, [pc, #192]	; (800d0a4 <_dtoa_r+0x624>)
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	4650      	mov	r0, sl
 800cfe6:	4659      	mov	r1, fp
 800cfe8:	f7f3 fb06 	bl	80005f8 <__aeabi_dmul>
 800cfec:	4b2d      	ldr	r3, [pc, #180]	; (800d0a4 <_dtoa_r+0x624>)
 800cfee:	4682      	mov	sl, r0
 800cff0:	468b      	mov	fp, r1
 800cff2:	4640      	mov	r0, r8
 800cff4:	4649      	mov	r1, r9
 800cff6:	2200      	movs	r2, #0
 800cff8:	f7f3 fafe 	bl	80005f8 <__aeabi_dmul>
 800cffc:	4680      	mov	r8, r0
 800cffe:	4689      	mov	r9, r1
 800d000:	e7c6      	b.n	800cf90 <_dtoa_r+0x510>
 800d002:	4650      	mov	r0, sl
 800d004:	4659      	mov	r1, fp
 800d006:	f7f3 faf7 	bl	80005f8 <__aeabi_dmul>
 800d00a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d00c:	9d01      	ldr	r5, [sp, #4]
 800d00e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d010:	4682      	mov	sl, r0
 800d012:	468b      	mov	fp, r1
 800d014:	4649      	mov	r1, r9
 800d016:	4640      	mov	r0, r8
 800d018:	f7f3 fd9e 	bl	8000b58 <__aeabi_d2iz>
 800d01c:	4606      	mov	r6, r0
 800d01e:	f7f3 fa81 	bl	8000524 <__aeabi_i2d>
 800d022:	3630      	adds	r6, #48	; 0x30
 800d024:	4602      	mov	r2, r0
 800d026:	460b      	mov	r3, r1
 800d028:	4640      	mov	r0, r8
 800d02a:	4649      	mov	r1, r9
 800d02c:	f7f3 f92c 	bl	8000288 <__aeabi_dsub>
 800d030:	f805 6b01 	strb.w	r6, [r5], #1
 800d034:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d036:	429d      	cmp	r5, r3
 800d038:	4680      	mov	r8, r0
 800d03a:	4689      	mov	r9, r1
 800d03c:	f04f 0200 	mov.w	r2, #0
 800d040:	d124      	bne.n	800d08c <_dtoa_r+0x60c>
 800d042:	4b1b      	ldr	r3, [pc, #108]	; (800d0b0 <_dtoa_r+0x630>)
 800d044:	4650      	mov	r0, sl
 800d046:	4659      	mov	r1, fp
 800d048:	f7f3 f920 	bl	800028c <__adddf3>
 800d04c:	4602      	mov	r2, r0
 800d04e:	460b      	mov	r3, r1
 800d050:	4640      	mov	r0, r8
 800d052:	4649      	mov	r1, r9
 800d054:	f7f3 fd60 	bl	8000b18 <__aeabi_dcmpgt>
 800d058:	2800      	cmp	r0, #0
 800d05a:	d173      	bne.n	800d144 <_dtoa_r+0x6c4>
 800d05c:	4652      	mov	r2, sl
 800d05e:	465b      	mov	r3, fp
 800d060:	4913      	ldr	r1, [pc, #76]	; (800d0b0 <_dtoa_r+0x630>)
 800d062:	2000      	movs	r0, #0
 800d064:	f7f3 f910 	bl	8000288 <__aeabi_dsub>
 800d068:	4602      	mov	r2, r0
 800d06a:	460b      	mov	r3, r1
 800d06c:	4640      	mov	r0, r8
 800d06e:	4649      	mov	r1, r9
 800d070:	f7f3 fd34 	bl	8000adc <__aeabi_dcmplt>
 800d074:	2800      	cmp	r0, #0
 800d076:	f43f af35 	beq.w	800cee4 <_dtoa_r+0x464>
 800d07a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d07c:	1e6b      	subs	r3, r5, #1
 800d07e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d080:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d084:	2b30      	cmp	r3, #48	; 0x30
 800d086:	d0f8      	beq.n	800d07a <_dtoa_r+0x5fa>
 800d088:	9700      	str	r7, [sp, #0]
 800d08a:	e049      	b.n	800d120 <_dtoa_r+0x6a0>
 800d08c:	4b05      	ldr	r3, [pc, #20]	; (800d0a4 <_dtoa_r+0x624>)
 800d08e:	f7f3 fab3 	bl	80005f8 <__aeabi_dmul>
 800d092:	4680      	mov	r8, r0
 800d094:	4689      	mov	r9, r1
 800d096:	e7bd      	b.n	800d014 <_dtoa_r+0x594>
 800d098:	0800ecb8 	.word	0x0800ecb8
 800d09c:	0800ec90 	.word	0x0800ec90
 800d0a0:	3ff00000 	.word	0x3ff00000
 800d0a4:	40240000 	.word	0x40240000
 800d0a8:	401c0000 	.word	0x401c0000
 800d0ac:	40140000 	.word	0x40140000
 800d0b0:	3fe00000 	.word	0x3fe00000
 800d0b4:	9d01      	ldr	r5, [sp, #4]
 800d0b6:	4656      	mov	r6, sl
 800d0b8:	465f      	mov	r7, fp
 800d0ba:	4642      	mov	r2, r8
 800d0bc:	464b      	mov	r3, r9
 800d0be:	4630      	mov	r0, r6
 800d0c0:	4639      	mov	r1, r7
 800d0c2:	f7f3 fbc3 	bl	800084c <__aeabi_ddiv>
 800d0c6:	f7f3 fd47 	bl	8000b58 <__aeabi_d2iz>
 800d0ca:	4682      	mov	sl, r0
 800d0cc:	f7f3 fa2a 	bl	8000524 <__aeabi_i2d>
 800d0d0:	4642      	mov	r2, r8
 800d0d2:	464b      	mov	r3, r9
 800d0d4:	f7f3 fa90 	bl	80005f8 <__aeabi_dmul>
 800d0d8:	4602      	mov	r2, r0
 800d0da:	460b      	mov	r3, r1
 800d0dc:	4630      	mov	r0, r6
 800d0de:	4639      	mov	r1, r7
 800d0e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d0e4:	f7f3 f8d0 	bl	8000288 <__aeabi_dsub>
 800d0e8:	f805 6b01 	strb.w	r6, [r5], #1
 800d0ec:	9e01      	ldr	r6, [sp, #4]
 800d0ee:	9f03      	ldr	r7, [sp, #12]
 800d0f0:	1bae      	subs	r6, r5, r6
 800d0f2:	42b7      	cmp	r7, r6
 800d0f4:	4602      	mov	r2, r0
 800d0f6:	460b      	mov	r3, r1
 800d0f8:	d135      	bne.n	800d166 <_dtoa_r+0x6e6>
 800d0fa:	f7f3 f8c7 	bl	800028c <__adddf3>
 800d0fe:	4642      	mov	r2, r8
 800d100:	464b      	mov	r3, r9
 800d102:	4606      	mov	r6, r0
 800d104:	460f      	mov	r7, r1
 800d106:	f7f3 fd07 	bl	8000b18 <__aeabi_dcmpgt>
 800d10a:	b9d0      	cbnz	r0, 800d142 <_dtoa_r+0x6c2>
 800d10c:	4642      	mov	r2, r8
 800d10e:	464b      	mov	r3, r9
 800d110:	4630      	mov	r0, r6
 800d112:	4639      	mov	r1, r7
 800d114:	f7f3 fcd8 	bl	8000ac8 <__aeabi_dcmpeq>
 800d118:	b110      	cbz	r0, 800d120 <_dtoa_r+0x6a0>
 800d11a:	f01a 0f01 	tst.w	sl, #1
 800d11e:	d110      	bne.n	800d142 <_dtoa_r+0x6c2>
 800d120:	4620      	mov	r0, r4
 800d122:	ee18 1a10 	vmov	r1, s16
 800d126:	f000 faf3 	bl	800d710 <_Bfree>
 800d12a:	2300      	movs	r3, #0
 800d12c:	9800      	ldr	r0, [sp, #0]
 800d12e:	702b      	strb	r3, [r5, #0]
 800d130:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d132:	3001      	adds	r0, #1
 800d134:	6018      	str	r0, [r3, #0]
 800d136:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d138:	2b00      	cmp	r3, #0
 800d13a:	f43f acf1 	beq.w	800cb20 <_dtoa_r+0xa0>
 800d13e:	601d      	str	r5, [r3, #0]
 800d140:	e4ee      	b.n	800cb20 <_dtoa_r+0xa0>
 800d142:	9f00      	ldr	r7, [sp, #0]
 800d144:	462b      	mov	r3, r5
 800d146:	461d      	mov	r5, r3
 800d148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d14c:	2a39      	cmp	r2, #57	; 0x39
 800d14e:	d106      	bne.n	800d15e <_dtoa_r+0x6de>
 800d150:	9a01      	ldr	r2, [sp, #4]
 800d152:	429a      	cmp	r2, r3
 800d154:	d1f7      	bne.n	800d146 <_dtoa_r+0x6c6>
 800d156:	9901      	ldr	r1, [sp, #4]
 800d158:	2230      	movs	r2, #48	; 0x30
 800d15a:	3701      	adds	r7, #1
 800d15c:	700a      	strb	r2, [r1, #0]
 800d15e:	781a      	ldrb	r2, [r3, #0]
 800d160:	3201      	adds	r2, #1
 800d162:	701a      	strb	r2, [r3, #0]
 800d164:	e790      	b.n	800d088 <_dtoa_r+0x608>
 800d166:	4ba6      	ldr	r3, [pc, #664]	; (800d400 <_dtoa_r+0x980>)
 800d168:	2200      	movs	r2, #0
 800d16a:	f7f3 fa45 	bl	80005f8 <__aeabi_dmul>
 800d16e:	2200      	movs	r2, #0
 800d170:	2300      	movs	r3, #0
 800d172:	4606      	mov	r6, r0
 800d174:	460f      	mov	r7, r1
 800d176:	f7f3 fca7 	bl	8000ac8 <__aeabi_dcmpeq>
 800d17a:	2800      	cmp	r0, #0
 800d17c:	d09d      	beq.n	800d0ba <_dtoa_r+0x63a>
 800d17e:	e7cf      	b.n	800d120 <_dtoa_r+0x6a0>
 800d180:	9a08      	ldr	r2, [sp, #32]
 800d182:	2a00      	cmp	r2, #0
 800d184:	f000 80d7 	beq.w	800d336 <_dtoa_r+0x8b6>
 800d188:	9a06      	ldr	r2, [sp, #24]
 800d18a:	2a01      	cmp	r2, #1
 800d18c:	f300 80ba 	bgt.w	800d304 <_dtoa_r+0x884>
 800d190:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d192:	2a00      	cmp	r2, #0
 800d194:	f000 80b2 	beq.w	800d2fc <_dtoa_r+0x87c>
 800d198:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d19c:	9e07      	ldr	r6, [sp, #28]
 800d19e:	9d04      	ldr	r5, [sp, #16]
 800d1a0:	9a04      	ldr	r2, [sp, #16]
 800d1a2:	441a      	add	r2, r3
 800d1a4:	9204      	str	r2, [sp, #16]
 800d1a6:	9a05      	ldr	r2, [sp, #20]
 800d1a8:	2101      	movs	r1, #1
 800d1aa:	441a      	add	r2, r3
 800d1ac:	4620      	mov	r0, r4
 800d1ae:	9205      	str	r2, [sp, #20]
 800d1b0:	f000 fb66 	bl	800d880 <__i2b>
 800d1b4:	4607      	mov	r7, r0
 800d1b6:	2d00      	cmp	r5, #0
 800d1b8:	dd0c      	ble.n	800d1d4 <_dtoa_r+0x754>
 800d1ba:	9b05      	ldr	r3, [sp, #20]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	dd09      	ble.n	800d1d4 <_dtoa_r+0x754>
 800d1c0:	42ab      	cmp	r3, r5
 800d1c2:	9a04      	ldr	r2, [sp, #16]
 800d1c4:	bfa8      	it	ge
 800d1c6:	462b      	movge	r3, r5
 800d1c8:	1ad2      	subs	r2, r2, r3
 800d1ca:	9204      	str	r2, [sp, #16]
 800d1cc:	9a05      	ldr	r2, [sp, #20]
 800d1ce:	1aed      	subs	r5, r5, r3
 800d1d0:	1ad3      	subs	r3, r2, r3
 800d1d2:	9305      	str	r3, [sp, #20]
 800d1d4:	9b07      	ldr	r3, [sp, #28]
 800d1d6:	b31b      	cbz	r3, 800d220 <_dtoa_r+0x7a0>
 800d1d8:	9b08      	ldr	r3, [sp, #32]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	f000 80af 	beq.w	800d33e <_dtoa_r+0x8be>
 800d1e0:	2e00      	cmp	r6, #0
 800d1e2:	dd13      	ble.n	800d20c <_dtoa_r+0x78c>
 800d1e4:	4639      	mov	r1, r7
 800d1e6:	4632      	mov	r2, r6
 800d1e8:	4620      	mov	r0, r4
 800d1ea:	f000 fc09 	bl	800da00 <__pow5mult>
 800d1ee:	ee18 2a10 	vmov	r2, s16
 800d1f2:	4601      	mov	r1, r0
 800d1f4:	4607      	mov	r7, r0
 800d1f6:	4620      	mov	r0, r4
 800d1f8:	f000 fb58 	bl	800d8ac <__multiply>
 800d1fc:	ee18 1a10 	vmov	r1, s16
 800d200:	4680      	mov	r8, r0
 800d202:	4620      	mov	r0, r4
 800d204:	f000 fa84 	bl	800d710 <_Bfree>
 800d208:	ee08 8a10 	vmov	s16, r8
 800d20c:	9b07      	ldr	r3, [sp, #28]
 800d20e:	1b9a      	subs	r2, r3, r6
 800d210:	d006      	beq.n	800d220 <_dtoa_r+0x7a0>
 800d212:	ee18 1a10 	vmov	r1, s16
 800d216:	4620      	mov	r0, r4
 800d218:	f000 fbf2 	bl	800da00 <__pow5mult>
 800d21c:	ee08 0a10 	vmov	s16, r0
 800d220:	2101      	movs	r1, #1
 800d222:	4620      	mov	r0, r4
 800d224:	f000 fb2c 	bl	800d880 <__i2b>
 800d228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	4606      	mov	r6, r0
 800d22e:	f340 8088 	ble.w	800d342 <_dtoa_r+0x8c2>
 800d232:	461a      	mov	r2, r3
 800d234:	4601      	mov	r1, r0
 800d236:	4620      	mov	r0, r4
 800d238:	f000 fbe2 	bl	800da00 <__pow5mult>
 800d23c:	9b06      	ldr	r3, [sp, #24]
 800d23e:	2b01      	cmp	r3, #1
 800d240:	4606      	mov	r6, r0
 800d242:	f340 8081 	ble.w	800d348 <_dtoa_r+0x8c8>
 800d246:	f04f 0800 	mov.w	r8, #0
 800d24a:	6933      	ldr	r3, [r6, #16]
 800d24c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d250:	6918      	ldr	r0, [r3, #16]
 800d252:	f000 fac5 	bl	800d7e0 <__hi0bits>
 800d256:	f1c0 0020 	rsb	r0, r0, #32
 800d25a:	9b05      	ldr	r3, [sp, #20]
 800d25c:	4418      	add	r0, r3
 800d25e:	f010 001f 	ands.w	r0, r0, #31
 800d262:	f000 8092 	beq.w	800d38a <_dtoa_r+0x90a>
 800d266:	f1c0 0320 	rsb	r3, r0, #32
 800d26a:	2b04      	cmp	r3, #4
 800d26c:	f340 808a 	ble.w	800d384 <_dtoa_r+0x904>
 800d270:	f1c0 001c 	rsb	r0, r0, #28
 800d274:	9b04      	ldr	r3, [sp, #16]
 800d276:	4403      	add	r3, r0
 800d278:	9304      	str	r3, [sp, #16]
 800d27a:	9b05      	ldr	r3, [sp, #20]
 800d27c:	4403      	add	r3, r0
 800d27e:	4405      	add	r5, r0
 800d280:	9305      	str	r3, [sp, #20]
 800d282:	9b04      	ldr	r3, [sp, #16]
 800d284:	2b00      	cmp	r3, #0
 800d286:	dd07      	ble.n	800d298 <_dtoa_r+0x818>
 800d288:	ee18 1a10 	vmov	r1, s16
 800d28c:	461a      	mov	r2, r3
 800d28e:	4620      	mov	r0, r4
 800d290:	f000 fc10 	bl	800dab4 <__lshift>
 800d294:	ee08 0a10 	vmov	s16, r0
 800d298:	9b05      	ldr	r3, [sp, #20]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	dd05      	ble.n	800d2aa <_dtoa_r+0x82a>
 800d29e:	4631      	mov	r1, r6
 800d2a0:	461a      	mov	r2, r3
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	f000 fc06 	bl	800dab4 <__lshift>
 800d2a8:	4606      	mov	r6, r0
 800d2aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d06e      	beq.n	800d38e <_dtoa_r+0x90e>
 800d2b0:	ee18 0a10 	vmov	r0, s16
 800d2b4:	4631      	mov	r1, r6
 800d2b6:	f000 fc6d 	bl	800db94 <__mcmp>
 800d2ba:	2800      	cmp	r0, #0
 800d2bc:	da67      	bge.n	800d38e <_dtoa_r+0x90e>
 800d2be:	9b00      	ldr	r3, [sp, #0]
 800d2c0:	3b01      	subs	r3, #1
 800d2c2:	ee18 1a10 	vmov	r1, s16
 800d2c6:	9300      	str	r3, [sp, #0]
 800d2c8:	220a      	movs	r2, #10
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	f000 fa41 	bl	800d754 <__multadd>
 800d2d2:	9b08      	ldr	r3, [sp, #32]
 800d2d4:	ee08 0a10 	vmov	s16, r0
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	f000 81b1 	beq.w	800d640 <_dtoa_r+0xbc0>
 800d2de:	2300      	movs	r3, #0
 800d2e0:	4639      	mov	r1, r7
 800d2e2:	220a      	movs	r2, #10
 800d2e4:	4620      	mov	r0, r4
 800d2e6:	f000 fa35 	bl	800d754 <__multadd>
 800d2ea:	9b02      	ldr	r3, [sp, #8]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	4607      	mov	r7, r0
 800d2f0:	f300 808e 	bgt.w	800d410 <_dtoa_r+0x990>
 800d2f4:	9b06      	ldr	r3, [sp, #24]
 800d2f6:	2b02      	cmp	r3, #2
 800d2f8:	dc51      	bgt.n	800d39e <_dtoa_r+0x91e>
 800d2fa:	e089      	b.n	800d410 <_dtoa_r+0x990>
 800d2fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d2fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d302:	e74b      	b.n	800d19c <_dtoa_r+0x71c>
 800d304:	9b03      	ldr	r3, [sp, #12]
 800d306:	1e5e      	subs	r6, r3, #1
 800d308:	9b07      	ldr	r3, [sp, #28]
 800d30a:	42b3      	cmp	r3, r6
 800d30c:	bfbf      	itttt	lt
 800d30e:	9b07      	ldrlt	r3, [sp, #28]
 800d310:	9607      	strlt	r6, [sp, #28]
 800d312:	1af2      	sublt	r2, r6, r3
 800d314:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d316:	bfb6      	itet	lt
 800d318:	189b      	addlt	r3, r3, r2
 800d31a:	1b9e      	subge	r6, r3, r6
 800d31c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d31e:	9b03      	ldr	r3, [sp, #12]
 800d320:	bfb8      	it	lt
 800d322:	2600      	movlt	r6, #0
 800d324:	2b00      	cmp	r3, #0
 800d326:	bfb7      	itett	lt
 800d328:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d32c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d330:	1a9d      	sublt	r5, r3, r2
 800d332:	2300      	movlt	r3, #0
 800d334:	e734      	b.n	800d1a0 <_dtoa_r+0x720>
 800d336:	9e07      	ldr	r6, [sp, #28]
 800d338:	9d04      	ldr	r5, [sp, #16]
 800d33a:	9f08      	ldr	r7, [sp, #32]
 800d33c:	e73b      	b.n	800d1b6 <_dtoa_r+0x736>
 800d33e:	9a07      	ldr	r2, [sp, #28]
 800d340:	e767      	b.n	800d212 <_dtoa_r+0x792>
 800d342:	9b06      	ldr	r3, [sp, #24]
 800d344:	2b01      	cmp	r3, #1
 800d346:	dc18      	bgt.n	800d37a <_dtoa_r+0x8fa>
 800d348:	f1ba 0f00 	cmp.w	sl, #0
 800d34c:	d115      	bne.n	800d37a <_dtoa_r+0x8fa>
 800d34e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d352:	b993      	cbnz	r3, 800d37a <_dtoa_r+0x8fa>
 800d354:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d358:	0d1b      	lsrs	r3, r3, #20
 800d35a:	051b      	lsls	r3, r3, #20
 800d35c:	b183      	cbz	r3, 800d380 <_dtoa_r+0x900>
 800d35e:	9b04      	ldr	r3, [sp, #16]
 800d360:	3301      	adds	r3, #1
 800d362:	9304      	str	r3, [sp, #16]
 800d364:	9b05      	ldr	r3, [sp, #20]
 800d366:	3301      	adds	r3, #1
 800d368:	9305      	str	r3, [sp, #20]
 800d36a:	f04f 0801 	mov.w	r8, #1
 800d36e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d370:	2b00      	cmp	r3, #0
 800d372:	f47f af6a 	bne.w	800d24a <_dtoa_r+0x7ca>
 800d376:	2001      	movs	r0, #1
 800d378:	e76f      	b.n	800d25a <_dtoa_r+0x7da>
 800d37a:	f04f 0800 	mov.w	r8, #0
 800d37e:	e7f6      	b.n	800d36e <_dtoa_r+0x8ee>
 800d380:	4698      	mov	r8, r3
 800d382:	e7f4      	b.n	800d36e <_dtoa_r+0x8ee>
 800d384:	f43f af7d 	beq.w	800d282 <_dtoa_r+0x802>
 800d388:	4618      	mov	r0, r3
 800d38a:	301c      	adds	r0, #28
 800d38c:	e772      	b.n	800d274 <_dtoa_r+0x7f4>
 800d38e:	9b03      	ldr	r3, [sp, #12]
 800d390:	2b00      	cmp	r3, #0
 800d392:	dc37      	bgt.n	800d404 <_dtoa_r+0x984>
 800d394:	9b06      	ldr	r3, [sp, #24]
 800d396:	2b02      	cmp	r3, #2
 800d398:	dd34      	ble.n	800d404 <_dtoa_r+0x984>
 800d39a:	9b03      	ldr	r3, [sp, #12]
 800d39c:	9302      	str	r3, [sp, #8]
 800d39e:	9b02      	ldr	r3, [sp, #8]
 800d3a0:	b96b      	cbnz	r3, 800d3be <_dtoa_r+0x93e>
 800d3a2:	4631      	mov	r1, r6
 800d3a4:	2205      	movs	r2, #5
 800d3a6:	4620      	mov	r0, r4
 800d3a8:	f000 f9d4 	bl	800d754 <__multadd>
 800d3ac:	4601      	mov	r1, r0
 800d3ae:	4606      	mov	r6, r0
 800d3b0:	ee18 0a10 	vmov	r0, s16
 800d3b4:	f000 fbee 	bl	800db94 <__mcmp>
 800d3b8:	2800      	cmp	r0, #0
 800d3ba:	f73f adbb 	bgt.w	800cf34 <_dtoa_r+0x4b4>
 800d3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3c0:	9d01      	ldr	r5, [sp, #4]
 800d3c2:	43db      	mvns	r3, r3
 800d3c4:	9300      	str	r3, [sp, #0]
 800d3c6:	f04f 0800 	mov.w	r8, #0
 800d3ca:	4631      	mov	r1, r6
 800d3cc:	4620      	mov	r0, r4
 800d3ce:	f000 f99f 	bl	800d710 <_Bfree>
 800d3d2:	2f00      	cmp	r7, #0
 800d3d4:	f43f aea4 	beq.w	800d120 <_dtoa_r+0x6a0>
 800d3d8:	f1b8 0f00 	cmp.w	r8, #0
 800d3dc:	d005      	beq.n	800d3ea <_dtoa_r+0x96a>
 800d3de:	45b8      	cmp	r8, r7
 800d3e0:	d003      	beq.n	800d3ea <_dtoa_r+0x96a>
 800d3e2:	4641      	mov	r1, r8
 800d3e4:	4620      	mov	r0, r4
 800d3e6:	f000 f993 	bl	800d710 <_Bfree>
 800d3ea:	4639      	mov	r1, r7
 800d3ec:	4620      	mov	r0, r4
 800d3ee:	f000 f98f 	bl	800d710 <_Bfree>
 800d3f2:	e695      	b.n	800d120 <_dtoa_r+0x6a0>
 800d3f4:	2600      	movs	r6, #0
 800d3f6:	4637      	mov	r7, r6
 800d3f8:	e7e1      	b.n	800d3be <_dtoa_r+0x93e>
 800d3fa:	9700      	str	r7, [sp, #0]
 800d3fc:	4637      	mov	r7, r6
 800d3fe:	e599      	b.n	800cf34 <_dtoa_r+0x4b4>
 800d400:	40240000 	.word	0x40240000
 800d404:	9b08      	ldr	r3, [sp, #32]
 800d406:	2b00      	cmp	r3, #0
 800d408:	f000 80ca 	beq.w	800d5a0 <_dtoa_r+0xb20>
 800d40c:	9b03      	ldr	r3, [sp, #12]
 800d40e:	9302      	str	r3, [sp, #8]
 800d410:	2d00      	cmp	r5, #0
 800d412:	dd05      	ble.n	800d420 <_dtoa_r+0x9a0>
 800d414:	4639      	mov	r1, r7
 800d416:	462a      	mov	r2, r5
 800d418:	4620      	mov	r0, r4
 800d41a:	f000 fb4b 	bl	800dab4 <__lshift>
 800d41e:	4607      	mov	r7, r0
 800d420:	f1b8 0f00 	cmp.w	r8, #0
 800d424:	d05b      	beq.n	800d4de <_dtoa_r+0xa5e>
 800d426:	6879      	ldr	r1, [r7, #4]
 800d428:	4620      	mov	r0, r4
 800d42a:	f000 f931 	bl	800d690 <_Balloc>
 800d42e:	4605      	mov	r5, r0
 800d430:	b928      	cbnz	r0, 800d43e <_dtoa_r+0x9be>
 800d432:	4b87      	ldr	r3, [pc, #540]	; (800d650 <_dtoa_r+0xbd0>)
 800d434:	4602      	mov	r2, r0
 800d436:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d43a:	f7ff bb3b 	b.w	800cab4 <_dtoa_r+0x34>
 800d43e:	693a      	ldr	r2, [r7, #16]
 800d440:	3202      	adds	r2, #2
 800d442:	0092      	lsls	r2, r2, #2
 800d444:	f107 010c 	add.w	r1, r7, #12
 800d448:	300c      	adds	r0, #12
 800d44a:	f000 f913 	bl	800d674 <memcpy>
 800d44e:	2201      	movs	r2, #1
 800d450:	4629      	mov	r1, r5
 800d452:	4620      	mov	r0, r4
 800d454:	f000 fb2e 	bl	800dab4 <__lshift>
 800d458:	9b01      	ldr	r3, [sp, #4]
 800d45a:	f103 0901 	add.w	r9, r3, #1
 800d45e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d462:	4413      	add	r3, r2
 800d464:	9305      	str	r3, [sp, #20]
 800d466:	f00a 0301 	and.w	r3, sl, #1
 800d46a:	46b8      	mov	r8, r7
 800d46c:	9304      	str	r3, [sp, #16]
 800d46e:	4607      	mov	r7, r0
 800d470:	4631      	mov	r1, r6
 800d472:	ee18 0a10 	vmov	r0, s16
 800d476:	f7ff fa77 	bl	800c968 <quorem>
 800d47a:	4641      	mov	r1, r8
 800d47c:	9002      	str	r0, [sp, #8]
 800d47e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d482:	ee18 0a10 	vmov	r0, s16
 800d486:	f000 fb85 	bl	800db94 <__mcmp>
 800d48a:	463a      	mov	r2, r7
 800d48c:	9003      	str	r0, [sp, #12]
 800d48e:	4631      	mov	r1, r6
 800d490:	4620      	mov	r0, r4
 800d492:	f000 fb9b 	bl	800dbcc <__mdiff>
 800d496:	68c2      	ldr	r2, [r0, #12]
 800d498:	f109 3bff 	add.w	fp, r9, #4294967295
 800d49c:	4605      	mov	r5, r0
 800d49e:	bb02      	cbnz	r2, 800d4e2 <_dtoa_r+0xa62>
 800d4a0:	4601      	mov	r1, r0
 800d4a2:	ee18 0a10 	vmov	r0, s16
 800d4a6:	f000 fb75 	bl	800db94 <__mcmp>
 800d4aa:	4602      	mov	r2, r0
 800d4ac:	4629      	mov	r1, r5
 800d4ae:	4620      	mov	r0, r4
 800d4b0:	9207      	str	r2, [sp, #28]
 800d4b2:	f000 f92d 	bl	800d710 <_Bfree>
 800d4b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d4ba:	ea43 0102 	orr.w	r1, r3, r2
 800d4be:	9b04      	ldr	r3, [sp, #16]
 800d4c0:	430b      	orrs	r3, r1
 800d4c2:	464d      	mov	r5, r9
 800d4c4:	d10f      	bne.n	800d4e6 <_dtoa_r+0xa66>
 800d4c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d4ca:	d02a      	beq.n	800d522 <_dtoa_r+0xaa2>
 800d4cc:	9b03      	ldr	r3, [sp, #12]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	dd02      	ble.n	800d4d8 <_dtoa_r+0xa58>
 800d4d2:	9b02      	ldr	r3, [sp, #8]
 800d4d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d4d8:	f88b a000 	strb.w	sl, [fp]
 800d4dc:	e775      	b.n	800d3ca <_dtoa_r+0x94a>
 800d4de:	4638      	mov	r0, r7
 800d4e0:	e7ba      	b.n	800d458 <_dtoa_r+0x9d8>
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	e7e2      	b.n	800d4ac <_dtoa_r+0xa2c>
 800d4e6:	9b03      	ldr	r3, [sp, #12]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	db04      	blt.n	800d4f6 <_dtoa_r+0xa76>
 800d4ec:	9906      	ldr	r1, [sp, #24]
 800d4ee:	430b      	orrs	r3, r1
 800d4f0:	9904      	ldr	r1, [sp, #16]
 800d4f2:	430b      	orrs	r3, r1
 800d4f4:	d122      	bne.n	800d53c <_dtoa_r+0xabc>
 800d4f6:	2a00      	cmp	r2, #0
 800d4f8:	ddee      	ble.n	800d4d8 <_dtoa_r+0xa58>
 800d4fa:	ee18 1a10 	vmov	r1, s16
 800d4fe:	2201      	movs	r2, #1
 800d500:	4620      	mov	r0, r4
 800d502:	f000 fad7 	bl	800dab4 <__lshift>
 800d506:	4631      	mov	r1, r6
 800d508:	ee08 0a10 	vmov	s16, r0
 800d50c:	f000 fb42 	bl	800db94 <__mcmp>
 800d510:	2800      	cmp	r0, #0
 800d512:	dc03      	bgt.n	800d51c <_dtoa_r+0xa9c>
 800d514:	d1e0      	bne.n	800d4d8 <_dtoa_r+0xa58>
 800d516:	f01a 0f01 	tst.w	sl, #1
 800d51a:	d0dd      	beq.n	800d4d8 <_dtoa_r+0xa58>
 800d51c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d520:	d1d7      	bne.n	800d4d2 <_dtoa_r+0xa52>
 800d522:	2339      	movs	r3, #57	; 0x39
 800d524:	f88b 3000 	strb.w	r3, [fp]
 800d528:	462b      	mov	r3, r5
 800d52a:	461d      	mov	r5, r3
 800d52c:	3b01      	subs	r3, #1
 800d52e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d532:	2a39      	cmp	r2, #57	; 0x39
 800d534:	d071      	beq.n	800d61a <_dtoa_r+0xb9a>
 800d536:	3201      	adds	r2, #1
 800d538:	701a      	strb	r2, [r3, #0]
 800d53a:	e746      	b.n	800d3ca <_dtoa_r+0x94a>
 800d53c:	2a00      	cmp	r2, #0
 800d53e:	dd07      	ble.n	800d550 <_dtoa_r+0xad0>
 800d540:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d544:	d0ed      	beq.n	800d522 <_dtoa_r+0xaa2>
 800d546:	f10a 0301 	add.w	r3, sl, #1
 800d54a:	f88b 3000 	strb.w	r3, [fp]
 800d54e:	e73c      	b.n	800d3ca <_dtoa_r+0x94a>
 800d550:	9b05      	ldr	r3, [sp, #20]
 800d552:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d556:	4599      	cmp	r9, r3
 800d558:	d047      	beq.n	800d5ea <_dtoa_r+0xb6a>
 800d55a:	ee18 1a10 	vmov	r1, s16
 800d55e:	2300      	movs	r3, #0
 800d560:	220a      	movs	r2, #10
 800d562:	4620      	mov	r0, r4
 800d564:	f000 f8f6 	bl	800d754 <__multadd>
 800d568:	45b8      	cmp	r8, r7
 800d56a:	ee08 0a10 	vmov	s16, r0
 800d56e:	f04f 0300 	mov.w	r3, #0
 800d572:	f04f 020a 	mov.w	r2, #10
 800d576:	4641      	mov	r1, r8
 800d578:	4620      	mov	r0, r4
 800d57a:	d106      	bne.n	800d58a <_dtoa_r+0xb0a>
 800d57c:	f000 f8ea 	bl	800d754 <__multadd>
 800d580:	4680      	mov	r8, r0
 800d582:	4607      	mov	r7, r0
 800d584:	f109 0901 	add.w	r9, r9, #1
 800d588:	e772      	b.n	800d470 <_dtoa_r+0x9f0>
 800d58a:	f000 f8e3 	bl	800d754 <__multadd>
 800d58e:	4639      	mov	r1, r7
 800d590:	4680      	mov	r8, r0
 800d592:	2300      	movs	r3, #0
 800d594:	220a      	movs	r2, #10
 800d596:	4620      	mov	r0, r4
 800d598:	f000 f8dc 	bl	800d754 <__multadd>
 800d59c:	4607      	mov	r7, r0
 800d59e:	e7f1      	b.n	800d584 <_dtoa_r+0xb04>
 800d5a0:	9b03      	ldr	r3, [sp, #12]
 800d5a2:	9302      	str	r3, [sp, #8]
 800d5a4:	9d01      	ldr	r5, [sp, #4]
 800d5a6:	ee18 0a10 	vmov	r0, s16
 800d5aa:	4631      	mov	r1, r6
 800d5ac:	f7ff f9dc 	bl	800c968 <quorem>
 800d5b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d5b4:	9b01      	ldr	r3, [sp, #4]
 800d5b6:	f805 ab01 	strb.w	sl, [r5], #1
 800d5ba:	1aea      	subs	r2, r5, r3
 800d5bc:	9b02      	ldr	r3, [sp, #8]
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	dd09      	ble.n	800d5d6 <_dtoa_r+0xb56>
 800d5c2:	ee18 1a10 	vmov	r1, s16
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	220a      	movs	r2, #10
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	f000 f8c2 	bl	800d754 <__multadd>
 800d5d0:	ee08 0a10 	vmov	s16, r0
 800d5d4:	e7e7      	b.n	800d5a6 <_dtoa_r+0xb26>
 800d5d6:	9b02      	ldr	r3, [sp, #8]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	bfc8      	it	gt
 800d5dc:	461d      	movgt	r5, r3
 800d5de:	9b01      	ldr	r3, [sp, #4]
 800d5e0:	bfd8      	it	le
 800d5e2:	2501      	movle	r5, #1
 800d5e4:	441d      	add	r5, r3
 800d5e6:	f04f 0800 	mov.w	r8, #0
 800d5ea:	ee18 1a10 	vmov	r1, s16
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	4620      	mov	r0, r4
 800d5f2:	f000 fa5f 	bl	800dab4 <__lshift>
 800d5f6:	4631      	mov	r1, r6
 800d5f8:	ee08 0a10 	vmov	s16, r0
 800d5fc:	f000 faca 	bl	800db94 <__mcmp>
 800d600:	2800      	cmp	r0, #0
 800d602:	dc91      	bgt.n	800d528 <_dtoa_r+0xaa8>
 800d604:	d102      	bne.n	800d60c <_dtoa_r+0xb8c>
 800d606:	f01a 0f01 	tst.w	sl, #1
 800d60a:	d18d      	bne.n	800d528 <_dtoa_r+0xaa8>
 800d60c:	462b      	mov	r3, r5
 800d60e:	461d      	mov	r5, r3
 800d610:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d614:	2a30      	cmp	r2, #48	; 0x30
 800d616:	d0fa      	beq.n	800d60e <_dtoa_r+0xb8e>
 800d618:	e6d7      	b.n	800d3ca <_dtoa_r+0x94a>
 800d61a:	9a01      	ldr	r2, [sp, #4]
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d184      	bne.n	800d52a <_dtoa_r+0xaaa>
 800d620:	9b00      	ldr	r3, [sp, #0]
 800d622:	3301      	adds	r3, #1
 800d624:	9300      	str	r3, [sp, #0]
 800d626:	2331      	movs	r3, #49	; 0x31
 800d628:	7013      	strb	r3, [r2, #0]
 800d62a:	e6ce      	b.n	800d3ca <_dtoa_r+0x94a>
 800d62c:	4b09      	ldr	r3, [pc, #36]	; (800d654 <_dtoa_r+0xbd4>)
 800d62e:	f7ff ba95 	b.w	800cb5c <_dtoa_r+0xdc>
 800d632:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d634:	2b00      	cmp	r3, #0
 800d636:	f47f aa6e 	bne.w	800cb16 <_dtoa_r+0x96>
 800d63a:	4b07      	ldr	r3, [pc, #28]	; (800d658 <_dtoa_r+0xbd8>)
 800d63c:	f7ff ba8e 	b.w	800cb5c <_dtoa_r+0xdc>
 800d640:	9b02      	ldr	r3, [sp, #8]
 800d642:	2b00      	cmp	r3, #0
 800d644:	dcae      	bgt.n	800d5a4 <_dtoa_r+0xb24>
 800d646:	9b06      	ldr	r3, [sp, #24]
 800d648:	2b02      	cmp	r3, #2
 800d64a:	f73f aea8 	bgt.w	800d39e <_dtoa_r+0x91e>
 800d64e:	e7a9      	b.n	800d5a4 <_dtoa_r+0xb24>
 800d650:	0800ec1f 	.word	0x0800ec1f
 800d654:	0800eb7c 	.word	0x0800eb7c
 800d658:	0800eba0 	.word	0x0800eba0

0800d65c <_localeconv_r>:
 800d65c:	4800      	ldr	r0, [pc, #0]	; (800d660 <_localeconv_r+0x4>)
 800d65e:	4770      	bx	lr
 800d660:	200002b8 	.word	0x200002b8

0800d664 <malloc>:
 800d664:	4b02      	ldr	r3, [pc, #8]	; (800d670 <malloc+0xc>)
 800d666:	4601      	mov	r1, r0
 800d668:	6818      	ldr	r0, [r3, #0]
 800d66a:	f000 bc17 	b.w	800de9c <_malloc_r>
 800d66e:	bf00      	nop
 800d670:	20000164 	.word	0x20000164

0800d674 <memcpy>:
 800d674:	440a      	add	r2, r1
 800d676:	4291      	cmp	r1, r2
 800d678:	f100 33ff 	add.w	r3, r0, #4294967295
 800d67c:	d100      	bne.n	800d680 <memcpy+0xc>
 800d67e:	4770      	bx	lr
 800d680:	b510      	push	{r4, lr}
 800d682:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d686:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d68a:	4291      	cmp	r1, r2
 800d68c:	d1f9      	bne.n	800d682 <memcpy+0xe>
 800d68e:	bd10      	pop	{r4, pc}

0800d690 <_Balloc>:
 800d690:	b570      	push	{r4, r5, r6, lr}
 800d692:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d694:	4604      	mov	r4, r0
 800d696:	460d      	mov	r5, r1
 800d698:	b976      	cbnz	r6, 800d6b8 <_Balloc+0x28>
 800d69a:	2010      	movs	r0, #16
 800d69c:	f7ff ffe2 	bl	800d664 <malloc>
 800d6a0:	4602      	mov	r2, r0
 800d6a2:	6260      	str	r0, [r4, #36]	; 0x24
 800d6a4:	b920      	cbnz	r0, 800d6b0 <_Balloc+0x20>
 800d6a6:	4b18      	ldr	r3, [pc, #96]	; (800d708 <_Balloc+0x78>)
 800d6a8:	4818      	ldr	r0, [pc, #96]	; (800d70c <_Balloc+0x7c>)
 800d6aa:	2166      	movs	r1, #102	; 0x66
 800d6ac:	f000 fc7a 	bl	800dfa4 <__assert_func>
 800d6b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6b4:	6006      	str	r6, [r0, #0]
 800d6b6:	60c6      	str	r6, [r0, #12]
 800d6b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d6ba:	68f3      	ldr	r3, [r6, #12]
 800d6bc:	b183      	cbz	r3, 800d6e0 <_Balloc+0x50>
 800d6be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6c0:	68db      	ldr	r3, [r3, #12]
 800d6c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d6c6:	b9b8      	cbnz	r0, 800d6f8 <_Balloc+0x68>
 800d6c8:	2101      	movs	r1, #1
 800d6ca:	fa01 f605 	lsl.w	r6, r1, r5
 800d6ce:	1d72      	adds	r2, r6, #5
 800d6d0:	0092      	lsls	r2, r2, #2
 800d6d2:	4620      	mov	r0, r4
 800d6d4:	f000 fb60 	bl	800dd98 <_calloc_r>
 800d6d8:	b160      	cbz	r0, 800d6f4 <_Balloc+0x64>
 800d6da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d6de:	e00e      	b.n	800d6fe <_Balloc+0x6e>
 800d6e0:	2221      	movs	r2, #33	; 0x21
 800d6e2:	2104      	movs	r1, #4
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	f000 fb57 	bl	800dd98 <_calloc_r>
 800d6ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6ec:	60f0      	str	r0, [r6, #12]
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d1e4      	bne.n	800d6be <_Balloc+0x2e>
 800d6f4:	2000      	movs	r0, #0
 800d6f6:	bd70      	pop	{r4, r5, r6, pc}
 800d6f8:	6802      	ldr	r2, [r0, #0]
 800d6fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d6fe:	2300      	movs	r3, #0
 800d700:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d704:	e7f7      	b.n	800d6f6 <_Balloc+0x66>
 800d706:	bf00      	nop
 800d708:	0800ebad 	.word	0x0800ebad
 800d70c:	0800ec30 	.word	0x0800ec30

0800d710 <_Bfree>:
 800d710:	b570      	push	{r4, r5, r6, lr}
 800d712:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d714:	4605      	mov	r5, r0
 800d716:	460c      	mov	r4, r1
 800d718:	b976      	cbnz	r6, 800d738 <_Bfree+0x28>
 800d71a:	2010      	movs	r0, #16
 800d71c:	f7ff ffa2 	bl	800d664 <malloc>
 800d720:	4602      	mov	r2, r0
 800d722:	6268      	str	r0, [r5, #36]	; 0x24
 800d724:	b920      	cbnz	r0, 800d730 <_Bfree+0x20>
 800d726:	4b09      	ldr	r3, [pc, #36]	; (800d74c <_Bfree+0x3c>)
 800d728:	4809      	ldr	r0, [pc, #36]	; (800d750 <_Bfree+0x40>)
 800d72a:	218a      	movs	r1, #138	; 0x8a
 800d72c:	f000 fc3a 	bl	800dfa4 <__assert_func>
 800d730:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d734:	6006      	str	r6, [r0, #0]
 800d736:	60c6      	str	r6, [r0, #12]
 800d738:	b13c      	cbz	r4, 800d74a <_Bfree+0x3a>
 800d73a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d73c:	6862      	ldr	r2, [r4, #4]
 800d73e:	68db      	ldr	r3, [r3, #12]
 800d740:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d744:	6021      	str	r1, [r4, #0]
 800d746:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d74a:	bd70      	pop	{r4, r5, r6, pc}
 800d74c:	0800ebad 	.word	0x0800ebad
 800d750:	0800ec30 	.word	0x0800ec30

0800d754 <__multadd>:
 800d754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d758:	690d      	ldr	r5, [r1, #16]
 800d75a:	4607      	mov	r7, r0
 800d75c:	460c      	mov	r4, r1
 800d75e:	461e      	mov	r6, r3
 800d760:	f101 0c14 	add.w	ip, r1, #20
 800d764:	2000      	movs	r0, #0
 800d766:	f8dc 3000 	ldr.w	r3, [ip]
 800d76a:	b299      	uxth	r1, r3
 800d76c:	fb02 6101 	mla	r1, r2, r1, r6
 800d770:	0c1e      	lsrs	r6, r3, #16
 800d772:	0c0b      	lsrs	r3, r1, #16
 800d774:	fb02 3306 	mla	r3, r2, r6, r3
 800d778:	b289      	uxth	r1, r1
 800d77a:	3001      	adds	r0, #1
 800d77c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d780:	4285      	cmp	r5, r0
 800d782:	f84c 1b04 	str.w	r1, [ip], #4
 800d786:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d78a:	dcec      	bgt.n	800d766 <__multadd+0x12>
 800d78c:	b30e      	cbz	r6, 800d7d2 <__multadd+0x7e>
 800d78e:	68a3      	ldr	r3, [r4, #8]
 800d790:	42ab      	cmp	r3, r5
 800d792:	dc19      	bgt.n	800d7c8 <__multadd+0x74>
 800d794:	6861      	ldr	r1, [r4, #4]
 800d796:	4638      	mov	r0, r7
 800d798:	3101      	adds	r1, #1
 800d79a:	f7ff ff79 	bl	800d690 <_Balloc>
 800d79e:	4680      	mov	r8, r0
 800d7a0:	b928      	cbnz	r0, 800d7ae <__multadd+0x5a>
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	4b0c      	ldr	r3, [pc, #48]	; (800d7d8 <__multadd+0x84>)
 800d7a6:	480d      	ldr	r0, [pc, #52]	; (800d7dc <__multadd+0x88>)
 800d7a8:	21b5      	movs	r1, #181	; 0xb5
 800d7aa:	f000 fbfb 	bl	800dfa4 <__assert_func>
 800d7ae:	6922      	ldr	r2, [r4, #16]
 800d7b0:	3202      	adds	r2, #2
 800d7b2:	f104 010c 	add.w	r1, r4, #12
 800d7b6:	0092      	lsls	r2, r2, #2
 800d7b8:	300c      	adds	r0, #12
 800d7ba:	f7ff ff5b 	bl	800d674 <memcpy>
 800d7be:	4621      	mov	r1, r4
 800d7c0:	4638      	mov	r0, r7
 800d7c2:	f7ff ffa5 	bl	800d710 <_Bfree>
 800d7c6:	4644      	mov	r4, r8
 800d7c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d7cc:	3501      	adds	r5, #1
 800d7ce:	615e      	str	r6, [r3, #20]
 800d7d0:	6125      	str	r5, [r4, #16]
 800d7d2:	4620      	mov	r0, r4
 800d7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7d8:	0800ec1f 	.word	0x0800ec1f
 800d7dc:	0800ec30 	.word	0x0800ec30

0800d7e0 <__hi0bits>:
 800d7e0:	0c03      	lsrs	r3, r0, #16
 800d7e2:	041b      	lsls	r3, r3, #16
 800d7e4:	b9d3      	cbnz	r3, 800d81c <__hi0bits+0x3c>
 800d7e6:	0400      	lsls	r0, r0, #16
 800d7e8:	2310      	movs	r3, #16
 800d7ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d7ee:	bf04      	itt	eq
 800d7f0:	0200      	lsleq	r0, r0, #8
 800d7f2:	3308      	addeq	r3, #8
 800d7f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d7f8:	bf04      	itt	eq
 800d7fa:	0100      	lsleq	r0, r0, #4
 800d7fc:	3304      	addeq	r3, #4
 800d7fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d802:	bf04      	itt	eq
 800d804:	0080      	lsleq	r0, r0, #2
 800d806:	3302      	addeq	r3, #2
 800d808:	2800      	cmp	r0, #0
 800d80a:	db05      	blt.n	800d818 <__hi0bits+0x38>
 800d80c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d810:	f103 0301 	add.w	r3, r3, #1
 800d814:	bf08      	it	eq
 800d816:	2320      	moveq	r3, #32
 800d818:	4618      	mov	r0, r3
 800d81a:	4770      	bx	lr
 800d81c:	2300      	movs	r3, #0
 800d81e:	e7e4      	b.n	800d7ea <__hi0bits+0xa>

0800d820 <__lo0bits>:
 800d820:	6803      	ldr	r3, [r0, #0]
 800d822:	f013 0207 	ands.w	r2, r3, #7
 800d826:	4601      	mov	r1, r0
 800d828:	d00b      	beq.n	800d842 <__lo0bits+0x22>
 800d82a:	07da      	lsls	r2, r3, #31
 800d82c:	d423      	bmi.n	800d876 <__lo0bits+0x56>
 800d82e:	0798      	lsls	r0, r3, #30
 800d830:	bf49      	itett	mi
 800d832:	085b      	lsrmi	r3, r3, #1
 800d834:	089b      	lsrpl	r3, r3, #2
 800d836:	2001      	movmi	r0, #1
 800d838:	600b      	strmi	r3, [r1, #0]
 800d83a:	bf5c      	itt	pl
 800d83c:	600b      	strpl	r3, [r1, #0]
 800d83e:	2002      	movpl	r0, #2
 800d840:	4770      	bx	lr
 800d842:	b298      	uxth	r0, r3
 800d844:	b9a8      	cbnz	r0, 800d872 <__lo0bits+0x52>
 800d846:	0c1b      	lsrs	r3, r3, #16
 800d848:	2010      	movs	r0, #16
 800d84a:	b2da      	uxtb	r2, r3
 800d84c:	b90a      	cbnz	r2, 800d852 <__lo0bits+0x32>
 800d84e:	3008      	adds	r0, #8
 800d850:	0a1b      	lsrs	r3, r3, #8
 800d852:	071a      	lsls	r2, r3, #28
 800d854:	bf04      	itt	eq
 800d856:	091b      	lsreq	r3, r3, #4
 800d858:	3004      	addeq	r0, #4
 800d85a:	079a      	lsls	r2, r3, #30
 800d85c:	bf04      	itt	eq
 800d85e:	089b      	lsreq	r3, r3, #2
 800d860:	3002      	addeq	r0, #2
 800d862:	07da      	lsls	r2, r3, #31
 800d864:	d403      	bmi.n	800d86e <__lo0bits+0x4e>
 800d866:	085b      	lsrs	r3, r3, #1
 800d868:	f100 0001 	add.w	r0, r0, #1
 800d86c:	d005      	beq.n	800d87a <__lo0bits+0x5a>
 800d86e:	600b      	str	r3, [r1, #0]
 800d870:	4770      	bx	lr
 800d872:	4610      	mov	r0, r2
 800d874:	e7e9      	b.n	800d84a <__lo0bits+0x2a>
 800d876:	2000      	movs	r0, #0
 800d878:	4770      	bx	lr
 800d87a:	2020      	movs	r0, #32
 800d87c:	4770      	bx	lr
	...

0800d880 <__i2b>:
 800d880:	b510      	push	{r4, lr}
 800d882:	460c      	mov	r4, r1
 800d884:	2101      	movs	r1, #1
 800d886:	f7ff ff03 	bl	800d690 <_Balloc>
 800d88a:	4602      	mov	r2, r0
 800d88c:	b928      	cbnz	r0, 800d89a <__i2b+0x1a>
 800d88e:	4b05      	ldr	r3, [pc, #20]	; (800d8a4 <__i2b+0x24>)
 800d890:	4805      	ldr	r0, [pc, #20]	; (800d8a8 <__i2b+0x28>)
 800d892:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d896:	f000 fb85 	bl	800dfa4 <__assert_func>
 800d89a:	2301      	movs	r3, #1
 800d89c:	6144      	str	r4, [r0, #20]
 800d89e:	6103      	str	r3, [r0, #16]
 800d8a0:	bd10      	pop	{r4, pc}
 800d8a2:	bf00      	nop
 800d8a4:	0800ec1f 	.word	0x0800ec1f
 800d8a8:	0800ec30 	.word	0x0800ec30

0800d8ac <__multiply>:
 800d8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8b0:	4691      	mov	r9, r2
 800d8b2:	690a      	ldr	r2, [r1, #16]
 800d8b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	bfb8      	it	lt
 800d8bc:	460b      	movlt	r3, r1
 800d8be:	460c      	mov	r4, r1
 800d8c0:	bfbc      	itt	lt
 800d8c2:	464c      	movlt	r4, r9
 800d8c4:	4699      	movlt	r9, r3
 800d8c6:	6927      	ldr	r7, [r4, #16]
 800d8c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d8cc:	68a3      	ldr	r3, [r4, #8]
 800d8ce:	6861      	ldr	r1, [r4, #4]
 800d8d0:	eb07 060a 	add.w	r6, r7, sl
 800d8d4:	42b3      	cmp	r3, r6
 800d8d6:	b085      	sub	sp, #20
 800d8d8:	bfb8      	it	lt
 800d8da:	3101      	addlt	r1, #1
 800d8dc:	f7ff fed8 	bl	800d690 <_Balloc>
 800d8e0:	b930      	cbnz	r0, 800d8f0 <__multiply+0x44>
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	4b44      	ldr	r3, [pc, #272]	; (800d9f8 <__multiply+0x14c>)
 800d8e6:	4845      	ldr	r0, [pc, #276]	; (800d9fc <__multiply+0x150>)
 800d8e8:	f240 115d 	movw	r1, #349	; 0x15d
 800d8ec:	f000 fb5a 	bl	800dfa4 <__assert_func>
 800d8f0:	f100 0514 	add.w	r5, r0, #20
 800d8f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d8f8:	462b      	mov	r3, r5
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	4543      	cmp	r3, r8
 800d8fe:	d321      	bcc.n	800d944 <__multiply+0x98>
 800d900:	f104 0314 	add.w	r3, r4, #20
 800d904:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d908:	f109 0314 	add.w	r3, r9, #20
 800d90c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d910:	9202      	str	r2, [sp, #8]
 800d912:	1b3a      	subs	r2, r7, r4
 800d914:	3a15      	subs	r2, #21
 800d916:	f022 0203 	bic.w	r2, r2, #3
 800d91a:	3204      	adds	r2, #4
 800d91c:	f104 0115 	add.w	r1, r4, #21
 800d920:	428f      	cmp	r7, r1
 800d922:	bf38      	it	cc
 800d924:	2204      	movcc	r2, #4
 800d926:	9201      	str	r2, [sp, #4]
 800d928:	9a02      	ldr	r2, [sp, #8]
 800d92a:	9303      	str	r3, [sp, #12]
 800d92c:	429a      	cmp	r2, r3
 800d92e:	d80c      	bhi.n	800d94a <__multiply+0x9e>
 800d930:	2e00      	cmp	r6, #0
 800d932:	dd03      	ble.n	800d93c <__multiply+0x90>
 800d934:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d05a      	beq.n	800d9f2 <__multiply+0x146>
 800d93c:	6106      	str	r6, [r0, #16]
 800d93e:	b005      	add	sp, #20
 800d940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d944:	f843 2b04 	str.w	r2, [r3], #4
 800d948:	e7d8      	b.n	800d8fc <__multiply+0x50>
 800d94a:	f8b3 a000 	ldrh.w	sl, [r3]
 800d94e:	f1ba 0f00 	cmp.w	sl, #0
 800d952:	d024      	beq.n	800d99e <__multiply+0xf2>
 800d954:	f104 0e14 	add.w	lr, r4, #20
 800d958:	46a9      	mov	r9, r5
 800d95a:	f04f 0c00 	mov.w	ip, #0
 800d95e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d962:	f8d9 1000 	ldr.w	r1, [r9]
 800d966:	fa1f fb82 	uxth.w	fp, r2
 800d96a:	b289      	uxth	r1, r1
 800d96c:	fb0a 110b 	mla	r1, sl, fp, r1
 800d970:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d974:	f8d9 2000 	ldr.w	r2, [r9]
 800d978:	4461      	add	r1, ip
 800d97a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d97e:	fb0a c20b 	mla	r2, sl, fp, ip
 800d982:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d986:	b289      	uxth	r1, r1
 800d988:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d98c:	4577      	cmp	r7, lr
 800d98e:	f849 1b04 	str.w	r1, [r9], #4
 800d992:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d996:	d8e2      	bhi.n	800d95e <__multiply+0xb2>
 800d998:	9a01      	ldr	r2, [sp, #4]
 800d99a:	f845 c002 	str.w	ip, [r5, r2]
 800d99e:	9a03      	ldr	r2, [sp, #12]
 800d9a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d9a4:	3304      	adds	r3, #4
 800d9a6:	f1b9 0f00 	cmp.w	r9, #0
 800d9aa:	d020      	beq.n	800d9ee <__multiply+0x142>
 800d9ac:	6829      	ldr	r1, [r5, #0]
 800d9ae:	f104 0c14 	add.w	ip, r4, #20
 800d9b2:	46ae      	mov	lr, r5
 800d9b4:	f04f 0a00 	mov.w	sl, #0
 800d9b8:	f8bc b000 	ldrh.w	fp, [ip]
 800d9bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d9c0:	fb09 220b 	mla	r2, r9, fp, r2
 800d9c4:	4492      	add	sl, r2
 800d9c6:	b289      	uxth	r1, r1
 800d9c8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d9cc:	f84e 1b04 	str.w	r1, [lr], #4
 800d9d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d9d4:	f8be 1000 	ldrh.w	r1, [lr]
 800d9d8:	0c12      	lsrs	r2, r2, #16
 800d9da:	fb09 1102 	mla	r1, r9, r2, r1
 800d9de:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d9e2:	4567      	cmp	r7, ip
 800d9e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d9e8:	d8e6      	bhi.n	800d9b8 <__multiply+0x10c>
 800d9ea:	9a01      	ldr	r2, [sp, #4]
 800d9ec:	50a9      	str	r1, [r5, r2]
 800d9ee:	3504      	adds	r5, #4
 800d9f0:	e79a      	b.n	800d928 <__multiply+0x7c>
 800d9f2:	3e01      	subs	r6, #1
 800d9f4:	e79c      	b.n	800d930 <__multiply+0x84>
 800d9f6:	bf00      	nop
 800d9f8:	0800ec1f 	.word	0x0800ec1f
 800d9fc:	0800ec30 	.word	0x0800ec30

0800da00 <__pow5mult>:
 800da00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da04:	4615      	mov	r5, r2
 800da06:	f012 0203 	ands.w	r2, r2, #3
 800da0a:	4606      	mov	r6, r0
 800da0c:	460f      	mov	r7, r1
 800da0e:	d007      	beq.n	800da20 <__pow5mult+0x20>
 800da10:	4c25      	ldr	r4, [pc, #148]	; (800daa8 <__pow5mult+0xa8>)
 800da12:	3a01      	subs	r2, #1
 800da14:	2300      	movs	r3, #0
 800da16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da1a:	f7ff fe9b 	bl	800d754 <__multadd>
 800da1e:	4607      	mov	r7, r0
 800da20:	10ad      	asrs	r5, r5, #2
 800da22:	d03d      	beq.n	800daa0 <__pow5mult+0xa0>
 800da24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800da26:	b97c      	cbnz	r4, 800da48 <__pow5mult+0x48>
 800da28:	2010      	movs	r0, #16
 800da2a:	f7ff fe1b 	bl	800d664 <malloc>
 800da2e:	4602      	mov	r2, r0
 800da30:	6270      	str	r0, [r6, #36]	; 0x24
 800da32:	b928      	cbnz	r0, 800da40 <__pow5mult+0x40>
 800da34:	4b1d      	ldr	r3, [pc, #116]	; (800daac <__pow5mult+0xac>)
 800da36:	481e      	ldr	r0, [pc, #120]	; (800dab0 <__pow5mult+0xb0>)
 800da38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800da3c:	f000 fab2 	bl	800dfa4 <__assert_func>
 800da40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da44:	6004      	str	r4, [r0, #0]
 800da46:	60c4      	str	r4, [r0, #12]
 800da48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800da4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da50:	b94c      	cbnz	r4, 800da66 <__pow5mult+0x66>
 800da52:	f240 2171 	movw	r1, #625	; 0x271
 800da56:	4630      	mov	r0, r6
 800da58:	f7ff ff12 	bl	800d880 <__i2b>
 800da5c:	2300      	movs	r3, #0
 800da5e:	f8c8 0008 	str.w	r0, [r8, #8]
 800da62:	4604      	mov	r4, r0
 800da64:	6003      	str	r3, [r0, #0]
 800da66:	f04f 0900 	mov.w	r9, #0
 800da6a:	07eb      	lsls	r3, r5, #31
 800da6c:	d50a      	bpl.n	800da84 <__pow5mult+0x84>
 800da6e:	4639      	mov	r1, r7
 800da70:	4622      	mov	r2, r4
 800da72:	4630      	mov	r0, r6
 800da74:	f7ff ff1a 	bl	800d8ac <__multiply>
 800da78:	4639      	mov	r1, r7
 800da7a:	4680      	mov	r8, r0
 800da7c:	4630      	mov	r0, r6
 800da7e:	f7ff fe47 	bl	800d710 <_Bfree>
 800da82:	4647      	mov	r7, r8
 800da84:	106d      	asrs	r5, r5, #1
 800da86:	d00b      	beq.n	800daa0 <__pow5mult+0xa0>
 800da88:	6820      	ldr	r0, [r4, #0]
 800da8a:	b938      	cbnz	r0, 800da9c <__pow5mult+0x9c>
 800da8c:	4622      	mov	r2, r4
 800da8e:	4621      	mov	r1, r4
 800da90:	4630      	mov	r0, r6
 800da92:	f7ff ff0b 	bl	800d8ac <__multiply>
 800da96:	6020      	str	r0, [r4, #0]
 800da98:	f8c0 9000 	str.w	r9, [r0]
 800da9c:	4604      	mov	r4, r0
 800da9e:	e7e4      	b.n	800da6a <__pow5mult+0x6a>
 800daa0:	4638      	mov	r0, r7
 800daa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daa6:	bf00      	nop
 800daa8:	0800ed80 	.word	0x0800ed80
 800daac:	0800ebad 	.word	0x0800ebad
 800dab0:	0800ec30 	.word	0x0800ec30

0800dab4 <__lshift>:
 800dab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dab8:	460c      	mov	r4, r1
 800daba:	6849      	ldr	r1, [r1, #4]
 800dabc:	6923      	ldr	r3, [r4, #16]
 800dabe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dac2:	68a3      	ldr	r3, [r4, #8]
 800dac4:	4607      	mov	r7, r0
 800dac6:	4691      	mov	r9, r2
 800dac8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dacc:	f108 0601 	add.w	r6, r8, #1
 800dad0:	42b3      	cmp	r3, r6
 800dad2:	db0b      	blt.n	800daec <__lshift+0x38>
 800dad4:	4638      	mov	r0, r7
 800dad6:	f7ff fddb 	bl	800d690 <_Balloc>
 800dada:	4605      	mov	r5, r0
 800dadc:	b948      	cbnz	r0, 800daf2 <__lshift+0x3e>
 800dade:	4602      	mov	r2, r0
 800dae0:	4b2a      	ldr	r3, [pc, #168]	; (800db8c <__lshift+0xd8>)
 800dae2:	482b      	ldr	r0, [pc, #172]	; (800db90 <__lshift+0xdc>)
 800dae4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dae8:	f000 fa5c 	bl	800dfa4 <__assert_func>
 800daec:	3101      	adds	r1, #1
 800daee:	005b      	lsls	r3, r3, #1
 800daf0:	e7ee      	b.n	800dad0 <__lshift+0x1c>
 800daf2:	2300      	movs	r3, #0
 800daf4:	f100 0114 	add.w	r1, r0, #20
 800daf8:	f100 0210 	add.w	r2, r0, #16
 800dafc:	4618      	mov	r0, r3
 800dafe:	4553      	cmp	r3, sl
 800db00:	db37      	blt.n	800db72 <__lshift+0xbe>
 800db02:	6920      	ldr	r0, [r4, #16]
 800db04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db08:	f104 0314 	add.w	r3, r4, #20
 800db0c:	f019 091f 	ands.w	r9, r9, #31
 800db10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db14:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800db18:	d02f      	beq.n	800db7a <__lshift+0xc6>
 800db1a:	f1c9 0e20 	rsb	lr, r9, #32
 800db1e:	468a      	mov	sl, r1
 800db20:	f04f 0c00 	mov.w	ip, #0
 800db24:	681a      	ldr	r2, [r3, #0]
 800db26:	fa02 f209 	lsl.w	r2, r2, r9
 800db2a:	ea42 020c 	orr.w	r2, r2, ip
 800db2e:	f84a 2b04 	str.w	r2, [sl], #4
 800db32:	f853 2b04 	ldr.w	r2, [r3], #4
 800db36:	4298      	cmp	r0, r3
 800db38:	fa22 fc0e 	lsr.w	ip, r2, lr
 800db3c:	d8f2      	bhi.n	800db24 <__lshift+0x70>
 800db3e:	1b03      	subs	r3, r0, r4
 800db40:	3b15      	subs	r3, #21
 800db42:	f023 0303 	bic.w	r3, r3, #3
 800db46:	3304      	adds	r3, #4
 800db48:	f104 0215 	add.w	r2, r4, #21
 800db4c:	4290      	cmp	r0, r2
 800db4e:	bf38      	it	cc
 800db50:	2304      	movcc	r3, #4
 800db52:	f841 c003 	str.w	ip, [r1, r3]
 800db56:	f1bc 0f00 	cmp.w	ip, #0
 800db5a:	d001      	beq.n	800db60 <__lshift+0xac>
 800db5c:	f108 0602 	add.w	r6, r8, #2
 800db60:	3e01      	subs	r6, #1
 800db62:	4638      	mov	r0, r7
 800db64:	612e      	str	r6, [r5, #16]
 800db66:	4621      	mov	r1, r4
 800db68:	f7ff fdd2 	bl	800d710 <_Bfree>
 800db6c:	4628      	mov	r0, r5
 800db6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db72:	f842 0f04 	str.w	r0, [r2, #4]!
 800db76:	3301      	adds	r3, #1
 800db78:	e7c1      	b.n	800dafe <__lshift+0x4a>
 800db7a:	3904      	subs	r1, #4
 800db7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800db80:	f841 2f04 	str.w	r2, [r1, #4]!
 800db84:	4298      	cmp	r0, r3
 800db86:	d8f9      	bhi.n	800db7c <__lshift+0xc8>
 800db88:	e7ea      	b.n	800db60 <__lshift+0xac>
 800db8a:	bf00      	nop
 800db8c:	0800ec1f 	.word	0x0800ec1f
 800db90:	0800ec30 	.word	0x0800ec30

0800db94 <__mcmp>:
 800db94:	b530      	push	{r4, r5, lr}
 800db96:	6902      	ldr	r2, [r0, #16]
 800db98:	690c      	ldr	r4, [r1, #16]
 800db9a:	1b12      	subs	r2, r2, r4
 800db9c:	d10e      	bne.n	800dbbc <__mcmp+0x28>
 800db9e:	f100 0314 	add.w	r3, r0, #20
 800dba2:	3114      	adds	r1, #20
 800dba4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dba8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dbac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dbb0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dbb4:	42a5      	cmp	r5, r4
 800dbb6:	d003      	beq.n	800dbc0 <__mcmp+0x2c>
 800dbb8:	d305      	bcc.n	800dbc6 <__mcmp+0x32>
 800dbba:	2201      	movs	r2, #1
 800dbbc:	4610      	mov	r0, r2
 800dbbe:	bd30      	pop	{r4, r5, pc}
 800dbc0:	4283      	cmp	r3, r0
 800dbc2:	d3f3      	bcc.n	800dbac <__mcmp+0x18>
 800dbc4:	e7fa      	b.n	800dbbc <__mcmp+0x28>
 800dbc6:	f04f 32ff 	mov.w	r2, #4294967295
 800dbca:	e7f7      	b.n	800dbbc <__mcmp+0x28>

0800dbcc <__mdiff>:
 800dbcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd0:	460c      	mov	r4, r1
 800dbd2:	4606      	mov	r6, r0
 800dbd4:	4611      	mov	r1, r2
 800dbd6:	4620      	mov	r0, r4
 800dbd8:	4690      	mov	r8, r2
 800dbda:	f7ff ffdb 	bl	800db94 <__mcmp>
 800dbde:	1e05      	subs	r5, r0, #0
 800dbe0:	d110      	bne.n	800dc04 <__mdiff+0x38>
 800dbe2:	4629      	mov	r1, r5
 800dbe4:	4630      	mov	r0, r6
 800dbe6:	f7ff fd53 	bl	800d690 <_Balloc>
 800dbea:	b930      	cbnz	r0, 800dbfa <__mdiff+0x2e>
 800dbec:	4b3a      	ldr	r3, [pc, #232]	; (800dcd8 <__mdiff+0x10c>)
 800dbee:	4602      	mov	r2, r0
 800dbf0:	f240 2132 	movw	r1, #562	; 0x232
 800dbf4:	4839      	ldr	r0, [pc, #228]	; (800dcdc <__mdiff+0x110>)
 800dbf6:	f000 f9d5 	bl	800dfa4 <__assert_func>
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dc00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc04:	bfa4      	itt	ge
 800dc06:	4643      	movge	r3, r8
 800dc08:	46a0      	movge	r8, r4
 800dc0a:	4630      	mov	r0, r6
 800dc0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dc10:	bfa6      	itte	ge
 800dc12:	461c      	movge	r4, r3
 800dc14:	2500      	movge	r5, #0
 800dc16:	2501      	movlt	r5, #1
 800dc18:	f7ff fd3a 	bl	800d690 <_Balloc>
 800dc1c:	b920      	cbnz	r0, 800dc28 <__mdiff+0x5c>
 800dc1e:	4b2e      	ldr	r3, [pc, #184]	; (800dcd8 <__mdiff+0x10c>)
 800dc20:	4602      	mov	r2, r0
 800dc22:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dc26:	e7e5      	b.n	800dbf4 <__mdiff+0x28>
 800dc28:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dc2c:	6926      	ldr	r6, [r4, #16]
 800dc2e:	60c5      	str	r5, [r0, #12]
 800dc30:	f104 0914 	add.w	r9, r4, #20
 800dc34:	f108 0514 	add.w	r5, r8, #20
 800dc38:	f100 0e14 	add.w	lr, r0, #20
 800dc3c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dc40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dc44:	f108 0210 	add.w	r2, r8, #16
 800dc48:	46f2      	mov	sl, lr
 800dc4a:	2100      	movs	r1, #0
 800dc4c:	f859 3b04 	ldr.w	r3, [r9], #4
 800dc50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dc54:	fa1f f883 	uxth.w	r8, r3
 800dc58:	fa11 f18b 	uxtah	r1, r1, fp
 800dc5c:	0c1b      	lsrs	r3, r3, #16
 800dc5e:	eba1 0808 	sub.w	r8, r1, r8
 800dc62:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dc66:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dc6a:	fa1f f888 	uxth.w	r8, r8
 800dc6e:	1419      	asrs	r1, r3, #16
 800dc70:	454e      	cmp	r6, r9
 800dc72:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dc76:	f84a 3b04 	str.w	r3, [sl], #4
 800dc7a:	d8e7      	bhi.n	800dc4c <__mdiff+0x80>
 800dc7c:	1b33      	subs	r3, r6, r4
 800dc7e:	3b15      	subs	r3, #21
 800dc80:	f023 0303 	bic.w	r3, r3, #3
 800dc84:	3304      	adds	r3, #4
 800dc86:	3415      	adds	r4, #21
 800dc88:	42a6      	cmp	r6, r4
 800dc8a:	bf38      	it	cc
 800dc8c:	2304      	movcc	r3, #4
 800dc8e:	441d      	add	r5, r3
 800dc90:	4473      	add	r3, lr
 800dc92:	469e      	mov	lr, r3
 800dc94:	462e      	mov	r6, r5
 800dc96:	4566      	cmp	r6, ip
 800dc98:	d30e      	bcc.n	800dcb8 <__mdiff+0xec>
 800dc9a:	f10c 0203 	add.w	r2, ip, #3
 800dc9e:	1b52      	subs	r2, r2, r5
 800dca0:	f022 0203 	bic.w	r2, r2, #3
 800dca4:	3d03      	subs	r5, #3
 800dca6:	45ac      	cmp	ip, r5
 800dca8:	bf38      	it	cc
 800dcaa:	2200      	movcc	r2, #0
 800dcac:	441a      	add	r2, r3
 800dcae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dcb2:	b17b      	cbz	r3, 800dcd4 <__mdiff+0x108>
 800dcb4:	6107      	str	r7, [r0, #16]
 800dcb6:	e7a3      	b.n	800dc00 <__mdiff+0x34>
 800dcb8:	f856 8b04 	ldr.w	r8, [r6], #4
 800dcbc:	fa11 f288 	uxtah	r2, r1, r8
 800dcc0:	1414      	asrs	r4, r2, #16
 800dcc2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dcc6:	b292      	uxth	r2, r2
 800dcc8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dccc:	f84e 2b04 	str.w	r2, [lr], #4
 800dcd0:	1421      	asrs	r1, r4, #16
 800dcd2:	e7e0      	b.n	800dc96 <__mdiff+0xca>
 800dcd4:	3f01      	subs	r7, #1
 800dcd6:	e7ea      	b.n	800dcae <__mdiff+0xe2>
 800dcd8:	0800ec1f 	.word	0x0800ec1f
 800dcdc:	0800ec30 	.word	0x0800ec30

0800dce0 <__d2b>:
 800dce0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dce4:	4689      	mov	r9, r1
 800dce6:	2101      	movs	r1, #1
 800dce8:	ec57 6b10 	vmov	r6, r7, d0
 800dcec:	4690      	mov	r8, r2
 800dcee:	f7ff fccf 	bl	800d690 <_Balloc>
 800dcf2:	4604      	mov	r4, r0
 800dcf4:	b930      	cbnz	r0, 800dd04 <__d2b+0x24>
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	4b25      	ldr	r3, [pc, #148]	; (800dd90 <__d2b+0xb0>)
 800dcfa:	4826      	ldr	r0, [pc, #152]	; (800dd94 <__d2b+0xb4>)
 800dcfc:	f240 310a 	movw	r1, #778	; 0x30a
 800dd00:	f000 f950 	bl	800dfa4 <__assert_func>
 800dd04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dd08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dd0c:	bb35      	cbnz	r5, 800dd5c <__d2b+0x7c>
 800dd0e:	2e00      	cmp	r6, #0
 800dd10:	9301      	str	r3, [sp, #4]
 800dd12:	d028      	beq.n	800dd66 <__d2b+0x86>
 800dd14:	4668      	mov	r0, sp
 800dd16:	9600      	str	r6, [sp, #0]
 800dd18:	f7ff fd82 	bl	800d820 <__lo0bits>
 800dd1c:	9900      	ldr	r1, [sp, #0]
 800dd1e:	b300      	cbz	r0, 800dd62 <__d2b+0x82>
 800dd20:	9a01      	ldr	r2, [sp, #4]
 800dd22:	f1c0 0320 	rsb	r3, r0, #32
 800dd26:	fa02 f303 	lsl.w	r3, r2, r3
 800dd2a:	430b      	orrs	r3, r1
 800dd2c:	40c2      	lsrs	r2, r0
 800dd2e:	6163      	str	r3, [r4, #20]
 800dd30:	9201      	str	r2, [sp, #4]
 800dd32:	9b01      	ldr	r3, [sp, #4]
 800dd34:	61a3      	str	r3, [r4, #24]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	bf14      	ite	ne
 800dd3a:	2202      	movne	r2, #2
 800dd3c:	2201      	moveq	r2, #1
 800dd3e:	6122      	str	r2, [r4, #16]
 800dd40:	b1d5      	cbz	r5, 800dd78 <__d2b+0x98>
 800dd42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dd46:	4405      	add	r5, r0
 800dd48:	f8c9 5000 	str.w	r5, [r9]
 800dd4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dd50:	f8c8 0000 	str.w	r0, [r8]
 800dd54:	4620      	mov	r0, r4
 800dd56:	b003      	add	sp, #12
 800dd58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd60:	e7d5      	b.n	800dd0e <__d2b+0x2e>
 800dd62:	6161      	str	r1, [r4, #20]
 800dd64:	e7e5      	b.n	800dd32 <__d2b+0x52>
 800dd66:	a801      	add	r0, sp, #4
 800dd68:	f7ff fd5a 	bl	800d820 <__lo0bits>
 800dd6c:	9b01      	ldr	r3, [sp, #4]
 800dd6e:	6163      	str	r3, [r4, #20]
 800dd70:	2201      	movs	r2, #1
 800dd72:	6122      	str	r2, [r4, #16]
 800dd74:	3020      	adds	r0, #32
 800dd76:	e7e3      	b.n	800dd40 <__d2b+0x60>
 800dd78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dd7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dd80:	f8c9 0000 	str.w	r0, [r9]
 800dd84:	6918      	ldr	r0, [r3, #16]
 800dd86:	f7ff fd2b 	bl	800d7e0 <__hi0bits>
 800dd8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dd8e:	e7df      	b.n	800dd50 <__d2b+0x70>
 800dd90:	0800ec1f 	.word	0x0800ec1f
 800dd94:	0800ec30 	.word	0x0800ec30

0800dd98 <_calloc_r>:
 800dd98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd9a:	fba1 2402 	umull	r2, r4, r1, r2
 800dd9e:	b94c      	cbnz	r4, 800ddb4 <_calloc_r+0x1c>
 800dda0:	4611      	mov	r1, r2
 800dda2:	9201      	str	r2, [sp, #4]
 800dda4:	f000 f87a 	bl	800de9c <_malloc_r>
 800dda8:	9a01      	ldr	r2, [sp, #4]
 800ddaa:	4605      	mov	r5, r0
 800ddac:	b930      	cbnz	r0, 800ddbc <_calloc_r+0x24>
 800ddae:	4628      	mov	r0, r5
 800ddb0:	b003      	add	sp, #12
 800ddb2:	bd30      	pop	{r4, r5, pc}
 800ddb4:	220c      	movs	r2, #12
 800ddb6:	6002      	str	r2, [r0, #0]
 800ddb8:	2500      	movs	r5, #0
 800ddba:	e7f8      	b.n	800ddae <_calloc_r+0x16>
 800ddbc:	4621      	mov	r1, r4
 800ddbe:	f7fe f961 	bl	800c084 <memset>
 800ddc2:	e7f4      	b.n	800ddae <_calloc_r+0x16>

0800ddc4 <_free_r>:
 800ddc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddc6:	2900      	cmp	r1, #0
 800ddc8:	d044      	beq.n	800de54 <_free_r+0x90>
 800ddca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddce:	9001      	str	r0, [sp, #4]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	f1a1 0404 	sub.w	r4, r1, #4
 800ddd6:	bfb8      	it	lt
 800ddd8:	18e4      	addlt	r4, r4, r3
 800ddda:	f000 f925 	bl	800e028 <__malloc_lock>
 800ddde:	4a1e      	ldr	r2, [pc, #120]	; (800de58 <_free_r+0x94>)
 800dde0:	9801      	ldr	r0, [sp, #4]
 800dde2:	6813      	ldr	r3, [r2, #0]
 800dde4:	b933      	cbnz	r3, 800ddf4 <_free_r+0x30>
 800dde6:	6063      	str	r3, [r4, #4]
 800dde8:	6014      	str	r4, [r2, #0]
 800ddea:	b003      	add	sp, #12
 800ddec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ddf0:	f000 b920 	b.w	800e034 <__malloc_unlock>
 800ddf4:	42a3      	cmp	r3, r4
 800ddf6:	d908      	bls.n	800de0a <_free_r+0x46>
 800ddf8:	6825      	ldr	r5, [r4, #0]
 800ddfa:	1961      	adds	r1, r4, r5
 800ddfc:	428b      	cmp	r3, r1
 800ddfe:	bf01      	itttt	eq
 800de00:	6819      	ldreq	r1, [r3, #0]
 800de02:	685b      	ldreq	r3, [r3, #4]
 800de04:	1949      	addeq	r1, r1, r5
 800de06:	6021      	streq	r1, [r4, #0]
 800de08:	e7ed      	b.n	800dde6 <_free_r+0x22>
 800de0a:	461a      	mov	r2, r3
 800de0c:	685b      	ldr	r3, [r3, #4]
 800de0e:	b10b      	cbz	r3, 800de14 <_free_r+0x50>
 800de10:	42a3      	cmp	r3, r4
 800de12:	d9fa      	bls.n	800de0a <_free_r+0x46>
 800de14:	6811      	ldr	r1, [r2, #0]
 800de16:	1855      	adds	r5, r2, r1
 800de18:	42a5      	cmp	r5, r4
 800de1a:	d10b      	bne.n	800de34 <_free_r+0x70>
 800de1c:	6824      	ldr	r4, [r4, #0]
 800de1e:	4421      	add	r1, r4
 800de20:	1854      	adds	r4, r2, r1
 800de22:	42a3      	cmp	r3, r4
 800de24:	6011      	str	r1, [r2, #0]
 800de26:	d1e0      	bne.n	800ddea <_free_r+0x26>
 800de28:	681c      	ldr	r4, [r3, #0]
 800de2a:	685b      	ldr	r3, [r3, #4]
 800de2c:	6053      	str	r3, [r2, #4]
 800de2e:	4421      	add	r1, r4
 800de30:	6011      	str	r1, [r2, #0]
 800de32:	e7da      	b.n	800ddea <_free_r+0x26>
 800de34:	d902      	bls.n	800de3c <_free_r+0x78>
 800de36:	230c      	movs	r3, #12
 800de38:	6003      	str	r3, [r0, #0]
 800de3a:	e7d6      	b.n	800ddea <_free_r+0x26>
 800de3c:	6825      	ldr	r5, [r4, #0]
 800de3e:	1961      	adds	r1, r4, r5
 800de40:	428b      	cmp	r3, r1
 800de42:	bf04      	itt	eq
 800de44:	6819      	ldreq	r1, [r3, #0]
 800de46:	685b      	ldreq	r3, [r3, #4]
 800de48:	6063      	str	r3, [r4, #4]
 800de4a:	bf04      	itt	eq
 800de4c:	1949      	addeq	r1, r1, r5
 800de4e:	6021      	streq	r1, [r4, #0]
 800de50:	6054      	str	r4, [r2, #4]
 800de52:	e7ca      	b.n	800ddea <_free_r+0x26>
 800de54:	b003      	add	sp, #12
 800de56:	bd30      	pop	{r4, r5, pc}
 800de58:	20000d5c 	.word	0x20000d5c

0800de5c <sbrk_aligned>:
 800de5c:	b570      	push	{r4, r5, r6, lr}
 800de5e:	4e0e      	ldr	r6, [pc, #56]	; (800de98 <sbrk_aligned+0x3c>)
 800de60:	460c      	mov	r4, r1
 800de62:	6831      	ldr	r1, [r6, #0]
 800de64:	4605      	mov	r5, r0
 800de66:	b911      	cbnz	r1, 800de6e <sbrk_aligned+0x12>
 800de68:	f000 f88c 	bl	800df84 <_sbrk_r>
 800de6c:	6030      	str	r0, [r6, #0]
 800de6e:	4621      	mov	r1, r4
 800de70:	4628      	mov	r0, r5
 800de72:	f000 f887 	bl	800df84 <_sbrk_r>
 800de76:	1c43      	adds	r3, r0, #1
 800de78:	d00a      	beq.n	800de90 <sbrk_aligned+0x34>
 800de7a:	1cc4      	adds	r4, r0, #3
 800de7c:	f024 0403 	bic.w	r4, r4, #3
 800de80:	42a0      	cmp	r0, r4
 800de82:	d007      	beq.n	800de94 <sbrk_aligned+0x38>
 800de84:	1a21      	subs	r1, r4, r0
 800de86:	4628      	mov	r0, r5
 800de88:	f000 f87c 	bl	800df84 <_sbrk_r>
 800de8c:	3001      	adds	r0, #1
 800de8e:	d101      	bne.n	800de94 <sbrk_aligned+0x38>
 800de90:	f04f 34ff 	mov.w	r4, #4294967295
 800de94:	4620      	mov	r0, r4
 800de96:	bd70      	pop	{r4, r5, r6, pc}
 800de98:	20000d60 	.word	0x20000d60

0800de9c <_malloc_r>:
 800de9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dea0:	1ccd      	adds	r5, r1, #3
 800dea2:	f025 0503 	bic.w	r5, r5, #3
 800dea6:	3508      	adds	r5, #8
 800dea8:	2d0c      	cmp	r5, #12
 800deaa:	bf38      	it	cc
 800deac:	250c      	movcc	r5, #12
 800deae:	2d00      	cmp	r5, #0
 800deb0:	4607      	mov	r7, r0
 800deb2:	db01      	blt.n	800deb8 <_malloc_r+0x1c>
 800deb4:	42a9      	cmp	r1, r5
 800deb6:	d905      	bls.n	800dec4 <_malloc_r+0x28>
 800deb8:	230c      	movs	r3, #12
 800deba:	603b      	str	r3, [r7, #0]
 800debc:	2600      	movs	r6, #0
 800debe:	4630      	mov	r0, r6
 800dec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dec4:	4e2e      	ldr	r6, [pc, #184]	; (800df80 <_malloc_r+0xe4>)
 800dec6:	f000 f8af 	bl	800e028 <__malloc_lock>
 800deca:	6833      	ldr	r3, [r6, #0]
 800decc:	461c      	mov	r4, r3
 800dece:	bb34      	cbnz	r4, 800df1e <_malloc_r+0x82>
 800ded0:	4629      	mov	r1, r5
 800ded2:	4638      	mov	r0, r7
 800ded4:	f7ff ffc2 	bl	800de5c <sbrk_aligned>
 800ded8:	1c43      	adds	r3, r0, #1
 800deda:	4604      	mov	r4, r0
 800dedc:	d14d      	bne.n	800df7a <_malloc_r+0xde>
 800dede:	6834      	ldr	r4, [r6, #0]
 800dee0:	4626      	mov	r6, r4
 800dee2:	2e00      	cmp	r6, #0
 800dee4:	d140      	bne.n	800df68 <_malloc_r+0xcc>
 800dee6:	6823      	ldr	r3, [r4, #0]
 800dee8:	4631      	mov	r1, r6
 800deea:	4638      	mov	r0, r7
 800deec:	eb04 0803 	add.w	r8, r4, r3
 800def0:	f000 f848 	bl	800df84 <_sbrk_r>
 800def4:	4580      	cmp	r8, r0
 800def6:	d13a      	bne.n	800df6e <_malloc_r+0xd2>
 800def8:	6821      	ldr	r1, [r4, #0]
 800defa:	3503      	adds	r5, #3
 800defc:	1a6d      	subs	r5, r5, r1
 800defe:	f025 0503 	bic.w	r5, r5, #3
 800df02:	3508      	adds	r5, #8
 800df04:	2d0c      	cmp	r5, #12
 800df06:	bf38      	it	cc
 800df08:	250c      	movcc	r5, #12
 800df0a:	4629      	mov	r1, r5
 800df0c:	4638      	mov	r0, r7
 800df0e:	f7ff ffa5 	bl	800de5c <sbrk_aligned>
 800df12:	3001      	adds	r0, #1
 800df14:	d02b      	beq.n	800df6e <_malloc_r+0xd2>
 800df16:	6823      	ldr	r3, [r4, #0]
 800df18:	442b      	add	r3, r5
 800df1a:	6023      	str	r3, [r4, #0]
 800df1c:	e00e      	b.n	800df3c <_malloc_r+0xa0>
 800df1e:	6822      	ldr	r2, [r4, #0]
 800df20:	1b52      	subs	r2, r2, r5
 800df22:	d41e      	bmi.n	800df62 <_malloc_r+0xc6>
 800df24:	2a0b      	cmp	r2, #11
 800df26:	d916      	bls.n	800df56 <_malloc_r+0xba>
 800df28:	1961      	adds	r1, r4, r5
 800df2a:	42a3      	cmp	r3, r4
 800df2c:	6025      	str	r5, [r4, #0]
 800df2e:	bf18      	it	ne
 800df30:	6059      	strne	r1, [r3, #4]
 800df32:	6863      	ldr	r3, [r4, #4]
 800df34:	bf08      	it	eq
 800df36:	6031      	streq	r1, [r6, #0]
 800df38:	5162      	str	r2, [r4, r5]
 800df3a:	604b      	str	r3, [r1, #4]
 800df3c:	4638      	mov	r0, r7
 800df3e:	f104 060b 	add.w	r6, r4, #11
 800df42:	f000 f877 	bl	800e034 <__malloc_unlock>
 800df46:	f026 0607 	bic.w	r6, r6, #7
 800df4a:	1d23      	adds	r3, r4, #4
 800df4c:	1af2      	subs	r2, r6, r3
 800df4e:	d0b6      	beq.n	800debe <_malloc_r+0x22>
 800df50:	1b9b      	subs	r3, r3, r6
 800df52:	50a3      	str	r3, [r4, r2]
 800df54:	e7b3      	b.n	800debe <_malloc_r+0x22>
 800df56:	6862      	ldr	r2, [r4, #4]
 800df58:	42a3      	cmp	r3, r4
 800df5a:	bf0c      	ite	eq
 800df5c:	6032      	streq	r2, [r6, #0]
 800df5e:	605a      	strne	r2, [r3, #4]
 800df60:	e7ec      	b.n	800df3c <_malloc_r+0xa0>
 800df62:	4623      	mov	r3, r4
 800df64:	6864      	ldr	r4, [r4, #4]
 800df66:	e7b2      	b.n	800dece <_malloc_r+0x32>
 800df68:	4634      	mov	r4, r6
 800df6a:	6876      	ldr	r6, [r6, #4]
 800df6c:	e7b9      	b.n	800dee2 <_malloc_r+0x46>
 800df6e:	230c      	movs	r3, #12
 800df70:	603b      	str	r3, [r7, #0]
 800df72:	4638      	mov	r0, r7
 800df74:	f000 f85e 	bl	800e034 <__malloc_unlock>
 800df78:	e7a1      	b.n	800debe <_malloc_r+0x22>
 800df7a:	6025      	str	r5, [r4, #0]
 800df7c:	e7de      	b.n	800df3c <_malloc_r+0xa0>
 800df7e:	bf00      	nop
 800df80:	20000d5c 	.word	0x20000d5c

0800df84 <_sbrk_r>:
 800df84:	b538      	push	{r3, r4, r5, lr}
 800df86:	4d06      	ldr	r5, [pc, #24]	; (800dfa0 <_sbrk_r+0x1c>)
 800df88:	2300      	movs	r3, #0
 800df8a:	4604      	mov	r4, r0
 800df8c:	4608      	mov	r0, r1
 800df8e:	602b      	str	r3, [r5, #0]
 800df90:	f7f3 fea2 	bl	8001cd8 <_sbrk>
 800df94:	1c43      	adds	r3, r0, #1
 800df96:	d102      	bne.n	800df9e <_sbrk_r+0x1a>
 800df98:	682b      	ldr	r3, [r5, #0]
 800df9a:	b103      	cbz	r3, 800df9e <_sbrk_r+0x1a>
 800df9c:	6023      	str	r3, [r4, #0]
 800df9e:	bd38      	pop	{r3, r4, r5, pc}
 800dfa0:	20000d64 	.word	0x20000d64

0800dfa4 <__assert_func>:
 800dfa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dfa6:	4614      	mov	r4, r2
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	4b09      	ldr	r3, [pc, #36]	; (800dfd0 <__assert_func+0x2c>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	4605      	mov	r5, r0
 800dfb0:	68d8      	ldr	r0, [r3, #12]
 800dfb2:	b14c      	cbz	r4, 800dfc8 <__assert_func+0x24>
 800dfb4:	4b07      	ldr	r3, [pc, #28]	; (800dfd4 <__assert_func+0x30>)
 800dfb6:	9100      	str	r1, [sp, #0]
 800dfb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dfbc:	4906      	ldr	r1, [pc, #24]	; (800dfd8 <__assert_func+0x34>)
 800dfbe:	462b      	mov	r3, r5
 800dfc0:	f000 f80e 	bl	800dfe0 <fiprintf>
 800dfc4:	f000 fa64 	bl	800e490 <abort>
 800dfc8:	4b04      	ldr	r3, [pc, #16]	; (800dfdc <__assert_func+0x38>)
 800dfca:	461c      	mov	r4, r3
 800dfcc:	e7f3      	b.n	800dfb6 <__assert_func+0x12>
 800dfce:	bf00      	nop
 800dfd0:	20000164 	.word	0x20000164
 800dfd4:	0800ed8c 	.word	0x0800ed8c
 800dfd8:	0800ed99 	.word	0x0800ed99
 800dfdc:	0800edc7 	.word	0x0800edc7

0800dfe0 <fiprintf>:
 800dfe0:	b40e      	push	{r1, r2, r3}
 800dfe2:	b503      	push	{r0, r1, lr}
 800dfe4:	4601      	mov	r1, r0
 800dfe6:	ab03      	add	r3, sp, #12
 800dfe8:	4805      	ldr	r0, [pc, #20]	; (800e000 <fiprintf+0x20>)
 800dfea:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfee:	6800      	ldr	r0, [r0, #0]
 800dff0:	9301      	str	r3, [sp, #4]
 800dff2:	f000 f84f 	bl	800e094 <_vfiprintf_r>
 800dff6:	b002      	add	sp, #8
 800dff8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dffc:	b003      	add	sp, #12
 800dffe:	4770      	bx	lr
 800e000:	20000164 	.word	0x20000164

0800e004 <__ascii_mbtowc>:
 800e004:	b082      	sub	sp, #8
 800e006:	b901      	cbnz	r1, 800e00a <__ascii_mbtowc+0x6>
 800e008:	a901      	add	r1, sp, #4
 800e00a:	b142      	cbz	r2, 800e01e <__ascii_mbtowc+0x1a>
 800e00c:	b14b      	cbz	r3, 800e022 <__ascii_mbtowc+0x1e>
 800e00e:	7813      	ldrb	r3, [r2, #0]
 800e010:	600b      	str	r3, [r1, #0]
 800e012:	7812      	ldrb	r2, [r2, #0]
 800e014:	1e10      	subs	r0, r2, #0
 800e016:	bf18      	it	ne
 800e018:	2001      	movne	r0, #1
 800e01a:	b002      	add	sp, #8
 800e01c:	4770      	bx	lr
 800e01e:	4610      	mov	r0, r2
 800e020:	e7fb      	b.n	800e01a <__ascii_mbtowc+0x16>
 800e022:	f06f 0001 	mvn.w	r0, #1
 800e026:	e7f8      	b.n	800e01a <__ascii_mbtowc+0x16>

0800e028 <__malloc_lock>:
 800e028:	4801      	ldr	r0, [pc, #4]	; (800e030 <__malloc_lock+0x8>)
 800e02a:	f000 bbf1 	b.w	800e810 <__retarget_lock_acquire_recursive>
 800e02e:	bf00      	nop
 800e030:	20000d68 	.word	0x20000d68

0800e034 <__malloc_unlock>:
 800e034:	4801      	ldr	r0, [pc, #4]	; (800e03c <__malloc_unlock+0x8>)
 800e036:	f000 bbec 	b.w	800e812 <__retarget_lock_release_recursive>
 800e03a:	bf00      	nop
 800e03c:	20000d68 	.word	0x20000d68

0800e040 <__sfputc_r>:
 800e040:	6893      	ldr	r3, [r2, #8]
 800e042:	3b01      	subs	r3, #1
 800e044:	2b00      	cmp	r3, #0
 800e046:	b410      	push	{r4}
 800e048:	6093      	str	r3, [r2, #8]
 800e04a:	da08      	bge.n	800e05e <__sfputc_r+0x1e>
 800e04c:	6994      	ldr	r4, [r2, #24]
 800e04e:	42a3      	cmp	r3, r4
 800e050:	db01      	blt.n	800e056 <__sfputc_r+0x16>
 800e052:	290a      	cmp	r1, #10
 800e054:	d103      	bne.n	800e05e <__sfputc_r+0x1e>
 800e056:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e05a:	f000 b94b 	b.w	800e2f4 <__swbuf_r>
 800e05e:	6813      	ldr	r3, [r2, #0]
 800e060:	1c58      	adds	r0, r3, #1
 800e062:	6010      	str	r0, [r2, #0]
 800e064:	7019      	strb	r1, [r3, #0]
 800e066:	4608      	mov	r0, r1
 800e068:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e06c:	4770      	bx	lr

0800e06e <__sfputs_r>:
 800e06e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e070:	4606      	mov	r6, r0
 800e072:	460f      	mov	r7, r1
 800e074:	4614      	mov	r4, r2
 800e076:	18d5      	adds	r5, r2, r3
 800e078:	42ac      	cmp	r4, r5
 800e07a:	d101      	bne.n	800e080 <__sfputs_r+0x12>
 800e07c:	2000      	movs	r0, #0
 800e07e:	e007      	b.n	800e090 <__sfputs_r+0x22>
 800e080:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e084:	463a      	mov	r2, r7
 800e086:	4630      	mov	r0, r6
 800e088:	f7ff ffda 	bl	800e040 <__sfputc_r>
 800e08c:	1c43      	adds	r3, r0, #1
 800e08e:	d1f3      	bne.n	800e078 <__sfputs_r+0xa>
 800e090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e094 <_vfiprintf_r>:
 800e094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e098:	460d      	mov	r5, r1
 800e09a:	b09d      	sub	sp, #116	; 0x74
 800e09c:	4614      	mov	r4, r2
 800e09e:	4698      	mov	r8, r3
 800e0a0:	4606      	mov	r6, r0
 800e0a2:	b118      	cbz	r0, 800e0ac <_vfiprintf_r+0x18>
 800e0a4:	6983      	ldr	r3, [r0, #24]
 800e0a6:	b90b      	cbnz	r3, 800e0ac <_vfiprintf_r+0x18>
 800e0a8:	f000 fb14 	bl	800e6d4 <__sinit>
 800e0ac:	4b89      	ldr	r3, [pc, #548]	; (800e2d4 <_vfiprintf_r+0x240>)
 800e0ae:	429d      	cmp	r5, r3
 800e0b0:	d11b      	bne.n	800e0ea <_vfiprintf_r+0x56>
 800e0b2:	6875      	ldr	r5, [r6, #4]
 800e0b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e0b6:	07d9      	lsls	r1, r3, #31
 800e0b8:	d405      	bmi.n	800e0c6 <_vfiprintf_r+0x32>
 800e0ba:	89ab      	ldrh	r3, [r5, #12]
 800e0bc:	059a      	lsls	r2, r3, #22
 800e0be:	d402      	bmi.n	800e0c6 <_vfiprintf_r+0x32>
 800e0c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e0c2:	f000 fba5 	bl	800e810 <__retarget_lock_acquire_recursive>
 800e0c6:	89ab      	ldrh	r3, [r5, #12]
 800e0c8:	071b      	lsls	r3, r3, #28
 800e0ca:	d501      	bpl.n	800e0d0 <_vfiprintf_r+0x3c>
 800e0cc:	692b      	ldr	r3, [r5, #16]
 800e0ce:	b9eb      	cbnz	r3, 800e10c <_vfiprintf_r+0x78>
 800e0d0:	4629      	mov	r1, r5
 800e0d2:	4630      	mov	r0, r6
 800e0d4:	f000 f96e 	bl	800e3b4 <__swsetup_r>
 800e0d8:	b1c0      	cbz	r0, 800e10c <_vfiprintf_r+0x78>
 800e0da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e0dc:	07dc      	lsls	r4, r3, #31
 800e0de:	d50e      	bpl.n	800e0fe <_vfiprintf_r+0x6a>
 800e0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e0e4:	b01d      	add	sp, #116	; 0x74
 800e0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0ea:	4b7b      	ldr	r3, [pc, #492]	; (800e2d8 <_vfiprintf_r+0x244>)
 800e0ec:	429d      	cmp	r5, r3
 800e0ee:	d101      	bne.n	800e0f4 <_vfiprintf_r+0x60>
 800e0f0:	68b5      	ldr	r5, [r6, #8]
 800e0f2:	e7df      	b.n	800e0b4 <_vfiprintf_r+0x20>
 800e0f4:	4b79      	ldr	r3, [pc, #484]	; (800e2dc <_vfiprintf_r+0x248>)
 800e0f6:	429d      	cmp	r5, r3
 800e0f8:	bf08      	it	eq
 800e0fa:	68f5      	ldreq	r5, [r6, #12]
 800e0fc:	e7da      	b.n	800e0b4 <_vfiprintf_r+0x20>
 800e0fe:	89ab      	ldrh	r3, [r5, #12]
 800e100:	0598      	lsls	r0, r3, #22
 800e102:	d4ed      	bmi.n	800e0e0 <_vfiprintf_r+0x4c>
 800e104:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e106:	f000 fb84 	bl	800e812 <__retarget_lock_release_recursive>
 800e10a:	e7e9      	b.n	800e0e0 <_vfiprintf_r+0x4c>
 800e10c:	2300      	movs	r3, #0
 800e10e:	9309      	str	r3, [sp, #36]	; 0x24
 800e110:	2320      	movs	r3, #32
 800e112:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e116:	f8cd 800c 	str.w	r8, [sp, #12]
 800e11a:	2330      	movs	r3, #48	; 0x30
 800e11c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e2e0 <_vfiprintf_r+0x24c>
 800e120:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e124:	f04f 0901 	mov.w	r9, #1
 800e128:	4623      	mov	r3, r4
 800e12a:	469a      	mov	sl, r3
 800e12c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e130:	b10a      	cbz	r2, 800e136 <_vfiprintf_r+0xa2>
 800e132:	2a25      	cmp	r2, #37	; 0x25
 800e134:	d1f9      	bne.n	800e12a <_vfiprintf_r+0x96>
 800e136:	ebba 0b04 	subs.w	fp, sl, r4
 800e13a:	d00b      	beq.n	800e154 <_vfiprintf_r+0xc0>
 800e13c:	465b      	mov	r3, fp
 800e13e:	4622      	mov	r2, r4
 800e140:	4629      	mov	r1, r5
 800e142:	4630      	mov	r0, r6
 800e144:	f7ff ff93 	bl	800e06e <__sfputs_r>
 800e148:	3001      	adds	r0, #1
 800e14a:	f000 80aa 	beq.w	800e2a2 <_vfiprintf_r+0x20e>
 800e14e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e150:	445a      	add	r2, fp
 800e152:	9209      	str	r2, [sp, #36]	; 0x24
 800e154:	f89a 3000 	ldrb.w	r3, [sl]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	f000 80a2 	beq.w	800e2a2 <_vfiprintf_r+0x20e>
 800e15e:	2300      	movs	r3, #0
 800e160:	f04f 32ff 	mov.w	r2, #4294967295
 800e164:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e168:	f10a 0a01 	add.w	sl, sl, #1
 800e16c:	9304      	str	r3, [sp, #16]
 800e16e:	9307      	str	r3, [sp, #28]
 800e170:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e174:	931a      	str	r3, [sp, #104]	; 0x68
 800e176:	4654      	mov	r4, sl
 800e178:	2205      	movs	r2, #5
 800e17a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e17e:	4858      	ldr	r0, [pc, #352]	; (800e2e0 <_vfiprintf_r+0x24c>)
 800e180:	f7f2 f82e 	bl	80001e0 <memchr>
 800e184:	9a04      	ldr	r2, [sp, #16]
 800e186:	b9d8      	cbnz	r0, 800e1c0 <_vfiprintf_r+0x12c>
 800e188:	06d1      	lsls	r1, r2, #27
 800e18a:	bf44      	itt	mi
 800e18c:	2320      	movmi	r3, #32
 800e18e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e192:	0713      	lsls	r3, r2, #28
 800e194:	bf44      	itt	mi
 800e196:	232b      	movmi	r3, #43	; 0x2b
 800e198:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e19c:	f89a 3000 	ldrb.w	r3, [sl]
 800e1a0:	2b2a      	cmp	r3, #42	; 0x2a
 800e1a2:	d015      	beq.n	800e1d0 <_vfiprintf_r+0x13c>
 800e1a4:	9a07      	ldr	r2, [sp, #28]
 800e1a6:	4654      	mov	r4, sl
 800e1a8:	2000      	movs	r0, #0
 800e1aa:	f04f 0c0a 	mov.w	ip, #10
 800e1ae:	4621      	mov	r1, r4
 800e1b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1b4:	3b30      	subs	r3, #48	; 0x30
 800e1b6:	2b09      	cmp	r3, #9
 800e1b8:	d94e      	bls.n	800e258 <_vfiprintf_r+0x1c4>
 800e1ba:	b1b0      	cbz	r0, 800e1ea <_vfiprintf_r+0x156>
 800e1bc:	9207      	str	r2, [sp, #28]
 800e1be:	e014      	b.n	800e1ea <_vfiprintf_r+0x156>
 800e1c0:	eba0 0308 	sub.w	r3, r0, r8
 800e1c4:	fa09 f303 	lsl.w	r3, r9, r3
 800e1c8:	4313      	orrs	r3, r2
 800e1ca:	9304      	str	r3, [sp, #16]
 800e1cc:	46a2      	mov	sl, r4
 800e1ce:	e7d2      	b.n	800e176 <_vfiprintf_r+0xe2>
 800e1d0:	9b03      	ldr	r3, [sp, #12]
 800e1d2:	1d19      	adds	r1, r3, #4
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	9103      	str	r1, [sp, #12]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	bfbb      	ittet	lt
 800e1dc:	425b      	neglt	r3, r3
 800e1de:	f042 0202 	orrlt.w	r2, r2, #2
 800e1e2:	9307      	strge	r3, [sp, #28]
 800e1e4:	9307      	strlt	r3, [sp, #28]
 800e1e6:	bfb8      	it	lt
 800e1e8:	9204      	strlt	r2, [sp, #16]
 800e1ea:	7823      	ldrb	r3, [r4, #0]
 800e1ec:	2b2e      	cmp	r3, #46	; 0x2e
 800e1ee:	d10c      	bne.n	800e20a <_vfiprintf_r+0x176>
 800e1f0:	7863      	ldrb	r3, [r4, #1]
 800e1f2:	2b2a      	cmp	r3, #42	; 0x2a
 800e1f4:	d135      	bne.n	800e262 <_vfiprintf_r+0x1ce>
 800e1f6:	9b03      	ldr	r3, [sp, #12]
 800e1f8:	1d1a      	adds	r2, r3, #4
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	9203      	str	r2, [sp, #12]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	bfb8      	it	lt
 800e202:	f04f 33ff 	movlt.w	r3, #4294967295
 800e206:	3402      	adds	r4, #2
 800e208:	9305      	str	r3, [sp, #20]
 800e20a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e2f0 <_vfiprintf_r+0x25c>
 800e20e:	7821      	ldrb	r1, [r4, #0]
 800e210:	2203      	movs	r2, #3
 800e212:	4650      	mov	r0, sl
 800e214:	f7f1 ffe4 	bl	80001e0 <memchr>
 800e218:	b140      	cbz	r0, 800e22c <_vfiprintf_r+0x198>
 800e21a:	2340      	movs	r3, #64	; 0x40
 800e21c:	eba0 000a 	sub.w	r0, r0, sl
 800e220:	fa03 f000 	lsl.w	r0, r3, r0
 800e224:	9b04      	ldr	r3, [sp, #16]
 800e226:	4303      	orrs	r3, r0
 800e228:	3401      	adds	r4, #1
 800e22a:	9304      	str	r3, [sp, #16]
 800e22c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e230:	482c      	ldr	r0, [pc, #176]	; (800e2e4 <_vfiprintf_r+0x250>)
 800e232:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e236:	2206      	movs	r2, #6
 800e238:	f7f1 ffd2 	bl	80001e0 <memchr>
 800e23c:	2800      	cmp	r0, #0
 800e23e:	d03f      	beq.n	800e2c0 <_vfiprintf_r+0x22c>
 800e240:	4b29      	ldr	r3, [pc, #164]	; (800e2e8 <_vfiprintf_r+0x254>)
 800e242:	bb1b      	cbnz	r3, 800e28c <_vfiprintf_r+0x1f8>
 800e244:	9b03      	ldr	r3, [sp, #12]
 800e246:	3307      	adds	r3, #7
 800e248:	f023 0307 	bic.w	r3, r3, #7
 800e24c:	3308      	adds	r3, #8
 800e24e:	9303      	str	r3, [sp, #12]
 800e250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e252:	443b      	add	r3, r7
 800e254:	9309      	str	r3, [sp, #36]	; 0x24
 800e256:	e767      	b.n	800e128 <_vfiprintf_r+0x94>
 800e258:	fb0c 3202 	mla	r2, ip, r2, r3
 800e25c:	460c      	mov	r4, r1
 800e25e:	2001      	movs	r0, #1
 800e260:	e7a5      	b.n	800e1ae <_vfiprintf_r+0x11a>
 800e262:	2300      	movs	r3, #0
 800e264:	3401      	adds	r4, #1
 800e266:	9305      	str	r3, [sp, #20]
 800e268:	4619      	mov	r1, r3
 800e26a:	f04f 0c0a 	mov.w	ip, #10
 800e26e:	4620      	mov	r0, r4
 800e270:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e274:	3a30      	subs	r2, #48	; 0x30
 800e276:	2a09      	cmp	r2, #9
 800e278:	d903      	bls.n	800e282 <_vfiprintf_r+0x1ee>
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d0c5      	beq.n	800e20a <_vfiprintf_r+0x176>
 800e27e:	9105      	str	r1, [sp, #20]
 800e280:	e7c3      	b.n	800e20a <_vfiprintf_r+0x176>
 800e282:	fb0c 2101 	mla	r1, ip, r1, r2
 800e286:	4604      	mov	r4, r0
 800e288:	2301      	movs	r3, #1
 800e28a:	e7f0      	b.n	800e26e <_vfiprintf_r+0x1da>
 800e28c:	ab03      	add	r3, sp, #12
 800e28e:	9300      	str	r3, [sp, #0]
 800e290:	462a      	mov	r2, r5
 800e292:	4b16      	ldr	r3, [pc, #88]	; (800e2ec <_vfiprintf_r+0x258>)
 800e294:	a904      	add	r1, sp, #16
 800e296:	4630      	mov	r0, r6
 800e298:	f7fd ff9c 	bl	800c1d4 <_printf_float>
 800e29c:	4607      	mov	r7, r0
 800e29e:	1c78      	adds	r0, r7, #1
 800e2a0:	d1d6      	bne.n	800e250 <_vfiprintf_r+0x1bc>
 800e2a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2a4:	07d9      	lsls	r1, r3, #31
 800e2a6:	d405      	bmi.n	800e2b4 <_vfiprintf_r+0x220>
 800e2a8:	89ab      	ldrh	r3, [r5, #12]
 800e2aa:	059a      	lsls	r2, r3, #22
 800e2ac:	d402      	bmi.n	800e2b4 <_vfiprintf_r+0x220>
 800e2ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e2b0:	f000 faaf 	bl	800e812 <__retarget_lock_release_recursive>
 800e2b4:	89ab      	ldrh	r3, [r5, #12]
 800e2b6:	065b      	lsls	r3, r3, #25
 800e2b8:	f53f af12 	bmi.w	800e0e0 <_vfiprintf_r+0x4c>
 800e2bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2be:	e711      	b.n	800e0e4 <_vfiprintf_r+0x50>
 800e2c0:	ab03      	add	r3, sp, #12
 800e2c2:	9300      	str	r3, [sp, #0]
 800e2c4:	462a      	mov	r2, r5
 800e2c6:	4b09      	ldr	r3, [pc, #36]	; (800e2ec <_vfiprintf_r+0x258>)
 800e2c8:	a904      	add	r1, sp, #16
 800e2ca:	4630      	mov	r0, r6
 800e2cc:	f7fe fa26 	bl	800c71c <_printf_i>
 800e2d0:	e7e4      	b.n	800e29c <_vfiprintf_r+0x208>
 800e2d2:	bf00      	nop
 800e2d4:	0800ef04 	.word	0x0800ef04
 800e2d8:	0800ef24 	.word	0x0800ef24
 800e2dc:	0800eee4 	.word	0x0800eee4
 800e2e0:	0800edd2 	.word	0x0800edd2
 800e2e4:	0800eddc 	.word	0x0800eddc
 800e2e8:	0800c1d5 	.word	0x0800c1d5
 800e2ec:	0800e06f 	.word	0x0800e06f
 800e2f0:	0800edd8 	.word	0x0800edd8

0800e2f4 <__swbuf_r>:
 800e2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2f6:	460e      	mov	r6, r1
 800e2f8:	4614      	mov	r4, r2
 800e2fa:	4605      	mov	r5, r0
 800e2fc:	b118      	cbz	r0, 800e306 <__swbuf_r+0x12>
 800e2fe:	6983      	ldr	r3, [r0, #24]
 800e300:	b90b      	cbnz	r3, 800e306 <__swbuf_r+0x12>
 800e302:	f000 f9e7 	bl	800e6d4 <__sinit>
 800e306:	4b21      	ldr	r3, [pc, #132]	; (800e38c <__swbuf_r+0x98>)
 800e308:	429c      	cmp	r4, r3
 800e30a:	d12b      	bne.n	800e364 <__swbuf_r+0x70>
 800e30c:	686c      	ldr	r4, [r5, #4]
 800e30e:	69a3      	ldr	r3, [r4, #24]
 800e310:	60a3      	str	r3, [r4, #8]
 800e312:	89a3      	ldrh	r3, [r4, #12]
 800e314:	071a      	lsls	r2, r3, #28
 800e316:	d52f      	bpl.n	800e378 <__swbuf_r+0x84>
 800e318:	6923      	ldr	r3, [r4, #16]
 800e31a:	b36b      	cbz	r3, 800e378 <__swbuf_r+0x84>
 800e31c:	6923      	ldr	r3, [r4, #16]
 800e31e:	6820      	ldr	r0, [r4, #0]
 800e320:	1ac0      	subs	r0, r0, r3
 800e322:	6963      	ldr	r3, [r4, #20]
 800e324:	b2f6      	uxtb	r6, r6
 800e326:	4283      	cmp	r3, r0
 800e328:	4637      	mov	r7, r6
 800e32a:	dc04      	bgt.n	800e336 <__swbuf_r+0x42>
 800e32c:	4621      	mov	r1, r4
 800e32e:	4628      	mov	r0, r5
 800e330:	f000 f93c 	bl	800e5ac <_fflush_r>
 800e334:	bb30      	cbnz	r0, 800e384 <__swbuf_r+0x90>
 800e336:	68a3      	ldr	r3, [r4, #8]
 800e338:	3b01      	subs	r3, #1
 800e33a:	60a3      	str	r3, [r4, #8]
 800e33c:	6823      	ldr	r3, [r4, #0]
 800e33e:	1c5a      	adds	r2, r3, #1
 800e340:	6022      	str	r2, [r4, #0]
 800e342:	701e      	strb	r6, [r3, #0]
 800e344:	6963      	ldr	r3, [r4, #20]
 800e346:	3001      	adds	r0, #1
 800e348:	4283      	cmp	r3, r0
 800e34a:	d004      	beq.n	800e356 <__swbuf_r+0x62>
 800e34c:	89a3      	ldrh	r3, [r4, #12]
 800e34e:	07db      	lsls	r3, r3, #31
 800e350:	d506      	bpl.n	800e360 <__swbuf_r+0x6c>
 800e352:	2e0a      	cmp	r6, #10
 800e354:	d104      	bne.n	800e360 <__swbuf_r+0x6c>
 800e356:	4621      	mov	r1, r4
 800e358:	4628      	mov	r0, r5
 800e35a:	f000 f927 	bl	800e5ac <_fflush_r>
 800e35e:	b988      	cbnz	r0, 800e384 <__swbuf_r+0x90>
 800e360:	4638      	mov	r0, r7
 800e362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e364:	4b0a      	ldr	r3, [pc, #40]	; (800e390 <__swbuf_r+0x9c>)
 800e366:	429c      	cmp	r4, r3
 800e368:	d101      	bne.n	800e36e <__swbuf_r+0x7a>
 800e36a:	68ac      	ldr	r4, [r5, #8]
 800e36c:	e7cf      	b.n	800e30e <__swbuf_r+0x1a>
 800e36e:	4b09      	ldr	r3, [pc, #36]	; (800e394 <__swbuf_r+0xa0>)
 800e370:	429c      	cmp	r4, r3
 800e372:	bf08      	it	eq
 800e374:	68ec      	ldreq	r4, [r5, #12]
 800e376:	e7ca      	b.n	800e30e <__swbuf_r+0x1a>
 800e378:	4621      	mov	r1, r4
 800e37a:	4628      	mov	r0, r5
 800e37c:	f000 f81a 	bl	800e3b4 <__swsetup_r>
 800e380:	2800      	cmp	r0, #0
 800e382:	d0cb      	beq.n	800e31c <__swbuf_r+0x28>
 800e384:	f04f 37ff 	mov.w	r7, #4294967295
 800e388:	e7ea      	b.n	800e360 <__swbuf_r+0x6c>
 800e38a:	bf00      	nop
 800e38c:	0800ef04 	.word	0x0800ef04
 800e390:	0800ef24 	.word	0x0800ef24
 800e394:	0800eee4 	.word	0x0800eee4

0800e398 <__ascii_wctomb>:
 800e398:	b149      	cbz	r1, 800e3ae <__ascii_wctomb+0x16>
 800e39a:	2aff      	cmp	r2, #255	; 0xff
 800e39c:	bf85      	ittet	hi
 800e39e:	238a      	movhi	r3, #138	; 0x8a
 800e3a0:	6003      	strhi	r3, [r0, #0]
 800e3a2:	700a      	strbls	r2, [r1, #0]
 800e3a4:	f04f 30ff 	movhi.w	r0, #4294967295
 800e3a8:	bf98      	it	ls
 800e3aa:	2001      	movls	r0, #1
 800e3ac:	4770      	bx	lr
 800e3ae:	4608      	mov	r0, r1
 800e3b0:	4770      	bx	lr
	...

0800e3b4 <__swsetup_r>:
 800e3b4:	4b32      	ldr	r3, [pc, #200]	; (800e480 <__swsetup_r+0xcc>)
 800e3b6:	b570      	push	{r4, r5, r6, lr}
 800e3b8:	681d      	ldr	r5, [r3, #0]
 800e3ba:	4606      	mov	r6, r0
 800e3bc:	460c      	mov	r4, r1
 800e3be:	b125      	cbz	r5, 800e3ca <__swsetup_r+0x16>
 800e3c0:	69ab      	ldr	r3, [r5, #24]
 800e3c2:	b913      	cbnz	r3, 800e3ca <__swsetup_r+0x16>
 800e3c4:	4628      	mov	r0, r5
 800e3c6:	f000 f985 	bl	800e6d4 <__sinit>
 800e3ca:	4b2e      	ldr	r3, [pc, #184]	; (800e484 <__swsetup_r+0xd0>)
 800e3cc:	429c      	cmp	r4, r3
 800e3ce:	d10f      	bne.n	800e3f0 <__swsetup_r+0x3c>
 800e3d0:	686c      	ldr	r4, [r5, #4]
 800e3d2:	89a3      	ldrh	r3, [r4, #12]
 800e3d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3d8:	0719      	lsls	r1, r3, #28
 800e3da:	d42c      	bmi.n	800e436 <__swsetup_r+0x82>
 800e3dc:	06dd      	lsls	r5, r3, #27
 800e3de:	d411      	bmi.n	800e404 <__swsetup_r+0x50>
 800e3e0:	2309      	movs	r3, #9
 800e3e2:	6033      	str	r3, [r6, #0]
 800e3e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e3e8:	81a3      	strh	r3, [r4, #12]
 800e3ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ee:	e03e      	b.n	800e46e <__swsetup_r+0xba>
 800e3f0:	4b25      	ldr	r3, [pc, #148]	; (800e488 <__swsetup_r+0xd4>)
 800e3f2:	429c      	cmp	r4, r3
 800e3f4:	d101      	bne.n	800e3fa <__swsetup_r+0x46>
 800e3f6:	68ac      	ldr	r4, [r5, #8]
 800e3f8:	e7eb      	b.n	800e3d2 <__swsetup_r+0x1e>
 800e3fa:	4b24      	ldr	r3, [pc, #144]	; (800e48c <__swsetup_r+0xd8>)
 800e3fc:	429c      	cmp	r4, r3
 800e3fe:	bf08      	it	eq
 800e400:	68ec      	ldreq	r4, [r5, #12]
 800e402:	e7e6      	b.n	800e3d2 <__swsetup_r+0x1e>
 800e404:	0758      	lsls	r0, r3, #29
 800e406:	d512      	bpl.n	800e42e <__swsetup_r+0x7a>
 800e408:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e40a:	b141      	cbz	r1, 800e41e <__swsetup_r+0x6a>
 800e40c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e410:	4299      	cmp	r1, r3
 800e412:	d002      	beq.n	800e41a <__swsetup_r+0x66>
 800e414:	4630      	mov	r0, r6
 800e416:	f7ff fcd5 	bl	800ddc4 <_free_r>
 800e41a:	2300      	movs	r3, #0
 800e41c:	6363      	str	r3, [r4, #52]	; 0x34
 800e41e:	89a3      	ldrh	r3, [r4, #12]
 800e420:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e424:	81a3      	strh	r3, [r4, #12]
 800e426:	2300      	movs	r3, #0
 800e428:	6063      	str	r3, [r4, #4]
 800e42a:	6923      	ldr	r3, [r4, #16]
 800e42c:	6023      	str	r3, [r4, #0]
 800e42e:	89a3      	ldrh	r3, [r4, #12]
 800e430:	f043 0308 	orr.w	r3, r3, #8
 800e434:	81a3      	strh	r3, [r4, #12]
 800e436:	6923      	ldr	r3, [r4, #16]
 800e438:	b94b      	cbnz	r3, 800e44e <__swsetup_r+0x9a>
 800e43a:	89a3      	ldrh	r3, [r4, #12]
 800e43c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e444:	d003      	beq.n	800e44e <__swsetup_r+0x9a>
 800e446:	4621      	mov	r1, r4
 800e448:	4630      	mov	r0, r6
 800e44a:	f000 fa09 	bl	800e860 <__smakebuf_r>
 800e44e:	89a0      	ldrh	r0, [r4, #12]
 800e450:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e454:	f010 0301 	ands.w	r3, r0, #1
 800e458:	d00a      	beq.n	800e470 <__swsetup_r+0xbc>
 800e45a:	2300      	movs	r3, #0
 800e45c:	60a3      	str	r3, [r4, #8]
 800e45e:	6963      	ldr	r3, [r4, #20]
 800e460:	425b      	negs	r3, r3
 800e462:	61a3      	str	r3, [r4, #24]
 800e464:	6923      	ldr	r3, [r4, #16]
 800e466:	b943      	cbnz	r3, 800e47a <__swsetup_r+0xc6>
 800e468:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e46c:	d1ba      	bne.n	800e3e4 <__swsetup_r+0x30>
 800e46e:	bd70      	pop	{r4, r5, r6, pc}
 800e470:	0781      	lsls	r1, r0, #30
 800e472:	bf58      	it	pl
 800e474:	6963      	ldrpl	r3, [r4, #20]
 800e476:	60a3      	str	r3, [r4, #8]
 800e478:	e7f4      	b.n	800e464 <__swsetup_r+0xb0>
 800e47a:	2000      	movs	r0, #0
 800e47c:	e7f7      	b.n	800e46e <__swsetup_r+0xba>
 800e47e:	bf00      	nop
 800e480:	20000164 	.word	0x20000164
 800e484:	0800ef04 	.word	0x0800ef04
 800e488:	0800ef24 	.word	0x0800ef24
 800e48c:	0800eee4 	.word	0x0800eee4

0800e490 <abort>:
 800e490:	b508      	push	{r3, lr}
 800e492:	2006      	movs	r0, #6
 800e494:	f000 fa4c 	bl	800e930 <raise>
 800e498:	2001      	movs	r0, #1
 800e49a:	f7f3 fba5 	bl	8001be8 <_exit>
	...

0800e4a0 <__sflush_r>:
 800e4a0:	898a      	ldrh	r2, [r1, #12]
 800e4a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4a6:	4605      	mov	r5, r0
 800e4a8:	0710      	lsls	r0, r2, #28
 800e4aa:	460c      	mov	r4, r1
 800e4ac:	d458      	bmi.n	800e560 <__sflush_r+0xc0>
 800e4ae:	684b      	ldr	r3, [r1, #4]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	dc05      	bgt.n	800e4c0 <__sflush_r+0x20>
 800e4b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	dc02      	bgt.n	800e4c0 <__sflush_r+0x20>
 800e4ba:	2000      	movs	r0, #0
 800e4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e4c2:	2e00      	cmp	r6, #0
 800e4c4:	d0f9      	beq.n	800e4ba <__sflush_r+0x1a>
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e4cc:	682f      	ldr	r7, [r5, #0]
 800e4ce:	602b      	str	r3, [r5, #0]
 800e4d0:	d032      	beq.n	800e538 <__sflush_r+0x98>
 800e4d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e4d4:	89a3      	ldrh	r3, [r4, #12]
 800e4d6:	075a      	lsls	r2, r3, #29
 800e4d8:	d505      	bpl.n	800e4e6 <__sflush_r+0x46>
 800e4da:	6863      	ldr	r3, [r4, #4]
 800e4dc:	1ac0      	subs	r0, r0, r3
 800e4de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e4e0:	b10b      	cbz	r3, 800e4e6 <__sflush_r+0x46>
 800e4e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e4e4:	1ac0      	subs	r0, r0, r3
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	4602      	mov	r2, r0
 800e4ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e4ec:	6a21      	ldr	r1, [r4, #32]
 800e4ee:	4628      	mov	r0, r5
 800e4f0:	47b0      	blx	r6
 800e4f2:	1c43      	adds	r3, r0, #1
 800e4f4:	89a3      	ldrh	r3, [r4, #12]
 800e4f6:	d106      	bne.n	800e506 <__sflush_r+0x66>
 800e4f8:	6829      	ldr	r1, [r5, #0]
 800e4fa:	291d      	cmp	r1, #29
 800e4fc:	d82c      	bhi.n	800e558 <__sflush_r+0xb8>
 800e4fe:	4a2a      	ldr	r2, [pc, #168]	; (800e5a8 <__sflush_r+0x108>)
 800e500:	40ca      	lsrs	r2, r1
 800e502:	07d6      	lsls	r6, r2, #31
 800e504:	d528      	bpl.n	800e558 <__sflush_r+0xb8>
 800e506:	2200      	movs	r2, #0
 800e508:	6062      	str	r2, [r4, #4]
 800e50a:	04d9      	lsls	r1, r3, #19
 800e50c:	6922      	ldr	r2, [r4, #16]
 800e50e:	6022      	str	r2, [r4, #0]
 800e510:	d504      	bpl.n	800e51c <__sflush_r+0x7c>
 800e512:	1c42      	adds	r2, r0, #1
 800e514:	d101      	bne.n	800e51a <__sflush_r+0x7a>
 800e516:	682b      	ldr	r3, [r5, #0]
 800e518:	b903      	cbnz	r3, 800e51c <__sflush_r+0x7c>
 800e51a:	6560      	str	r0, [r4, #84]	; 0x54
 800e51c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e51e:	602f      	str	r7, [r5, #0]
 800e520:	2900      	cmp	r1, #0
 800e522:	d0ca      	beq.n	800e4ba <__sflush_r+0x1a>
 800e524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e528:	4299      	cmp	r1, r3
 800e52a:	d002      	beq.n	800e532 <__sflush_r+0x92>
 800e52c:	4628      	mov	r0, r5
 800e52e:	f7ff fc49 	bl	800ddc4 <_free_r>
 800e532:	2000      	movs	r0, #0
 800e534:	6360      	str	r0, [r4, #52]	; 0x34
 800e536:	e7c1      	b.n	800e4bc <__sflush_r+0x1c>
 800e538:	6a21      	ldr	r1, [r4, #32]
 800e53a:	2301      	movs	r3, #1
 800e53c:	4628      	mov	r0, r5
 800e53e:	47b0      	blx	r6
 800e540:	1c41      	adds	r1, r0, #1
 800e542:	d1c7      	bne.n	800e4d4 <__sflush_r+0x34>
 800e544:	682b      	ldr	r3, [r5, #0]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d0c4      	beq.n	800e4d4 <__sflush_r+0x34>
 800e54a:	2b1d      	cmp	r3, #29
 800e54c:	d001      	beq.n	800e552 <__sflush_r+0xb2>
 800e54e:	2b16      	cmp	r3, #22
 800e550:	d101      	bne.n	800e556 <__sflush_r+0xb6>
 800e552:	602f      	str	r7, [r5, #0]
 800e554:	e7b1      	b.n	800e4ba <__sflush_r+0x1a>
 800e556:	89a3      	ldrh	r3, [r4, #12]
 800e558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e55c:	81a3      	strh	r3, [r4, #12]
 800e55e:	e7ad      	b.n	800e4bc <__sflush_r+0x1c>
 800e560:	690f      	ldr	r7, [r1, #16]
 800e562:	2f00      	cmp	r7, #0
 800e564:	d0a9      	beq.n	800e4ba <__sflush_r+0x1a>
 800e566:	0793      	lsls	r3, r2, #30
 800e568:	680e      	ldr	r6, [r1, #0]
 800e56a:	bf08      	it	eq
 800e56c:	694b      	ldreq	r3, [r1, #20]
 800e56e:	600f      	str	r7, [r1, #0]
 800e570:	bf18      	it	ne
 800e572:	2300      	movne	r3, #0
 800e574:	eba6 0807 	sub.w	r8, r6, r7
 800e578:	608b      	str	r3, [r1, #8]
 800e57a:	f1b8 0f00 	cmp.w	r8, #0
 800e57e:	dd9c      	ble.n	800e4ba <__sflush_r+0x1a>
 800e580:	6a21      	ldr	r1, [r4, #32]
 800e582:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e584:	4643      	mov	r3, r8
 800e586:	463a      	mov	r2, r7
 800e588:	4628      	mov	r0, r5
 800e58a:	47b0      	blx	r6
 800e58c:	2800      	cmp	r0, #0
 800e58e:	dc06      	bgt.n	800e59e <__sflush_r+0xfe>
 800e590:	89a3      	ldrh	r3, [r4, #12]
 800e592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e596:	81a3      	strh	r3, [r4, #12]
 800e598:	f04f 30ff 	mov.w	r0, #4294967295
 800e59c:	e78e      	b.n	800e4bc <__sflush_r+0x1c>
 800e59e:	4407      	add	r7, r0
 800e5a0:	eba8 0800 	sub.w	r8, r8, r0
 800e5a4:	e7e9      	b.n	800e57a <__sflush_r+0xda>
 800e5a6:	bf00      	nop
 800e5a8:	20400001 	.word	0x20400001

0800e5ac <_fflush_r>:
 800e5ac:	b538      	push	{r3, r4, r5, lr}
 800e5ae:	690b      	ldr	r3, [r1, #16]
 800e5b0:	4605      	mov	r5, r0
 800e5b2:	460c      	mov	r4, r1
 800e5b4:	b913      	cbnz	r3, 800e5bc <_fflush_r+0x10>
 800e5b6:	2500      	movs	r5, #0
 800e5b8:	4628      	mov	r0, r5
 800e5ba:	bd38      	pop	{r3, r4, r5, pc}
 800e5bc:	b118      	cbz	r0, 800e5c6 <_fflush_r+0x1a>
 800e5be:	6983      	ldr	r3, [r0, #24]
 800e5c0:	b90b      	cbnz	r3, 800e5c6 <_fflush_r+0x1a>
 800e5c2:	f000 f887 	bl	800e6d4 <__sinit>
 800e5c6:	4b14      	ldr	r3, [pc, #80]	; (800e618 <_fflush_r+0x6c>)
 800e5c8:	429c      	cmp	r4, r3
 800e5ca:	d11b      	bne.n	800e604 <_fflush_r+0x58>
 800e5cc:	686c      	ldr	r4, [r5, #4]
 800e5ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d0ef      	beq.n	800e5b6 <_fflush_r+0xa>
 800e5d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e5d8:	07d0      	lsls	r0, r2, #31
 800e5da:	d404      	bmi.n	800e5e6 <_fflush_r+0x3a>
 800e5dc:	0599      	lsls	r1, r3, #22
 800e5de:	d402      	bmi.n	800e5e6 <_fflush_r+0x3a>
 800e5e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5e2:	f000 f915 	bl	800e810 <__retarget_lock_acquire_recursive>
 800e5e6:	4628      	mov	r0, r5
 800e5e8:	4621      	mov	r1, r4
 800e5ea:	f7ff ff59 	bl	800e4a0 <__sflush_r>
 800e5ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5f0:	07da      	lsls	r2, r3, #31
 800e5f2:	4605      	mov	r5, r0
 800e5f4:	d4e0      	bmi.n	800e5b8 <_fflush_r+0xc>
 800e5f6:	89a3      	ldrh	r3, [r4, #12]
 800e5f8:	059b      	lsls	r3, r3, #22
 800e5fa:	d4dd      	bmi.n	800e5b8 <_fflush_r+0xc>
 800e5fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5fe:	f000 f908 	bl	800e812 <__retarget_lock_release_recursive>
 800e602:	e7d9      	b.n	800e5b8 <_fflush_r+0xc>
 800e604:	4b05      	ldr	r3, [pc, #20]	; (800e61c <_fflush_r+0x70>)
 800e606:	429c      	cmp	r4, r3
 800e608:	d101      	bne.n	800e60e <_fflush_r+0x62>
 800e60a:	68ac      	ldr	r4, [r5, #8]
 800e60c:	e7df      	b.n	800e5ce <_fflush_r+0x22>
 800e60e:	4b04      	ldr	r3, [pc, #16]	; (800e620 <_fflush_r+0x74>)
 800e610:	429c      	cmp	r4, r3
 800e612:	bf08      	it	eq
 800e614:	68ec      	ldreq	r4, [r5, #12]
 800e616:	e7da      	b.n	800e5ce <_fflush_r+0x22>
 800e618:	0800ef04 	.word	0x0800ef04
 800e61c:	0800ef24 	.word	0x0800ef24
 800e620:	0800eee4 	.word	0x0800eee4

0800e624 <std>:
 800e624:	2300      	movs	r3, #0
 800e626:	b510      	push	{r4, lr}
 800e628:	4604      	mov	r4, r0
 800e62a:	e9c0 3300 	strd	r3, r3, [r0]
 800e62e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e632:	6083      	str	r3, [r0, #8]
 800e634:	8181      	strh	r1, [r0, #12]
 800e636:	6643      	str	r3, [r0, #100]	; 0x64
 800e638:	81c2      	strh	r2, [r0, #14]
 800e63a:	6183      	str	r3, [r0, #24]
 800e63c:	4619      	mov	r1, r3
 800e63e:	2208      	movs	r2, #8
 800e640:	305c      	adds	r0, #92	; 0x5c
 800e642:	f7fd fd1f 	bl	800c084 <memset>
 800e646:	4b05      	ldr	r3, [pc, #20]	; (800e65c <std+0x38>)
 800e648:	6263      	str	r3, [r4, #36]	; 0x24
 800e64a:	4b05      	ldr	r3, [pc, #20]	; (800e660 <std+0x3c>)
 800e64c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e64e:	4b05      	ldr	r3, [pc, #20]	; (800e664 <std+0x40>)
 800e650:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e652:	4b05      	ldr	r3, [pc, #20]	; (800e668 <std+0x44>)
 800e654:	6224      	str	r4, [r4, #32]
 800e656:	6323      	str	r3, [r4, #48]	; 0x30
 800e658:	bd10      	pop	{r4, pc}
 800e65a:	bf00      	nop
 800e65c:	0800e969 	.word	0x0800e969
 800e660:	0800e98b 	.word	0x0800e98b
 800e664:	0800e9c3 	.word	0x0800e9c3
 800e668:	0800e9e7 	.word	0x0800e9e7

0800e66c <_cleanup_r>:
 800e66c:	4901      	ldr	r1, [pc, #4]	; (800e674 <_cleanup_r+0x8>)
 800e66e:	f000 b8af 	b.w	800e7d0 <_fwalk_reent>
 800e672:	bf00      	nop
 800e674:	0800e5ad 	.word	0x0800e5ad

0800e678 <__sfmoreglue>:
 800e678:	b570      	push	{r4, r5, r6, lr}
 800e67a:	2268      	movs	r2, #104	; 0x68
 800e67c:	1e4d      	subs	r5, r1, #1
 800e67e:	4355      	muls	r5, r2
 800e680:	460e      	mov	r6, r1
 800e682:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e686:	f7ff fc09 	bl	800de9c <_malloc_r>
 800e68a:	4604      	mov	r4, r0
 800e68c:	b140      	cbz	r0, 800e6a0 <__sfmoreglue+0x28>
 800e68e:	2100      	movs	r1, #0
 800e690:	e9c0 1600 	strd	r1, r6, [r0]
 800e694:	300c      	adds	r0, #12
 800e696:	60a0      	str	r0, [r4, #8]
 800e698:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e69c:	f7fd fcf2 	bl	800c084 <memset>
 800e6a0:	4620      	mov	r0, r4
 800e6a2:	bd70      	pop	{r4, r5, r6, pc}

0800e6a4 <__sfp_lock_acquire>:
 800e6a4:	4801      	ldr	r0, [pc, #4]	; (800e6ac <__sfp_lock_acquire+0x8>)
 800e6a6:	f000 b8b3 	b.w	800e810 <__retarget_lock_acquire_recursive>
 800e6aa:	bf00      	nop
 800e6ac:	20000d69 	.word	0x20000d69

0800e6b0 <__sfp_lock_release>:
 800e6b0:	4801      	ldr	r0, [pc, #4]	; (800e6b8 <__sfp_lock_release+0x8>)
 800e6b2:	f000 b8ae 	b.w	800e812 <__retarget_lock_release_recursive>
 800e6b6:	bf00      	nop
 800e6b8:	20000d69 	.word	0x20000d69

0800e6bc <__sinit_lock_acquire>:
 800e6bc:	4801      	ldr	r0, [pc, #4]	; (800e6c4 <__sinit_lock_acquire+0x8>)
 800e6be:	f000 b8a7 	b.w	800e810 <__retarget_lock_acquire_recursive>
 800e6c2:	bf00      	nop
 800e6c4:	20000d6a 	.word	0x20000d6a

0800e6c8 <__sinit_lock_release>:
 800e6c8:	4801      	ldr	r0, [pc, #4]	; (800e6d0 <__sinit_lock_release+0x8>)
 800e6ca:	f000 b8a2 	b.w	800e812 <__retarget_lock_release_recursive>
 800e6ce:	bf00      	nop
 800e6d0:	20000d6a 	.word	0x20000d6a

0800e6d4 <__sinit>:
 800e6d4:	b510      	push	{r4, lr}
 800e6d6:	4604      	mov	r4, r0
 800e6d8:	f7ff fff0 	bl	800e6bc <__sinit_lock_acquire>
 800e6dc:	69a3      	ldr	r3, [r4, #24]
 800e6de:	b11b      	cbz	r3, 800e6e8 <__sinit+0x14>
 800e6e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6e4:	f7ff bff0 	b.w	800e6c8 <__sinit_lock_release>
 800e6e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e6ec:	6523      	str	r3, [r4, #80]	; 0x50
 800e6ee:	4b13      	ldr	r3, [pc, #76]	; (800e73c <__sinit+0x68>)
 800e6f0:	4a13      	ldr	r2, [pc, #76]	; (800e740 <__sinit+0x6c>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800e6f6:	42a3      	cmp	r3, r4
 800e6f8:	bf04      	itt	eq
 800e6fa:	2301      	moveq	r3, #1
 800e6fc:	61a3      	streq	r3, [r4, #24]
 800e6fe:	4620      	mov	r0, r4
 800e700:	f000 f820 	bl	800e744 <__sfp>
 800e704:	6060      	str	r0, [r4, #4]
 800e706:	4620      	mov	r0, r4
 800e708:	f000 f81c 	bl	800e744 <__sfp>
 800e70c:	60a0      	str	r0, [r4, #8]
 800e70e:	4620      	mov	r0, r4
 800e710:	f000 f818 	bl	800e744 <__sfp>
 800e714:	2200      	movs	r2, #0
 800e716:	60e0      	str	r0, [r4, #12]
 800e718:	2104      	movs	r1, #4
 800e71a:	6860      	ldr	r0, [r4, #4]
 800e71c:	f7ff ff82 	bl	800e624 <std>
 800e720:	68a0      	ldr	r0, [r4, #8]
 800e722:	2201      	movs	r2, #1
 800e724:	2109      	movs	r1, #9
 800e726:	f7ff ff7d 	bl	800e624 <std>
 800e72a:	68e0      	ldr	r0, [r4, #12]
 800e72c:	2202      	movs	r2, #2
 800e72e:	2112      	movs	r1, #18
 800e730:	f7ff ff78 	bl	800e624 <std>
 800e734:	2301      	movs	r3, #1
 800e736:	61a3      	str	r3, [r4, #24]
 800e738:	e7d2      	b.n	800e6e0 <__sinit+0xc>
 800e73a:	bf00      	nop
 800e73c:	0800eb68 	.word	0x0800eb68
 800e740:	0800e66d 	.word	0x0800e66d

0800e744 <__sfp>:
 800e744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e746:	4607      	mov	r7, r0
 800e748:	f7ff ffac 	bl	800e6a4 <__sfp_lock_acquire>
 800e74c:	4b1e      	ldr	r3, [pc, #120]	; (800e7c8 <__sfp+0x84>)
 800e74e:	681e      	ldr	r6, [r3, #0]
 800e750:	69b3      	ldr	r3, [r6, #24]
 800e752:	b913      	cbnz	r3, 800e75a <__sfp+0x16>
 800e754:	4630      	mov	r0, r6
 800e756:	f7ff ffbd 	bl	800e6d4 <__sinit>
 800e75a:	3648      	adds	r6, #72	; 0x48
 800e75c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e760:	3b01      	subs	r3, #1
 800e762:	d503      	bpl.n	800e76c <__sfp+0x28>
 800e764:	6833      	ldr	r3, [r6, #0]
 800e766:	b30b      	cbz	r3, 800e7ac <__sfp+0x68>
 800e768:	6836      	ldr	r6, [r6, #0]
 800e76a:	e7f7      	b.n	800e75c <__sfp+0x18>
 800e76c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e770:	b9d5      	cbnz	r5, 800e7a8 <__sfp+0x64>
 800e772:	4b16      	ldr	r3, [pc, #88]	; (800e7cc <__sfp+0x88>)
 800e774:	60e3      	str	r3, [r4, #12]
 800e776:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e77a:	6665      	str	r5, [r4, #100]	; 0x64
 800e77c:	f000 f847 	bl	800e80e <__retarget_lock_init_recursive>
 800e780:	f7ff ff96 	bl	800e6b0 <__sfp_lock_release>
 800e784:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e788:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e78c:	6025      	str	r5, [r4, #0]
 800e78e:	61a5      	str	r5, [r4, #24]
 800e790:	2208      	movs	r2, #8
 800e792:	4629      	mov	r1, r5
 800e794:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e798:	f7fd fc74 	bl	800c084 <memset>
 800e79c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e7a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e7a4:	4620      	mov	r0, r4
 800e7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7a8:	3468      	adds	r4, #104	; 0x68
 800e7aa:	e7d9      	b.n	800e760 <__sfp+0x1c>
 800e7ac:	2104      	movs	r1, #4
 800e7ae:	4638      	mov	r0, r7
 800e7b0:	f7ff ff62 	bl	800e678 <__sfmoreglue>
 800e7b4:	4604      	mov	r4, r0
 800e7b6:	6030      	str	r0, [r6, #0]
 800e7b8:	2800      	cmp	r0, #0
 800e7ba:	d1d5      	bne.n	800e768 <__sfp+0x24>
 800e7bc:	f7ff ff78 	bl	800e6b0 <__sfp_lock_release>
 800e7c0:	230c      	movs	r3, #12
 800e7c2:	603b      	str	r3, [r7, #0]
 800e7c4:	e7ee      	b.n	800e7a4 <__sfp+0x60>
 800e7c6:	bf00      	nop
 800e7c8:	0800eb68 	.word	0x0800eb68
 800e7cc:	ffff0001 	.word	0xffff0001

0800e7d0 <_fwalk_reent>:
 800e7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7d4:	4606      	mov	r6, r0
 800e7d6:	4688      	mov	r8, r1
 800e7d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e7dc:	2700      	movs	r7, #0
 800e7de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e7e2:	f1b9 0901 	subs.w	r9, r9, #1
 800e7e6:	d505      	bpl.n	800e7f4 <_fwalk_reent+0x24>
 800e7e8:	6824      	ldr	r4, [r4, #0]
 800e7ea:	2c00      	cmp	r4, #0
 800e7ec:	d1f7      	bne.n	800e7de <_fwalk_reent+0xe>
 800e7ee:	4638      	mov	r0, r7
 800e7f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7f4:	89ab      	ldrh	r3, [r5, #12]
 800e7f6:	2b01      	cmp	r3, #1
 800e7f8:	d907      	bls.n	800e80a <_fwalk_reent+0x3a>
 800e7fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e7fe:	3301      	adds	r3, #1
 800e800:	d003      	beq.n	800e80a <_fwalk_reent+0x3a>
 800e802:	4629      	mov	r1, r5
 800e804:	4630      	mov	r0, r6
 800e806:	47c0      	blx	r8
 800e808:	4307      	orrs	r7, r0
 800e80a:	3568      	adds	r5, #104	; 0x68
 800e80c:	e7e9      	b.n	800e7e2 <_fwalk_reent+0x12>

0800e80e <__retarget_lock_init_recursive>:
 800e80e:	4770      	bx	lr

0800e810 <__retarget_lock_acquire_recursive>:
 800e810:	4770      	bx	lr

0800e812 <__retarget_lock_release_recursive>:
 800e812:	4770      	bx	lr

0800e814 <__swhatbuf_r>:
 800e814:	b570      	push	{r4, r5, r6, lr}
 800e816:	460e      	mov	r6, r1
 800e818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e81c:	2900      	cmp	r1, #0
 800e81e:	b096      	sub	sp, #88	; 0x58
 800e820:	4614      	mov	r4, r2
 800e822:	461d      	mov	r5, r3
 800e824:	da08      	bge.n	800e838 <__swhatbuf_r+0x24>
 800e826:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e82a:	2200      	movs	r2, #0
 800e82c:	602a      	str	r2, [r5, #0]
 800e82e:	061a      	lsls	r2, r3, #24
 800e830:	d410      	bmi.n	800e854 <__swhatbuf_r+0x40>
 800e832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e836:	e00e      	b.n	800e856 <__swhatbuf_r+0x42>
 800e838:	466a      	mov	r2, sp
 800e83a:	f000 f8fb 	bl	800ea34 <_fstat_r>
 800e83e:	2800      	cmp	r0, #0
 800e840:	dbf1      	blt.n	800e826 <__swhatbuf_r+0x12>
 800e842:	9a01      	ldr	r2, [sp, #4]
 800e844:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e848:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e84c:	425a      	negs	r2, r3
 800e84e:	415a      	adcs	r2, r3
 800e850:	602a      	str	r2, [r5, #0]
 800e852:	e7ee      	b.n	800e832 <__swhatbuf_r+0x1e>
 800e854:	2340      	movs	r3, #64	; 0x40
 800e856:	2000      	movs	r0, #0
 800e858:	6023      	str	r3, [r4, #0]
 800e85a:	b016      	add	sp, #88	; 0x58
 800e85c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e860 <__smakebuf_r>:
 800e860:	898b      	ldrh	r3, [r1, #12]
 800e862:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e864:	079d      	lsls	r5, r3, #30
 800e866:	4606      	mov	r6, r0
 800e868:	460c      	mov	r4, r1
 800e86a:	d507      	bpl.n	800e87c <__smakebuf_r+0x1c>
 800e86c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e870:	6023      	str	r3, [r4, #0]
 800e872:	6123      	str	r3, [r4, #16]
 800e874:	2301      	movs	r3, #1
 800e876:	6163      	str	r3, [r4, #20]
 800e878:	b002      	add	sp, #8
 800e87a:	bd70      	pop	{r4, r5, r6, pc}
 800e87c:	ab01      	add	r3, sp, #4
 800e87e:	466a      	mov	r2, sp
 800e880:	f7ff ffc8 	bl	800e814 <__swhatbuf_r>
 800e884:	9900      	ldr	r1, [sp, #0]
 800e886:	4605      	mov	r5, r0
 800e888:	4630      	mov	r0, r6
 800e88a:	f7ff fb07 	bl	800de9c <_malloc_r>
 800e88e:	b948      	cbnz	r0, 800e8a4 <__smakebuf_r+0x44>
 800e890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e894:	059a      	lsls	r2, r3, #22
 800e896:	d4ef      	bmi.n	800e878 <__smakebuf_r+0x18>
 800e898:	f023 0303 	bic.w	r3, r3, #3
 800e89c:	f043 0302 	orr.w	r3, r3, #2
 800e8a0:	81a3      	strh	r3, [r4, #12]
 800e8a2:	e7e3      	b.n	800e86c <__smakebuf_r+0xc>
 800e8a4:	4b0d      	ldr	r3, [pc, #52]	; (800e8dc <__smakebuf_r+0x7c>)
 800e8a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800e8a8:	89a3      	ldrh	r3, [r4, #12]
 800e8aa:	6020      	str	r0, [r4, #0]
 800e8ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8b0:	81a3      	strh	r3, [r4, #12]
 800e8b2:	9b00      	ldr	r3, [sp, #0]
 800e8b4:	6163      	str	r3, [r4, #20]
 800e8b6:	9b01      	ldr	r3, [sp, #4]
 800e8b8:	6120      	str	r0, [r4, #16]
 800e8ba:	b15b      	cbz	r3, 800e8d4 <__smakebuf_r+0x74>
 800e8bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8c0:	4630      	mov	r0, r6
 800e8c2:	f000 f8c9 	bl	800ea58 <_isatty_r>
 800e8c6:	b128      	cbz	r0, 800e8d4 <__smakebuf_r+0x74>
 800e8c8:	89a3      	ldrh	r3, [r4, #12]
 800e8ca:	f023 0303 	bic.w	r3, r3, #3
 800e8ce:	f043 0301 	orr.w	r3, r3, #1
 800e8d2:	81a3      	strh	r3, [r4, #12]
 800e8d4:	89a0      	ldrh	r0, [r4, #12]
 800e8d6:	4305      	orrs	r5, r0
 800e8d8:	81a5      	strh	r5, [r4, #12]
 800e8da:	e7cd      	b.n	800e878 <__smakebuf_r+0x18>
 800e8dc:	0800e66d 	.word	0x0800e66d

0800e8e0 <_raise_r>:
 800e8e0:	291f      	cmp	r1, #31
 800e8e2:	b538      	push	{r3, r4, r5, lr}
 800e8e4:	4604      	mov	r4, r0
 800e8e6:	460d      	mov	r5, r1
 800e8e8:	d904      	bls.n	800e8f4 <_raise_r+0x14>
 800e8ea:	2316      	movs	r3, #22
 800e8ec:	6003      	str	r3, [r0, #0]
 800e8ee:	f04f 30ff 	mov.w	r0, #4294967295
 800e8f2:	bd38      	pop	{r3, r4, r5, pc}
 800e8f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e8f6:	b112      	cbz	r2, 800e8fe <_raise_r+0x1e>
 800e8f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e8fc:	b94b      	cbnz	r3, 800e912 <_raise_r+0x32>
 800e8fe:	4620      	mov	r0, r4
 800e900:	f000 f830 	bl	800e964 <_getpid_r>
 800e904:	462a      	mov	r2, r5
 800e906:	4601      	mov	r1, r0
 800e908:	4620      	mov	r0, r4
 800e90a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e90e:	f000 b817 	b.w	800e940 <_kill_r>
 800e912:	2b01      	cmp	r3, #1
 800e914:	d00a      	beq.n	800e92c <_raise_r+0x4c>
 800e916:	1c59      	adds	r1, r3, #1
 800e918:	d103      	bne.n	800e922 <_raise_r+0x42>
 800e91a:	2316      	movs	r3, #22
 800e91c:	6003      	str	r3, [r0, #0]
 800e91e:	2001      	movs	r0, #1
 800e920:	e7e7      	b.n	800e8f2 <_raise_r+0x12>
 800e922:	2400      	movs	r4, #0
 800e924:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e928:	4628      	mov	r0, r5
 800e92a:	4798      	blx	r3
 800e92c:	2000      	movs	r0, #0
 800e92e:	e7e0      	b.n	800e8f2 <_raise_r+0x12>

0800e930 <raise>:
 800e930:	4b02      	ldr	r3, [pc, #8]	; (800e93c <raise+0xc>)
 800e932:	4601      	mov	r1, r0
 800e934:	6818      	ldr	r0, [r3, #0]
 800e936:	f7ff bfd3 	b.w	800e8e0 <_raise_r>
 800e93a:	bf00      	nop
 800e93c:	20000164 	.word	0x20000164

0800e940 <_kill_r>:
 800e940:	b538      	push	{r3, r4, r5, lr}
 800e942:	4d07      	ldr	r5, [pc, #28]	; (800e960 <_kill_r+0x20>)
 800e944:	2300      	movs	r3, #0
 800e946:	4604      	mov	r4, r0
 800e948:	4608      	mov	r0, r1
 800e94a:	4611      	mov	r1, r2
 800e94c:	602b      	str	r3, [r5, #0]
 800e94e:	f7f3 f93b 	bl	8001bc8 <_kill>
 800e952:	1c43      	adds	r3, r0, #1
 800e954:	d102      	bne.n	800e95c <_kill_r+0x1c>
 800e956:	682b      	ldr	r3, [r5, #0]
 800e958:	b103      	cbz	r3, 800e95c <_kill_r+0x1c>
 800e95a:	6023      	str	r3, [r4, #0]
 800e95c:	bd38      	pop	{r3, r4, r5, pc}
 800e95e:	bf00      	nop
 800e960:	20000d64 	.word	0x20000d64

0800e964 <_getpid_r>:
 800e964:	f7f3 b928 	b.w	8001bb8 <_getpid>

0800e968 <__sread>:
 800e968:	b510      	push	{r4, lr}
 800e96a:	460c      	mov	r4, r1
 800e96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e970:	f000 f894 	bl	800ea9c <_read_r>
 800e974:	2800      	cmp	r0, #0
 800e976:	bfab      	itete	ge
 800e978:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e97a:	89a3      	ldrhlt	r3, [r4, #12]
 800e97c:	181b      	addge	r3, r3, r0
 800e97e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e982:	bfac      	ite	ge
 800e984:	6563      	strge	r3, [r4, #84]	; 0x54
 800e986:	81a3      	strhlt	r3, [r4, #12]
 800e988:	bd10      	pop	{r4, pc}

0800e98a <__swrite>:
 800e98a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e98e:	461f      	mov	r7, r3
 800e990:	898b      	ldrh	r3, [r1, #12]
 800e992:	05db      	lsls	r3, r3, #23
 800e994:	4605      	mov	r5, r0
 800e996:	460c      	mov	r4, r1
 800e998:	4616      	mov	r6, r2
 800e99a:	d505      	bpl.n	800e9a8 <__swrite+0x1e>
 800e99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9a0:	2302      	movs	r3, #2
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	f000 f868 	bl	800ea78 <_lseek_r>
 800e9a8:	89a3      	ldrh	r3, [r4, #12]
 800e9aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e9b2:	81a3      	strh	r3, [r4, #12]
 800e9b4:	4632      	mov	r2, r6
 800e9b6:	463b      	mov	r3, r7
 800e9b8:	4628      	mov	r0, r5
 800e9ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9be:	f000 b817 	b.w	800e9f0 <_write_r>

0800e9c2 <__sseek>:
 800e9c2:	b510      	push	{r4, lr}
 800e9c4:	460c      	mov	r4, r1
 800e9c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9ca:	f000 f855 	bl	800ea78 <_lseek_r>
 800e9ce:	1c43      	adds	r3, r0, #1
 800e9d0:	89a3      	ldrh	r3, [r4, #12]
 800e9d2:	bf15      	itete	ne
 800e9d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e9d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e9da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e9de:	81a3      	strheq	r3, [r4, #12]
 800e9e0:	bf18      	it	ne
 800e9e2:	81a3      	strhne	r3, [r4, #12]
 800e9e4:	bd10      	pop	{r4, pc}

0800e9e6 <__sclose>:
 800e9e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9ea:	f000 b813 	b.w	800ea14 <_close_r>
	...

0800e9f0 <_write_r>:
 800e9f0:	b538      	push	{r3, r4, r5, lr}
 800e9f2:	4d07      	ldr	r5, [pc, #28]	; (800ea10 <_write_r+0x20>)
 800e9f4:	4604      	mov	r4, r0
 800e9f6:	4608      	mov	r0, r1
 800e9f8:	4611      	mov	r1, r2
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	602a      	str	r2, [r5, #0]
 800e9fe:	461a      	mov	r2, r3
 800ea00:	f7f3 f919 	bl	8001c36 <_write>
 800ea04:	1c43      	adds	r3, r0, #1
 800ea06:	d102      	bne.n	800ea0e <_write_r+0x1e>
 800ea08:	682b      	ldr	r3, [r5, #0]
 800ea0a:	b103      	cbz	r3, 800ea0e <_write_r+0x1e>
 800ea0c:	6023      	str	r3, [r4, #0]
 800ea0e:	bd38      	pop	{r3, r4, r5, pc}
 800ea10:	20000d64 	.word	0x20000d64

0800ea14 <_close_r>:
 800ea14:	b538      	push	{r3, r4, r5, lr}
 800ea16:	4d06      	ldr	r5, [pc, #24]	; (800ea30 <_close_r+0x1c>)
 800ea18:	2300      	movs	r3, #0
 800ea1a:	4604      	mov	r4, r0
 800ea1c:	4608      	mov	r0, r1
 800ea1e:	602b      	str	r3, [r5, #0]
 800ea20:	f7f3 f925 	bl	8001c6e <_close>
 800ea24:	1c43      	adds	r3, r0, #1
 800ea26:	d102      	bne.n	800ea2e <_close_r+0x1a>
 800ea28:	682b      	ldr	r3, [r5, #0]
 800ea2a:	b103      	cbz	r3, 800ea2e <_close_r+0x1a>
 800ea2c:	6023      	str	r3, [r4, #0]
 800ea2e:	bd38      	pop	{r3, r4, r5, pc}
 800ea30:	20000d64 	.word	0x20000d64

0800ea34 <_fstat_r>:
 800ea34:	b538      	push	{r3, r4, r5, lr}
 800ea36:	4d07      	ldr	r5, [pc, #28]	; (800ea54 <_fstat_r+0x20>)
 800ea38:	2300      	movs	r3, #0
 800ea3a:	4604      	mov	r4, r0
 800ea3c:	4608      	mov	r0, r1
 800ea3e:	4611      	mov	r1, r2
 800ea40:	602b      	str	r3, [r5, #0]
 800ea42:	f7f3 f920 	bl	8001c86 <_fstat>
 800ea46:	1c43      	adds	r3, r0, #1
 800ea48:	d102      	bne.n	800ea50 <_fstat_r+0x1c>
 800ea4a:	682b      	ldr	r3, [r5, #0]
 800ea4c:	b103      	cbz	r3, 800ea50 <_fstat_r+0x1c>
 800ea4e:	6023      	str	r3, [r4, #0]
 800ea50:	bd38      	pop	{r3, r4, r5, pc}
 800ea52:	bf00      	nop
 800ea54:	20000d64 	.word	0x20000d64

0800ea58 <_isatty_r>:
 800ea58:	b538      	push	{r3, r4, r5, lr}
 800ea5a:	4d06      	ldr	r5, [pc, #24]	; (800ea74 <_isatty_r+0x1c>)
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	4604      	mov	r4, r0
 800ea60:	4608      	mov	r0, r1
 800ea62:	602b      	str	r3, [r5, #0]
 800ea64:	f7f3 f91f 	bl	8001ca6 <_isatty>
 800ea68:	1c43      	adds	r3, r0, #1
 800ea6a:	d102      	bne.n	800ea72 <_isatty_r+0x1a>
 800ea6c:	682b      	ldr	r3, [r5, #0]
 800ea6e:	b103      	cbz	r3, 800ea72 <_isatty_r+0x1a>
 800ea70:	6023      	str	r3, [r4, #0]
 800ea72:	bd38      	pop	{r3, r4, r5, pc}
 800ea74:	20000d64 	.word	0x20000d64

0800ea78 <_lseek_r>:
 800ea78:	b538      	push	{r3, r4, r5, lr}
 800ea7a:	4d07      	ldr	r5, [pc, #28]	; (800ea98 <_lseek_r+0x20>)
 800ea7c:	4604      	mov	r4, r0
 800ea7e:	4608      	mov	r0, r1
 800ea80:	4611      	mov	r1, r2
 800ea82:	2200      	movs	r2, #0
 800ea84:	602a      	str	r2, [r5, #0]
 800ea86:	461a      	mov	r2, r3
 800ea88:	f7f3 f918 	bl	8001cbc <_lseek>
 800ea8c:	1c43      	adds	r3, r0, #1
 800ea8e:	d102      	bne.n	800ea96 <_lseek_r+0x1e>
 800ea90:	682b      	ldr	r3, [r5, #0]
 800ea92:	b103      	cbz	r3, 800ea96 <_lseek_r+0x1e>
 800ea94:	6023      	str	r3, [r4, #0]
 800ea96:	bd38      	pop	{r3, r4, r5, pc}
 800ea98:	20000d64 	.word	0x20000d64

0800ea9c <_read_r>:
 800ea9c:	b538      	push	{r3, r4, r5, lr}
 800ea9e:	4d07      	ldr	r5, [pc, #28]	; (800eabc <_read_r+0x20>)
 800eaa0:	4604      	mov	r4, r0
 800eaa2:	4608      	mov	r0, r1
 800eaa4:	4611      	mov	r1, r2
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	602a      	str	r2, [r5, #0]
 800eaaa:	461a      	mov	r2, r3
 800eaac:	f7f3 f8a6 	bl	8001bfc <_read>
 800eab0:	1c43      	adds	r3, r0, #1
 800eab2:	d102      	bne.n	800eaba <_read_r+0x1e>
 800eab4:	682b      	ldr	r3, [r5, #0]
 800eab6:	b103      	cbz	r3, 800eaba <_read_r+0x1e>
 800eab8:	6023      	str	r3, [r4, #0]
 800eaba:	bd38      	pop	{r3, r4, r5, pc}
 800eabc:	20000d64 	.word	0x20000d64

0800eac0 <_init>:
 800eac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eac2:	bf00      	nop
 800eac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eac6:	bc08      	pop	{r3}
 800eac8:	469e      	mov	lr, r3
 800eaca:	4770      	bx	lr

0800eacc <_fini>:
 800eacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eace:	bf00      	nop
 800ead0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ead2:	bc08      	pop	{r3}
 800ead4:	469e      	mov	lr, r3
 800ead6:	4770      	bx	lr
