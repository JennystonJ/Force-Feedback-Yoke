
Force Feedback Yoke Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab90  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800ad18  0800ad18  0001ad18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ada8  0800ada8  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  0800ada8  0800ada8  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ada8  0800ada8  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ada8  0800ada8  0001ada8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adac  0800adac  0001adac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800adb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          00000a00  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b64  20000b64  00020164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cfb4  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c66  00000000  00000000  0003d148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017c0  00000000  00000000  00040db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001630  00000000  00000000  00042570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d3a  00000000  00000000  00043ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f006  00000000  00000000  000658da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf9f0  00000000  00000000  000848e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001442d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006400  00000000  00000000  00144320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000164 	.word	0x20000164
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ad00 	.word	0x0800ad00

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000168 	.word	0x20000168
 80001c4:	0800ad00 	.word	0x0800ad00

080001c8 <PIDInit>:

#include "pid.h"

static float Abs(float x);

void PIDInit(PID_t *pid) {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	pid->kP = 30;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4a0c      	ldr	r2, [pc, #48]	; (8000204 <PIDInit+0x3c>)
 80001d4:	601a      	str	r2, [r3, #0]
	pid->kI = 0;
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f04f 0200 	mov.w	r2, #0
 80001dc:	605a      	str	r2, [r3, #4]
	pid->kD = 0;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f04f 0200 	mov.w	r2, #0
 80001e4:	609a      	str	r2, [r3, #8]
	pid->integral = 0;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f04f 0200 	mov.w	r2, #0
 80001ec:	60da      	str	r2, [r3, #12]
	pid->preError = 0;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f04f 0200 	mov.w	r2, #0
 80001f4:	611a      	str	r2, [r3, #16]
}
 80001f6:	bf00      	nop
 80001f8:	370c      	adds	r7, #12
 80001fa:	46bd      	mov	sp, r7
 80001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	41f00000 	.word	0x41f00000

08000208 <ComputePID>:

float ComputePID(PID_t *pid, float setPoint, float actual) {
 8000208:	b580      	push	{r7, lr}
 800020a:	b088      	sub	sp, #32
 800020c:	af00      	add	r7, sp, #0
 800020e:	60f8      	str	r0, [r7, #12]
 8000210:	ed87 0a02 	vstr	s0, [r7, #8]
 8000214:	edc7 0a01 	vstr	s1, [r7, #4]
	float error = actual - setPoint;
 8000218:	ed97 7a01 	vldr	s14, [r7, #4]
 800021c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000224:	edc7 7a06 	vstr	s15, [r7, #24]

	//integrate only if error is large enough
	if(Abs(error) > PID_EPSILON) {
 8000228:	ed97 0a06 	vldr	s0, [r7, #24]
 800022c:	f000 f88c 	bl	8000348 <Abs>
 8000230:	eef0 7a40 	vmov.f32	s15, s0
 8000234:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800032c <ComputePID+0x124>
 8000238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800023c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000240:	dd0d      	ble.n	800025e <ComputePID+0x56>
		pid->integral += error*PID_DT;
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	ed93 7a03 	vldr	s14, [r3, #12]
 8000248:	edd7 7a06 	vldr	s15, [r7, #24]
 800024c:	eddf 6a38 	vldr	s13, [pc, #224]	; 8000330 <ComputePID+0x128>
 8000250:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	edc3 7a03 	vstr	s15, [r3, #12]
	}
	//constrain integral
	if(pid->integral > PID_I_MAX) {
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	edd3 7a03 	vldr	s15, [r3, #12]
 8000264:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800026c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000270:	dd04      	ble.n	800027c <ComputePID+0x74>
		pid->integral = PID_I_MAX;
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8000278:	60da      	str	r2, [r3, #12]
 800027a:	e00c      	b.n	8000296 <ComputePID+0x8e>
	}
	else if(pid->integral < PID_I_MIN) {
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000282:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 8000286:	eef4 7ac7 	vcmpe.f32	s15, s14
 800028a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800028e:	d502      	bpl.n	8000296 <ComputePID+0x8e>
		pid->integral = PID_I_MIN;
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	4a28      	ldr	r2, [pc, #160]	; (8000334 <ComputePID+0x12c>)
 8000294:	60da      	str	r2, [r3, #12]
	}

	float derivative = (error - pid->preError)/PID_DT;
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	edd3 7a04 	vldr	s15, [r3, #16]
 800029c:	ed97 7a06 	vldr	s14, [r7, #24]
 80002a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80002a4:	eddf 6a22 	vldr	s13, [pc, #136]	; 8000330 <ComputePID+0x128>
 80002a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002ac:	edc7 7a05 	vstr	s15, [r7, #20]

	float output = pid->kP*error + pid->kI*pid->integral + pid->kD*derivative;
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	ed93 7a00 	vldr	s14, [r3]
 80002b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80002ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	edd3 6a01 	vldr	s13, [r3, #4]
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80002ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80002ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	edd3 6a02 	vldr	s13, [r3, #8]
 80002d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80002dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80002e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80002e4:	edc7 7a07 	vstr	s15, [r7, #28]
	//constrain PID output
	if(output > PID_MAX) {
 80002e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80002ec:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000338 <ComputePID+0x130>
 80002f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80002f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002f8:	dd02      	ble.n	8000300 <ComputePID+0xf8>
		output = PID_MAX;
 80002fa:	4b10      	ldr	r3, [pc, #64]	; (800033c <ComputePID+0x134>)
 80002fc:	61fb      	str	r3, [r7, #28]
 80002fe:	e00a      	b.n	8000316 <ComputePID+0x10e>
	}
	else if(output < PID_MIN) {
 8000300:	edd7 7a07 	vldr	s15, [r7, #28]
 8000304:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000340 <ComputePID+0x138>
 8000308:	eef4 7ac7 	vcmpe.f32	s15, s14
 800030c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000310:	d501      	bpl.n	8000316 <ComputePID+0x10e>
		output = PID_MIN;
 8000312:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <ComputePID+0x13c>)
 8000314:	61fb      	str	r3, [r7, #28]
	}

	//update previous error for derivative calculation
	pid->preError = error;
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	69ba      	ldr	r2, [r7, #24]
 800031a:	611a      	str	r2, [r3, #16]

	return output;
 800031c:	69fb      	ldr	r3, [r7, #28]
 800031e:	ee07 3a90 	vmov	s15, r3
}
 8000322:	eeb0 0a67 	vmov.f32	s0, s15
 8000326:	3720      	adds	r7, #32
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	3f19999a 	.word	0x3f19999a
 8000330:	3c23d70a 	.word	0x3c23d70a
 8000334:	c0800000 	.word	0xc0800000
 8000338:	4515f000 	.word	0x4515f000
 800033c:	4515f000 	.word	0x4515f000
 8000340:	c515f000 	.word	0xc515f000
 8000344:	c515f000 	.word	0xc515f000

08000348 <Abs>:

static float Abs(float x) {
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x < 0) {
 8000352:	edd7 7a01 	vldr	s15, [r7, #4]
 8000356:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800035a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800035e:	d504      	bpl.n	800036a <Abs+0x22>
		return -x;
 8000360:	edd7 7a01 	vldr	s15, [r7, #4]
 8000364:	eef1 7a67 	vneg.f32	s15, s15
 8000368:	e001      	b.n	800036e <Abs+0x26>
	}
	else{
		return x;
 800036a:	edd7 7a01 	vldr	s15, [r7, #4]
	}
}
 800036e:	eeb0 0a67 	vmov.f32	s0, s15
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr

0800037c <RotaryEncInit>:

#include "rotary_encoder.h"
#include "utilities.h"


void RotaryEncInit(RotaryEncoder_t *encoder) {
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
	//TODO: initialize prevHardCount to the same value as hardware encoder count
	encoder->prevHardCount = 0;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	2200      	movs	r2, #0
 8000388:	809a      	strh	r2, [r3, #4]
	encoder->count32 = 0;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
	encoder->speed = 0;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	f04f 0200 	mov.w	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
}
 8000398:	bf00      	nop
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <RotaryEncGetCount>:

void RotaryEncSetCount(RotaryEncoder_t *encoder, int32_t count) {
	encoder->count32 = count;
}

int32_t RotaryEncGetCount(RotaryEncoder_t *encoder) {
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	return encoder->count32;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <RotaryEncUpdate>:
	return encoder->speed;
}


void RotaryEncUpdate(RotaryEncoder_t *encoder, uint16_t newCount,
		float deltaTimeMs) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	60f8      	str	r0, [r7, #12]
 80003c4:	460b      	mov	r3, r1
 80003c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80003ca:	817b      	strh	r3, [r7, #10]

	//find change in count
	int32_t deltaCount = (int32_t)newCount - encoder->prevHardCount;
 80003cc:	897b      	ldrh	r3, [r7, #10]
 80003ce:	68fa      	ldr	r2, [r7, #12]
 80003d0:	8892      	ldrh	r2, [r2, #4]
 80003d2:	1a9b      	subs	r3, r3, r2
 80003d4:	617b      	str	r3, [r7, #20]

	//newCount did not wrap around
	if(Abs(deltaCount) < ENC_COUNT_WRAP_THRESHOLD) {
 80003d6:	6978      	ldr	r0, [r7, #20]
 80003d8:	f000 f831 	bl	800043e <Abs>
 80003dc:	4603      	mov	r3, r0
 80003de:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80003e2:	4293      	cmp	r3, r2
 80003e4:	dc06      	bgt.n	80003f4 <RotaryEncUpdate+0x38>
		encoder->count32 += deltaCount;
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	681a      	ldr	r2, [r3, #0]
 80003ea:	697b      	ldr	r3, [r7, #20]
 80003ec:	441a      	add	r2, r3
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	e01d      	b.n	8000430 <RotaryEncUpdate+0x74>
	}
	//newCount wrapped around
	else {
		//newCount underflow
		//if(deltaCount < 0) {
		if(encoder->prevHardCount < newCount){
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	889b      	ldrh	r3, [r3, #4]
 80003f8:	897a      	ldrh	r2, [r7, #10]
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d90d      	bls.n	800041a <RotaryEncUpdate+0x5e>
			encoder->count32 -= (int32_t)0xFFFF + encoder->prevHardCount -
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	889b      	ldrh	r3, [r3, #4]
 8000406:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800040a:	33ff      	adds	r3, #255	; 0xff
 800040c:	8979      	ldrh	r1, [r7, #10]
 800040e:	1a5b      	subs	r3, r3, r1
					newCount + 1;
 8000410:	3301      	adds	r3, #1
			encoder->count32 -= (int32_t)0xFFFF + encoder->prevHardCount -
 8000412:	1ad2      	subs	r2, r2, r3
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	e00a      	b.n	8000430 <RotaryEncUpdate+0x74>
//			encoder->count32 -= deltaCount;
		}
		//newCount overflow
		//newCount = 4, prevHardCount = 65534
		else {
			encoder->count32 += (int32_t)0xFFFF - encoder->prevHardCount + 1 +
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	889b      	ldrh	r3, [r3, #4]
 8000422:	f5c3 3180 	rsb	r1, r3, #65536	; 0x10000
 8000426:	897b      	ldrh	r3, [r7, #10]
 8000428:	440b      	add	r3, r1
 800042a:	441a      	add	r2, r3
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	601a      	str	r2, [r3, #0]
	//TODO: switch to UnwrapAtThreshold16 function
//	encoder->count32 += UnwrapAtThreshold16(newCount, encoder->prevHardCount,
//			ENC_COUNT_WRAP_THRESHOLD);

	//update previous hardware count
	encoder->prevHardCount = newCount;
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	897a      	ldrh	r2, [r7, #10]
 8000434:	809a      	strh	r2, [r3, #4]
}
 8000436:	bf00      	nop
 8000438:	3718      	adds	r7, #24
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}

0800043e <Abs>:
			return 0xFFFF - (int32_t)currentCount + newCount + 1;
		}
	}
}

int32_t Abs(int32_t x) {
 800043e:	b480      	push	{r7}
 8000440:	b083      	sub	sp, #12
 8000442:	af00      	add	r7, sp, #0
 8000444:	6078      	str	r0, [r7, #4]
	return x > 0 ? x : -x;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	2b00      	cmp	r3, #0
 800044a:	bfb8      	it	lt
 800044c:	425b      	neglt	r3, r3
}
 800044e:	4618      	mov	r0, r3
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr

0800045a <MotorInit>:
#include "devices/motor.h"

static int32_t Abs(int32_t x);

void MotorInit(Motor_t *motor, TIM_HandleTypeDef *htim, uint32_t pwmCh,
		GPIO_t reverseGpio, GPIO_t forwardGpio) {
 800045a:	b082      	sub	sp, #8
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	607a      	str	r2, [r7, #4]
 8000468:	61fb      	str	r3, [r7, #28]
	motor->htim = htim;
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	68ba      	ldr	r2, [r7, #8]
 800046e:	601a      	str	r2, [r3, #0]
	motor->pwmCh = pwmCh;
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	605a      	str	r2, [r3, #4]
	motor->reverseGpio = reverseGpio;
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	3310      	adds	r3, #16
 800047a:	f107 021c 	add.w	r2, r7, #28
 800047e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000482:	e883 0003 	stmia.w	r3, {r0, r1}
	motor->forwardGpio = forwardGpio;
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	3308      	adds	r3, #8
 800048a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800048e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000492:	e883 0003 	stmia.w	r3, {r0, r1}
	motor->offset = 0;
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	2200      	movs	r2, #0
 800049a:	839a      	strh	r2, [r3, #28]
	MotorSetDirection(motor, DIR_STOP);
 800049c:	2101      	movs	r1, #1
 800049e:	68f8      	ldr	r0, [r7, #12]
 80004a0:	f000 f81b 	bl	80004da <MotorSetDirection>
}
 80004a4:	bf00      	nop
 80004a6:	3710      	adds	r7, #16
 80004a8:	46bd      	mov	sp, r7
 80004aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004ae:	b002      	add	sp, #8
 80004b0:	4770      	bx	lr

080004b2 <MotorStartPWM>:

void MotorStartPWM(Motor_t *motor) {
 80004b2:	b580      	push	{r7, lr}
 80004b4:	b082      	sub	sp, #8
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
	//make sure motor is stopped
	MotorSetDirection(motor, DIR_STOP);
 80004ba:	2101      	movs	r1, #1
 80004bc:	6878      	ldr	r0, [r7, #4]
 80004be:	f000 f80c 	bl	80004da <MotorSetDirection>

	HAL_TIM_PWM_Start(motor->htim, motor->pwmCh);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	4619      	mov	r1, r3
 80004cc:	4610      	mov	r0, r2
 80004ce:	f004 fd01 	bl	8004ed4 <HAL_TIM_PWM_Start>
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}

080004da <MotorSetDirection>:

uint16_t MotorGetOffset(Motor_t *motor) {
	return motor->offset;
}

void MotorSetDirection(Motor_t *motor, MotorDirection_t dir) {
 80004da:	b580      	push	{r7, lr}
 80004dc:	b082      	sub	sp, #8
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
 80004e2:	460b      	mov	r3, r1
 80004e4:	70fb      	strb	r3, [r7, #3]

	//Set appropriate GPIO based on requested direction
	switch(dir) {
 80004e6:	78fb      	ldrb	r3, [r7, #3]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d012      	beq.n	8000512 <MotorSetDirection+0x38>
 80004ec:	2b02      	cmp	r3, #2
 80004ee:	d121      	bne.n	8000534 <MotorSetDirection+0x5a>
	case DIR_FORWARD:
		HAL_GPIO_WritePin(motor->forwardGpio.port, motor->forwardGpio.pin,
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	6898      	ldr	r0, [r3, #8]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	899b      	ldrh	r3, [r3, #12]
 80004f8:	2201      	movs	r2, #1
 80004fa:	4619      	mov	r1, r3
 80004fc:	f001 f93e 	bl	800177c <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		HAL_GPIO_WritePin(motor->reverseGpio.port, motor->reverseGpio.pin,
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	6918      	ldr	r0, [r3, #16]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	8a9b      	ldrh	r3, [r3, #20]
 8000508:	2200      	movs	r2, #0
 800050a:	4619      	mov	r1, r3
 800050c:	f001 f936 	bl	800177c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 8000510:	e011      	b.n	8000536 <MotorSetDirection+0x5c>
	case DIR_REVERSE:
		HAL_GPIO_WritePin(motor->forwardGpio.port, motor->forwardGpio.pin,
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	6898      	ldr	r0, [r3, #8]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	899b      	ldrh	r3, [r3, #12]
 800051a:	2200      	movs	r2, #0
 800051c:	4619      	mov	r1, r3
 800051e:	f001 f92d 	bl	800177c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(motor->reverseGpio.port, motor->reverseGpio.pin,
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	6918      	ldr	r0, [r3, #16]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	8a9b      	ldrh	r3, [r3, #20]
 800052a:	2201      	movs	r2, #1
 800052c:	4619      	mov	r1, r3
 800052e:	f001 f925 	bl	800177c <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		break;
 8000532:	e000      	b.n	8000536 <MotorSetDirection+0x5c>
	default:
		break;
 8000534:	bf00      	nop
	}

	motor->direction = dir;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	78fa      	ldrb	r2, [r7, #3]
 800053a:	761a      	strb	r2, [r3, #24]

	MotorSetSpeed(motor, 0);
 800053c:	2100      	movs	r1, #0
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f000 f804 	bl	800054c <MotorSetSpeed>
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <MotorSetSpeed>:
MotorDirection_t MotorGetDirection(Motor_t *motor) {
	return motor->direction;
}


void MotorSetSpeed(Motor_t *motor, uint16_t speed) {
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	460b      	mov	r3, r1
 8000556:	807b      	strh	r3, [r7, #2]
	motor->speed = speed;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	887a      	ldrh	r2, [r7, #2]
 800055c:	835a      	strh	r2, [r3, #26]

	if(motor->speed > 0) {
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	8b5b      	ldrh	r3, [r3, #26]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d03e      	beq.n	80005e4 <MotorSetSpeed+0x98>
		uint32_t pwmVal = (uint32_t)motor->speed + motor->offset;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	8b5b      	ldrh	r3, [r3, #26]
 800056a:	461a      	mov	r2, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	8b9b      	ldrh	r3, [r3, #28]
 8000570:	4413      	add	r3, r2
 8000572:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, pwmVal);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d105      	bne.n	8000588 <MotorSetSpeed+0x3c>
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else {
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
	}
}
 8000586:	e065      	b.n	8000654 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, pwmVal);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	2b04      	cmp	r3, #4
 800058e:	d105      	bne.n	800059c <MotorSetSpeed+0x50>
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	6393      	str	r3, [r2, #56]	; 0x38
 800059a:	e05b      	b.n	8000654 <MotorSetSpeed+0x108>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	2b08      	cmp	r3, #8
 80005a2:	d105      	bne.n	80005b0 <MotorSetSpeed+0x64>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	63d3      	str	r3, [r2, #60]	; 0x3c
 80005ae:	e051      	b.n	8000654 <MotorSetSpeed+0x108>
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	2b0c      	cmp	r3, #12
 80005b6:	d105      	bne.n	80005c4 <MotorSetSpeed+0x78>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	6413      	str	r3, [r2, #64]	; 0x40
 80005c2:	e047      	b.n	8000654 <MotorSetSpeed+0x108>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	2b10      	cmp	r3, #16
 80005ca:	d105      	bne.n	80005d8 <MotorSetSpeed+0x8c>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	6593      	str	r3, [r2, #88]	; 0x58
 80005d6:	e03d      	b.n	8000654 <MotorSetSpeed+0x108>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80005e2:	e037      	b.n	8000654 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d105      	bne.n	80005f8 <MotorSetSpeed+0xac>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2200      	movs	r2, #0
 80005f4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80005f6:	e02d      	b.n	8000654 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	2b04      	cmp	r3, #4
 80005fe:	d105      	bne.n	800060c <MotorSetSpeed+0xc0>
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	6393      	str	r3, [r2, #56]	; 0x38
}
 800060a:	e023      	b.n	8000654 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	2b08      	cmp	r3, #8
 8000612:	d105      	bne.n	8000620 <MotorSetSpeed+0xd4>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	2300      	movs	r3, #0
 800061c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800061e:	e019      	b.n	8000654 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	2b0c      	cmp	r3, #12
 8000626:	d105      	bne.n	8000634 <MotorSetSpeed+0xe8>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	2300      	movs	r3, #0
 8000630:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000632:	e00f      	b.n	8000654 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	2b10      	cmp	r3, #16
 800063a:	d105      	bne.n	8000648 <MotorSetSpeed+0xfc>
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	2300      	movs	r3, #0
 8000644:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000646:	e005      	b.n	8000654 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	2300      	movs	r3, #0
 8000650:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000652:	e7ff      	b.n	8000654 <MotorSetSpeed+0x108>
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <MotorSetPower>:

uint16_t MotorGetSpeed(Motor_t *motor) {
	return motor->speed;
}

void MotorSetPower(Motor_t *motor, int32_t power) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
	//determine direction based on sign of power
	if(power < 0) {
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	da04      	bge.n	800067a <MotorSetPower+0x1a>
		MotorSetDirection(motor, DIR_REVERSE);
 8000670:	2100      	movs	r1, #0
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f7ff ff31 	bl	80004da <MotorSetDirection>
 8000678:	e006      	b.n	8000688 <MotorSetPower+0x28>
	}
	else if(power > 0) {
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	dd03      	ble.n	8000688 <MotorSetPower+0x28>
		MotorSetDirection(motor, DIR_FORWARD);
 8000680:	2102      	movs	r1, #2
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f7ff ff29 	bl	80004da <MotorSetDirection>
	}

	MotorSetSpeed(motor, (uint16_t)Abs(power));
 8000688:	6838      	ldr	r0, [r7, #0]
 800068a:	f000 f80a 	bl	80006a2 <Abs>
 800068e:	4603      	mov	r3, r0
 8000690:	b29b      	uxth	r3, r3
 8000692:	4619      	mov	r1, r3
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f7ff ff59 	bl	800054c <MotorSetSpeed>
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <Abs>:

static int32_t Abs(int32_t x) {
 80006a2:	b480      	push	{r7}
 80006a4:	b083      	sub	sp, #12
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
	if(x < 0) {
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	da02      	bge.n	80006b6 <Abs+0x14>
		return x * -1;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	425b      	negs	r3, r3
 80006b4:	e000      	b.n	80006b8 <Abs+0x16>
	}
	else {
		return x;
 80006b6:	687b      	ldr	r3, [r7, #4]
	}
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <HAL_TIM_PeriodElapsedCallback>:
{
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  return ch;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	if(htim == &htim4) {
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d104      	bne.n	80006de <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin(LD10_GPIO_Port, LD10_Pin);
 80006d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <HAL_TIM_PeriodElapsedCallback+0x28>)
 80006da:	f001 f867 	bl	80017ac <HAL_GPIO_TogglePin>
	}
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000284 	.word	0x20000284
 80006ec:	48001000 	.word	0x48001000

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08c      	sub	sp, #48	; 0x30
 80006f4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f6:	f000 fd2b 	bl	8001150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fa:	f000 f87b 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fe:	f000 fa73 	bl	8000be8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000702:	f000 f8dd 	bl	80008c0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000706:	f000 f91b 	bl	8000940 <MX_SPI1_Init>
  MX_TIM4_Init();
 800070a:	f000 f9e7 	bl	8000adc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800070e:	f000 fa3b 	bl	8000b88 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000712:	f009 fee3 	bl	800a4dc <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000716:	f000 f951 	bl	80009bc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  GameHID_t gameHID = {
 800071a:	2300      	movs	r3, #0
 800071c:	753b      	strb	r3, [r7, #20]
 800071e:	2300      	movs	r3, #0
 8000720:	757b      	strb	r3, [r7, #21]
 8000722:	2300      	movs	r3, #0
 8000724:	75bb      	strb	r3, [r7, #22]
		  .joyX = 0,
		  .joyY = 0,
		  .joyB1 = 0
  };

  PIDInit(&pid);
 8000726:	482b      	ldr	r0, [pc, #172]	; (80007d4 <main+0xe4>)
 8000728:	f7ff fd4e 	bl	80001c8 <PIDInit>
  RotaryEncInit(&encoder);
 800072c:	482a      	ldr	r0, [pc, #168]	; (80007d8 <main+0xe8>)
 800072e:	f7ff fe25 	bl	800037c <RotaryEncInit>

  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000732:	213c      	movs	r1, #60	; 0x3c
 8000734:	4829      	ldr	r0, [pc, #164]	; (80007dc <main+0xec>)
 8000736:	f004 fd73 	bl	8005220 <HAL_TIM_Encoder_Start>

  GPIO_t gpioMotorReverse = {
 800073a:	4a29      	ldr	r2, [pc, #164]	; (80007e0 <main+0xf0>)
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000744:	e883 0003 	stmia.w	r3, {r0, r1}
		  .port = MOTOR_FORWARD_GPIO_Port,
		  .pin = MOTOR_FORWARD_Pin
  };

  GPIO_t gpioMotorForward = {
 8000748:	4a26      	ldr	r2, [pc, #152]	; (80007e4 <main+0xf4>)
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000750:	e883 0003 	stmia.w	r3, {r0, r1}
		  .port = MOTOR_REVERSE_GPIO_Port,
		  .pin = MOTOR_REVERSE_Pin
  };

  MotorInit(&motor, &htim1, TIM_CHANNEL_3, gpioMotorReverse, gpioMotorForward);
 8000754:	aa01      	add	r2, sp, #4
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	e893 0003 	ldmia.w	r3, {r0, r1}
 800075c:	e882 0003 	stmia.w	r2, {r0, r1}
 8000760:	693b      	ldr	r3, [r7, #16]
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	2208      	movs	r2, #8
 8000768:	491f      	ldr	r1, [pc, #124]	; (80007e8 <main+0xf8>)
 800076a:	4820      	ldr	r0, [pc, #128]	; (80007ec <main+0xfc>)
 800076c:	f7ff fe75 	bl	800045a <MotorInit>
  //MotorSetOffset(&motor, MOTOR_OFFSET);
  MotorStartPWM(&motor);
 8000770:	481e      	ldr	r0, [pc, #120]	; (80007ec <main+0xfc>)
 8000772:	f7ff fe9e 	bl	80004b2 <MotorStartPWM>

  HAL_TIM_Base_Start_IT(&htim1);
 8000776:	481c      	ldr	r0, [pc, #112]	; (80007e8 <main+0xf8>)
 8000778:	f004 faea 	bl	8004d50 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RotaryEncUpdate(&encoder, __HAL_TIM_GET_COUNTER(&htim4), 1);
 800077c:	4b17      	ldr	r3, [pc, #92]	; (80007dc <main+0xec>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000782:	b29b      	uxth	r3, r3
 8000784:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000788:	4619      	mov	r1, r3
 800078a:	4813      	ldr	r0, [pc, #76]	; (80007d8 <main+0xe8>)
 800078c:	f7ff fe16 	bl	80003bc <RotaryEncUpdate>
	  int32_t joyYOut = RotaryEncGetCount(&encoder);
 8000790:	4811      	ldr	r0, [pc, #68]	; (80007d8 <main+0xe8>)
 8000792:	f7ff fe07 	bl	80003a4 <RotaryEncGetCount>
 8000796:	61f8      	str	r0, [r7, #28]

	  //constrain to 8-bit signed integer
	  //joyYOut = Constrain(joyYOut, -127, 127);

	  //Motor control
	  float motorPower = ComputePID(&pid, 0, joyYOut);
 8000798:	69fb      	ldr	r3, [r7, #28]
 800079a:	ee07 3a90 	vmov	s15, r3
 800079e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007a2:	eef0 0a67 	vmov.f32	s1, s15
 80007a6:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80007f0 <main+0x100>
 80007aa:	480a      	ldr	r0, [pc, #40]	; (80007d4 <main+0xe4>)
 80007ac:	f7ff fd2c 	bl	8000208 <ComputePID>
 80007b0:	ed87 0a06 	vstr	s0, [r7, #24]
	  //motorPower = 1500;
	  MotorSetPower(&motor, (int32_t)(-motorPower));
 80007b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80007b8:	eef1 7a67 	vneg.f32	s15, s15
 80007bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007c0:	ee17 1a90 	vmov	r1, s15
 80007c4:	4809      	ldr	r0, [pc, #36]	; (80007ec <main+0xfc>)
 80007c6:	f7ff ff4b 	bl	8000660 <MotorSetPower>

	  //USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&gameHID,
		//	  sizeof(gameHID));


	  HAL_Delay(10);
 80007ca:	200a      	movs	r0, #10
 80007cc:	f000 fd26 	bl	800121c <HAL_Delay>
  {
 80007d0:	e7d4      	b.n	800077c <main+0x8c>
 80007d2:	bf00      	nop
 80007d4:	20000364 	.word	0x20000364
 80007d8:	20000358 	.word	0x20000358
 80007dc:	20000284 	.word	0x20000284
 80007e0:	0800ad18 	.word	0x0800ad18
 80007e4:	0800ad20 	.word	0x0800ad20
 80007e8:	20000238 	.word	0x20000238
 80007ec:	20000378 	.word	0x20000378
 80007f0:	00000000 	.word	0x00000000

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b09e      	sub	sp, #120	; 0x78
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007fe:	2228      	movs	r2, #40	; 0x28
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f00a fa74 	bl	800acf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000818:	463b      	mov	r3, r7
 800081a:	223c      	movs	r2, #60	; 0x3c
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f00a fa66 	bl	800acf0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000824:	2303      	movs	r3, #3
 8000826:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000828:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800082c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000832:	2301      	movs	r3, #1
 8000834:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000836:	2310      	movs	r3, #16
 8000838:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083a:	2302      	movs	r3, #2
 800083c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000842:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000844:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000848:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800084e:	4618      	mov	r0, r3
 8000850:	f002 fdae 	bl	80033b0 <HAL_RCC_OscConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800085a:	f000 fa67 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085e:	230f      	movs	r3, #15
 8000860:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000862:	2302      	movs	r3, #2
 8000864:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800086a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800086e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000874:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000878:	2101      	movs	r1, #1
 800087a:	4618      	mov	r0, r3
 800087c:	f003 fdd6 	bl	800442c <HAL_RCC_ClockConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000886:	f000 fa51 	bl	8000d2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <SystemClock_Config+0xc8>)
 800088c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000896:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800089a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800089c:	2300      	movs	r3, #0
 800089e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a0:	463b      	mov	r3, r7
 80008a2:	4618      	mov	r0, r3
 80008a4:	f003 fff8 	bl	8004898 <HAL_RCCEx_PeriphCLKConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80008ae:	f000 fa3d 	bl	8000d2c <Error_Handler>
  }
}
 80008b2:	bf00      	nop
 80008b4:	3778      	adds	r7, #120	; 0x78
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	00021021 	.word	0x00021021

080008c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008c4:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <MX_I2C1_Init+0x74>)
 80008c6:	4a1c      	ldr	r2, [pc, #112]	; (8000938 <MX_I2C1_Init+0x78>)
 80008c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_I2C1_Init+0x74>)
 80008cc:	4a1b      	ldr	r2, [pc, #108]	; (800093c <MX_I2C1_Init+0x7c>)
 80008ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008d0:	4b18      	ldr	r3, [pc, #96]	; (8000934 <MX_I2C1_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_I2C1_Init+0x74>)
 80008d8:	2201      	movs	r2, #1
 80008da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008dc:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_I2C1_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_I2C1_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_I2C1_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_I2C1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_I2C1_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008fa:	480e      	ldr	r0, [pc, #56]	; (8000934 <MX_I2C1_Init+0x74>)
 80008fc:	f000 ff70 	bl	80017e0 <HAL_I2C_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000906:	f000 fa11 	bl	8000d2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800090a:	2100      	movs	r1, #0
 800090c:	4809      	ldr	r0, [pc, #36]	; (8000934 <MX_I2C1_Init+0x74>)
 800090e:	f000 fff6 	bl	80018fe <HAL_I2CEx_ConfigAnalogFilter>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000918:	f000 fa08 	bl	8000d2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800091c:	2100      	movs	r1, #0
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_I2C1_Init+0x74>)
 8000920:	f001 f838 	bl	8001994 <HAL_I2CEx_ConfigDigitalFilter>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800092a:	f000 f9ff 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000180 	.word	0x20000180
 8000938:	40005400 	.word	0x40005400
 800093c:	2000090e 	.word	0x2000090e

08000940 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <MX_SPI1_Init+0x74>)
 8000946:	4a1c      	ldr	r2, [pc, #112]	; (80009b8 <MX_SPI1_Init+0x78>)
 8000948:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_SPI1_Init+0x74>)
 800094c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000950:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <MX_SPI1_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_SPI1_Init+0x74>)
 800095a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800095e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_SPI1_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_SPI1_Init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_SPI1_Init+0x74>)
 800096e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000972:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_SPI1_Init+0x74>)
 8000976:	2208      	movs	r2, #8
 8000978:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_SPI1_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_SPI1_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_SPI1_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_SPI1_Init+0x74>)
 800098e:	2207      	movs	r2, #7
 8000990:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_SPI1_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_SPI1_Init+0x74>)
 800099a:	2208      	movs	r2, #8
 800099c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_SPI1_Init+0x74>)
 80009a0:	f004 f92a 	bl	8004bf8 <HAL_SPI_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009aa:	f000 f9bf 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200001d4 	.word	0x200001d4
 80009b8:	40013000 	.word	0x40013000

080009bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b096      	sub	sp, #88	; 0x58
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
 80009de:	615a      	str	r2, [r3, #20]
 80009e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	222c      	movs	r2, #44	; 0x2c
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f00a f981 	bl	800acf0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009ee:	4b39      	ldr	r3, [pc, #228]	; (8000ad4 <MX_TIM1_Init+0x118>)
 80009f0:	4a39      	ldr	r2, [pc, #228]	; (8000ad8 <MX_TIM1_Init+0x11c>)
 80009f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009f4:	4b37      	ldr	r3, [pc, #220]	; (8000ad4 <MX_TIM1_Init+0x118>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fa:	4b36      	ldr	r3, [pc, #216]	; (8000ad4 <MX_TIM1_Init+0x118>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2400-1;
 8000a00:	4b34      	ldr	r3, [pc, #208]	; (8000ad4 <MX_TIM1_Init+0x118>)
 8000a02:	f640 125f 	movw	r2, #2399	; 0x95f
 8000a06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a08:	4b32      	ldr	r3, [pc, #200]	; (8000ad4 <MX_TIM1_Init+0x118>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a0e:	4b31      	ldr	r3, [pc, #196]	; (8000ad4 <MX_TIM1_Init+0x118>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a14:	4b2f      	ldr	r3, [pc, #188]	; (8000ad4 <MX_TIM1_Init+0x118>)
 8000a16:	2280      	movs	r2, #128	; 0x80
 8000a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a1a:	482e      	ldr	r0, [pc, #184]	; (8000ad4 <MX_TIM1_Init+0x118>)
 8000a1c:	f004 fa02 	bl	8004e24 <HAL_TIM_PWM_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000a26:	f000 f981 	bl	8000d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4825      	ldr	r0, [pc, #148]	; (8000ad4 <MX_TIM1_Init+0x118>)
 8000a3e:	f005 fa65 	bl	8005f0c <HAL_TIMEx_MasterConfigSynchronization>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a48:	f000 f970 	bl	8000d2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a4c:	2360      	movs	r3, #96	; 0x60
 8000a4e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a54:	2300      	movs	r3, #0
 8000a56:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a60:	2300      	movs	r3, #0
 8000a62:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a64:	2300      	movs	r3, #0
 8000a66:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a6c:	2208      	movs	r2, #8
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4818      	ldr	r0, [pc, #96]	; (8000ad4 <MX_TIM1_Init+0x118>)
 8000a72:	f004 fd83 	bl	800557c <HAL_TIM_PWM_ConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a7c:	f000 f956 	bl	8000d2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a98:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000aa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4807      	ldr	r0, [pc, #28]	; (8000ad4 <MX_TIM1_Init+0x118>)
 8000ab6:	f005 faa9 	bl	800600c <HAL_TIMEx_ConfigBreakDeadTime>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000ac0:	f000 f934 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ac4:	4803      	ldr	r0, [pc, #12]	; (8000ad4 <MX_TIM1_Init+0x118>)
 8000ac6:	f000 fa4d 	bl	8000f64 <HAL_TIM_MspPostInit>

}
 8000aca:	bf00      	nop
 8000acc:	3758      	adds	r7, #88	; 0x58
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000238 	.word	0x20000238
 8000ad8:	40012c00 	.word	0x40012c00

08000adc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08c      	sub	sp, #48	; 0x30
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ae2:	f107 030c 	add.w	r3, r7, #12
 8000ae6:	2224      	movs	r2, #36	; 0x24
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f00a f900 	bl	800acf0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af0:	463b      	mov	r3, r7
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000afa:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <MX_TIM4_Init+0xa4>)
 8000afc:	4a21      	ldr	r2, [pc, #132]	; (8000b84 <MX_TIM4_Init+0xa8>)
 8000afe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b00:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <MX_TIM4_Init+0xa4>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b06:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <MX_TIM4_Init+0xa4>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b0c:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <MX_TIM4_Init+0xa4>)
 8000b0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b12:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <MX_TIM4_Init+0xa4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <MX_TIM4_Init+0xa4>)
 8000b1c:	2280      	movs	r2, #128	; 0x80
 8000b1e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b20:	2303      	movs	r3, #3
 8000b22:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 4;
 8000b30:	2304      	movs	r3, #4
 8000b32:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000b40:	230f      	movs	r3, #15
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	4619      	mov	r1, r3
 8000b4a:	480d      	ldr	r0, [pc, #52]	; (8000b80 <MX_TIM4_Init+0xa4>)
 8000b4c:	f004 fac2 	bl	80050d4 <HAL_TIM_Encoder_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000b56:	f000 f8e9 	bl	8000d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b62:	463b      	mov	r3, r7
 8000b64:	4619      	mov	r1, r3
 8000b66:	4806      	ldr	r0, [pc, #24]	; (8000b80 <MX_TIM4_Init+0xa4>)
 8000b68:	f005 f9d0 	bl	8005f0c <HAL_TIMEx_MasterConfigSynchronization>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000b72:	f000 f8db 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	3730      	adds	r7, #48	; 0x30
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000284 	.word	0x20000284
 8000b84:	40000800 	.word	0x40000800

08000b88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_USART1_UART_Init+0x58>)
 8000b8e:	4a15      	ldr	r2, [pc, #84]	; (8000be4 <MX_USART1_UART_Init+0x5c>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <MX_USART1_UART_Init+0x58>)
 8000b94:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000b98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_USART1_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_USART1_UART_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_USART1_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_USART1_UART_Init+0x58>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MX_USART1_UART_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_USART1_UART_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <MX_USART1_UART_Init+0x58>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_USART1_UART_Init+0x58>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_USART1_UART_Init+0x58>)
 8000bcc:	f005 faba 	bl	8006144 <HAL_UART_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bd6:	f000 f8a9 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200002d0 	.word	0x200002d0
 8000be4:	40013800 	.word	0x40013800

08000be8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08c      	sub	sp, #48	; 0x30
 8000bec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bfe:	4b49      	ldr	r3, [pc, #292]	; (8000d24 <MX_GPIO_Init+0x13c>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	4a48      	ldr	r2, [pc, #288]	; (8000d24 <MX_GPIO_Init+0x13c>)
 8000c04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c08:	6153      	str	r3, [r2, #20]
 8000c0a:	4b46      	ldr	r3, [pc, #280]	; (8000d24 <MX_GPIO_Init+0x13c>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c12:	61bb      	str	r3, [r7, #24]
 8000c14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	4b43      	ldr	r3, [pc, #268]	; (8000d24 <MX_GPIO_Init+0x13c>)
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	4a42      	ldr	r2, [pc, #264]	; (8000d24 <MX_GPIO_Init+0x13c>)
 8000c1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c20:	6153      	str	r3, [r2, #20]
 8000c22:	4b40      	ldr	r3, [pc, #256]	; (8000d24 <MX_GPIO_Init+0x13c>)
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c2e:	4b3d      	ldr	r3, [pc, #244]	; (8000d24 <MX_GPIO_Init+0x13c>)
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	4a3c      	ldr	r2, [pc, #240]	; (8000d24 <MX_GPIO_Init+0x13c>)
 8000c34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c38:	6153      	str	r3, [r2, #20]
 8000c3a:	4b3a      	ldr	r3, [pc, #232]	; (8000d24 <MX_GPIO_Init+0x13c>)
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	4b37      	ldr	r3, [pc, #220]	; (8000d24 <MX_GPIO_Init+0x13c>)
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	4a36      	ldr	r2, [pc, #216]	; (8000d24 <MX_GPIO_Init+0x13c>)
 8000c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c50:	6153      	str	r3, [r2, #20]
 8000c52:	4b34      	ldr	r3, [pc, #208]	; (8000d24 <MX_GPIO_Init+0x13c>)
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5e:	4b31      	ldr	r3, [pc, #196]	; (8000d24 <MX_GPIO_Init+0x13c>)
 8000c60:	695b      	ldr	r3, [r3, #20]
 8000c62:	4a30      	ldr	r2, [pc, #192]	; (8000d24 <MX_GPIO_Init+0x13c>)
 8000c64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c68:	6153      	str	r3, [r2, #20]
 8000c6a:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <MX_GPIO_Init+0x13c>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	4b2b      	ldr	r3, [pc, #172]	; (8000d24 <MX_GPIO_Init+0x13c>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	4a2a      	ldr	r2, [pc, #168]	; (8000d24 <MX_GPIO_Init+0x13c>)
 8000c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c80:	6153      	str	r3, [r2, #20]
 8000c82:	4b28      	ldr	r3, [pc, #160]	; (8000d24 <MX_GPIO_Init+0x13c>)
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000c94:	4824      	ldr	r0, [pc, #144]	; (8000d28 <MX_GPIO_Init+0x140>)
 8000c96:	f000 fd71 	bl	800177c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_REVERSE_Pin|MOTOR_FORWARD_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca4:	f000 fd6a 	bl	800177c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000ca8:	2337      	movs	r3, #55	; 0x37
 8000caa:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cac:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	4619      	mov	r1, r3
 8000cbc:	481a      	ldr	r0, [pc, #104]	; (8000d28 <MX_GPIO_Init+0x140>)
 8000cbe:	f000 fbe3 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000cc2:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000cc6:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4813      	ldr	r0, [pc, #76]	; (8000d28 <MX_GPIO_Init+0x140>)
 8000cdc:	f000 fbd4 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf6:	f000 fbc7 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_REVERSE_Pin MOTOR_FORWARD_Pin */
  GPIO_InitStruct.Pin = MOTOR_REVERSE_Pin|MOTOR_FORWARD_Pin;
 8000cfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	4619      	mov	r1, r3
 8000d12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d16:	f000 fbb7 	bl	8001488 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d1a:	bf00      	nop
 8000d1c:	3730      	adds	r7, #48	; 0x30
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40021000 	.word	0x40021000
 8000d28:	48001000 	.word	0x48001000

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <Error_Handler+0x8>
	...

08000d38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <HAL_MspInit+0x44>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <HAL_MspInit+0x44>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6193      	str	r3, [r2, #24]
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <HAL_MspInit+0x44>)
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <HAL_MspInit+0x44>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <HAL_MspInit+0x44>)
 8000d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d60:	61d3      	str	r3, [r2, #28]
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_MspInit+0x44>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d6e:	2007      	movs	r0, #7
 8000d70:	f000 fb48 	bl	8001404 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40021000 	.word	0x40021000

08000d80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a17      	ldr	r2, [pc, #92]	; (8000dfc <HAL_I2C_MspInit+0x7c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d127      	bne.n	8000df2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <HAL_I2C_MspInit+0x80>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	4a16      	ldr	r2, [pc, #88]	; (8000e00 <HAL_I2C_MspInit+0x80>)
 8000da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dac:	6153      	str	r3, [r2, #20]
 8000dae:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <HAL_I2C_MspInit+0x80>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000dba:	23c0      	movs	r3, #192	; 0xc0
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dbe:	2312      	movs	r3, #18
 8000dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dca:	2304      	movs	r3, #4
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480b      	ldr	r0, [pc, #44]	; (8000e04 <HAL_I2C_MspInit+0x84>)
 8000dd6:	f000 fb57 	bl	8001488 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <HAL_I2C_MspInit+0x80>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <HAL_I2C_MspInit+0x80>)
 8000de0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000de4:	61d3      	str	r3, [r2, #28]
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_I2C_MspInit+0x80>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000df2:	bf00      	nop
 8000df4:	3728      	adds	r7, #40	; 0x28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40005400 	.word	0x40005400
 8000e00:	40021000 	.word	0x40021000
 8000e04:	48000400 	.word	0x48000400

08000e08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a17      	ldr	r2, [pc, #92]	; (8000e84 <HAL_SPI_MspInit+0x7c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d128      	bne.n	8000e7c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <HAL_SPI_MspInit+0x80>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	4a16      	ldr	r2, [pc, #88]	; (8000e88 <HAL_SPI_MspInit+0x80>)
 8000e30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e34:	6193      	str	r3, [r2, #24]
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <HAL_SPI_MspInit+0x80>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_SPI_MspInit+0x80>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	4a10      	ldr	r2, [pc, #64]	; (8000e88 <HAL_SPI_MspInit+0x80>)
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	6153      	str	r3, [r2, #20]
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <HAL_SPI_MspInit+0x80>)
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000e5a:	23e0      	movs	r3, #224	; 0xe0
 8000e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e78:	f000 fb06 	bl	8001488 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e7c:	bf00      	nop
 8000e7e:	3728      	adds	r7, #40	; 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40013000 	.word	0x40013000
 8000e88:	40021000 	.word	0x40021000

08000e8c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x38>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d10b      	bne.n	8000eb6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	4a09      	ldr	r2, [pc, #36]	; (8000ec8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ea4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ea8:	6193      	str	r3, [r2, #24]
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40012c00 	.word	0x40012c00
 8000ec8:	40021000 	.word	0x40021000

08000ecc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a1b      	ldr	r2, [pc, #108]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d130      	bne.n	8000f50 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000eee:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <HAL_TIM_Encoder_MspInit+0x90>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	4a1a      	ldr	r2, [pc, #104]	; (8000f5c <HAL_TIM_Encoder_MspInit+0x90>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	61d3      	str	r3, [r2, #28]
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <HAL_TIM_Encoder_MspInit+0x90>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <HAL_TIM_Encoder_MspInit+0x90>)
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	4a14      	ldr	r2, [pc, #80]	; (8000f5c <HAL_TIM_Encoder_MspInit+0x90>)
 8000f0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f10:	6153      	str	r3, [r2, #20]
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_TIM_Encoder_MspInit+0x90>)
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f1e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f30:	2302      	movs	r3, #2
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4809      	ldr	r0, [pc, #36]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x94>)
 8000f3c:	f000 faa4 	bl	8001488 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2100      	movs	r1, #0
 8000f44:	201e      	movs	r0, #30
 8000f46:	f000 fa68 	bl	800141a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f4a:	201e      	movs	r0, #30
 8000f4c:	f000 fa81 	bl	8001452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f50:	bf00      	nop
 8000f52:	3728      	adds	r7, #40	; 0x28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40000800 	.word	0x40000800
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	48000c00 	.word	0x48000c00

08000f64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <HAL_TIM_MspPostInit+0x68>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d11d      	bne.n	8000fc2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_TIM_MspPostInit+0x6c>)
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	4a11      	ldr	r2, [pc, #68]	; (8000fd0 <HAL_TIM_MspPostInit+0x6c>)
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f90:	6153      	str	r3, [r2, #20]
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <HAL_TIM_MspPostInit+0x6c>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 8000f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000fb0:	2306      	movs	r3, #6
 8000fb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbe:	f000 fa63 	bl	8001488 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000fc2:	bf00      	nop
 8000fc4:	3720      	adds	r7, #32
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40012c00 	.word	0x40012c00
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a17      	ldr	r2, [pc, #92]	; (8001050 <HAL_UART_MspInit+0x7c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d127      	bne.n	8001046 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ff6:	4b17      	ldr	r3, [pc, #92]	; (8001054 <HAL_UART_MspInit+0x80>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	4a16      	ldr	r2, [pc, #88]	; (8001054 <HAL_UART_MspInit+0x80>)
 8000ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001000:	6193      	str	r3, [r2, #24]
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <HAL_UART_MspInit+0x80>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_UART_MspInit+0x80>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	4a10      	ldr	r2, [pc, #64]	; (8001054 <HAL_UART_MspInit+0x80>)
 8001014:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001018:	6153      	str	r3, [r2, #20]
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_UART_MspInit+0x80>)
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001026:	2330      	movs	r3, #48	; 0x30
 8001028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001032:	2303      	movs	r3, #3
 8001034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001036:	2307      	movs	r3, #7
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <HAL_UART_MspInit+0x84>)
 8001042:	f000 fa21 	bl	8001488 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001046:	bf00      	nop
 8001048:	3728      	adds	r7, #40	; 0x28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40013800 	.word	0x40013800
 8001054:	40021000 	.word	0x40021000
 8001058:	48000800 	.word	0x48000800

0800105c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <NMI_Handler+0x4>

08001062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <HardFault_Handler+0x4>

08001068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <MemManage_Handler+0x4>

0800106e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <BusFault_Handler+0x4>

08001074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <UsageFault_Handler+0x4>

0800107a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a8:	f000 f898 	bl	80011dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80010b6:	f000 fdb1 	bl	8001c1c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000864 	.word	0x20000864

080010c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <TIM4_IRQHandler+0x10>)
 80010ca:	f004 f937 	bl	800533c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000284 	.word	0x20000284

080010d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <SystemInit+0x20>)
 80010de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010e2:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <SystemInit+0x20>)
 80010e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001134 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001100:	f7ff ffea 	bl	80010d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001104:	480c      	ldr	r0, [pc, #48]	; (8001138 <LoopForever+0x6>)
  ldr r1, =_edata
 8001106:	490d      	ldr	r1, [pc, #52]	; (800113c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001108:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <LoopForever+0xe>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800110c:	e002      	b.n	8001114 <LoopCopyDataInit>

0800110e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001112:	3304      	adds	r3, #4

08001114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001118:	d3f9      	bcc.n	800110e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111a:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <LoopForever+0x12>)
  ldr r4, =_ebss
 800111c:	4c0a      	ldr	r4, [pc, #40]	; (8001148 <LoopForever+0x16>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001120:	e001      	b.n	8001126 <LoopFillZerobss>

08001122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001124:	3204      	adds	r2, #4

08001126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001128:	d3fb      	bcc.n	8001122 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800112a:	f009 fdbd 	bl	800aca8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800112e:	f7ff fadf 	bl	80006f0 <main>

08001132 <LoopForever>:

LoopForever:
    b LoopForever
 8001132:	e7fe      	b.n	8001132 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001134:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800113c:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8001140:	0800adb0 	.word	0x0800adb0
  ldr r2, =_sbss
 8001144:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8001148:	20000b64 	.word	0x20000b64

0800114c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800114c:	e7fe      	b.n	800114c <ADC1_2_IRQHandler>
	...

08001150 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <HAL_Init+0x28>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a07      	ldr	r2, [pc, #28]	; (8001178 <HAL_Init+0x28>)
 800115a:	f043 0310 	orr.w	r3, r3, #16
 800115e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001160:	2003      	movs	r0, #3
 8001162:	f000 f94f 	bl	8001404 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001166:	2000      	movs	r0, #0
 8001168:	f000 f808 	bl	800117c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800116c:	f7ff fde4 	bl	8000d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40022000 	.word	0x40022000

0800117c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_InitTick+0x54>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_InitTick+0x58>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4619      	mov	r1, r3
 800118e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001192:	fbb3 f3f1 	udiv	r3, r3, r1
 8001196:	fbb2 f3f3 	udiv	r3, r2, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f000 f967 	bl	800146e <HAL_SYSTICK_Config>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00e      	b.n	80011c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b0f      	cmp	r3, #15
 80011ae:	d80a      	bhi.n	80011c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b0:	2200      	movs	r2, #0
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f000 f92f 	bl	800141a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011bc:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <HAL_InitTick+0x5c>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	e000      	b.n	80011c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000000 	.word	0x20000000
 80011d4:	20000008 	.word	0x20000008
 80011d8:	20000004 	.word	0x20000004

080011dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_IncTick+0x20>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_IncTick+0x24>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <HAL_IncTick+0x24>)
 80011ee:	6013      	str	r3, [r2, #0]
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000008 	.word	0x20000008
 8001200:	20000398 	.word	0x20000398

08001204 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return uwTick;  
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <HAL_GetTick+0x14>)
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000398 	.word	0x20000398

0800121c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001224:	f7ff ffee 	bl	8001204 <HAL_GetTick>
 8001228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001234:	d005      	beq.n	8001242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_Delay+0x44>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4413      	add	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001242:	bf00      	nop
 8001244:	f7ff ffde 	bl	8001204 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	429a      	cmp	r2, r3
 8001252:	d8f7      	bhi.n	8001244 <HAL_Delay+0x28>
  {
  }
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000008 	.word	0x20000008

08001264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001280:	4013      	ands	r3, r2
 8001282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800128c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001296:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	60d3      	str	r3, [r2, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <__NVIC_GetPriorityGrouping+0x18>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	f003 0307 	and.w	r3, r3, #7
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	db0b      	blt.n	80012f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	f003 021f 	and.w	r2, r3, #31
 80012e0:	4907      	ldr	r1, [pc, #28]	; (8001300 <__NVIC_EnableIRQ+0x38>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	095b      	lsrs	r3, r3, #5
 80012e8:	2001      	movs	r0, #1
 80012ea:	fa00 f202 	lsl.w	r2, r0, r2
 80012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000e100 	.word	0xe000e100

08001304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	db0a      	blt.n	800132e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	490c      	ldr	r1, [pc, #48]	; (8001350 <__NVIC_SetPriority+0x4c>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	440b      	add	r3, r1
 8001328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800132c:	e00a      	b.n	8001344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4908      	ldr	r1, [pc, #32]	; (8001354 <__NVIC_SetPriority+0x50>)
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	3b04      	subs	r3, #4
 800133c:	0112      	lsls	r2, r2, #4
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	440b      	add	r3, r1
 8001342:	761a      	strb	r2, [r3, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	; 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f1c3 0307 	rsb	r3, r3, #7
 8001372:	2b04      	cmp	r3, #4
 8001374:	bf28      	it	cs
 8001376:	2304      	movcs	r3, #4
 8001378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3304      	adds	r3, #4
 800137e:	2b06      	cmp	r3, #6
 8001380:	d902      	bls.n	8001388 <NVIC_EncodePriority+0x30>
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3b03      	subs	r3, #3
 8001386:	e000      	b.n	800138a <NVIC_EncodePriority+0x32>
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	f04f 32ff 	mov.w	r2, #4294967295
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43da      	mvns	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	4313      	orrs	r3, r2
         );
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3724      	adds	r7, #36	; 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d0:	d301      	bcc.n	80013d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00f      	b.n	80013f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <SysTick_Config+0x40>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013de:	210f      	movs	r1, #15
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f7ff ff8e 	bl	8001304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <SysTick_Config+0x40>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <SysTick_Config+0x40>)
 80013f0:	2207      	movs	r2, #7
 80013f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	e000e010 	.word	0xe000e010

08001404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff29 	bl	8001264 <__NVIC_SetPriorityGrouping>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b086      	sub	sp, #24
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800142c:	f7ff ff3e 	bl	80012ac <__NVIC_GetPriorityGrouping>
 8001430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	6978      	ldr	r0, [r7, #20]
 8001438:	f7ff ff8e 	bl	8001358 <NVIC_EncodePriority>
 800143c:	4602      	mov	r2, r0
 800143e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff5d 	bl	8001304 <__NVIC_SetPriority>
}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff31 	bl	80012c8 <__NVIC_EnableIRQ>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ffa2 	bl	80013c0 <SysTick_Config>
 800147c:	4603      	mov	r3, r0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001496:	e154      	b.n	8001742 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	2101      	movs	r1, #1
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	fa01 f303 	lsl.w	r3, r1, r3
 80014a4:	4013      	ands	r3, r2
 80014a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 8146 	beq.w	800173c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d005      	beq.n	80014c8 <HAL_GPIO_Init+0x40>
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d130      	bne.n	800152a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	2203      	movs	r2, #3
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	68da      	ldr	r2, [r3, #12]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014fe:	2201      	movs	r2, #1
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4013      	ands	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	091b      	lsrs	r3, r3, #4
 8001514:	f003 0201 	and.w	r2, r3, #1
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	2b03      	cmp	r3, #3
 8001534:	d017      	beq.n	8001566 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	2203      	movs	r2, #3
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	4013      	ands	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d123      	bne.n	80015ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	08da      	lsrs	r2, r3, #3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3208      	adds	r2, #8
 800157a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800157e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	220f      	movs	r2, #15
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	691a      	ldr	r2, [r3, #16]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	08da      	lsrs	r2, r3, #3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3208      	adds	r2, #8
 80015b4:	6939      	ldr	r1, [r7, #16]
 80015b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	2203      	movs	r2, #3
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0203 	and.w	r2, r3, #3
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 80a0 	beq.w	800173c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fc:	4b58      	ldr	r3, [pc, #352]	; (8001760 <HAL_GPIO_Init+0x2d8>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a57      	ldr	r2, [pc, #348]	; (8001760 <HAL_GPIO_Init+0x2d8>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b55      	ldr	r3, [pc, #340]	; (8001760 <HAL_GPIO_Init+0x2d8>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001614:	4a53      	ldr	r2, [pc, #332]	; (8001764 <HAL_GPIO_Init+0x2dc>)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	3302      	adds	r3, #2
 800161c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	220f      	movs	r2, #15
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800163e:	d019      	beq.n	8001674 <HAL_GPIO_Init+0x1ec>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a49      	ldr	r2, [pc, #292]	; (8001768 <HAL_GPIO_Init+0x2e0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d013      	beq.n	8001670 <HAL_GPIO_Init+0x1e8>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a48      	ldr	r2, [pc, #288]	; (800176c <HAL_GPIO_Init+0x2e4>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d00d      	beq.n	800166c <HAL_GPIO_Init+0x1e4>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a47      	ldr	r2, [pc, #284]	; (8001770 <HAL_GPIO_Init+0x2e8>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d007      	beq.n	8001668 <HAL_GPIO_Init+0x1e0>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a46      	ldr	r2, [pc, #280]	; (8001774 <HAL_GPIO_Init+0x2ec>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d101      	bne.n	8001664 <HAL_GPIO_Init+0x1dc>
 8001660:	2304      	movs	r3, #4
 8001662:	e008      	b.n	8001676 <HAL_GPIO_Init+0x1ee>
 8001664:	2305      	movs	r3, #5
 8001666:	e006      	b.n	8001676 <HAL_GPIO_Init+0x1ee>
 8001668:	2303      	movs	r3, #3
 800166a:	e004      	b.n	8001676 <HAL_GPIO_Init+0x1ee>
 800166c:	2302      	movs	r3, #2
 800166e:	e002      	b.n	8001676 <HAL_GPIO_Init+0x1ee>
 8001670:	2301      	movs	r3, #1
 8001672:	e000      	b.n	8001676 <HAL_GPIO_Init+0x1ee>
 8001674:	2300      	movs	r3, #0
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	f002 0203 	and.w	r2, r2, #3
 800167c:	0092      	lsls	r2, r2, #2
 800167e:	4093      	lsls	r3, r2
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4313      	orrs	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001686:	4937      	ldr	r1, [pc, #220]	; (8001764 <HAL_GPIO_Init+0x2dc>)
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	089b      	lsrs	r3, r3, #2
 800168c:	3302      	adds	r3, #2
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001694:	4b38      	ldr	r3, [pc, #224]	; (8001778 <HAL_GPIO_Init+0x2f0>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	43db      	mvns	r3, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016b8:	4a2f      	ldr	r2, [pc, #188]	; (8001778 <HAL_GPIO_Init+0x2f0>)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016be:	4b2e      	ldr	r3, [pc, #184]	; (8001778 <HAL_GPIO_Init+0x2f0>)
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4013      	ands	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4313      	orrs	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016e2:	4a25      	ldr	r2, [pc, #148]	; (8001778 <HAL_GPIO_Init+0x2f0>)
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016e8:	4b23      	ldr	r3, [pc, #140]	; (8001778 <HAL_GPIO_Init+0x2f0>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4313      	orrs	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800170c:	4a1a      	ldr	r2, [pc, #104]	; (8001778 <HAL_GPIO_Init+0x2f0>)
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001712:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_GPIO_Init+0x2f0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	43db      	mvns	r3, r3
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	4013      	ands	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001736:	4a10      	ldr	r2, [pc, #64]	; (8001778 <HAL_GPIO_Init+0x2f0>)
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	3301      	adds	r3, #1
 8001740:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	fa22 f303 	lsr.w	r3, r2, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	f47f aea3 	bne.w	8001498 <HAL_GPIO_Init+0x10>
  }
}
 8001752:	bf00      	nop
 8001754:	bf00      	nop
 8001756:	371c      	adds	r7, #28
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	40021000 	.word	0x40021000
 8001764:	40010000 	.word	0x40010000
 8001768:	48000400 	.word	0x48000400
 800176c:	48000800 	.word	0x48000800
 8001770:	48000c00 	.word	0x48000c00
 8001774:	48001000 	.word	0x48001000
 8001778:	40010400 	.word	0x40010400

0800177c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]
 8001788:	4613      	mov	r3, r2
 800178a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800178c:	787b      	ldrb	r3, [r7, #1]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001792:	887a      	ldrh	r2, [r7, #2]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001798:	e002      	b.n	80017a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800179a:	887a      	ldrh	r2, [r7, #2]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017be:	887a      	ldrh	r2, [r7, #2]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4013      	ands	r3, r2
 80017c4:	041a      	lsls	r2, r3, #16
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	43d9      	mvns	r1, r3
 80017ca:	887b      	ldrh	r3, [r7, #2]
 80017cc:	400b      	ands	r3, r1
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	619a      	str	r2, [r3, #24]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e081      	b.n	80018f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d106      	bne.n	800180c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff faba 	bl	8000d80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2224      	movs	r2, #36	; 0x24
 8001810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0201 	bic.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001830:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001840:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d107      	bne.n	800185a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	e006      	b.n	8001868 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001866:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	2b02      	cmp	r3, #2
 800186e:	d104      	bne.n	800187a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001878:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6812      	ldr	r2, [r2, #0]
 8001884:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800188c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800189c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691a      	ldr	r2, [r3, #16]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69d9      	ldr	r1, [r3, #28]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1a      	ldr	r2, [r3, #32]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0201 	orr.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2220      	movs	r2, #32
 80018e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b20      	cmp	r3, #32
 8001912:	d138      	bne.n	8001986 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800191a:	2b01      	cmp	r3, #1
 800191c:	d101      	bne.n	8001922 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800191e:	2302      	movs	r3, #2
 8001920:	e032      	b.n	8001988 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2224      	movs	r2, #36	; 0x24
 800192e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 0201 	bic.w	r2, r2, #1
 8001940:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001950:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6819      	ldr	r1, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f042 0201 	orr.w	r2, r2, #1
 8001970:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2220      	movs	r2, #32
 8001976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001982:	2300      	movs	r3, #0
 8001984:	e000      	b.n	8001988 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001986:	2302      	movs	r3, #2
  }
}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b20      	cmp	r3, #32
 80019a8:	d139      	bne.n	8001a1e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e033      	b.n	8001a20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2224      	movs	r2, #36	; 0x24
 80019c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0201 	bic.w	r2, r2, #1
 80019d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	021b      	lsls	r3, r3, #8
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f042 0201 	orr.w	r2, r2, #1
 8001a08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2220      	movs	r2, #32
 8001a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e000      	b.n	8001a20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a1e:	2302      	movs	r3, #2
  }
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2e:	b08b      	sub	sp, #44	; 0x2c
 8001a30:	af06      	add	r7, sp, #24
 8001a32:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e0c4      	b.n	8001bc8 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d106      	bne.n	8001a58 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f008 fe78 	bl	800a748 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f004 ffbb 	bl	80069e0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]
 8001a6e:	e040      	b.n	8001af2 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	440b      	add	r3, r1
 8001a80:	3301      	adds	r3, #1
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	440b      	add	r3, r1
 8001a96:	7bfa      	ldrb	r2, [r7, #15]
 8001a98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	440b      	add	r3, r1
 8001aaa:	3303      	adds	r3, #3
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ab0:	7bfa      	ldrb	r2, [r7, #15]
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	440b      	add	r3, r1
 8001abe:	3338      	adds	r3, #56	; 0x38
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ac4:	7bfa      	ldrb	r2, [r7, #15]
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	440b      	add	r3, r1
 8001ad2:	333c      	adds	r3, #60	; 0x3c
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ad8:	7bfa      	ldrb	r2, [r7, #15]
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	440b      	add	r3, r1
 8001ae6:	3340      	adds	r3, #64	; 0x40
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	3301      	adds	r3, #1
 8001af0:	73fb      	strb	r3, [r7, #15]
 8001af2:	7bfa      	ldrb	r2, [r7, #15]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d3b9      	bcc.n	8001a70 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001afc:	2300      	movs	r3, #0
 8001afe:	73fb      	strb	r3, [r7, #15]
 8001b00:	e044      	b.n	8001b8c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b02:	7bfa      	ldrb	r2, [r7, #15]
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	440b      	add	r3, r1
 8001b10:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b18:	7bfa      	ldrb	r2, [r7, #15]
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	440b      	add	r3, r1
 8001b26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b2a:	7bfa      	ldrb	r2, [r7, #15]
 8001b2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b2e:	7bfa      	ldrb	r2, [r7, #15]
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	440b      	add	r3, r1
 8001b3c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b44:	7bfa      	ldrb	r2, [r7, #15]
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	440b      	add	r3, r1
 8001b52:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b5a:	7bfa      	ldrb	r2, [r7, #15]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	440b      	add	r3, r1
 8001b68:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b70:	7bfa      	ldrb	r2, [r7, #15]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	440b      	add	r3, r1
 8001b7e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
 8001b8c:	7bfa      	ldrb	r2, [r7, #15]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d3b5      	bcc.n	8001b02 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	603b      	str	r3, [r7, #0]
 8001b9c:	687e      	ldr	r6, [r7, #4]
 8001b9e:	466d      	mov	r5, sp
 8001ba0:	f106 0410 	add.w	r4, r6, #16
 8001ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ba6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ba8:	6823      	ldr	r3, [r4, #0]
 8001baa:	602b      	str	r3, [r5, #0]
 8001bac:	1d33      	adds	r3, r6, #4
 8001bae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bb0:	6838      	ldr	r0, [r7, #0]
 8001bb2:	f004 ff30 	bl	8006a16 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bd0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d101      	bne.n	8001be6 <HAL_PCD_Start+0x16>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e016      	b.n	8001c14 <HAL_PCD_Start+0x44>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f004 fedd 	bl	80069b2 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f009 f81c 	bl	800ac38 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f007 f99c 	bl	8008f42 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f007 f995 	bl	8008f58 <USB_ReadInterrupts>
 8001c2e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 fa9a 	bl	8002174 <PCD_EP_ISR_Handler>

    return;
 8001c40:	e0bd      	b.n	8001dbe <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d013      	beq.n	8001c74 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c5e:	b292      	uxth	r2, r2
 8001c60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f008 fe10 	bl	800a88a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f8a9 	bl	8001dc4 <HAL_PCD_SetAddress>

    return;
 8001c72:	e0a4      	b.n	8001dbe <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00c      	beq.n	8001c98 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c90:	b292      	uxth	r2, r2
 8001c92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001c96:	e092      	b.n	8001dbe <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00c      	beq.n	8001cbc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cb4:	b292      	uxth	r2, r2
 8001cb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001cba:	e080      	b.n	8001dbe <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d027      	beq.n	8001d16 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0204 	bic.w	r2, r2, #4
 8001cd8:	b292      	uxth	r2, r2
 8001cda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0208 	bic.w	r2, r2, #8
 8001cf0:	b292      	uxth	r2, r2
 8001cf2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f008 fe00 	bl	800a8fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d0e:	b292      	uxth	r2, r2
 8001d10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001d14:	e053      	b.n	8001dbe <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d027      	beq.n	8001d70 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0208 	orr.w	r2, r2, #8
 8001d32:	b292      	uxth	r2, r2
 8001d34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d4a:	b292      	uxth	r2, r2
 8001d4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0204 	orr.w	r2, r2, #4
 8001d62:	b292      	uxth	r2, r2
 8001d64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f008 fdad 	bl	800a8c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001d6e:	e026      	b.n	8001dbe <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00f      	beq.n	8001d9a <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d8c:	b292      	uxth	r2, r2
 8001d8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f008 fd6b 	bl	800a86e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001d98:	e011      	b.n	8001dbe <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00c      	beq.n	8001dbe <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001db6:	b292      	uxth	r2, r2
 8001db8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001dbc:	bf00      	nop
  }
}
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <HAL_PCD_SetAddress+0x1a>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e013      	b.n	8001e06 <HAL_PCD_SetAddress+0x42>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	78fa      	ldrb	r2, [r7, #3]
 8001dea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	78fa      	ldrb	r2, [r7, #3]
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f007 f88f 	bl	8008f1a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	4608      	mov	r0, r1
 8001e18:	4611      	mov	r1, r2
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	70fb      	strb	r3, [r7, #3]
 8001e20:	460b      	mov	r3, r1
 8001e22:	803b      	strh	r3, [r7, #0]
 8001e24:	4613      	mov	r3, r2
 8001e26:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	da0e      	bge.n	8001e52 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	4413      	add	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	705a      	strb	r2, [r3, #1]
 8001e50:	e00e      	b.n	8001e70 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	f003 0207 	and.w	r2, r3, #7
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	4413      	add	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e7c:	883a      	ldrh	r2, [r7, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	78ba      	ldrb	r2, [r7, #2]
 8001e86:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e88:	78bb      	ldrb	r3, [r7, #2]
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d102      	bne.n	8001e94 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_PCD_EP_Open+0x94>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e00e      	b.n	8001ec0 <HAL_PCD_EP_Open+0xb2>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68f9      	ldr	r1, [r7, #12]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f004 fdd1 	bl	8006a58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001ebe:	7afb      	ldrb	r3, [r7, #11]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	da0e      	bge.n	8001efa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	1c5a      	adds	r2, r3, #1
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	4413      	add	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	705a      	strb	r2, [r3, #1]
 8001ef8:	e00e      	b.n	8001f18 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001efa:	78fb      	ldrb	r3, [r7, #3]
 8001efc:	f003 0207 	and.w	r2, r3, #7
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	4413      	add	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_PCD_EP_Close+0x6a>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e00e      	b.n	8001f50 <HAL_PCD_EP_Close+0x88>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68f9      	ldr	r1, [r7, #12]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f005 f94d 	bl	80071e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	607a      	str	r2, [r7, #4]
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	460b      	mov	r3, r1
 8001f66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f68:	7afb      	ldrb	r3, [r7, #11]
 8001f6a:	f003 0207 	and.w	r2, r3, #7
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	2200      	movs	r2, #0
 8001f96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f98:	7afb      	ldrb	r3, [r7, #11]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6979      	ldr	r1, [r7, #20]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f005 fb05 	bl	80075ba <USB_EPStartXfer>

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b086      	sub	sp, #24
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	60f8      	str	r0, [r7, #12]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	603b      	str	r3, [r7, #0]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fca:	7afb      	ldrb	r3, [r7, #11]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	4413      	add	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	2201      	movs	r2, #1
 8002004:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002006:	7afb      	ldrb	r3, [r7, #11]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	b2da      	uxtb	r2, r3
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6979      	ldr	r1, [r7, #20]
 8002018:	4618      	mov	r0, r3
 800201a:	f005 face 	bl	80075ba <USB_EPStartXfer>

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	f003 0207 	and.w	r2, r3, #7
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	429a      	cmp	r2, r3
 8002040:	d901      	bls.n	8002046 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e03e      	b.n	80020c4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002046:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800204a:	2b00      	cmp	r3, #0
 800204c:	da0e      	bge.n	800206c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800204e:	78fb      	ldrb	r3, [r7, #3]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2201      	movs	r2, #1
 8002068:	705a      	strb	r2, [r3, #1]
 800206a:	e00c      	b.n	8002086 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800206c:	78fa      	ldrb	r2, [r7, #3]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2201      	movs	r2, #1
 800208a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	b2da      	uxtb	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_PCD_EP_SetStall+0x7e>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e00e      	b.n	80020c4 <HAL_PCD_EP_SetStall+0x9c>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68f9      	ldr	r1, [r7, #12]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f006 fe31 	bl	8008d1c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	f003 020f 	and.w	r2, r3, #15
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d901      	bls.n	80020ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e040      	b.n	800216c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	da0e      	bge.n	8002110 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2201      	movs	r2, #1
 800210c:	705a      	strb	r2, [r3, #1]
 800210e:	e00e      	b.n	800212e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	f003 0207 	and.w	r2, r3, #7
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	b2da      	uxtb	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_PCD_EP_ClrStall+0x82>
 800214a:	2302      	movs	r3, #2
 800214c:	e00e      	b.n	800216c <HAL_PCD_EP_ClrStall+0xa0>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68f9      	ldr	r1, [r7, #12]
 800215c:	4618      	mov	r0, r3
 800215e:	f006 fe2e 	bl	8008dbe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b096      	sub	sp, #88	; 0x58
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800217c:	e3bf      	b.n	80028fe <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002186:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800218a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800218e:	b2db      	uxtb	r3, r3
 8002190:	f003 030f 	and.w	r3, r3, #15
 8002194:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002198:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800219c:	2b00      	cmp	r3, #0
 800219e:	f040 8179 	bne.w	8002494 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80021a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d152      	bne.n	8002254 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80021ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021be:	81fb      	strh	r3, [r7, #14]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	89fb      	ldrh	r3, [r7, #14]
 80021c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3328      	adds	r3, #40	; 0x28
 80021d6:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	4413      	add	r3, r2
 80021ec:	3302      	adds	r3, #2
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002202:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002206:	695a      	ldr	r2, [r3, #20]
 8002208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	441a      	add	r2, r3
 800220e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002210:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002212:	2100      	movs	r1, #0
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f008 fb10 	bl	800a83a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 836b 	beq.w	80028fe <PCD_EP_ISR_Handler+0x78a>
 8002228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	2b00      	cmp	r3, #0
 800222e:	f040 8366 	bne.w	80028fe <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800223e:	b2da      	uxtb	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	b292      	uxth	r2, r2
 8002246:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002252:	e354      	b.n	80028fe <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800225a:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002266:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800226a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800226e:	2b00      	cmp	r3, #0
 8002270:	d034      	beq.n	80022dc <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800227a:	b29b      	uxth	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	3306      	adds	r3, #6
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	4413      	add	r3, r2
 8002290:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800229a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800229c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80022a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022aa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80022ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ae:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	f006 fea7 	bl	8009004 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	b29a      	uxth	r2, r3
 80022be:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022c2:	4013      	ands	r3, r2
 80022c4:	823b      	strh	r3, [r7, #16]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	8a3a      	ldrh	r2, [r7, #16]
 80022cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022d0:	b292      	uxth	r2, r2
 80022d2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f008 fa83 	bl	800a7e0 <HAL_PCD_SetupStageCallback>
 80022da:	e310      	b.n	80028fe <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80022dc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f280 830c 	bge.w	80028fe <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022f2:	4013      	ands	r3, r2
 80022f4:	83fb      	strh	r3, [r7, #30]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	8bfa      	ldrh	r2, [r7, #30]
 80022fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002300:	b292      	uxth	r2, r2
 8002302:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800230c:	b29b      	uxth	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	3306      	adds	r3, #6
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	4413      	add	r3, r2
 8002322:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800232c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800232e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d019      	beq.n	800236c <PCD_EP_ISR_Handler+0x1f8>
 8002338:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d015      	beq.n	800236c <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002346:	6959      	ldr	r1, [r3, #20]
 8002348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800234a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800234c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800234e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002350:	b29b      	uxth	r3, r3
 8002352:	f006 fe57 	bl	8009004 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002358:	695a      	ldr	r2, [r3, #20]
 800235a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	441a      	add	r2, r3
 8002360:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002362:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002364:	2100      	movs	r1, #0
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f008 fa4c 	bl	800a804 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002376:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800237a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800237e:	2b00      	cmp	r3, #0
 8002380:	f040 82bd 	bne.w	80028fe <PCD_EP_ISR_Handler+0x78a>
 8002384:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002388:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800238c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002390:	f000 82b5 	beq.w	80028fe <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	61bb      	str	r3, [r7, #24]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	4413      	add	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023be:	b29a      	uxth	r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	801a      	strh	r2, [r3, #0]
 80023c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	2b3e      	cmp	r3, #62	; 0x3e
 80023ca:	d91d      	bls.n	8002408 <PCD_EP_ISR_Handler+0x294>
 80023cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	095b      	lsrs	r3, r3, #5
 80023d2:	647b      	str	r3, [r7, #68]	; 0x44
 80023d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d102      	bne.n	80023e6 <PCD_EP_ISR_Handler+0x272>
 80023e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e2:	3b01      	subs	r3, #1
 80023e4:	647b      	str	r3, [r7, #68]	; 0x44
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	029b      	lsls	r3, r3, #10
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	4313      	orrs	r3, r2
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002400:	b29a      	uxth	r2, r3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	801a      	strh	r2, [r3, #0]
 8002406:	e026      	b.n	8002456 <PCD_EP_ISR_Handler+0x2e2>
 8002408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10a      	bne.n	8002426 <PCD_EP_ISR_Handler+0x2b2>
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	b29b      	uxth	r3, r3
 8002416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800241a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800241e:	b29a      	uxth	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	801a      	strh	r2, [r3, #0]
 8002424:	e017      	b.n	8002456 <PCD_EP_ISR_Handler+0x2e2>
 8002426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	085b      	lsrs	r3, r3, #1
 800242c:	647b      	str	r3, [r7, #68]	; 0x44
 800242e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <PCD_EP_ISR_Handler+0x2cc>
 800243a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800243c:	3301      	adds	r3, #1
 800243e:	647b      	str	r3, [r7, #68]	; 0x44
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	b29a      	uxth	r2, r3
 8002446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002448:	b29b      	uxth	r3, r3
 800244a:	029b      	lsls	r3, r3, #10
 800244c:	b29b      	uxth	r3, r3
 800244e:	4313      	orrs	r3, r2
 8002450:	b29a      	uxth	r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	b29b      	uxth	r3, r3
 800245e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002466:	827b      	strh	r3, [r7, #18]
 8002468:	8a7b      	ldrh	r3, [r7, #18]
 800246a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800246e:	827b      	strh	r3, [r7, #18]
 8002470:	8a7b      	ldrh	r3, [r7, #18]
 8002472:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002476:	827b      	strh	r3, [r7, #18]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	8a7b      	ldrh	r3, [r7, #18]
 800247e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800248a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800248e:	b29b      	uxth	r3, r3
 8002490:	8013      	strh	r3, [r2, #0]
 8002492:	e234      	b.n	80028fe <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80024a8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f280 80fc 	bge.w	80026aa <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024c8:	4013      	ands	r3, r2
 80024ca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80024e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024e4:	b292      	uxth	r2, r2
 80024e6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80024e8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	4413      	add	r3, r2
 80024fc:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80024fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002500:	7b1b      	ldrb	r3, [r3, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d125      	bne.n	8002552 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800250e:	b29b      	uxth	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4413      	add	r3, r2
 800251a:	3306      	adds	r3, #6
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6812      	ldr	r2, [r2, #0]
 8002522:	4413      	add	r3, r2
 8002524:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800252e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002532:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 8092 	beq.w	8002660 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002542:	6959      	ldr	r1, [r3, #20]
 8002544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002546:	88da      	ldrh	r2, [r3, #6]
 8002548:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800254c:	f006 fd5a 	bl	8009004 <USB_ReadPMA>
 8002550:	e086      	b.n	8002660 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002554:	78db      	ldrb	r3, [r3, #3]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d10a      	bne.n	8002570 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800255a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800255e:	461a      	mov	r2, r3
 8002560:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f9d9 	bl	800291a <HAL_PCD_EP_DB_Receive>
 8002568:	4603      	mov	r3, r0
 800256a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800256e:	e077      	b.n	8002660 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	461a      	mov	r2, r3
 8002576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	b29b      	uxth	r3, r3
 8002582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	441a      	add	r2, r3
 800259c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80025a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d024      	beq.n	8002618 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4413      	add	r3, r2
 80025e2:	3302      	adds	r3, #2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025f6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80025fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d02e      	beq.n	8002660 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6818      	ldr	r0, [r3, #0]
 8002606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002608:	6959      	ldr	r1, [r3, #20]
 800260a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800260c:	891a      	ldrh	r2, [r3, #8]
 800260e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002612:	f006 fcf7 	bl	8009004 <USB_ReadPMA>
 8002616:	e023      	b.n	8002660 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002620:	b29b      	uxth	r3, r3
 8002622:	461a      	mov	r2, r3
 8002624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4413      	add	r3, r2
 800262c:	3306      	adds	r3, #6
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	4413      	add	r3, r2
 8002636:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002640:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002644:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002648:	2b00      	cmp	r3, #0
 800264a:	d009      	beq.n	8002660 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6818      	ldr	r0, [r3, #0]
 8002650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002652:	6959      	ldr	r1, [r3, #20]
 8002654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002656:	895a      	ldrh	r2, [r3, #10]
 8002658:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800265c:	f006 fcd2 	bl	8009004 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002662:	69da      	ldr	r2, [r3, #28]
 8002664:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002668:	441a      	add	r2, r3
 800266a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800266c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800266e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002676:	441a      	add	r2, r3
 8002678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800267a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800267c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d005      	beq.n	8002690 <PCD_EP_ISR_Handler+0x51c>
 8002684:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	429a      	cmp	r2, r3
 800268e:	d206      	bcs.n	800269e <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	4619      	mov	r1, r3
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f008 f8b4 	bl	800a804 <HAL_PCD_DataOutStageCallback>
 800269c:	e005      	b.n	80026aa <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026a4:	4618      	mov	r0, r3
 80026a6:	f004 ff88 	bl	80075ba <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80026aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80026ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 8123 	beq.w	80028fe <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80026b8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	b29b      	uxth	r3, r3
 80026de:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80026e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	461a      	mov	r2, r3
 80026f0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	441a      	add	r2, r3
 80026f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80026fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002704:	b29b      	uxth	r3, r3
 8002706:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800270a:	78db      	ldrb	r3, [r3, #3]
 800270c:	2b01      	cmp	r3, #1
 800270e:	f040 80a2 	bne.w	8002856 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8002712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002714:	2200      	movs	r2, #0
 8002716:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800271a:	7b1b      	ldrb	r3, [r3, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 8093 	beq.w	8002848 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002722:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272a:	2b00      	cmp	r3, #0
 800272c:	d046      	beq.n	80027bc <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800272e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002730:	785b      	ldrb	r3, [r3, #1]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d126      	bne.n	8002784 <PCD_EP_ISR_Handler+0x610>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002744:	b29b      	uxth	r3, r3
 8002746:	461a      	mov	r2, r3
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	4413      	add	r3, r2
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
 800274e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	011a      	lsls	r2, r3, #4
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	4413      	add	r3, r2
 8002758:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800275c:	623b      	str	r3, [r7, #32]
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	b29b      	uxth	r3, r3
 8002764:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002768:	b29a      	uxth	r2, r3
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	801a      	strh	r2, [r3, #0]
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	b29b      	uxth	r3, r3
 8002774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800277c:	b29a      	uxth	r2, r3
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	801a      	strh	r2, [r3, #0]
 8002782:	e061      	b.n	8002848 <PCD_EP_ISR_Handler+0x6d4>
 8002784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002786:	785b      	ldrb	r3, [r3, #1]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d15d      	bne.n	8002848 <PCD_EP_ISR_Handler+0x6d4>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800279a:	b29b      	uxth	r3, r3
 800279c:	461a      	mov	r2, r3
 800279e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a0:	4413      	add	r3, r2
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	011a      	lsls	r2, r3, #4
 80027aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ac:	4413      	add	r3, r2
 80027ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80027b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b6:	2200      	movs	r2, #0
 80027b8:	801a      	strh	r2, [r3, #0]
 80027ba:	e045      	b.n	8002848 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c4:	785b      	ldrb	r3, [r3, #1]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d126      	bne.n	8002818 <PCD_EP_ISR_Handler+0x6a4>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	637b      	str	r3, [r7, #52]	; 0x34
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027d8:	b29b      	uxth	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027de:	4413      	add	r3, r2
 80027e0:	637b      	str	r3, [r7, #52]	; 0x34
 80027e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	011a      	lsls	r2, r3, #4
 80027e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ea:	4413      	add	r3, r2
 80027ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027f0:	633b      	str	r3, [r7, #48]	; 0x30
 80027f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002800:	801a      	strh	r2, [r3, #0]
 8002802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	b29b      	uxth	r3, r3
 8002808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800280c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002810:	b29a      	uxth	r2, r3
 8002812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002814:	801a      	strh	r2, [r3, #0]
 8002816:	e017      	b.n	8002848 <PCD_EP_ISR_Handler+0x6d4>
 8002818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800281a:	785b      	ldrb	r3, [r3, #1]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d113      	bne.n	8002848 <PCD_EP_ISR_Handler+0x6d4>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002828:	b29b      	uxth	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800282e:	4413      	add	r3, r2
 8002830:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	011a      	lsls	r2, r3, #4
 8002838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800283a:	4413      	add	r3, r2
 800283c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002840:	63bb      	str	r3, [r7, #56]	; 0x38
 8002842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002844:	2200      	movs	r2, #0
 8002846:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	4619      	mov	r1, r3
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f007 fff3 	bl	800a83a <HAL_PCD_DataInStageCallback>
 8002854:	e053      	b.n	80028fe <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002856:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800285a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285e:	2b00      	cmp	r3, #0
 8002860:	d146      	bne.n	80028f0 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800286a:	b29b      	uxth	r3, r3
 800286c:	461a      	mov	r2, r3
 800286e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4413      	add	r3, r2
 8002876:	3302      	adds	r3, #2
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6812      	ldr	r2, [r2, #0]
 800287e:	4413      	add	r3, r2
 8002880:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800288a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800288e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002890:	699a      	ldr	r2, [r3, #24]
 8002892:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002896:	429a      	cmp	r2, r3
 8002898:	d907      	bls.n	80028aa <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 800289a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800289c:	699a      	ldr	r2, [r3, #24]
 800289e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80028a2:	1ad2      	subs	r2, r2, r3
 80028a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028a6:	619a      	str	r2, [r3, #24]
 80028a8:	e002      	b.n	80028b0 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80028aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80028b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d106      	bne.n	80028c6 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	4619      	mov	r1, r3
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f007 ffbb 	bl	800a83a <HAL_PCD_DataInStageCallback>
 80028c4:	e01b      	b.n	80028fe <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80028c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c8:	695a      	ldr	r2, [r3, #20]
 80028ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80028ce:	441a      	add	r2, r3
 80028d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80028d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d6:	69da      	ldr	r2, [r3, #28]
 80028d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80028dc:	441a      	add	r2, r3
 80028de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028e8:	4618      	mov	r0, r3
 80028ea:	f004 fe66 	bl	80075ba <USB_EPStartXfer>
 80028ee:	e006      	b.n	80028fe <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80028f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80028f4:	461a      	mov	r2, r3
 80028f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f91b 	bl	8002b34 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002906:	b29b      	uxth	r3, r3
 8002908:	b21b      	sxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	f6ff ac37 	blt.w	800217e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3758      	adds	r7, #88	; 0x58
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b088      	sub	sp, #32
 800291e:	af00      	add	r7, sp, #0
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	4613      	mov	r3, r2
 8002926:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d07e      	beq.n	8002a30 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800293a:	b29b      	uxth	r3, r3
 800293c:	461a      	mov	r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4413      	add	r3, r2
 8002946:	3302      	adds	r3, #2
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	6812      	ldr	r2, [r2, #0]
 800294e:	4413      	add	r3, r2
 8002950:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800295a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	699a      	ldr	r2, [r3, #24]
 8002960:	8b7b      	ldrh	r3, [r7, #26]
 8002962:	429a      	cmp	r2, r3
 8002964:	d306      	bcc.n	8002974 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	699a      	ldr	r2, [r3, #24]
 800296a:	8b7b      	ldrh	r3, [r7, #26]
 800296c:	1ad2      	subs	r2, r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	619a      	str	r2, [r3, #24]
 8002972:	e002      	b.n	800297a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2200      	movs	r2, #0
 8002978:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d123      	bne.n	80029ca <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	461a      	mov	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	b29b      	uxth	r3, r3
 8002994:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299c:	833b      	strh	r3, [r7, #24]
 800299e:	8b3b      	ldrh	r3, [r7, #24]
 80029a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80029a4:	833b      	strh	r3, [r7, #24]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	441a      	add	r2, r3
 80029b4:	8b3b      	ldrh	r3, [r7, #24]
 80029b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029ca:	88fb      	ldrh	r3, [r7, #6]
 80029cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d01f      	beq.n	8002a14 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ee:	82fb      	strh	r3, [r7, #22]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	441a      	add	r2, r3
 80029fe:	8afb      	ldrh	r3, [r7, #22]
 8002a00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a14:	8b7b      	ldrh	r3, [r7, #26]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 8087 	beq.w	8002b2a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	6959      	ldr	r1, [r3, #20]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	891a      	ldrh	r2, [r3, #8]
 8002a28:	8b7b      	ldrh	r3, [r7, #26]
 8002a2a:	f006 faeb 	bl	8009004 <USB_ReadPMA>
 8002a2e:	e07c      	b.n	8002b2a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4413      	add	r3, r2
 8002a44:	3306      	adds	r3, #6
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a58:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	699a      	ldr	r2, [r3, #24]
 8002a5e:	8b7b      	ldrh	r3, [r7, #26]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d306      	bcc.n	8002a72 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	699a      	ldr	r2, [r3, #24]
 8002a68:	8b7b      	ldrh	r3, [r7, #26]
 8002a6a:	1ad2      	subs	r2, r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	619a      	str	r2, [r3, #24]
 8002a70:	e002      	b.n	8002a78 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2200      	movs	r2, #0
 8002a76:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d123      	bne.n	8002ac8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a9a:	83fb      	strh	r3, [r7, #30]
 8002a9c:	8bfb      	ldrh	r3, [r7, #30]
 8002a9e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002aa2:	83fb      	strh	r3, [r7, #30]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	441a      	add	r2, r3
 8002ab2:	8bfb      	ldrh	r3, [r7, #30]
 8002ab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d11f      	bne.n	8002b12 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aec:	83bb      	strh	r3, [r7, #28]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	441a      	add	r2, r3
 8002afc:	8bbb      	ldrh	r3, [r7, #28]
 8002afe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b12:	8b7b      	ldrh	r3, [r7, #26]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6818      	ldr	r0, [r3, #0]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	6959      	ldr	r1, [r3, #20]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	895a      	ldrh	r2, [r3, #10]
 8002b24:	8b7b      	ldrh	r3, [r7, #26]
 8002b26:	f006 fa6d 	bl	8009004 <USB_ReadPMA>
    }
  }

  return count;
 8002b2a:	8b7b      	ldrh	r3, [r7, #26]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3720      	adds	r7, #32
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b0a4      	sub	sp, #144	; 0x90
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b42:	88fb      	ldrh	r3, [r7, #6]
 8002b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 81dd 	beq.w	8002f08 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	461a      	mov	r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4413      	add	r3, r2
 8002b62:	3302      	adds	r3, #2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	6812      	ldr	r2, [r2, #0]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b76:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	699a      	ldr	r2, [r3, #24]
 8002b7e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d907      	bls.n	8002b96 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	699a      	ldr	r2, [r3, #24]
 8002b8a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b8e:	1ad2      	subs	r2, r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	619a      	str	r2, [r3, #24]
 8002b94:	e002      	b.n	8002b9c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f040 80b9 	bne.w	8002d18 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	785b      	ldrb	r3, [r3, #1]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d126      	bne.n	8002bfc <HAL_PCD_EP_DB_Transmit+0xc8>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc2:	4413      	add	r3, r2
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	011a      	lsls	r2, r3, #4
 8002bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bce:	4413      	add	r3, r2
 8002bd0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be4:	801a      	strh	r2, [r3, #0]
 8002be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf8:	801a      	strh	r2, [r3, #0]
 8002bfa:	e01a      	b.n	8002c32 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	785b      	ldrb	r3, [r3, #1]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d116      	bne.n	8002c32 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	637b      	str	r3, [r7, #52]	; 0x34
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	461a      	mov	r2, r3
 8002c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c18:	4413      	add	r3, r2
 8002c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	011a      	lsls	r2, r3, #4
 8002c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c24:	4413      	add	r3, r2
 8002c26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c2a:	633b      	str	r3, [r7, #48]	; 0x30
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2e:	2200      	movs	r2, #0
 8002c30:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	785b      	ldrb	r3, [r3, #1]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d126      	bne.n	8002c8e <HAL_PCD_EP_DB_Transmit+0x15a>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	61fb      	str	r3, [r7, #28]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	461a      	mov	r2, r3
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	4413      	add	r3, r2
 8002c56:	61fb      	str	r3, [r7, #28]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	011a      	lsls	r2, r3, #4
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	4413      	add	r3, r2
 8002c62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c66:	61bb      	str	r3, [r7, #24]
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	801a      	strh	r2, [r3, #0]
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	801a      	strh	r2, [r3, #0]
 8002c8c:	e017      	b.n	8002cbe <HAL_PCD_EP_DB_Transmit+0x18a>
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	785b      	ldrb	r3, [r3, #1]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d113      	bne.n	8002cbe <HAL_PCD_EP_DB_Transmit+0x18a>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	4413      	add	r3, r2
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	011a      	lsls	r2, r3, #4
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cb6:	623b      	str	r3, [r7, #32]
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f007 fdb8 	bl	800a83a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cca:	88fb      	ldrh	r3, [r7, #6]
 8002ccc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 82fc 	beq.w	80032ce <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf0:	82fb      	strh	r3, [r7, #22]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	441a      	add	r2, r3
 8002d00:	8afb      	ldrh	r3, [r7, #22]
 8002d02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	8013      	strh	r3, [r2, #0]
 8002d16:	e2da      	b.n	80032ce <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d18:	88fb      	ldrh	r3, [r7, #6]
 8002d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d021      	beq.n	8002d66 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	461a      	mov	r2, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	441a      	add	r2, r3
 8002d4e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	f040 82ae 	bne.w	80032ce <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	695a      	ldr	r2, [r3, #20]
 8002d76:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d7a:	441a      	add	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	69da      	ldr	r2, [r3, #28]
 8002d84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d88:	441a      	add	r2, r3
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	6a1a      	ldr	r2, [r3, #32]
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d30b      	bcc.n	8002db2 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	6a1a      	ldr	r2, [r3, #32]
 8002da6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002daa:	1ad2      	subs	r2, r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	621a      	str	r2, [r3, #32]
 8002db0:	e017      	b.n	8002de2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d108      	bne.n	8002dcc <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002dba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002dbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002dca:	e00a      	b.n	8002de2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2200      	movs	r2, #0
 8002de0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	785b      	ldrb	r3, [r3, #1]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d165      	bne.n	8002eb6 <HAL_PCD_EP_DB_Transmit+0x382>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfe:	4413      	add	r3, r2
 8002e00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	011a      	lsls	r2, r3, #4
 8002e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e10:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e20:	801a      	strh	r2, [r3, #0]
 8002e22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e26:	2b3e      	cmp	r3, #62	; 0x3e
 8002e28:	d91d      	bls.n	8002e66 <HAL_PCD_EP_DB_Transmit+0x332>
 8002e2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e36:	f003 031f 	and.w	r3, r3, #31
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d102      	bne.n	8002e44 <HAL_PCD_EP_DB_Transmit+0x310>
 8002e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e40:	3b01      	subs	r3, #1
 8002e42:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	029b      	lsls	r3, r3, #10
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	4313      	orrs	r3, r2
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e62:	801a      	strh	r2, [r3, #0]
 8002e64:	e044      	b.n	8002ef0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002e66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10a      	bne.n	8002e84 <HAL_PCD_EP_DB_Transmit+0x350>
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e80:	801a      	strh	r2, [r3, #0]
 8002e82:	e035      	b.n	8002ef0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002e84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e88:	085b      	lsrs	r3, r3, #1
 8002e8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <HAL_PCD_EP_DB_Transmit+0x36a>
 8002e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	029b      	lsls	r3, r3, #10
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	4313      	orrs	r3, r2
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb2:	801a      	strh	r2, [r3, #0]
 8002eb4:	e01c      	b.n	8002ef0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	785b      	ldrb	r3, [r3, #1]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d118      	bne.n	8002ef0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	461a      	mov	r2, r3
 8002ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ed2:	4413      	add	r3, r2
 8002ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	011a      	lsls	r2, r3, #4
 8002edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ede:	4413      	add	r3, r2
 8002ee0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ee4:	643b      	str	r3, [r7, #64]	; 0x40
 8002ee6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eee:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	6959      	ldr	r1, [r3, #20]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	891a      	ldrh	r2, [r3, #8]
 8002efc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	f006 f839 	bl	8008f78 <USB_WritePMA>
 8002f06:	e1e2      	b.n	80032ce <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	461a      	mov	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3306      	adds	r3, #6
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	6812      	ldr	r2, [r2, #0]
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f30:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	699a      	ldr	r2, [r3, #24]
 8002f38:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d307      	bcc.n	8002f50 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	699a      	ldr	r2, [r3, #24]
 8002f44:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f48:	1ad2      	subs	r2, r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	619a      	str	r2, [r3, #24]
 8002f4e:	e002      	b.n	8002f56 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2200      	movs	r2, #0
 8002f54:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f040 80c0 	bne.w	80030e0 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	785b      	ldrb	r3, [r3, #1]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d126      	bne.n	8002fb6 <HAL_PCD_EP_DB_Transmit+0x482>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	461a      	mov	r2, r3
 8002f7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f7c:	4413      	add	r3, r2
 8002f7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	011a      	lsls	r2, r3, #4
 8002f86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f88:	4413      	add	r3, r2
 8002f8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f9e:	801a      	strh	r2, [r3, #0]
 8002fa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fb2:	801a      	strh	r2, [r3, #0]
 8002fb4:	e01a      	b.n	8002fec <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	785b      	ldrb	r3, [r3, #1]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d116      	bne.n	8002fec <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	667b      	str	r3, [r7, #100]	; 0x64
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	461a      	mov	r2, r3
 8002fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fd2:	4413      	add	r3, r2
 8002fd4:	667b      	str	r3, [r7, #100]	; 0x64
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	011a      	lsls	r2, r3, #4
 8002fdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fde:	4413      	add	r3, r2
 8002fe0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002fe4:	663b      	str	r3, [r7, #96]	; 0x60
 8002fe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fe8:	2200      	movs	r2, #0
 8002fea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	677b      	str	r3, [r7, #116]	; 0x74
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	785b      	ldrb	r3, [r3, #1]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d12b      	bne.n	8003052 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003008:	b29b      	uxth	r3, r3
 800300a:	461a      	mov	r2, r3
 800300c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800300e:	4413      	add	r3, r2
 8003010:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	011a      	lsls	r2, r3, #4
 8003018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800301a:	4413      	add	r3, r2
 800301c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003020:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003024:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	b29b      	uxth	r3, r3
 800302c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003030:	b29a      	uxth	r2, r3
 8003032:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003036:	801a      	strh	r2, [r3, #0]
 8003038:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	b29b      	uxth	r3, r3
 8003040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003048:	b29a      	uxth	r2, r3
 800304a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800304e:	801a      	strh	r2, [r3, #0]
 8003050:	e017      	b.n	8003082 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	785b      	ldrb	r3, [r3, #1]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d113      	bne.n	8003082 <HAL_PCD_EP_DB_Transmit+0x54e>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003062:	b29b      	uxth	r3, r3
 8003064:	461a      	mov	r2, r3
 8003066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003068:	4413      	add	r3, r2
 800306a:	677b      	str	r3, [r7, #116]	; 0x74
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	011a      	lsls	r2, r3, #4
 8003072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003074:	4413      	add	r3, r2
 8003076:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800307a:	673b      	str	r3, [r7, #112]	; 0x70
 800307c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800307e:	2200      	movs	r2, #0
 8003080:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	4619      	mov	r1, r3
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f007 fbd6 	bl	800a83a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003094:	2b00      	cmp	r3, #0
 8003096:	f040 811a 	bne.w	80032ce <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	461a      	mov	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	441a      	add	r2, r3
 80030c6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80030ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030da:	b29b      	uxth	r3, r3
 80030dc:	8013      	strh	r3, [r2, #0]
 80030de:	e0f6      	b.n	80032ce <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80030e0:	88fb      	ldrh	r3, [r7, #6]
 80030e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d121      	bne.n	800312e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003104:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	461a      	mov	r2, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	441a      	add	r2, r3
 8003116:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800311a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800311e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003122:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800312a:	b29b      	uxth	r3, r3
 800312c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003134:	2b01      	cmp	r3, #1
 8003136:	f040 80ca 	bne.w	80032ce <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	695a      	ldr	r2, [r3, #20]
 800313e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003142:	441a      	add	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	69da      	ldr	r2, [r3, #28]
 800314c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003150:	441a      	add	r2, r3
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	6a1a      	ldr	r2, [r3, #32]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	429a      	cmp	r2, r3
 8003160:	d30b      	bcc.n	800317a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	6a1a      	ldr	r2, [r3, #32]
 800316e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003172:	1ad2      	subs	r2, r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	621a      	str	r2, [r3, #32]
 8003178:	e017      	b.n	80031aa <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d108      	bne.n	8003194 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003182:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003186:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003192:	e00a      	b.n	80031aa <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2200      	movs	r2, #0
 80031a0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	657b      	str	r3, [r7, #84]	; 0x54
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	785b      	ldrb	r3, [r3, #1]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d165      	bne.n	8003284 <HAL_PCD_EP_DB_Transmit+0x750>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031cc:	4413      	add	r3, r2
 80031ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	011a      	lsls	r2, r3, #4
 80031d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031d8:	4413      	add	r3, r2
 80031da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031de:	65bb      	str	r3, [r7, #88]	; 0x58
 80031e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ee:	801a      	strh	r2, [r3, #0]
 80031f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031f4:	2b3e      	cmp	r3, #62	; 0x3e
 80031f6:	d91d      	bls.n	8003234 <HAL_PCD_EP_DB_Transmit+0x700>
 80031f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031fc:	095b      	lsrs	r3, r3, #5
 80031fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003200:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003204:	f003 031f 	and.w	r3, r3, #31
 8003208:	2b00      	cmp	r3, #0
 800320a:	d102      	bne.n	8003212 <HAL_PCD_EP_DB_Transmit+0x6de>
 800320c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800320e:	3b01      	subs	r3, #1
 8003210:	66bb      	str	r3, [r7, #104]	; 0x68
 8003212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	b29a      	uxth	r2, r3
 8003218:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800321a:	b29b      	uxth	r3, r3
 800321c:	029b      	lsls	r3, r3, #10
 800321e:	b29b      	uxth	r3, r3
 8003220:	4313      	orrs	r3, r2
 8003222:	b29b      	uxth	r3, r3
 8003224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800322c:	b29a      	uxth	r2, r3
 800322e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003230:	801a      	strh	r2, [r3, #0]
 8003232:	e041      	b.n	80032b8 <HAL_PCD_EP_DB_Transmit+0x784>
 8003234:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10a      	bne.n	8003252 <HAL_PCD_EP_DB_Transmit+0x71e>
 800323c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	b29b      	uxth	r3, r3
 8003242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800324a:	b29a      	uxth	r2, r3
 800324c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800324e:	801a      	strh	r2, [r3, #0]
 8003250:	e032      	b.n	80032b8 <HAL_PCD_EP_DB_Transmit+0x784>
 8003252:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003256:	085b      	lsrs	r3, r3, #1
 8003258:	66bb      	str	r3, [r7, #104]	; 0x68
 800325a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <HAL_PCD_EP_DB_Transmit+0x738>
 8003266:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003268:	3301      	adds	r3, #1
 800326a:	66bb      	str	r3, [r7, #104]	; 0x68
 800326c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	b29a      	uxth	r2, r3
 8003272:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003274:	b29b      	uxth	r3, r3
 8003276:	029b      	lsls	r3, r3, #10
 8003278:	b29b      	uxth	r3, r3
 800327a:	4313      	orrs	r3, r2
 800327c:	b29a      	uxth	r2, r3
 800327e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003280:	801a      	strh	r2, [r3, #0]
 8003282:	e019      	b.n	80032b8 <HAL_PCD_EP_DB_Transmit+0x784>
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	785b      	ldrb	r3, [r3, #1]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d115      	bne.n	80032b8 <HAL_PCD_EP_DB_Transmit+0x784>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003294:	b29b      	uxth	r3, r3
 8003296:	461a      	mov	r2, r3
 8003298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800329a:	4413      	add	r3, r2
 800329c:	657b      	str	r3, [r7, #84]	; 0x54
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	011a      	lsls	r2, r3, #4
 80032a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032a6:	4413      	add	r3, r2
 80032a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80032ac:	653b      	str	r3, [r7, #80]	; 0x50
 80032ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032b6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6818      	ldr	r0, [r3, #0]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	6959      	ldr	r1, [r3, #20]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	895a      	ldrh	r2, [r3, #10]
 80032c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	f005 fe55 	bl	8008f78 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032e8:	82bb      	strh	r3, [r7, #20]
 80032ea:	8abb      	ldrh	r3, [r7, #20]
 80032ec:	f083 0310 	eor.w	r3, r3, #16
 80032f0:	82bb      	strh	r3, [r7, #20]
 80032f2:	8abb      	ldrh	r3, [r7, #20]
 80032f4:	f083 0320 	eor.w	r3, r3, #32
 80032f8:	82bb      	strh	r3, [r7, #20]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	441a      	add	r2, r3
 8003308:	8abb      	ldrh	r3, [r7, #20]
 800330a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800330e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800331a:	b29b      	uxth	r3, r3
 800331c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3790      	adds	r7, #144	; 0x90
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	607b      	str	r3, [r7, #4]
 8003332:	460b      	mov	r3, r1
 8003334:	817b      	strh	r3, [r7, #10]
 8003336:	4613      	mov	r3, r2
 8003338:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800333a:	897b      	ldrh	r3, [r7, #10]
 800333c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00b      	beq.n	800335e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003346:	897b      	ldrh	r3, [r7, #10]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	4613      	mov	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4413      	add	r3, r2
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	e009      	b.n	8003372 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800335e:	897a      	ldrh	r2, [r7, #10]
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4413      	add	r3, r2
 8003370:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003372:	893b      	ldrh	r3, [r7, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d107      	bne.n	8003388 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2200      	movs	r2, #0
 800337c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	b29a      	uxth	r2, r3
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	80da      	strh	r2, [r3, #6]
 8003386:	e00b      	b.n	80033a0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	2201      	movs	r2, #1
 800338c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	b29a      	uxth	r2, r3
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	0c1b      	lsrs	r3, r3, #16
 800339a:	b29a      	uxth	r2, r3
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
	...

080033b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033c0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d102      	bne.n	80033d6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	f001 b823 	b.w	800441c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 817d 	beq.w	80036e6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80033ec:	4bbc      	ldr	r3, [pc, #752]	; (80036e0 <HAL_RCC_OscConfig+0x330>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 030c 	and.w	r3, r3, #12
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d00c      	beq.n	8003412 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033f8:	4bb9      	ldr	r3, [pc, #740]	; (80036e0 <HAL_RCC_OscConfig+0x330>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 030c 	and.w	r3, r3, #12
 8003400:	2b08      	cmp	r3, #8
 8003402:	d15c      	bne.n	80034be <HAL_RCC_OscConfig+0x10e>
 8003404:	4bb6      	ldr	r3, [pc, #728]	; (80036e0 <HAL_RCC_OscConfig+0x330>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800340c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003410:	d155      	bne.n	80034be <HAL_RCC_OscConfig+0x10e>
 8003412:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003416:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800341e:	fa93 f3a3 	rbit	r3, r3
 8003422:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003426:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800342a:	fab3 f383 	clz	r3, r3
 800342e:	b2db      	uxtb	r3, r3
 8003430:	095b      	lsrs	r3, r3, #5
 8003432:	b2db      	uxtb	r3, r3
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b01      	cmp	r3, #1
 800343c:	d102      	bne.n	8003444 <HAL_RCC_OscConfig+0x94>
 800343e:	4ba8      	ldr	r3, [pc, #672]	; (80036e0 <HAL_RCC_OscConfig+0x330>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	e015      	b.n	8003470 <HAL_RCC_OscConfig+0xc0>
 8003444:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003448:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003450:	fa93 f3a3 	rbit	r3, r3
 8003454:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003458:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800345c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003460:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003464:	fa93 f3a3 	rbit	r3, r3
 8003468:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800346c:	4b9c      	ldr	r3, [pc, #624]	; (80036e0 <HAL_RCC_OscConfig+0x330>)
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003474:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003478:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800347c:	fa92 f2a2 	rbit	r2, r2
 8003480:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003484:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003488:	fab2 f282 	clz	r2, r2
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	f042 0220 	orr.w	r2, r2, #32
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	f002 021f 	and.w	r2, r2, #31
 8003498:	2101      	movs	r1, #1
 800349a:	fa01 f202 	lsl.w	r2, r1, r2
 800349e:	4013      	ands	r3, r2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 811f 	beq.w	80036e4 <HAL_RCC_OscConfig+0x334>
 80034a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f040 8116 	bne.w	80036e4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	f000 bfaf 	b.w	800441c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ce:	d106      	bne.n	80034de <HAL_RCC_OscConfig+0x12e>
 80034d0:	4b83      	ldr	r3, [pc, #524]	; (80036e0 <HAL_RCC_OscConfig+0x330>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a82      	ldr	r2, [pc, #520]	; (80036e0 <HAL_RCC_OscConfig+0x330>)
 80034d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	e036      	b.n	800354c <HAL_RCC_OscConfig+0x19c>
 80034de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10c      	bne.n	8003508 <HAL_RCC_OscConfig+0x158>
 80034ee:	4b7c      	ldr	r3, [pc, #496]	; (80036e0 <HAL_RCC_OscConfig+0x330>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a7b      	ldr	r2, [pc, #492]	; (80036e0 <HAL_RCC_OscConfig+0x330>)
 80034f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	4b79      	ldr	r3, [pc, #484]	; (80036e0 <HAL_RCC_OscConfig+0x330>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a78      	ldr	r2, [pc, #480]	; (80036e0 <HAL_RCC_OscConfig+0x330>)
 8003500:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	e021      	b.n	800354c <HAL_RCC_OscConfig+0x19c>
 8003508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003518:	d10c      	bne.n	8003534 <HAL_RCC_OscConfig+0x184>
 800351a:	4b71      	ldr	r3, [pc, #452]	; (80036e0 <HAL_RCC_OscConfig+0x330>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a70      	ldr	r2, [pc, #448]	; (80036e0 <HAL_RCC_OscConfig+0x330>)
 8003520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	4b6e      	ldr	r3, [pc, #440]	; (80036e0 <HAL_RCC_OscConfig+0x330>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a6d      	ldr	r2, [pc, #436]	; (80036e0 <HAL_RCC_OscConfig+0x330>)
 800352c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	e00b      	b.n	800354c <HAL_RCC_OscConfig+0x19c>
 8003534:	4b6a      	ldr	r3, [pc, #424]	; (80036e0 <HAL_RCC_OscConfig+0x330>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a69      	ldr	r2, [pc, #420]	; (80036e0 <HAL_RCC_OscConfig+0x330>)
 800353a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	4b67      	ldr	r3, [pc, #412]	; (80036e0 <HAL_RCC_OscConfig+0x330>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a66      	ldr	r2, [pc, #408]	; (80036e0 <HAL_RCC_OscConfig+0x330>)
 8003546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800354a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800354c:	4b64      	ldr	r3, [pc, #400]	; (80036e0 <HAL_RCC_OscConfig+0x330>)
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	f023 020f 	bic.w	r2, r3, #15
 8003554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003558:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	495f      	ldr	r1, [pc, #380]	; (80036e0 <HAL_RCC_OscConfig+0x330>)
 8003562:	4313      	orrs	r3, r2
 8003564:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d059      	beq.n	800362a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003576:	f7fd fe45 	bl	8001204 <HAL_GetTick>
 800357a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357e:	e00a      	b.n	8003596 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003580:	f7fd fe40 	bl	8001204 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b64      	cmp	r3, #100	; 0x64
 800358e:	d902      	bls.n	8003596 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	f000 bf43 	b.w	800441c <HAL_RCC_OscConfig+0x106c>
 8003596:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800359a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80035a2:	fa93 f3a3 	rbit	r3, r3
 80035a6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80035aa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ae:	fab3 f383 	clz	r3, r3
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	095b      	lsrs	r3, r3, #5
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	f043 0301 	orr.w	r3, r3, #1
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d102      	bne.n	80035c8 <HAL_RCC_OscConfig+0x218>
 80035c2:	4b47      	ldr	r3, [pc, #284]	; (80036e0 <HAL_RCC_OscConfig+0x330>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	e015      	b.n	80035f4 <HAL_RCC_OscConfig+0x244>
 80035c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035cc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80035d4:	fa93 f3a3 	rbit	r3, r3
 80035d8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80035dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035e0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80035e4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80035e8:	fa93 f3a3 	rbit	r3, r3
 80035ec:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80035f0:	4b3b      	ldr	r3, [pc, #236]	; (80036e0 <HAL_RCC_OscConfig+0x330>)
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035f8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80035fc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003600:	fa92 f2a2 	rbit	r2, r2
 8003604:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003608:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800360c:	fab2 f282 	clz	r2, r2
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	f042 0220 	orr.w	r2, r2, #32
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	f002 021f 	and.w	r2, r2, #31
 800361c:	2101      	movs	r1, #1
 800361e:	fa01 f202 	lsl.w	r2, r1, r2
 8003622:	4013      	ands	r3, r2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0ab      	beq.n	8003580 <HAL_RCC_OscConfig+0x1d0>
 8003628:	e05d      	b.n	80036e6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362a:	f7fd fdeb 	bl	8001204 <HAL_GetTick>
 800362e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003632:	e00a      	b.n	800364a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003634:	f7fd fde6 	bl	8001204 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b64      	cmp	r3, #100	; 0x64
 8003642:	d902      	bls.n	800364a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	f000 bee9 	b.w	800441c <HAL_RCC_OscConfig+0x106c>
 800364a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800364e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003652:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003656:	fa93 f3a3 	rbit	r3, r3
 800365a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800365e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003662:	fab3 f383 	clz	r3, r3
 8003666:	b2db      	uxtb	r3, r3
 8003668:	095b      	lsrs	r3, r3, #5
 800366a:	b2db      	uxtb	r3, r3
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b01      	cmp	r3, #1
 8003674:	d102      	bne.n	800367c <HAL_RCC_OscConfig+0x2cc>
 8003676:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <HAL_RCC_OscConfig+0x330>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	e015      	b.n	80036a8 <HAL_RCC_OscConfig+0x2f8>
 800367c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003680:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003684:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003688:	fa93 f3a3 	rbit	r3, r3
 800368c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003690:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003694:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003698:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800369c:	fa93 f3a3 	rbit	r3, r3
 80036a0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80036a4:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <HAL_RCC_OscConfig+0x330>)
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036ac:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80036b0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80036b4:	fa92 f2a2 	rbit	r2, r2
 80036b8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80036bc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80036c0:	fab2 f282 	clz	r2, r2
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	f042 0220 	orr.w	r2, r2, #32
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	f002 021f 	and.w	r2, r2, #31
 80036d0:	2101      	movs	r1, #1
 80036d2:	fa01 f202 	lsl.w	r2, r1, r2
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1ab      	bne.n	8003634 <HAL_RCC_OscConfig+0x284>
 80036dc:	e003      	b.n	80036e6 <HAL_RCC_OscConfig+0x336>
 80036de:	bf00      	nop
 80036e0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 817d 	beq.w	80039f6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80036fc:	4ba6      	ldr	r3, [pc, #664]	; (8003998 <HAL_RCC_OscConfig+0x5e8>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 030c 	and.w	r3, r3, #12
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00b      	beq.n	8003720 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003708:	4ba3      	ldr	r3, [pc, #652]	; (8003998 <HAL_RCC_OscConfig+0x5e8>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 030c 	and.w	r3, r3, #12
 8003710:	2b08      	cmp	r3, #8
 8003712:	d172      	bne.n	80037fa <HAL_RCC_OscConfig+0x44a>
 8003714:	4ba0      	ldr	r3, [pc, #640]	; (8003998 <HAL_RCC_OscConfig+0x5e8>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d16c      	bne.n	80037fa <HAL_RCC_OscConfig+0x44a>
 8003720:	2302      	movs	r3, #2
 8003722:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003726:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800372a:	fa93 f3a3 	rbit	r3, r3
 800372e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003732:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003736:	fab3 f383 	clz	r3, r3
 800373a:	b2db      	uxtb	r3, r3
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	b2db      	uxtb	r3, r3
 8003740:	f043 0301 	orr.w	r3, r3, #1
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b01      	cmp	r3, #1
 8003748:	d102      	bne.n	8003750 <HAL_RCC_OscConfig+0x3a0>
 800374a:	4b93      	ldr	r3, [pc, #588]	; (8003998 <HAL_RCC_OscConfig+0x5e8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	e013      	b.n	8003778 <HAL_RCC_OscConfig+0x3c8>
 8003750:	2302      	movs	r3, #2
 8003752:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800375a:	fa93 f3a3 	rbit	r3, r3
 800375e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003762:	2302      	movs	r3, #2
 8003764:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003768:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800376c:	fa93 f3a3 	rbit	r3, r3
 8003770:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003774:	4b88      	ldr	r3, [pc, #544]	; (8003998 <HAL_RCC_OscConfig+0x5e8>)
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	2202      	movs	r2, #2
 800377a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800377e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003782:	fa92 f2a2 	rbit	r2, r2
 8003786:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800378a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800378e:	fab2 f282 	clz	r2, r2
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	f042 0220 	orr.w	r2, r2, #32
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	f002 021f 	and.w	r2, r2, #31
 800379e:	2101      	movs	r1, #1
 80037a0:	fa01 f202 	lsl.w	r2, r1, r2
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <HAL_RCC_OscConfig+0x410>
 80037aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d002      	beq.n	80037c0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	f000 be2e 	b.w	800441c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c0:	4b75      	ldr	r3, [pc, #468]	; (8003998 <HAL_RCC_OscConfig+0x5e8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	21f8      	movs	r1, #248	; 0xf8
 80037d6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037da:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80037de:	fa91 f1a1 	rbit	r1, r1
 80037e2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80037e6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80037ea:	fab1 f181 	clz	r1, r1
 80037ee:	b2c9      	uxtb	r1, r1
 80037f0:	408b      	lsls	r3, r1
 80037f2:	4969      	ldr	r1, [pc, #420]	; (8003998 <HAL_RCC_OscConfig+0x5e8>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037f8:	e0fd      	b.n	80039f6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 8088 	beq.w	800391c <HAL_RCC_OscConfig+0x56c>
 800380c:	2301      	movs	r3, #1
 800380e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003812:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003816:	fa93 f3a3 	rbit	r3, r3
 800381a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800381e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003822:	fab3 f383 	clz	r3, r3
 8003826:	b2db      	uxtb	r3, r3
 8003828:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800382c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	461a      	mov	r2, r3
 8003834:	2301      	movs	r3, #1
 8003836:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003838:	f7fd fce4 	bl	8001204 <HAL_GetTick>
 800383c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003840:	e00a      	b.n	8003858 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003842:	f7fd fcdf 	bl	8001204 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d902      	bls.n	8003858 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	f000 bde2 	b.w	800441c <HAL_RCC_OscConfig+0x106c>
 8003858:	2302      	movs	r3, #2
 800385a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003862:	fa93 f3a3 	rbit	r3, r3
 8003866:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800386a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386e:	fab3 f383 	clz	r3, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	095b      	lsrs	r3, r3, #5
 8003876:	b2db      	uxtb	r3, r3
 8003878:	f043 0301 	orr.w	r3, r3, #1
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b01      	cmp	r3, #1
 8003880:	d102      	bne.n	8003888 <HAL_RCC_OscConfig+0x4d8>
 8003882:	4b45      	ldr	r3, [pc, #276]	; (8003998 <HAL_RCC_OscConfig+0x5e8>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	e013      	b.n	80038b0 <HAL_RCC_OscConfig+0x500>
 8003888:	2302      	movs	r3, #2
 800388a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003892:	fa93 f3a3 	rbit	r3, r3
 8003896:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800389a:	2302      	movs	r3, #2
 800389c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80038a0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80038a4:	fa93 f3a3 	rbit	r3, r3
 80038a8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80038ac:	4b3a      	ldr	r3, [pc, #232]	; (8003998 <HAL_RCC_OscConfig+0x5e8>)
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	2202      	movs	r2, #2
 80038b2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80038b6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80038ba:	fa92 f2a2 	rbit	r2, r2
 80038be:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80038c2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80038c6:	fab2 f282 	clz	r2, r2
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	f042 0220 	orr.w	r2, r2, #32
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	f002 021f 	and.w	r2, r2, #31
 80038d6:	2101      	movs	r1, #1
 80038d8:	fa01 f202 	lsl.w	r2, r1, r2
 80038dc:	4013      	ands	r3, r2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0af      	beq.n	8003842 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e2:	4b2d      	ldr	r3, [pc, #180]	; (8003998 <HAL_RCC_OscConfig+0x5e8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	21f8      	movs	r1, #248	; 0xf8
 80038f8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003900:	fa91 f1a1 	rbit	r1, r1
 8003904:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003908:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800390c:	fab1 f181 	clz	r1, r1
 8003910:	b2c9      	uxtb	r1, r1
 8003912:	408b      	lsls	r3, r1
 8003914:	4920      	ldr	r1, [pc, #128]	; (8003998 <HAL_RCC_OscConfig+0x5e8>)
 8003916:	4313      	orrs	r3, r2
 8003918:	600b      	str	r3, [r1, #0]
 800391a:	e06c      	b.n	80039f6 <HAL_RCC_OscConfig+0x646>
 800391c:	2301      	movs	r3, #1
 800391e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003922:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003926:	fa93 f3a3 	rbit	r3, r3
 800392a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800392e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003932:	fab3 f383 	clz	r3, r3
 8003936:	b2db      	uxtb	r3, r3
 8003938:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800393c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	461a      	mov	r2, r3
 8003944:	2300      	movs	r3, #0
 8003946:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003948:	f7fd fc5c 	bl	8001204 <HAL_GetTick>
 800394c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003950:	e00a      	b.n	8003968 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003952:	f7fd fc57 	bl	8001204 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d902      	bls.n	8003968 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	f000 bd5a 	b.w	800441c <HAL_RCC_OscConfig+0x106c>
 8003968:	2302      	movs	r3, #2
 800396a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003972:	fa93 f3a3 	rbit	r3, r3
 8003976:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800397a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800397e:	fab3 f383 	clz	r3, r3
 8003982:	b2db      	uxtb	r3, r3
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	b2db      	uxtb	r3, r3
 8003988:	f043 0301 	orr.w	r3, r3, #1
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b01      	cmp	r3, #1
 8003990:	d104      	bne.n	800399c <HAL_RCC_OscConfig+0x5ec>
 8003992:	4b01      	ldr	r3, [pc, #4]	; (8003998 <HAL_RCC_OscConfig+0x5e8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	e015      	b.n	80039c4 <HAL_RCC_OscConfig+0x614>
 8003998:	40021000 	.word	0x40021000
 800399c:	2302      	movs	r3, #2
 800399e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80039a6:	fa93 f3a3 	rbit	r3, r3
 80039aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80039ae:	2302      	movs	r3, #2
 80039b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80039b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80039b8:	fa93 f3a3 	rbit	r3, r3
 80039bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80039c0:	4bc8      	ldr	r3, [pc, #800]	; (8003ce4 <HAL_RCC_OscConfig+0x934>)
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	2202      	movs	r2, #2
 80039c6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80039ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80039ce:	fa92 f2a2 	rbit	r2, r2
 80039d2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80039d6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80039da:	fab2 f282 	clz	r2, r2
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	f042 0220 	orr.w	r2, r2, #32
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	f002 021f 	and.w	r2, r2, #31
 80039ea:	2101      	movs	r1, #1
 80039ec:	fa01 f202 	lsl.w	r2, r1, r2
 80039f0:	4013      	ands	r3, r2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1ad      	bne.n	8003952 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 8110 	beq.w	8003c2c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d079      	beq.n	8003b10 <HAL_RCC_OscConfig+0x760>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a22:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003a26:	fa93 f3a3 	rbit	r3, r3
 8003a2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003a2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a32:	fab3 f383 	clz	r3, r3
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4bab      	ldr	r3, [pc, #684]	; (8003ce8 <HAL_RCC_OscConfig+0x938>)
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	461a      	mov	r2, r3
 8003a42:	2301      	movs	r3, #1
 8003a44:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a46:	f7fd fbdd 	bl	8001204 <HAL_GetTick>
 8003a4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a4e:	e00a      	b.n	8003a66 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a50:	f7fd fbd8 	bl	8001204 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d902      	bls.n	8003a66 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	f000 bcdb 	b.w	800441c <HAL_RCC_OscConfig+0x106c>
 8003a66:	2302      	movs	r3, #2
 8003a68:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a70:	fa93 f3a3 	rbit	r3, r3
 8003a74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003a80:	2202      	movs	r2, #2
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a88:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	fa93 f2a3 	rbit	r2, r3
 8003a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	fa93 f2a3 	rbit	r2, r3
 8003ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003abe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac0:	4b88      	ldr	r3, [pc, #544]	; (8003ce4 <HAL_RCC_OscConfig+0x934>)
 8003ac2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003acc:	2102      	movs	r1, #2
 8003ace:	6019      	str	r1, [r3, #0]
 8003ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	fa93 f1a3 	rbit	r1, r3
 8003ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003ae6:	6019      	str	r1, [r3, #0]
  return result;
 8003ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	fab3 f383 	clz	r3, r3
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	f003 031f 	and.w	r3, r3, #31
 8003b02:	2101      	movs	r1, #1
 8003b04:	fa01 f303 	lsl.w	r3, r1, r3
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0a0      	beq.n	8003a50 <HAL_RCC_OscConfig+0x6a0>
 8003b0e:	e08d      	b.n	8003c2c <HAL_RCC_OscConfig+0x87c>
 8003b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b14:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003b18:	2201      	movs	r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b20:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	fa93 f2a3 	rbit	r2, r3
 8003b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003b32:	601a      	str	r2, [r3, #0]
  return result;
 8003b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b38:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003b3c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b3e:	fab3 f383 	clz	r3, r3
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	461a      	mov	r2, r3
 8003b46:	4b68      	ldr	r3, [pc, #416]	; (8003ce8 <HAL_RCC_OscConfig+0x938>)
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	2300      	movs	r3, #0
 8003b50:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b52:	f7fd fb57 	bl	8001204 <HAL_GetTick>
 8003b56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b5a:	e00a      	b.n	8003b72 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b5c:	f7fd fb52 	bl	8001204 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d902      	bls.n	8003b72 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	f000 bc55 	b.w	800441c <HAL_RCC_OscConfig+0x106c>
 8003b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b76:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b82:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	fa93 f2a3 	rbit	r2, r3
 8003b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b90:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	fa93 f2a3 	rbit	r2, r3
 8003bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	fa93 f2a3 	rbit	r2, r3
 8003bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003bdc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bde:	4b41      	ldr	r3, [pc, #260]	; (8003ce4 <HAL_RCC_OscConfig+0x934>)
 8003be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003bea:	2102      	movs	r1, #2
 8003bec:	6019      	str	r1, [r3, #0]
 8003bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	fa93 f1a3 	rbit	r1, r3
 8003bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c00:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003c04:	6019      	str	r1, [r3, #0]
  return result;
 8003c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	fab3 f383 	clz	r3, r3
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	f003 031f 	and.w	r3, r3, #31
 8003c20:	2101      	movs	r1, #1
 8003c22:	fa01 f303 	lsl.w	r3, r1, r3
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d197      	bne.n	8003b5c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 81a1 	beq.w	8003f84 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c42:	2300      	movs	r3, #0
 8003c44:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c48:	4b26      	ldr	r3, [pc, #152]	; (8003ce4 <HAL_RCC_OscConfig+0x934>)
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d116      	bne.n	8003c82 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c54:	4b23      	ldr	r3, [pc, #140]	; (8003ce4 <HAL_RCC_OscConfig+0x934>)
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	4a22      	ldr	r2, [pc, #136]	; (8003ce4 <HAL_RCC_OscConfig+0x934>)
 8003c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	61d3      	str	r3, [r2, #28]
 8003c60:	4b20      	ldr	r3, [pc, #128]	; (8003ce4 <HAL_RCC_OscConfig+0x934>)
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c6c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c76:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003c7a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c82:	4b1a      	ldr	r3, [pc, #104]	; (8003cec <HAL_RCC_OscConfig+0x93c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d11a      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c8e:	4b17      	ldr	r3, [pc, #92]	; (8003cec <HAL_RCC_OscConfig+0x93c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a16      	ldr	r2, [pc, #88]	; (8003cec <HAL_RCC_OscConfig+0x93c>)
 8003c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c98:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c9a:	f7fd fab3 	bl	8001204 <HAL_GetTick>
 8003c9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca2:	e009      	b.n	8003cb8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca4:	f7fd faae 	bl	8001204 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b64      	cmp	r3, #100	; 0x64
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e3b1      	b.n	800441c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb8:	4b0c      	ldr	r3, [pc, #48]	; (8003cec <HAL_RCC_OscConfig+0x93c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0ef      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d10d      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x940>
 8003cd4:	4b03      	ldr	r3, [pc, #12]	; (8003ce4 <HAL_RCC_OscConfig+0x934>)
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	4a02      	ldr	r2, [pc, #8]	; (8003ce4 <HAL_RCC_OscConfig+0x934>)
 8003cda:	f043 0301 	orr.w	r3, r3, #1
 8003cde:	6213      	str	r3, [r2, #32]
 8003ce0:	e03c      	b.n	8003d5c <HAL_RCC_OscConfig+0x9ac>
 8003ce2:	bf00      	nop
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	10908120 	.word	0x10908120
 8003cec:	40007000 	.word	0x40007000
 8003cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10c      	bne.n	8003d1a <HAL_RCC_OscConfig+0x96a>
 8003d00:	4bc1      	ldr	r3, [pc, #772]	; (8004008 <HAL_RCC_OscConfig+0xc58>)
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	4ac0      	ldr	r2, [pc, #768]	; (8004008 <HAL_RCC_OscConfig+0xc58>)
 8003d06:	f023 0301 	bic.w	r3, r3, #1
 8003d0a:	6213      	str	r3, [r2, #32]
 8003d0c:	4bbe      	ldr	r3, [pc, #760]	; (8004008 <HAL_RCC_OscConfig+0xc58>)
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	4abd      	ldr	r2, [pc, #756]	; (8004008 <HAL_RCC_OscConfig+0xc58>)
 8003d12:	f023 0304 	bic.w	r3, r3, #4
 8003d16:	6213      	str	r3, [r2, #32]
 8003d18:	e020      	b.n	8003d5c <HAL_RCC_OscConfig+0x9ac>
 8003d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	2b05      	cmp	r3, #5
 8003d28:	d10c      	bne.n	8003d44 <HAL_RCC_OscConfig+0x994>
 8003d2a:	4bb7      	ldr	r3, [pc, #732]	; (8004008 <HAL_RCC_OscConfig+0xc58>)
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	4ab6      	ldr	r2, [pc, #728]	; (8004008 <HAL_RCC_OscConfig+0xc58>)
 8003d30:	f043 0304 	orr.w	r3, r3, #4
 8003d34:	6213      	str	r3, [r2, #32]
 8003d36:	4bb4      	ldr	r3, [pc, #720]	; (8004008 <HAL_RCC_OscConfig+0xc58>)
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	4ab3      	ldr	r2, [pc, #716]	; (8004008 <HAL_RCC_OscConfig+0xc58>)
 8003d3c:	f043 0301 	orr.w	r3, r3, #1
 8003d40:	6213      	str	r3, [r2, #32]
 8003d42:	e00b      	b.n	8003d5c <HAL_RCC_OscConfig+0x9ac>
 8003d44:	4bb0      	ldr	r3, [pc, #704]	; (8004008 <HAL_RCC_OscConfig+0xc58>)
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	4aaf      	ldr	r2, [pc, #700]	; (8004008 <HAL_RCC_OscConfig+0xc58>)
 8003d4a:	f023 0301 	bic.w	r3, r3, #1
 8003d4e:	6213      	str	r3, [r2, #32]
 8003d50:	4bad      	ldr	r3, [pc, #692]	; (8004008 <HAL_RCC_OscConfig+0xc58>)
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	4aac      	ldr	r2, [pc, #688]	; (8004008 <HAL_RCC_OscConfig+0xc58>)
 8003d56:	f023 0304 	bic.w	r3, r3, #4
 8003d5a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 8081 	beq.w	8003e70 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d6e:	f7fd fa49 	bl	8001204 <HAL_GetTick>
 8003d72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d76:	e00b      	b.n	8003d90 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d78:	f7fd fa44 	bl	8001204 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e345      	b.n	800441c <HAL_RCC_OscConfig+0x106c>
 8003d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d94:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003d98:	2202      	movs	r2, #2
 8003d9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	fa93 f2a3 	rbit	r2, r3
 8003daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dae:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	fa93 f2a3 	rbit	r2, r3
 8003dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003dd6:	601a      	str	r2, [r3, #0]
  return result;
 8003dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ddc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003de0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de2:	fab3 f383 	clz	r3, r3
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	095b      	lsrs	r3, r3, #5
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	f043 0302 	orr.w	r3, r3, #2
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d102      	bne.n	8003dfc <HAL_RCC_OscConfig+0xa4c>
 8003df6:	4b84      	ldr	r3, [pc, #528]	; (8004008 <HAL_RCC_OscConfig+0xc58>)
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	e013      	b.n	8003e24 <HAL_RCC_OscConfig+0xa74>
 8003dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e00:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003e04:	2202      	movs	r2, #2
 8003e06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e0c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	fa93 f2a3 	rbit	r2, r3
 8003e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e1a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	4b79      	ldr	r3, [pc, #484]	; (8004008 <HAL_RCC_OscConfig+0xc58>)
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e28:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003e2c:	2102      	movs	r1, #2
 8003e2e:	6011      	str	r1, [r2, #0]
 8003e30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e34:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003e38:	6812      	ldr	r2, [r2, #0]
 8003e3a:	fa92 f1a2 	rbit	r1, r2
 8003e3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e42:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003e46:	6011      	str	r1, [r2, #0]
  return result;
 8003e48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e4c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003e50:	6812      	ldr	r2, [r2, #0]
 8003e52:	fab2 f282 	clz	r2, r2
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	f002 021f 	and.w	r2, r2, #31
 8003e62:	2101      	movs	r1, #1
 8003e64:	fa01 f202 	lsl.w	r2, r1, r2
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d084      	beq.n	8003d78 <HAL_RCC_OscConfig+0x9c8>
 8003e6e:	e07f      	b.n	8003f70 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e70:	f7fd f9c8 	bl	8001204 <HAL_GetTick>
 8003e74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e78:	e00b      	b.n	8003e92 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e7a:	f7fd f9c3 	bl	8001204 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e2c4      	b.n	800441c <HAL_RCC_OscConfig+0x106c>
 8003e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e96:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	fa93 f2a3 	rbit	r2, r3
 8003eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	fa93 f2a3 	rbit	r2, r3
 8003ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003ed8:	601a      	str	r2, [r3, #0]
  return result;
 8003eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ede:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003ee2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee4:	fab3 f383 	clz	r3, r3
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	f043 0302 	orr.w	r3, r3, #2
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d102      	bne.n	8003efe <HAL_RCC_OscConfig+0xb4e>
 8003ef8:	4b43      	ldr	r3, [pc, #268]	; (8004008 <HAL_RCC_OscConfig+0xc58>)
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	e013      	b.n	8003f26 <HAL_RCC_OscConfig+0xb76>
 8003efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f02:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003f06:	2202      	movs	r2, #2
 8003f08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f0e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	fa93 f2a3 	rbit	r2, r3
 8003f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f1c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	4b39      	ldr	r3, [pc, #228]	; (8004008 <HAL_RCC_OscConfig+0xc58>)
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f2a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003f2e:	2102      	movs	r1, #2
 8003f30:	6011      	str	r1, [r2, #0]
 8003f32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f36:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	fa92 f1a2 	rbit	r1, r2
 8003f40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f44:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003f48:	6011      	str	r1, [r2, #0]
  return result;
 8003f4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f4e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	fab2 f282 	clz	r2, r2
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	f002 021f 	and.w	r2, r2, #31
 8003f64:	2101      	movs	r1, #1
 8003f66:	fa01 f202 	lsl.w	r2, r1, r2
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d184      	bne.n	8003e7a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f70:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d105      	bne.n	8003f84 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f78:	4b23      	ldr	r3, [pc, #140]	; (8004008 <HAL_RCC_OscConfig+0xc58>)
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	4a22      	ldr	r2, [pc, #136]	; (8004008 <HAL_RCC_OscConfig+0xc58>)
 8003f7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f82:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 8242 	beq.w	800441a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f96:	4b1c      	ldr	r3, [pc, #112]	; (8004008 <HAL_RCC_OscConfig+0xc58>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	f000 8213 	beq.w	80043ca <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	f040 8162 	bne.w	800427a <HAL_RCC_OscConfig+0xeca>
 8003fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fba:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003fbe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	fa93 f2a3 	rbit	r2, r3
 8003fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003fda:	601a      	str	r2, [r3, #0]
  return result;
 8003fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003fe4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe6:	fab3 f383 	clz	r3, r3
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ff0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffc:	f7fd f902 	bl	8001204 <HAL_GetTick>
 8004000:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004004:	e00c      	b.n	8004020 <HAL_RCC_OscConfig+0xc70>
 8004006:	bf00      	nop
 8004008:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800400c:	f7fd f8fa 	bl	8001204 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e1fd      	b.n	800441c <HAL_RCC_OscConfig+0x106c>
 8004020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004024:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004028:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800402c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004032:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	fa93 f2a3 	rbit	r2, r3
 800403c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004040:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004044:	601a      	str	r2, [r3, #0]
  return result;
 8004046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800404a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800404e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004050:	fab3 f383 	clz	r3, r3
 8004054:	b2db      	uxtb	r3, r3
 8004056:	095b      	lsrs	r3, r3, #5
 8004058:	b2db      	uxtb	r3, r3
 800405a:	f043 0301 	orr.w	r3, r3, #1
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b01      	cmp	r3, #1
 8004062:	d102      	bne.n	800406a <HAL_RCC_OscConfig+0xcba>
 8004064:	4bb0      	ldr	r3, [pc, #704]	; (8004328 <HAL_RCC_OscConfig+0xf78>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	e027      	b.n	80040ba <HAL_RCC_OscConfig+0xd0a>
 800406a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800406e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004072:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004076:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800407c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	fa93 f2a3 	rbit	r2, r3
 8004086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800408a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004094:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004098:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	fa93 f2a3 	rbit	r2, r3
 80040ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	4b9c      	ldr	r3, [pc, #624]	; (8004328 <HAL_RCC_OscConfig+0xf78>)
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040be:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80040c2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040c6:	6011      	str	r1, [r2, #0]
 80040c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040cc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80040d0:	6812      	ldr	r2, [r2, #0]
 80040d2:	fa92 f1a2 	rbit	r1, r2
 80040d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040da:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80040de:	6011      	str	r1, [r2, #0]
  return result;
 80040e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040e4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80040e8:	6812      	ldr	r2, [r2, #0]
 80040ea:	fab2 f282 	clz	r2, r2
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	f042 0220 	orr.w	r2, r2, #32
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	f002 021f 	and.w	r2, r2, #31
 80040fa:	2101      	movs	r1, #1
 80040fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004100:	4013      	ands	r3, r2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d182      	bne.n	800400c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004106:	4b88      	ldr	r3, [pc, #544]	; (8004328 <HAL_RCC_OscConfig+0xf78>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800410e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004112:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800411a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800411e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	430b      	orrs	r3, r1
 8004128:	497f      	ldr	r1, [pc, #508]	; (8004328 <HAL_RCC_OscConfig+0xf78>)
 800412a:	4313      	orrs	r3, r2
 800412c:	604b      	str	r3, [r1, #4]
 800412e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004132:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004136:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800413a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004140:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	fa93 f2a3 	rbit	r2, r3
 800414a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800414e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004152:	601a      	str	r2, [r3, #0]
  return result;
 8004154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004158:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800415c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800415e:	fab3 f383 	clz	r3, r3
 8004162:	b2db      	uxtb	r3, r3
 8004164:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004168:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	461a      	mov	r2, r3
 8004170:	2301      	movs	r3, #1
 8004172:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004174:	f7fd f846 	bl	8001204 <HAL_GetTick>
 8004178:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800417c:	e009      	b.n	8004192 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800417e:	f7fd f841 	bl	8001204 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e144      	b.n	800441c <HAL_RCC_OscConfig+0x106c>
 8004192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004196:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800419a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800419e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	fa93 f2a3 	rbit	r2, r3
 80041ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80041b6:	601a      	str	r2, [r3, #0]
  return result;
 80041b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041bc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80041c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041c2:	fab3 f383 	clz	r3, r3
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	095b      	lsrs	r3, r3, #5
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d102      	bne.n	80041dc <HAL_RCC_OscConfig+0xe2c>
 80041d6:	4b54      	ldr	r3, [pc, #336]	; (8004328 <HAL_RCC_OscConfig+0xf78>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	e027      	b.n	800422c <HAL_RCC_OscConfig+0xe7c>
 80041dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80041e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ee:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	fa93 f2a3 	rbit	r2, r3
 80041f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041fc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004206:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800420a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004214:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	fa93 f2a3 	rbit	r2, r3
 800421e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004222:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	4b3f      	ldr	r3, [pc, #252]	; (8004328 <HAL_RCC_OscConfig+0xf78>)
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004230:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004234:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004238:	6011      	str	r1, [r2, #0]
 800423a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800423e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004242:	6812      	ldr	r2, [r2, #0]
 8004244:	fa92 f1a2 	rbit	r1, r2
 8004248:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800424c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004250:	6011      	str	r1, [r2, #0]
  return result;
 8004252:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004256:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800425a:	6812      	ldr	r2, [r2, #0]
 800425c:	fab2 f282 	clz	r2, r2
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	f042 0220 	orr.w	r2, r2, #32
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	f002 021f 	and.w	r2, r2, #31
 800426c:	2101      	movs	r1, #1
 800426e:	fa01 f202 	lsl.w	r2, r1, r2
 8004272:	4013      	ands	r3, r2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d082      	beq.n	800417e <HAL_RCC_OscConfig+0xdce>
 8004278:	e0cf      	b.n	800441a <HAL_RCC_OscConfig+0x106a>
 800427a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800427e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004282:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004286:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800428c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	fa93 f2a3 	rbit	r2, r3
 8004296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800429a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800429e:	601a      	str	r2, [r3, #0]
  return result;
 80042a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80042a8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042aa:	fab3 f383 	clz	r3, r3
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80042b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	461a      	mov	r2, r3
 80042bc:	2300      	movs	r3, #0
 80042be:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c0:	f7fc ffa0 	bl	8001204 <HAL_GetTick>
 80042c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042c8:	e009      	b.n	80042de <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ca:	f7fc ff9b 	bl	8001204 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e09e      	b.n	800441c <HAL_RCC_OscConfig+0x106c>
 80042de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80042e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	fa93 f2a3 	rbit	r2, r3
 80042fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042fe:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004302:	601a      	str	r2, [r3, #0]
  return result;
 8004304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004308:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800430c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800430e:	fab3 f383 	clz	r3, r3
 8004312:	b2db      	uxtb	r3, r3
 8004314:	095b      	lsrs	r3, r3, #5
 8004316:	b2db      	uxtb	r3, r3
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b01      	cmp	r3, #1
 8004320:	d104      	bne.n	800432c <HAL_RCC_OscConfig+0xf7c>
 8004322:	4b01      	ldr	r3, [pc, #4]	; (8004328 <HAL_RCC_OscConfig+0xf78>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	e029      	b.n	800437c <HAL_RCC_OscConfig+0xfcc>
 8004328:	40021000 	.word	0x40021000
 800432c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004330:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004334:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004338:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800433e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	fa93 f2a3 	rbit	r2, r3
 8004348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800434c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004356:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800435a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004364:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	fa93 f2a3 	rbit	r2, r3
 800436e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004372:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	4b2b      	ldr	r3, [pc, #172]	; (8004428 <HAL_RCC_OscConfig+0x1078>)
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004380:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004384:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004388:	6011      	str	r1, [r2, #0]
 800438a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800438e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004392:	6812      	ldr	r2, [r2, #0]
 8004394:	fa92 f1a2 	rbit	r1, r2
 8004398:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800439c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80043a0:	6011      	str	r1, [r2, #0]
  return result;
 80043a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043a6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80043aa:	6812      	ldr	r2, [r2, #0]
 80043ac:	fab2 f282 	clz	r2, r2
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	f042 0220 	orr.w	r2, r2, #32
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	f002 021f 	and.w	r2, r2, #31
 80043bc:	2101      	movs	r1, #1
 80043be:	fa01 f202 	lsl.w	r2, r1, r2
 80043c2:	4013      	ands	r3, r2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d180      	bne.n	80042ca <HAL_RCC_OscConfig+0xf1a>
 80043c8:	e027      	b.n	800441a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d101      	bne.n	80043de <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e01e      	b.n	800441c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043de:	4b12      	ldr	r3, [pc, #72]	; (8004428 <HAL_RCC_OscConfig+0x1078>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80043e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80043ea:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80043ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d10b      	bne.n	8004416 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80043fe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004402:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800440a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004412:	429a      	cmp	r2, r3
 8004414:	d001      	beq.n	800441a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40021000 	.word	0x40021000

0800442c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b09e      	sub	sp, #120	; 0x78
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004436:	2300      	movs	r3, #0
 8004438:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e162      	b.n	800470a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004444:	4b90      	ldr	r3, [pc, #576]	; (8004688 <HAL_RCC_ClockConfig+0x25c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d910      	bls.n	8004474 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004452:	4b8d      	ldr	r3, [pc, #564]	; (8004688 <HAL_RCC_ClockConfig+0x25c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f023 0207 	bic.w	r2, r3, #7
 800445a:	498b      	ldr	r1, [pc, #556]	; (8004688 <HAL_RCC_ClockConfig+0x25c>)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	4313      	orrs	r3, r2
 8004460:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004462:	4b89      	ldr	r3, [pc, #548]	; (8004688 <HAL_RCC_ClockConfig+0x25c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	429a      	cmp	r2, r3
 800446e:	d001      	beq.n	8004474 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e14a      	b.n	800470a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d008      	beq.n	8004492 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004480:	4b82      	ldr	r3, [pc, #520]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	497f      	ldr	r1, [pc, #508]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 800448e:	4313      	orrs	r3, r2
 8004490:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 80dc 	beq.w	8004658 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d13c      	bne.n	8004522 <HAL_RCC_ClockConfig+0xf6>
 80044a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044ac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044b0:	fa93 f3a3 	rbit	r3, r3
 80044b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80044b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b8:	fab3 f383 	clz	r3, r3
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	095b      	lsrs	r3, r3, #5
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	f043 0301 	orr.w	r3, r3, #1
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d102      	bne.n	80044d2 <HAL_RCC_ClockConfig+0xa6>
 80044cc:	4b6f      	ldr	r3, [pc, #444]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	e00f      	b.n	80044f2 <HAL_RCC_ClockConfig+0xc6>
 80044d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044da:	fa93 f3a3 	rbit	r3, r3
 80044de:	667b      	str	r3, [r7, #100]	; 0x64
 80044e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044e4:	663b      	str	r3, [r7, #96]	; 0x60
 80044e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044e8:	fa93 f3a3 	rbit	r3, r3
 80044ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044ee:	4b67      	ldr	r3, [pc, #412]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80044f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044fa:	fa92 f2a2 	rbit	r2, r2
 80044fe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004500:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004502:	fab2 f282 	clz	r2, r2
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	f042 0220 	orr.w	r2, r2, #32
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	f002 021f 	and.w	r2, r2, #31
 8004512:	2101      	movs	r1, #1
 8004514:	fa01 f202 	lsl.w	r2, r1, r2
 8004518:	4013      	ands	r3, r2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d17b      	bne.n	8004616 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e0f3      	b.n	800470a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b02      	cmp	r3, #2
 8004528:	d13c      	bne.n	80045a4 <HAL_RCC_ClockConfig+0x178>
 800452a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800452e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004532:	fa93 f3a3 	rbit	r3, r3
 8004536:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800453a:	fab3 f383 	clz	r3, r3
 800453e:	b2db      	uxtb	r3, r3
 8004540:	095b      	lsrs	r3, r3, #5
 8004542:	b2db      	uxtb	r3, r3
 8004544:	f043 0301 	orr.w	r3, r3, #1
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b01      	cmp	r3, #1
 800454c:	d102      	bne.n	8004554 <HAL_RCC_ClockConfig+0x128>
 800454e:	4b4f      	ldr	r3, [pc, #316]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	e00f      	b.n	8004574 <HAL_RCC_ClockConfig+0x148>
 8004554:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004558:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800455c:	fa93 f3a3 	rbit	r3, r3
 8004560:	647b      	str	r3, [r7, #68]	; 0x44
 8004562:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004566:	643b      	str	r3, [r7, #64]	; 0x40
 8004568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800456a:	fa93 f3a3 	rbit	r3, r3
 800456e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004570:	4b46      	ldr	r3, [pc, #280]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004578:	63ba      	str	r2, [r7, #56]	; 0x38
 800457a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800457c:	fa92 f2a2 	rbit	r2, r2
 8004580:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004584:	fab2 f282 	clz	r2, r2
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	f042 0220 	orr.w	r2, r2, #32
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	f002 021f 	and.w	r2, r2, #31
 8004594:	2101      	movs	r1, #1
 8004596:	fa01 f202 	lsl.w	r2, r1, r2
 800459a:	4013      	ands	r3, r2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d13a      	bne.n	8004616 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0b2      	b.n	800470a <HAL_RCC_ClockConfig+0x2de>
 80045a4:	2302      	movs	r3, #2
 80045a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045aa:	fa93 f3a3 	rbit	r3, r3
 80045ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80045b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b2:	fab3 f383 	clz	r3, r3
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	095b      	lsrs	r3, r3, #5
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	f043 0301 	orr.w	r3, r3, #1
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d102      	bne.n	80045cc <HAL_RCC_ClockConfig+0x1a0>
 80045c6:	4b31      	ldr	r3, [pc, #196]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	e00d      	b.n	80045e8 <HAL_RCC_ClockConfig+0x1bc>
 80045cc:	2302      	movs	r3, #2
 80045ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d2:	fa93 f3a3 	rbit	r3, r3
 80045d6:	627b      	str	r3, [r7, #36]	; 0x24
 80045d8:	2302      	movs	r3, #2
 80045da:	623b      	str	r3, [r7, #32]
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	fa93 f3a3 	rbit	r3, r3
 80045e2:	61fb      	str	r3, [r7, #28]
 80045e4:	4b29      	ldr	r3, [pc, #164]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	2202      	movs	r2, #2
 80045ea:	61ba      	str	r2, [r7, #24]
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	fa92 f2a2 	rbit	r2, r2
 80045f2:	617a      	str	r2, [r7, #20]
  return result;
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	fab2 f282 	clz	r2, r2
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	f042 0220 	orr.w	r2, r2, #32
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	f002 021f 	and.w	r2, r2, #31
 8004606:	2101      	movs	r1, #1
 8004608:	fa01 f202 	lsl.w	r2, r1, r2
 800460c:	4013      	ands	r3, r2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e079      	b.n	800470a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004616:	4b1d      	ldr	r3, [pc, #116]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f023 0203 	bic.w	r2, r3, #3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	491a      	ldr	r1, [pc, #104]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 8004624:	4313      	orrs	r3, r2
 8004626:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004628:	f7fc fdec 	bl	8001204 <HAL_GetTick>
 800462c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462e:	e00a      	b.n	8004646 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004630:	f7fc fde8 	bl	8001204 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	f241 3288 	movw	r2, #5000	; 0x1388
 800463e:	4293      	cmp	r3, r2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e061      	b.n	800470a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004646:	4b11      	ldr	r3, [pc, #68]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f003 020c 	and.w	r2, r3, #12
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	429a      	cmp	r2, r3
 8004656:	d1eb      	bne.n	8004630 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004658:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <HAL_RCC_ClockConfig+0x25c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	429a      	cmp	r2, r3
 8004664:	d214      	bcs.n	8004690 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004666:	4b08      	ldr	r3, [pc, #32]	; (8004688 <HAL_RCC_ClockConfig+0x25c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f023 0207 	bic.w	r2, r3, #7
 800466e:	4906      	ldr	r1, [pc, #24]	; (8004688 <HAL_RCC_ClockConfig+0x25c>)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	4313      	orrs	r3, r2
 8004674:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004676:	4b04      	ldr	r3, [pc, #16]	; (8004688 <HAL_RCC_ClockConfig+0x25c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	429a      	cmp	r2, r3
 8004682:	d005      	beq.n	8004690 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e040      	b.n	800470a <HAL_RCC_ClockConfig+0x2de>
 8004688:	40022000 	.word	0x40022000
 800468c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b00      	cmp	r3, #0
 800469a:	d008      	beq.n	80046ae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800469c:	4b1d      	ldr	r3, [pc, #116]	; (8004714 <HAL_RCC_ClockConfig+0x2e8>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	491a      	ldr	r1, [pc, #104]	; (8004714 <HAL_RCC_ClockConfig+0x2e8>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d009      	beq.n	80046ce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ba:	4b16      	ldr	r3, [pc, #88]	; (8004714 <HAL_RCC_ClockConfig+0x2e8>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	4912      	ldr	r1, [pc, #72]	; (8004714 <HAL_RCC_ClockConfig+0x2e8>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80046ce:	f000 f829 	bl	8004724 <HAL_RCC_GetSysClockFreq>
 80046d2:	4601      	mov	r1, r0
 80046d4:	4b0f      	ldr	r3, [pc, #60]	; (8004714 <HAL_RCC_ClockConfig+0x2e8>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046dc:	22f0      	movs	r2, #240	; 0xf0
 80046de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	fa92 f2a2 	rbit	r2, r2
 80046e6:	60fa      	str	r2, [r7, #12]
  return result;
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	fab2 f282 	clz	r2, r2
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	40d3      	lsrs	r3, r2
 80046f2:	4a09      	ldr	r2, [pc, #36]	; (8004718 <HAL_RCC_ClockConfig+0x2ec>)
 80046f4:	5cd3      	ldrb	r3, [r2, r3]
 80046f6:	fa21 f303 	lsr.w	r3, r1, r3
 80046fa:	4a08      	ldr	r2, [pc, #32]	; (800471c <HAL_RCC_ClockConfig+0x2f0>)
 80046fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80046fe:	4b08      	ldr	r3, [pc, #32]	; (8004720 <HAL_RCC_ClockConfig+0x2f4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f7fc fd3a 	bl	800117c <HAL_InitTick>
  
  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3778      	adds	r7, #120	; 0x78
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40021000 	.word	0x40021000
 8004718:	0800ad70 	.word	0x0800ad70
 800471c:	20000000 	.word	0x20000000
 8004720:	20000004 	.word	0x20000004

08004724 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004724:	b480      	push	{r7}
 8004726:	b08b      	sub	sp, #44	; 0x2c
 8004728:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800472a:	2300      	movs	r3, #0
 800472c:	61fb      	str	r3, [r7, #28]
 800472e:	2300      	movs	r3, #0
 8004730:	61bb      	str	r3, [r7, #24]
 8004732:	2300      	movs	r3, #0
 8004734:	627b      	str	r3, [r7, #36]	; 0x24
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800473e:	4b29      	ldr	r3, [pc, #164]	; (80047e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	f003 030c 	and.w	r3, r3, #12
 800474a:	2b04      	cmp	r3, #4
 800474c:	d002      	beq.n	8004754 <HAL_RCC_GetSysClockFreq+0x30>
 800474e:	2b08      	cmp	r3, #8
 8004750:	d003      	beq.n	800475a <HAL_RCC_GetSysClockFreq+0x36>
 8004752:	e03c      	b.n	80047ce <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004754:	4b24      	ldr	r3, [pc, #144]	; (80047e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004756:	623b      	str	r3, [r7, #32]
      break;
 8004758:	e03c      	b.n	80047d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004760:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004764:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	fa92 f2a2 	rbit	r2, r2
 800476c:	607a      	str	r2, [r7, #4]
  return result;
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	fab2 f282 	clz	r2, r2
 8004774:	b2d2      	uxtb	r2, r2
 8004776:	40d3      	lsrs	r3, r2
 8004778:	4a1c      	ldr	r2, [pc, #112]	; (80047ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800477a:	5cd3      	ldrb	r3, [r2, r3]
 800477c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800477e:	4b19      	ldr	r3, [pc, #100]	; (80047e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	220f      	movs	r2, #15
 8004788:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	fa92 f2a2 	rbit	r2, r2
 8004790:	60fa      	str	r2, [r7, #12]
  return result;
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	fab2 f282 	clz	r2, r2
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	40d3      	lsrs	r3, r2
 800479c:	4a14      	ldr	r2, [pc, #80]	; (80047f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800479e:	5cd3      	ldrb	r3, [r2, r3]
 80047a0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d008      	beq.n	80047be <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80047ac:	4a0e      	ldr	r2, [pc, #56]	; (80047e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	fb02 f303 	mul.w	r3, r2, r3
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24
 80047bc:	e004      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	4a0c      	ldr	r2, [pc, #48]	; (80047f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80047c2:	fb02 f303 	mul.w	r3, r2, r3
 80047c6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	623b      	str	r3, [r7, #32]
      break;
 80047cc:	e002      	b.n	80047d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047ce:	4b06      	ldr	r3, [pc, #24]	; (80047e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80047d0:	623b      	str	r3, [r7, #32]
      break;
 80047d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047d4:	6a3b      	ldr	r3, [r7, #32]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	372c      	adds	r7, #44	; 0x2c
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	40021000 	.word	0x40021000
 80047e8:	007a1200 	.word	0x007a1200
 80047ec:	0800ad88 	.word	0x0800ad88
 80047f0:	0800ad98 	.word	0x0800ad98
 80047f4:	003d0900 	.word	0x003d0900

080047f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047fc:	4b03      	ldr	r3, [pc, #12]	; (800480c <HAL_RCC_GetHCLKFreq+0x14>)
 80047fe:	681b      	ldr	r3, [r3, #0]
}
 8004800:	4618      	mov	r0, r3
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	20000000 	.word	0x20000000

08004810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004816:	f7ff ffef 	bl	80047f8 <HAL_RCC_GetHCLKFreq>
 800481a:	4601      	mov	r1, r0
 800481c:	4b0b      	ldr	r3, [pc, #44]	; (800484c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004824:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004828:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	fa92 f2a2 	rbit	r2, r2
 8004830:	603a      	str	r2, [r7, #0]
  return result;
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	fab2 f282 	clz	r2, r2
 8004838:	b2d2      	uxtb	r2, r2
 800483a:	40d3      	lsrs	r3, r2
 800483c:	4a04      	ldr	r2, [pc, #16]	; (8004850 <HAL_RCC_GetPCLK1Freq+0x40>)
 800483e:	5cd3      	ldrb	r3, [r2, r3]
 8004840:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004844:	4618      	mov	r0, r3
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40021000 	.word	0x40021000
 8004850:	0800ad80 	.word	0x0800ad80

08004854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800485a:	f7ff ffcd 	bl	80047f8 <HAL_RCC_GetHCLKFreq>
 800485e:	4601      	mov	r1, r0
 8004860:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004868:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800486c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	fa92 f2a2 	rbit	r2, r2
 8004874:	603a      	str	r2, [r7, #0]
  return result;
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	fab2 f282 	clz	r2, r2
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	40d3      	lsrs	r3, r2
 8004880:	4a04      	ldr	r2, [pc, #16]	; (8004894 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004882:	5cd3      	ldrb	r3, [r2, r3]
 8004884:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004888:	4618      	mov	r0, r3
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40021000 	.word	0x40021000
 8004894:	0800ad80 	.word	0x0800ad80

08004898 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b092      	sub	sp, #72	; 0x48
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80048a8:	2300      	movs	r3, #0
 80048aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 80d4 	beq.w	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048bc:	4b4e      	ldr	r3, [pc, #312]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10e      	bne.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c8:	4b4b      	ldr	r3, [pc, #300]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	4a4a      	ldr	r2, [pc, #296]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d2:	61d3      	str	r3, [r2, #28]
 80048d4:	4b48      	ldr	r3, [pc, #288]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048dc:	60bb      	str	r3, [r7, #8]
 80048de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048e0:	2301      	movs	r3, #1
 80048e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e6:	4b45      	ldr	r3, [pc, #276]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d118      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048f2:	4b42      	ldr	r3, [pc, #264]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a41      	ldr	r2, [pc, #260]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048fe:	f7fc fc81 	bl	8001204 <HAL_GetTick>
 8004902:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004904:	e008      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004906:	f7fc fc7d 	bl	8001204 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b64      	cmp	r3, #100	; 0x64
 8004912:	d901      	bls.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e169      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004918:	4b38      	ldr	r3, [pc, #224]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0f0      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004924:	4b34      	ldr	r3, [pc, #208]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800492c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800492e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 8084 	beq.w	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800493e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004940:	429a      	cmp	r2, r3
 8004942:	d07c      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004944:	4b2c      	ldr	r3, [pc, #176]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800494c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800494e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004952:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004956:	fa93 f3a3 	rbit	r3, r3
 800495a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800495c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800495e:	fab3 f383 	clz	r3, r3
 8004962:	b2db      	uxtb	r3, r3
 8004964:	461a      	mov	r2, r3
 8004966:	4b26      	ldr	r3, [pc, #152]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004968:	4413      	add	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	461a      	mov	r2, r3
 800496e:	2301      	movs	r3, #1
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004976:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497a:	fa93 f3a3 	rbit	r3, r3
 800497e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004982:	fab3 f383 	clz	r3, r3
 8004986:	b2db      	uxtb	r3, r3
 8004988:	461a      	mov	r2, r3
 800498a:	4b1d      	ldr	r3, [pc, #116]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800498c:	4413      	add	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	461a      	mov	r2, r3
 8004992:	2300      	movs	r3, #0
 8004994:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004996:	4a18      	ldr	r2, [pc, #96]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800499a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800499c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d04b      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a6:	f7fc fc2d 	bl	8001204 <HAL_GetTick>
 80049aa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ac:	e00a      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ae:	f7fc fc29 	bl	8001204 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049bc:	4293      	cmp	r3, r2
 80049be:	d901      	bls.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e113      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x354>
 80049c4:	2302      	movs	r3, #2
 80049c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ca:	fa93 f3a3 	rbit	r3, r3
 80049ce:	627b      	str	r3, [r7, #36]	; 0x24
 80049d0:	2302      	movs	r3, #2
 80049d2:	623b      	str	r3, [r7, #32]
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	fa93 f3a3 	rbit	r3, r3
 80049da:	61fb      	str	r3, [r7, #28]
  return result;
 80049dc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049de:	fab3 f383 	clz	r3, r3
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	095b      	lsrs	r3, r3, #5
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	f043 0302 	orr.w	r3, r3, #2
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d108      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80049f2:	4b01      	ldr	r3, [pc, #4]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	e00d      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80049f8:	40021000 	.word	0x40021000
 80049fc:	40007000 	.word	0x40007000
 8004a00:	10908100 	.word	0x10908100
 8004a04:	2302      	movs	r3, #2
 8004a06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	fa93 f3a3 	rbit	r3, r3
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	4b78      	ldr	r3, [pc, #480]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	2202      	movs	r2, #2
 8004a16:	613a      	str	r2, [r7, #16]
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	fa92 f2a2 	rbit	r2, r2
 8004a1e:	60fa      	str	r2, [r7, #12]
  return result;
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	fab2 f282 	clz	r2, r2
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a2c:	b2d2      	uxtb	r2, r2
 8004a2e:	f002 021f 	and.w	r2, r2, #31
 8004a32:	2101      	movs	r1, #1
 8004a34:	fa01 f202 	lsl.w	r2, r1, r2
 8004a38:	4013      	ands	r3, r2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0b7      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004a3e:	4b6d      	ldr	r3, [pc, #436]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	496a      	ldr	r1, [pc, #424]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d105      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a58:	4b66      	ldr	r3, [pc, #408]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	4a65      	ldr	r2, [pc, #404]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d008      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a70:	4b60      	ldr	r3, [pc, #384]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a74:	f023 0203 	bic.w	r2, r3, #3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	495d      	ldr	r1, [pc, #372]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d008      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a8e:	4b59      	ldr	r3, [pc, #356]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	4956      	ldr	r1, [pc, #344]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d008      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004aac:	4b51      	ldr	r3, [pc, #324]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	494e      	ldr	r1, [pc, #312]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0320 	and.w	r3, r3, #32
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d008      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004aca:	4b4a      	ldr	r3, [pc, #296]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	f023 0210 	bic.w	r2, r3, #16
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	4947      	ldr	r1, [pc, #284]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d008      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004ae8:	4b42      	ldr	r3, [pc, #264]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af4:	493f      	ldr	r1, [pc, #252]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d008      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b06:	4b3b      	ldr	r3, [pc, #236]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0a:	f023 0220 	bic.w	r2, r3, #32
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	4938      	ldr	r1, [pc, #224]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0308 	and.w	r3, r3, #8
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d008      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b24:	4b33      	ldr	r3, [pc, #204]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	4930      	ldr	r1, [pc, #192]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0310 	and.w	r3, r3, #16
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d008      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b42:	4b2c      	ldr	r3, [pc, #176]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	4929      	ldr	r1, [pc, #164]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d008      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b60:	4b24      	ldr	r3, [pc, #144]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	4921      	ldr	r1, [pc, #132]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d008      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b7e:	4b1d      	ldr	r3, [pc, #116]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b82:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	491a      	ldr	r1, [pc, #104]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d008      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004b9c:	4b15      	ldr	r3, [pc, #84]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba8:	4912      	ldr	r1, [pc, #72]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d008      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004bba:	4b0e      	ldr	r3, [pc, #56]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc6:	490b      	ldr	r1, [pc, #44]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d008      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004bd8:	4b06      	ldr	r3, [pc, #24]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bdc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be4:	4903      	ldr	r1, [pc, #12]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3748      	adds	r7, #72	; 0x48
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	40021000 	.word	0x40021000

08004bf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e09d      	b.n	8004d46 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d108      	bne.n	8004c24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c1a:	d009      	beq.n	8004c30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	61da      	str	r2, [r3, #28]
 8004c22:	e005      	b.n	8004c30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d106      	bne.n	8004c50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7fc f8dc 	bl	8000e08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c70:	d902      	bls.n	8004c78 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c72:	2300      	movs	r3, #0
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	e002      	b.n	8004c7e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c7c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c86:	d007      	beq.n	8004c98 <HAL_SPI_Init+0xa0>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c90:	d002      	beq.n	8004c98 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cda:	ea42 0103 	orr.w	r1, r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	0c1b      	lsrs	r3, r3, #16
 8004cf4:	f003 0204 	and.w	r2, r3, #4
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	f003 0310 	and.w	r3, r3, #16
 8004d00:	431a      	orrs	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d06:	f003 0308 	and.w	r3, r3, #8
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d14:	ea42 0103 	orr.w	r1, r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	69da      	ldr	r2, [r3, #28]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
	...

08004d50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d001      	beq.n	8004d68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e04a      	b.n	8004dfe <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0201 	orr.w	r2, r2, #1
 8004d7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a21      	ldr	r2, [pc, #132]	; (8004e0c <HAL_TIM_Base_Start_IT+0xbc>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d018      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x6c>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d92:	d013      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x6c>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1d      	ldr	r2, [pc, #116]	; (8004e10 <HAL_TIM_Base_Start_IT+0xc0>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00e      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x6c>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a1c      	ldr	r2, [pc, #112]	; (8004e14 <HAL_TIM_Base_Start_IT+0xc4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d009      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x6c>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a1a      	ldr	r2, [pc, #104]	; (8004e18 <HAL_TIM_Base_Start_IT+0xc8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d004      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x6c>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a19      	ldr	r2, [pc, #100]	; (8004e1c <HAL_TIM_Base_Start_IT+0xcc>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d115      	bne.n	8004de8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	4b17      	ldr	r3, [pc, #92]	; (8004e20 <HAL_TIM_Base_Start_IT+0xd0>)
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b06      	cmp	r3, #6
 8004dcc:	d015      	beq.n	8004dfa <HAL_TIM_Base_Start_IT+0xaa>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd4:	d011      	beq.n	8004dfa <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f042 0201 	orr.w	r2, r2, #1
 8004de4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de6:	e008      	b.n	8004dfa <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0201 	orr.w	r2, r2, #1
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	e000      	b.n	8004dfc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dfa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	40012c00 	.word	0x40012c00
 8004e10:	40000400 	.word	0x40000400
 8004e14:	40000800 	.word	0x40000800
 8004e18:	40013400 	.word	0x40013400
 8004e1c:	40014000 	.word	0x40014000
 8004e20:	00010007 	.word	0x00010007

08004e24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e049      	b.n	8004eca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fc f81e 	bl	8000e8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	4619      	mov	r1, r3
 8004e62:	4610      	mov	r0, r2
 8004e64:	f000 fcc6 	bl	80057f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d109      	bne.n	8004ef8 <HAL_TIM_PWM_Start+0x24>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	bf14      	ite	ne
 8004ef0:	2301      	movne	r3, #1
 8004ef2:	2300      	moveq	r3, #0
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	e03c      	b.n	8004f72 <HAL_TIM_PWM_Start+0x9e>
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d109      	bne.n	8004f12 <HAL_TIM_PWM_Start+0x3e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	bf14      	ite	ne
 8004f0a:	2301      	movne	r3, #1
 8004f0c:	2300      	moveq	r3, #0
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	e02f      	b.n	8004f72 <HAL_TIM_PWM_Start+0x9e>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d109      	bne.n	8004f2c <HAL_TIM_PWM_Start+0x58>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	bf14      	ite	ne
 8004f24:	2301      	movne	r3, #1
 8004f26:	2300      	moveq	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	e022      	b.n	8004f72 <HAL_TIM_PWM_Start+0x9e>
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b0c      	cmp	r3, #12
 8004f30:	d109      	bne.n	8004f46 <HAL_TIM_PWM_Start+0x72>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	bf14      	ite	ne
 8004f3e:	2301      	movne	r3, #1
 8004f40:	2300      	moveq	r3, #0
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	e015      	b.n	8004f72 <HAL_TIM_PWM_Start+0x9e>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d109      	bne.n	8004f60 <HAL_TIM_PWM_Start+0x8c>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	bf14      	ite	ne
 8004f58:	2301      	movne	r3, #1
 8004f5a:	2300      	moveq	r3, #0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	e008      	b.n	8004f72 <HAL_TIM_PWM_Start+0x9e>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	bf14      	ite	ne
 8004f6c:	2301      	movne	r3, #1
 8004f6e:	2300      	moveq	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e097      	b.n	80050aa <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d104      	bne.n	8004f8a <HAL_TIM_PWM_Start+0xb6>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f88:	e023      	b.n	8004fd2 <HAL_TIM_PWM_Start+0xfe>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b04      	cmp	r3, #4
 8004f8e:	d104      	bne.n	8004f9a <HAL_TIM_PWM_Start+0xc6>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f98:	e01b      	b.n	8004fd2 <HAL_TIM_PWM_Start+0xfe>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d104      	bne.n	8004faa <HAL_TIM_PWM_Start+0xd6>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fa8:	e013      	b.n	8004fd2 <HAL_TIM_PWM_Start+0xfe>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b0c      	cmp	r3, #12
 8004fae:	d104      	bne.n	8004fba <HAL_TIM_PWM_Start+0xe6>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fb8:	e00b      	b.n	8004fd2 <HAL_TIM_PWM_Start+0xfe>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b10      	cmp	r3, #16
 8004fbe:	d104      	bne.n	8004fca <HAL_TIM_PWM_Start+0xf6>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fc8:	e003      	b.n	8004fd2 <HAL_TIM_PWM_Start+0xfe>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2202      	movs	r2, #2
 8004fce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	6839      	ldr	r1, [r7, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 ff70 	bl	8005ec0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a33      	ldr	r2, [pc, #204]	; (80050b4 <HAL_TIM_PWM_Start+0x1e0>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d013      	beq.n	8005012 <HAL_TIM_PWM_Start+0x13e>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a32      	ldr	r2, [pc, #200]	; (80050b8 <HAL_TIM_PWM_Start+0x1e4>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d00e      	beq.n	8005012 <HAL_TIM_PWM_Start+0x13e>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a30      	ldr	r2, [pc, #192]	; (80050bc <HAL_TIM_PWM_Start+0x1e8>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d009      	beq.n	8005012 <HAL_TIM_PWM_Start+0x13e>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a2f      	ldr	r2, [pc, #188]	; (80050c0 <HAL_TIM_PWM_Start+0x1ec>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d004      	beq.n	8005012 <HAL_TIM_PWM_Start+0x13e>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a2d      	ldr	r2, [pc, #180]	; (80050c4 <HAL_TIM_PWM_Start+0x1f0>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d101      	bne.n	8005016 <HAL_TIM_PWM_Start+0x142>
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <HAL_TIM_PWM_Start+0x144>
 8005016:	2300      	movs	r3, #0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d007      	beq.n	800502c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800502a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a20      	ldr	r2, [pc, #128]	; (80050b4 <HAL_TIM_PWM_Start+0x1e0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d018      	beq.n	8005068 <HAL_TIM_PWM_Start+0x194>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800503e:	d013      	beq.n	8005068 <HAL_TIM_PWM_Start+0x194>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a20      	ldr	r2, [pc, #128]	; (80050c8 <HAL_TIM_PWM_Start+0x1f4>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00e      	beq.n	8005068 <HAL_TIM_PWM_Start+0x194>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a1f      	ldr	r2, [pc, #124]	; (80050cc <HAL_TIM_PWM_Start+0x1f8>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d009      	beq.n	8005068 <HAL_TIM_PWM_Start+0x194>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a17      	ldr	r2, [pc, #92]	; (80050b8 <HAL_TIM_PWM_Start+0x1e4>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d004      	beq.n	8005068 <HAL_TIM_PWM_Start+0x194>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a16      	ldr	r2, [pc, #88]	; (80050bc <HAL_TIM_PWM_Start+0x1e8>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d115      	bne.n	8005094 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	4b18      	ldr	r3, [pc, #96]	; (80050d0 <HAL_TIM_PWM_Start+0x1fc>)
 8005070:	4013      	ands	r3, r2
 8005072:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b06      	cmp	r3, #6
 8005078:	d015      	beq.n	80050a6 <HAL_TIM_PWM_Start+0x1d2>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005080:	d011      	beq.n	80050a6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 0201 	orr.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005092:	e008      	b.n	80050a6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0201 	orr.w	r2, r2, #1
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	e000      	b.n	80050a8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40012c00 	.word	0x40012c00
 80050b8:	40013400 	.word	0x40013400
 80050bc:	40014000 	.word	0x40014000
 80050c0:	40014400 	.word	0x40014400
 80050c4:	40014800 	.word	0x40014800
 80050c8:	40000400 	.word	0x40000400
 80050cc:	40000800 	.word	0x40000800
 80050d0:	00010007 	.word	0x00010007

080050d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e097      	b.n	8005218 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d106      	bne.n	8005102 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7fb fee5 	bl	8000ecc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2202      	movs	r2, #2
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6812      	ldr	r2, [r2, #0]
 8005114:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005118:	f023 0307 	bic.w	r3, r3, #7
 800511c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	3304      	adds	r3, #4
 8005126:	4619      	mov	r1, r3
 8005128:	4610      	mov	r0, r2
 800512a:	f000 fb63 	bl	80057f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005156:	f023 0303 	bic.w	r3, r3, #3
 800515a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	021b      	lsls	r3, r3, #8
 8005166:	4313      	orrs	r3, r2
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005174:	f023 030c 	bic.w	r3, r3, #12
 8005178:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005180:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005184:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	021b      	lsls	r3, r3, #8
 8005190:	4313      	orrs	r3, r2
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	4313      	orrs	r3, r2
 8005196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	011a      	lsls	r2, r3, #4
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	031b      	lsls	r3, r3, #12
 80051a4:	4313      	orrs	r3, r2
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80051b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80051ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	011b      	lsls	r3, r3, #4
 80051c6:	4313      	orrs	r3, r2
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005230:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005238:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005240:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005248:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d110      	bne.n	8005272 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005250:	7bfb      	ldrb	r3, [r7, #15]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d102      	bne.n	800525c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005256:	7b7b      	ldrb	r3, [r7, #13]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d001      	beq.n	8005260 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e069      	b.n	8005334 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005270:	e031      	b.n	80052d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b04      	cmp	r3, #4
 8005276:	d110      	bne.n	800529a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005278:	7bbb      	ldrb	r3, [r7, #14]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d102      	bne.n	8005284 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800527e:	7b3b      	ldrb	r3, [r7, #12]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d001      	beq.n	8005288 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e055      	b.n	8005334 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005298:	e01d      	b.n	80052d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800529a:	7bfb      	ldrb	r3, [r7, #15]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d108      	bne.n	80052b2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80052a0:	7bbb      	ldrb	r3, [r7, #14]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d105      	bne.n	80052b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052a6:	7b7b      	ldrb	r3, [r7, #13]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d102      	bne.n	80052b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80052ac:	7b3b      	ldrb	r3, [r7, #12]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d001      	beq.n	80052b6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e03e      	b.n	8005334 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2202      	movs	r2, #2
 80052ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2202      	movs	r2, #2
 80052c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2202      	movs	r2, #2
 80052ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2202      	movs	r2, #2
 80052d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d003      	beq.n	80052e4 <HAL_TIM_Encoder_Start+0xc4>
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	2b04      	cmp	r3, #4
 80052e0:	d008      	beq.n	80052f4 <HAL_TIM_Encoder_Start+0xd4>
 80052e2:	e00f      	b.n	8005304 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2201      	movs	r2, #1
 80052ea:	2100      	movs	r1, #0
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 fde7 	bl	8005ec0 <TIM_CCxChannelCmd>
      break;
 80052f2:	e016      	b.n	8005322 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2201      	movs	r2, #1
 80052fa:	2104      	movs	r1, #4
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 fddf 	bl	8005ec0 <TIM_CCxChannelCmd>
      break;
 8005302:	e00e      	b.n	8005322 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2201      	movs	r2, #1
 800530a:	2100      	movs	r1, #0
 800530c:	4618      	mov	r0, r3
 800530e:	f000 fdd7 	bl	8005ec0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2201      	movs	r2, #1
 8005318:	2104      	movs	r1, #4
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fdd0 	bl	8005ec0 <TIM_CCxChannelCmd>
      break;
 8005320:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f042 0201 	orr.w	r2, r2, #1
 8005330:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b02      	cmp	r3, #2
 8005350:	d122      	bne.n	8005398 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b02      	cmp	r3, #2
 800535e:	d11b      	bne.n	8005398 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0202 	mvn.w	r2, #2
 8005368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f003 0303 	and.w	r3, r3, #3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fa1a 	bl	80057b8 <HAL_TIM_IC_CaptureCallback>
 8005384:	e005      	b.n	8005392 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fa0c 	bl	80057a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fa1d 	bl	80057cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f003 0304 	and.w	r3, r3, #4
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d122      	bne.n	80053ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d11b      	bne.n	80053ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f06f 0204 	mvn.w	r2, #4
 80053bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2202      	movs	r2, #2
 80053c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f9f0 	bl	80057b8 <HAL_TIM_IC_CaptureCallback>
 80053d8:	e005      	b.n	80053e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f9e2 	bl	80057a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f9f3 	bl	80057cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f003 0308 	and.w	r3, r3, #8
 80053f6:	2b08      	cmp	r3, #8
 80053f8:	d122      	bne.n	8005440 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f003 0308 	and.w	r3, r3, #8
 8005404:	2b08      	cmp	r3, #8
 8005406:	d11b      	bne.n	8005440 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0208 	mvn.w	r2, #8
 8005410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2204      	movs	r2, #4
 8005416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f9c6 	bl	80057b8 <HAL_TIM_IC_CaptureCallback>
 800542c:	e005      	b.n	800543a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f9b8 	bl	80057a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f9c9 	bl	80057cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f003 0310 	and.w	r3, r3, #16
 800544a:	2b10      	cmp	r3, #16
 800544c:	d122      	bne.n	8005494 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f003 0310 	and.w	r3, r3, #16
 8005458:	2b10      	cmp	r3, #16
 800545a:	d11b      	bne.n	8005494 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f06f 0210 	mvn.w	r2, #16
 8005464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2208      	movs	r2, #8
 800546a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f99c 	bl	80057b8 <HAL_TIM_IC_CaptureCallback>
 8005480:	e005      	b.n	800548e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f98e 	bl	80057a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f99f 	bl	80057cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d10e      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d107      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f06f 0201 	mvn.w	r2, #1
 80054b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7fb f902 	bl	80006c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ca:	2b80      	cmp	r3, #128	; 0x80
 80054cc:	d10e      	bne.n	80054ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d8:	2b80      	cmp	r3, #128	; 0x80
 80054da:	d107      	bne.n	80054ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fe18 	bl	800611c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054fa:	d10e      	bne.n	800551a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005506:	2b80      	cmp	r3, #128	; 0x80
 8005508:	d107      	bne.n	800551a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fe0b 	bl	8006130 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005524:	2b40      	cmp	r3, #64	; 0x40
 8005526:	d10e      	bne.n	8005546 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005532:	2b40      	cmp	r3, #64	; 0x40
 8005534:	d107      	bne.n	8005546 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800553e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f94d 	bl	80057e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	f003 0320 	and.w	r3, r3, #32
 8005550:	2b20      	cmp	r3, #32
 8005552:	d10e      	bne.n	8005572 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f003 0320 	and.w	r3, r3, #32
 800555e:	2b20      	cmp	r3, #32
 8005560:	d107      	bne.n	8005572 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f06f 0220 	mvn.w	r2, #32
 800556a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 fdcb 	bl	8006108 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005572:	bf00      	nop
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005588:	2300      	movs	r3, #0
 800558a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005592:	2b01      	cmp	r3, #1
 8005594:	d101      	bne.n	800559a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005596:	2302      	movs	r3, #2
 8005598:	e0ff      	b.n	800579a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b14      	cmp	r3, #20
 80055a6:	f200 80f0 	bhi.w	800578a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80055aa:	a201      	add	r2, pc, #4	; (adr r2, 80055b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b0:	08005605 	.word	0x08005605
 80055b4:	0800578b 	.word	0x0800578b
 80055b8:	0800578b 	.word	0x0800578b
 80055bc:	0800578b 	.word	0x0800578b
 80055c0:	08005645 	.word	0x08005645
 80055c4:	0800578b 	.word	0x0800578b
 80055c8:	0800578b 	.word	0x0800578b
 80055cc:	0800578b 	.word	0x0800578b
 80055d0:	08005687 	.word	0x08005687
 80055d4:	0800578b 	.word	0x0800578b
 80055d8:	0800578b 	.word	0x0800578b
 80055dc:	0800578b 	.word	0x0800578b
 80055e0:	080056c7 	.word	0x080056c7
 80055e4:	0800578b 	.word	0x0800578b
 80055e8:	0800578b 	.word	0x0800578b
 80055ec:	0800578b 	.word	0x0800578b
 80055f0:	08005709 	.word	0x08005709
 80055f4:	0800578b 	.word	0x0800578b
 80055f8:	0800578b 	.word	0x0800578b
 80055fc:	0800578b 	.word	0x0800578b
 8005600:	08005749 	.word	0x08005749
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68b9      	ldr	r1, [r7, #8]
 800560a:	4618      	mov	r0, r3
 800560c:	f000 f982 	bl	8005914 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699a      	ldr	r2, [r3, #24]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0208 	orr.w	r2, r2, #8
 800561e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	699a      	ldr	r2, [r3, #24]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0204 	bic.w	r2, r2, #4
 800562e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6999      	ldr	r1, [r3, #24]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	691a      	ldr	r2, [r3, #16]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	619a      	str	r2, [r3, #24]
      break;
 8005642:	e0a5      	b.n	8005790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68b9      	ldr	r1, [r7, #8]
 800564a:	4618      	mov	r0, r3
 800564c:	f000 f9f2 	bl	8005a34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	699a      	ldr	r2, [r3, #24]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800565e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699a      	ldr	r2, [r3, #24]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800566e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6999      	ldr	r1, [r3, #24]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	021a      	lsls	r2, r3, #8
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	430a      	orrs	r2, r1
 8005682:	619a      	str	r2, [r3, #24]
      break;
 8005684:	e084      	b.n	8005790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68b9      	ldr	r1, [r7, #8]
 800568c:	4618      	mov	r0, r3
 800568e:	f000 fa5b 	bl	8005b48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69da      	ldr	r2, [r3, #28]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f042 0208 	orr.w	r2, r2, #8
 80056a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	69da      	ldr	r2, [r3, #28]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 0204 	bic.w	r2, r2, #4
 80056b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	69d9      	ldr	r1, [r3, #28]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	691a      	ldr	r2, [r3, #16]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	61da      	str	r2, [r3, #28]
      break;
 80056c4:	e064      	b.n	8005790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68b9      	ldr	r1, [r7, #8]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 fac3 	bl	8005c58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	69da      	ldr	r2, [r3, #28]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	69da      	ldr	r2, [r3, #28]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69d9      	ldr	r1, [r3, #28]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	021a      	lsls	r2, r3, #8
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	430a      	orrs	r2, r1
 8005704:	61da      	str	r2, [r3, #28]
      break;
 8005706:	e043      	b.n	8005790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	4618      	mov	r0, r3
 8005710:	f000 fb0c 	bl	8005d2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0208 	orr.w	r2, r2, #8
 8005722:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 0204 	bic.w	r2, r2, #4
 8005732:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	691a      	ldr	r2, [r3, #16]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005746:	e023      	b.n	8005790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68b9      	ldr	r1, [r7, #8]
 800574e:	4618      	mov	r0, r3
 8005750:	f000 fb50 	bl	8005df4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005762:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005772:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	021a      	lsls	r2, r3, #8
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005788:	e002      	b.n	8005790 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	75fb      	strb	r3, [r7, #23]
      break;
 800578e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005798:	7dfb      	ldrb	r3, [r7, #23]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop

080057a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a3c      	ldr	r2, [pc, #240]	; (80058f8 <TIM_Base_SetConfig+0x104>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d00f      	beq.n	800582c <TIM_Base_SetConfig+0x38>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005812:	d00b      	beq.n	800582c <TIM_Base_SetConfig+0x38>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a39      	ldr	r2, [pc, #228]	; (80058fc <TIM_Base_SetConfig+0x108>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d007      	beq.n	800582c <TIM_Base_SetConfig+0x38>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a38      	ldr	r2, [pc, #224]	; (8005900 <TIM_Base_SetConfig+0x10c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d003      	beq.n	800582c <TIM_Base_SetConfig+0x38>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a37      	ldr	r2, [pc, #220]	; (8005904 <TIM_Base_SetConfig+0x110>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d108      	bne.n	800583e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	4313      	orrs	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a2d      	ldr	r2, [pc, #180]	; (80058f8 <TIM_Base_SetConfig+0x104>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d01b      	beq.n	800587e <TIM_Base_SetConfig+0x8a>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800584c:	d017      	beq.n	800587e <TIM_Base_SetConfig+0x8a>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a2a      	ldr	r2, [pc, #168]	; (80058fc <TIM_Base_SetConfig+0x108>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d013      	beq.n	800587e <TIM_Base_SetConfig+0x8a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a29      	ldr	r2, [pc, #164]	; (8005900 <TIM_Base_SetConfig+0x10c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d00f      	beq.n	800587e <TIM_Base_SetConfig+0x8a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a28      	ldr	r2, [pc, #160]	; (8005904 <TIM_Base_SetConfig+0x110>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d00b      	beq.n	800587e <TIM_Base_SetConfig+0x8a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a27      	ldr	r2, [pc, #156]	; (8005908 <TIM_Base_SetConfig+0x114>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d007      	beq.n	800587e <TIM_Base_SetConfig+0x8a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a26      	ldr	r2, [pc, #152]	; (800590c <TIM_Base_SetConfig+0x118>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d003      	beq.n	800587e <TIM_Base_SetConfig+0x8a>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a25      	ldr	r2, [pc, #148]	; (8005910 <TIM_Base_SetConfig+0x11c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d108      	bne.n	8005890 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	4313      	orrs	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a10      	ldr	r2, [pc, #64]	; (80058f8 <TIM_Base_SetConfig+0x104>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d00f      	beq.n	80058dc <TIM_Base_SetConfig+0xe8>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a11      	ldr	r2, [pc, #68]	; (8005904 <TIM_Base_SetConfig+0x110>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d00b      	beq.n	80058dc <TIM_Base_SetConfig+0xe8>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a10      	ldr	r2, [pc, #64]	; (8005908 <TIM_Base_SetConfig+0x114>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d007      	beq.n	80058dc <TIM_Base_SetConfig+0xe8>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a0f      	ldr	r2, [pc, #60]	; (800590c <TIM_Base_SetConfig+0x118>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d003      	beq.n	80058dc <TIM_Base_SetConfig+0xe8>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a0e      	ldr	r2, [pc, #56]	; (8005910 <TIM_Base_SetConfig+0x11c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d103      	bne.n	80058e4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	691a      	ldr	r2, [r3, #16]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	615a      	str	r2, [r3, #20]
}
 80058ea:	bf00      	nop
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40012c00 	.word	0x40012c00
 80058fc:	40000400 	.word	0x40000400
 8005900:	40000800 	.word	0x40000800
 8005904:	40013400 	.word	0x40013400
 8005908:	40014000 	.word	0x40014000
 800590c:	40014400 	.word	0x40014400
 8005910:	40014800 	.word	0x40014800

08005914 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	f023 0201 	bic.w	r2, r3, #1
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f023 0303 	bic.w	r3, r3, #3
 800594e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f023 0302 	bic.w	r3, r3, #2
 8005960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4313      	orrs	r3, r2
 800596a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a2c      	ldr	r2, [pc, #176]	; (8005a20 <TIM_OC1_SetConfig+0x10c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d00f      	beq.n	8005994 <TIM_OC1_SetConfig+0x80>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a2b      	ldr	r2, [pc, #172]	; (8005a24 <TIM_OC1_SetConfig+0x110>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d00b      	beq.n	8005994 <TIM_OC1_SetConfig+0x80>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a2a      	ldr	r2, [pc, #168]	; (8005a28 <TIM_OC1_SetConfig+0x114>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d007      	beq.n	8005994 <TIM_OC1_SetConfig+0x80>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a29      	ldr	r2, [pc, #164]	; (8005a2c <TIM_OC1_SetConfig+0x118>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d003      	beq.n	8005994 <TIM_OC1_SetConfig+0x80>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a28      	ldr	r2, [pc, #160]	; (8005a30 <TIM_OC1_SetConfig+0x11c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d10c      	bne.n	80059ae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f023 0308 	bic.w	r3, r3, #8
 800599a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f023 0304 	bic.w	r3, r3, #4
 80059ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a1b      	ldr	r2, [pc, #108]	; (8005a20 <TIM_OC1_SetConfig+0x10c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d00f      	beq.n	80059d6 <TIM_OC1_SetConfig+0xc2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a1a      	ldr	r2, [pc, #104]	; (8005a24 <TIM_OC1_SetConfig+0x110>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00b      	beq.n	80059d6 <TIM_OC1_SetConfig+0xc2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a19      	ldr	r2, [pc, #100]	; (8005a28 <TIM_OC1_SetConfig+0x114>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d007      	beq.n	80059d6 <TIM_OC1_SetConfig+0xc2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a18      	ldr	r2, [pc, #96]	; (8005a2c <TIM_OC1_SetConfig+0x118>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d003      	beq.n	80059d6 <TIM_OC1_SetConfig+0xc2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a17      	ldr	r2, [pc, #92]	; (8005a30 <TIM_OC1_SetConfig+0x11c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d111      	bne.n	80059fa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	621a      	str	r2, [r3, #32]
}
 8005a14:	bf00      	nop
 8005a16:	371c      	adds	r7, #28
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	40012c00 	.word	0x40012c00
 8005a24:	40013400 	.word	0x40013400
 8005a28:	40014000 	.word	0x40014000
 8005a2c:	40014400 	.word	0x40014400
 8005a30:	40014800 	.word	0x40014800

08005a34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b087      	sub	sp, #28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	f023 0210 	bic.w	r2, r3, #16
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	021b      	lsls	r3, r3, #8
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	f023 0320 	bic.w	r3, r3, #32
 8005a82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	011b      	lsls	r3, r3, #4
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a28      	ldr	r2, [pc, #160]	; (8005b34 <TIM_OC2_SetConfig+0x100>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d003      	beq.n	8005aa0 <TIM_OC2_SetConfig+0x6c>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a27      	ldr	r2, [pc, #156]	; (8005b38 <TIM_OC2_SetConfig+0x104>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d10d      	bne.n	8005abc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	011b      	lsls	r3, r3, #4
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a1d      	ldr	r2, [pc, #116]	; (8005b34 <TIM_OC2_SetConfig+0x100>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d00f      	beq.n	8005ae4 <TIM_OC2_SetConfig+0xb0>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a1c      	ldr	r2, [pc, #112]	; (8005b38 <TIM_OC2_SetConfig+0x104>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d00b      	beq.n	8005ae4 <TIM_OC2_SetConfig+0xb0>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a1b      	ldr	r2, [pc, #108]	; (8005b3c <TIM_OC2_SetConfig+0x108>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d007      	beq.n	8005ae4 <TIM_OC2_SetConfig+0xb0>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a1a      	ldr	r2, [pc, #104]	; (8005b40 <TIM_OC2_SetConfig+0x10c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d003      	beq.n	8005ae4 <TIM_OC2_SetConfig+0xb0>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a19      	ldr	r2, [pc, #100]	; (8005b44 <TIM_OC2_SetConfig+0x110>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d113      	bne.n	8005b0c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005aea:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005af2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	621a      	str	r2, [r3, #32]
}
 8005b26:	bf00      	nop
 8005b28:	371c      	adds	r7, #28
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	40012c00 	.word	0x40012c00
 8005b38:	40013400 	.word	0x40013400
 8005b3c:	40014000 	.word	0x40014000
 8005b40:	40014400 	.word	0x40014400
 8005b44:	40014800 	.word	0x40014800

08005b48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 0303 	bic.w	r3, r3, #3
 8005b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	021b      	lsls	r3, r3, #8
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a27      	ldr	r2, [pc, #156]	; (8005c44 <TIM_OC3_SetConfig+0xfc>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d003      	beq.n	8005bb2 <TIM_OC3_SetConfig+0x6a>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a26      	ldr	r2, [pc, #152]	; (8005c48 <TIM_OC3_SetConfig+0x100>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d10d      	bne.n	8005bce <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	021b      	lsls	r3, r3, #8
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bcc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a1c      	ldr	r2, [pc, #112]	; (8005c44 <TIM_OC3_SetConfig+0xfc>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00f      	beq.n	8005bf6 <TIM_OC3_SetConfig+0xae>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a1b      	ldr	r2, [pc, #108]	; (8005c48 <TIM_OC3_SetConfig+0x100>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00b      	beq.n	8005bf6 <TIM_OC3_SetConfig+0xae>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a1a      	ldr	r2, [pc, #104]	; (8005c4c <TIM_OC3_SetConfig+0x104>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d007      	beq.n	8005bf6 <TIM_OC3_SetConfig+0xae>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a19      	ldr	r2, [pc, #100]	; (8005c50 <TIM_OC3_SetConfig+0x108>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d003      	beq.n	8005bf6 <TIM_OC3_SetConfig+0xae>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a18      	ldr	r2, [pc, #96]	; (8005c54 <TIM_OC3_SetConfig+0x10c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d113      	bne.n	8005c1e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	011b      	lsls	r3, r3, #4
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	011b      	lsls	r3, r3, #4
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	621a      	str	r2, [r3, #32]
}
 8005c38:	bf00      	nop
 8005c3a:	371c      	adds	r7, #28
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	40012c00 	.word	0x40012c00
 8005c48:	40013400 	.word	0x40013400
 8005c4c:	40014000 	.word	0x40014000
 8005c50:	40014400 	.word	0x40014400
 8005c54:	40014800 	.word	0x40014800

08005c58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	69db      	ldr	r3, [r3, #28]
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	021b      	lsls	r3, r3, #8
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ca6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	031b      	lsls	r3, r3, #12
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a18      	ldr	r2, [pc, #96]	; (8005d18 <TIM_OC4_SetConfig+0xc0>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00f      	beq.n	8005cdc <TIM_OC4_SetConfig+0x84>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a17      	ldr	r2, [pc, #92]	; (8005d1c <TIM_OC4_SetConfig+0xc4>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d00b      	beq.n	8005cdc <TIM_OC4_SetConfig+0x84>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a16      	ldr	r2, [pc, #88]	; (8005d20 <TIM_OC4_SetConfig+0xc8>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d007      	beq.n	8005cdc <TIM_OC4_SetConfig+0x84>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a15      	ldr	r2, [pc, #84]	; (8005d24 <TIM_OC4_SetConfig+0xcc>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d003      	beq.n	8005cdc <TIM_OC4_SetConfig+0x84>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a14      	ldr	r2, [pc, #80]	; (8005d28 <TIM_OC4_SetConfig+0xd0>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d109      	bne.n	8005cf0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ce2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	019b      	lsls	r3, r3, #6
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	621a      	str	r2, [r3, #32]
}
 8005d0a:	bf00      	nop
 8005d0c:	371c      	adds	r7, #28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	40012c00 	.word	0x40012c00
 8005d1c:	40013400 	.word	0x40013400
 8005d20:	40014000 	.word	0x40014000
 8005d24:	40014400 	.word	0x40014400
 8005d28:	40014800 	.word	0x40014800

08005d2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	041b      	lsls	r3, r3, #16
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a17      	ldr	r2, [pc, #92]	; (8005de0 <TIM_OC5_SetConfig+0xb4>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d00f      	beq.n	8005da6 <TIM_OC5_SetConfig+0x7a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a16      	ldr	r2, [pc, #88]	; (8005de4 <TIM_OC5_SetConfig+0xb8>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d00b      	beq.n	8005da6 <TIM_OC5_SetConfig+0x7a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a15      	ldr	r2, [pc, #84]	; (8005de8 <TIM_OC5_SetConfig+0xbc>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d007      	beq.n	8005da6 <TIM_OC5_SetConfig+0x7a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a14      	ldr	r2, [pc, #80]	; (8005dec <TIM_OC5_SetConfig+0xc0>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d003      	beq.n	8005da6 <TIM_OC5_SetConfig+0x7a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a13      	ldr	r2, [pc, #76]	; (8005df0 <TIM_OC5_SetConfig+0xc4>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d109      	bne.n	8005dba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	021b      	lsls	r3, r3, #8
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	621a      	str	r2, [r3, #32]
}
 8005dd4:	bf00      	nop
 8005dd6:	371c      	adds	r7, #28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	40012c00 	.word	0x40012c00
 8005de4:	40013400 	.word	0x40013400
 8005de8:	40014000 	.word	0x40014000
 8005dec:	40014400 	.word	0x40014400
 8005df0:	40014800 	.word	0x40014800

08005df4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	021b      	lsls	r3, r3, #8
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	051b      	lsls	r3, r3, #20
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a18      	ldr	r2, [pc, #96]	; (8005eac <TIM_OC6_SetConfig+0xb8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d00f      	beq.n	8005e70 <TIM_OC6_SetConfig+0x7c>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a17      	ldr	r2, [pc, #92]	; (8005eb0 <TIM_OC6_SetConfig+0xbc>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d00b      	beq.n	8005e70 <TIM_OC6_SetConfig+0x7c>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a16      	ldr	r2, [pc, #88]	; (8005eb4 <TIM_OC6_SetConfig+0xc0>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d007      	beq.n	8005e70 <TIM_OC6_SetConfig+0x7c>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a15      	ldr	r2, [pc, #84]	; (8005eb8 <TIM_OC6_SetConfig+0xc4>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d003      	beq.n	8005e70 <TIM_OC6_SetConfig+0x7c>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a14      	ldr	r2, [pc, #80]	; (8005ebc <TIM_OC6_SetConfig+0xc8>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d109      	bne.n	8005e84 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	029b      	lsls	r3, r3, #10
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	621a      	str	r2, [r3, #32]
}
 8005e9e:	bf00      	nop
 8005ea0:	371c      	adds	r7, #28
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	40012c00 	.word	0x40012c00
 8005eb0:	40013400 	.word	0x40013400
 8005eb4:	40014000 	.word	0x40014000
 8005eb8:	40014400 	.word	0x40014400
 8005ebc:	40014800 	.word	0x40014800

08005ec0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f003 031f 	and.w	r3, r3, #31
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6a1a      	ldr	r2, [r3, #32]
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	43db      	mvns	r3, r3
 8005ee2:	401a      	ands	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6a1a      	ldr	r2, [r3, #32]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	f003 031f 	and.w	r3, r3, #31
 8005ef2:	6879      	ldr	r1, [r7, #4]
 8005ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef8:	431a      	orrs	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	621a      	str	r2, [r3, #32]
}
 8005efe:	bf00      	nop
 8005f00:	371c      	adds	r7, #28
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
	...

08005f0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d101      	bne.n	8005f24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f20:	2302      	movs	r3, #2
 8005f22:	e063      	b.n	8005fec <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a2b      	ldr	r2, [pc, #172]	; (8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d004      	beq.n	8005f58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a2a      	ldr	r2, [pc, #168]	; (8005ffc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d108      	bne.n	8005f6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a1b      	ldr	r2, [pc, #108]	; (8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d018      	beq.n	8005fc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f96:	d013      	beq.n	8005fc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a18      	ldr	r2, [pc, #96]	; (8006000 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d00e      	beq.n	8005fc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a17      	ldr	r2, [pc, #92]	; (8006004 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d009      	beq.n	8005fc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a12      	ldr	r2, [pc, #72]	; (8005ffc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d004      	beq.n	8005fc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a13      	ldr	r2, [pc, #76]	; (8006008 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d10c      	bne.n	8005fda <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fc6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	40012c00 	.word	0x40012c00
 8005ffc:	40013400 	.word	0x40013400
 8006000:	40000400 	.word	0x40000400
 8006004:	40000800 	.word	0x40000800
 8006008:	40014000 	.word	0x40014000

0800600c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006020:	2b01      	cmp	r3, #1
 8006022:	d101      	bne.n	8006028 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006024:	2302      	movs	r3, #2
 8006026:	e065      	b.n	80060f4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	4313      	orrs	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	4313      	orrs	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4313      	orrs	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	4313      	orrs	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	041b      	lsls	r3, r3, #16
 800609e:	4313      	orrs	r3, r2
 80060a0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a16      	ldr	r2, [pc, #88]	; (8006100 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d004      	beq.n	80060b6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a14      	ldr	r2, [pc, #80]	; (8006104 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d115      	bne.n	80060e2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	051b      	lsls	r3, r3, #20
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	4313      	orrs	r3, r2
 80060e0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	40012c00 	.word	0x40012c00
 8006104:	40013400 	.word	0x40013400

08006108 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e040      	b.n	80061d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800615a:	2b00      	cmp	r3, #0
 800615c:	d106      	bne.n	800616c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fa ff34 	bl	8000fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2224      	movs	r2, #36	; 0x24
 8006170:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0201 	bic.w	r2, r2, #1
 8006180:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f82c 	bl	80061e0 <UART_SetConfig>
 8006188:	4603      	mov	r3, r0
 800618a:	2b01      	cmp	r3, #1
 800618c:	d101      	bne.n	8006192 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e022      	b.n	80061d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	2b00      	cmp	r3, #0
 8006198:	d002      	beq.n	80061a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f9f4 	bl	8006588 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689a      	ldr	r2, [r3, #8]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0201 	orr.w	r2, r2, #1
 80061ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fa7b 	bl	80066cc <UART_CheckIdleState>
 80061d6:	4603      	mov	r3, r0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061e8:	2300      	movs	r3, #0
 80061ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689a      	ldr	r2, [r3, #8]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	431a      	orrs	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	431a      	orrs	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	69db      	ldr	r3, [r3, #28]
 8006200:	4313      	orrs	r3, r2
 8006202:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800620e:	f023 030c 	bic.w	r3, r3, #12
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	6812      	ldr	r2, [r2, #0]
 8006216:	6979      	ldr	r1, [r7, #20]
 8006218:	430b      	orrs	r3, r1
 800621a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68da      	ldr	r2, [r3, #12]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a1b      	ldr	r3, [r3, #32]
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	4313      	orrs	r3, r2
 8006240:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	430a      	orrs	r2, r1
 8006254:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4aa7      	ldr	r2, [pc, #668]	; (80064f8 <UART_SetConfig+0x318>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d120      	bne.n	80062a2 <UART_SetConfig+0xc2>
 8006260:	4ba6      	ldr	r3, [pc, #664]	; (80064fc <UART_SetConfig+0x31c>)
 8006262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006264:	f003 0303 	and.w	r3, r3, #3
 8006268:	2b03      	cmp	r3, #3
 800626a:	d817      	bhi.n	800629c <UART_SetConfig+0xbc>
 800626c:	a201      	add	r2, pc, #4	; (adr r2, 8006274 <UART_SetConfig+0x94>)
 800626e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006272:	bf00      	nop
 8006274:	08006285 	.word	0x08006285
 8006278:	08006291 	.word	0x08006291
 800627c:	08006297 	.word	0x08006297
 8006280:	0800628b 	.word	0x0800628b
 8006284:	2301      	movs	r3, #1
 8006286:	77fb      	strb	r3, [r7, #31]
 8006288:	e0b5      	b.n	80063f6 <UART_SetConfig+0x216>
 800628a:	2302      	movs	r3, #2
 800628c:	77fb      	strb	r3, [r7, #31]
 800628e:	e0b2      	b.n	80063f6 <UART_SetConfig+0x216>
 8006290:	2304      	movs	r3, #4
 8006292:	77fb      	strb	r3, [r7, #31]
 8006294:	e0af      	b.n	80063f6 <UART_SetConfig+0x216>
 8006296:	2308      	movs	r3, #8
 8006298:	77fb      	strb	r3, [r7, #31]
 800629a:	e0ac      	b.n	80063f6 <UART_SetConfig+0x216>
 800629c:	2310      	movs	r3, #16
 800629e:	77fb      	strb	r3, [r7, #31]
 80062a0:	e0a9      	b.n	80063f6 <UART_SetConfig+0x216>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a96      	ldr	r2, [pc, #600]	; (8006500 <UART_SetConfig+0x320>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d124      	bne.n	80062f6 <UART_SetConfig+0x116>
 80062ac:	4b93      	ldr	r3, [pc, #588]	; (80064fc <UART_SetConfig+0x31c>)
 80062ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80062b8:	d011      	beq.n	80062de <UART_SetConfig+0xfe>
 80062ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80062be:	d817      	bhi.n	80062f0 <UART_SetConfig+0x110>
 80062c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062c4:	d011      	beq.n	80062ea <UART_SetConfig+0x10a>
 80062c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062ca:	d811      	bhi.n	80062f0 <UART_SetConfig+0x110>
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d003      	beq.n	80062d8 <UART_SetConfig+0xf8>
 80062d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062d4:	d006      	beq.n	80062e4 <UART_SetConfig+0x104>
 80062d6:	e00b      	b.n	80062f0 <UART_SetConfig+0x110>
 80062d8:	2300      	movs	r3, #0
 80062da:	77fb      	strb	r3, [r7, #31]
 80062dc:	e08b      	b.n	80063f6 <UART_SetConfig+0x216>
 80062de:	2302      	movs	r3, #2
 80062e0:	77fb      	strb	r3, [r7, #31]
 80062e2:	e088      	b.n	80063f6 <UART_SetConfig+0x216>
 80062e4:	2304      	movs	r3, #4
 80062e6:	77fb      	strb	r3, [r7, #31]
 80062e8:	e085      	b.n	80063f6 <UART_SetConfig+0x216>
 80062ea:	2308      	movs	r3, #8
 80062ec:	77fb      	strb	r3, [r7, #31]
 80062ee:	e082      	b.n	80063f6 <UART_SetConfig+0x216>
 80062f0:	2310      	movs	r3, #16
 80062f2:	77fb      	strb	r3, [r7, #31]
 80062f4:	e07f      	b.n	80063f6 <UART_SetConfig+0x216>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a82      	ldr	r2, [pc, #520]	; (8006504 <UART_SetConfig+0x324>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d124      	bne.n	800634a <UART_SetConfig+0x16a>
 8006300:	4b7e      	ldr	r3, [pc, #504]	; (80064fc <UART_SetConfig+0x31c>)
 8006302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006304:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006308:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800630c:	d011      	beq.n	8006332 <UART_SetConfig+0x152>
 800630e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006312:	d817      	bhi.n	8006344 <UART_SetConfig+0x164>
 8006314:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006318:	d011      	beq.n	800633e <UART_SetConfig+0x15e>
 800631a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800631e:	d811      	bhi.n	8006344 <UART_SetConfig+0x164>
 8006320:	2b00      	cmp	r3, #0
 8006322:	d003      	beq.n	800632c <UART_SetConfig+0x14c>
 8006324:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006328:	d006      	beq.n	8006338 <UART_SetConfig+0x158>
 800632a:	e00b      	b.n	8006344 <UART_SetConfig+0x164>
 800632c:	2300      	movs	r3, #0
 800632e:	77fb      	strb	r3, [r7, #31]
 8006330:	e061      	b.n	80063f6 <UART_SetConfig+0x216>
 8006332:	2302      	movs	r3, #2
 8006334:	77fb      	strb	r3, [r7, #31]
 8006336:	e05e      	b.n	80063f6 <UART_SetConfig+0x216>
 8006338:	2304      	movs	r3, #4
 800633a:	77fb      	strb	r3, [r7, #31]
 800633c:	e05b      	b.n	80063f6 <UART_SetConfig+0x216>
 800633e:	2308      	movs	r3, #8
 8006340:	77fb      	strb	r3, [r7, #31]
 8006342:	e058      	b.n	80063f6 <UART_SetConfig+0x216>
 8006344:	2310      	movs	r3, #16
 8006346:	77fb      	strb	r3, [r7, #31]
 8006348:	e055      	b.n	80063f6 <UART_SetConfig+0x216>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a6e      	ldr	r2, [pc, #440]	; (8006508 <UART_SetConfig+0x328>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d124      	bne.n	800639e <UART_SetConfig+0x1be>
 8006354:	4b69      	ldr	r3, [pc, #420]	; (80064fc <UART_SetConfig+0x31c>)
 8006356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006358:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800635c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006360:	d011      	beq.n	8006386 <UART_SetConfig+0x1a6>
 8006362:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006366:	d817      	bhi.n	8006398 <UART_SetConfig+0x1b8>
 8006368:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800636c:	d011      	beq.n	8006392 <UART_SetConfig+0x1b2>
 800636e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006372:	d811      	bhi.n	8006398 <UART_SetConfig+0x1b8>
 8006374:	2b00      	cmp	r3, #0
 8006376:	d003      	beq.n	8006380 <UART_SetConfig+0x1a0>
 8006378:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800637c:	d006      	beq.n	800638c <UART_SetConfig+0x1ac>
 800637e:	e00b      	b.n	8006398 <UART_SetConfig+0x1b8>
 8006380:	2300      	movs	r3, #0
 8006382:	77fb      	strb	r3, [r7, #31]
 8006384:	e037      	b.n	80063f6 <UART_SetConfig+0x216>
 8006386:	2302      	movs	r3, #2
 8006388:	77fb      	strb	r3, [r7, #31]
 800638a:	e034      	b.n	80063f6 <UART_SetConfig+0x216>
 800638c:	2304      	movs	r3, #4
 800638e:	77fb      	strb	r3, [r7, #31]
 8006390:	e031      	b.n	80063f6 <UART_SetConfig+0x216>
 8006392:	2308      	movs	r3, #8
 8006394:	77fb      	strb	r3, [r7, #31]
 8006396:	e02e      	b.n	80063f6 <UART_SetConfig+0x216>
 8006398:	2310      	movs	r3, #16
 800639a:	77fb      	strb	r3, [r7, #31]
 800639c:	e02b      	b.n	80063f6 <UART_SetConfig+0x216>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a5a      	ldr	r2, [pc, #360]	; (800650c <UART_SetConfig+0x32c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d124      	bne.n	80063f2 <UART_SetConfig+0x212>
 80063a8:	4b54      	ldr	r3, [pc, #336]	; (80064fc <UART_SetConfig+0x31c>)
 80063aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ac:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80063b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80063b4:	d011      	beq.n	80063da <UART_SetConfig+0x1fa>
 80063b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80063ba:	d817      	bhi.n	80063ec <UART_SetConfig+0x20c>
 80063bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063c0:	d011      	beq.n	80063e6 <UART_SetConfig+0x206>
 80063c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063c6:	d811      	bhi.n	80063ec <UART_SetConfig+0x20c>
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d003      	beq.n	80063d4 <UART_SetConfig+0x1f4>
 80063cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063d0:	d006      	beq.n	80063e0 <UART_SetConfig+0x200>
 80063d2:	e00b      	b.n	80063ec <UART_SetConfig+0x20c>
 80063d4:	2300      	movs	r3, #0
 80063d6:	77fb      	strb	r3, [r7, #31]
 80063d8:	e00d      	b.n	80063f6 <UART_SetConfig+0x216>
 80063da:	2302      	movs	r3, #2
 80063dc:	77fb      	strb	r3, [r7, #31]
 80063de:	e00a      	b.n	80063f6 <UART_SetConfig+0x216>
 80063e0:	2304      	movs	r3, #4
 80063e2:	77fb      	strb	r3, [r7, #31]
 80063e4:	e007      	b.n	80063f6 <UART_SetConfig+0x216>
 80063e6:	2308      	movs	r3, #8
 80063e8:	77fb      	strb	r3, [r7, #31]
 80063ea:	e004      	b.n	80063f6 <UART_SetConfig+0x216>
 80063ec:	2310      	movs	r3, #16
 80063ee:	77fb      	strb	r3, [r7, #31]
 80063f0:	e001      	b.n	80063f6 <UART_SetConfig+0x216>
 80063f2:	2310      	movs	r3, #16
 80063f4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063fe:	d15b      	bne.n	80064b8 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8006400:	7ffb      	ldrb	r3, [r7, #31]
 8006402:	2b08      	cmp	r3, #8
 8006404:	d827      	bhi.n	8006456 <UART_SetConfig+0x276>
 8006406:	a201      	add	r2, pc, #4	; (adr r2, 800640c <UART_SetConfig+0x22c>)
 8006408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640c:	08006431 	.word	0x08006431
 8006410:	08006439 	.word	0x08006439
 8006414:	08006441 	.word	0x08006441
 8006418:	08006457 	.word	0x08006457
 800641c:	08006447 	.word	0x08006447
 8006420:	08006457 	.word	0x08006457
 8006424:	08006457 	.word	0x08006457
 8006428:	08006457 	.word	0x08006457
 800642c:	0800644f 	.word	0x0800644f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006430:	f7fe f9ee 	bl	8004810 <HAL_RCC_GetPCLK1Freq>
 8006434:	61b8      	str	r0, [r7, #24]
        break;
 8006436:	e013      	b.n	8006460 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006438:	f7fe fa0c 	bl	8004854 <HAL_RCC_GetPCLK2Freq>
 800643c:	61b8      	str	r0, [r7, #24]
        break;
 800643e:	e00f      	b.n	8006460 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006440:	4b33      	ldr	r3, [pc, #204]	; (8006510 <UART_SetConfig+0x330>)
 8006442:	61bb      	str	r3, [r7, #24]
        break;
 8006444:	e00c      	b.n	8006460 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006446:	f7fe f96d 	bl	8004724 <HAL_RCC_GetSysClockFreq>
 800644a:	61b8      	str	r0, [r7, #24]
        break;
 800644c:	e008      	b.n	8006460 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800644e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006452:	61bb      	str	r3, [r7, #24]
        break;
 8006454:	e004      	b.n	8006460 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006456:	2300      	movs	r3, #0
 8006458:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	77bb      	strb	r3, [r7, #30]
        break;
 800645e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	2b00      	cmp	r3, #0
 8006464:	f000 8082 	beq.w	800656c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	005a      	lsls	r2, r3, #1
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	085b      	lsrs	r3, r3, #1
 8006472:	441a      	add	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	fbb2 f3f3 	udiv	r3, r2, r3
 800647c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	2b0f      	cmp	r3, #15
 8006482:	d916      	bls.n	80064b2 <UART_SetConfig+0x2d2>
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800648a:	d212      	bcs.n	80064b2 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	b29b      	uxth	r3, r3
 8006490:	f023 030f 	bic.w	r3, r3, #15
 8006494:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	085b      	lsrs	r3, r3, #1
 800649a:	b29b      	uxth	r3, r3
 800649c:	f003 0307 	and.w	r3, r3, #7
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	89fb      	ldrh	r3, [r7, #14]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	89fa      	ldrh	r2, [r7, #14]
 80064ae:	60da      	str	r2, [r3, #12]
 80064b0:	e05c      	b.n	800656c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	77bb      	strb	r3, [r7, #30]
 80064b6:	e059      	b.n	800656c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064b8:	7ffb      	ldrb	r3, [r7, #31]
 80064ba:	2b08      	cmp	r3, #8
 80064bc:	d835      	bhi.n	800652a <UART_SetConfig+0x34a>
 80064be:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <UART_SetConfig+0x2e4>)
 80064c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c4:	080064e9 	.word	0x080064e9
 80064c8:	080064f1 	.word	0x080064f1
 80064cc:	08006515 	.word	0x08006515
 80064d0:	0800652b 	.word	0x0800652b
 80064d4:	0800651b 	.word	0x0800651b
 80064d8:	0800652b 	.word	0x0800652b
 80064dc:	0800652b 	.word	0x0800652b
 80064e0:	0800652b 	.word	0x0800652b
 80064e4:	08006523 	.word	0x08006523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064e8:	f7fe f992 	bl	8004810 <HAL_RCC_GetPCLK1Freq>
 80064ec:	61b8      	str	r0, [r7, #24]
        break;
 80064ee:	e021      	b.n	8006534 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064f0:	f7fe f9b0 	bl	8004854 <HAL_RCC_GetPCLK2Freq>
 80064f4:	61b8      	str	r0, [r7, #24]
        break;
 80064f6:	e01d      	b.n	8006534 <UART_SetConfig+0x354>
 80064f8:	40013800 	.word	0x40013800
 80064fc:	40021000 	.word	0x40021000
 8006500:	40004400 	.word	0x40004400
 8006504:	40004800 	.word	0x40004800
 8006508:	40004c00 	.word	0x40004c00
 800650c:	40005000 	.word	0x40005000
 8006510:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006514:	4b1b      	ldr	r3, [pc, #108]	; (8006584 <UART_SetConfig+0x3a4>)
 8006516:	61bb      	str	r3, [r7, #24]
        break;
 8006518:	e00c      	b.n	8006534 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800651a:	f7fe f903 	bl	8004724 <HAL_RCC_GetSysClockFreq>
 800651e:	61b8      	str	r0, [r7, #24]
        break;
 8006520:	e008      	b.n	8006534 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006526:	61bb      	str	r3, [r7, #24]
        break;
 8006528:	e004      	b.n	8006534 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800652a:	2300      	movs	r3, #0
 800652c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	77bb      	strb	r3, [r7, #30]
        break;
 8006532:	bf00      	nop
    }

    if (pclk != 0U)
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d018      	beq.n	800656c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	085a      	lsrs	r2, r3, #1
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	441a      	add	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	fbb2 f3f3 	udiv	r3, r2, r3
 800654c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	2b0f      	cmp	r3, #15
 8006552:	d909      	bls.n	8006568 <UART_SetConfig+0x388>
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800655a:	d205      	bcs.n	8006568 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	b29a      	uxth	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	60da      	str	r2, [r3, #12]
 8006566:	e001      	b.n	800656c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006578:	7fbb      	ldrb	r3, [r7, #30]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3720      	adds	r7, #32
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	007a1200 	.word	0x007a1200

08006588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00a      	beq.n	80065b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00a      	beq.n	80065f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fa:	f003 0308 	and.w	r3, r3, #8
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00a      	beq.n	8006618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	f003 0310 	and.w	r3, r3, #16
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00a      	beq.n	800663a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	f003 0320 	and.w	r3, r3, #32
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00a      	beq.n	800665c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	430a      	orrs	r2, r1
 800665a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006664:	2b00      	cmp	r3, #0
 8006666:	d01a      	beq.n	800669e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	430a      	orrs	r2, r1
 800667c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006686:	d10a      	bne.n	800669e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	605a      	str	r2, [r3, #4]
  }
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b098      	sub	sp, #96	; 0x60
 80066d0:	af02      	add	r7, sp, #8
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066dc:	f7fa fd92 	bl	8001204 <HAL_GetTick>
 80066e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0308 	and.w	r3, r3, #8
 80066ec:	2b08      	cmp	r3, #8
 80066ee:	d12e      	bne.n	800674e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066f8:	2200      	movs	r2, #0
 80066fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f88c 	bl	800681c <UART_WaitOnFlagUntilTimeout>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d021      	beq.n	800674e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006712:	e853 3f00 	ldrex	r3, [r3]
 8006716:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800671e:	653b      	str	r3, [r7, #80]	; 0x50
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	461a      	mov	r2, r3
 8006726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006728:	647b      	str	r3, [r7, #68]	; 0x44
 800672a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800672e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006730:	e841 2300 	strex	r3, r2, [r1]
 8006734:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1e6      	bne.n	800670a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2220      	movs	r2, #32
 8006740:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e062      	b.n	8006814 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0304 	and.w	r3, r3, #4
 8006758:	2b04      	cmp	r3, #4
 800675a:	d149      	bne.n	80067f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800675c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006764:	2200      	movs	r2, #0
 8006766:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f856 	bl	800681c <UART_WaitOnFlagUntilTimeout>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d03c      	beq.n	80067f0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	e853 3f00 	ldrex	r3, [r3]
 8006782:	623b      	str	r3, [r7, #32]
   return(result);
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800678a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	461a      	mov	r2, r3
 8006792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006794:	633b      	str	r3, [r7, #48]	; 0x30
 8006796:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006798:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800679a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800679c:	e841 2300 	strex	r3, r2, [r1]
 80067a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e6      	bne.n	8006776 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	3308      	adds	r3, #8
 80067ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	e853 3f00 	ldrex	r3, [r3]
 80067b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0301 	bic.w	r3, r3, #1
 80067be:	64bb      	str	r3, [r7, #72]	; 0x48
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3308      	adds	r3, #8
 80067c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067c8:	61fa      	str	r2, [r7, #28]
 80067ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067cc:	69b9      	ldr	r1, [r7, #24]
 80067ce:	69fa      	ldr	r2, [r7, #28]
 80067d0:	e841 2300 	strex	r3, r2, [r1]
 80067d4:	617b      	str	r3, [r7, #20]
   return(result);
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1e5      	bne.n	80067a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2220      	movs	r2, #32
 80067e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e011      	b.n	8006814 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2220      	movs	r2, #32
 80067f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3758      	adds	r7, #88	; 0x58
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	603b      	str	r3, [r7, #0]
 8006828:	4613      	mov	r3, r2
 800682a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800682c:	e049      	b.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006834:	d045      	beq.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006836:	f7fa fce5 	bl	8001204 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	429a      	cmp	r2, r3
 8006844:	d302      	bcc.n	800684c <UART_WaitOnFlagUntilTimeout+0x30>
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e048      	b.n	80068e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0304 	and.w	r3, r3, #4
 800685a:	2b00      	cmp	r3, #0
 800685c:	d031      	beq.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	f003 0308 	and.w	r3, r3, #8
 8006868:	2b08      	cmp	r3, #8
 800686a:	d110      	bne.n	800688e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2208      	movs	r2, #8
 8006872:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 f838 	bl	80068ea <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2208      	movs	r2, #8
 800687e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e029      	b.n	80068e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800689c:	d111      	bne.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 f81e 	bl	80068ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2220      	movs	r2, #32
 80068b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e00f      	b.n	80068e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69da      	ldr	r2, [r3, #28]
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	4013      	ands	r3, r2
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	bf0c      	ite	eq
 80068d2:	2301      	moveq	r3, #1
 80068d4:	2300      	movne	r3, #0
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	461a      	mov	r2, r3
 80068da:	79fb      	ldrb	r3, [r7, #7]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d0a6      	beq.n	800682e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b095      	sub	sp, #84	; 0x54
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068fa:	e853 3f00 	ldrex	r3, [r3]
 80068fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006902:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006906:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	461a      	mov	r2, r3
 800690e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006910:	643b      	str	r3, [r7, #64]	; 0x40
 8006912:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006914:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006916:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006918:	e841 2300 	strex	r3, r2, [r1]
 800691c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800691e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1e6      	bne.n	80068f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	3308      	adds	r3, #8
 800692a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	e853 3f00 	ldrex	r3, [r3]
 8006932:	61fb      	str	r3, [r7, #28]
   return(result);
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	f023 0301 	bic.w	r3, r3, #1
 800693a:	64bb      	str	r3, [r7, #72]	; 0x48
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3308      	adds	r3, #8
 8006942:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006944:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006946:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800694a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800694c:	e841 2300 	strex	r3, r2, [r1]
 8006950:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1e5      	bne.n	8006924 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800695c:	2b01      	cmp	r3, #1
 800695e:	d118      	bne.n	8006992 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	e853 3f00 	ldrex	r3, [r3]
 800696c:	60bb      	str	r3, [r7, #8]
   return(result);
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	f023 0310 	bic.w	r3, r3, #16
 8006974:	647b      	str	r3, [r7, #68]	; 0x44
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	461a      	mov	r2, r3
 800697c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800697e:	61bb      	str	r3, [r7, #24]
 8006980:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006982:	6979      	ldr	r1, [r7, #20]
 8006984:	69ba      	ldr	r2, [r7, #24]
 8006986:	e841 2300 	strex	r3, r2, [r1]
 800698a:	613b      	str	r3, [r7, #16]
   return(result);
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1e6      	bne.n	8006960 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2220      	movs	r2, #32
 8006996:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80069a6:	bf00      	nop
 80069a8:	3754      	adds	r7, #84	; 0x54
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b085      	sub	sp, #20
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80069c2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80069c6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80069e8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80069ec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	43db      	mvns	r3, r3
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	4013      	ands	r3, r2
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006a16:	b084      	sub	sp, #16
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	f107 0014 	add.w	r0, r7, #20
 8006a24:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	b004      	add	sp, #16
 8006a56:	4770      	bx	lr

08006a58 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b09d      	sub	sp, #116	; 0x74
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	881b      	ldrh	r3, [r3, #0]
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a7e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	78db      	ldrb	r3, [r3, #3]
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d81f      	bhi.n	8006aca <USB_ActivateEndpoint+0x72>
 8006a8a:	a201      	add	r2, pc, #4	; (adr r2, 8006a90 <USB_ActivateEndpoint+0x38>)
 8006a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a90:	08006aa1 	.word	0x08006aa1
 8006a94:	08006abd 	.word	0x08006abd
 8006a98:	08006ad3 	.word	0x08006ad3
 8006a9c:	08006aaf 	.word	0x08006aaf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006aa0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006aa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006aa8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006aac:	e012      	b.n	8006ad4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006aae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006ab2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006ab6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006aba:	e00b      	b.n	8006ad4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006abc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006ac0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ac4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006ac8:	e004      	b.n	8006ad4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006ad0:	e000      	b.n	8006ad4 <USB_ActivateEndpoint+0x7c>
      break;
 8006ad2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	441a      	add	r2, r3
 8006ade:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	b21b      	sxth	r3, r3
 8006b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b0e:	b21a      	sxth	r2, r3
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	b21b      	sxth	r3, r3
 8006b16:	4313      	orrs	r3, r2
 8006b18:	b21b      	sxth	r3, r3
 8006b1a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	441a      	add	r2, r3
 8006b28:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006b2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	7b1b      	ldrb	r3, [r3, #12]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f040 8178 	bne.w	8006e3a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	785b      	ldrb	r3, [r3, #1]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 8084 	beq.w	8006c5c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	61bb      	str	r3, [r7, #24]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	461a      	mov	r2, r3
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	4413      	add	r3, r2
 8006b66:	61bb      	str	r3, [r7, #24]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	011a      	lsls	r2, r3, #4
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b76:	617b      	str	r3, [r7, #20]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	88db      	ldrh	r3, [r3, #6]
 8006b7c:	085b      	lsrs	r3, r3, #1
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	881b      	ldrh	r3, [r3, #0]
 8006b94:	827b      	strh	r3, [r7, #18]
 8006b96:	8a7b      	ldrh	r3, [r7, #18]
 8006b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d01b      	beq.n	8006bd8 <USB_ActivateEndpoint+0x180>
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb6:	823b      	strh	r3, [r7, #16]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	441a      	add	r2, r3
 8006bc2:	8a3b      	ldrh	r3, [r7, #16]
 8006bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	78db      	ldrb	r3, [r3, #3]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d020      	beq.n	8006c22 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bf6:	81bb      	strh	r3, [r7, #12]
 8006bf8:	89bb      	ldrh	r3, [r7, #12]
 8006bfa:	f083 0320 	eor.w	r3, r3, #32
 8006bfe:	81bb      	strh	r3, [r7, #12]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	441a      	add	r2, r3
 8006c0a:	89bb      	ldrh	r3, [r7, #12]
 8006c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	8013      	strh	r3, [r2, #0]
 8006c20:	e2d5      	b.n	80071ce <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4413      	add	r3, r2
 8006c2c:	881b      	ldrh	r3, [r3, #0]
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c38:	81fb      	strh	r3, [r7, #14]
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	441a      	add	r2, r3
 8006c44:	89fb      	ldrh	r3, [r7, #14]
 8006c46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	8013      	strh	r3, [r2, #0]
 8006c5a:	e2b8      	b.n	80071ce <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	633b      	str	r3, [r7, #48]	; 0x30
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	461a      	mov	r2, r3
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6c:	4413      	add	r3, r2
 8006c6e:	633b      	str	r3, [r7, #48]	; 0x30
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	011a      	lsls	r2, r3, #4
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	4413      	add	r3, r2
 8006c7a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	88db      	ldrh	r3, [r3, #6]
 8006c84:	085b      	lsrs	r3, r3, #1
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca0:	4413      	add	r3, r2
 8006ca2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	011a      	lsls	r2, r3, #4
 8006caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cac:	4413      	add	r3, r2
 8006cae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	881b      	ldrh	r3, [r3, #0]
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	801a      	strh	r2, [r3, #0]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	2b3e      	cmp	r3, #62	; 0x3e
 8006cca:	d91d      	bls.n	8006d08 <USB_ActivateEndpoint+0x2b0>
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	095b      	lsrs	r3, r3, #5
 8006cd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	f003 031f 	and.w	r3, r3, #31
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d102      	bne.n	8006ce6 <USB_ActivateEndpoint+0x28e>
 8006ce0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	029b      	lsls	r3, r3, #10
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	801a      	strh	r2, [r3, #0]
 8006d06:	e026      	b.n	8006d56 <USB_ActivateEndpoint+0x2fe>
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10a      	bne.n	8006d26 <USB_ActivateEndpoint+0x2ce>
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	881b      	ldrh	r3, [r3, #0]
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	801a      	strh	r2, [r3, #0]
 8006d24:	e017      	b.n	8006d56 <USB_ActivateEndpoint+0x2fe>
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	085b      	lsrs	r3, r3, #1
 8006d2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d002      	beq.n	8006d40 <USB_ActivateEndpoint+0x2e8>
 8006d3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	029b      	lsls	r3, r3, #10
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	847b      	strh	r3, [r7, #34]	; 0x22
 8006d64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d01b      	beq.n	8006da6 <USB_ActivateEndpoint+0x34e>
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d84:	843b      	strh	r3, [r7, #32]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	441a      	add	r2, r3
 8006d90:	8c3b      	ldrh	r3, [r7, #32]
 8006d92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d124      	bne.n	8006df8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	881b      	ldrh	r3, [r3, #0]
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc4:	83bb      	strh	r3, [r7, #28]
 8006dc6:	8bbb      	ldrh	r3, [r7, #28]
 8006dc8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006dcc:	83bb      	strh	r3, [r7, #28]
 8006dce:	8bbb      	ldrh	r3, [r7, #28]
 8006dd0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006dd4:	83bb      	strh	r3, [r7, #28]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	441a      	add	r2, r3
 8006de0:	8bbb      	ldrh	r3, [r7, #28]
 8006de2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006de6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	8013      	strh	r3, [r2, #0]
 8006df6:	e1ea      	b.n	80071ce <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0e:	83fb      	strh	r3, [r7, #30]
 8006e10:	8bfb      	ldrh	r3, [r7, #30]
 8006e12:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e16:	83fb      	strh	r3, [r7, #30]
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	441a      	add	r2, r3
 8006e22:	8bfb      	ldrh	r3, [r7, #30]
 8006e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	8013      	strh	r3, [r2, #0]
 8006e38:	e1c9      	b.n	80071ce <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	78db      	ldrb	r3, [r3, #3]
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d11e      	bne.n	8006e80 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4413      	add	r3, r2
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e58:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	441a      	add	r2, r3
 8006e66:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e72:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	8013      	strh	r3, [r2, #0]
 8006e7e:	e01d      	b.n	8006ebc <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	881b      	ldrh	r3, [r3, #0]
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e96:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	441a      	add	r2, r3
 8006ea4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	461a      	mov	r2, r3
 8006eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ecc:	4413      	add	r3, r2
 8006ece:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	011a      	lsls	r2, r3, #4
 8006ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ede:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	891b      	ldrh	r3, [r3, #8]
 8006ee4:	085b      	lsrs	r3, r3, #1
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	005b      	lsls	r3, r3, #1
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006eee:	801a      	strh	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	657b      	str	r3, [r7, #84]	; 0x54
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	461a      	mov	r2, r3
 8006efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f00:	4413      	add	r3, r2
 8006f02:	657b      	str	r3, [r7, #84]	; 0x54
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	011a      	lsls	r2, r3, #4
 8006f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006f12:	653b      	str	r3, [r7, #80]	; 0x50
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	895b      	ldrh	r3, [r3, #10]
 8006f18:	085b      	lsrs	r3, r3, #1
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	005b      	lsls	r3, r3, #1
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f22:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	785b      	ldrb	r3, [r3, #1]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f040 8093 	bne.w	8007054 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006f3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d01b      	beq.n	8006f82 <USB_ActivateEndpoint+0x52a>
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f60:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	441a      	add	r2, r3
 8006f6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	881b      	ldrh	r3, [r3, #0]
 8006f8e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006f90:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d01b      	beq.n	8006fd2 <USB_ActivateEndpoint+0x57a>
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	881b      	ldrh	r3, [r3, #0]
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	441a      	add	r2, r3
 8006fbc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe8:	873b      	strh	r3, [r7, #56]	; 0x38
 8006fea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006fec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ff0:	873b      	strh	r3, [r7, #56]	; 0x38
 8006ff2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006ff4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006ff8:	873b      	strh	r3, [r7, #56]	; 0x38
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	441a      	add	r2, r3
 8007004:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800700a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800700e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007016:	b29b      	uxth	r3, r3
 8007018:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	b29b      	uxth	r3, r3
 8007028:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800702c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007030:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	441a      	add	r2, r3
 800703c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800703e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800704a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800704e:	b29b      	uxth	r3, r3
 8007050:	8013      	strh	r3, [r2, #0]
 8007052:	e0bc      	b.n	80071ce <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4413      	add	r3, r2
 800705e:	881b      	ldrh	r3, [r3, #0]
 8007060:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007064:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d01d      	beq.n	80070ac <USB_ActivateEndpoint+0x654>
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	b29b      	uxth	r3, r3
 800707e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007086:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	441a      	add	r2, r3
 8007094:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007098:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800709c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	881b      	ldrh	r3, [r3, #0]
 80070b8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80070bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80070c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d01d      	beq.n	8007104 <USB_ActivateEndpoint+0x6ac>
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	4413      	add	r3, r2
 80070d2:	881b      	ldrh	r3, [r3, #0]
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070de:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	441a      	add	r2, r3
 80070ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80070f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007100:	b29b      	uxth	r3, r3
 8007102:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	78db      	ldrb	r3, [r3, #3]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d024      	beq.n	8007156 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	881b      	ldrh	r3, [r3, #0]
 8007118:	b29b      	uxth	r3, r3
 800711a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800711e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007122:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007126:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800712a:	f083 0320 	eor.w	r3, r3, #32
 800712e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	441a      	add	r2, r3
 800713c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800714c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007150:	b29b      	uxth	r3, r3
 8007152:	8013      	strh	r3, [r2, #0]
 8007154:	e01d      	b.n	8007192 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	4413      	add	r3, r2
 8007160:	881b      	ldrh	r3, [r3, #0]
 8007162:	b29b      	uxth	r3, r3
 8007164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007168:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800716c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	441a      	add	r2, r3
 800717a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800717e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800718a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800718e:	b29b      	uxth	r3, r3
 8007190:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4413      	add	r3, r2
 800719c:	881b      	ldrh	r3, [r3, #0]
 800719e:	b29b      	uxth	r3, r3
 80071a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	441a      	add	r2, r3
 80071b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80071ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80071ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3774      	adds	r7, #116	; 0x74
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop

080071e0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b08d      	sub	sp, #52	; 0x34
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	7b1b      	ldrb	r3, [r3, #12]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f040 808e 	bne.w	8007310 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	785b      	ldrb	r3, [r3, #1]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d044      	beq.n	8007286 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	4413      	add	r3, r2
 8007206:	881b      	ldrh	r3, [r3, #0]
 8007208:	81bb      	strh	r3, [r7, #12]
 800720a:	89bb      	ldrh	r3, [r7, #12]
 800720c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007210:	2b00      	cmp	r3, #0
 8007212:	d01b      	beq.n	800724c <USB_DeactivateEndpoint+0x6c>
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	881b      	ldrh	r3, [r3, #0]
 8007220:	b29b      	uxth	r3, r3
 8007222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800722a:	817b      	strh	r3, [r7, #10]
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	441a      	add	r2, r3
 8007236:	897b      	ldrh	r3, [r7, #10]
 8007238:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800723c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007244:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007248:	b29b      	uxth	r3, r3
 800724a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	4413      	add	r3, r2
 8007256:	881b      	ldrh	r3, [r3, #0]
 8007258:	b29b      	uxth	r3, r3
 800725a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800725e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007262:	813b      	strh	r3, [r7, #8]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	441a      	add	r2, r3
 800726e:	893b      	ldrh	r3, [r7, #8]
 8007270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800727c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007280:	b29b      	uxth	r3, r3
 8007282:	8013      	strh	r3, [r2, #0]
 8007284:	e192      	b.n	80075ac <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4413      	add	r3, r2
 8007290:	881b      	ldrh	r3, [r3, #0]
 8007292:	827b      	strh	r3, [r7, #18]
 8007294:	8a7b      	ldrh	r3, [r7, #18]
 8007296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d01b      	beq.n	80072d6 <USB_DeactivateEndpoint+0xf6>
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4413      	add	r3, r2
 80072a8:	881b      	ldrh	r3, [r3, #0]
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072b4:	823b      	strh	r3, [r7, #16]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	441a      	add	r2, r3
 80072c0:	8a3b      	ldrh	r3, [r7, #16]
 80072c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4413      	add	r3, r2
 80072e0:	881b      	ldrh	r3, [r3, #0]
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ec:	81fb      	strh	r3, [r7, #14]
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	441a      	add	r2, r3
 80072f8:	89fb      	ldrh	r3, [r7, #14]
 80072fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800730a:	b29b      	uxth	r3, r3
 800730c:	8013      	strh	r3, [r2, #0]
 800730e:	e14d      	b.n	80075ac <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	785b      	ldrb	r3, [r3, #1]
 8007314:	2b00      	cmp	r3, #0
 8007316:	f040 80a5 	bne.w	8007464 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	881b      	ldrh	r3, [r3, #0]
 8007326:	843b      	strh	r3, [r7, #32]
 8007328:	8c3b      	ldrh	r3, [r7, #32]
 800732a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d01b      	beq.n	800736a <USB_DeactivateEndpoint+0x18a>
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	4413      	add	r3, r2
 800733c:	881b      	ldrh	r3, [r3, #0]
 800733e:	b29b      	uxth	r3, r3
 8007340:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007348:	83fb      	strh	r3, [r7, #30]
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	441a      	add	r2, r3
 8007354:	8bfb      	ldrh	r3, [r7, #30]
 8007356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800735a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800735e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007366:	b29b      	uxth	r3, r3
 8007368:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4413      	add	r3, r2
 8007374:	881b      	ldrh	r3, [r3, #0]
 8007376:	83bb      	strh	r3, [r7, #28]
 8007378:	8bbb      	ldrh	r3, [r7, #28]
 800737a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800737e:	2b00      	cmp	r3, #0
 8007380:	d01b      	beq.n	80073ba <USB_DeactivateEndpoint+0x1da>
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4413      	add	r3, r2
 800738c:	881b      	ldrh	r3, [r3, #0]
 800738e:	b29b      	uxth	r3, r3
 8007390:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007398:	837b      	strh	r3, [r7, #26]
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	441a      	add	r2, r3
 80073a4:	8b7b      	ldrh	r3, [r7, #26]
 80073a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d0:	833b      	strh	r3, [r7, #24]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	441a      	add	r2, r3
 80073dc:	8b3b      	ldrh	r3, [r7, #24]
 80073de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4413      	add	r3, r2
 80073fc:	881b      	ldrh	r3, [r3, #0]
 80073fe:	b29b      	uxth	r3, r3
 8007400:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007408:	82fb      	strh	r3, [r7, #22]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	441a      	add	r2, r3
 8007414:	8afb      	ldrh	r3, [r7, #22]
 8007416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800741a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800741e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007426:	b29b      	uxth	r3, r3
 8007428:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	b29b      	uxth	r3, r3
 8007438:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800743c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007440:	82bb      	strh	r3, [r7, #20]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	441a      	add	r2, r3
 800744c:	8abb      	ldrh	r3, [r7, #20]
 800744e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800745a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800745e:	b29b      	uxth	r3, r3
 8007460:	8013      	strh	r3, [r2, #0]
 8007462:	e0a3      	b.n	80075ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	4413      	add	r3, r2
 800746e:	881b      	ldrh	r3, [r3, #0]
 8007470:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007472:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d01b      	beq.n	80074b4 <USB_DeactivateEndpoint+0x2d4>
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	881b      	ldrh	r3, [r3, #0]
 8007488:	b29b      	uxth	r3, r3
 800748a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800748e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007492:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	441a      	add	r2, r3
 800749e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80074a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	4413      	add	r3, r2
 80074be:	881b      	ldrh	r3, [r3, #0]
 80074c0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80074c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80074c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d01b      	beq.n	8007504 <USB_DeactivateEndpoint+0x324>
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4413      	add	r3, r2
 80074d6:	881b      	ldrh	r3, [r3, #0]
 80074d8:	b29b      	uxth	r3, r3
 80074da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e2:	853b      	strh	r3, [r7, #40]	; 0x28
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	441a      	add	r2, r3
 80074ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80074f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007500:	b29b      	uxth	r3, r3
 8007502:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	881b      	ldrh	r3, [r3, #0]
 8007510:	b29b      	uxth	r3, r3
 8007512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800751a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	441a      	add	r2, r3
 8007526:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800752c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007530:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007538:	b29b      	uxth	r3, r3
 800753a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	881b      	ldrh	r3, [r3, #0]
 8007548:	b29b      	uxth	r3, r3
 800754a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800754e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007552:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	441a      	add	r2, r3
 800755e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800756c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007570:	b29b      	uxth	r3, r3
 8007572:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4413      	add	r3, r2
 800757e:	881b      	ldrh	r3, [r3, #0]
 8007580:	b29b      	uxth	r3, r3
 8007582:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800758a:	847b      	strh	r3, [r7, #34]	; 0x22
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	441a      	add	r2, r3
 8007596:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007598:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800759c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3734      	adds	r7, #52	; 0x34
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b0c2      	sub	sp, #264	; 0x108
 80075be:	af00      	add	r7, sp, #0
 80075c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075c8:	6018      	str	r0, [r3, #0]
 80075ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075d2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	785b      	ldrb	r3, [r3, #1]
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	f040 86b7 	bne.w	8008354 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80075e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	699a      	ldr	r2, [r3, #24]
 80075f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d908      	bls.n	8007614 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007606:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007612:	e007      	b.n	8007624 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007618:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	7b1b      	ldrb	r3, [r3, #12]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d13a      	bne.n	80076aa <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	6959      	ldr	r1, [r3, #20]
 8007640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007644:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	88da      	ldrh	r2, [r3, #6]
 800764c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007650:	b29b      	uxth	r3, r3
 8007652:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007656:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800765a:	6800      	ldr	r0, [r0, #0]
 800765c:	f001 fc8c 	bl	8008f78 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007664:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	613b      	str	r3, [r7, #16]
 800766c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007670:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800767a:	b29b      	uxth	r3, r3
 800767c:	461a      	mov	r2, r3
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	4413      	add	r3, r2
 8007682:	613b      	str	r3, [r7, #16]
 8007684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	011a      	lsls	r2, r3, #4
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	4413      	add	r3, r2
 8007696:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800769a:	60fb      	str	r3, [r7, #12]
 800769c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	801a      	strh	r2, [r3, #0]
 80076a6:	f000 be1f 	b.w	80082e8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80076aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	78db      	ldrb	r3, [r3, #3]
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	f040 8462 	bne.w	8007f80 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80076bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6a1a      	ldr	r2, [r3, #32]
 80076c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	f240 83df 	bls.w	8007e98 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80076da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	881b      	ldrh	r3, [r3, #0]
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007700:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007708:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	441a      	add	r2, r3
 800771e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800772a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800772e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007732:	b29b      	uxth	r3, r3
 8007734:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800773a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6a1a      	ldr	r2, [r3, #32]
 8007742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007746:	1ad2      	subs	r2, r2, r3
 8007748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800774c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007758:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4413      	add	r3, r2
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	b29b      	uxth	r3, r3
 8007772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007776:	2b00      	cmp	r3, #0
 8007778:	f000 81c7 	beq.w	8007b0a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800777c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007780:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	633b      	str	r3, [r7, #48]	; 0x30
 8007788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800778c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	785b      	ldrb	r3, [r3, #1]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d177      	bne.n	8007888 <USB_EPStartXfer+0x2ce>
 8007798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800779c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80077a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	461a      	mov	r2, r3
 80077b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b8:	4413      	add	r3, r2
 80077ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80077bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	011a      	lsls	r2, r3, #4
 80077ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077cc:	4413      	add	r3, r2
 80077ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077d2:	627b      	str	r3, [r7, #36]	; 0x24
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	881b      	ldrh	r3, [r3, #0]
 80077d8:	b29b      	uxth	r3, r3
 80077da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077de:	b29a      	uxth	r2, r3
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	801a      	strh	r2, [r3, #0]
 80077e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e8:	2b3e      	cmp	r3, #62	; 0x3e
 80077ea:	d921      	bls.n	8007830 <USB_EPStartXfer+0x276>
 80077ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077f0:	095b      	lsrs	r3, r3, #5
 80077f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80077f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077fa:	f003 031f 	and.w	r3, r3, #31
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d104      	bne.n	800780c <USB_EPStartXfer+0x252>
 8007802:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007806:	3b01      	subs	r3, #1
 8007808:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780e:	881b      	ldrh	r3, [r3, #0]
 8007810:	b29a      	uxth	r2, r3
 8007812:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007816:	b29b      	uxth	r3, r3
 8007818:	029b      	lsls	r3, r3, #10
 800781a:	b29b      	uxth	r3, r3
 800781c:	4313      	orrs	r3, r2
 800781e:	b29b      	uxth	r3, r3
 8007820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007828:	b29a      	uxth	r2, r3
 800782a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782c:	801a      	strh	r2, [r3, #0]
 800782e:	e050      	b.n	80078d2 <USB_EPStartXfer+0x318>
 8007830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10a      	bne.n	800784e <USB_EPStartXfer+0x294>
 8007838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783a:	881b      	ldrh	r3, [r3, #0]
 800783c:	b29b      	uxth	r3, r3
 800783e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007846:	b29a      	uxth	r2, r3
 8007848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784a:	801a      	strh	r2, [r3, #0]
 800784c:	e041      	b.n	80078d2 <USB_EPStartXfer+0x318>
 800784e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007852:	085b      	lsrs	r3, r3, #1
 8007854:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	2b00      	cmp	r3, #0
 8007862:	d004      	beq.n	800786e <USB_EPStartXfer+0x2b4>
 8007864:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007868:	3301      	adds	r3, #1
 800786a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800786e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	b29a      	uxth	r2, r3
 8007874:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007878:	b29b      	uxth	r3, r3
 800787a:	029b      	lsls	r3, r3, #10
 800787c:	b29b      	uxth	r3, r3
 800787e:	4313      	orrs	r3, r2
 8007880:	b29a      	uxth	r2, r3
 8007882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007884:	801a      	strh	r2, [r3, #0]
 8007886:	e024      	b.n	80078d2 <USB_EPStartXfer+0x318>
 8007888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800788c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	785b      	ldrb	r3, [r3, #1]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d11c      	bne.n	80078d2 <USB_EPStartXfer+0x318>
 8007898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800789c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	461a      	mov	r2, r3
 80078aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ac:	4413      	add	r3, r2
 80078ae:	633b      	str	r3, [r7, #48]	; 0x30
 80078b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	011a      	lsls	r2, r3, #4
 80078be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c0:	4413      	add	r3, r2
 80078c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80078d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	895b      	ldrh	r3, [r3, #10]
 80078de:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6959      	ldr	r1, [r3, #20]
 80078ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80078f8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80078fc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007900:	6800      	ldr	r0, [r0, #0]
 8007902:	f001 fb39 	bl	8008f78 <USB_WritePMA>
            ep->xfer_buff += len;
 8007906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800790a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	695a      	ldr	r2, [r3, #20]
 8007912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007916:	441a      	add	r2, r3
 8007918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800791c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6a1a      	ldr	r2, [r3, #32]
 8007930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	429a      	cmp	r2, r3
 800793e:	d90f      	bls.n	8007960 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	6a1a      	ldr	r2, [r3, #32]
 800794c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007950:	1ad2      	subs	r2, r2, r3
 8007952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007956:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	621a      	str	r2, [r3, #32]
 800795e:	e00e      	b.n	800797e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	6a1b      	ldr	r3, [r3, #32]
 800796c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2200      	movs	r2, #0
 800797c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800797e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	785b      	ldrb	r3, [r3, #1]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d177      	bne.n	8007a7e <USB_EPStartXfer+0x4c4>
 800798e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007992:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	61bb      	str	r3, [r7, #24]
 800799a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800799e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	461a      	mov	r2, r3
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	4413      	add	r3, r2
 80079b0:	61bb      	str	r3, [r7, #24]
 80079b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	011a      	lsls	r2, r3, #4
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	4413      	add	r3, r2
 80079c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079c8:	617b      	str	r3, [r7, #20]
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	881b      	ldrh	r3, [r3, #0]
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	801a      	strh	r2, [r3, #0]
 80079da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079de:	2b3e      	cmp	r3, #62	; 0x3e
 80079e0:	d921      	bls.n	8007a26 <USB_EPStartXfer+0x46c>
 80079e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079e6:	095b      	lsrs	r3, r3, #5
 80079e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80079ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079f0:	f003 031f 	and.w	r3, r3, #31
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d104      	bne.n	8007a02 <USB_EPStartXfer+0x448>
 80079f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079fc:	3b01      	subs	r3, #1
 80079fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	881b      	ldrh	r3, [r3, #0]
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	029b      	lsls	r3, r3, #10
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	4313      	orrs	r3, r2
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	801a      	strh	r2, [r3, #0]
 8007a24:	e056      	b.n	8007ad4 <USB_EPStartXfer+0x51a>
 8007a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10a      	bne.n	8007a44 <USB_EPStartXfer+0x48a>
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	881b      	ldrh	r3, [r3, #0]
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	801a      	strh	r2, [r3, #0]
 8007a42:	e047      	b.n	8007ad4 <USB_EPStartXfer+0x51a>
 8007a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a48:	085b      	lsrs	r3, r3, #1
 8007a4a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a52:	f003 0301 	and.w	r3, r3, #1
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d004      	beq.n	8007a64 <USB_EPStartXfer+0x4aa>
 8007a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a5e:	3301      	adds	r3, #1
 8007a60:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	881b      	ldrh	r3, [r3, #0]
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	029b      	lsls	r3, r3, #10
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	4313      	orrs	r3, r2
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	801a      	strh	r2, [r3, #0]
 8007a7c:	e02a      	b.n	8007ad4 <USB_EPStartXfer+0x51a>
 8007a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	785b      	ldrb	r3, [r3, #1]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d122      	bne.n	8007ad4 <USB_EPStartXfer+0x51a>
 8007a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	623b      	str	r3, [r7, #32]
 8007a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	461a      	mov	r2, r3
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	4413      	add	r3, r2
 8007ab0:	623b      	str	r3, [r7, #32]
 8007ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	011a      	lsls	r2, r3, #4
 8007ac0:	6a3b      	ldr	r3, [r7, #32]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ac8:	61fb      	str	r3, [r7, #28]
 8007aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	891b      	ldrh	r3, [r3, #8]
 8007ae0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	6959      	ldr	r1, [r3, #20]
 8007af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007afa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007afe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007b02:	6800      	ldr	r0, [r0, #0]
 8007b04:	f001 fa38 	bl	8008f78 <USB_WritePMA>
 8007b08:	e3ee      	b.n	80082e8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	785b      	ldrb	r3, [r3, #1]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d177      	bne.n	8007c0a <USB_EPStartXfer+0x650>
 8007b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	461a      	mov	r2, r3
 8007b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b3a:	4413      	add	r3, r2
 8007b3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	011a      	lsls	r2, r3, #4
 8007b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b4e:	4413      	add	r3, r2
 8007b50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b54:	647b      	str	r3, [r7, #68]	; 0x44
 8007b56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b58:	881b      	ldrh	r3, [r3, #0]
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b64:	801a      	strh	r2, [r3, #0]
 8007b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b6a:	2b3e      	cmp	r3, #62	; 0x3e
 8007b6c:	d921      	bls.n	8007bb2 <USB_EPStartXfer+0x5f8>
 8007b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b72:	095b      	lsrs	r3, r3, #5
 8007b74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b7c:	f003 031f 	and.w	r3, r3, #31
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d104      	bne.n	8007b8e <USB_EPStartXfer+0x5d4>
 8007b84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b90:	881b      	ldrh	r3, [r3, #0]
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	029b      	lsls	r3, r3, #10
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bae:	801a      	strh	r2, [r3, #0]
 8007bb0:	e056      	b.n	8007c60 <USB_EPStartXfer+0x6a6>
 8007bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10a      	bne.n	8007bd0 <USB_EPStartXfer+0x616>
 8007bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bbc:	881b      	ldrh	r3, [r3, #0]
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bcc:	801a      	strh	r2, [r3, #0]
 8007bce:	e047      	b.n	8007c60 <USB_EPStartXfer+0x6a6>
 8007bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bd4:	085b      	lsrs	r3, r3, #1
 8007bd6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d004      	beq.n	8007bf0 <USB_EPStartXfer+0x636>
 8007be6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007bea:	3301      	adds	r3, #1
 8007bec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bf2:	881b      	ldrh	r3, [r3, #0]
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	029b      	lsls	r3, r3, #10
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	4313      	orrs	r3, r2
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c06:	801a      	strh	r2, [r3, #0]
 8007c08:	e02a      	b.n	8007c60 <USB_EPStartXfer+0x6a6>
 8007c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	785b      	ldrb	r3, [r3, #1]
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d122      	bne.n	8007c60 <USB_EPStartXfer+0x6a6>
 8007c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	653b      	str	r3, [r7, #80]	; 0x50
 8007c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	461a      	mov	r2, r3
 8007c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c3a:	4413      	add	r3, r2
 8007c3c:	653b      	str	r3, [r7, #80]	; 0x50
 8007c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	011a      	lsls	r2, r3, #4
 8007c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c4e:	4413      	add	r3, r2
 8007c50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c5e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	891b      	ldrh	r3, [r3, #8]
 8007c6c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	6959      	ldr	r1, [r3, #20]
 8007c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007c86:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007c8a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007c8e:	6800      	ldr	r0, [r0, #0]
 8007c90:	f001 f972 	bl	8008f78 <USB_WritePMA>
            ep->xfer_buff += len;
 8007c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	695a      	ldr	r2, [r3, #20]
 8007ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ca4:	441a      	add	r2, r3
 8007ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6a1a      	ldr	r2, [r3, #32]
 8007cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d90f      	bls.n	8007cee <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6a1a      	ldr	r2, [r3, #32]
 8007cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cde:	1ad2      	subs	r2, r2, r3
 8007ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	621a      	str	r2, [r3, #32]
 8007cec:	e00e      	b.n	8007d0c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6a1b      	ldr	r3, [r3, #32]
 8007cfa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	643b      	str	r3, [r7, #64]	; 0x40
 8007d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	785b      	ldrb	r3, [r3, #1]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d177      	bne.n	8007e18 <USB_EPStartXfer+0x85e>
 8007d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	461a      	mov	r2, r3
 8007d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d48:	4413      	add	r3, r2
 8007d4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	011a      	lsls	r2, r3, #4
 8007d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d62:	637b      	str	r3, [r7, #52]	; 0x34
 8007d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d66:	881b      	ldrh	r3, [r3, #0]
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d72:	801a      	strh	r2, [r3, #0]
 8007d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d78:	2b3e      	cmp	r3, #62	; 0x3e
 8007d7a:	d921      	bls.n	8007dc0 <USB_EPStartXfer+0x806>
 8007d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d80:	095b      	lsrs	r3, r3, #5
 8007d82:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d8a:	f003 031f 	and.w	r3, r3, #31
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d104      	bne.n	8007d9c <USB_EPStartXfer+0x7e2>
 8007d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d96:	3b01      	subs	r3, #1
 8007d98:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d9e:	881b      	ldrh	r3, [r3, #0]
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	029b      	lsls	r3, r3, #10
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	4313      	orrs	r3, r2
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dbc:	801a      	strh	r2, [r3, #0]
 8007dbe:	e050      	b.n	8007e62 <USB_EPStartXfer+0x8a8>
 8007dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10a      	bne.n	8007dde <USB_EPStartXfer+0x824>
 8007dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dca:	881b      	ldrh	r3, [r3, #0]
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dda:	801a      	strh	r2, [r3, #0]
 8007ddc:	e041      	b.n	8007e62 <USB_EPStartXfer+0x8a8>
 8007dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007de2:	085b      	lsrs	r3, r3, #1
 8007de4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dec:	f003 0301 	and.w	r3, r3, #1
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d004      	beq.n	8007dfe <USB_EPStartXfer+0x844>
 8007df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df8:	3301      	adds	r3, #1
 8007dfa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e00:	881b      	ldrh	r3, [r3, #0]
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	029b      	lsls	r3, r3, #10
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e14:	801a      	strh	r2, [r3, #0]
 8007e16:	e024      	b.n	8007e62 <USB_EPStartXfer+0x8a8>
 8007e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	785b      	ldrb	r3, [r3, #1]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d11c      	bne.n	8007e62 <USB_EPStartXfer+0x8a8>
 8007e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	461a      	mov	r2, r3
 8007e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e3c:	4413      	add	r3, r2
 8007e3e:	643b      	str	r3, [r7, #64]	; 0x40
 8007e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	011a      	lsls	r2, r3, #4
 8007e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e50:	4413      	add	r3, r2
 8007e52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	895b      	ldrh	r3, [r3, #10]
 8007e6e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6959      	ldr	r1, [r3, #20]
 8007e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007e88:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007e8c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007e90:	6800      	ldr	r0, [r0, #0]
 8007e92:	f001 f871 	bl	8008f78 <USB_WritePMA>
 8007e96:	e227      	b.n	80082e8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	6a1b      	ldr	r3, [r3, #32]
 8007ea4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4413      	add	r3, r2
 8007ec2:	881b      	ldrh	r3, [r3, #0]
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ece:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007ed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ed6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	441a      	add	r2, r3
 8007eec:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007ef0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ef4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	461a      	mov	r2, r3
 8007f22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f24:	4413      	add	r3, r2
 8007f26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	011a      	lsls	r2, r3, #4
 8007f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f38:	4413      	add	r3, r2
 8007f3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f48:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	891b      	ldrh	r3, [r3, #8]
 8007f56:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	6959      	ldr	r1, [r3, #20]
 8007f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007f70:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007f74:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007f78:	6800      	ldr	r0, [r0, #0]
 8007f7a:	f000 fffd 	bl	8008f78 <USB_WritePMA>
 8007f7e:	e1b3      	b.n	80082e8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	6a1a      	ldr	r2, [r3, #32]
 8007f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f90:	1ad2      	subs	r2, r2, r3
 8007f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
 8007fb8:	881b      	ldrh	r3, [r3, #0]
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 80c6 	beq.w	8008152 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	673b      	str	r3, [r7, #112]	; 0x70
 8007fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	785b      	ldrb	r3, [r3, #1]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d177      	bne.n	80080d2 <USB_EPStartXfer+0xb18>
 8007fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fe6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ff2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	461a      	mov	r2, r3
 8008000:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008002:	4413      	add	r3, r2
 8008004:	66bb      	str	r3, [r7, #104]	; 0x68
 8008006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800800a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	011a      	lsls	r2, r3, #4
 8008014:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008016:	4413      	add	r3, r2
 8008018:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800801c:	667b      	str	r3, [r7, #100]	; 0x64
 800801e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008020:	881b      	ldrh	r3, [r3, #0]
 8008022:	b29b      	uxth	r3, r3
 8008024:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008028:	b29a      	uxth	r2, r3
 800802a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800802c:	801a      	strh	r2, [r3, #0]
 800802e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008032:	2b3e      	cmp	r3, #62	; 0x3e
 8008034:	d921      	bls.n	800807a <USB_EPStartXfer+0xac0>
 8008036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800803a:	095b      	lsrs	r3, r3, #5
 800803c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008040:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008044:	f003 031f 	and.w	r3, r3, #31
 8008048:	2b00      	cmp	r3, #0
 800804a:	d104      	bne.n	8008056 <USB_EPStartXfer+0xa9c>
 800804c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008050:	3b01      	subs	r3, #1
 8008052:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008056:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008058:	881b      	ldrh	r3, [r3, #0]
 800805a:	b29a      	uxth	r2, r3
 800805c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008060:	b29b      	uxth	r3, r3
 8008062:	029b      	lsls	r3, r3, #10
 8008064:	b29b      	uxth	r3, r3
 8008066:	4313      	orrs	r3, r2
 8008068:	b29b      	uxth	r3, r3
 800806a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800806e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008072:	b29a      	uxth	r2, r3
 8008074:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008076:	801a      	strh	r2, [r3, #0]
 8008078:	e050      	b.n	800811c <USB_EPStartXfer+0xb62>
 800807a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10a      	bne.n	8008098 <USB_EPStartXfer+0xade>
 8008082:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008084:	881b      	ldrh	r3, [r3, #0]
 8008086:	b29b      	uxth	r3, r3
 8008088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800808c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008090:	b29a      	uxth	r2, r3
 8008092:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008094:	801a      	strh	r2, [r3, #0]
 8008096:	e041      	b.n	800811c <USB_EPStartXfer+0xb62>
 8008098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800809c:	085b      	lsrs	r3, r3, #1
 800809e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80080a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080a6:	f003 0301 	and.w	r3, r3, #1
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d004      	beq.n	80080b8 <USB_EPStartXfer+0xafe>
 80080ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80080b2:	3301      	adds	r3, #1
 80080b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80080b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080ba:	881b      	ldrh	r3, [r3, #0]
 80080bc:	b29a      	uxth	r2, r3
 80080be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	029b      	lsls	r3, r3, #10
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	4313      	orrs	r3, r2
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080ce:	801a      	strh	r2, [r3, #0]
 80080d0:	e024      	b.n	800811c <USB_EPStartXfer+0xb62>
 80080d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	785b      	ldrb	r3, [r3, #1]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d11c      	bne.n	800811c <USB_EPStartXfer+0xb62>
 80080e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	461a      	mov	r2, r3
 80080f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080f6:	4413      	add	r3, r2
 80080f8:	673b      	str	r3, [r7, #112]	; 0x70
 80080fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	011a      	lsls	r2, r3, #4
 8008108:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800810a:	4413      	add	r3, r2
 800810c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008110:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008116:	b29a      	uxth	r2, r3
 8008118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800811a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800811c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	895b      	ldrh	r3, [r3, #10]
 8008128:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800812c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	6959      	ldr	r1, [r3, #20]
 8008138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800813c:	b29b      	uxth	r3, r3
 800813e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008142:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008146:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800814a:	6800      	ldr	r0, [r0, #0]
 800814c:	f000 ff14 	bl	8008f78 <USB_WritePMA>
 8008150:	e0ca      	b.n	80082e8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	785b      	ldrb	r3, [r3, #1]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d177      	bne.n	8008252 <USB_EPStartXfer+0xc98>
 8008162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008166:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800816e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008172:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800817c:	b29b      	uxth	r3, r3
 800817e:	461a      	mov	r2, r3
 8008180:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008182:	4413      	add	r3, r2
 8008184:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800818a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	011a      	lsls	r2, r3, #4
 8008194:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008196:	4413      	add	r3, r2
 8008198:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800819c:	67bb      	str	r3, [r7, #120]	; 0x78
 800819e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081a0:	881b      	ldrh	r3, [r3, #0]
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081ac:	801a      	strh	r2, [r3, #0]
 80081ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081b2:	2b3e      	cmp	r3, #62	; 0x3e
 80081b4:	d921      	bls.n	80081fa <USB_EPStartXfer+0xc40>
 80081b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ba:	095b      	lsrs	r3, r3, #5
 80081bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80081c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081c4:	f003 031f 	and.w	r3, r3, #31
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d104      	bne.n	80081d6 <USB_EPStartXfer+0xc1c>
 80081cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80081d0:	3b01      	subs	r3, #1
 80081d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80081d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081d8:	881b      	ldrh	r3, [r3, #0]
 80081da:	b29a      	uxth	r2, r3
 80081dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	029b      	lsls	r3, r3, #10
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	4313      	orrs	r3, r2
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081f6:	801a      	strh	r2, [r3, #0]
 80081f8:	e05c      	b.n	80082b4 <USB_EPStartXfer+0xcfa>
 80081fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10a      	bne.n	8008218 <USB_EPStartXfer+0xc5e>
 8008202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008204:	881b      	ldrh	r3, [r3, #0]
 8008206:	b29b      	uxth	r3, r3
 8008208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800820c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008210:	b29a      	uxth	r2, r3
 8008212:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008214:	801a      	strh	r2, [r3, #0]
 8008216:	e04d      	b.n	80082b4 <USB_EPStartXfer+0xcfa>
 8008218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800821c:	085b      	lsrs	r3, r3, #1
 800821e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	2b00      	cmp	r3, #0
 800822c:	d004      	beq.n	8008238 <USB_EPStartXfer+0xc7e>
 800822e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008232:	3301      	adds	r3, #1
 8008234:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800823a:	881b      	ldrh	r3, [r3, #0]
 800823c:	b29a      	uxth	r2, r3
 800823e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008242:	b29b      	uxth	r3, r3
 8008244:	029b      	lsls	r3, r3, #10
 8008246:	b29b      	uxth	r3, r3
 8008248:	4313      	orrs	r3, r2
 800824a:	b29a      	uxth	r2, r3
 800824c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800824e:	801a      	strh	r2, [r3, #0]
 8008250:	e030      	b.n	80082b4 <USB_EPStartXfer+0xcfa>
 8008252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	785b      	ldrb	r3, [r3, #1]
 800825e:	2b01      	cmp	r3, #1
 8008260:	d128      	bne.n	80082b4 <USB_EPStartXfer+0xcfa>
 8008262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008266:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008274:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800827e:	b29b      	uxth	r3, r3
 8008280:	461a      	mov	r2, r3
 8008282:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008286:	4413      	add	r3, r2
 8008288:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800828c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	011a      	lsls	r2, r3, #4
 800829a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800829e:	4413      	add	r3, r2
 80082a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80082a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80082a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80082b2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80082b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	891b      	ldrh	r3, [r3, #8]
 80082c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80082c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	6959      	ldr	r1, [r3, #20]
 80082d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80082da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80082de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80082e2:	6800      	ldr	r0, [r0, #0]
 80082e4:	f000 fe48 	bl	8008f78 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80082e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4413      	add	r3, r2
 8008302:	881b      	ldrh	r3, [r3, #0]
 8008304:	b29b      	uxth	r3, r3
 8008306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800830a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800830e:	817b      	strh	r3, [r7, #10]
 8008310:	897b      	ldrh	r3, [r7, #10]
 8008312:	f083 0310 	eor.w	r3, r3, #16
 8008316:	817b      	strh	r3, [r7, #10]
 8008318:	897b      	ldrh	r3, [r7, #10]
 800831a:	f083 0320 	eor.w	r3, r3, #32
 800831e:	817b      	strh	r3, [r7, #10]
 8008320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008324:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800832e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	441a      	add	r2, r3
 800833a:	897b      	ldrh	r3, [r7, #10]
 800833c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800834c:	b29b      	uxth	r3, r3
 800834e:	8013      	strh	r3, [r2, #0]
 8008350:	f000 bcde 	b.w	8008d10 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	7b1b      	ldrb	r3, [r3, #12]
 8008360:	2b00      	cmp	r3, #0
 8008362:	f040 80bb 	bne.w	80084dc <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800836a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	699a      	ldr	r2, [r3, #24]
 8008372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	429a      	cmp	r2, r3
 8008380:	d917      	bls.n	80083b2 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	699a      	ldr	r2, [r3, #24]
 800839e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083a2:	1ad2      	subs	r2, r2, r3
 80083a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	619a      	str	r2, [r3, #24]
 80083b0:	e00e      	b.n	80083d0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80083b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80083c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2200      	movs	r2, #0
 80083ce:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80083d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80083de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	461a      	mov	r2, r3
 80083f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80083f4:	4413      	add	r3, r2
 80083f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80083fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	011a      	lsls	r2, r3, #4
 8008408:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800840c:	4413      	add	r3, r2
 800840e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008412:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008416:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800841a:	881b      	ldrh	r3, [r3, #0]
 800841c:	b29b      	uxth	r3, r3
 800841e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008422:	b29a      	uxth	r2, r3
 8008424:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008428:	801a      	strh	r2, [r3, #0]
 800842a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800842e:	2b3e      	cmp	r3, #62	; 0x3e
 8008430:	d924      	bls.n	800847c <USB_EPStartXfer+0xec2>
 8008432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008436:	095b      	lsrs	r3, r3, #5
 8008438:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800843c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008440:	f003 031f 	and.w	r3, r3, #31
 8008444:	2b00      	cmp	r3, #0
 8008446:	d104      	bne.n	8008452 <USB_EPStartXfer+0xe98>
 8008448:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800844c:	3b01      	subs	r3, #1
 800844e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008452:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008456:	881b      	ldrh	r3, [r3, #0]
 8008458:	b29a      	uxth	r2, r3
 800845a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800845e:	b29b      	uxth	r3, r3
 8008460:	029b      	lsls	r3, r3, #10
 8008462:	b29b      	uxth	r3, r3
 8008464:	4313      	orrs	r3, r2
 8008466:	b29b      	uxth	r3, r3
 8008468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800846c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008470:	b29a      	uxth	r2, r3
 8008472:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008476:	801a      	strh	r2, [r3, #0]
 8008478:	f000 bc10 	b.w	8008c9c <USB_EPStartXfer+0x16e2>
 800847c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008480:	2b00      	cmp	r3, #0
 8008482:	d10c      	bne.n	800849e <USB_EPStartXfer+0xee4>
 8008484:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008488:	881b      	ldrh	r3, [r3, #0]
 800848a:	b29b      	uxth	r3, r3
 800848c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008494:	b29a      	uxth	r2, r3
 8008496:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800849a:	801a      	strh	r2, [r3, #0]
 800849c:	e3fe      	b.n	8008c9c <USB_EPStartXfer+0x16e2>
 800849e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084a2:	085b      	lsrs	r3, r3, #1
 80084a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80084a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084ac:	f003 0301 	and.w	r3, r3, #1
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d004      	beq.n	80084be <USB_EPStartXfer+0xf04>
 80084b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80084b8:	3301      	adds	r3, #1
 80084ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80084be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084c2:	881b      	ldrh	r3, [r3, #0]
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	029b      	lsls	r3, r3, #10
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	4313      	orrs	r3, r2
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084d8:	801a      	strh	r2, [r3, #0]
 80084da:	e3df      	b.n	8008c9c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80084dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	78db      	ldrb	r3, [r3, #3]
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	f040 8218 	bne.w	800891e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80084ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	785b      	ldrb	r3, [r3, #1]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f040 809d 	bne.w	800863a <USB_EPStartXfer+0x1080>
 8008500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008504:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800850e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008512:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800851c:	b29b      	uxth	r3, r3
 800851e:	461a      	mov	r2, r3
 8008520:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008524:	4413      	add	r3, r2
 8008526:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800852a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800852e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	011a      	lsls	r2, r3, #4
 8008538:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800853c:	4413      	add	r3, r2
 800853e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008542:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008546:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	b29b      	uxth	r3, r3
 800854e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008552:	b29a      	uxth	r2, r3
 8008554:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008558:	801a      	strh	r2, [r3, #0]
 800855a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800855e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	2b3e      	cmp	r3, #62	; 0x3e
 8008568:	d92b      	bls.n	80085c2 <USB_EPStartXfer+0x1008>
 800856a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800856e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	095b      	lsrs	r3, r3, #5
 8008578:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800857c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	f003 031f 	and.w	r3, r3, #31
 800858c:	2b00      	cmp	r3, #0
 800858e:	d104      	bne.n	800859a <USB_EPStartXfer+0xfe0>
 8008590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008594:	3b01      	subs	r3, #1
 8008596:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800859a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800859e:	881b      	ldrh	r3, [r3, #0]
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	029b      	lsls	r3, r3, #10
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	4313      	orrs	r3, r2
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80085be:	801a      	strh	r2, [r3, #0]
 80085c0:	e070      	b.n	80086a4 <USB_EPStartXfer+0x10ea>
 80085c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10c      	bne.n	80085ec <USB_EPStartXfer+0x1032>
 80085d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80085d6:	881b      	ldrh	r3, [r3, #0]
 80085d8:	b29b      	uxth	r3, r3
 80085da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80085e8:	801a      	strh	r2, [r3, #0]
 80085ea:	e05b      	b.n	80086a4 <USB_EPStartXfer+0x10ea>
 80085ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	691b      	ldr	r3, [r3, #16]
 80085f8:	085b      	lsrs	r3, r3, #1
 80085fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80085fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008602:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	f003 0301 	and.w	r3, r3, #1
 800860e:	2b00      	cmp	r3, #0
 8008610:	d004      	beq.n	800861c <USB_EPStartXfer+0x1062>
 8008612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008616:	3301      	adds	r3, #1
 8008618:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800861c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008620:	881b      	ldrh	r3, [r3, #0]
 8008622:	b29a      	uxth	r2, r3
 8008624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008628:	b29b      	uxth	r3, r3
 800862a:	029b      	lsls	r3, r3, #10
 800862c:	b29b      	uxth	r3, r3
 800862e:	4313      	orrs	r3, r2
 8008630:	b29a      	uxth	r2, r3
 8008632:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008636:	801a      	strh	r2, [r3, #0]
 8008638:	e034      	b.n	80086a4 <USB_EPStartXfer+0x10ea>
 800863a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800863e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	785b      	ldrb	r3, [r3, #1]
 8008646:	2b01      	cmp	r3, #1
 8008648:	d12c      	bne.n	80086a4 <USB_EPStartXfer+0x10ea>
 800864a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800864e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800865c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008666:	b29b      	uxth	r3, r3
 8008668:	461a      	mov	r2, r3
 800866a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800866e:	4413      	add	r3, r2
 8008670:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	011a      	lsls	r2, r3, #4
 8008682:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008686:	4413      	add	r3, r2
 8008688:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800868c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	b29a      	uxth	r2, r3
 800869e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80086a2:	801a      	strh	r2, [r3, #0]
 80086a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80086b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	785b      	ldrb	r3, [r3, #1]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f040 809d 	bne.w	80087fe <USB_EPStartXfer+0x1244>
 80086c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80086d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	461a      	mov	r2, r3
 80086e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086e8:	4413      	add	r3, r2
 80086ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80086ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	011a      	lsls	r2, r3, #4
 80086fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008700:	4413      	add	r3, r2
 8008702:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008706:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800870a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800870e:	881b      	ldrh	r3, [r3, #0]
 8008710:	b29b      	uxth	r3, r3
 8008712:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008716:	b29a      	uxth	r2, r3
 8008718:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800871c:	801a      	strh	r2, [r3, #0]
 800871e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	2b3e      	cmp	r3, #62	; 0x3e
 800872c:	d92b      	bls.n	8008786 <USB_EPStartXfer+0x11cc>
 800872e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	095b      	lsrs	r3, r3, #5
 800873c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	f003 031f 	and.w	r3, r3, #31
 8008750:	2b00      	cmp	r3, #0
 8008752:	d104      	bne.n	800875e <USB_EPStartXfer+0x11a4>
 8008754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008758:	3b01      	subs	r3, #1
 800875a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800875e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008762:	881b      	ldrh	r3, [r3, #0]
 8008764:	b29a      	uxth	r2, r3
 8008766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800876a:	b29b      	uxth	r3, r3
 800876c:	029b      	lsls	r3, r3, #10
 800876e:	b29b      	uxth	r3, r3
 8008770:	4313      	orrs	r3, r2
 8008772:	b29b      	uxth	r3, r3
 8008774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800877c:	b29a      	uxth	r2, r3
 800877e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008782:	801a      	strh	r2, [r3, #0]
 8008784:	e069      	b.n	800885a <USB_EPStartXfer+0x12a0>
 8008786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800878a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10c      	bne.n	80087b0 <USB_EPStartXfer+0x11f6>
 8008796:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800879a:	881b      	ldrh	r3, [r3, #0]
 800879c:	b29b      	uxth	r3, r3
 800879e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087ac:	801a      	strh	r2, [r3, #0]
 80087ae:	e054      	b.n	800885a <USB_EPStartXfer+0x12a0>
 80087b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	085b      	lsrs	r3, r3, #1
 80087be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80087c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	f003 0301 	and.w	r3, r3, #1
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d004      	beq.n	80087e0 <USB_EPStartXfer+0x1226>
 80087d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087da:	3301      	adds	r3, #1
 80087dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80087e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087e4:	881b      	ldrh	r3, [r3, #0]
 80087e6:	b29a      	uxth	r2, r3
 80087e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	029b      	lsls	r3, r3, #10
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	4313      	orrs	r3, r2
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087fa:	801a      	strh	r2, [r3, #0]
 80087fc:	e02d      	b.n	800885a <USB_EPStartXfer+0x12a0>
 80087fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	785b      	ldrb	r3, [r3, #1]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d125      	bne.n	800885a <USB_EPStartXfer+0x12a0>
 800880e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008812:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800881c:	b29b      	uxth	r3, r3
 800881e:	461a      	mov	r2, r3
 8008820:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008824:	4413      	add	r3, r2
 8008826:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800882a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800882e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	011a      	lsls	r2, r3, #4
 8008838:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800883c:	4413      	add	r3, r2
 800883e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008842:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800884a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	b29a      	uxth	r2, r3
 8008854:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008858:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800885a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800885e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	69db      	ldr	r3, [r3, #28]
 8008866:	2b00      	cmp	r3, #0
 8008868:	f000 8218 	beq.w	8008c9c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800886c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008870:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800887a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	4413      	add	r3, r2
 8008886:	881b      	ldrh	r3, [r3, #0]
 8008888:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800888c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d005      	beq.n	80088a4 <USB_EPStartXfer+0x12ea>
 8008898:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800889c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10d      	bne.n	80088c0 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80088a4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80088a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f040 81f5 	bne.w	8008c9c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80088b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80088b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f040 81ee 	bne.w	8008c9c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80088c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	4413      	add	r3, r2
 80088da:	881b      	ldrh	r3, [r3, #0]
 80088dc:	b29b      	uxth	r3, r3
 80088de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088e6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80088ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	441a      	add	r2, r3
 8008904:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800890c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008914:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008918:	b29b      	uxth	r3, r3
 800891a:	8013      	strh	r3, [r2, #0]
 800891c:	e1be      	b.n	8008c9c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800891e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008922:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	78db      	ldrb	r3, [r3, #3]
 800892a:	2b01      	cmp	r3, #1
 800892c:	f040 81b4 	bne.w	8008c98 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	699a      	ldr	r2, [r3, #24]
 800893c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	429a      	cmp	r2, r3
 800894a:	d917      	bls.n	800897c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800894c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800895c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	699a      	ldr	r2, [r3, #24]
 8008968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800896c:	1ad2      	subs	r2, r2, r3
 800896e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	619a      	str	r2, [r3, #24]
 800897a:	e00e      	b.n	800899a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800897c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	699b      	ldr	r3, [r3, #24]
 8008988:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800898c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2200      	movs	r2, #0
 8008998:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800899a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800899e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	785b      	ldrb	r3, [r3, #1]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f040 8085 	bne.w	8008ab6 <USB_EPStartXfer+0x14fc>
 80089ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80089ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	461a      	mov	r2, r3
 80089cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80089d0:	4413      	add	r3, r2
 80089d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80089d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	011a      	lsls	r2, r3, #4
 80089e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80089e8:	4413      	add	r3, r2
 80089ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80089ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089f6:	881b      	ldrh	r3, [r3, #0]
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a04:	801a      	strh	r2, [r3, #0]
 8008a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a0a:	2b3e      	cmp	r3, #62	; 0x3e
 8008a0c:	d923      	bls.n	8008a56 <USB_EPStartXfer+0x149c>
 8008a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a12:	095b      	lsrs	r3, r3, #5
 8008a14:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a1c:	f003 031f 	and.w	r3, r3, #31
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d104      	bne.n	8008a2e <USB_EPStartXfer+0x1474>
 8008a24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a32:	881b      	ldrh	r3, [r3, #0]
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	029b      	lsls	r3, r3, #10
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	4313      	orrs	r3, r2
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a52:	801a      	strh	r2, [r3, #0]
 8008a54:	e060      	b.n	8008b18 <USB_EPStartXfer+0x155e>
 8008a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d10c      	bne.n	8008a78 <USB_EPStartXfer+0x14be>
 8008a5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a62:	881b      	ldrh	r3, [r3, #0]
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a6e:	b29a      	uxth	r2, r3
 8008a70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a74:	801a      	strh	r2, [r3, #0]
 8008a76:	e04f      	b.n	8008b18 <USB_EPStartXfer+0x155e>
 8008a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a7c:	085b      	lsrs	r3, r3, #1
 8008a7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d004      	beq.n	8008a98 <USB_EPStartXfer+0x14de>
 8008a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a92:	3301      	adds	r3, #1
 8008a94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a9c:	881b      	ldrh	r3, [r3, #0]
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	029b      	lsls	r3, r3, #10
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008ab2:	801a      	strh	r2, [r3, #0]
 8008ab4:	e030      	b.n	8008b18 <USB_EPStartXfer+0x155e>
 8008ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	785b      	ldrb	r3, [r3, #1]
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d128      	bne.n	8008b18 <USB_EPStartXfer+0x155e>
 8008ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ad8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008aea:	4413      	add	r3, r2
 8008aec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008af4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	011a      	lsls	r2, r3, #4
 8008afe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b02:	4413      	add	r3, r2
 8008b04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008b08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008b16:	801a      	strh	r2, [r3, #0]
 8008b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	785b      	ldrb	r3, [r3, #1]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f040 8085 	bne.w	8008c42 <USB_EPStartXfer+0x1688>
 8008b38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	461a      	mov	r2, r3
 8008b58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008b5c:	4413      	add	r3, r2
 8008b5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	011a      	lsls	r2, r3, #4
 8008b70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008b74:	4413      	add	r3, r2
 8008b76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b82:	881b      	ldrh	r3, [r3, #0]
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b90:	801a      	strh	r2, [r3, #0]
 8008b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b96:	2b3e      	cmp	r3, #62	; 0x3e
 8008b98:	d923      	bls.n	8008be2 <USB_EPStartXfer+0x1628>
 8008b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b9e:	095b      	lsrs	r3, r3, #5
 8008ba0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ba8:	f003 031f 	and.w	r3, r3, #31
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d104      	bne.n	8008bba <USB_EPStartXfer+0x1600>
 8008bb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008bba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008bbe:	881b      	ldrh	r3, [r3, #0]
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	029b      	lsls	r3, r3, #10
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008bde:	801a      	strh	r2, [r3, #0]
 8008be0:	e05c      	b.n	8008c9c <USB_EPStartXfer+0x16e2>
 8008be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10c      	bne.n	8008c04 <USB_EPStartXfer+0x164a>
 8008bea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008bee:	881b      	ldrh	r3, [r3, #0]
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c00:	801a      	strh	r2, [r3, #0]
 8008c02:	e04b      	b.n	8008c9c <USB_EPStartXfer+0x16e2>
 8008c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c08:	085b      	lsrs	r3, r3, #1
 8008c0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c12:	f003 0301 	and.w	r3, r3, #1
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d004      	beq.n	8008c24 <USB_EPStartXfer+0x166a>
 8008c1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c1e:	3301      	adds	r3, #1
 8008c20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c28:	881b      	ldrh	r3, [r3, #0]
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	029b      	lsls	r3, r3, #10
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	4313      	orrs	r3, r2
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c3e:	801a      	strh	r2, [r3, #0]
 8008c40:	e02c      	b.n	8008c9c <USB_EPStartXfer+0x16e2>
 8008c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	785b      	ldrb	r3, [r3, #1]
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d124      	bne.n	8008c9c <USB_EPStartXfer+0x16e2>
 8008c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	461a      	mov	r2, r3
 8008c64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008c68:	4413      	add	r3, r2
 8008c6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	011a      	lsls	r2, r3, #4
 8008c7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008c80:	4413      	add	r3, r2
 8008c82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008c94:	801a      	strh	r2, [r3, #0]
 8008c96:	e001      	b.n	8008c9c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e03a      	b.n	8008d12 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ca0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	4413      	add	r3, r2
 8008cb6:	881b      	ldrh	r3, [r3, #0]
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008cc6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008cca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008cce:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008cd2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008cd6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008cda:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ce2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	441a      	add	r2, r3
 8008cf8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	785b      	ldrb	r3, [r3, #1]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d020      	beq.n	8008d70 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4413      	add	r3, r2
 8008d38:	881b      	ldrh	r3, [r3, #0]
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d44:	81bb      	strh	r3, [r7, #12]
 8008d46:	89bb      	ldrh	r3, [r7, #12]
 8008d48:	f083 0310 	eor.w	r3, r3, #16
 8008d4c:	81bb      	strh	r3, [r7, #12]
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	441a      	add	r2, r3
 8008d58:	89bb      	ldrh	r3, [r7, #12]
 8008d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	8013      	strh	r3, [r2, #0]
 8008d6e:	e01f      	b.n	8008db0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	4413      	add	r3, r2
 8008d7a:	881b      	ldrh	r3, [r3, #0]
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d86:	81fb      	strh	r3, [r7, #14]
 8008d88:	89fb      	ldrh	r3, [r7, #14]
 8008d8a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d8e:	81fb      	strh	r3, [r7, #14]
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	441a      	add	r2, r3
 8008d9a:	89fb      	ldrh	r3, [r7, #14]
 8008d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008da4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3714      	adds	r7, #20
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr

08008dbe <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	b087      	sub	sp, #28
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	7b1b      	ldrb	r3, [r3, #12]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f040 809d 	bne.w	8008f0c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	785b      	ldrb	r3, [r3, #1]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d04c      	beq.n	8008e74 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	4413      	add	r3, r2
 8008de4:	881b      	ldrh	r3, [r3, #0]
 8008de6:	823b      	strh	r3, [r7, #16]
 8008de8:	8a3b      	ldrh	r3, [r7, #16]
 8008dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d01b      	beq.n	8008e2a <USB_EPClearStall+0x6c>
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4413      	add	r3, r2
 8008dfc:	881b      	ldrh	r3, [r3, #0]
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e08:	81fb      	strh	r3, [r7, #14]
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	441a      	add	r2, r3
 8008e14:	89fb      	ldrh	r3, [r7, #14]
 8008e16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	78db      	ldrb	r3, [r3, #3]
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d06c      	beq.n	8008f0c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	4413      	add	r3, r2
 8008e3c:	881b      	ldrh	r3, [r3, #0]
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e48:	81bb      	strh	r3, [r7, #12]
 8008e4a:	89bb      	ldrh	r3, [r7, #12]
 8008e4c:	f083 0320 	eor.w	r3, r3, #32
 8008e50:	81bb      	strh	r3, [r7, #12]
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	441a      	add	r2, r3
 8008e5c:	89bb      	ldrh	r3, [r7, #12]
 8008e5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	8013      	strh	r3, [r2, #0]
 8008e72:	e04b      	b.n	8008f0c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	4413      	add	r3, r2
 8008e7e:	881b      	ldrh	r3, [r3, #0]
 8008e80:	82fb      	strh	r3, [r7, #22]
 8008e82:	8afb      	ldrh	r3, [r7, #22]
 8008e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d01b      	beq.n	8008ec4 <USB_EPClearStall+0x106>
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	4413      	add	r3, r2
 8008e96:	881b      	ldrh	r3, [r3, #0]
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ea2:	82bb      	strh	r3, [r7, #20]
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	441a      	add	r2, r3
 8008eae:	8abb      	ldrh	r3, [r7, #20]
 8008eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	4413      	add	r3, r2
 8008ece:	881b      	ldrh	r3, [r3, #0]
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eda:	827b      	strh	r3, [r7, #18]
 8008edc:	8a7b      	ldrh	r3, [r7, #18]
 8008ede:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ee2:	827b      	strh	r3, [r7, #18]
 8008ee4:	8a7b      	ldrh	r3, [r7, #18]
 8008ee6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008eea:	827b      	strh	r3, [r7, #18]
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	441a      	add	r2, r3
 8008ef6:	8a7b      	ldrh	r3, [r7, #18]
 8008ef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008efc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	371c      	adds	r7, #28
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr

08008f1a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008f1a:	b480      	push	{r7}
 8008f1c:	b083      	sub	sp, #12
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
 8008f22:	460b      	mov	r3, r1
 8008f24:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008f26:	78fb      	ldrb	r3, [r7, #3]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d103      	bne.n	8008f34 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2280      	movs	r2, #128	; 0x80
 8008f30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	370c      	adds	r7, #12
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b083      	sub	sp, #12
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b085      	sub	sp, #20
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3714      	adds	r7, #20
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b08b      	sub	sp, #44	; 0x2c
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	4611      	mov	r1, r2
 8008f84:	461a      	mov	r2, r3
 8008f86:	460b      	mov	r3, r1
 8008f88:	80fb      	strh	r3, [r7, #6]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008f8e:	88bb      	ldrh	r3, [r7, #4]
 8008f90:	3301      	adds	r3, #1
 8008f92:	085b      	lsrs	r3, r3, #1
 8008f94:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f9e:	88fb      	ldrh	r3, [r7, #6]
 8008fa0:	005a      	lsls	r2, r3, #1
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008faa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	627b      	str	r3, [r7, #36]	; 0x24
 8008fb0:	e01e      	b.n	8008ff0 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	021b      	lsls	r3, r3, #8
 8008fc0:	b21a      	sxth	r2, r3
 8008fc2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	b21b      	sxth	r3, r3
 8008fca:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008fcc:	6a3b      	ldr	r3, [r7, #32]
 8008fce:	8a7a      	ldrh	r2, [r7, #18]
 8008fd0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008fd2:	6a3b      	ldr	r3, [r7, #32]
 8008fd4:	3302      	adds	r3, #2
 8008fd6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008fd8:	6a3b      	ldr	r3, [r7, #32]
 8008fda:	3302      	adds	r3, #2
 8008fdc:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fec:	3b01      	subs	r3, #1
 8008fee:	627b      	str	r3, [r7, #36]	; 0x24
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1dd      	bne.n	8008fb2 <USB_WritePMA+0x3a>
  }
}
 8008ff6:	bf00      	nop
 8008ff8:	bf00      	nop
 8008ffa:	372c      	adds	r7, #44	; 0x2c
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009004:	b480      	push	{r7}
 8009006:	b08b      	sub	sp, #44	; 0x2c
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	4611      	mov	r1, r2
 8009010:	461a      	mov	r2, r3
 8009012:	460b      	mov	r3, r1
 8009014:	80fb      	strh	r3, [r7, #6]
 8009016:	4613      	mov	r3, r2
 8009018:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800901a:	88bb      	ldrh	r3, [r7, #4]
 800901c:	085b      	lsrs	r3, r3, #1
 800901e:	b29b      	uxth	r3, r3
 8009020:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800902a:	88fb      	ldrh	r3, [r7, #6]
 800902c:	005a      	lsls	r2, r3, #1
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	4413      	add	r3, r2
 8009032:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009036:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	627b      	str	r3, [r7, #36]	; 0x24
 800903c:	e01b      	b.n	8009076 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800903e:	6a3b      	ldr	r3, [r7, #32]
 8009040:	881b      	ldrh	r3, [r3, #0]
 8009042:	b29b      	uxth	r3, r3
 8009044:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009046:	6a3b      	ldr	r3, [r7, #32]
 8009048:	3302      	adds	r3, #2
 800904a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	b2da      	uxtb	r2, r3
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	3301      	adds	r3, #1
 8009058:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	0a1b      	lsrs	r3, r3, #8
 800905e:	b2da      	uxtb	r2, r3
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	3301      	adds	r3, #1
 8009068:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800906a:	6a3b      	ldr	r3, [r7, #32]
 800906c:	3302      	adds	r3, #2
 800906e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8009070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009072:	3b01      	subs	r3, #1
 8009074:	627b      	str	r3, [r7, #36]	; 0x24
 8009076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1e0      	bne.n	800903e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800907c:	88bb      	ldrh	r3, [r7, #4]
 800907e:	f003 0301 	and.w	r3, r3, #1
 8009082:	b29b      	uxth	r3, r3
 8009084:	2b00      	cmp	r3, #0
 8009086:	d007      	beq.n	8009098 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8009088:	6a3b      	ldr	r3, [r7, #32]
 800908a:	881b      	ldrh	r3, [r3, #0]
 800908c:	b29b      	uxth	r3, r3
 800908e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	b2da      	uxtb	r2, r3
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	701a      	strb	r2, [r3, #0]
  }
}
 8009098:	bf00      	nop
 800909a:	372c      	adds	r7, #44	; 0x2c
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	460b      	mov	r3, r1
 80090ae:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80090b0:	2304      	movs	r3, #4
 80090b2:	2203      	movs	r2, #3
 80090b4:	2181      	movs	r1, #129	; 0x81
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f001 fc91 	bl	800a9de <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80090c2:	2010      	movs	r0, #16
 80090c4:	f001 fda0 	bl	800ac08 <USBD_static_malloc>
 80090c8:	4602      	mov	r2, r0
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d101      	bne.n	80090de <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 80090da:	2302      	movs	r3, #2
 80090dc:	e005      	b.n	80090ea <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090e4:	2200      	movs	r2, #0
 80090e6:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3708      	adds	r7, #8
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b082      	sub	sp, #8
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
 80090fa:	460b      	mov	r3, r1
 80090fc:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80090fe:	2181      	movs	r1, #129	; 0x81
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f001 fc92 	bl	800aa2a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009112:	2b00      	cmp	r3, #0
 8009114:	d009      	beq.n	800912a <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800911c:	4618      	mov	r0, r3
 800911e:	f001 fd81 	bl	800ac24 <USBD_static_free>
    pdev->pClassData = NULL;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3708      	adds	r7, #8
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b088      	sub	sp, #32
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009144:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8009146:	2300      	movs	r3, #0
 8009148:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800914a:	2300      	movs	r3, #0
 800914c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800914e:	2300      	movs	r3, #0
 8009150:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8009152:	2300      	movs	r3, #0
 8009154:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800915e:	2b00      	cmp	r3, #0
 8009160:	d045      	beq.n	80091ee <USBD_HID_Setup+0xba>
 8009162:	2b20      	cmp	r3, #32
 8009164:	f040 80d3 	bne.w	800930e <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	785b      	ldrb	r3, [r3, #1]
 800916c:	3b02      	subs	r3, #2
 800916e:	2b09      	cmp	r3, #9
 8009170:	d835      	bhi.n	80091de <USBD_HID_Setup+0xaa>
 8009172:	a201      	add	r2, pc, #4	; (adr r2, 8009178 <USBD_HID_Setup+0x44>)
 8009174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009178:	080091cf 	.word	0x080091cf
 800917c:	080091af 	.word	0x080091af
 8009180:	080091df 	.word	0x080091df
 8009184:	080091df 	.word	0x080091df
 8009188:	080091df 	.word	0x080091df
 800918c:	080091df 	.word	0x080091df
 8009190:	080091df 	.word	0x080091df
 8009194:	080091df 	.word	0x080091df
 8009198:	080091bd 	.word	0x080091bd
 800919c:	080091a1 	.word	0x080091a1
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	885b      	ldrh	r3, [r3, #2]
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	461a      	mov	r2, r3
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	601a      	str	r2, [r3, #0]
          break;
 80091ac:	e01e      	b.n	80091ec <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	2201      	movs	r2, #1
 80091b2:	4619      	mov	r1, r3
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f001 f92a 	bl	800a40e <USBD_CtlSendData>
          break;
 80091ba:	e017      	b.n	80091ec <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	885b      	ldrh	r3, [r3, #2]
 80091c0:	0a1b      	lsrs	r3, r3, #8
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	461a      	mov	r2, r3
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	605a      	str	r2, [r3, #4]
          break;
 80091cc:	e00e      	b.n	80091ec <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	3304      	adds	r3, #4
 80091d2:	2201      	movs	r2, #1
 80091d4:	4619      	mov	r1, r3
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f001 f919 	bl	800a40e <USBD_CtlSendData>
          break;
 80091dc:	e006      	b.n	80091ec <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 80091de:	6839      	ldr	r1, [r7, #0]
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f001 f8a9 	bl	800a338 <USBD_CtlError>
          ret = USBD_FAIL;
 80091e6:	2302      	movs	r3, #2
 80091e8:	75fb      	strb	r3, [r7, #23]
          break;
 80091ea:	bf00      	nop
      }
      break;
 80091ec:	e096      	b.n	800931c <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	785b      	ldrb	r3, [r3, #1]
 80091f2:	2b0b      	cmp	r3, #11
 80091f4:	f200 8083 	bhi.w	80092fe <USBD_HID_Setup+0x1ca>
 80091f8:	a201      	add	r2, pc, #4	; (adr r2, 8009200 <USBD_HID_Setup+0xcc>)
 80091fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091fe:	bf00      	nop
 8009200:	08009231 	.word	0x08009231
 8009204:	080092ff 	.word	0x080092ff
 8009208:	080092ff 	.word	0x080092ff
 800920c:	080092ff 	.word	0x080092ff
 8009210:	080092ff 	.word	0x080092ff
 8009214:	080092ff 	.word	0x080092ff
 8009218:	08009259 	.word	0x08009259
 800921c:	080092ff 	.word	0x080092ff
 8009220:	080092ff 	.word	0x080092ff
 8009224:	080092ff 	.word	0x080092ff
 8009228:	080092b1 	.word	0x080092b1
 800922c:	080092d9 	.word	0x080092d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009236:	2b03      	cmp	r3, #3
 8009238:	d107      	bne.n	800924a <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800923a:	f107 030e 	add.w	r3, r7, #14
 800923e:	2202      	movs	r2, #2
 8009240:	4619      	mov	r1, r3
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f001 f8e3 	bl	800a40e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009248:	e060      	b.n	800930c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f001 f873 	bl	800a338 <USBD_CtlError>
            ret = USBD_FAIL;
 8009252:	2302      	movs	r3, #2
 8009254:	75fb      	strb	r3, [r7, #23]
          break;
 8009256:	e059      	b.n	800930c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	885b      	ldrh	r3, [r3, #2]
 800925c:	0a1b      	lsrs	r3, r3, #8
 800925e:	b29b      	uxth	r3, r3
 8009260:	2b22      	cmp	r3, #34	; 0x22
 8009262:	d108      	bne.n	8009276 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	88db      	ldrh	r3, [r3, #6]
 8009268:	2b4a      	cmp	r3, #74	; 0x4a
 800926a:	bf28      	it	cs
 800926c:	234a      	movcs	r3, #74	; 0x4a
 800926e:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8009270:	4b2d      	ldr	r3, [pc, #180]	; (8009328 <USBD_HID_Setup+0x1f4>)
 8009272:	61bb      	str	r3, [r7, #24]
 8009274:	e015      	b.n	80092a2 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	885b      	ldrh	r3, [r3, #2]
 800927a:	0a1b      	lsrs	r3, r3, #8
 800927c:	b29b      	uxth	r3, r3
 800927e:	2b21      	cmp	r3, #33	; 0x21
 8009280:	d108      	bne.n	8009294 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8009282:	4b2a      	ldr	r3, [pc, #168]	; (800932c <USBD_HID_Setup+0x1f8>)
 8009284:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	88db      	ldrh	r3, [r3, #6]
 800928a:	2b09      	cmp	r3, #9
 800928c:	bf28      	it	cs
 800928e:	2309      	movcs	r3, #9
 8009290:	83fb      	strh	r3, [r7, #30]
 8009292:	e006      	b.n	80092a2 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8009294:	6839      	ldr	r1, [r7, #0]
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f001 f84e 	bl	800a338 <USBD_CtlError>
            ret = USBD_FAIL;
 800929c:	2302      	movs	r3, #2
 800929e:	75fb      	strb	r3, [r7, #23]
            break;
 80092a0:	e034      	b.n	800930c <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80092a2:	8bfb      	ldrh	r3, [r7, #30]
 80092a4:	461a      	mov	r2, r3
 80092a6:	69b9      	ldr	r1, [r7, #24]
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f001 f8b0 	bl	800a40e <USBD_CtlSendData>
          break;
 80092ae:	e02d      	b.n	800930c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092b6:	2b03      	cmp	r3, #3
 80092b8:	d107      	bne.n	80092ca <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	3308      	adds	r3, #8
 80092be:	2201      	movs	r2, #1
 80092c0:	4619      	mov	r1, r3
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f001 f8a3 	bl	800a40e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092c8:	e020      	b.n	800930c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80092ca:	6839      	ldr	r1, [r7, #0]
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f001 f833 	bl	800a338 <USBD_CtlError>
            ret = USBD_FAIL;
 80092d2:	2302      	movs	r3, #2
 80092d4:	75fb      	strb	r3, [r7, #23]
          break;
 80092d6:	e019      	b.n	800930c <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092de:	2b03      	cmp	r3, #3
 80092e0:	d106      	bne.n	80092f0 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	885b      	ldrh	r3, [r3, #2]
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	461a      	mov	r2, r3
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092ee:	e00d      	b.n	800930c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f001 f820 	bl	800a338 <USBD_CtlError>
            ret = USBD_FAIL;
 80092f8:	2302      	movs	r3, #2
 80092fa:	75fb      	strb	r3, [r7, #23]
          break;
 80092fc:	e006      	b.n	800930c <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 80092fe:	6839      	ldr	r1, [r7, #0]
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f001 f819 	bl	800a338 <USBD_CtlError>
          ret = USBD_FAIL;
 8009306:	2302      	movs	r3, #2
 8009308:	75fb      	strb	r3, [r7, #23]
          break;
 800930a:	bf00      	nop
      }
      break;
 800930c:	e006      	b.n	800931c <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800930e:	6839      	ldr	r1, [r7, #0]
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f001 f811 	bl	800a338 <USBD_CtlError>
      ret = USBD_FAIL;
 8009316:	2302      	movs	r3, #2
 8009318:	75fb      	strb	r3, [r7, #23]
      break;
 800931a:	bf00      	nop
  }

  return ret;
 800931c:	7dfb      	ldrb	r3, [r7, #23]
}
 800931e:	4618      	mov	r0, r3
 8009320:	3720      	adds	r7, #32
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	200000c8 	.word	0x200000c8
 800932c:	200000b0 	.word	0x200000b0

08009330 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2222      	movs	r2, #34	; 0x22
 800933c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800933e:	4b03      	ldr	r3, [pc, #12]	; (800934c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8009340:	4618      	mov	r0, r3
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	20000044 	.word	0x20000044

08009350 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2222      	movs	r2, #34	; 0x22
 800935c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800935e:	4b03      	ldr	r3, [pc, #12]	; (800936c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8009360:	4618      	mov	r0, r3
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr
 800936c:	20000068 	.word	0x20000068

08009370 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2222      	movs	r2, #34	; 0x22
 800937c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800937e:	4b03      	ldr	r3, [pc, #12]	; (800938c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8009380:	4618      	mov	r0, r3
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr
 800938c:	2000008c 	.word	0x2000008c

08009390 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	460b      	mov	r3, r1
 800939a:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093a2:	2200      	movs	r2, #0
 80093a4:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	220a      	movs	r2, #10
 80093c0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80093c2:	4b03      	ldr	r3, [pc, #12]	; (80093d0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr
 80093d0:	200000bc 	.word	0x200000bc

080093d4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	4613      	mov	r3, r2
 80093e0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d101      	bne.n	80093ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80093e8:	2302      	movs	r3, #2
 80093ea:	e01a      	b.n	8009422 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d003      	beq.n	80093fe <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d003      	beq.n	800940c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	68ba      	ldr	r2, [r7, #8]
 8009408:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	79fa      	ldrb	r2, [r7, #7]
 8009418:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f001 fa7c 	bl	800a918 <USBD_LL_Init>

  return USBD_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3710      	adds	r7, #16
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800942a:	b480      	push	{r7}
 800942c:	b085      	sub	sp, #20
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
 8009432:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009434:	2300      	movs	r3, #0
 8009436:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d006      	beq.n	800944c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	683a      	ldr	r2, [r7, #0]
 8009442:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009446:	2300      	movs	r3, #0
 8009448:	73fb      	strb	r3, [r7, #15]
 800944a:	e001      	b.n	8009450 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800944c:	2302      	movs	r3, #2
 800944e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009450:	7bfb      	ldrb	r3, [r7, #15]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3714      	adds	r7, #20
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b082      	sub	sp, #8
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f001 fa9e 	bl	800a9a8 <USBD_LL_Start>

  return USBD_OK;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009476:	b480      	push	{r7}
 8009478:	b083      	sub	sp, #12
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	460b      	mov	r3, r1
 8009496:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009498:	2302      	movs	r3, #2
 800949a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00c      	beq.n	80094c0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	78fa      	ldrb	r2, [r7, #3]
 80094b0:	4611      	mov	r1, r2
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	4798      	blx	r3
 80094b6:	4603      	mov	r3, r0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d101      	bne.n	80094c0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80094bc:	2300      	movs	r3, #0
 80094be:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80094c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b082      	sub	sp, #8
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
 80094d2:	460b      	mov	r3, r1
 80094d4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	78fa      	ldrb	r2, [r7, #3]
 80094e0:	4611      	mov	r1, r2
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	4798      	blx	r3

  return USBD_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	4618      	mov	r0, r3
 8009504:	f000 fedb 	bl	800a2be <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009516:	461a      	mov	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009524:	f003 031f 	and.w	r3, r3, #31
 8009528:	2b02      	cmp	r3, #2
 800952a:	d016      	beq.n	800955a <USBD_LL_SetupStage+0x6a>
 800952c:	2b02      	cmp	r3, #2
 800952e:	d81c      	bhi.n	800956a <USBD_LL_SetupStage+0x7a>
 8009530:	2b00      	cmp	r3, #0
 8009532:	d002      	beq.n	800953a <USBD_LL_SetupStage+0x4a>
 8009534:	2b01      	cmp	r3, #1
 8009536:	d008      	beq.n	800954a <USBD_LL_SetupStage+0x5a>
 8009538:	e017      	b.n	800956a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009540:	4619      	mov	r1, r3
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 f9ce 	bl	80098e4 <USBD_StdDevReq>
      break;
 8009548:	e01a      	b.n	8009580 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009550:	4619      	mov	r1, r3
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 fa30 	bl	80099b8 <USBD_StdItfReq>
      break;
 8009558:	e012      	b.n	8009580 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009560:	4619      	mov	r1, r3
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 fa70 	bl	8009a48 <USBD_StdEPReq>
      break;
 8009568:	e00a      	b.n	8009580 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009570:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009574:	b2db      	uxtb	r3, r3
 8009576:	4619      	mov	r1, r3
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f001 fa75 	bl	800aa68 <USBD_LL_StallEP>
      break;
 800957e:	bf00      	nop
  }

  return USBD_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3708      	adds	r7, #8
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b086      	sub	sp, #24
 800958e:	af00      	add	r7, sp, #0
 8009590:	60f8      	str	r0, [r7, #12]
 8009592:	460b      	mov	r3, r1
 8009594:	607a      	str	r2, [r7, #4]
 8009596:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009598:	7afb      	ldrb	r3, [r7, #11]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d14b      	bne.n	8009636 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80095a4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80095ac:	2b03      	cmp	r3, #3
 80095ae:	d134      	bne.n	800961a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	68da      	ldr	r2, [r3, #12]
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d919      	bls.n	80095f0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	68da      	ldr	r2, [r3, #12]
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	1ad2      	subs	r2, r2, r3
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	68da      	ldr	r2, [r3, #12]
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d203      	bcs.n	80095de <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80095da:	b29b      	uxth	r3, r3
 80095dc:	e002      	b.n	80095e4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	461a      	mov	r2, r3
 80095e6:	6879      	ldr	r1, [r7, #4]
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	f000 ff3e 	bl	800a46a <USBD_CtlContinueRx>
 80095ee:	e038      	b.n	8009662 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00a      	beq.n	8009612 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009602:	2b03      	cmp	r3, #3
 8009604:	d105      	bne.n	8009612 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f000 ff3b 	bl	800a48e <USBD_CtlSendStatus>
 8009618:	e023      	b.n	8009662 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009620:	2b05      	cmp	r3, #5
 8009622:	d11e      	bne.n	8009662 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2200      	movs	r2, #0
 8009628:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800962c:	2100      	movs	r1, #0
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f001 fa1a 	bl	800aa68 <USBD_LL_StallEP>
 8009634:	e015      	b.n	8009662 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800963c:	699b      	ldr	r3, [r3, #24]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d00d      	beq.n	800965e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009648:	2b03      	cmp	r3, #3
 800964a:	d108      	bne.n	800965e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009652:	699b      	ldr	r3, [r3, #24]
 8009654:	7afa      	ldrb	r2, [r7, #11]
 8009656:	4611      	mov	r1, r2
 8009658:	68f8      	ldr	r0, [r7, #12]
 800965a:	4798      	blx	r3
 800965c:	e001      	b.n	8009662 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800965e:	2302      	movs	r3, #2
 8009660:	e000      	b.n	8009664 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3718      	adds	r7, #24
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b086      	sub	sp, #24
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	460b      	mov	r3, r1
 8009676:	607a      	str	r2, [r7, #4]
 8009678:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800967a:	7afb      	ldrb	r3, [r7, #11]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d17f      	bne.n	8009780 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	3314      	adds	r3, #20
 8009684:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800968c:	2b02      	cmp	r3, #2
 800968e:	d15c      	bne.n	800974a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	68da      	ldr	r2, [r3, #12]
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	429a      	cmp	r2, r3
 800969a:	d915      	bls.n	80096c8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	68da      	ldr	r2, [r3, #12]
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	1ad2      	subs	r2, r2, r3
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	461a      	mov	r2, r3
 80096b2:	6879      	ldr	r1, [r7, #4]
 80096b4:	68f8      	ldr	r0, [r7, #12]
 80096b6:	f000 fec6 	bl	800a446 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096ba:	2300      	movs	r3, #0
 80096bc:	2200      	movs	r2, #0
 80096be:	2100      	movs	r1, #0
 80096c0:	68f8      	ldr	r0, [r7, #12]
 80096c2:	f001 fa7e 	bl	800abc2 <USBD_LL_PrepareReceive>
 80096c6:	e04e      	b.n	8009766 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	697a      	ldr	r2, [r7, #20]
 80096ce:	6912      	ldr	r2, [r2, #16]
 80096d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80096d4:	fb01 f202 	mul.w	r2, r1, r2
 80096d8:	1a9b      	subs	r3, r3, r2
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d11c      	bne.n	8009718 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	689a      	ldr	r2, [r3, #8]
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d316      	bcc.n	8009718 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	689a      	ldr	r2, [r3, #8]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d20f      	bcs.n	8009718 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80096f8:	2200      	movs	r2, #0
 80096fa:	2100      	movs	r1, #0
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	f000 fea2 	bl	800a446 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2200      	movs	r2, #0
 8009706:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800970a:	2300      	movs	r3, #0
 800970c:	2200      	movs	r2, #0
 800970e:	2100      	movs	r1, #0
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f001 fa56 	bl	800abc2 <USBD_LL_PrepareReceive>
 8009716:	e026      	b.n	8009766 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00a      	beq.n	800973a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800972a:	2b03      	cmp	r3, #3
 800972c:	d105      	bne.n	800973a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800973a:	2180      	movs	r1, #128	; 0x80
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f001 f993 	bl	800aa68 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f000 feb6 	bl	800a4b4 <USBD_CtlReceiveStatus>
 8009748:	e00d      	b.n	8009766 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009750:	2b04      	cmp	r3, #4
 8009752:	d004      	beq.n	800975e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800975a:	2b00      	cmp	r3, #0
 800975c:	d103      	bne.n	8009766 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800975e:	2180      	movs	r1, #128	; 0x80
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	f001 f981 	bl	800aa68 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800976c:	2b01      	cmp	r3, #1
 800976e:	d11d      	bne.n	80097ac <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f7ff fe80 	bl	8009476 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2200      	movs	r2, #0
 800977a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800977e:	e015      	b.n	80097ac <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009786:	695b      	ldr	r3, [r3, #20]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00d      	beq.n	80097a8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009792:	2b03      	cmp	r3, #3
 8009794:	d108      	bne.n	80097a8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800979c:	695b      	ldr	r3, [r3, #20]
 800979e:	7afa      	ldrb	r2, [r7, #11]
 80097a0:	4611      	mov	r1, r2
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	4798      	blx	r3
 80097a6:	e001      	b.n	80097ac <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80097a8:	2302      	movs	r3, #2
 80097aa:	e000      	b.n	80097ae <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3718      	adds	r7, #24
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b082      	sub	sp, #8
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097be:	2340      	movs	r3, #64	; 0x40
 80097c0:	2200      	movs	r2, #0
 80097c2:	2100      	movs	r1, #0
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f001 f90a 	bl	800a9de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2201      	movs	r2, #1
 80097ce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2240      	movs	r2, #64	; 0x40
 80097d6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097da:	2340      	movs	r3, #64	; 0x40
 80097dc:	2200      	movs	r2, #0
 80097de:	2180      	movs	r1, #128	; 0x80
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f001 f8fc 	bl	800a9de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2201      	movs	r2, #1
 80097ea:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2240      	movs	r2, #64	; 0x40
 80097f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2201      	movs	r2, #1
 80097f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009816:	2b00      	cmp	r3, #0
 8009818:	d009      	beq.n	800982e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	6852      	ldr	r2, [r2, #4]
 8009826:	b2d2      	uxtb	r2, r2
 8009828:	4611      	mov	r1, r2
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	4798      	blx	r3
  }

  return USBD_OK;
 800982e:	2300      	movs	r3, #0
}
 8009830:	4618      	mov	r0, r3
 8009832:	3708      	adds	r7, #8
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	460b      	mov	r3, r1
 8009842:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	78fa      	ldrb	r2, [r7, #3]
 8009848:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2204      	movs	r2, #4
 8009870:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	370c      	adds	r7, #12
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr

08009882 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009882:	b480      	push	{r7}
 8009884:	b083      	sub	sp, #12
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009890:	2b04      	cmp	r3, #4
 8009892:	d105      	bne.n	80098a0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	370c      	adds	r7, #12
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr

080098ae <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b082      	sub	sp, #8
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098bc:	2b03      	cmp	r3, #3
 80098be:	d10b      	bne.n	80098d8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098c6:	69db      	ldr	r3, [r3, #28]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d005      	beq.n	80098d8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098d2:	69db      	ldr	r3, [r3, #28]
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80098d8:	2300      	movs	r3, #0
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3708      	adds	r7, #8
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
	...

080098e4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098ee:	2300      	movs	r3, #0
 80098f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098fa:	2b40      	cmp	r3, #64	; 0x40
 80098fc:	d005      	beq.n	800990a <USBD_StdDevReq+0x26>
 80098fe:	2b40      	cmp	r3, #64	; 0x40
 8009900:	d84f      	bhi.n	80099a2 <USBD_StdDevReq+0xbe>
 8009902:	2b00      	cmp	r3, #0
 8009904:	d009      	beq.n	800991a <USBD_StdDevReq+0x36>
 8009906:	2b20      	cmp	r3, #32
 8009908:	d14b      	bne.n	80099a2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	6839      	ldr	r1, [r7, #0]
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	4798      	blx	r3
      break;
 8009918:	e048      	b.n	80099ac <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	785b      	ldrb	r3, [r3, #1]
 800991e:	2b09      	cmp	r3, #9
 8009920:	d839      	bhi.n	8009996 <USBD_StdDevReq+0xb2>
 8009922:	a201      	add	r2, pc, #4	; (adr r2, 8009928 <USBD_StdDevReq+0x44>)
 8009924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009928:	08009979 	.word	0x08009979
 800992c:	0800998d 	.word	0x0800998d
 8009930:	08009997 	.word	0x08009997
 8009934:	08009983 	.word	0x08009983
 8009938:	08009997 	.word	0x08009997
 800993c:	0800995b 	.word	0x0800995b
 8009940:	08009951 	.word	0x08009951
 8009944:	08009997 	.word	0x08009997
 8009948:	0800996f 	.word	0x0800996f
 800994c:	08009965 	.word	0x08009965
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009950:	6839      	ldr	r1, [r7, #0]
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 f9dc 	bl	8009d10 <USBD_GetDescriptor>
          break;
 8009958:	e022      	b.n	80099a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800995a:	6839      	ldr	r1, [r7, #0]
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 fb3f 	bl	8009fe0 <USBD_SetAddress>
          break;
 8009962:	e01d      	b.n	80099a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009964:	6839      	ldr	r1, [r7, #0]
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fb7e 	bl	800a068 <USBD_SetConfig>
          break;
 800996c:	e018      	b.n	80099a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800996e:	6839      	ldr	r1, [r7, #0]
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 fc07 	bl	800a184 <USBD_GetConfig>
          break;
 8009976:	e013      	b.n	80099a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009978:	6839      	ldr	r1, [r7, #0]
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fc37 	bl	800a1ee <USBD_GetStatus>
          break;
 8009980:	e00e      	b.n	80099a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009982:	6839      	ldr	r1, [r7, #0]
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 fc65 	bl	800a254 <USBD_SetFeature>
          break;
 800998a:	e009      	b.n	80099a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800998c:	6839      	ldr	r1, [r7, #0]
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 fc74 	bl	800a27c <USBD_ClrFeature>
          break;
 8009994:	e004      	b.n	80099a0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009996:	6839      	ldr	r1, [r7, #0]
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fccd 	bl	800a338 <USBD_CtlError>
          break;
 800999e:	bf00      	nop
      }
      break;
 80099a0:	e004      	b.n	80099ac <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80099a2:	6839      	ldr	r1, [r7, #0]
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 fcc7 	bl	800a338 <USBD_CtlError>
      break;
 80099aa:	bf00      	nop
  }

  return ret;
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop

080099b8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099c2:	2300      	movs	r3, #0
 80099c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099ce:	2b40      	cmp	r3, #64	; 0x40
 80099d0:	d005      	beq.n	80099de <USBD_StdItfReq+0x26>
 80099d2:	2b40      	cmp	r3, #64	; 0x40
 80099d4:	d82e      	bhi.n	8009a34 <USBD_StdItfReq+0x7c>
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d001      	beq.n	80099de <USBD_StdItfReq+0x26>
 80099da:	2b20      	cmp	r3, #32
 80099dc:	d12a      	bne.n	8009a34 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099e4:	3b01      	subs	r3, #1
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	d81d      	bhi.n	8009a26 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	889b      	ldrh	r3, [r3, #4]
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d813      	bhi.n	8009a1c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	6839      	ldr	r1, [r7, #0]
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	4798      	blx	r3
 8009a02:	4603      	mov	r3, r0
 8009a04:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	88db      	ldrh	r3, [r3, #6]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d110      	bne.n	8009a30 <USBD_StdItfReq+0x78>
 8009a0e:	7bfb      	ldrb	r3, [r7, #15]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d10d      	bne.n	8009a30 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fd3a 	bl	800a48e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009a1a:	e009      	b.n	8009a30 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009a1c:	6839      	ldr	r1, [r7, #0]
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fc8a 	bl	800a338 <USBD_CtlError>
          break;
 8009a24:	e004      	b.n	8009a30 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009a26:	6839      	ldr	r1, [r7, #0]
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 fc85 	bl	800a338 <USBD_CtlError>
          break;
 8009a2e:	e000      	b.n	8009a32 <USBD_StdItfReq+0x7a>
          break;
 8009a30:	bf00      	nop
      }
      break;
 8009a32:	e004      	b.n	8009a3e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009a34:	6839      	ldr	r1, [r7, #0]
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fc7e 	bl	800a338 <USBD_CtlError>
      break;
 8009a3c:	bf00      	nop
  }

  return USBD_OK;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3710      	adds	r7, #16
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a52:	2300      	movs	r3, #0
 8009a54:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	889b      	ldrh	r3, [r3, #4]
 8009a5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a64:	2b40      	cmp	r3, #64	; 0x40
 8009a66:	d007      	beq.n	8009a78 <USBD_StdEPReq+0x30>
 8009a68:	2b40      	cmp	r3, #64	; 0x40
 8009a6a:	f200 8146 	bhi.w	8009cfa <USBD_StdEPReq+0x2b2>
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00a      	beq.n	8009a88 <USBD_StdEPReq+0x40>
 8009a72:	2b20      	cmp	r3, #32
 8009a74:	f040 8141 	bne.w	8009cfa <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	6839      	ldr	r1, [r7, #0]
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	4798      	blx	r3
      break;
 8009a86:	e13d      	b.n	8009d04 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a90:	2b20      	cmp	r3, #32
 8009a92:	d10a      	bne.n	8009aaa <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	6839      	ldr	r1, [r7, #0]
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	4798      	blx	r3
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009aa6:	7bfb      	ldrb	r3, [r7, #15]
 8009aa8:	e12d      	b.n	8009d06 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	785b      	ldrb	r3, [r3, #1]
 8009aae:	2b03      	cmp	r3, #3
 8009ab0:	d007      	beq.n	8009ac2 <USBD_StdEPReq+0x7a>
 8009ab2:	2b03      	cmp	r3, #3
 8009ab4:	f300 811b 	bgt.w	8009cee <USBD_StdEPReq+0x2a6>
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d072      	beq.n	8009ba2 <USBD_StdEPReq+0x15a>
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d03a      	beq.n	8009b36 <USBD_StdEPReq+0xee>
 8009ac0:	e115      	b.n	8009cee <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	d002      	beq.n	8009ad2 <USBD_StdEPReq+0x8a>
 8009acc:	2b03      	cmp	r3, #3
 8009ace:	d015      	beq.n	8009afc <USBD_StdEPReq+0xb4>
 8009ad0:	e02b      	b.n	8009b2a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ad2:	7bbb      	ldrb	r3, [r7, #14]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00c      	beq.n	8009af2 <USBD_StdEPReq+0xaa>
 8009ad8:	7bbb      	ldrb	r3, [r7, #14]
 8009ada:	2b80      	cmp	r3, #128	; 0x80
 8009adc:	d009      	beq.n	8009af2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009ade:	7bbb      	ldrb	r3, [r7, #14]
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 ffc0 	bl	800aa68 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009ae8:	2180      	movs	r1, #128	; 0x80
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 ffbc 	bl	800aa68 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009af0:	e020      	b.n	8009b34 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 fc1f 	bl	800a338 <USBD_CtlError>
              break;
 8009afa:	e01b      	b.n	8009b34 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	885b      	ldrh	r3, [r3, #2]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d10e      	bne.n	8009b22 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009b04:	7bbb      	ldrb	r3, [r7, #14]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00b      	beq.n	8009b22 <USBD_StdEPReq+0xda>
 8009b0a:	7bbb      	ldrb	r3, [r7, #14]
 8009b0c:	2b80      	cmp	r3, #128	; 0x80
 8009b0e:	d008      	beq.n	8009b22 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	88db      	ldrh	r3, [r3, #6]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d104      	bne.n	8009b22 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009b18:	7bbb      	ldrb	r3, [r7, #14]
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 ffa3 	bl	800aa68 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 fcb3 	bl	800a48e <USBD_CtlSendStatus>

              break;
 8009b28:	e004      	b.n	8009b34 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009b2a:	6839      	ldr	r1, [r7, #0]
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 fc03 	bl	800a338 <USBD_CtlError>
              break;
 8009b32:	bf00      	nop
          }
          break;
 8009b34:	e0e0      	b.n	8009cf8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	d002      	beq.n	8009b46 <USBD_StdEPReq+0xfe>
 8009b40:	2b03      	cmp	r3, #3
 8009b42:	d015      	beq.n	8009b70 <USBD_StdEPReq+0x128>
 8009b44:	e026      	b.n	8009b94 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b46:	7bbb      	ldrb	r3, [r7, #14]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00c      	beq.n	8009b66 <USBD_StdEPReq+0x11e>
 8009b4c:	7bbb      	ldrb	r3, [r7, #14]
 8009b4e:	2b80      	cmp	r3, #128	; 0x80
 8009b50:	d009      	beq.n	8009b66 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009b52:	7bbb      	ldrb	r3, [r7, #14]
 8009b54:	4619      	mov	r1, r3
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 ff86 	bl	800aa68 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009b5c:	2180      	movs	r1, #128	; 0x80
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 ff82 	bl	800aa68 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b64:	e01c      	b.n	8009ba0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009b66:	6839      	ldr	r1, [r7, #0]
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 fbe5 	bl	800a338 <USBD_CtlError>
              break;
 8009b6e:	e017      	b.n	8009ba0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	885b      	ldrh	r3, [r3, #2]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d112      	bne.n	8009b9e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009b78:	7bbb      	ldrb	r3, [r7, #14]
 8009b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d004      	beq.n	8009b8c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009b82:	7bbb      	ldrb	r3, [r7, #14]
 8009b84:	4619      	mov	r1, r3
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 ff8d 	bl	800aaa6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fc7e 	bl	800a48e <USBD_CtlSendStatus>
              }
              break;
 8009b92:	e004      	b.n	8009b9e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009b94:	6839      	ldr	r1, [r7, #0]
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 fbce 	bl	800a338 <USBD_CtlError>
              break;
 8009b9c:	e000      	b.n	8009ba0 <USBD_StdEPReq+0x158>
              break;
 8009b9e:	bf00      	nop
          }
          break;
 8009ba0:	e0aa      	b.n	8009cf8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ba8:	2b02      	cmp	r3, #2
 8009baa:	d002      	beq.n	8009bb2 <USBD_StdEPReq+0x16a>
 8009bac:	2b03      	cmp	r3, #3
 8009bae:	d032      	beq.n	8009c16 <USBD_StdEPReq+0x1ce>
 8009bb0:	e097      	b.n	8009ce2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bb2:	7bbb      	ldrb	r3, [r7, #14]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d007      	beq.n	8009bc8 <USBD_StdEPReq+0x180>
 8009bb8:	7bbb      	ldrb	r3, [r7, #14]
 8009bba:	2b80      	cmp	r3, #128	; 0x80
 8009bbc:	d004      	beq.n	8009bc8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009bbe:	6839      	ldr	r1, [r7, #0]
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 fbb9 	bl	800a338 <USBD_CtlError>
                break;
 8009bc6:	e091      	b.n	8009cec <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	da0b      	bge.n	8009be8 <USBD_StdEPReq+0x1a0>
 8009bd0:	7bbb      	ldrb	r3, [r7, #14]
 8009bd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	4413      	add	r3, r2
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	3310      	adds	r3, #16
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	4413      	add	r3, r2
 8009be4:	3304      	adds	r3, #4
 8009be6:	e00b      	b.n	8009c00 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009be8:	7bbb      	ldrb	r3, [r7, #14]
 8009bea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bee:	4613      	mov	r3, r2
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	4413      	add	r3, r2
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	3304      	adds	r3, #4
 8009c00:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	2200      	movs	r2, #0
 8009c06:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fbfd 	bl	800a40e <USBD_CtlSendData>
              break;
 8009c14:	e06a      	b.n	8009cec <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	da11      	bge.n	8009c42 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c1e:	7bbb      	ldrb	r3, [r7, #14]
 8009c20:	f003 020f 	and.w	r2, r3, #15
 8009c24:	6879      	ldr	r1, [r7, #4]
 8009c26:	4613      	mov	r3, r2
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	4413      	add	r3, r2
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	440b      	add	r3, r1
 8009c30:	3318      	adds	r3, #24
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d117      	bne.n	8009c68 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009c38:	6839      	ldr	r1, [r7, #0]
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 fb7c 	bl	800a338 <USBD_CtlError>
                  break;
 8009c40:	e054      	b.n	8009cec <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c42:	7bbb      	ldrb	r3, [r7, #14]
 8009c44:	f003 020f 	and.w	r2, r3, #15
 8009c48:	6879      	ldr	r1, [r7, #4]
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	4413      	add	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	440b      	add	r3, r1
 8009c54:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d104      	bne.n	8009c68 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009c5e:	6839      	ldr	r1, [r7, #0]
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 fb69 	bl	800a338 <USBD_CtlError>
                  break;
 8009c66:	e041      	b.n	8009cec <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	da0b      	bge.n	8009c88 <USBD_StdEPReq+0x240>
 8009c70:	7bbb      	ldrb	r3, [r7, #14]
 8009c72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c76:	4613      	mov	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	4413      	add	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	3310      	adds	r3, #16
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	4413      	add	r3, r2
 8009c84:	3304      	adds	r3, #4
 8009c86:	e00b      	b.n	8009ca0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c88:	7bbb      	ldrb	r3, [r7, #14]
 8009c8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c8e:	4613      	mov	r3, r2
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4413      	add	r3, r2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	3304      	adds	r3, #4
 8009ca0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009ca2:	7bbb      	ldrb	r3, [r7, #14]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d002      	beq.n	8009cae <USBD_StdEPReq+0x266>
 8009ca8:	7bbb      	ldrb	r3, [r7, #14]
 8009caa:	2b80      	cmp	r3, #128	; 0x80
 8009cac:	d103      	bne.n	8009cb6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	601a      	str	r2, [r3, #0]
 8009cb4:	e00e      	b.n	8009cd4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009cb6:	7bbb      	ldrb	r3, [r7, #14]
 8009cb8:	4619      	mov	r1, r3
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 ff12 	bl	800aae4 <USBD_LL_IsStallEP>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d003      	beq.n	8009cce <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	601a      	str	r2, [r3, #0]
 8009ccc:	e002      	b.n	8009cd4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	2202      	movs	r2, #2
 8009cd8:	4619      	mov	r1, r3
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 fb97 	bl	800a40e <USBD_CtlSendData>
              break;
 8009ce0:	e004      	b.n	8009cec <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009ce2:	6839      	ldr	r1, [r7, #0]
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 fb27 	bl	800a338 <USBD_CtlError>
              break;
 8009cea:	bf00      	nop
          }
          break;
 8009cec:	e004      	b.n	8009cf8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009cee:	6839      	ldr	r1, [r7, #0]
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 fb21 	bl	800a338 <USBD_CtlError>
          break;
 8009cf6:	bf00      	nop
      }
      break;
 8009cf8:	e004      	b.n	8009d04 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009cfa:	6839      	ldr	r1, [r7, #0]
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 fb1b 	bl	800a338 <USBD_CtlError>
      break;
 8009d02:	bf00      	nop
  }

  return ret;
 8009d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
	...

08009d10 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d22:	2300      	movs	r3, #0
 8009d24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	885b      	ldrh	r3, [r3, #2]
 8009d2a:	0a1b      	lsrs	r3, r3, #8
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	3b01      	subs	r3, #1
 8009d30:	2b06      	cmp	r3, #6
 8009d32:	f200 8128 	bhi.w	8009f86 <USBD_GetDescriptor+0x276>
 8009d36:	a201      	add	r2, pc, #4	; (adr r2, 8009d3c <USBD_GetDescriptor+0x2c>)
 8009d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d3c:	08009d59 	.word	0x08009d59
 8009d40:	08009d71 	.word	0x08009d71
 8009d44:	08009db1 	.word	0x08009db1
 8009d48:	08009f87 	.word	0x08009f87
 8009d4c:	08009f87 	.word	0x08009f87
 8009d50:	08009f27 	.word	0x08009f27
 8009d54:	08009f53 	.word	0x08009f53
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	7c12      	ldrb	r2, [r2, #16]
 8009d64:	f107 0108 	add.w	r1, r7, #8
 8009d68:	4610      	mov	r0, r2
 8009d6a:	4798      	blx	r3
 8009d6c:	60f8      	str	r0, [r7, #12]
      break;
 8009d6e:	e112      	b.n	8009f96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	7c1b      	ldrb	r3, [r3, #16]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d10d      	bne.n	8009d94 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d80:	f107 0208 	add.w	r2, r7, #8
 8009d84:	4610      	mov	r0, r2
 8009d86:	4798      	blx	r3
 8009d88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	2202      	movs	r2, #2
 8009d90:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009d92:	e100      	b.n	8009f96 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9c:	f107 0208 	add.w	r2, r7, #8
 8009da0:	4610      	mov	r0, r2
 8009da2:	4798      	blx	r3
 8009da4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	3301      	adds	r3, #1
 8009daa:	2202      	movs	r2, #2
 8009dac:	701a      	strb	r2, [r3, #0]
      break;
 8009dae:	e0f2      	b.n	8009f96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	885b      	ldrh	r3, [r3, #2]
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	2b05      	cmp	r3, #5
 8009db8:	f200 80ac 	bhi.w	8009f14 <USBD_GetDescriptor+0x204>
 8009dbc:	a201      	add	r2, pc, #4	; (adr r2, 8009dc4 <USBD_GetDescriptor+0xb4>)
 8009dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc2:	bf00      	nop
 8009dc4:	08009ddd 	.word	0x08009ddd
 8009dc8:	08009e11 	.word	0x08009e11
 8009dcc:	08009e45 	.word	0x08009e45
 8009dd0:	08009e79 	.word	0x08009e79
 8009dd4:	08009ead 	.word	0x08009ead
 8009dd8:	08009ee1 	.word	0x08009ee1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d00b      	beq.n	8009e00 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	7c12      	ldrb	r2, [r2, #16]
 8009df4:	f107 0108 	add.w	r1, r7, #8
 8009df8:	4610      	mov	r0, r2
 8009dfa:	4798      	blx	r3
 8009dfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dfe:	e091      	b.n	8009f24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e00:	6839      	ldr	r1, [r7, #0]
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 fa98 	bl	800a338 <USBD_CtlError>
            err++;
 8009e08:	7afb      	ldrb	r3, [r7, #11]
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e0e:	e089      	b.n	8009f24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d00b      	beq.n	8009e34 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	7c12      	ldrb	r2, [r2, #16]
 8009e28:	f107 0108 	add.w	r1, r7, #8
 8009e2c:	4610      	mov	r0, r2
 8009e2e:	4798      	blx	r3
 8009e30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e32:	e077      	b.n	8009f24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e34:	6839      	ldr	r1, [r7, #0]
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 fa7e 	bl	800a338 <USBD_CtlError>
            err++;
 8009e3c:	7afb      	ldrb	r3, [r7, #11]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	72fb      	strb	r3, [r7, #11]
          break;
 8009e42:	e06f      	b.n	8009f24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d00b      	beq.n	8009e68 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	7c12      	ldrb	r2, [r2, #16]
 8009e5c:	f107 0108 	add.w	r1, r7, #8
 8009e60:	4610      	mov	r0, r2
 8009e62:	4798      	blx	r3
 8009e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e66:	e05d      	b.n	8009f24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e68:	6839      	ldr	r1, [r7, #0]
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 fa64 	bl	800a338 <USBD_CtlError>
            err++;
 8009e70:	7afb      	ldrb	r3, [r7, #11]
 8009e72:	3301      	adds	r3, #1
 8009e74:	72fb      	strb	r3, [r7, #11]
          break;
 8009e76:	e055      	b.n	8009f24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00b      	beq.n	8009e9c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	7c12      	ldrb	r2, [r2, #16]
 8009e90:	f107 0108 	add.w	r1, r7, #8
 8009e94:	4610      	mov	r0, r2
 8009e96:	4798      	blx	r3
 8009e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e9a:	e043      	b.n	8009f24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e9c:	6839      	ldr	r1, [r7, #0]
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 fa4a 	bl	800a338 <USBD_CtlError>
            err++;
 8009ea4:	7afb      	ldrb	r3, [r7, #11]
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8009eaa:	e03b      	b.n	8009f24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009eb2:	695b      	ldr	r3, [r3, #20]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00b      	beq.n	8009ed0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ebe:	695b      	ldr	r3, [r3, #20]
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	7c12      	ldrb	r2, [r2, #16]
 8009ec4:	f107 0108 	add.w	r1, r7, #8
 8009ec8:	4610      	mov	r0, r2
 8009eca:	4798      	blx	r3
 8009ecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ece:	e029      	b.n	8009f24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ed0:	6839      	ldr	r1, [r7, #0]
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 fa30 	bl	800a338 <USBD_CtlError>
            err++;
 8009ed8:	7afb      	ldrb	r3, [r7, #11]
 8009eda:	3301      	adds	r3, #1
 8009edc:	72fb      	strb	r3, [r7, #11]
          break;
 8009ede:	e021      	b.n	8009f24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ee6:	699b      	ldr	r3, [r3, #24]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00b      	beq.n	8009f04 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ef2:	699b      	ldr	r3, [r3, #24]
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	7c12      	ldrb	r2, [r2, #16]
 8009ef8:	f107 0108 	add.w	r1, r7, #8
 8009efc:	4610      	mov	r0, r2
 8009efe:	4798      	blx	r3
 8009f00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f02:	e00f      	b.n	8009f24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f04:	6839      	ldr	r1, [r7, #0]
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fa16 	bl	800a338 <USBD_CtlError>
            err++;
 8009f0c:	7afb      	ldrb	r3, [r7, #11]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	72fb      	strb	r3, [r7, #11]
          break;
 8009f12:	e007      	b.n	8009f24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009f14:	6839      	ldr	r1, [r7, #0]
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 fa0e 	bl	800a338 <USBD_CtlError>
          err++;
 8009f1c:	7afb      	ldrb	r3, [r7, #11]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009f22:	e038      	b.n	8009f96 <USBD_GetDescriptor+0x286>
 8009f24:	e037      	b.n	8009f96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	7c1b      	ldrb	r3, [r3, #16]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d109      	bne.n	8009f42 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f36:	f107 0208 	add.w	r2, r7, #8
 8009f3a:	4610      	mov	r0, r2
 8009f3c:	4798      	blx	r3
 8009f3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f40:	e029      	b.n	8009f96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f42:	6839      	ldr	r1, [r7, #0]
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 f9f7 	bl	800a338 <USBD_CtlError>
        err++;
 8009f4a:	7afb      	ldrb	r3, [r7, #11]
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	72fb      	strb	r3, [r7, #11]
      break;
 8009f50:	e021      	b.n	8009f96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	7c1b      	ldrb	r3, [r3, #16]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d10d      	bne.n	8009f76 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f62:	f107 0208 	add.w	r2, r7, #8
 8009f66:	4610      	mov	r0, r2
 8009f68:	4798      	blx	r3
 8009f6a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	3301      	adds	r3, #1
 8009f70:	2207      	movs	r2, #7
 8009f72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f74:	e00f      	b.n	8009f96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f76:	6839      	ldr	r1, [r7, #0]
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 f9dd 	bl	800a338 <USBD_CtlError>
        err++;
 8009f7e:	7afb      	ldrb	r3, [r7, #11]
 8009f80:	3301      	adds	r3, #1
 8009f82:	72fb      	strb	r3, [r7, #11]
      break;
 8009f84:	e007      	b.n	8009f96 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009f86:	6839      	ldr	r1, [r7, #0]
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 f9d5 	bl	800a338 <USBD_CtlError>
      err++;
 8009f8e:	7afb      	ldrb	r3, [r7, #11]
 8009f90:	3301      	adds	r3, #1
 8009f92:	72fb      	strb	r3, [r7, #11]
      break;
 8009f94:	bf00      	nop
  }

  if (err != 0U)
 8009f96:	7afb      	ldrb	r3, [r7, #11]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d11c      	bne.n	8009fd6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009f9c:	893b      	ldrh	r3, [r7, #8]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d011      	beq.n	8009fc6 <USBD_GetDescriptor+0x2b6>
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	88db      	ldrh	r3, [r3, #6]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d00d      	beq.n	8009fc6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	88da      	ldrh	r2, [r3, #6]
 8009fae:	893b      	ldrh	r3, [r7, #8]
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	bf28      	it	cs
 8009fb4:	4613      	movcs	r3, r2
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009fba:	893b      	ldrh	r3, [r7, #8]
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	68f9      	ldr	r1, [r7, #12]
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 fa24 	bl	800a40e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	88db      	ldrh	r3, [r3, #6]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d104      	bne.n	8009fd8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 fa5d 	bl	800a48e <USBD_CtlSendStatus>
 8009fd4:	e000      	b.n	8009fd8 <USBD_GetDescriptor+0x2c8>
    return;
 8009fd6:	bf00      	nop
    }
  }
}
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop

08009fe0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	889b      	ldrh	r3, [r3, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d130      	bne.n	800a054 <USBD_SetAddress+0x74>
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	88db      	ldrh	r3, [r3, #6]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d12c      	bne.n	800a054 <USBD_SetAddress+0x74>
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	885b      	ldrh	r3, [r3, #2]
 8009ffe:	2b7f      	cmp	r3, #127	; 0x7f
 800a000:	d828      	bhi.n	800a054 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	885b      	ldrh	r3, [r3, #2]
 800a006:	b2db      	uxtb	r3, r3
 800a008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a00c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a014:	2b03      	cmp	r3, #3
 800a016:	d104      	bne.n	800a022 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a018:	6839      	ldr	r1, [r7, #0]
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f98c 	bl	800a338 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a020:	e01d      	b.n	800a05e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	7bfa      	ldrb	r2, [r7, #15]
 800a026:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a02a:	7bfb      	ldrb	r3, [r7, #15]
 800a02c:	4619      	mov	r1, r3
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 fd85 	bl	800ab3e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 fa2a 	bl	800a48e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a03a:	7bfb      	ldrb	r3, [r7, #15]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d004      	beq.n	800a04a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2202      	movs	r2, #2
 800a044:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a048:	e009      	b.n	800a05e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2201      	movs	r2, #1
 800a04e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a052:	e004      	b.n	800a05e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a054:	6839      	ldr	r1, [r7, #0]
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 f96e 	bl	800a338 <USBD_CtlError>
  }
}
 800a05c:	bf00      	nop
 800a05e:	bf00      	nop
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
	...

0800a068 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	885b      	ldrh	r3, [r3, #2]
 800a076:	b2da      	uxtb	r2, r3
 800a078:	4b41      	ldr	r3, [pc, #260]	; (800a180 <USBD_SetConfig+0x118>)
 800a07a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a07c:	4b40      	ldr	r3, [pc, #256]	; (800a180 <USBD_SetConfig+0x118>)
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	2b01      	cmp	r3, #1
 800a082:	d904      	bls.n	800a08e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a084:	6839      	ldr	r1, [r7, #0]
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 f956 	bl	800a338 <USBD_CtlError>
 800a08c:	e075      	b.n	800a17a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a094:	2b02      	cmp	r3, #2
 800a096:	d002      	beq.n	800a09e <USBD_SetConfig+0x36>
 800a098:	2b03      	cmp	r3, #3
 800a09a:	d023      	beq.n	800a0e4 <USBD_SetConfig+0x7c>
 800a09c:	e062      	b.n	800a164 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a09e:	4b38      	ldr	r3, [pc, #224]	; (800a180 <USBD_SetConfig+0x118>)
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d01a      	beq.n	800a0dc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a0a6:	4b36      	ldr	r3, [pc, #216]	; (800a180 <USBD_SetConfig+0x118>)
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2203      	movs	r2, #3
 800a0b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a0b8:	4b31      	ldr	r3, [pc, #196]	; (800a180 <USBD_SetConfig+0x118>)
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	4619      	mov	r1, r3
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f7ff f9e4 	bl	800948c <USBD_SetClassConfig>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b02      	cmp	r3, #2
 800a0c8:	d104      	bne.n	800a0d4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a0ca:	6839      	ldr	r1, [r7, #0]
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 f933 	bl	800a338 <USBD_CtlError>
            return;
 800a0d2:	e052      	b.n	800a17a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 f9da 	bl	800a48e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a0da:	e04e      	b.n	800a17a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 f9d6 	bl	800a48e <USBD_CtlSendStatus>
        break;
 800a0e2:	e04a      	b.n	800a17a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a0e4:	4b26      	ldr	r3, [pc, #152]	; (800a180 <USBD_SetConfig+0x118>)
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d112      	bne.n	800a112 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a0f4:	4b22      	ldr	r3, [pc, #136]	; (800a180 <USBD_SetConfig+0x118>)
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a0fe:	4b20      	ldr	r3, [pc, #128]	; (800a180 <USBD_SetConfig+0x118>)
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	4619      	mov	r1, r3
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f7ff f9e0 	bl	80094ca <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 f9bf 	bl	800a48e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a110:	e033      	b.n	800a17a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a112:	4b1b      	ldr	r3, [pc, #108]	; (800a180 <USBD_SetConfig+0x118>)
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	461a      	mov	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d01d      	beq.n	800a15c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	b2db      	uxtb	r3, r3
 800a126:	4619      	mov	r1, r3
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f7ff f9ce 	bl	80094ca <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a12e:	4b14      	ldr	r3, [pc, #80]	; (800a180 <USBD_SetConfig+0x118>)
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	461a      	mov	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a138:	4b11      	ldr	r3, [pc, #68]	; (800a180 <USBD_SetConfig+0x118>)
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	4619      	mov	r1, r3
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f7ff f9a4 	bl	800948c <USBD_SetClassConfig>
 800a144:	4603      	mov	r3, r0
 800a146:	2b02      	cmp	r3, #2
 800a148:	d104      	bne.n	800a154 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a14a:	6839      	ldr	r1, [r7, #0]
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 f8f3 	bl	800a338 <USBD_CtlError>
            return;
 800a152:	e012      	b.n	800a17a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 f99a 	bl	800a48e <USBD_CtlSendStatus>
        break;
 800a15a:	e00e      	b.n	800a17a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 f996 	bl	800a48e <USBD_CtlSendStatus>
        break;
 800a162:	e00a      	b.n	800a17a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a164:	6839      	ldr	r1, [r7, #0]
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 f8e6 	bl	800a338 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a16c:	4b04      	ldr	r3, [pc, #16]	; (800a180 <USBD_SetConfig+0x118>)
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	4619      	mov	r1, r3
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f7ff f9a9 	bl	80094ca <USBD_ClrClassConfig>
        break;
 800a178:	bf00      	nop
    }
  }
}
 800a17a:	3708      	adds	r7, #8
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	2000039c 	.word	0x2000039c

0800a184 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	88db      	ldrh	r3, [r3, #6]
 800a192:	2b01      	cmp	r3, #1
 800a194:	d004      	beq.n	800a1a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a196:	6839      	ldr	r1, [r7, #0]
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 f8cd 	bl	800a338 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a19e:	e022      	b.n	800a1e6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	dc02      	bgt.n	800a1b0 <USBD_GetConfig+0x2c>
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	dc03      	bgt.n	800a1b6 <USBD_GetConfig+0x32>
 800a1ae:	e015      	b.n	800a1dc <USBD_GetConfig+0x58>
 800a1b0:	2b03      	cmp	r3, #3
 800a1b2:	d00b      	beq.n	800a1cc <USBD_GetConfig+0x48>
 800a1b4:	e012      	b.n	800a1dc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	3308      	adds	r3, #8
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 f922 	bl	800a40e <USBD_CtlSendData>
        break;
 800a1ca:	e00c      	b.n	800a1e6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	3304      	adds	r3, #4
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 f91a 	bl	800a40e <USBD_CtlSendData>
        break;
 800a1da:	e004      	b.n	800a1e6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a1dc:	6839      	ldr	r1, [r7, #0]
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 f8aa 	bl	800a338 <USBD_CtlError>
        break;
 800a1e4:	bf00      	nop
}
 800a1e6:	bf00      	nop
 800a1e8:	3708      	adds	r7, #8
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b082      	sub	sp, #8
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
 800a1f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1fe:	3b01      	subs	r3, #1
 800a200:	2b02      	cmp	r3, #2
 800a202:	d81e      	bhi.n	800a242 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	88db      	ldrh	r3, [r3, #6]
 800a208:	2b02      	cmp	r3, #2
 800a20a:	d004      	beq.n	800a216 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a20c:	6839      	ldr	r1, [r7, #0]
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 f892 	bl	800a338 <USBD_CtlError>
        break;
 800a214:	e01a      	b.n	800a24c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2201      	movs	r2, #1
 800a21a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a222:	2b00      	cmp	r3, #0
 800a224:	d005      	beq.n	800a232 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	68db      	ldr	r3, [r3, #12]
 800a22a:	f043 0202 	orr.w	r2, r3, #2
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	330c      	adds	r3, #12
 800a236:	2202      	movs	r2, #2
 800a238:	4619      	mov	r1, r3
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 f8e7 	bl	800a40e <USBD_CtlSendData>
      break;
 800a240:	e004      	b.n	800a24c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a242:	6839      	ldr	r1, [r7, #0]
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 f877 	bl	800a338 <USBD_CtlError>
      break;
 800a24a:	bf00      	nop
  }
}
 800a24c:	bf00      	nop
 800a24e:	3708      	adds	r7, #8
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	885b      	ldrh	r3, [r3, #2]
 800a262:	2b01      	cmp	r3, #1
 800a264:	d106      	bne.n	800a274 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2201      	movs	r2, #1
 800a26a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 f90d 	bl	800a48e <USBD_CtlSendStatus>
  }
}
 800a274:	bf00      	nop
 800a276:	3708      	adds	r7, #8
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a28c:	3b01      	subs	r3, #1
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d80b      	bhi.n	800a2aa <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	885b      	ldrh	r3, [r3, #2]
 800a296:	2b01      	cmp	r3, #1
 800a298:	d10c      	bne.n	800a2b4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 f8f3 	bl	800a48e <USBD_CtlSendStatus>
      }
      break;
 800a2a8:	e004      	b.n	800a2b4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a2aa:	6839      	ldr	r1, [r7, #0]
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 f843 	bl	800a338 <USBD_CtlError>
      break;
 800a2b2:	e000      	b.n	800a2b6 <USBD_ClrFeature+0x3a>
      break;
 800a2b4:	bf00      	nop
  }
}
 800a2b6:	bf00      	nop
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a2be:	b480      	push	{r7}
 800a2c0:	b083      	sub	sp, #12
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
 800a2c6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	781a      	ldrb	r2, [r3, #0]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	785a      	ldrb	r2, [r3, #1]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	3302      	adds	r3, #2
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	b29a      	uxth	r2, r3
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	3303      	adds	r3, #3
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	021b      	lsls	r3, r3, #8
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	4413      	add	r3, r2
 800a2ee:	b29a      	uxth	r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	3304      	adds	r3, #4
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	b29a      	uxth	r2, r3
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	3305      	adds	r3, #5
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	b29b      	uxth	r3, r3
 800a304:	021b      	lsls	r3, r3, #8
 800a306:	b29b      	uxth	r3, r3
 800a308:	4413      	add	r3, r2
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	3306      	adds	r3, #6
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	b29a      	uxth	r2, r3
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	3307      	adds	r3, #7
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	b29b      	uxth	r3, r3
 800a320:	021b      	lsls	r3, r3, #8
 800a322:	b29b      	uxth	r3, r3
 800a324:	4413      	add	r3, r2
 800a326:	b29a      	uxth	r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	80da      	strh	r2, [r3, #6]

}
 800a32c:	bf00      	nop
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a342:	2180      	movs	r1, #128	; 0x80
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 fb8f 	bl	800aa68 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a34a:	2100      	movs	r1, #0
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 fb8b 	bl	800aa68 <USBD_LL_StallEP>
}
 800a352:	bf00      	nop
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b086      	sub	sp, #24
 800a35e:	af00      	add	r7, sp, #0
 800a360:	60f8      	str	r0, [r7, #12]
 800a362:	60b9      	str	r1, [r7, #8]
 800a364:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a366:	2300      	movs	r3, #0
 800a368:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d032      	beq.n	800a3d6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	f000 f834 	bl	800a3de <USBD_GetLen>
 800a376:	4603      	mov	r3, r0
 800a378:	3301      	adds	r3, #1
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	005b      	lsls	r3, r3, #1
 800a37e:	b29a      	uxth	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a384:	7dfb      	ldrb	r3, [r7, #23]
 800a386:	1c5a      	adds	r2, r3, #1
 800a388:	75fa      	strb	r2, [r7, #23]
 800a38a:	461a      	mov	r2, r3
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	4413      	add	r3, r2
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	7812      	ldrb	r2, [r2, #0]
 800a394:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a396:	7dfb      	ldrb	r3, [r7, #23]
 800a398:	1c5a      	adds	r2, r3, #1
 800a39a:	75fa      	strb	r2, [r7, #23]
 800a39c:	461a      	mov	r2, r3
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	2203      	movs	r2, #3
 800a3a4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a3a6:	e012      	b.n	800a3ce <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	1c5a      	adds	r2, r3, #1
 800a3ac:	60fa      	str	r2, [r7, #12]
 800a3ae:	7dfa      	ldrb	r2, [r7, #23]
 800a3b0:	1c51      	adds	r1, r2, #1
 800a3b2:	75f9      	strb	r1, [r7, #23]
 800a3b4:	4611      	mov	r1, r2
 800a3b6:	68ba      	ldr	r2, [r7, #8]
 800a3b8:	440a      	add	r2, r1
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a3be:	7dfb      	ldrb	r3, [r7, #23]
 800a3c0:	1c5a      	adds	r2, r3, #1
 800a3c2:	75fa      	strb	r2, [r7, #23]
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1e8      	bne.n	800a3a8 <USBD_GetString+0x4e>
    }
  }
}
 800a3d6:	bf00      	nop
 800a3d8:	3718      	adds	r7, #24
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a3de:	b480      	push	{r7}
 800a3e0:	b085      	sub	sp, #20
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a3ea:	e005      	b.n	800a3f8 <USBD_GetLen+0x1a>
  {
    len++;
 800a3ec:	7bfb      	ldrb	r3, [r7, #15]
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d1f5      	bne.n	800a3ec <USBD_GetLen+0xe>
  }

  return len;
 800a400:	7bfb      	ldrb	r3, [r7, #15]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3714      	adds	r7, #20
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr

0800a40e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b084      	sub	sp, #16
 800a412:	af00      	add	r7, sp, #0
 800a414:	60f8      	str	r0, [r7, #12]
 800a416:	60b9      	str	r1, [r7, #8]
 800a418:	4613      	mov	r3, r2
 800a41a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2202      	movs	r2, #2
 800a420:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a424:	88fa      	ldrh	r2, [r7, #6]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a42a:	88fa      	ldrh	r2, [r7, #6]
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a430:	88fb      	ldrh	r3, [r7, #6]
 800a432:	68ba      	ldr	r2, [r7, #8]
 800a434:	2100      	movs	r1, #0
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	f000 fba0 	bl	800ab7c <USBD_LL_Transmit>

  return USBD_OK;
 800a43c:	2300      	movs	r3, #0
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a446:	b580      	push	{r7, lr}
 800a448:	b084      	sub	sp, #16
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	60f8      	str	r0, [r7, #12]
 800a44e:	60b9      	str	r1, [r7, #8]
 800a450:	4613      	mov	r3, r2
 800a452:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a454:	88fb      	ldrh	r3, [r7, #6]
 800a456:	68ba      	ldr	r2, [r7, #8]
 800a458:	2100      	movs	r1, #0
 800a45a:	68f8      	ldr	r0, [r7, #12]
 800a45c:	f000 fb8e 	bl	800ab7c <USBD_LL_Transmit>

  return USBD_OK;
 800a460:	2300      	movs	r3, #0
}
 800a462:	4618      	mov	r0, r3
 800a464:	3710      	adds	r7, #16
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}

0800a46a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a46a:	b580      	push	{r7, lr}
 800a46c:	b084      	sub	sp, #16
 800a46e:	af00      	add	r7, sp, #0
 800a470:	60f8      	str	r0, [r7, #12]
 800a472:	60b9      	str	r1, [r7, #8]
 800a474:	4613      	mov	r3, r2
 800a476:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a478:	88fb      	ldrh	r3, [r7, #6]
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	2100      	movs	r1, #0
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f000 fb9f 	bl	800abc2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a484:	2300      	movs	r3, #0
}
 800a486:	4618      	mov	r0, r3
 800a488:	3710      	adds	r7, #16
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b082      	sub	sp, #8
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2204      	movs	r2, #4
 800a49a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a49e:	2300      	movs	r3, #0
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	2100      	movs	r1, #0
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 fb69 	bl	800ab7c <USBD_LL_Transmit>

  return USBD_OK;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3708      	adds	r7, #8
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2205      	movs	r2, #5
 800a4c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	2100      	movs	r1, #0
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 fb79 	bl	800abc2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3708      	adds	r7, #8
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
	...

0800a4dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	490e      	ldr	r1, [pc, #56]	; (800a51c <MX_USB_DEVICE_Init+0x40>)
 800a4e4:	480e      	ldr	r0, [pc, #56]	; (800a520 <MX_USB_DEVICE_Init+0x44>)
 800a4e6:	f7fe ff75 	bl	80093d4 <USBD_Init>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d001      	beq.n	800a4f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a4f0:	f7f6 fc1c 	bl	8000d2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800a4f4:	490b      	ldr	r1, [pc, #44]	; (800a524 <MX_USB_DEVICE_Init+0x48>)
 800a4f6:	480a      	ldr	r0, [pc, #40]	; (800a520 <MX_USB_DEVICE_Init+0x44>)
 800a4f8:	f7fe ff97 	bl	800942a <USBD_RegisterClass>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d001      	beq.n	800a506 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a502:	f7f6 fc13 	bl	8000d2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a506:	4806      	ldr	r0, [pc, #24]	; (800a520 <MX_USB_DEVICE_Init+0x44>)
 800a508:	f7fe ffa9 	bl	800945e <USBD_Start>
 800a50c:	4603      	mov	r3, r0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d001      	beq.n	800a516 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800a512:	f7f6 fc0b 	bl	8000d2c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a516:	bf00      	nop
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	20000114 	.word	0x20000114
 800a520:	200003a0 	.word	0x200003a0
 800a524:	2000000c 	.word	0x2000000c

0800a528 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	4603      	mov	r3, r0
 800a530:	6039      	str	r1, [r7, #0]
 800a532:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	2212      	movs	r2, #18
 800a538:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a53a:	4b03      	ldr	r3, [pc, #12]	; (800a548 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr
 800a548:	20000130 	.word	0x20000130

0800a54c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	4603      	mov	r3, r0
 800a554:	6039      	str	r1, [r7, #0]
 800a556:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	2204      	movs	r2, #4
 800a55c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a55e:	4b03      	ldr	r3, [pc, #12]	; (800a56c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a560:	4618      	mov	r0, r3
 800a562:	370c      	adds	r7, #12
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr
 800a56c:	20000144 	.word	0x20000144

0800a570 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
 800a576:	4603      	mov	r3, r0
 800a578:	6039      	str	r1, [r7, #0]
 800a57a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a57c:	79fb      	ldrb	r3, [r7, #7]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d105      	bne.n	800a58e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	4907      	ldr	r1, [pc, #28]	; (800a5a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a586:	4808      	ldr	r0, [pc, #32]	; (800a5a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a588:	f7ff fee7 	bl	800a35a <USBD_GetString>
 800a58c:	e004      	b.n	800a598 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a58e:	683a      	ldr	r2, [r7, #0]
 800a590:	4904      	ldr	r1, [pc, #16]	; (800a5a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a592:	4805      	ldr	r0, [pc, #20]	; (800a5a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a594:	f7ff fee1 	bl	800a35a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a598:	4b02      	ldr	r3, [pc, #8]	; (800a5a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	20000664 	.word	0x20000664
 800a5a8:	0800ad28 	.word	0x0800ad28

0800a5ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	6039      	str	r1, [r7, #0]
 800a5b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a5b8:	683a      	ldr	r2, [r7, #0]
 800a5ba:	4904      	ldr	r1, [pc, #16]	; (800a5cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a5bc:	4804      	ldr	r0, [pc, #16]	; (800a5d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a5be:	f7ff fecc 	bl	800a35a <USBD_GetString>
  return USBD_StrDesc;
 800a5c2:	4b02      	ldr	r3, [pc, #8]	; (800a5cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3708      	adds	r7, #8
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}
 800a5cc:	20000664 	.word	0x20000664
 800a5d0:	0800ad40 	.word	0x0800ad40

0800a5d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	4603      	mov	r3, r0
 800a5dc:	6039      	str	r1, [r7, #0]
 800a5de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	221a      	movs	r2, #26
 800a5e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a5e6:	f000 f843 	bl	800a670 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a5ea:	4b02      	ldr	r3, [pc, #8]	; (800a5f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3708      	adds	r7, #8
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	20000148 	.word	0x20000148

0800a5f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	4603      	mov	r3, r0
 800a600:	6039      	str	r1, [r7, #0]
 800a602:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a604:	79fb      	ldrb	r3, [r7, #7]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d105      	bne.n	800a616 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a60a:	683a      	ldr	r2, [r7, #0]
 800a60c:	4907      	ldr	r1, [pc, #28]	; (800a62c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a60e:	4808      	ldr	r0, [pc, #32]	; (800a630 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a610:	f7ff fea3 	bl	800a35a <USBD_GetString>
 800a614:	e004      	b.n	800a620 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a616:	683a      	ldr	r2, [r7, #0]
 800a618:	4904      	ldr	r1, [pc, #16]	; (800a62c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a61a:	4805      	ldr	r0, [pc, #20]	; (800a630 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a61c:	f7ff fe9d 	bl	800a35a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a620:	4b02      	ldr	r3, [pc, #8]	; (800a62c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a622:	4618      	mov	r0, r3
 800a624:	3708      	adds	r7, #8
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	20000664 	.word	0x20000664
 800a630:	0800ad54 	.word	0x0800ad54

0800a634 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	4603      	mov	r3, r0
 800a63c:	6039      	str	r1, [r7, #0]
 800a63e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a640:	79fb      	ldrb	r3, [r7, #7]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d105      	bne.n	800a652 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	4907      	ldr	r1, [pc, #28]	; (800a668 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a64a:	4808      	ldr	r0, [pc, #32]	; (800a66c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a64c:	f7ff fe85 	bl	800a35a <USBD_GetString>
 800a650:	e004      	b.n	800a65c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a652:	683a      	ldr	r2, [r7, #0]
 800a654:	4904      	ldr	r1, [pc, #16]	; (800a668 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a656:	4805      	ldr	r0, [pc, #20]	; (800a66c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a658:	f7ff fe7f 	bl	800a35a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a65c:	4b02      	ldr	r3, [pc, #8]	; (800a668 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3708      	adds	r7, #8
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
 800a666:	bf00      	nop
 800a668:	20000664 	.word	0x20000664
 800a66c:	0800ad60 	.word	0x0800ad60

0800a670 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a676:	4b0f      	ldr	r3, [pc, #60]	; (800a6b4 <Get_SerialNum+0x44>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a67c:	4b0e      	ldr	r3, [pc, #56]	; (800a6b8 <Get_SerialNum+0x48>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a682:	4b0e      	ldr	r3, [pc, #56]	; (800a6bc <Get_SerialNum+0x4c>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a688:	68fa      	ldr	r2, [r7, #12]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4413      	add	r3, r2
 800a68e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d009      	beq.n	800a6aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a696:	2208      	movs	r2, #8
 800a698:	4909      	ldr	r1, [pc, #36]	; (800a6c0 <Get_SerialNum+0x50>)
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f000 f814 	bl	800a6c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a6a0:	2204      	movs	r2, #4
 800a6a2:	4908      	ldr	r1, [pc, #32]	; (800a6c4 <Get_SerialNum+0x54>)
 800a6a4:	68b8      	ldr	r0, [r7, #8]
 800a6a6:	f000 f80f 	bl	800a6c8 <IntToUnicode>
  }
}
 800a6aa:	bf00      	nop
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	1ffff7ac 	.word	0x1ffff7ac
 800a6b8:	1ffff7b0 	.word	0x1ffff7b0
 800a6bc:	1ffff7b4 	.word	0x1ffff7b4
 800a6c0:	2000014a 	.word	0x2000014a
 800a6c4:	2000015a 	.word	0x2000015a

0800a6c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b087      	sub	sp, #28
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a6da:	2300      	movs	r3, #0
 800a6dc:	75fb      	strb	r3, [r7, #23]
 800a6de:	e027      	b.n	800a730 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	0f1b      	lsrs	r3, r3, #28
 800a6e4:	2b09      	cmp	r3, #9
 800a6e6:	d80b      	bhi.n	800a700 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	0f1b      	lsrs	r3, r3, #28
 800a6ec:	b2da      	uxtb	r2, r3
 800a6ee:	7dfb      	ldrb	r3, [r7, #23]
 800a6f0:	005b      	lsls	r3, r3, #1
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	440b      	add	r3, r1
 800a6f8:	3230      	adds	r2, #48	; 0x30
 800a6fa:	b2d2      	uxtb	r2, r2
 800a6fc:	701a      	strb	r2, [r3, #0]
 800a6fe:	e00a      	b.n	800a716 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	0f1b      	lsrs	r3, r3, #28
 800a704:	b2da      	uxtb	r2, r3
 800a706:	7dfb      	ldrb	r3, [r7, #23]
 800a708:	005b      	lsls	r3, r3, #1
 800a70a:	4619      	mov	r1, r3
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	440b      	add	r3, r1
 800a710:	3237      	adds	r2, #55	; 0x37
 800a712:	b2d2      	uxtb	r2, r2
 800a714:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	011b      	lsls	r3, r3, #4
 800a71a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a71c:	7dfb      	ldrb	r3, [r7, #23]
 800a71e:	005b      	lsls	r3, r3, #1
 800a720:	3301      	adds	r3, #1
 800a722:	68ba      	ldr	r2, [r7, #8]
 800a724:	4413      	add	r3, r2
 800a726:	2200      	movs	r2, #0
 800a728:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a72a:	7dfb      	ldrb	r3, [r7, #23]
 800a72c:	3301      	adds	r3, #1
 800a72e:	75fb      	strb	r3, [r7, #23]
 800a730:	7dfa      	ldrb	r2, [r7, #23]
 800a732:	79fb      	ldrb	r3, [r7, #7]
 800a734:	429a      	cmp	r2, r3
 800a736:	d3d3      	bcc.n	800a6e0 <IntToUnicode+0x18>
  }
}
 800a738:	bf00      	nop
 800a73a:	bf00      	nop
 800a73c:	371c      	adds	r7, #28
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr
	...

0800a748 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b08a      	sub	sp, #40	; 0x28
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a750:	f107 0314 	add.w	r3, r7, #20
 800a754:	2200      	movs	r2, #0
 800a756:	601a      	str	r2, [r3, #0]
 800a758:	605a      	str	r2, [r3, #4]
 800a75a:	609a      	str	r2, [r3, #8]
 800a75c:	60da      	str	r2, [r3, #12]
 800a75e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a1c      	ldr	r2, [pc, #112]	; (800a7d8 <HAL_PCD_MspInit+0x90>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d131      	bne.n	800a7ce <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a76a:	4b1c      	ldr	r3, [pc, #112]	; (800a7dc <HAL_PCD_MspInit+0x94>)
 800a76c:	695b      	ldr	r3, [r3, #20]
 800a76e:	4a1b      	ldr	r2, [pc, #108]	; (800a7dc <HAL_PCD_MspInit+0x94>)
 800a770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a774:	6153      	str	r3, [r2, #20]
 800a776:	4b19      	ldr	r3, [pc, #100]	; (800a7dc <HAL_PCD_MspInit+0x94>)
 800a778:	695b      	ldr	r3, [r3, #20]
 800a77a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a77e:	613b      	str	r3, [r7, #16]
 800a780:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800a782:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a788:	2302      	movs	r3, #2
 800a78a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a78c:	2300      	movs	r3, #0
 800a78e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a790:	2303      	movs	r3, #3
 800a792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800a794:	230e      	movs	r3, #14
 800a796:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a798:	f107 0314 	add.w	r3, r7, #20
 800a79c:	4619      	mov	r1, r3
 800a79e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a7a2:	f7f6 fe71 	bl	8001488 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a7a6:	4b0d      	ldr	r3, [pc, #52]	; (800a7dc <HAL_PCD_MspInit+0x94>)
 800a7a8:	69db      	ldr	r3, [r3, #28]
 800a7aa:	4a0c      	ldr	r2, [pc, #48]	; (800a7dc <HAL_PCD_MspInit+0x94>)
 800a7ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a7b0:	61d3      	str	r3, [r2, #28]
 800a7b2:	4b0a      	ldr	r3, [pc, #40]	; (800a7dc <HAL_PCD_MspInit+0x94>)
 800a7b4:	69db      	ldr	r3, [r3, #28]
 800a7b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a7ba:	60fb      	str	r3, [r7, #12]
 800a7bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800a7be:	2200      	movs	r2, #0
 800a7c0:	2100      	movs	r1, #0
 800a7c2:	2014      	movs	r0, #20
 800a7c4:	f7f6 fe29 	bl	800141a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800a7c8:	2014      	movs	r0, #20
 800a7ca:	f7f6 fe42 	bl	8001452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a7ce:	bf00      	nop
 800a7d0:	3728      	adds	r7, #40	; 0x28
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	40005c00 	.word	0x40005c00
 800a7dc:	40021000 	.word	0x40021000

0800a7e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	4610      	mov	r0, r2
 800a7f8:	f7fe fe7a 	bl	80094f0 <USBD_LL_SetupStage>
}
 800a7fc:	bf00      	nop
 800a7fe:	3708      	adds	r7, #8
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	460b      	mov	r3, r1
 800a80e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a816:	78fa      	ldrb	r2, [r7, #3]
 800a818:	6879      	ldr	r1, [r7, #4]
 800a81a:	4613      	mov	r3, r2
 800a81c:	009b      	lsls	r3, r3, #2
 800a81e:	4413      	add	r3, r2
 800a820:	00db      	lsls	r3, r3, #3
 800a822:	440b      	add	r3, r1
 800a824:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	78fb      	ldrb	r3, [r7, #3]
 800a82c:	4619      	mov	r1, r3
 800a82e:	f7fe feac 	bl	800958a <USBD_LL_DataOutStage>
}
 800a832:	bf00      	nop
 800a834:	3708      	adds	r7, #8
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b082      	sub	sp, #8
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
 800a842:	460b      	mov	r3, r1
 800a844:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a84c:	78fa      	ldrb	r2, [r7, #3]
 800a84e:	6879      	ldr	r1, [r7, #4]
 800a850:	4613      	mov	r3, r2
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	4413      	add	r3, r2
 800a856:	00db      	lsls	r3, r3, #3
 800a858:	440b      	add	r3, r1
 800a85a:	333c      	adds	r3, #60	; 0x3c
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	78fb      	ldrb	r3, [r7, #3]
 800a860:	4619      	mov	r1, r3
 800a862:	f7fe ff03 	bl	800966c <USBD_LL_DataInStage>
}
 800a866:	bf00      	nop
 800a868:	3708      	adds	r7, #8
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a86e:	b580      	push	{r7, lr}
 800a870:	b082      	sub	sp, #8
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7ff f816 	bl	80098ae <USBD_LL_SOF>
}
 800a882:	bf00      	nop
 800a884:	3708      	adds	r7, #8
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}

0800a88a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b084      	sub	sp, #16
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a892:	2301      	movs	r3, #1
 800a894:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	689b      	ldr	r3, [r3, #8]
 800a89a:	2b02      	cmp	r3, #2
 800a89c:	d001      	beq.n	800a8a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a89e:	f7f6 fa45 	bl	8000d2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a8a8:	7bfa      	ldrb	r2, [r7, #15]
 800a8aa:	4611      	mov	r1, r2
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7fe ffc3 	bl	8009838 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f7fe ff7c 	bl	80097b6 <USBD_LL_Reset>
}
 800a8be:	bf00      	nop
 800a8c0:	3710      	adds	r7, #16
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
	...

0800a8c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7fe ffbe 	bl	8009858 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	699b      	ldr	r3, [r3, #24]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d005      	beq.n	800a8f0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a8e4:	4b04      	ldr	r3, [pc, #16]	; (800a8f8 <HAL_PCD_SuspendCallback+0x30>)
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	4a03      	ldr	r2, [pc, #12]	; (800a8f8 <HAL_PCD_SuspendCallback+0x30>)
 800a8ea:	f043 0306 	orr.w	r3, r3, #6
 800a8ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a8f0:	bf00      	nop
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	e000ed00 	.word	0xe000ed00

0800a8fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7fe ffb9 	bl	8009882 <USBD_LL_Resume>
}
 800a910:	bf00      	nop
 800a912:	3708      	adds	r7, #8
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a920:	4a1f      	ldr	r2, [pc, #124]	; (800a9a0 <USBD_LL_Init+0x88>)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4a1d      	ldr	r2, [pc, #116]	; (800a9a0 <USBD_LL_Init+0x88>)
 800a92c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a930:	4b1b      	ldr	r3, [pc, #108]	; (800a9a0 <USBD_LL_Init+0x88>)
 800a932:	4a1c      	ldr	r2, [pc, #112]	; (800a9a4 <USBD_LL_Init+0x8c>)
 800a934:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a936:	4b1a      	ldr	r3, [pc, #104]	; (800a9a0 <USBD_LL_Init+0x88>)
 800a938:	2208      	movs	r2, #8
 800a93a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a93c:	4b18      	ldr	r3, [pc, #96]	; (800a9a0 <USBD_LL_Init+0x88>)
 800a93e:	2202      	movs	r2, #2
 800a940:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a942:	4b17      	ldr	r3, [pc, #92]	; (800a9a0 <USBD_LL_Init+0x88>)
 800a944:	2202      	movs	r2, #2
 800a946:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a948:	4b15      	ldr	r3, [pc, #84]	; (800a9a0 <USBD_LL_Init+0x88>)
 800a94a:	2200      	movs	r2, #0
 800a94c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a94e:	4b14      	ldr	r3, [pc, #80]	; (800a9a0 <USBD_LL_Init+0x88>)
 800a950:	2200      	movs	r2, #0
 800a952:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a954:	4812      	ldr	r0, [pc, #72]	; (800a9a0 <USBD_LL_Init+0x88>)
 800a956:	f7f7 f869 	bl	8001a2c <HAL_PCD_Init>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d001      	beq.n	800a964 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a960:	f7f6 f9e4 	bl	8000d2c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a96a:	2318      	movs	r3, #24
 800a96c:	2200      	movs	r2, #0
 800a96e:	2100      	movs	r1, #0
 800a970:	f7f8 fcda 	bl	8003328 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a97a:	2358      	movs	r3, #88	; 0x58
 800a97c:	2200      	movs	r2, #0
 800a97e:	2180      	movs	r1, #128	; 0x80
 800a980:	f7f8 fcd2 	bl	8003328 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a98a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a98e:	2200      	movs	r2, #0
 800a990:	2181      	movs	r1, #129	; 0x81
 800a992:	f7f8 fcc9 	bl	8003328 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800a996:	2300      	movs	r3, #0
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3708      	adds	r7, #8
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}
 800a9a0:	20000864 	.word	0x20000864
 800a9a4:	40005c00 	.word	0x40005c00

0800a9a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7f7 f906 	bl	8001bd0 <HAL_PCD_Start>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9c8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f000 f940 	bl	800ac50 <USBD_Get_USB_Status>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3710      	adds	r7, #16
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}

0800a9de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b084      	sub	sp, #16
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
 800a9e6:	4608      	mov	r0, r1
 800a9e8:	4611      	mov	r1, r2
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	70fb      	strb	r3, [r7, #3]
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	70bb      	strb	r3, [r7, #2]
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa06:	78bb      	ldrb	r3, [r7, #2]
 800aa08:	883a      	ldrh	r2, [r7, #0]
 800aa0a:	78f9      	ldrb	r1, [r7, #3]
 800aa0c:	f7f7 f9ff 	bl	8001e0e <HAL_PCD_EP_Open>
 800aa10:	4603      	mov	r3, r0
 800aa12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa14:	7bfb      	ldrb	r3, [r7, #15]
 800aa16:	4618      	mov	r0, r3
 800aa18:	f000 f91a 	bl	800ac50 <USBD_Get_USB_Status>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa20:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b084      	sub	sp, #16
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
 800aa32:	460b      	mov	r3, r1
 800aa34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa36:	2300      	movs	r3, #0
 800aa38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa44:	78fa      	ldrb	r2, [r7, #3]
 800aa46:	4611      	mov	r1, r2
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7f7 fa3d 	bl	8001ec8 <HAL_PCD_EP_Close>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa52:	7bfb      	ldrb	r3, [r7, #15]
 800aa54:	4618      	mov	r0, r3
 800aa56:	f000 f8fb 	bl	800ac50 <USBD_Get_USB_Status>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3710      	adds	r7, #16
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	460b      	mov	r3, r1
 800aa72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa74:	2300      	movs	r3, #0
 800aa76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa82:	78fa      	ldrb	r2, [r7, #3]
 800aa84:	4611      	mov	r1, r2
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7f7 face 	bl	8002028 <HAL_PCD_EP_SetStall>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa90:	7bfb      	ldrb	r3, [r7, #15]
 800aa92:	4618      	mov	r0, r3
 800aa94:	f000 f8dc 	bl	800ac50 <USBD_Get_USB_Status>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3710      	adds	r7, #16
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b084      	sub	sp, #16
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
 800aaae:	460b      	mov	r3, r1
 800aab0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aab2:	2300      	movs	r3, #0
 800aab4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aab6:	2300      	movs	r3, #0
 800aab8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aac0:	78fa      	ldrb	r2, [r7, #3]
 800aac2:	4611      	mov	r1, r2
 800aac4:	4618      	mov	r0, r3
 800aac6:	f7f7 fb01 	bl	80020cc <HAL_PCD_EP_ClrStall>
 800aaca:	4603      	mov	r3, r0
 800aacc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aace:	7bfb      	ldrb	r3, [r7, #15]
 800aad0:	4618      	mov	r0, r3
 800aad2:	f000 f8bd 	bl	800ac50 <USBD_Get_USB_Status>
 800aad6:	4603      	mov	r3, r0
 800aad8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aada:	7bbb      	ldrb	r3, [r7, #14]
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3710      	adds	r7, #16
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b085      	sub	sp, #20
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	460b      	mov	r3, r1
 800aaee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aaf6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aaf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	da0c      	bge.n	800ab1a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ab00:	78fb      	ldrb	r3, [r7, #3]
 800ab02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab06:	68f9      	ldr	r1, [r7, #12]
 800ab08:	1c5a      	adds	r2, r3, #1
 800ab0a:	4613      	mov	r3, r2
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	4413      	add	r3, r2
 800ab10:	00db      	lsls	r3, r3, #3
 800ab12:	440b      	add	r3, r1
 800ab14:	3302      	adds	r3, #2
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	e00b      	b.n	800ab32 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ab1a:	78fb      	ldrb	r3, [r7, #3]
 800ab1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab20:	68f9      	ldr	r1, [r7, #12]
 800ab22:	4613      	mov	r3, r2
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	4413      	add	r3, r2
 800ab28:	00db      	lsls	r3, r3, #3
 800ab2a:	440b      	add	r3, r1
 800ab2c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ab30:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3714      	adds	r7, #20
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr

0800ab3e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b084      	sub	sp, #16
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
 800ab46:	460b      	mov	r3, r1
 800ab48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab58:	78fa      	ldrb	r2, [r7, #3]
 800ab5a:	4611      	mov	r1, r2
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7f7 f931 	bl	8001dc4 <HAL_PCD_SetAddress>
 800ab62:	4603      	mov	r3, r0
 800ab64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab66:	7bfb      	ldrb	r3, [r7, #15]
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f000 f871 	bl	800ac50 <USBD_Get_USB_Status>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab72:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3710      	adds	r7, #16
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b086      	sub	sp, #24
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	607a      	str	r2, [r7, #4]
 800ab86:	461a      	mov	r2, r3
 800ab88:	460b      	mov	r3, r1
 800ab8a:	72fb      	strb	r3, [r7, #11]
 800ab8c:	4613      	mov	r3, r2
 800ab8e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab90:	2300      	movs	r3, #0
 800ab92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab94:	2300      	movs	r3, #0
 800ab96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab9e:	893b      	ldrh	r3, [r7, #8]
 800aba0:	7af9      	ldrb	r1, [r7, #11]
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	f7f7 fa09 	bl	8001fba <HAL_PCD_EP_Transmit>
 800aba8:	4603      	mov	r3, r0
 800abaa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abac:	7dfb      	ldrb	r3, [r7, #23]
 800abae:	4618      	mov	r0, r3
 800abb0:	f000 f84e 	bl	800ac50 <USBD_Get_USB_Status>
 800abb4:	4603      	mov	r3, r0
 800abb6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800abb8:	7dbb      	ldrb	r3, [r7, #22]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3718      	adds	r7, #24
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b086      	sub	sp, #24
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	60f8      	str	r0, [r7, #12]
 800abca:	607a      	str	r2, [r7, #4]
 800abcc:	461a      	mov	r2, r3
 800abce:	460b      	mov	r3, r1
 800abd0:	72fb      	strb	r3, [r7, #11]
 800abd2:	4613      	mov	r3, r2
 800abd4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abd6:	2300      	movs	r3, #0
 800abd8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abda:	2300      	movs	r3, #0
 800abdc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abe4:	893b      	ldrh	r3, [r7, #8]
 800abe6:	7af9      	ldrb	r1, [r7, #11]
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	f7f7 f9b5 	bl	8001f58 <HAL_PCD_EP_Receive>
 800abee:	4603      	mov	r3, r0
 800abf0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abf2:	7dfb      	ldrb	r3, [r7, #23]
 800abf4:	4618      	mov	r0, r3
 800abf6:	f000 f82b 	bl	800ac50 <USBD_Get_USB_Status>
 800abfa:	4603      	mov	r3, r0
 800abfc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800abfe:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3718      	adds	r7, #24
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ac10:	4b03      	ldr	r3, [pc, #12]	; (800ac20 <USBD_static_malloc+0x18>)
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	370c      	adds	r7, #12
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop
 800ac20:	20000b50 	.word	0x20000b50

0800ac24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]

}
 800ac2c:	bf00      	nop
 800ac2e:	370c      	adds	r7, #12
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	460b      	mov	r3, r1
 800ac42:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ac44:	bf00      	nop
 800ac46:	370c      	adds	r7, #12
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b085      	sub	sp, #20
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	4603      	mov	r3, r0
 800ac58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ac5e:	79fb      	ldrb	r3, [r7, #7]
 800ac60:	2b03      	cmp	r3, #3
 800ac62:	d817      	bhi.n	800ac94 <USBD_Get_USB_Status+0x44>
 800ac64:	a201      	add	r2, pc, #4	; (adr r2, 800ac6c <USBD_Get_USB_Status+0x1c>)
 800ac66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac6a:	bf00      	nop
 800ac6c:	0800ac7d 	.word	0x0800ac7d
 800ac70:	0800ac83 	.word	0x0800ac83
 800ac74:	0800ac89 	.word	0x0800ac89
 800ac78:	0800ac8f 	.word	0x0800ac8f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	73fb      	strb	r3, [r7, #15]
    break;
 800ac80:	e00b      	b.n	800ac9a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ac82:	2302      	movs	r3, #2
 800ac84:	73fb      	strb	r3, [r7, #15]
    break;
 800ac86:	e008      	b.n	800ac9a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	73fb      	strb	r3, [r7, #15]
    break;
 800ac8c:	e005      	b.n	800ac9a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac8e:	2302      	movs	r3, #2
 800ac90:	73fb      	strb	r3, [r7, #15]
    break;
 800ac92:	e002      	b.n	800ac9a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ac94:	2302      	movs	r3, #2
 800ac96:	73fb      	strb	r3, [r7, #15]
    break;
 800ac98:	bf00      	nop
  }
  return usb_status;
 800ac9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3714      	adds	r7, #20
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <__libc_init_array>:
 800aca8:	b570      	push	{r4, r5, r6, lr}
 800acaa:	4d0d      	ldr	r5, [pc, #52]	; (800ace0 <__libc_init_array+0x38>)
 800acac:	4c0d      	ldr	r4, [pc, #52]	; (800ace4 <__libc_init_array+0x3c>)
 800acae:	1b64      	subs	r4, r4, r5
 800acb0:	10a4      	asrs	r4, r4, #2
 800acb2:	2600      	movs	r6, #0
 800acb4:	42a6      	cmp	r6, r4
 800acb6:	d109      	bne.n	800accc <__libc_init_array+0x24>
 800acb8:	4d0b      	ldr	r5, [pc, #44]	; (800ace8 <__libc_init_array+0x40>)
 800acba:	4c0c      	ldr	r4, [pc, #48]	; (800acec <__libc_init_array+0x44>)
 800acbc:	f000 f820 	bl	800ad00 <_init>
 800acc0:	1b64      	subs	r4, r4, r5
 800acc2:	10a4      	asrs	r4, r4, #2
 800acc4:	2600      	movs	r6, #0
 800acc6:	42a6      	cmp	r6, r4
 800acc8:	d105      	bne.n	800acd6 <__libc_init_array+0x2e>
 800acca:	bd70      	pop	{r4, r5, r6, pc}
 800accc:	f855 3b04 	ldr.w	r3, [r5], #4
 800acd0:	4798      	blx	r3
 800acd2:	3601      	adds	r6, #1
 800acd4:	e7ee      	b.n	800acb4 <__libc_init_array+0xc>
 800acd6:	f855 3b04 	ldr.w	r3, [r5], #4
 800acda:	4798      	blx	r3
 800acdc:	3601      	adds	r6, #1
 800acde:	e7f2      	b.n	800acc6 <__libc_init_array+0x1e>
 800ace0:	0800ada8 	.word	0x0800ada8
 800ace4:	0800ada8 	.word	0x0800ada8
 800ace8:	0800ada8 	.word	0x0800ada8
 800acec:	0800adac 	.word	0x0800adac

0800acf0 <memset>:
 800acf0:	4402      	add	r2, r0
 800acf2:	4603      	mov	r3, r0
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d100      	bne.n	800acfa <memset+0xa>
 800acf8:	4770      	bx	lr
 800acfa:	f803 1b01 	strb.w	r1, [r3], #1
 800acfe:	e7f9      	b.n	800acf4 <memset+0x4>

0800ad00 <_init>:
 800ad00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad02:	bf00      	nop
 800ad04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad06:	bc08      	pop	{r3}
 800ad08:	469e      	mov	lr, r3
 800ad0a:	4770      	bx	lr

0800ad0c <_fini>:
 800ad0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad0e:	bf00      	nop
 800ad10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad12:	bc08      	pop	{r3}
 800ad14:	469e      	mov	lr, r3
 800ad16:	4770      	bx	lr
