
Force Feedback Yoke.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f56c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d8  0800f710  0800f710  00010710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fee8  0800fee8  000112e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800fee8  0800fee8  00010ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fef0  0800fef0  000112e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fef0  0800fef0  00010ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fef4  0800fef4  00010ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e4  20000000  0800fef8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ea8  200002e4  080101dc  000112e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000118c  080101dc  0001218c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000112e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e10e  00000000  00000000  00011314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e6a  00000000  00000000  0002f422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a68  00000000  00000000  00034290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001425  00000000  00000000  00035cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c1c6  00000000  00000000  0003711d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022d69  00000000  00000000  000532e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098569  00000000  00000000  0007604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e5b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fcc  00000000  00000000  0010e5f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  001165c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e4 	.word	0x200002e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f6f4 	.word	0x0800f6f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002e8 	.word	0x200002e8
 80001dc:	0800f6f4 	.word	0x0800f6f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_ldivmod>:
 8000bb8:	b97b      	cbnz	r3, 8000bda <__aeabi_ldivmod+0x22>
 8000bba:	b972      	cbnz	r2, 8000bda <__aeabi_ldivmod+0x22>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bfbe      	ittt	lt
 8000bc0:	2000      	movlt	r0, #0
 8000bc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bc6:	e006      	blt.n	8000bd6 <__aeabi_ldivmod+0x1e>
 8000bc8:	bf08      	it	eq
 8000bca:	2800      	cmpeq	r0, #0
 8000bcc:	bf1c      	itt	ne
 8000bce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000bd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd6:	f000 b9b5 	b.w	8000f44 <__aeabi_idiv0>
 8000bda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be2:	2900      	cmp	r1, #0
 8000be4:	db09      	blt.n	8000bfa <__aeabi_ldivmod+0x42>
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db1a      	blt.n	8000c20 <__aeabi_ldivmod+0x68>
 8000bea:	f000 f84d 	bl	8000c88 <__udivmoddi4>
 8000bee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf6:	b004      	add	sp, #16
 8000bf8:	4770      	bx	lr
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db1b      	blt.n	8000c3c <__aeabi_ldivmod+0x84>
 8000c04:	f000 f840 	bl	8000c88 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	4252      	negs	r2, r2
 8000c1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c1e:	4770      	bx	lr
 8000c20:	4252      	negs	r2, r2
 8000c22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c26:	f000 f82f 	bl	8000c88 <__udivmoddi4>
 8000c2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c32:	b004      	add	sp, #16
 8000c34:	4240      	negs	r0, r0
 8000c36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3a:	4770      	bx	lr
 8000c3c:	4252      	negs	r2, r2
 8000c3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c42:	f000 f821 	bl	8000c88 <__udivmoddi4>
 8000c46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4e:	b004      	add	sp, #16
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <ButtonInit>:
#include "button.h"
#include <stddef.h>

void ButtonInit(Button_t *button, int (*ButtonReadState)(Button_t *button)) {
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]

	button->ButtonReadState = ButtonReadState;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	601a      	str	r2, [r3, #0]
	button->ButtonStateChangedCallback = NULL;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]

	button->state = BUTTON_STATE_IDLE;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	741a      	strb	r2, [r3, #16]
	button->pressed = false;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	721a      	strb	r2, [r3, #8]
	button->previouslyPressed = button->pressed;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	7a1a      	ldrb	r2, [r3, #8]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	725a      	strb	r2, [r3, #9]
	button->steadyCount = 0;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	60da      	str	r2, [r3, #12]


}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <ButtonIsPressed>:

bool ButtonIsPressed(Button_t *button) {
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	return button->pressed;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7a1b      	ldrb	r3, [r3, #8]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <ButtonProcessInt>:

void ButtonProcessInt(Button_t *button) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

	// Read current state of button and check if there's a change
	bool readingPressed = button->ButtonReadState(button) == 1;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	4798      	blx	r3
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	bf0c      	ite	eq
 8000fb2:	2301      	moveq	r3, #1
 8000fb4:	2300      	movne	r3, #0
 8000fb6:	73fb      	strb	r3, [r7, #15]
	bool changedState = readingPressed != button->previouslyPressed;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7a5b      	ldrb	r3, [r3, #9]
 8000fbc:	7bfa      	ldrb	r2, [r7, #15]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	bf14      	ite	ne
 8000fc2:	2301      	movne	r3, #1
 8000fc4:	2300      	moveq	r3, #0
 8000fc6:	73bb      	strb	r3, [r7, #14]

	if(button->state == BUTTON_STATE_IDLE && changedState) {
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7c1b      	ldrb	r3, [r3, #16]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d106      	bne.n	8000fde <ButtonProcessInt+0x42>
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <ButtonProcessInt+0x42>

		button->state = BUTTON_STATE_DEBOUNCING;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	741a      	strb	r2, [r3, #16]
 8000fdc:	e028      	b.n	8001030 <ButtonProcessInt+0x94>
	}
	else if(button->state == BUTTON_STATE_DEBOUNCING) {
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7c1b      	ldrb	r3, [r3, #16]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d121      	bne.n	800102a <ButtonProcessInt+0x8e>

		if(changedState) {
 8000fe6:	7bbb      	ldrb	r3, [r7, #14]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <ButtonProcessInt+0x58>
			// Button is unsteady, reset counter
			button->steadyCount = 0;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	e01d      	b.n	8001030 <ButtonProcessInt+0x94>
		}
		else {
			button->steadyCount++;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	1c5a      	adds	r2, r3, #1
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	60da      	str	r2, [r3, #12]

			// Check if button has remained in the same state for
			// max steady count duration
			if(button->steadyCount >= BUTTON_MAX_STEADY_COUNT) {
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	2b09      	cmp	r3, #9
 8001004:	dd14      	ble.n	8001030 <ButtonProcessInt+0x94>
				// Reset counter and update button state
				button->steadyCount = 0;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
				button->pressed = readingPressed;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	721a      	strb	r2, [r3, #8]
				button->state = BUTTON_STATE_IDLE;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	741a      	strb	r2, [r3, #16]

				// Perform callback for button state changed if available
				if(button->ButtonStateChangedCallback != NULL) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d007      	beq.n	8001030 <ButtonProcessInt+0x94>
					button->ButtonStateChangedCallback(button);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	4798      	blx	r3
 8001028:	e002      	b.n	8001030 <ButtonProcessInt+0x94>
	}
	else {

		// If the button state is neither idle nor debouncing,
		// set to idle (code should not reach here)
		button->state = BUTTON_STATE_IDLE;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	741a      	strb	r2, [r3, #16]
	}

	// Update previous state for next iteration
	button->previouslyPressed = readingPressed;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	7bfa      	ldrb	r2, [r7, #15]
 8001034:	725a      	strb	r2, [r3, #9]
}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <ButtonSetStateChangedCallback>:

void ButtonSetStateChangedCallback(Button_t *button,
		void (*ButtonStateChangedCallback)(Button_t *button)) {
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	6039      	str	r1, [r7, #0]
	button->ButtonStateChangedCallback = ButtonStateChangedCallback;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	605a      	str	r2, [r3, #4]
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <delayMsInit>:

#include "delay.h"

static void(*delayMs_fptr)(uint32_t milliseconds);

void delayMsInit(void (*delayMs_func)(uint32_t milliseconds)) {
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	delayMs_fptr = delayMs_func;
 8001064:	4a04      	ldr	r2, [pc, #16]	@ (8001078 <delayMsInit+0x1c>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6013      	str	r3, [r2, #0]
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000300 	.word	0x20000300

0800107c <delayMs>:

void delayMs(uint32_t milliseconds) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	delayMs_fptr(milliseconds);
 8001084:	4b03      	ldr	r3, [pc, #12]	@ (8001094 <delayMs+0x18>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	4798      	blx	r3
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000300 	.word	0x20000300

08001098 <EncoderInit>:
 *      Author: Jennyston
 */

#include "encoder.h"

void EncoderInit(Encoder_t *encoder, EncoderInterface_t interface) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	e883 0006 	stmia.w	r3, {r1, r2}
	encoder->interface = interface;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	461a      	mov	r2, r3
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010b0:	e882 0003 	stmia.w	r2, {r0, r1}

	encoder->countPerRev = ENCODER_DEFAULT_COUNT_PER_REV;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010ba:	611a      	str	r2, [r3, #16]
	encoder->totalCount = interface.GetEncoderSensorCount(&interface);
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	1d3a      	adds	r2, r7, #4
 80010c0:	4610      	mov	r0, r2
 80010c2:	4798      	blx	r3
 80010c4:	4602      	mov	r2, r0
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	609a      	str	r2, [r3, #8]
	encoder->prevHardCount = encoder->totalCount;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	60da      	str	r2, [r3, #12]
	encoder->speed = 0;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	615a      	str	r2, [r3, #20]
}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <EncoderGetCount>:

int EncoderGetCount(Encoder_t *encoder) {
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
	return encoder->totalCount;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <EncoderSetCount>:

void EncoderSetCount(Encoder_t *encoder, int count) {
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	6039      	str	r1, [r7, #0]
	encoder->totalCount = count;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	683a      	ldr	r2, [r7, #0]
 8001108:	609a      	str	r2, [r3, #8]
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <EncoderUpdate>:

int EncoderGetCountPerRev(Encoder_t *encoder) {
	return encoder->countPerRev;
}

void EncoderUpdate(Encoder_t *encoder, float deltaTimeMs) {
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	ed87 0a00 	vstr	s0, [r7]

	int deltaCount;
	int currentHardCount =
			encoder->interface.GetEncoderSensorCount(&encoder->interface);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	4610      	mov	r0, r2
 800112a:	4798      	blx	r3
 800112c:	6138      	str	r0, [r7, #16]
	int countPerRevHalf = encoder->countPerRev/2;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	0fda      	lsrs	r2, r3, #31
 8001134:	4413      	add	r3, r2
 8001136:	105b      	asrs	r3, r3, #1
 8001138:	60fb      	str	r3, [r7, #12]

	// Calculate deltaCount based on current and previous counts
	if(currentHardCount + countPerRevHalf < encoder->prevHardCount) {
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	441a      	add	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	429a      	cmp	r2, r3
 8001146:	da08      	bge.n	800115a <EncoderUpdate+0x44>
		// Handle overflow
		deltaCount = (encoder->countPerRev - encoder->prevHardCount) +
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4413      	add	r3, r2
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	e015      	b.n	8001186 <EncoderUpdate+0x70>
				currentHardCount;
	}
	else if(currentHardCount > encoder->prevHardCount + countPerRevHalf) {
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68da      	ldr	r2, [r3, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	4413      	add	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	429a      	cmp	r2, r3
 8001166:	dd09      	ble.n	800117c <EncoderUpdate+0x66>
		// Handle underflow
		deltaCount = -((encoder->countPerRev - currentHardCount) +
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad2      	subs	r2, r2, r3
				encoder->prevHardCount);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
		deltaCount = -((encoder->countPerRev - currentHardCount) +
 8001174:	4413      	add	r3, r2
 8001176:	425b      	negs	r3, r3
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	e004      	b.n	8001186 <EncoderUpdate+0x70>
	}
	else {
		// default, simply add to total count
		deltaCount = currentHardCount - encoder->prevHardCount;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	617b      	str	r3, [r7, #20]
	}

	// Calculate and update speed
	encoder->speed = deltaCount / deltaTimeMs;
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	ee07 3a90 	vmov	s15, r3
 800118c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001190:	ed97 7a00 	vldr	s14, [r7]
 8001194:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	edc3 7a05 	vstr	s15, [r3, #20]

	// Update totalCount
	encoder->totalCount += deltaCount;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	441a      	add	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	609a      	str	r2, [r3, #8]

	// Update previous hardware count
	encoder->prevHardCount = currentHardCount;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	60da      	str	r2, [r3, #12]
}
 80011b0:	bf00      	nop
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <UpdateFFBSpeed>:
#include "utilities/utilities.h"
#include "force_feedback_controller.h"
#include "delay.h"
#include <math.h>

void UpdateFFBSpeed(FFBController_t *ffb, int dt) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
	ffb->speedDt += dt;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	441a      	add	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	629a      	str	r2, [r3, #40]	@ 0x28

	// Check if required time for speed calculation has passed
	if(ffb->speedDt >= FFB_AVG_SPEED_DT) {
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80011d6:	4293      	cmp	r3, r2
 80011d8:	dd1e      	ble.n	8001218 <UpdateFFBSpeed+0x60>
		ffb->speedDt -= FFB_AVG_SPEED_DT;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011de:	f5a3 539c 	sub.w	r3, r3, #4992	@ 0x1380
 80011e2:	3b08      	subs	r3, #8
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	6293      	str	r3, [r2, #40]	@ 0x28

		// Calculate new speed
		int encoderReading = EncoderGetCount(ffb->encoder);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff78 	bl	80010e2 <EncoderGetCount>
 80011f2:	60f8      	str	r0, [r7, #12]
		ffb->speed = (encoderReading - ffb->prevEncoderCountAvg)/
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001204:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8001220 <UpdateFFBSpeed+0x68>
 8001208:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
				(float)FFB_AVG_SPEED_DT;
		ffb->prevEncoderCountAvg = encoderReading;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	625a      	str	r2, [r3, #36]	@ 0x24
	}
}
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	459c4000 	.word	0x459c4000

08001224 <FFBInit>:

void FFBInit(FFBController_t *ffb, Motor_t *motor, Encoder_t *encoder) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
	ffb->state = FFB_STOPPED;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2200      	movs	r2, #0
 8001234:	731a      	strb	r2, [r3, #12]
	ffb->homingState = FFB_UNHOMED;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2200      	movs	r2, #0
 800123a:	735a      	strb	r2, [r3, #13]

	ffb->motor = motor;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	601a      	str	r2, [r3, #0]
	ffb->encoder = encoder;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	609a      	str	r2, [r3, #8]

	ffb->constantGain = 0.1;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4a35      	ldr	r2, [pc, #212]	@ (8001320 <FFBInit+0xfc>)
 800124c:	615a      	str	r2, [r3, #20]
	ffb->periodicGain = 0;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	619a      	str	r2, [r3, #24]
	ffb->springGain = 10;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4a32      	ldr	r2, [pc, #200]	@ (8001324 <FFBInit+0x100>)
 800125a:	61da      	str	r2, [r3, #28]
	ffb->damperGain = 2;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001262:	621a      	str	r2, [r3, #32]

	// Temporarily disable assist until better implementation
	ffb->assistMin = 0;//450;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	631a      	str	r2, [r3, #48]	@ 0x30
	ffb->assistGain = 0;//40000;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	635a      	str	r2, [r3, #52]	@ 0x34

	ffb->gain = MOTOR_POWER_MAX;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4a2c      	ldr	r2, [pc, #176]	@ (8001328 <FFBInit+0x104>)
 8001278:	611a      	str	r2, [r3, #16]
	ffb->motorKtConstant = 0.0265;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4a2b      	ldr	r2, [pc, #172]	@ (800132c <FFBInit+0x108>)
 800127e:	605a      	str	r2, [r3, #4]
	ffb->minLock = -1000;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4a2b      	ldr	r2, [pc, #172]	@ (8001330 <FFBInit+0x10c>)
 8001284:	639a      	str	r2, [r3, #56]	@ 0x38
	ffb->maxLock = 1000;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800128c:	63da      	str	r2, [r3, #60]	@ 0x3c
	ffb->lockPower = 4000;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001294:	641a      	str	r2, [r3, #64]	@ 0x40
	ffb->lockKp = 0.0035f;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4a26      	ldr	r2, [pc, #152]	@ (8001334 <FFBInit+0x110>)
 800129a:	645a      	str	r2, [r3, #68]	@ 0x44
	ffb->lockKd = 25000.0f;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4a26      	ldr	r2, [pc, #152]	@ (8001338 <FFBInit+0x114>)
 80012a0:	649a      	str	r2, [r3, #72]	@ 0x48

	ffb->prevEncoderCountAvg = EncoderGetCount(encoder);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ff1d 	bl	80010e2 <EncoderGetCount>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	625a      	str	r2, [r3, #36]	@ 0x24
	ffb->speed = 0;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	62da      	str	r2, [r3, #44]	@ 0x2c
	ffb->speedDt = 0;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2200      	movs	r2, #0
 80012ba:	629a      	str	r2, [r3, #40]	@ 0x28

	// Initialize all forces to 0
	FFBSetConstantStrength(ffb, 0);
 80012bc:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800133c <FFBInit+0x118>
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f000 f83d 	bl	8001340 <FFBSetConstantStrength>
	FFBPeriodicInit(&ffb->param.periodic, 0, 0, 0);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	3350      	adds	r3, #80	@ 0x50
 80012ca:	ed9f 1a1c 	vldr	s2, [pc, #112]	@ 800133c <FFBInit+0x118>
 80012ce:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 800133c <FFBInit+0x118>
 80012d2:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 800133c <FFBInit+0x118>
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 fb78 	bl	80019cc <FFBPeriodicInit>
	FFBSpringParam_t spring = {
 80012dc:	f04f 0300 	mov.w	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	f04f 0300 	mov.w	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	f04f 0300 	mov.w	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
			.offset = 0,
			.strength = 0,
			.minimumSpringForce = 0
	};
	FFBSetSpringParams(ffb, spring);
 80012ee:	edd7 6a05 	vldr	s13, [r7, #20]
 80012f2:	ed97 7a06 	vldr	s14, [r7, #24]
 80012f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80012fa:	eeb0 0a66 	vmov.f32	s0, s13
 80012fe:	eef0 0a47 	vmov.f32	s1, s14
 8001302:	eeb0 1a67 	vmov.f32	s2, s15
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f000 f829 	bl	800135e <FFBSetSpringParams>
	FFBSetDamper(ffb, 0);
 800130c:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 800133c <FFBInit+0x118>
 8001310:	68f8      	ldr	r0, [r7, #12]
 8001312:	f000 f840 	bl	8001396 <FFBSetDamper>
}
 8001316:	bf00      	nop
 8001318:	3720      	adds	r7, #32
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	3dcccccd 	.word	0x3dcccccd
 8001324:	41200000 	.word	0x41200000
 8001328:	4595f800 	.word	0x4595f800
 800132c:	3cd91687 	.word	0x3cd91687
 8001330:	fffffc18 	.word	0xfffffc18
 8001334:	3b656042 	.word	0x3b656042
 8001338:	46c35000 	.word	0x46c35000
 800133c:	00000000 	.word	0x00000000

08001340 <FFBSetConstantStrength>:

void FFBSetConstantStrength(FFBController_t *ffb, float constantStrength) {
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	ed87 0a00 	vstr	s0, [r7]
	ffb->param.constantStrength = constantStrength;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <FFBSetSpringParams>:

void FFBSetPeriodicParams(FFBController_t *ffb, FFBPeriodicParam_t periodic) {
	ffb->param.periodic = periodic;
}

void FFBSetSpringParams(FFBController_t *ffb, FFBSpringParam_t spring) {
 800135e:	b480      	push	{r7}
 8001360:	b085      	sub	sp, #20
 8001362:	af00      	add	r7, sp, #0
 8001364:	60f8      	str	r0, [r7, #12]
 8001366:	eef0 6a40 	vmov.f32	s13, s0
 800136a:	eeb0 7a60 	vmov.f32	s14, s1
 800136e:	eef0 7a41 	vmov.f32	s15, s2
 8001372:	edc7 6a00 	vstr	s13, [r7]
 8001376:	ed87 7a01 	vstr	s14, [r7, #4]
 800137a:	edc7 7a02 	vstr	s15, [r7, #8]
	ffb->param.spring = spring;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	3360      	adds	r3, #96	@ 0x60
 8001382:	463a      	mov	r2, r7
 8001384:	ca07      	ldmia	r2, {r0, r1, r2}
 8001386:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800138a:	bf00      	nop
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <FFBSetDamper>:

void FFBSetDamper(FFBController_t *ffb, float damperStrength) {
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	ed87 0a00 	vstr	s0, [r7]
	ffb->param.damperStrength = damperStrength;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <FFBCalcForces>:

float FFBCalcForces(FFBController_t *ffb, float measuredPosition, float speed,
		int deltaTime) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	ed2d 8b02 	vpush	{d8}
 80013ba:	b08a      	sub	sp, #40	@ 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80013c4:	edc7 0a01 	vstr	s1, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]

	// Check if axis is outside lock range
	if(measuredPosition < ffb->minLock) {
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013ce:	ee07 3a90 	vmov	s15, r3
 80013d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80013da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e2:	d520      	bpl.n	8001426 <FFBCalcForces+0x72>

		return ffb->lockKp * powf(ffb->minLock - measuredPosition, 2.0f) -
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	ed93 8a11 	vldr	s16, [r3, #68]	@ 0x44
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013ee:	ee07 3a90 	vmov	s15, r3
 80013f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80013fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013fe:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001402:	eeb0 0a67 	vmov.f32	s0, s15
 8001406:	f00a fc01 	bl	800bc0c <powf>
 800140a:	eef0 7a40 	vmov.f32	s15, s0
 800140e:	ee28 7a27 	vmul.f32	s14, s16, s15
				ffb->lockKd * speed;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 8001418:	edd7 7a01 	vldr	s15, [r7, #4]
 800141c:	ee66 7aa7 	vmul.f32	s15, s13, s15
		return ffb->lockKp * powf(ffb->minLock - measuredPosition, 2.0f) -
 8001420:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001424:	e093      	b.n	800154e <FFBCalcForces+0x19a>
	}
	else if(measuredPosition > ffb->maxLock) {
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800142a:	ee07 3a90 	vmov	s15, r3
 800142e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001432:	ed97 7a02 	vldr	s14, [r7, #8]
 8001436:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800143a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143e:	dd22      	ble.n	8001486 <FFBCalcForces+0xd2>

		return -(ffb->lockKp * powf(ffb->maxLock - measuredPosition, 2.0f) -
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	ed93 8a11 	vldr	s16, [r3, #68]	@ 0x44
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800144a:	ee07 3a90 	vmov	s15, r3
 800144e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001452:	edd7 7a02 	vldr	s15, [r7, #8]
 8001456:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800145e:	eeb0 0a67 	vmov.f32	s0, s15
 8001462:	f00a fbd3 	bl	800bc0c <powf>
 8001466:	eef0 7a40 	vmov.f32	s15, s0
 800146a:	ee28 7a27 	vmul.f32	s14, s16, s15
				ffb->lockKd * speed);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 8001474:	edd7 7a01 	vldr	s15, [r7, #4]
 8001478:	ee66 7aa7 	vmul.f32	s15, s13, s15
		return -(ffb->lockKp * powf(ffb->maxLock - measuredPosition, 2.0f) -
 800147c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001480:	eef1 7a67 	vneg.f32	s15, s15
 8001484:	e063      	b.n	800154e <FFBCalcForces+0x19a>
	}
	// Axis is within lock range, perform calculations
	else {

		float constantForce = FFBCalcConstantForce(ffb->constantGain,
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	edd3 7a05 	vldr	s15, [r3, #20]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8001492:	eef0 0a47 	vmov.f32	s1, s14
 8001496:	eeb0 0a67 	vmov.f32	s0, s15
 800149a:	f000 f9c5 	bl	8001828 <FFBCalcConstantForce>
 800149e:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
				ffb->param.constantStrength);

		float periodicForce = FFBCalcPeriodicForce(ffb->periodicGain,
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	3350      	adds	r3, #80	@ 0x50
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	ee07 2a10 	vmov	s14, r2
 80014b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80014b6:	eef0 0a47 	vmov.f32	s1, s14
 80014ba:	4618      	mov	r0, r3
 80014bc:	eeb0 0a67 	vmov.f32	s0, s15
 80014c0:	f000 f9c6 	bl	8001850 <FFBCalcPeriodicForce>
 80014c4:	ed87 0a08 	vstr	s0, [r7, #32]
				&ffb->param.periodic, deltaTime);

		float springForce = FFBCalcSpringForce(ffb->springGain, measuredPosition,
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	edd3 7a07 	vldr	s15, [r3, #28]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	3360      	adds	r3, #96	@ 0x60
 80014d2:	4618      	mov	r0, r3
 80014d4:	edd7 0a02 	vldr	s1, [r7, #8]
 80014d8:	eeb0 0a67 	vmov.f32	s0, s15
 80014dc:	f000 f9d4 	bl	8001888 <FFBCalcSpringForce>
 80014e0:	ed87 0a07 	vstr	s0, [r7, #28]
				&ffb->param.spring);

		float damperForce = FFBCalcDamperForce(ffb->damperGain,
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	edd3 7a08 	vldr	s15, [r3, #32]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
 80014f0:	eef0 0a47 	vmov.f32	s1, s14
 80014f4:	eeb0 0a67 	vmov.f32	s0, s15
 80014f8:	f000 fa15 	bl	8001926 <FFBCalcDamperForce>
 80014fc:	ed87 0a06 	vstr	s0, [r7, #24]
				ffb->param.damperStrength);

		float assistForce = FFBCalcAssist(ffb->assistGain, ffb->assistMin,
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800150c:	ed97 1a01 	vldr	s2, [r7, #4]
 8001510:	eef0 0a47 	vmov.f32	s1, s14
 8001514:	eeb0 0a67 	vmov.f32	s0, s15
 8001518:	f000 fa20 	bl	800195c <FFBCalcAssist>
 800151c:	ed87 0a05 	vstr	s0, [r7, #20]
				speed);

		// Assist force gain is independent to prevent runaway
		return ffb->gain *
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	ed93 7a04 	vldr	s14, [r3, #16]
				(constantForce + periodicForce + springForce + damperForce) +
 8001526:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800152a:	edd7 7a08 	vldr	s15, [r7, #32]
 800152e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001532:	edd7 7a07 	vldr	s15, [r7, #28]
 8001536:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800153a:	edd7 7a06 	vldr	s15, [r7, #24]
 800153e:	ee76 7aa7 	vadd.f32	s15, s13, s15
		return ffb->gain *
 8001542:	ee27 7a27 	vmul.f32	s14, s14, s15
				(constantForce + periodicForce + springForce + damperForce) +
 8001546:	edd7 7a05 	vldr	s15, [r7, #20]
 800154a:	ee77 7a27 	vadd.f32	s15, s14, s15
				assistForce;
	}
}
 800154e:	eeb0 0a67 	vmov.f32	s0, s15
 8001552:	3728      	adds	r7, #40	@ 0x28
 8001554:	46bd      	mov	sp, r7
 8001556:	ecbd 8b02 	vpop	{d8}
 800155a:	bd80      	pop	{r7, pc}

0800155c <FFBUpdate>:

void FFBUpdate(FFBController_t *ffb, int deltaTimeUs) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
	UpdateFFBSpeed(ffb, deltaTimeUs);
 8001566:	6839      	ldr	r1, [r7, #0]
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff fe25 	bl	80011b8 <UpdateFFBSpeed>

	switch(ffb->state){
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	7b1b      	ldrb	r3, [r3, #12]
 8001572:	2b02      	cmp	r3, #2
 8001574:	d036      	beq.n	80015e4 <FFBUpdate+0x88>
 8001576:	2b02      	cmp	r3, #2
 8001578:	dc2d      	bgt.n	80015d6 <FFBUpdate+0x7a>
 800157a:	2b00      	cmp	r3, #0
 800157c:	d002      	beq.n	8001584 <FFBUpdate+0x28>
 800157e:	2b01      	cmp	r3, #1
 8001580:	d007      	beq.n	8001592 <FFBUpdate+0x36>
 8001582:	e028      	b.n	80015d6 <FFBUpdate+0x7a>
	case FFB_STOPPED:
		MotorSetPower(ffb->motor, 0);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f000 fa89 	bl	8001aa2 <MotorSetPower>
		break;
 8001590:	e029      	b.n	80015e6 <FFBUpdate+0x8a>
	case FFB_RUNNING:
		int motorPower = FFBCalcForces(ffb, EncoderGetCount(ffb->encoder),
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fda3 	bl	80010e2 <EncoderGetCount>
 800159c:	ee07 0a90 	vmov	s15, r0
 80015a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80015aa:	6839      	ldr	r1, [r7, #0]
 80015ac:	eef0 0a47 	vmov.f32	s1, s14
 80015b0:	eeb0 0a67 	vmov.f32	s0, s15
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff fefd 	bl	80013b4 <FFBCalcForces>
 80015ba:	eef0 7a40 	vmov.f32	s15, s0
 80015be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015c2:	ee17 3a90 	vmov	r3, s15
 80015c6:	60fb      	str	r3, [r7, #12]
		//TODO: Remove: Scale down motor power and limit for testing and safety
//		motorPower /= 2;
//		motorPower = Constrain(motorPower, -MOTOR_POWER_MAX/2,
//				MOTOR_POWER_MAX/2);

		MotorSetPower(ffb->motor, motorPower);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68f9      	ldr	r1, [r7, #12]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 fa67 	bl	8001aa2 <MotorSetPower>
		break;
 80015d4:	e007      	b.n	80015e6 <FFBUpdate+0x8a>
	case FFB_IDLE:
		break;
	default:
		// Should not reach here
		MotorSetPower(ffb->motor, 0);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 fa60 	bl	8001aa2 <MotorSetPower>
		break;
 80015e2:	e000      	b.n	80015e6 <FFBUpdate+0x8a>
		break;
 80015e4:	bf00      	nop
	}
}
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <FFBStop>:

void FFBStop(FFBController_t *ffb) {
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
	ffb->state = FFB_STOPPED;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	731a      	strb	r2, [r3, #12]
	MotorSetPower(ffb->motor, 0);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f000 fa4d 	bl	8001aa2 <MotorSetPower>
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <FFBStart>:

void FFBStart(FFBController_t *ffb) {
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	ffb->state = FFB_RUNNING;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	731a      	strb	r2, [r3, #12]
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <FFBGetState>:

FFBControllerState_e FFBGetState(FFBController_t *ffb) {
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
	return ffb->state;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	7b1b      	ldrb	r3, [r3, #12]
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <FFBSetControlRange>:

void FFBSetControlRange(FFBController_t *ffb, int min, int max) {
 8001642:	b480      	push	{r7}
 8001644:	b085      	sub	sp, #20
 8001646:	af00      	add	r7, sp, #0
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
	ffb->minLock = min;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	68ba      	ldr	r2, [r7, #8]
 8001652:	639a      	str	r2, [r3, #56]	@ 0x38
	ffb->maxLock = max;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800165a:	bf00      	nop
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <FFBGetMinControlRange>:

int FFBGetMinControlRange(FFBController_t *ffb) {
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
	return ffb->minLock;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8001672:	4618      	mov	r0, r3
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <FFBGetMaxControlRange>:

int FFBGetMaxControlRange(FFBController_t *ffb) {
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
	return ffb->maxLock;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <FFBHome>:

void FFBHome(FFBController_t *ffb) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b08c      	sub	sp, #48	@ 0x30
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	ffb->state = FFB_IDLE;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2202      	movs	r2, #2
 80016a4:	731a      	strb	r2, [r3, #12]
	/* Find home start */
	// Record motor position
	int previousPosition = EncoderGetCount(ffb->encoder);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fd19 	bl	80010e2 <EncoderGetCount>
 80016b0:	62f8      	str	r0, [r7, #44]	@ 0x2c
	// Reverse motor slowly
	MotorSetPower(ffb->motor, -FFB_CONTROL_HOME_POWER);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	495a      	ldr	r1, [pc, #360]	@ (8001820 <FFBHome+0x188>)
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 f9f2 	bl	8001aa2 <MotorSetPower>
	// Wait for motor to move
	delayMs(300);
 80016be:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80016c2:	f7ff fcdb 	bl	800107c <delayMs>
	// Wait until motor stops moving (hit end)
	int steadyCount = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		int currentPosition = EncoderGetCount(ffb->encoder);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fd07 	bl	80010e2 <EncoderGetCount>
 80016d4:	6278      	str	r0, [r7, #36]	@ 0x24
		if(Abs(currentPosition-previousPosition) < 10) {
 80016d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 fb40 	bl	8001d62 <Abs>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b09      	cmp	r3, #9
 80016e6:	dc03      	bgt.n	80016f0 <FFBHome+0x58>
			steadyCount++;
 80016e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ea:	3301      	adds	r3, #1
 80016ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016ee:	e001      	b.n	80016f4 <FFBHome+0x5c>
		}
		else {
			steadyCount = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62bb      	str	r3, [r7, #40]	@ 0x28
		}
		previousPosition = currentPosition;
 80016f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		delayMs(10);
 80016f8:	200a      	movs	r0, #10
 80016fa:	f7ff fcbf 	bl	800107c <delayMs>
	} while(steadyCount < 25);
 80016fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001700:	2b18      	cmp	r3, #24
 8001702:	dde2      	ble.n	80016ca <FFBHome+0x32>
	// Record start position
	int startPosition = EncoderGetCount(ffb->encoder);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fcea 	bl	80010e2 <EncoderGetCount>
 800170e:	6238      	str	r0, [r7, #32]
	// Stop motor
	MotorSetPower(ffb->motor, 0);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f000 f9c3 	bl	8001aa2 <MotorSetPower>
	delayMs(1000);
 800171c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001720:	f7ff fcac 	bl	800107c <delayMs>


	/* Find home end */
	// Record motor position
	previousPosition = EncoderGetCount(ffb->encoder);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fcda 	bl	80010e2 <EncoderGetCount>
 800172e:	62f8      	str	r0, [r7, #44]	@ 0x2c
	// move motor forward slowly
	MotorSetPower(ffb->motor, FFB_CONTROL_HOME_POWER);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f240 618f 	movw	r1, #1679	@ 0x68f
 8001738:	4618      	mov	r0, r3
 800173a:	f000 f9b2 	bl	8001aa2 <MotorSetPower>
	// Wait for motor to move
	delayMs(300);
 800173e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001742:	f7ff fc9b 	bl	800107c <delayMs>
	// Wait until motor stops moving (hit end)
	steadyCount = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		int currentPosition = EncoderGetCount(ffb->encoder);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fcc7 	bl	80010e2 <EncoderGetCount>
 8001754:	61f8      	str	r0, [r7, #28]
		if(Abs(currentPosition-previousPosition) < 10) {
 8001756:	69fa      	ldr	r2, [r7, #28]
 8001758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	4618      	mov	r0, r3
 800175e:	f000 fb00 	bl	8001d62 <Abs>
 8001762:	4603      	mov	r3, r0
 8001764:	2b09      	cmp	r3, #9
 8001766:	dc03      	bgt.n	8001770 <FFBHome+0xd8>
			steadyCount++;
 8001768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800176a:	3301      	adds	r3, #1
 800176c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800176e:	e001      	b.n	8001774 <FFBHome+0xdc>
		}
		else {
			steadyCount = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	62bb      	str	r3, [r7, #40]	@ 0x28
		}
		previousPosition = currentPosition;
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	62fb      	str	r3, [r7, #44]	@ 0x2c
		delayMs(10);
 8001778:	200a      	movs	r0, #10
 800177a:	f7ff fc7f 	bl	800107c <delayMs>
	} while(steadyCount < 25);
 800177e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001780:	2b18      	cmp	r3, #24
 8001782:	dde2      	ble.n	800174a <FFBHome+0xb2>
	// Record end position
	int endPosition = EncoderGetCount(ffb->encoder);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fcaa 	bl	80010e2 <EncoderGetCount>
 800178e:	61b8      	str	r0, [r7, #24]
	// Stop motor
	MotorSetPower(ffb->motor, 0);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f000 f983 	bl	8001aa2 <MotorSetPower>
	delayMs(1000);
 800179c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017a0:	f7ff fc6c 	bl	800107c <delayMs>

	/* Calibrate center */
	int center = (endPosition - startPosition)/2;
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	6a3b      	ldr	r3, [r7, #32]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	0fda      	lsrs	r2, r3, #31
 80017ac:	4413      	add	r3, r2
 80017ae:	105b      	asrs	r3, r3, #1
 80017b0:	617b      	str	r3, [r7, #20]
	EncoderSetCount(ffb->encoder, center);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	6979      	ldr	r1, [r7, #20]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fc9e 	bl	80010fa <EncoderSetCount>
	ffb->prevEncoderCountAvg = 0;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	625a      	str	r2, [r3, #36]	@ 0x24

	/* Go to center */
	FFBSpringParam_t centerForce = {
 80017c4:	4b17      	ldr	r3, [pc, #92]	@ (8001824 <FFBHome+0x18c>)
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	613b      	str	r3, [r7, #16]
			.minimumSpringForce = 0,
			.offset = 0,
			.strength = 0.2,
	};
	FFBSetSpringParams(ffb, centerForce);
 80017d4:	edd7 6a02 	vldr	s13, [r7, #8]
 80017d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80017dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80017e0:	eeb0 0a66 	vmov.f32	s0, s13
 80017e4:	eef0 0a47 	vmov.f32	s1, s14
 80017e8:	eeb0 1a67 	vmov.f32	s2, s15
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff fdb6 	bl	800135e <FFBSetSpringParams>

	// Start
	FFBStart(ffb);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ff0c 	bl	8001610 <FFBStart>

	// Wait for center to be reached
	while(Abs(EncoderGetCount(ffb->encoder) - center) > 50) {
 80017f8:	bf00      	nop
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fc6f 	bl	80010e2 <EncoderGetCount>
 8001804:	4602      	mov	r2, r0
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	4618      	mov	r0, r3
 800180c:	f000 faa9 	bl	8001d62 <Abs>
 8001810:	4603      	mov	r3, r0
 8001812:	2b32      	cmp	r3, #50	@ 0x32
 8001814:	dcf1      	bgt.n	80017fa <FFBHome+0x162>
//			.minimumSpringForce = 0,
//			.offset = 0,
//			.strength = 0.35,
//	};
//	FFBSetSpringParams(ffb, newCenterForce);
}
 8001816:	bf00      	nop
 8001818:	bf00      	nop
 800181a:	3730      	adds	r7, #48	@ 0x30
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	fffff971 	.word	0xfffff971
 8001824:	3e4ccccd 	.word	0x3e4ccccd

08001828 <FFBCalcConstantForce>:

float FFBCalcMotorTorque(FFBController_t *ffb, float motorCurrent) {
	return ffb->motorKtConstant * motorCurrent;
}

float FFBCalcConstantForce(float gain, float amount) {
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001832:	edc7 0a00 	vstr	s1, [r7]
	return gain * amount;
 8001836:	ed97 7a01 	vldr	s14, [r7, #4]
 800183a:	edd7 7a00 	vldr	s15, [r7]
 800183e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001842:	eeb0 0a67 	vmov.f32	s0, s15
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <FFBCalcPeriodicForce>:

float FFBCalcPeriodicForce(float gain, FFBPeriodicParam_t *periodic,
		float deltaTime) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	ed87 0a03 	vstr	s0, [r7, #12]
 800185a:	60b8      	str	r0, [r7, #8]
 800185c:	edc7 0a01 	vstr	s1, [r7, #4]
	return gain *
			FFBPeriodicCalc(periodic, deltaTime);
 8001860:	edd7 7a01 	vldr	s15, [r7, #4]
 8001864:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001868:	ee17 1a90 	vmov	r1, s15
 800186c:	68b8      	ldr	r0, [r7, #8]
 800186e:	f000 f8c9 	bl	8001a04 <FFBPeriodicCalc>
 8001872:	eeb0 7a40 	vmov.f32	s14, s0
	return gain *
 8001876:	edd7 7a03 	vldr	s15, [r7, #12]
 800187a:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800187e:	eeb0 0a67 	vmov.f32	s0, s15
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <FFBCalcSpringForce>:

float FFBCalcSpringForce(float gain, float measuredAngle,
		FFBSpringParam_t *springParam) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001892:	edc7 0a02 	vstr	s1, [r7, #8]
 8001896:	6078      	str	r0, [r7, #4]

	float constrainedStrength = ConstrainFloat(
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80018a2:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 80018a6:	eeb0 0a67 	vmov.f32	s0, s15
 80018aa:	f000 fa31 	bl	8001d10 <ConstrainFloat>
 80018ae:	ed87 0a04 	vstr	s0, [r7, #16]
			springParam->strength, -1.0f, 1.0f);

	float force = gain * (springParam->offset - measuredAngle) *
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	ed93 7a01 	vldr	s14, [r3, #4]
 80018b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80018bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80018cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d0:	edc7 7a05 	vstr	s15, [r7, #20]
			constrainedStrength;

	//add/subtract minimum spring force based on force direction
	if(force < 0) {
 80018d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80018d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e0:	d509      	bpl.n	80018f6 <FFBCalcSpringForce+0x6e>
		force -= springParam->minimumSpringForce;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80018e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80018ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f0:	edc7 7a05 	vstr	s15, [r7, #20]
 80018f4:	e00f      	b.n	8001916 <FFBCalcSpringForce+0x8e>
	}
	else if (force > 0) {
 80018f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80018fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001902:	dd08      	ble.n	8001916 <FFBCalcSpringForce+0x8e>
		force += springParam->minimumSpringForce;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	edd3 7a02 	vldr	s15, [r3, #8]
 800190a:	ed97 7a05 	vldr	s14, [r7, #20]
 800190e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001912:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	return force;
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	ee07 3a90 	vmov	s15, r3
}
 800191c:	eeb0 0a67 	vmov.f32	s0, s15
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <FFBCalcDamperForce>:

float FFBCalcDamperForce(float gain, float magnitude) {
 8001926:	b480      	push	{r7}
 8001928:	b085      	sub	sp, #20
 800192a:	af00      	add	r7, sp, #0
 800192c:	ed87 0a01 	vstr	s0, [r7, #4]
 8001930:	edc7 0a00 	vstr	s1, [r7]
	float force = gain * -magnitude;
 8001934:	edd7 7a00 	vldr	s15, [r7]
 8001938:	eef1 7a67 	vneg.f32	s15, s15
 800193c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001944:	edc7 7a03 	vstr	s15, [r7, #12]
	return force;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	ee07 3a90 	vmov	s15, r3
}
 800194e:	eeb0 0a67 	vmov.f32	s0, s15
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <FFBCalcAssist>:

float FFBCalcAssist(float gain, float min, float speed) {
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	ed87 0a03 	vstr	s0, [r7, #12]
 8001966:	edc7 0a02 	vstr	s1, [r7, #8]
 800196a:	ed87 1a01 	vstr	s2, [r7, #4]
	if(speed < 0) {
 800196e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001972:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197a:	d50a      	bpl.n	8001992 <FFBCalcAssist+0x36>
		return gain*speed - min;
 800197c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001980:	edd7 7a01 	vldr	s15, [r7, #4]
 8001984:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001988:	edd7 7a02 	vldr	s15, [r7, #8]
 800198c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001990:	e013      	b.n	80019ba <FFBCalcAssist+0x5e>
	}
	else if(speed > 0) {
 8001992:	edd7 7a01 	vldr	s15, [r7, #4]
 8001996:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800199a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199e:	dd0a      	ble.n	80019b6 <FFBCalcAssist+0x5a>
		return gain*speed + min;
 80019a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80019a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80019a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80019b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b4:	e001      	b.n	80019ba <FFBCalcAssist+0x5e>
	}
	else {
		return 0;
 80019b6:	eddf 7a04 	vldr	s15, [pc, #16]	@ 80019c8 <FFBCalcAssist+0x6c>
	}
}
 80019ba:	eeb0 0a67 	vmov.f32	s0, s15
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	00000000 	.word	0x00000000

080019cc <FFBPeriodicInit>:
#include <math.h>

#define PI 3.141592653589793f

void FFBPeriodicInit(FFBPeriodicParam_t *peri, float amplitude, float frequency,
		float offset) {
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80019d8:	edc7 0a01 	vstr	s1, [r7, #4]
 80019dc:	ed87 1a00 	vstr	s2, [r7]
	// Initialize FFB periodic parameters
	peri->amplitude = amplitude;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	601a      	str	r2, [r3, #0]
	peri->frequency = frequency;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	605a      	str	r2, [r3, #4]
	peri->offset = offset;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	609a      	str	r2, [r3, #8]

	// Reset time to 0
	peri->time = 0;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	60da      	str	r2, [r3, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <FFBPeriodicCalc>:

float FFBPeriodicCalc(FFBPeriodicParam_t *peri, int dt) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]

	// Update time
	peri->time += dt;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	441a      	add	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	60da      	str	r2, [r3, #12]

	// Calculate force
	float force = sinf(peri->frequency * (2*PI) * (peri->time/1000.0f)) *
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a20:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001a74 <FFBPeriodicCalc+0x70>
 8001a24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	ee07 3a90 	vmov	s15, r3
 8001a30:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a34:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8001a78 <FFBPeriodicCalc+0x74>
 8001a38:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a40:	eeb0 0a67 	vmov.f32	s0, s15
 8001a44:	f00a f93a 	bl	800bcbc <sinf>
 8001a48:	eeb0 7a40 	vmov.f32	s14, s0
			peri->amplitude + peri->offset;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	edd3 7a00 	vldr	s15, [r3]
	float force = sinf(peri->frequency * (2*PI) * (peri->time/1000.0f)) *
 8001a52:	ee27 7a27 	vmul.f32	s14, s14, s15
			peri->amplitude + peri->offset;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	edd3 7a02 	vldr	s15, [r3, #8]
	float force = sinf(peri->frequency * (2*PI) * (peri->time/1000.0f)) *
 8001a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a60:	edc7 7a03 	vstr	s15, [r7, #12]

	return force;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	ee07 3a90 	vmov	s15, r3
}
 8001a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40c90fdb 	.word	0x40c90fdb
 8001a78:	447a0000 	.word	0x447a0000

08001a7c <MotorInit>:

#include "motor.h"
#include "utilities/utilities.h"
#include <stdbool.h>

void MotorInit(Motor_t *motor, MotorInterface_t interface) {
 8001a7c:	b490      	push	{r4, r7}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	4638      	mov	r0, r7
 8001a86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	motor->interface = interface;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	461c      	mov	r4, r3
 8001a8e:	463b      	mov	r3, r7
 8001a90:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001a98:	bf00      	nop
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc90      	pop	{r4, r7}
 8001aa0:	4770      	bx	lr

08001aa2 <MotorSetPower>:

int MotorGetPower(Motor_t *motor) {
	return motor->interface.MotorGetPower(&motor->interface);
}

void MotorSetPower(Motor_t *motor, int power) {
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	6039      	str	r1, [r7, #0]
	motor->interface.MotorSetPower(&motor->interface, power);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6839      	ldr	r1, [r7, #0]
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4798      	blx	r3
}
 8001ab8:	bf00      	nop
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <UsbReportInit>:

#include "usb_report.h"
#include <string.h>


void UsbReportInit(UsbReport_t *report, PacketParser_t *parser) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
	report->reportId = 0;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]

	// Clear report data
	memset(report->data, 0, USB_REPORT_MAX_SIZE);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	2240      	movs	r2, #64	@ 0x40
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f00b ff7d 	bl	800d9d8 <memset>

	report->currentParseIndex = 0;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	//report->endianness = inEndian;
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <UsbReportLoad>:

void UsbReportLoad(UsbReport_t *report, uint8_t *buffer, uint16_t size) {
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	4613      	mov	r3, r2
 8001afa:	80fb      	strh	r3, [r7, #6]
	// First index contains report id
	report->reportId = *buffer;
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	781a      	ldrb	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	701a      	strb	r2, [r3, #0]

	// Following indices store data
	// Copy to report data
	memcpy(report->data, buffer+1, size-1);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	1c58      	adds	r0, r3, #1
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	1c59      	adds	r1, r3, #1
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	461a      	mov	r2, r3
 8001b12:	f00b ffe0 	bl	800dad6 <memcpy>

	report->currentParseIndex = 0;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
}
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <UsbReportGetReportId>:

uint8_t UsbReportGetReportId(UsbReport_t *report) {
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
	return report->reportId;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	781b      	ldrb	r3, [r3, #0]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <UsbReportParseNextInt>:

int32_t UsbReportParseNextInt(UsbReport_t *report) {
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b084      	sub	sp, #16
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
	uint8_t *data = report->data + report->currentParseIndex;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	f8b2 2042 	ldrh.w	r2, [r2, #66]	@ 0x42
 8001b50:	4413      	add	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]
	int32_t value;
	ParseBytesEndian(&value, data, sizeof(int32_t), report->endianness);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001b5a:	f107 0008 	add.w	r0, r7, #8
 8001b5e:	2204      	movs	r2, #4
 8001b60:	68f9      	ldr	r1, [r7, #12]
 8001b62:	f000 f84c 	bl	8001bfe <ParseBytesEndian>

	// Increment parse index for next parse
	report->currentParseIndex += sizeof(uint32_t);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

	return value;
 8001b76:	68bb      	ldr	r3, [r7, #8]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <UsbReportParseNextByte>:

uint8_t UsbReportParseNextByte(UsbReport_t *report) {
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	uint8_t data = report->data[report->currentParseIndex];
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001b8e:	461a      	mov	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4413      	add	r3, r2
 8001b94:	785b      	ldrb	r3, [r3, #1]
 8001b96:	73fb      	strb	r3, [r7, #15]

	// Increment parse index for next parse
	report->currentParseIndex += sizeof(uint8_t);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

	return data;
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <UsbReportParseNextFloat>:

float UsbReportParseNextFloat(UsbReport_t *report) {
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
	uint8_t *data = report->data + report->currentParseIndex;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	f8b2 2042 	ldrh.w	r2, [r2, #66]	@ 0x42
 8001bc8:	4413      	add	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]
	float value;
	ParseBytesEndian(&value, data, sizeof(float), report->endianness);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001bd2:	f107 0008 	add.w	r0, r7, #8
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	68f9      	ldr	r1, [r7, #12]
 8001bda:	f000 f810 	bl	8001bfe <ParseBytesEndian>

	// Increment parse index for next parse
	report->currentParseIndex += sizeof(float);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001be4:	3304      	adds	r3, #4
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

	return value;
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	ee07 3a90 	vmov	s15, r3
}
 8001bf4:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <ParseBytesEndian>:

void ParseBytesEndian(void *dest, uint8_t *source, uint8_t length,
		int endianess) {
 8001bfe:	b480      	push	{r7}
 8001c00:	b087      	sub	sp, #28
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	603b      	str	r3, [r7, #0]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	71fb      	strb	r3, [r7, #7]
	// Parse based on endianess
	switch(endianess) {
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d018      	beq.n	8001c46 <ParseBytesEndian+0x48>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d128      	bne.n	8001c6c <ParseBytesEndian+0x6e>
		case USB_REPORT_IN_BIG_ENDIAN:
			for(int i = 0; i < length; i++) {
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	e00d      	b.n	8001c3c <ParseBytesEndian+0x3e>
				*((uint8_t *)dest+i) = *(source + length-i-1);
 8001c20:	79fa      	ldrb	r2, [r7, #7]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	3b01      	subs	r3, #1
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	441a      	add	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	68f9      	ldr	r1, [r7, #12]
 8001c30:	440b      	add	r3, r1
 8001c32:	7812      	ldrb	r2, [r2, #0]
 8001c34:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < length; i++) {
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	dbed      	blt.n	8001c20 <ParseBytesEndian+0x22>
			}
			break;
 8001c44:	e013      	b.n	8001c6e <ParseBytesEndian+0x70>
		case USB_REPORT_IN_LITTLE_ENDIAN:
			for(int i = 0; i < length; i++) {
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	e00a      	b.n	8001c62 <ParseBytesEndian+0x64>
				*((uint8_t *)dest+i) = *(source+i);
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	441a      	add	r2, r3
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	68f9      	ldr	r1, [r7, #12]
 8001c56:	440b      	add	r3, r1
 8001c58:	7812      	ldrb	r2, [r2, #0]
 8001c5a:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < length; i++) {
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	dbf0      	blt.n	8001c4c <ParseBytesEndian+0x4e>
			}
			break;
 8001c6a:	e000      	b.n	8001c6e <ParseBytesEndian+0x70>
		default:
			// Invalid condition
			break;
 8001c6c:	bf00      	nop
	}
}
 8001c6e:	bf00      	nop
 8001c70:	371c      	adds	r7, #28
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <Map>:
 */

#include "utilities/utilities.h"

int32_t Map(int32_t in, int32_t inMin, int32_t inMax, int32_t outMin,
		int32_t outMax) {
 8001c7a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6178      	str	r0, [r7, #20]
 8001c84:	6139      	str	r1, [r7, #16]
 8001c86:	60fa      	str	r2, [r7, #12]
 8001c88:	60bb      	str	r3, [r7, #8]
	return (((int64_t)(in - inMin)*(outMax - outMin))/(inMax - inMin)) + outMin;
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	17da      	asrs	r2, r3, #31
 8001c92:	469a      	mov	sl, r3
 8001c94:	4693      	mov	fp, r2
 8001c96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	17da      	asrs	r2, r3, #31
 8001c9e:	4698      	mov	r8, r3
 8001ca0:	4691      	mov	r9, r2
 8001ca2:	fb08 f20b 	mul.w	r2, r8, fp
 8001ca6:	fb0a f309 	mul.w	r3, sl, r9
 8001caa:	4413      	add	r3, r2
 8001cac:	fbaa 4508 	umull	r4, r5, sl, r8
 8001cb0:	442b      	add	r3, r5
 8001cb2:	461d      	mov	r5, r3
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	17da      	asrs	r2, r3, #31
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	4629      	mov	r1, r5
 8001cc8:	f7fe ff76 	bl	8000bb8 <__aeabi_ldivmod>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	4413      	add	r3, r2
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001cde <Constrain>:

int32_t Constrain(int32_t value, int32_t min, int32_t max) {
 8001cde:	b480      	push	{r7}
 8001ce0:	b085      	sub	sp, #20
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
	if(value < min) {
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	da01      	bge.n	8001cf6 <Constrain+0x18>
		return min;
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	e006      	b.n	8001d04 <Constrain+0x26>
	}
	else if(value > max) {
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	dd01      	ble.n	8001d02 <Constrain+0x24>
		return max;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	e000      	b.n	8001d04 <Constrain+0x26>
	}
	else {
		return value;
 8001d02:	68fb      	ldr	r3, [r7, #12]
	}
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <ConstrainFloat>:

float ConstrainFloat(float value, float min, float max) {
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	ed87 0a03 	vstr	s0, [r7, #12]
 8001d1a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001d1e:	ed87 1a01 	vstr	s2, [r7, #4]
	if(value < min) {
 8001d22:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d26:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d32:	d501      	bpl.n	8001d38 <ConstrainFloat+0x28>
		return min;
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	e00b      	b.n	8001d50 <ConstrainFloat+0x40>
	}
	else if(value > max) {
 8001d38:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d48:	dd01      	ble.n	8001d4e <ConstrainFloat+0x3e>
		return max;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	e000      	b.n	8001d50 <ConstrainFloat+0x40>
	}
	else {
		return value;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
	}
}
 8001d50:	ee07 3a90 	vmov	s15, r3
 8001d54:	eeb0 0a67 	vmov.f32	s0, s15
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <Abs>:

int32_t Abs(int32_t x) {
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
	return x > 0 ? x : -x;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	bfb8      	it	lt
 8001d70:	425b      	neglt	r3, r3
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
	...

08001d80 <ButtonStateChangedCallback>:
void CommandLineMode(void);
void ProcessUsbControlData(UsbReport_t *usbReport);
void ProcessUsbFFBData(UsbReport_t *usbReport);

// Callbacks
void ButtonStateChangedCallback(Button_t *button) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	if(button == &btnAccept) {
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a10      	ldr	r2, [pc, #64]	@ (8001dcc <ButtonStateChangedCallback+0x4c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d119      	bne.n	8001dc4 <ButtonStateChangedCallback+0x44>
		// Add implementation for accept button here
		if(ButtonIsPressed(&btnAccept)) {
 8001d90:	480e      	ldr	r0, [pc, #56]	@ (8001dcc <ButtonStateChangedCallback+0x4c>)
 8001d92:	f7ff f8f7 	bl	8000f84 <ButtonIsPressed>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d013      	beq.n	8001dc4 <ButtonStateChangedCallback+0x44>
			switch (FFBGetState(&ffbPitch)) {
 8001d9c:	480c      	ldr	r0, [pc, #48]	@ (8001dd0 <ButtonStateChangedCallback+0x50>)
 8001d9e:	f7ff fc44 	bl	800162a <FFBGetState>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <ButtonStateChangedCallback+0x34>
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d107      	bne.n	8001dbc <ButtonStateChangedCallback+0x3c>
				case FFB_RUNNING:
					FFBStop(&ffbPitch);
 8001dac:	4808      	ldr	r0, [pc, #32]	@ (8001dd0 <ButtonStateChangedCallback+0x50>)
 8001dae:	f7ff fc1e 	bl	80015ee <FFBStop>
					break;
 8001db2:	e007      	b.n	8001dc4 <ButtonStateChangedCallback+0x44>
				case FFB_STOPPED:
					FFBStart(&ffbPitch);
 8001db4:	4806      	ldr	r0, [pc, #24]	@ (8001dd0 <ButtonStateChangedCallback+0x50>)
 8001db6:	f7ff fc2b 	bl	8001610 <FFBStart>
					break;
 8001dba:	e003      	b.n	8001dc4 <ButtonStateChangedCallback+0x44>
				default:
					FFBStop(&ffbPitch);
 8001dbc:	4804      	ldr	r0, [pc, #16]	@ (8001dd0 <ButtonStateChangedCallback+0x50>)
 8001dbe:	f7ff fc16 	bl	80015ee <FFBStop>
					break;
 8001dc2:	bf00      	nop
			}
//			MotorSetPower(&pitchMotor, MotorGetPower(&pitchMotor)+100);
		}
	}
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20000398 	.word	0x20000398
 8001dd0:	200003ac 	.word	0x200003ac

08001dd4 <ButtonReadState>:

int ButtonReadState(Button_t *button) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	if(button == &btnAccept) {
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a09      	ldr	r2, [pc, #36]	@ (8001e04 <ButtonReadState+0x30>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d109      	bne.n	8001df8 <ButtonReadState+0x24>
		return GPIOGetState(&gpioAccept) == GPIO_HIGH ? 1 : 0;
 8001de4:	4808      	ldr	r0, [pc, #32]	@ (8001e08 <ButtonReadState+0x34>)
 8001de6:	f001 fa33 	bl	8003250 <GPIOGetState>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf0c      	ite	eq
 8001df0:	2301      	moveq	r3, #1
 8001df2:	2300      	movne	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	e000      	b.n	8001dfa <ButtonReadState+0x26>
	}

	return 0;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000398 	.word	0x20000398
 8001e08:	2000046c 	.word	0x2000046c

08001e0c <ApplicationInit>:

void ApplicationInit(void) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0

	appInitialized = false;
 8001e10:	4b0f      	ldr	r3, [pc, #60]	@ (8001e50 <ApplicationInit+0x44>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]
	appRunning = false;
 8001e16:	4b0f      	ldr	r3, [pc, #60]	@ (8001e54 <ApplicationInit+0x48>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]

	UsbReportInit(&usbReport, USB_REPORT_IN_LITTLE_ENDIAN);
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	480e      	ldr	r0, [pc, #56]	@ (8001e58 <ApplicationInit+0x4c>)
 8001e20:	f7ff fe4e 	bl	8001ac0 <UsbReportInit>

	ButtonInit(&btnAccept, &ButtonReadState);
 8001e24:	490d      	ldr	r1, [pc, #52]	@ (8001e5c <ApplicationInit+0x50>)
 8001e26:	480e      	ldr	r0, [pc, #56]	@ (8001e60 <ApplicationInit+0x54>)
 8001e28:	f7ff f88e 	bl	8000f48 <ButtonInit>

	FFBInit(&ffbPitch, &pitchMotor, &pitchEncoder);
 8001e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e64 <ApplicationInit+0x58>)
 8001e2e:	490e      	ldr	r1, [pc, #56]	@ (8001e68 <ApplicationInit+0x5c>)
 8001e30:	480e      	ldr	r0, [pc, #56]	@ (8001e6c <ApplicationInit+0x60>)
 8001e32:	f7ff f9f7 	bl	8001224 <FFBInit>
	//FFBInit(&ffbRoll, &rollMotor, &rollEncoder);

	appInitialized = true;
 8001e36:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <ApplicationInit+0x44>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	701a      	strb	r2, [r3, #0]
	printf("Ready!\r\n");
 8001e3c:	480c      	ldr	r0, [pc, #48]	@ (8001e70 <ApplicationInit+0x64>)
 8001e3e:	f00b fceb 	bl	800d818 <puts>
//	}
//	while(ButtonIsPressed(&btnAccept)) {
//	}

	// Register callback for future presses
	ButtonSetStateChangedCallback(&btnAccept, &ButtonStateChangedCallback);
 8001e42:	490c      	ldr	r1, [pc, #48]	@ (8001e74 <ApplicationInit+0x68>)
 8001e44:	4806      	ldr	r0, [pc, #24]	@ (8001e60 <ApplicationInit+0x54>)
 8001e46:	f7ff f8fa 	bl	800103e <ButtonSetStateChangedCallback>

}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000396 	.word	0x20000396
 8001e54:	20000397 	.word	0x20000397
 8001e58:	20000350 	.word	0x20000350
 8001e5c:	08001dd5 	.word	0x08001dd5
 8001e60:	20000398 	.word	0x20000398
 8001e64:	20000424 	.word	0x20000424
 8001e68:	20000454 	.word	0x20000454
 8001e6c:	200003ac 	.word	0x200003ac
 8001e70:	0800f710 	.word	0x0800f710
 8001e74:	08001d81 	.word	0x08001d81

08001e78 <ApplicationRun>:

void ApplicationRun(void) {
 8001e78:	b5b0      	push	{r4, r5, r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af02      	add	r7, sp, #8
	appRunning = true;
 8001e7e:	4b4c      	ldr	r3, [pc, #304]	@ (8001fb0 <ApplicationRun+0x138>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]

	FFBHome(&ffbPitch);
 8001e84:	484b      	ldr	r0, [pc, #300]	@ (8001fb4 <ApplicationRun+0x13c>)
 8001e86:	f7ff fc07 	bl	8001698 <FFBHome>

	// Indicate homing is complete
	GPIOSetState(&gpioStatus, GPIO_HIGH);
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	484a      	ldr	r0, [pc, #296]	@ (8001fb8 <ApplicationRun+0x140>)
 8001e8e:	f001 f9fb 	bl	8003288 <GPIOSetState>

	// Remove spring force
	FFBSpringParam_t spring = {
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
 8001e9e:	f04f 0300 	mov.w	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]
			.minimumSpringForce = 0,
			.offset = 0,
			.strength = 0,
	};
	FFBSetSpringParams(&ffbPitch, spring);
 8001ea4:	edd7 6a00 	vldr	s13, [r7]
 8001ea8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001eac:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eb0:	eeb0 0a66 	vmov.f32	s0, s13
 8001eb4:	eef0 0a47 	vmov.f32	s1, s14
 8001eb8:	eeb0 1a67 	vmov.f32	s2, s15
 8001ebc:	483d      	ldr	r0, [pc, #244]	@ (8001fb4 <ApplicationRun+0x13c>)
 8001ebe:	f7ff fa4e 	bl	800135e <FFBSetSpringParams>

	// Application is now running in loop
	while(1) {
		if(flag_rx == 1){
 8001ec2:	4b3e      	ldr	r3, [pc, #248]	@ (8001fbc <ApplicationRun+0x144>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d15c      	bne.n	8001f84 <ApplicationRun+0x10c>

			flag_rx = 0;
 8001eca:	4b3c      	ldr	r3, [pc, #240]	@ (8001fbc <ApplicationRun+0x144>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]

			UsbReportLoad(&usbReport, report_buffer,
 8001ed0:	2210      	movs	r2, #16
 8001ed2:	493b      	ldr	r1, [pc, #236]	@ (8001fc0 <ApplicationRun+0x148>)
 8001ed4:	483b      	ldr	r0, [pc, #236]	@ (8001fc4 <ApplicationRun+0x14c>)
 8001ed6:	f7ff fe0a 	bl	8001aee <UsbReportLoad>
					USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
			switch(UsbReportGetReportId(&usbReport)) {
 8001eda:	483a      	ldr	r0, [pc, #232]	@ (8001fc4 <ApplicationRun+0x14c>)
 8001edc:	f7ff fe23 	bl	8001b26 <UsbReportGetReportId>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d002      	beq.n	8001eec <ApplicationRun+0x74>
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d004      	beq.n	8001ef4 <ApplicationRun+0x7c>
			case 0x02:
				ProcessUsbControlData(&usbReport);
				break;
			default:
				// Invalid reportID
				break;
 8001eea:	e007      	b.n	8001efc <ApplicationRun+0x84>
				ProcessUsbFFBData(&usbReport);
 8001eec:	4835      	ldr	r0, [pc, #212]	@ (8001fc4 <ApplicationRun+0x14c>)
 8001eee:	f000 f91f 	bl	8002130 <ProcessUsbFFBData>
				break;
 8001ef2:	e003      	b.n	8001efc <ApplicationRun+0x84>
				ProcessUsbControlData(&usbReport);
 8001ef4:	4833      	ldr	r0, [pc, #204]	@ (8001fc4 <ApplicationRun+0x14c>)
 8001ef6:	f000 f8c9 	bl	800208c <ProcessUsbControlData>
				break;
 8001efa:	bf00      	nop

			// TODO: Un-comment
//			int rollEncoderCountConstrained = Constrain(EncoderGetCount(
//					&rollEncoder), -32767, 32767);
			// TODO: Remove
			int rollEncoderCountConstrained = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
//					FFBGetMinControlRange(&ffbRoll),
//					FFBGetMaxControlRange(&ffbRoll),
//					-32767, 32767);

			// Prepare elevator axis
			int pitchEncoderCountConstrained = Constrain(EncoderGetCount(
 8001f00:	4831      	ldr	r0, [pc, #196]	@ (8001fc8 <ApplicationRun+0x150>)
 8001f02:	f7ff f8ee 	bl	80010e2 <EncoderGetCount>
 8001f06:	4604      	mov	r4, r0
					&pitchEncoder),
					FFBGetMinControlRange(&ffbPitch),
 8001f08:	482a      	ldr	r0, [pc, #168]	@ (8001fb4 <ApplicationRun+0x13c>)
 8001f0a:	f7ff fbac 	bl	8001666 <FFBGetMinControlRange>
 8001f0e:	4605      	mov	r5, r0
					FFBGetMaxControlRange(&ffbPitch));
 8001f10:	4828      	ldr	r0, [pc, #160]	@ (8001fb4 <ApplicationRun+0x13c>)
 8001f12:	f7ff fbb4 	bl	800167e <FFBGetMaxControlRange>
 8001f16:	4603      	mov	r3, r0
			int pitchEncoderCountConstrained = Constrain(EncoderGetCount(
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4629      	mov	r1, r5
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	f7ff fede 	bl	8001cde <Constrain>
 8001f22:	6138      	str	r0, [r7, #16]

			// Map pitch values to pitch control range
			int16_t elevator = (int16_t)Map(pitchEncoderCountConstrained,
					FFBGetMinControlRange(&ffbPitch),
 8001f24:	4823      	ldr	r0, [pc, #140]	@ (8001fb4 <ApplicationRun+0x13c>)
 8001f26:	f7ff fb9e 	bl	8001666 <FFBGetMinControlRange>
 8001f2a:	4604      	mov	r4, r0
					FFBGetMaxControlRange(&ffbPitch),
 8001f2c:	4821      	ldr	r0, [pc, #132]	@ (8001fb4 <ApplicationRun+0x13c>)
 8001f2e:	f7ff fba6 	bl	800167e <FFBGetMaxControlRange>
 8001f32:	4602      	mov	r2, r0
			int16_t elevator = (int16_t)Map(pitchEncoderCountConstrained,
 8001f34:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	4b24      	ldr	r3, [pc, #144]	@ (8001fcc <ApplicationRun+0x154>)
 8001f3c:	4621      	mov	r1, r4
 8001f3e:	6938      	ldr	r0, [r7, #16]
 8001f40:	f7ff fe9b 	bl	8001c7a <Map>
 8001f44:	4603      	mov	r3, r0
 8001f46:	81fb      	strh	r3, [r7, #14]
					-32767, 32767);

			// Set report ID to 1 (Data)
			reportTxBuffer[0] = 0x01;
 8001f48:	4b21      	ldr	r3, [pc, #132]	@ (8001fd0 <ApplicationRun+0x158>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]
			reportTxBuffer[1] = 0;//aileron & 0xFF;
 8001f4e:	4b20      	ldr	r3, [pc, #128]	@ (8001fd0 <ApplicationRun+0x158>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	705a      	strb	r2, [r3, #1]
			reportTxBuffer[2] = 0;//aileron >> 8;
 8001f54:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd0 <ApplicationRun+0x158>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	709a      	strb	r2, [r3, #2]
			reportTxBuffer[3] = elevator >> 8;
 8001f5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f5e:	121b      	asrs	r3, r3, #8
 8001f60:	b21b      	sxth	r3, r3
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd0 <ApplicationRun+0x158>)
 8001f66:	70da      	strb	r2, [r3, #3]
			reportTxBuffer[4] = elevator & 0xFF;
 8001f68:	89fb      	ldrh	r3, [r7, #14]
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	4b18      	ldr	r3, [pc, #96]	@ (8001fd0 <ApplicationRun+0x158>)
 8001f6e:	711a      	strb	r2, [r3, #4]

			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, reportTxBuffer, 5);
 8001f70:	2205      	movs	r2, #5
 8001f72:	4917      	ldr	r1, [pc, #92]	@ (8001fd0 <ApplicationRun+0x158>)
 8001f74:	4817      	ldr	r0, [pc, #92]	@ (8001fd4 <ApplicationRun+0x15c>)
 8001f76:	f007 fd91 	bl	8009a9c <USBD_CUSTOM_HID_SendReport>

			usbPacketCount++;
 8001f7a:	4b17      	ldr	r3, [pc, #92]	@ (8001fd8 <ApplicationRun+0x160>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	4a15      	ldr	r2, [pc, #84]	@ (8001fd8 <ApplicationRun+0x160>)
 8001f82:	6013      	str	r3, [r2, #0]
		}

		angle = (EncoderGetCount(&rollEncoder)/49152.0f)*360.0f;
 8001f84:	4815      	ldr	r0, [pc, #84]	@ (8001fdc <ApplicationRun+0x164>)
 8001f86:	f7ff f8ac 	bl	80010e2 <EncoderGetCount>
 8001f8a:	ee07 0a90 	vmov	s15, r0
 8001f8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f92:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001fe0 <ApplicationRun+0x168>
 8001f96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f9a:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001fe4 <ApplicationRun+0x16c>
 8001f9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fa2:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <ApplicationRun+0x170>)
 8001fa4:	edc3 7a00 	vstr	s15, [r3]

		HAL_Delay(5);
 8001fa8:	2005      	movs	r0, #5
 8001faa:	f001 fa25 	bl	80033f8 <HAL_Delay>
		if(flag_rx == 1){
 8001fae:	e788      	b.n	8001ec2 <ApplicationRun+0x4a>
 8001fb0:	20000397 	.word	0x20000397
 8001fb4:	200003ac 	.word	0x200003ac
 8001fb8:	20000474 	.word	0x20000474
 8001fbc:	2000034c 	.word	0x2000034c
 8001fc0:	2000030c 	.word	0x2000030c
 8001fc4:	20000350 	.word	0x20000350
 8001fc8:	20000424 	.word	0x20000424
 8001fcc:	ffff8001 	.word	0xffff8001
 8001fd0:	20000304 	.word	0x20000304
 8001fd4:	20000658 	.word	0x20000658
 8001fd8:	20000420 	.word	0x20000420
 8001fdc:	2000043c 	.word	0x2000043c
 8001fe0:	47400000 	.word	0x47400000
 8001fe4:	43b40000 	.word	0x43b40000
 8001fe8:	2000041c 	.word	0x2000041c

08001fec <ApplicationUpdate>:

	}
}

void ApplicationUpdate(int deltaTimeUs) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	if(!appInitialized) {
 8001ff4:	4b08      	ldr	r3, [pc, #32]	@ (8002018 <ApplicationUpdate+0x2c>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	f083 0301 	eor.w	r3, r3, #1
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d106      	bne.n	8002010 <ApplicationUpdate+0x24>
		return;
	}

	ButtonProcessInt(&btnAccept);
 8002002:	4806      	ldr	r0, [pc, #24]	@ (800201c <ApplicationUpdate+0x30>)
 8002004:	f7fe ffca 	bl	8000f9c <ButtonProcessInt>
	ProcessEncoders(deltaTimeUs);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f809 	bl	8002020 <ProcessEncoders>
 800200e:	e000      	b.n	8002012 <ApplicationUpdate+0x26>
		return;
 8002010:	bf00      	nop

}
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000396 	.word	0x20000396
 800201c:	20000398 	.word	0x20000398

08002020 <ProcessEncoders>:

void ProcessEncoders(int deltaTimeUs) {
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	EncoderUpdate(&pitchEncoder, deltaTimeUs);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	ee07 3a90 	vmov	s15, r3
 800202e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002032:	eeb0 0a67 	vmov.f32	s0, s15
 8002036:	4803      	ldr	r0, [pc, #12]	@ (8002044 <ProcessEncoders+0x24>)
 8002038:	f7ff f86d 	bl	8001116 <EncoderUpdate>
	//EncoderUpdate(&rollEncoder, deltaTimeUs);
}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000424 	.word	0x20000424

08002048 <ApplicationFFBUpdate>:

void ApplicationFFBUpdate(int deltaTimeUs) {
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
	if(!appInitialized || !appRunning) {
 8002050:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <ApplicationFFBUpdate+0x38>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	f083 0301 	eor.w	r3, r3, #1
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10b      	bne.n	8002076 <ApplicationFFBUpdate+0x2e>
 800205e:	4b09      	ldr	r3, [pc, #36]	@ (8002084 <ApplicationFFBUpdate+0x3c>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	f083 0301 	eor.w	r3, r3, #1
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d104      	bne.n	8002076 <ApplicationFFBUpdate+0x2e>
		return;
	}
	FFBUpdate(&ffbPitch, deltaTimeUs);
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4806      	ldr	r0, [pc, #24]	@ (8002088 <ApplicationFFBUpdate+0x40>)
 8002070:	f7ff fa74 	bl	800155c <FFBUpdate>
 8002074:	e000      	b.n	8002078 <ApplicationFFBUpdate+0x30>
		return;
 8002076:	bf00      	nop
	//FFBUpdate(&ffbRoll, deltaTimeUs);
}
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000396 	.word	0x20000396
 8002084:	20000397 	.word	0x20000397
 8002088:	200003ac 	.word	0x200003ac

0800208c <ProcessUsbControlData>:

void ProcessUsbControlData(UsbReport_t *usbReport) {
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	// Parse USB report fields
	bool ffbOn = UsbReportParseNextByte(usbReport) == 0x01 ? true : false;
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff fd73 	bl	8001b80 <UsbReportParseNextByte>
 800209a:	4603      	mov	r3, r0
 800209c:	2b01      	cmp	r3, #1
 800209e:	bf0c      	ite	eq
 80020a0:	2301      	moveq	r3, #1
 80020a2:	2300      	movne	r3, #0
 80020a4:	77fb      	strb	r3, [r7, #31]
	int aileronRangeInDeg = UsbReportParseNextInt(usbReport);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff fd49 	bl	8001b3e <UsbReportParseNextInt>
 80020ac:	61b8      	str	r0, [r7, #24]
	int elevatorRangeInMM = UsbReportParseNextInt(usbReport);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff fd45 	bl	8001b3e <UsbReportParseNextInt>
 80020b4:	6178      	str	r0, [r7, #20]

	// FFB ON/OFF
	if(ffbOn) {
 80020b6:	7ffb      	ldrb	r3, [r7, #31]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <ProcessUsbControlData+0x38>
		//FFBStart(&ffbRoll);
		FFBStart(&ffbPitch);
 80020bc:	481a      	ldr	r0, [pc, #104]	@ (8002128 <ProcessUsbControlData+0x9c>)
 80020be:	f7ff faa7 	bl	8001610 <FFBStart>
 80020c2:	e002      	b.n	80020ca <ProcessUsbControlData+0x3e>
	}
	else {
		//FFBStop(&ffbRoll);
		FFBStop(&ffbPitch);
 80020c4:	4818      	ldr	r0, [pc, #96]	@ (8002128 <ProcessUsbControlData+0x9c>)
 80020c6:	f7ff fa92 	bl	80015ee <FFBStop>
	}

	/** FFB Control Ranges **/

	// Aileron encoder range
	int aileronEncoderRange = aileronRangeInDeg *
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	ee07 3a90 	vmov	s15, r3
 80020d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d4:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 80020d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020e0:	ee17 3a90 	vmov	r3, s15
 80020e4:	613b      	str	r3, [r7, #16]
			PULLEY_AILERON_ENCODER_STEP_PER_DEGREE;
//	FFBSetControlRange(&ffbRoll, -aileronEncoderRange/2, aileronEncoderRange/2);

	// Elevator encoder range
	int elevatorEncoderRange = elevatorRangeInMM *
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	ee07 3a90 	vmov	s15, r3
 80020ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020f0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800212c <ProcessUsbControlData+0xa0>
 80020f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020fc:	ee17 3a90 	vmov	r3, s15
 8002100:	60fb      	str	r3, [r7, #12]
			PULLEY_ELEVATOR_ENCODER_STEP_PER_MM;
	FFBSetControlRange(&ffbPitch, -elevatorEncoderRange/2,
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	0fda      	lsrs	r2, r3, #31
 8002106:	4413      	add	r3, r2
 8002108:	105b      	asrs	r3, r3, #1
 800210a:	425b      	negs	r3, r3
 800210c:	4619      	mov	r1, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	0fda      	lsrs	r2, r3, #31
 8002112:	4413      	add	r3, r2
 8002114:	105b      	asrs	r3, r3, #1
 8002116:	461a      	mov	r2, r3
 8002118:	4803      	ldr	r0, [pc, #12]	@ (8002128 <ProcessUsbControlData+0x9c>)
 800211a:	f7ff fa92 	bl	8001642 <FFBSetControlRange>
			elevatorEncoderRange/2);

}
 800211e:	bf00      	nop
 8002120:	3720      	adds	r7, #32
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200003ac 	.word	0x200003ac
 800212c:	434cc8fb 	.word	0x434cc8fb

08002130 <ProcessUsbFFBData>:

void ProcessUsbFFBData(UsbReport_t *usbReport) {
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
	// Parse USB report fields
	float rollForce = UsbReportParseNextFloat(usbReport);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff fd3c 	bl	8001bb6 <UsbReportParseNextFloat>
 800213e:	ed87 0a03 	vstr	s0, [r7, #12]
	float pitchForce = UsbReportParseNextFloat(usbReport);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff fd37 	bl	8001bb6 <UsbReportParseNextFloat>
 8002148:	ed87 0a02 	vstr	s0, [r7, #8]

	// Assign forces
//	FFBSetConstantStrength(&ffbRoll, rollForce);
	FFBSetConstantStrength(&ffbPitch, pitchForce);
 800214c:	ed97 0a02 	vldr	s0, [r7, #8]
 8002150:	4803      	ldr	r0, [pc, #12]	@ (8002160 <ProcessUsbFFBData+0x30>)
 8002152:	f7ff f8f5 	bl	8001340 <FFBSetConstantStrength>
}
 8002156:	bf00      	nop
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	200003ac 	.word	0x200003ac

08002164 <BspInit>:
void SetupEncoders(void);
void SetupMotors(void);
void SetupButtons(void);
void SetupLEDs(void);

void BspInit(void) {
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
	SetupEncoders();
 8002168:	f000 f820 	bl	80021ac <SetupEncoders>
	SetupMotors();
 800216c:	f000 f852 	bl	8002214 <SetupMotors>
	SetupButtons();
 8002170:	f000 f884 	bl	800227c <SetupButtons>
	SetupLEDs();
 8002174:	f000 f890 	bl	8002298 <SetupLEDs>

	// --- Timer setup ----
	// Motor PWM timer
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002178:	2100      	movs	r1, #0
 800217a:	480a      	ldr	r0, [pc, #40]	@ (80021a4 <BspInit+0x40>)
 800217c:	f004 fbbe 	bl	80068fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002180:	2104      	movs	r1, #4
 8002182:	4808      	ldr	r0, [pc, #32]	@ (80021a4 <BspInit+0x40>)
 8002184:	f004 fbba 	bl	80068fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002188:	2108      	movs	r1, #8
 800218a:	4806      	ldr	r0, [pc, #24]	@ (80021a4 <BspInit+0x40>)
 800218c:	f004 fbb6 	bl	80068fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002190:	210c      	movs	r1, #12
 8002192:	4804      	ldr	r0, [pc, #16]	@ (80021a4 <BspInit+0x40>)
 8002194:	f004 fbb2 	bl	80068fc <HAL_TIM_PWM_Start>
	// Update timer
	HAL_TIM_Base_Start_IT(&htim10);
 8002198:	4803      	ldr	r0, [pc, #12]	@ (80021a8 <BspInit+0x44>)
 800219a:	f004 faf3 	bl	8006784 <HAL_TIM_Base_Start_IT>
	// Control loop timer
	//HAL_TIM_Base_Start_IT(&htim11);
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000574 	.word	0x20000574
 80021a8:	200005bc 	.word	0x200005bc

080021ac <SetupEncoders>:

void SetupEncoders(void) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
	// Pitch
	AS5600Init(&pitchAS5600, &hi2c1);
 80021b2:	4912      	ldr	r1, [pc, #72]	@ (80021fc <SetupEncoders+0x50>)
 80021b4:	4812      	ldr	r0, [pc, #72]	@ (8002200 <SetupEncoders+0x54>)
 80021b6:	f000 fddf 	bl	8002d78 <AS5600Init>
	EncoderInterface_t pitchEncoderI;
	AS5600InterfaceInit(&pitchEncoderI, &pitchAS5600);
 80021ba:	f107 0308 	add.w	r3, r7, #8
 80021be:	4910      	ldr	r1, [pc, #64]	@ (8002200 <SetupEncoders+0x54>)
 80021c0:	4618      	mov	r0, r3
 80021c2:	f000 fe41 	bl	8002e48 <AS5600InterfaceInit>
	EncoderInit(&pitchEncoder, pitchEncoderI);
 80021c6:	f107 0308 	add.w	r3, r7, #8
 80021ca:	e893 0006 	ldmia.w	r3, {r1, r2}
 80021ce:	480d      	ldr	r0, [pc, #52]	@ (8002204 <SetupEncoders+0x58>)
 80021d0:	f7fe ff62 	bl	8001098 <EncoderInit>

	// Roll
	AS5600Init(&rollAS5600, &hi2c3);
 80021d4:	490c      	ldr	r1, [pc, #48]	@ (8002208 <SetupEncoders+0x5c>)
 80021d6:	480d      	ldr	r0, [pc, #52]	@ (800220c <SetupEncoders+0x60>)
 80021d8:	f000 fdce 	bl	8002d78 <AS5600Init>
	EncoderInterface_t rollEncoderI;
	AS5600InterfaceInit(&rollEncoderI, &rollAS5600);
 80021dc:	463b      	mov	r3, r7
 80021de:	490b      	ldr	r1, [pc, #44]	@ (800220c <SetupEncoders+0x60>)
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 fe31 	bl	8002e48 <AS5600InterfaceInit>
	EncoderInit(&rollEncoder, rollEncoderI);
 80021e6:	463b      	mov	r3, r7
 80021e8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80021ec:	4808      	ldr	r0, [pc, #32]	@ (8002210 <SetupEncoders+0x64>)
 80021ee:	f7fe ff53 	bl	8001098 <EncoderInit>
}
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	200004cc 	.word	0x200004cc
 8002200:	2000047c 	.word	0x2000047c
 8002204:	20000424 	.word	0x20000424
 8002208:	20000520 	.word	0x20000520
 800220c:	20000480 	.word	0x20000480
 8002210:	2000043c 	.word	0x2000043c

08002214 <SetupMotors>:

void SetupMotors(void) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
	// Pitch
	// Initialize driver
	BTS7960Init(&pitchDriver, &htim3, TIM_PITCH_F_CH, TIM_PITCH_R_CH);
 800221a:	2304      	movs	r3, #4
 800221c:	2200      	movs	r2, #0
 800221e:	4912      	ldr	r1, [pc, #72]	@ (8002268 <SetupMotors+0x54>)
 8002220:	4812      	ldr	r0, [pc, #72]	@ (800226c <SetupMotors+0x58>)
 8002222:	f000 fe33 	bl	8002e8c <BTS7960Init>

	// Set up interface
	MotorInterface_t pitchMotorI;
	BTS7960InterfaceInit(&pitchMotorI, &pitchDriver);
 8002226:	f107 030c 	add.w	r3, r7, #12
 800222a:	4910      	ldr	r1, [pc, #64]	@ (800226c <SetupMotors+0x58>)
 800222c:	4618      	mov	r0, r3
 800222e:	f000 ffc7 	bl	80031c0 <BTS7960InterfaceInit>

	// Initialize motor
	MotorInit(&pitchMotor, pitchMotorI);
 8002232:	f107 030c 	add.w	r3, r7, #12
 8002236:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002238:	480d      	ldr	r0, [pc, #52]	@ (8002270 <SetupMotors+0x5c>)
 800223a:	f7ff fc1f 	bl	8001a7c <MotorInit>

	// Roll
	// Initialize driver
	BTS7960Init(&rollDriver, &htim3, TIM_ROLL_F_CH, TIM_ROLL_R_CH);
 800223e:	230c      	movs	r3, #12
 8002240:	2208      	movs	r2, #8
 8002242:	4909      	ldr	r1, [pc, #36]	@ (8002268 <SetupMotors+0x54>)
 8002244:	480b      	ldr	r0, [pc, #44]	@ (8002274 <SetupMotors+0x60>)
 8002246:	f000 fe21 	bl	8002e8c <BTS7960Init>

	// Set up interface
	MotorInterface_t rollMotorI;
	BTS7960InterfaceInit(&rollMotorI, &rollDriver);
 800224a:	463b      	mov	r3, r7
 800224c:	4909      	ldr	r1, [pc, #36]	@ (8002274 <SetupMotors+0x60>)
 800224e:	4618      	mov	r0, r3
 8002250:	f000 ffb6 	bl	80031c0 <BTS7960InterfaceInit>

	// Initialize motor
	MotorInit(&rollMotor, rollMotorI);
 8002254:	463b      	mov	r3, r7
 8002256:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002258:	4807      	ldr	r0, [pc, #28]	@ (8002278 <SetupMotors+0x64>)
 800225a:	f7ff fc0f 	bl	8001a7c <MotorInit>
}
 800225e:	bf00      	nop
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000574 	.word	0x20000574
 800226c:	20000484 	.word	0x20000484
 8002270:	20000454 	.word	0x20000454
 8002274:	200004a8 	.word	0x200004a8
 8002278:	20000460 	.word	0x20000460

0800227c <SetupButtons>:

void SetupButtons(void) {
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
	GPIOInit(&gpioAccept, BUTTON_ACCEPT_GPIO_Port, BUTTON_ACCEPT_Pin);
 8002280:	2201      	movs	r2, #1
 8002282:	4903      	ldr	r1, [pc, #12]	@ (8002290 <SetupButtons+0x14>)
 8002284:	4803      	ldr	r0, [pc, #12]	@ (8002294 <SetupButtons+0x18>)
 8002286:	f000 ffd0 	bl	800322a <GPIOInit>
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40020000 	.word	0x40020000
 8002294:	2000046c 	.word	0x2000046c

08002298 <SetupLEDs>:

void SetupLEDs(void) {
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
	GPIOInit(&gpioStatus, STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 800229c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022a0:	4902      	ldr	r1, [pc, #8]	@ (80022ac <SetupLEDs+0x14>)
 80022a2:	4803      	ldr	r0, [pc, #12]	@ (80022b0 <SetupLEDs+0x18>)
 80022a4:	f000 ffc1 	bl	800322a <GPIOInit>
}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40020800 	.word	0x40020800
 80022b0:	20000474 	.word	0x20000474

080022b4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80022bc:	1d39      	adds	r1, r7, #4
 80022be:	f04f 33ff 	mov.w	r3, #4294967295
 80022c2:	2201      	movs	r2, #1
 80022c4:	4803      	ldr	r0, [pc, #12]	@ (80022d4 <__io_putchar+0x20>)
 80022c6:	f005 fa15 	bl	80076f4 <HAL_UART_Transmit>
  return ch;
 80022ca:	687b      	ldr	r3, [r7, #4]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000604 	.word	0x20000604

080022d8 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart1);
 80022e2:	2300      	movs	r3, #0
 80022e4:	603b      	str	r3, [r7, #0]
 80022e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002320 <__io_getchar+0x48>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	603b      	str	r3, [r7, #0]
 80022ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002320 <__io_getchar+0x48>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	603b      	str	r3, [r7, #0]
 80022f6:	683b      	ldr	r3, [r7, #0]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80022f8:	1df9      	adds	r1, r7, #7
 80022fa:	f04f 33ff 	mov.w	r3, #4294967295
 80022fe:	2201      	movs	r2, #1
 8002300:	4807      	ldr	r0, [pc, #28]	@ (8002320 <__io_getchar+0x48>)
 8002302:	f005 fa82 	bl	800780a <HAL_UART_Receive>
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002306:	1df9      	adds	r1, r7, #7
 8002308:	f04f 33ff 	mov.w	r3, #4294967295
 800230c:	2201      	movs	r2, #1
 800230e:	4804      	ldr	r0, [pc, #16]	@ (8002320 <__io_getchar+0x48>)
 8002310:	f005 f9f0 	bl	80076f4 <HAL_UART_Transmit>
  return ch;
 8002314:	79fb      	ldrb	r3, [r7, #7]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000604 	.word	0x20000604

08002324 <HAL_TIM_PeriodElapsedCallback>:

/* Interrupt Service Routines (ISR)*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	if(htim == &htim10) {
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a07      	ldr	r2, [pc, #28]	@ (800234c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d107      	bne.n	8002344 <HAL_TIM_PeriodElapsedCallback+0x20>
		ApplicationUpdate(5000);
 8002334:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002338:	f7ff fe58 	bl	8001fec <ApplicationUpdate>
		ApplicationFFBUpdate(5000);
 800233c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002340:	f7ff fe82 	bl	8002048 <ApplicationFFBUpdate>
	}
}
 8002344:	bf00      	nop
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	200005bc 	.word	0x200005bc

08002350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002354:	f000 ffde 	bl	8003314 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002358:	f000 f81c 	bl	8002394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800235c:	f000 f9c4 	bl	80026e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002360:	f000 f880 	bl	8002464 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002364:	f000 f8ac 	bl	80024c0 <MX_I2C3_Init>
  MX_TIM3_Init();
 8002368:	f000 f8d8 	bl	800251c <MX_TIM3_Init>
  MX_TIM10_Init();
 800236c:	f000 f96e 	bl	800264c <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8002370:	f000 f990 	bl	8002694 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8002374:	f008 ffdc 	bl	800b330 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  delayMsInit(&HAL_Delay);
 8002378:	4805      	ldr	r0, [pc, #20]	@ (8002390 <main+0x40>)
 800237a:	f7fe fe6f 	bl	800105c <delayMsInit>

  BspInit();
 800237e:	f7ff fef1 	bl	8002164 <BspInit>
  ApplicationInit();
 8002382:	f7ff fd43 	bl	8001e0c <ApplicationInit>
  ApplicationRun();
 8002386:	f7ff fd77 	bl	8001e78 <ApplicationRun>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800238a:	bf00      	nop
 800238c:	e7fd      	b.n	800238a <main+0x3a>
 800238e:	bf00      	nop
 8002390:	080033f9 	.word	0x080033f9

08002394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b094      	sub	sp, #80	@ 0x50
 8002398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800239a:	f107 0320 	add.w	r3, r7, #32
 800239e:	2230      	movs	r2, #48	@ 0x30
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f00b fb18 	bl	800d9d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023a8:	f107 030c 	add.w	r3, r7, #12
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023b8:	2300      	movs	r3, #0
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	4b27      	ldr	r3, [pc, #156]	@ (800245c <SystemClock_Config+0xc8>)
 80023be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c0:	4a26      	ldr	r2, [pc, #152]	@ (800245c <SystemClock_Config+0xc8>)
 80023c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80023c8:	4b24      	ldr	r3, [pc, #144]	@ (800245c <SystemClock_Config+0xc8>)
 80023ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023d4:	2300      	movs	r3, #0
 80023d6:	607b      	str	r3, [r7, #4]
 80023d8:	4b21      	ldr	r3, [pc, #132]	@ (8002460 <SystemClock_Config+0xcc>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a20      	ldr	r2, [pc, #128]	@ (8002460 <SystemClock_Config+0xcc>)
 80023de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002460 <SystemClock_Config+0xcc>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023f0:	2301      	movs	r3, #1
 80023f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023fa:	2302      	movs	r3, #2
 80023fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002402:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002404:	2319      	movs	r3, #25
 8002406:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002408:	23c0      	movs	r3, #192	@ 0xc0
 800240a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800240c:	2302      	movs	r3, #2
 800240e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002410:	2304      	movs	r3, #4
 8002412:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002414:	f107 0320 	add.w	r3, r7, #32
 8002418:	4618      	mov	r0, r3
 800241a:	f003 fd0b 	bl	8005e34 <HAL_RCC_OscConfig>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002424:	f000 f9e2 	bl	80027ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002428:	230f      	movs	r3, #15
 800242a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800242c:	2302      	movs	r3, #2
 800242e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002434:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002438:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800243e:	f107 030c 	add.w	r3, r7, #12
 8002442:	2103      	movs	r1, #3
 8002444:	4618      	mov	r0, r3
 8002446:	f003 ff6d 	bl	8006324 <HAL_RCC_ClockConfig>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002450:	f000 f9cc 	bl	80027ec <Error_Handler>
  }
}
 8002454:	bf00      	nop
 8002456:	3750      	adds	r7, #80	@ 0x50
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40023800 	.word	0x40023800
 8002460:	40007000 	.word	0x40007000

08002464 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002468:	4b12      	ldr	r3, [pc, #72]	@ (80024b4 <MX_I2C1_Init+0x50>)
 800246a:	4a13      	ldr	r2, [pc, #76]	@ (80024b8 <MX_I2C1_Init+0x54>)
 800246c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800246e:	4b11      	ldr	r3, [pc, #68]	@ (80024b4 <MX_I2C1_Init+0x50>)
 8002470:	4a12      	ldr	r2, [pc, #72]	@ (80024bc <MX_I2C1_Init+0x58>)
 8002472:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002474:	4b0f      	ldr	r3, [pc, #60]	@ (80024b4 <MX_I2C1_Init+0x50>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800247a:	4b0e      	ldr	r3, [pc, #56]	@ (80024b4 <MX_I2C1_Init+0x50>)
 800247c:	2200      	movs	r2, #0
 800247e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002480:	4b0c      	ldr	r3, [pc, #48]	@ (80024b4 <MX_I2C1_Init+0x50>)
 8002482:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002486:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002488:	4b0a      	ldr	r3, [pc, #40]	@ (80024b4 <MX_I2C1_Init+0x50>)
 800248a:	2200      	movs	r2, #0
 800248c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800248e:	4b09      	ldr	r3, [pc, #36]	@ (80024b4 <MX_I2C1_Init+0x50>)
 8002490:	2200      	movs	r2, #0
 8002492:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002494:	4b07      	ldr	r3, [pc, #28]	@ (80024b4 <MX_I2C1_Init+0x50>)
 8002496:	2200      	movs	r2, #0
 8002498:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800249a:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <MX_I2C1_Init+0x50>)
 800249c:	2200      	movs	r2, #0
 800249e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024a0:	4804      	ldr	r0, [pc, #16]	@ (80024b4 <MX_I2C1_Init+0x50>)
 80024a2:	f001 fa95 	bl	80039d0 <HAL_I2C_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024ac:	f000 f99e 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	200004cc 	.word	0x200004cc
 80024b8:	40005400 	.word	0x40005400
 80024bc:	000186a0 	.word	0x000186a0

080024c0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80024c4:	4b12      	ldr	r3, [pc, #72]	@ (8002510 <MX_I2C3_Init+0x50>)
 80024c6:	4a13      	ldr	r2, [pc, #76]	@ (8002514 <MX_I2C3_Init+0x54>)
 80024c8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80024ca:	4b11      	ldr	r3, [pc, #68]	@ (8002510 <MX_I2C3_Init+0x50>)
 80024cc:	4a12      	ldr	r2, [pc, #72]	@ (8002518 <MX_I2C3_Init+0x58>)
 80024ce:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002510 <MX_I2C3_Init+0x50>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80024d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002510 <MX_I2C3_Init+0x50>)
 80024d8:	2200      	movs	r2, #0
 80024da:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002510 <MX_I2C3_Init+0x50>)
 80024de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024e2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002510 <MX_I2C3_Init+0x50>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80024ea:	4b09      	ldr	r3, [pc, #36]	@ (8002510 <MX_I2C3_Init+0x50>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024f0:	4b07      	ldr	r3, [pc, #28]	@ (8002510 <MX_I2C3_Init+0x50>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024f6:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <MX_I2C3_Init+0x50>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80024fc:	4804      	ldr	r0, [pc, #16]	@ (8002510 <MX_I2C3_Init+0x50>)
 80024fe:	f001 fa67 	bl	80039d0 <HAL_I2C_Init>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002508:	f000 f970 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800250c:	bf00      	nop
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000520 	.word	0x20000520
 8002514:	40005c00 	.word	0x40005c00
 8002518:	000186a0 	.word	0x000186a0

0800251c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08e      	sub	sp, #56	@ 0x38
 8002520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002522:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	609a      	str	r2, [r3, #8]
 800252e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002530:	f107 0320 	add.w	r3, r7, #32
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800253a:	1d3b      	adds	r3, r7, #4
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
 8002548:	615a      	str	r2, [r3, #20]
 800254a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800254c:	4b3d      	ldr	r3, [pc, #244]	@ (8002644 <MX_TIM3_Init+0x128>)
 800254e:	4a3e      	ldr	r2, [pc, #248]	@ (8002648 <MX_TIM3_Init+0x12c>)
 8002550:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002552:	4b3c      	ldr	r3, [pc, #240]	@ (8002644 <MX_TIM3_Init+0x128>)
 8002554:	2200      	movs	r2, #0
 8002556:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002558:	4b3a      	ldr	r3, [pc, #232]	@ (8002644 <MX_TIM3_Init+0x128>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4800-1;
 800255e:	4b39      	ldr	r3, [pc, #228]	@ (8002644 <MX_TIM3_Init+0x128>)
 8002560:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8002564:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002566:	4b37      	ldr	r3, [pc, #220]	@ (8002644 <MX_TIM3_Init+0x128>)
 8002568:	2200      	movs	r2, #0
 800256a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800256c:	4b35      	ldr	r3, [pc, #212]	@ (8002644 <MX_TIM3_Init+0x128>)
 800256e:	2280      	movs	r2, #128	@ 0x80
 8002570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002572:	4834      	ldr	r0, [pc, #208]	@ (8002644 <MX_TIM3_Init+0x128>)
 8002574:	f004 f8b6 	bl	80066e4 <HAL_TIM_Base_Init>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800257e:	f000 f935 	bl	80027ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002582:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002586:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002588:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800258c:	4619      	mov	r1, r3
 800258e:	482d      	ldr	r0, [pc, #180]	@ (8002644 <MX_TIM3_Init+0x128>)
 8002590:	f004 fc16 	bl	8006dc0 <HAL_TIM_ConfigClockSource>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800259a:	f000 f927 	bl	80027ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800259e:	4829      	ldr	r0, [pc, #164]	@ (8002644 <MX_TIM3_Init+0x128>)
 80025a0:	f004 f952 	bl	8006848 <HAL_TIM_PWM_Init>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80025aa:	f000 f91f 	bl	80027ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ae:	2300      	movs	r3, #0
 80025b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025b6:	f107 0320 	add.w	r3, r7, #32
 80025ba:	4619      	mov	r1, r3
 80025bc:	4821      	ldr	r0, [pc, #132]	@ (8002644 <MX_TIM3_Init+0x128>)
 80025be:	f004 ffc7 	bl	8007550 <HAL_TIMEx_MasterConfigSynchronization>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80025c8:	f000 f910 	bl	80027ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025cc:	2360      	movs	r3, #96	@ 0x60
 80025ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025dc:	1d3b      	adds	r3, r7, #4
 80025de:	2200      	movs	r2, #0
 80025e0:	4619      	mov	r1, r3
 80025e2:	4818      	ldr	r0, [pc, #96]	@ (8002644 <MX_TIM3_Init+0x128>)
 80025e4:	f004 fb2a 	bl	8006c3c <HAL_TIM_PWM_ConfigChannel>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80025ee:	f000 f8fd 	bl	80027ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025f2:	1d3b      	adds	r3, r7, #4
 80025f4:	2204      	movs	r2, #4
 80025f6:	4619      	mov	r1, r3
 80025f8:	4812      	ldr	r0, [pc, #72]	@ (8002644 <MX_TIM3_Init+0x128>)
 80025fa:	f004 fb1f 	bl	8006c3c <HAL_TIM_PWM_ConfigChannel>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002604:	f000 f8f2 	bl	80027ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002608:	1d3b      	adds	r3, r7, #4
 800260a:	2208      	movs	r2, #8
 800260c:	4619      	mov	r1, r3
 800260e:	480d      	ldr	r0, [pc, #52]	@ (8002644 <MX_TIM3_Init+0x128>)
 8002610:	f004 fb14 	bl	8006c3c <HAL_TIM_PWM_ConfigChannel>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800261a:	f000 f8e7 	bl	80027ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	220c      	movs	r2, #12
 8002622:	4619      	mov	r1, r3
 8002624:	4807      	ldr	r0, [pc, #28]	@ (8002644 <MX_TIM3_Init+0x128>)
 8002626:	f004 fb09 	bl	8006c3c <HAL_TIM_PWM_ConfigChannel>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002630:	f000 f8dc 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002634:	4803      	ldr	r0, [pc, #12]	@ (8002644 <MX_TIM3_Init+0x128>)
 8002636:	f000 f9e1 	bl	80029fc <HAL_TIM_MspPostInit>

}
 800263a:	bf00      	nop
 800263c:	3738      	adds	r7, #56	@ 0x38
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000574 	.word	0x20000574
 8002648:	40000400 	.word	0x40000400

0800264c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002650:	4b0e      	ldr	r3, [pc, #56]	@ (800268c <MX_TIM10_Init+0x40>)
 8002652:	4a0f      	ldr	r2, [pc, #60]	@ (8002690 <MX_TIM10_Init+0x44>)
 8002654:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 96-1;
 8002656:	4b0d      	ldr	r3, [pc, #52]	@ (800268c <MX_TIM10_Init+0x40>)
 8002658:	225f      	movs	r2, #95	@ 0x5f
 800265a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800265c:	4b0b      	ldr	r3, [pc, #44]	@ (800268c <MX_TIM10_Init+0x40>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 5000-1;
 8002662:	4b0a      	ldr	r3, [pc, #40]	@ (800268c <MX_TIM10_Init+0x40>)
 8002664:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002668:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800266a:	4b08      	ldr	r3, [pc, #32]	@ (800268c <MX_TIM10_Init+0x40>)
 800266c:	2200      	movs	r2, #0
 800266e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002670:	4b06      	ldr	r3, [pc, #24]	@ (800268c <MX_TIM10_Init+0x40>)
 8002672:	2280      	movs	r2, #128	@ 0x80
 8002674:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002676:	4805      	ldr	r0, [pc, #20]	@ (800268c <MX_TIM10_Init+0x40>)
 8002678:	f004 f834 	bl	80066e4 <HAL_TIM_Base_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002682:	f000 f8b3 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	200005bc 	.word	0x200005bc
 8002690:	40014400 	.word	0x40014400

08002694 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002698:	4b11      	ldr	r3, [pc, #68]	@ (80026e0 <MX_USART1_UART_Init+0x4c>)
 800269a:	4a12      	ldr	r2, [pc, #72]	@ (80026e4 <MX_USART1_UART_Init+0x50>)
 800269c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800269e:	4b10      	ldr	r3, [pc, #64]	@ (80026e0 <MX_USART1_UART_Init+0x4c>)
 80026a0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80026a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026a6:	4b0e      	ldr	r3, [pc, #56]	@ (80026e0 <MX_USART1_UART_Init+0x4c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026ac:	4b0c      	ldr	r3, [pc, #48]	@ (80026e0 <MX_USART1_UART_Init+0x4c>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026b2:	4b0b      	ldr	r3, [pc, #44]	@ (80026e0 <MX_USART1_UART_Init+0x4c>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026b8:	4b09      	ldr	r3, [pc, #36]	@ (80026e0 <MX_USART1_UART_Init+0x4c>)
 80026ba:	220c      	movs	r2, #12
 80026bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026be:	4b08      	ldr	r3, [pc, #32]	@ (80026e0 <MX_USART1_UART_Init+0x4c>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c4:	4b06      	ldr	r3, [pc, #24]	@ (80026e0 <MX_USART1_UART_Init+0x4c>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026ca:	4805      	ldr	r0, [pc, #20]	@ (80026e0 <MX_USART1_UART_Init+0x4c>)
 80026cc:	f004 ffc2 	bl	8007654 <HAL_UART_Init>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026d6:	f000 f889 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000604 	.word	0x20000604
 80026e4:	40011000 	.word	0x40011000

080026e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08a      	sub	sp, #40	@ 0x28
 80026ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ee:	f107 0314 	add.w	r3, r7, #20
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	609a      	str	r2, [r3, #8]
 80026fa:	60da      	str	r2, [r3, #12]
 80026fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	4b37      	ldr	r3, [pc, #220]	@ (80027e0 <MX_GPIO_Init+0xf8>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	4a36      	ldr	r2, [pc, #216]	@ (80027e0 <MX_GPIO_Init+0xf8>)
 8002708:	f043 0304 	orr.w	r3, r3, #4
 800270c:	6313      	str	r3, [r2, #48]	@ 0x30
 800270e:	4b34      	ldr	r3, [pc, #208]	@ (80027e0 <MX_GPIO_Init+0xf8>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	4b30      	ldr	r3, [pc, #192]	@ (80027e0 <MX_GPIO_Init+0xf8>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002722:	4a2f      	ldr	r2, [pc, #188]	@ (80027e0 <MX_GPIO_Init+0xf8>)
 8002724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002728:	6313      	str	r3, [r2, #48]	@ 0x30
 800272a:	4b2d      	ldr	r3, [pc, #180]	@ (80027e0 <MX_GPIO_Init+0xf8>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	4b29      	ldr	r3, [pc, #164]	@ (80027e0 <MX_GPIO_Init+0xf8>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273e:	4a28      	ldr	r2, [pc, #160]	@ (80027e0 <MX_GPIO_Init+0xf8>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	6313      	str	r3, [r2, #48]	@ 0x30
 8002746:	4b26      	ldr	r3, [pc, #152]	@ (80027e0 <MX_GPIO_Init+0xf8>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	607b      	str	r3, [r7, #4]
 8002756:	4b22      	ldr	r3, [pc, #136]	@ (80027e0 <MX_GPIO_Init+0xf8>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	4a21      	ldr	r2, [pc, #132]	@ (80027e0 <MX_GPIO_Init+0xf8>)
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	6313      	str	r3, [r2, #48]	@ 0x30
 8002762:	4b1f      	ldr	r3, [pc, #124]	@ (80027e0 <MX_GPIO_Init+0xf8>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	607b      	str	r3, [r7, #4]
 800276c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 800276e:	2200      	movs	r2, #0
 8002770:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002774:	481b      	ldr	r0, [pc, #108]	@ (80027e4 <MX_GPIO_Init+0xfc>)
 8002776:	f001 f911 	bl	800399c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_PITCH_F_EN_Pin|MOTOR_PITCH_R_EN_Pin, GPIO_PIN_RESET);
 800277a:	2200      	movs	r2, #0
 800277c:	2130      	movs	r1, #48	@ 0x30
 800277e:	481a      	ldr	r0, [pc, #104]	@ (80027e8 <MX_GPIO_Init+0x100>)
 8002780:	f001 f90c 	bl	800399c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STATUS_LED_Pin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 8002784:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278a:	2301      	movs	r3, #1
 800278c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002792:	2300      	movs	r3, #0
 8002794:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 8002796:	f107 0314 	add.w	r3, r7, #20
 800279a:	4619      	mov	r1, r3
 800279c:	4811      	ldr	r0, [pc, #68]	@ (80027e4 <MX_GPIO_Init+0xfc>)
 800279e:	f000 ff61 	bl	8003664 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_ACCEPT_Pin */
  GPIO_InitStruct.Pin = BUTTON_ACCEPT_Pin;
 80027a2:	2301      	movs	r3, #1
 80027a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027aa:	2302      	movs	r3, #2
 80027ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_ACCEPT_GPIO_Port, &GPIO_InitStruct);
 80027ae:	f107 0314 	add.w	r3, r7, #20
 80027b2:	4619      	mov	r1, r3
 80027b4:	480c      	ldr	r0, [pc, #48]	@ (80027e8 <MX_GPIO_Init+0x100>)
 80027b6:	f000 ff55 	bl	8003664 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_PITCH_F_EN_Pin MOTOR_PITCH_R_EN_Pin */
  GPIO_InitStruct.Pin = MOTOR_PITCH_F_EN_Pin|MOTOR_PITCH_R_EN_Pin;
 80027ba:	2330      	movs	r3, #48	@ 0x30
 80027bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027be:	2301      	movs	r3, #1
 80027c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c6:	2300      	movs	r3, #0
 80027c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ca:	f107 0314 	add.w	r3, r7, #20
 80027ce:	4619      	mov	r1, r3
 80027d0:	4805      	ldr	r0, [pc, #20]	@ (80027e8 <MX_GPIO_Init+0x100>)
 80027d2:	f000 ff47 	bl	8003664 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027d6:	bf00      	nop
 80027d8:	3728      	adds	r7, #40	@ 0x28
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40020800 	.word	0x40020800
 80027e8:	40020000 	.word	0x40020000

080027ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027f0:	b672      	cpsid	i
}
 80027f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027f4:	bf00      	nop
 80027f6:	e7fd      	b.n	80027f4 <Error_Handler+0x8>

080027f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	607b      	str	r3, [r7, #4]
 8002802:	4b10      	ldr	r3, [pc, #64]	@ (8002844 <HAL_MspInit+0x4c>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002806:	4a0f      	ldr	r2, [pc, #60]	@ (8002844 <HAL_MspInit+0x4c>)
 8002808:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800280c:	6453      	str	r3, [r2, #68]	@ 0x44
 800280e:	4b0d      	ldr	r3, [pc, #52]	@ (8002844 <HAL_MspInit+0x4c>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002816:	607b      	str	r3, [r7, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	603b      	str	r3, [r7, #0]
 800281e:	4b09      	ldr	r3, [pc, #36]	@ (8002844 <HAL_MspInit+0x4c>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	4a08      	ldr	r2, [pc, #32]	@ (8002844 <HAL_MspInit+0x4c>)
 8002824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002828:	6413      	str	r3, [r2, #64]	@ 0x40
 800282a:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <HAL_MspInit+0x4c>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800

08002848 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08c      	sub	sp, #48	@ 0x30
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002850:	f107 031c 	add.w	r3, r7, #28
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a41      	ldr	r2, [pc, #260]	@ (800296c <HAL_I2C_MspInit+0x124>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d12c      	bne.n	80028c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	61bb      	str	r3, [r7, #24]
 800286e:	4b40      	ldr	r3, [pc, #256]	@ (8002970 <HAL_I2C_MspInit+0x128>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002872:	4a3f      	ldr	r2, [pc, #252]	@ (8002970 <HAL_I2C_MspInit+0x128>)
 8002874:	f043 0302 	orr.w	r3, r3, #2
 8002878:	6313      	str	r3, [r2, #48]	@ 0x30
 800287a:	4b3d      	ldr	r3, [pc, #244]	@ (8002970 <HAL_I2C_MspInit+0x128>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	61bb      	str	r3, [r7, #24]
 8002884:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002886:	23c0      	movs	r3, #192	@ 0xc0
 8002888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800288a:	2312      	movs	r3, #18
 800288c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288e:	2300      	movs	r3, #0
 8002890:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002892:	2303      	movs	r3, #3
 8002894:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002896:	2304      	movs	r3, #4
 8002898:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800289a:	f107 031c 	add.w	r3, r7, #28
 800289e:	4619      	mov	r1, r3
 80028a0:	4834      	ldr	r0, [pc, #208]	@ (8002974 <HAL_I2C_MspInit+0x12c>)
 80028a2:	f000 fedf 	bl	8003664 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	4b31      	ldr	r3, [pc, #196]	@ (8002970 <HAL_I2C_MspInit+0x128>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	4a30      	ldr	r2, [pc, #192]	@ (8002970 <HAL_I2C_MspInit+0x128>)
 80028b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80028b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002970 <HAL_I2C_MspInit+0x128>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80028c2:	e04f      	b.n	8002964 <HAL_I2C_MspInit+0x11c>
  else if(hi2c->Instance==I2C3)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002978 <HAL_I2C_MspInit+0x130>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d14a      	bne.n	8002964 <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	4b27      	ldr	r3, [pc, #156]	@ (8002970 <HAL_I2C_MspInit+0x128>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d6:	4a26      	ldr	r2, [pc, #152]	@ (8002970 <HAL_I2C_MspInit+0x128>)
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028de:	4b24      	ldr	r3, [pc, #144]	@ (8002970 <HAL_I2C_MspInit+0x128>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	4b20      	ldr	r3, [pc, #128]	@ (8002970 <HAL_I2C_MspInit+0x128>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002970 <HAL_I2C_MspInit+0x128>)
 80028f4:	f043 0302 	orr.w	r3, r3, #2
 80028f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002970 <HAL_I2C_MspInit+0x128>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002906:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800290a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800290c:	2312      	movs	r3, #18
 800290e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002914:	2303      	movs	r3, #3
 8002916:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002918:	2304      	movs	r3, #4
 800291a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291c:	f107 031c 	add.w	r3, r7, #28
 8002920:	4619      	mov	r1, r3
 8002922:	4816      	ldr	r0, [pc, #88]	@ (800297c <HAL_I2C_MspInit+0x134>)
 8002924:	f000 fe9e 	bl	8003664 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002928:	2310      	movs	r3, #16
 800292a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800292c:	2312      	movs	r3, #18
 800292e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002934:	2303      	movs	r3, #3
 8002936:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8002938:	2309      	movs	r3, #9
 800293a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293c:	f107 031c 	add.w	r3, r7, #28
 8002940:	4619      	mov	r1, r3
 8002942:	480c      	ldr	r0, [pc, #48]	@ (8002974 <HAL_I2C_MspInit+0x12c>)
 8002944:	f000 fe8e 	bl	8003664 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002948:	2300      	movs	r3, #0
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	4b08      	ldr	r3, [pc, #32]	@ (8002970 <HAL_I2C_MspInit+0x128>)
 800294e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002950:	4a07      	ldr	r2, [pc, #28]	@ (8002970 <HAL_I2C_MspInit+0x128>)
 8002952:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002956:	6413      	str	r3, [r2, #64]	@ 0x40
 8002958:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <HAL_I2C_MspInit+0x128>)
 800295a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	68bb      	ldr	r3, [r7, #8]
}
 8002964:	bf00      	nop
 8002966:	3730      	adds	r7, #48	@ 0x30
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40005400 	.word	0x40005400
 8002970:	40023800 	.word	0x40023800
 8002974:	40020400 	.word	0x40020400
 8002978:	40005c00 	.word	0x40005c00
 800297c:	40020000 	.word	0x40020000

08002980 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a18      	ldr	r2, [pc, #96]	@ (80029f0 <HAL_TIM_Base_MspInit+0x70>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d10e      	bne.n	80029b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	4b17      	ldr	r3, [pc, #92]	@ (80029f4 <HAL_TIM_Base_MspInit+0x74>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	4a16      	ldr	r2, [pc, #88]	@ (80029f4 <HAL_TIM_Base_MspInit+0x74>)
 800299c:	f043 0302 	orr.w	r3, r3, #2
 80029a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029a2:	4b14      	ldr	r3, [pc, #80]	@ (80029f4 <HAL_TIM_Base_MspInit+0x74>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80029ae:	e01a      	b.n	80029e6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a10      	ldr	r2, [pc, #64]	@ (80029f8 <HAL_TIM_Base_MspInit+0x78>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d115      	bne.n	80029e6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	4b0d      	ldr	r3, [pc, #52]	@ (80029f4 <HAL_TIM_Base_MspInit+0x74>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c2:	4a0c      	ldr	r2, [pc, #48]	@ (80029f4 <HAL_TIM_Base_MspInit+0x74>)
 80029c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ca:	4b0a      	ldr	r3, [pc, #40]	@ (80029f4 <HAL_TIM_Base_MspInit+0x74>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d2:	60bb      	str	r3, [r7, #8]
 80029d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80029d6:	2200      	movs	r2, #0
 80029d8:	2100      	movs	r1, #0
 80029da:	2019      	movs	r0, #25
 80029dc:	f000 fe0b 	bl	80035f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80029e0:	2019      	movs	r0, #25
 80029e2:	f000 fe24 	bl	800362e <HAL_NVIC_EnableIRQ>
}
 80029e6:	bf00      	nop
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40000400 	.word	0x40000400
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40014400 	.word	0x40014400

080029fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08a      	sub	sp, #40	@ 0x28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a21      	ldr	r2, [pc, #132]	@ (8002aa0 <HAL_TIM_MspPostInit+0xa4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d13b      	bne.n	8002a96 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]
 8002a22:	4b20      	ldr	r3, [pc, #128]	@ (8002aa4 <HAL_TIM_MspPostInit+0xa8>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a26:	4a1f      	ldr	r2, [pc, #124]	@ (8002aa4 <HAL_TIM_MspPostInit+0xa8>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa4 <HAL_TIM_MspPostInit+0xa8>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	4b19      	ldr	r3, [pc, #100]	@ (8002aa4 <HAL_TIM_MspPostInit+0xa8>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a42:	4a18      	ldr	r2, [pc, #96]	@ (8002aa4 <HAL_TIM_MspPostInit+0xa8>)
 8002a44:	f043 0302 	orr.w	r3, r3, #2
 8002a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a4a:	4b16      	ldr	r3, [pc, #88]	@ (8002aa4 <HAL_TIM_MspPostInit+0xa8>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_PITCH_F_PWM_Pin|MOTOR_PITCH_R_PWM_Pin;
 8002a56:	23c0      	movs	r3, #192	@ 0xc0
 8002a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a62:	2300      	movs	r3, #0
 8002a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a66:	2302      	movs	r3, #2
 8002a68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6a:	f107 0314 	add.w	r3, r7, #20
 8002a6e:	4619      	mov	r1, r3
 8002a70:	480d      	ldr	r0, [pc, #52]	@ (8002aa8 <HAL_TIM_MspPostInit+0xac>)
 8002a72:	f000 fdf7 	bl	8003664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_ROLL_F_PWM_Pin|MOTOR_ROLL_R_PWM_Pin;
 8002a76:	2303      	movs	r3, #3
 8002a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a82:	2300      	movs	r3, #0
 8002a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a86:	2302      	movs	r3, #2
 8002a88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a8a:	f107 0314 	add.w	r3, r7, #20
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4806      	ldr	r0, [pc, #24]	@ (8002aac <HAL_TIM_MspPostInit+0xb0>)
 8002a92:	f000 fde7 	bl	8003664 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002a96:	bf00      	nop
 8002a98:	3728      	adds	r7, #40	@ 0x28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40020000 	.word	0x40020000
 8002aac:	40020400 	.word	0x40020400

08002ab0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08a      	sub	sp, #40	@ 0x28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
 8002ac6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a19      	ldr	r2, [pc, #100]	@ (8002b34 <HAL_UART_MspInit+0x84>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d12c      	bne.n	8002b2c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	4b18      	ldr	r3, [pc, #96]	@ (8002b38 <HAL_UART_MspInit+0x88>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ada:	4a17      	ldr	r2, [pc, #92]	@ (8002b38 <HAL_UART_MspInit+0x88>)
 8002adc:	f043 0310 	orr.w	r3, r3, #16
 8002ae0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ae2:	4b15      	ldr	r3, [pc, #84]	@ (8002b38 <HAL_UART_MspInit+0x88>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae6:	f003 0310 	and.w	r3, r3, #16
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	4b11      	ldr	r3, [pc, #68]	@ (8002b38 <HAL_UART_MspInit+0x88>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	4a10      	ldr	r2, [pc, #64]	@ (8002b38 <HAL_UART_MspInit+0x88>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002afe:	4b0e      	ldr	r3, [pc, #56]	@ (8002b38 <HAL_UART_MspInit+0x88>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b0a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b10:	2302      	movs	r3, #2
 8002b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b1c:	2307      	movs	r3, #7
 8002b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b20:	f107 0314 	add.w	r3, r7, #20
 8002b24:	4619      	mov	r1, r3
 8002b26:	4805      	ldr	r0, [pc, #20]	@ (8002b3c <HAL_UART_MspInit+0x8c>)
 8002b28:	f000 fd9c 	bl	8003664 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002b2c:	bf00      	nop
 8002b2e:	3728      	adds	r7, #40	@ 0x28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40011000 	.word	0x40011000
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40020000 	.word	0x40020000

08002b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b44:	bf00      	nop
 8002b46:	e7fd      	b.n	8002b44 <NMI_Handler+0x4>

08002b48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b4c:	bf00      	nop
 8002b4e:	e7fd      	b.n	8002b4c <HardFault_Handler+0x4>

08002b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b54:	bf00      	nop
 8002b56:	e7fd      	b.n	8002b54 <MemManage_Handler+0x4>

08002b58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b5c:	bf00      	nop
 8002b5e:	e7fd      	b.n	8002b5c <BusFault_Handler+0x4>

08002b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b64:	bf00      	nop
 8002b66:	e7fd      	b.n	8002b64 <UsageFault_Handler+0x4>

08002b68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b6c:	bf00      	nop
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b76:	b480      	push	{r7}
 8002b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b88:	bf00      	nop
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b96:	f000 fc0f 	bl	80033b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002ba4:	4802      	ldr	r0, [pc, #8]	@ (8002bb0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002ba6:	f003 ff59 	bl	8006a5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	200005bc 	.word	0x200005bc

08002bb4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002bb8:	4802      	ldr	r0, [pc, #8]	@ (8002bc4 <OTG_FS_IRQHandler+0x10>)
 8002bba:	f002 f847 	bl	8004c4c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000b34 	.word	0x20000b34

08002bc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  return 1;
 8002bcc:	2301      	movs	r3, #1
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <_kill>:

int _kill(int pid, int sig)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002be2:	f00a ff4b 	bl	800da7c <__errno>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2216      	movs	r2, #22
 8002bea:	601a      	str	r2, [r3, #0]
  return -1;
 8002bec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <_exit>:

void _exit (int status)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c00:	f04f 31ff 	mov.w	r1, #4294967295
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7ff ffe7 	bl	8002bd8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c0a:	bf00      	nop
 8002c0c:	e7fd      	b.n	8002c0a <_exit+0x12>

08002c0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b086      	sub	sp, #24
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]
 8002c1e:	e00a      	b.n	8002c36 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c20:	f7ff fb5a 	bl	80022d8 <__io_getchar>
 8002c24:	4601      	mov	r1, r0
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	60ba      	str	r2, [r7, #8]
 8002c2c:	b2ca      	uxtb	r2, r1
 8002c2e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	3301      	adds	r3, #1
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	dbf0      	blt.n	8002c20 <_read+0x12>
  }

  return len;
 8002c3e:	687b      	ldr	r3, [r7, #4]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	e009      	b.n	8002c6e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	60ba      	str	r2, [r7, #8]
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fb26 	bl	80022b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	617b      	str	r3, [r7, #20]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	dbf1      	blt.n	8002c5a <_write+0x12>
  }
  return len;
 8002c76:	687b      	ldr	r3, [r7, #4]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <_close>:

int _close(int file)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ca8:	605a      	str	r2, [r3, #4]
  return 0;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <_isatty>:

int _isatty(int file)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cc0:	2301      	movs	r3, #1
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b085      	sub	sp, #20
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cf0:	4a14      	ldr	r2, [pc, #80]	@ (8002d44 <_sbrk+0x5c>)
 8002cf2:	4b15      	ldr	r3, [pc, #84]	@ (8002d48 <_sbrk+0x60>)
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cfc:	4b13      	ldr	r3, [pc, #76]	@ (8002d4c <_sbrk+0x64>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d102      	bne.n	8002d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d04:	4b11      	ldr	r3, [pc, #68]	@ (8002d4c <_sbrk+0x64>)
 8002d06:	4a12      	ldr	r2, [pc, #72]	@ (8002d50 <_sbrk+0x68>)
 8002d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d0a:	4b10      	ldr	r3, [pc, #64]	@ (8002d4c <_sbrk+0x64>)
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4413      	add	r3, r2
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d207      	bcs.n	8002d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d18:	f00a feb0 	bl	800da7c <__errno>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	220c      	movs	r2, #12
 8002d20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d22:	f04f 33ff 	mov.w	r3, #4294967295
 8002d26:	e009      	b.n	8002d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d28:	4b08      	ldr	r3, [pc, #32]	@ (8002d4c <_sbrk+0x64>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d2e:	4b07      	ldr	r3, [pc, #28]	@ (8002d4c <_sbrk+0x64>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4413      	add	r3, r2
 8002d36:	4a05      	ldr	r2, [pc, #20]	@ (8002d4c <_sbrk+0x64>)
 8002d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20020000 	.word	0x20020000
 8002d48:	00000400 	.word	0x00000400
 8002d4c:	2000064c 	.word	0x2000064c
 8002d50:	20001190 	.word	0x20001190

08002d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d58:	4b06      	ldr	r3, [pc, #24]	@ (8002d74 <SystemInit+0x20>)
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d5e:	4a05      	ldr	r2, [pc, #20]	@ (8002d74 <SystemInit+0x20>)
 8002d60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <AS5600Init>:
static uint8_t ReadRegister(AS5600_t *device, AS5600Reg reg);
static void ReadRegisterBurst(AS5600_t *device, AS5600Reg reg, uint8_t *data,
		uint8_t length);
static uint16_t ReadRegister16(AS5600_t *device, AS5600Reg reg);

void AS5600Init(AS5600_t *device, I2C_HandleTypeDef *hi2c) {
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
	device->hi2c = hi2c;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	601a      	str	r2, [r3, #0]
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <AS5600GetAngle>:

uint8_t AS5600GetStatus(AS5600_t *device) {
	return ReadRegister(device, AS5600_STATUS);
}

uint16_t AS5600GetAngle(AS5600_t *device) {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
	return ReadRegister16(device, AS5600_RAW_ANGLE_1);
 8002d9c:	210c      	movs	r1, #12
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f833 	bl	8002e0a <ReadRegister16>
 8002da4:	4603      	mov	r3, r0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <ReadRegisterBurst>:

	return data;
}

static void ReadRegisterBurst(AS5600_t *device, AS5600Reg reg, uint8_t *data,
		uint8_t length) {
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b088      	sub	sp, #32
 8002db2:	af02      	add	r7, sp, #8
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	607a      	str	r2, [r7, #4]
 8002db8:	461a      	mov	r2, r3
 8002dba:	460b      	mov	r3, r1
 8002dbc:	72fb      	strb	r3, [r7, #11]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	72bb      	strb	r3, [r7, #10]

	HAL_StatusTypeDef status;
	// Transmit register to access.
	status = HAL_I2C_Master_Transmit(device->hi2c, AS5600_I2C_ADDR, (uint8_t *)&reg, 1,
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	f107 020b 	add.w	r2, r7, #11
 8002dca:	f04f 33ff 	mov.w	r3, #4294967295
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	216c      	movs	r1, #108	@ 0x6c
 8002dd4:	f000 ff40 	bl	8003c58 <HAL_I2C_Master_Transmit>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	75fb      	strb	r3, [r7, #23]
			HAL_MAX_DELAY);
	if(status != HAL_OK) {
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10f      	bne.n	8002e02 <ReadRegisterBurst+0x54>
		return 0xFF;
	}

	// Receive data from specified register for specified length.
	status = HAL_I2C_Master_Receive(device->hi2c, AS5600_I2C_ADDR, data, length,
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6818      	ldr	r0, [r3, #0]
 8002de6:	7abb      	ldrb	r3, [r7, #10]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	f04f 32ff 	mov.w	r2, #4294967295
 8002dee:	9200      	str	r2, [sp, #0]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	216c      	movs	r1, #108	@ 0x6c
 8002df4:	f001 f82e 	bl	8003e54 <HAL_I2C_Master_Receive>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	75fb      	strb	r3, [r7, #23]
			HAL_MAX_DELAY);
	if(status != HAL_OK) {
 8002dfc:	7dfb      	ldrb	r3, [r7, #23]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	e000      	b.n	8002e04 <ReadRegisterBurst+0x56>
		return 0xFF;
 8002e02:	bf00      	nop
		return 0xFF;
	}
}
 8002e04:	3718      	adds	r7, #24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <ReadRegister16>:

static uint16_t ReadRegister16(AS5600_t *device, AS5600Reg reg) {
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b084      	sub	sp, #16
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	460b      	mov	r3, r1
 8002e14:	70fb      	strb	r3, [r7, #3]
	uint16_t data;
	ReadRegisterBurst(device, reg, (uint8_t *)&data, 2);
 8002e16:	f107 020c 	add.w	r2, r7, #12
 8002e1a:	78f9      	ldrb	r1, [r7, #3]
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ffc5 	bl	8002dae <ReadRegisterBurst>

	//swap byte order (to little endian)
	uint8_t temp = (uint8_t)(data >> 8);
 8002e24:	89bb      	ldrh	r3, [r7, #12]
 8002e26:	0a1b      	lsrs	r3, r3, #8
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	73fb      	strb	r3, [r7, #15]
	data = (data << 8) | temp;
 8002e2c:	89bb      	ldrh	r3, [r7, #12]
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	b21a      	sxth	r2, r3
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	b21b      	sxth	r3, r3
 8002e36:	4313      	orrs	r3, r2
 8002e38:	b21b      	sxth	r3, r3
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	81bb      	strh	r3, [r7, #12]

	return data;
 8002e3e:	89bb      	ldrh	r3, [r7, #12]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <AS5600InterfaceInit>:

// Private function prototypes
int GetEncoderSensorCount(EncoderInterface_t *interface);


void AS5600InterfaceInit(EncoderInterface_t *interface, AS5600_t *hwEncoder) {
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
	interface->hardwareEncoder = hwEncoder;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	601a      	str	r2, [r3, #0]
	interface->GetEncoderSensorCount = &GetEncoderSensorCount;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a04      	ldr	r2, [pc, #16]	@ (8002e6c <AS5600InterfaceInit+0x24>)
 8002e5c:	605a      	str	r2, [r3, #4]
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	08002e71 	.word	0x08002e71

08002e70 <GetEncoderSensorCount>:

int GetEncoderSensorCount(EncoderInterface_t *interface) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	return AS5600GetAngle((AS5600_t *)interface->hardwareEncoder);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff ff89 	bl	8002d94 <AS5600GetAngle>
 8002e82:	4603      	mov	r3, r0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <BTS7960Init>:
	// Ensure motor is powered off for safety
	BTS7960SetPower(driver, 0);
}

void BTS7960Init(BTS7960_t *driver, TIM_HandleTypeDef *htim,
		uint32_t forwardPwmCh, uint32_t reversePwmCh) {
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
 8002e98:	603b      	str	r3, [r7, #0]
	driver->enableInit = false;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
	driver->htim = htim;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	615a      	str	r2, [r3, #20]
	driver->forwardPwmCh = forwardPwmCh;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	619a      	str	r2, [r3, #24]
	driver->reversePwmCh = reversePwmCh;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	61da      	str	r2, [r3, #28]

	// Ensure motor is powered off for safety
	BTS7960SetPower(driver, 0);
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 f805 	bl	8002ec4 <BTS7960SetPower>
}
 8002eba:	bf00      	nop
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <BTS7960SetPower>:

void BTS7960SetPower(BTS7960_t *driver, int power) {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
	driver->power = Constrain(power, -BTS7690_MAX_PWM_POWER,
 8002ece:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8002ed2:	4998      	ldr	r1, [pc, #608]	@ (8003134 <BTS7960SetPower+0x270>)
 8002ed4:	6838      	ldr	r0, [r7, #0]
 8002ed6:	f7fe ff02 	bl	8001cde <Constrain>
 8002eda:	4602      	mov	r2, r0
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	621a      	str	r2, [r3, #32]
			BTS7690_MAX_PWM_POWER);

	// Determine direction signals
	if(driver->power > 0) {
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	dd7a      	ble.n	8002fde <BTS7960SetPower+0x11a>
		if(driver->enableInit) {
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00b      	beq.n	8002f08 <BTS7960SetPower+0x44>
			GPIOSetState(&driver->forwardEn, GPIO_HIGH);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 f9c6 	bl	8003288 <GPIOSetState>
			GPIOSetState(&driver->reverseEn, GPIO_LOW);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	330c      	adds	r3, #12
 8002f00:	2101      	movs	r1, #1
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 f9c0 	bl	8003288 <GPIOSetState>
		}
		__HAL_TIM_SET_COMPARE(driver->htim, driver->forwardPwmCh,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10e      	bne.n	8002f2e <BTS7960SetPower+0x6a>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	ee07 3a90 	vmov	s15, r3
 8002f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	ee17 2a90 	vmov	r2, s15
 8002f2a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f2c:	e033      	b.n	8002f96 <BTS7960SetPower+0xd2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d10e      	bne.n	8002f54 <BTS7960SetPower+0x90>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	ee07 3a90 	vmov	s15, r3
 8002f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	ee17 3a90 	vmov	r3, s15
 8002f50:	6393      	str	r3, [r2, #56]	@ 0x38
 8002f52:	e020      	b.n	8002f96 <BTS7960SetPower+0xd2>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d10e      	bne.n	8002f7a <BTS7960SetPower+0xb6>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	ee07 3a90 	vmov	s15, r3
 8002f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	ee17 3a90 	vmov	r3, s15
 8002f76:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002f78:	e00d      	b.n	8002f96 <BTS7960SetPower+0xd2>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	ee07 3a90 	vmov	s15, r3
 8002f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	ee17 3a90 	vmov	r3, s15
 8002f94:	6413      	str	r3, [r2, #64]	@ 0x40
				(int)(driver->power * BTS7690_FORWARD_DIR_POWER_SCALE));
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d105      	bne.n	8002faa <BTS7960SetPower+0xe6>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	635a      	str	r2, [r3, #52]	@ 0x34
		}

		__HAL_TIM_SET_COMPARE(driver->htim, driver->forwardPwmCh, 0);
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
	}
}
 8002fa8:	e0f9      	b.n	800319e <BTS7960SetPower+0x2da>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d105      	bne.n	8002fbe <BTS7960SetPower+0xfa>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	2300      	movs	r3, #0
 8002fba:	6393      	str	r3, [r2, #56]	@ 0x38
 8002fbc:	e0ef      	b.n	800319e <BTS7960SetPower+0x2da>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d105      	bne.n	8002fd2 <BTS7960SetPower+0x10e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	2300      	movs	r3, #0
 8002fce:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002fd0:	e0e5      	b.n	800319e <BTS7960SetPower+0x2da>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	2300      	movs	r3, #0
 8002fda:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002fdc:	e0df      	b.n	800319e <BTS7960SetPower+0x2da>
	else if(driver->power < 0) {
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f280 8082 	bge.w	80030ec <BTS7960SetPower+0x228>
		if(driver->enableInit) {
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00b      	beq.n	8003008 <BTS7960SetPower+0x144>
			GPIOSetState(&driver->forwardEn, GPIO_LOW);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 f946 	bl	8003288 <GPIOSetState>
			GPIOSetState(&driver->reverseEn, GPIO_HIGH);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	330c      	adds	r3, #12
 8003000:	2100      	movs	r1, #0
 8003002:	4618      	mov	r0, r3
 8003004:	f000 f940 	bl	8003288 <GPIOSetState>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->forwardPwmCh, 0);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d105      	bne.n	800301c <BTS7960SetPower+0x158>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2200      	movs	r2, #0
 8003018:	635a      	str	r2, [r3, #52]	@ 0x34
 800301a:	e018      	b.n	800304e <BTS7960SetPower+0x18a>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	2b04      	cmp	r3, #4
 8003022:	d105      	bne.n	8003030 <BTS7960SetPower+0x16c>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	2300      	movs	r3, #0
 800302c:	6393      	str	r3, [r2, #56]	@ 0x38
 800302e:	e00e      	b.n	800304e <BTS7960SetPower+0x18a>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	2b08      	cmp	r3, #8
 8003036:	d105      	bne.n	8003044 <BTS7960SetPower+0x180>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	2300      	movs	r3, #0
 8003040:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003042:	e004      	b.n	800304e <BTS7960SetPower+0x18a>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	2300      	movs	r3, #0
 800304c:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh,
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10f      	bne.n	8003076 <BTS7960SetPower+0x1b2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	ee07 3a90 	vmov	s15, r3
 800305e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003062:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003066:	ee17 3a90 	vmov	r3, s15
 800306a:	425a      	negs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003074:	e093      	b.n	800319e <BTS7960SetPower+0x2da>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	2b04      	cmp	r3, #4
 800307c:	d110      	bne.n	80030a0 <BTS7960SetPower+0x1dc>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	ee07 3a90 	vmov	s15, r3
 8003086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800308a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800308e:	ee17 3a90 	vmov	r3, s15
 8003092:	4259      	negs	r1, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	460b      	mov	r3, r1
 800309c:	6393      	str	r3, [r2, #56]	@ 0x38
 800309e:	e07e      	b.n	800319e <BTS7960SetPower+0x2da>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d110      	bne.n	80030ca <BTS7960SetPower+0x206>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	ee07 3a90 	vmov	s15, r3
 80030b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030b8:	ee17 3a90 	vmov	r3, s15
 80030bc:	4259      	negs	r1, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	460b      	mov	r3, r1
 80030c6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80030c8:	e069      	b.n	800319e <BTS7960SetPower+0x2da>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	ee07 3a90 	vmov	s15, r3
 80030d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030da:	ee17 3a90 	vmov	r3, s15
 80030de:	4259      	negs	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	460b      	mov	r3, r1
 80030e8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80030ea:	e058      	b.n	800319e <BTS7960SetPower+0x2da>
		if(driver->enableInit) {
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00b      	beq.n	800310c <BTS7960SetPower+0x248>
			GPIOSetState(&driver->forwardEn, GPIO_LOW);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3304      	adds	r3, #4
 80030f8:	2101      	movs	r1, #1
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 f8c4 	bl	8003288 <GPIOSetState>
			GPIOSetState(&driver->reverseEn, GPIO_LOW);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	330c      	adds	r3, #12
 8003104:	2101      	movs	r1, #1
 8003106:	4618      	mov	r0, r3
 8003108:	f000 f8be 	bl	8003288 <GPIOSetState>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->forwardPwmCh, 0);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d105      	bne.n	8003120 <BTS7960SetPower+0x25c>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2200      	movs	r2, #0
 800311c:	635a      	str	r2, [r3, #52]	@ 0x34
 800311e:	e01a      	b.n	8003156 <BTS7960SetPower+0x292>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b04      	cmp	r3, #4
 8003126:	d107      	bne.n	8003138 <BTS7960SetPower+0x274>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	2300      	movs	r3, #0
 8003130:	6393      	str	r3, [r2, #56]	@ 0x38
 8003132:	e010      	b.n	8003156 <BTS7960SetPower+0x292>
 8003134:	ffffed41 	.word	0xffffed41
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	2b08      	cmp	r3, #8
 800313e:	d105      	bne.n	800314c <BTS7960SetPower+0x288>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	2300      	movs	r3, #0
 8003148:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800314a:	e004      	b.n	8003156 <BTS7960SetPower+0x292>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	2300      	movs	r3, #0
 8003154:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d105      	bne.n	800316a <BTS7960SetPower+0x2a6>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2200      	movs	r2, #0
 8003166:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003168:	e019      	b.n	800319e <BTS7960SetPower+0x2da>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	2b04      	cmp	r3, #4
 8003170:	d105      	bne.n	800317e <BTS7960SetPower+0x2ba>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	2300      	movs	r3, #0
 800317a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800317c:	e00f      	b.n	800319e <BTS7960SetPower+0x2da>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	2b08      	cmp	r3, #8
 8003184:	d105      	bne.n	8003192 <BTS7960SetPower+0x2ce>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	2300      	movs	r3, #0
 800318e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003190:	e005      	b.n	800319e <BTS7960SetPower+0x2da>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	2300      	movs	r3, #0
 800319a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800319c:	e7ff      	b.n	800319e <BTS7960SetPower+0x2da>
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop

080031a8 <BTS7960GetPower>:

int BTS7960GetPower(BTS7960_t *driver) {
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
	return driver->power;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <BTS7960InterfaceInit>:

// Private function prototypes
int MotorIGetPower(MotorInterface_t *interface);
void MotorISetPower(MotorInterface_t *interface, int power);

void BTS7960InterfaceInit(MotorInterface_t *interface, BTS7960_t *driver) {
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
	interface->hardwareMotor = driver;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	601a      	str	r2, [r3, #0]
	interface->MotorGetPower = &MotorIGetPower;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a05      	ldr	r2, [pc, #20]	@ (80031e8 <BTS7960InterfaceInit+0x28>)
 80031d4:	605a      	str	r2, [r3, #4]
	interface->MotorSetPower = &MotorISetPower;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a04      	ldr	r2, [pc, #16]	@ (80031ec <BTS7960InterfaceInit+0x2c>)
 80031da:	609a      	str	r2, [r3, #8]
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	080031f1 	.word	0x080031f1
 80031ec:	0800320d 	.word	0x0800320d

080031f0 <MotorIGetPower>:

int MotorIGetPower(MotorInterface_t *interface) {
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
	return BTS7960GetPower((BTS7960_t *)interface->hardwareMotor);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff ffd3 	bl	80031a8 <BTS7960GetPower>
 8003202:	4603      	mov	r3, r0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <MotorISetPower>:

void MotorISetPower(MotorInterface_t *interface, int power) {
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
	BTS7960SetPower((BTS7960_t *)interface->hardwareMotor, power);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6839      	ldr	r1, [r7, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff fe51 	bl	8002ec4 <BTS7960SetPower>
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <GPIOInit>:
 *      Author: Jennyston
 */

#include "peripherals/gpio.h"

void GPIOInit(GPIO_t *gpio, GPIO_TypeDef *port, uint16_t pin) {
 800322a:	b480      	push	{r7}
 800322c:	b085      	sub	sp, #20
 800322e:	af00      	add	r7, sp, #0
 8003230:	60f8      	str	r0, [r7, #12]
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	4613      	mov	r3, r2
 8003236:	80fb      	strh	r3, [r7, #6]
	gpio->port = port;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	601a      	str	r2, [r3, #0]
	gpio->pin = pin;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	88fa      	ldrh	r2, [r7, #6]
 8003242:	809a      	strh	r2, [r3, #4]
//	gpio->hcomp = NULL;
}
 8003244:	bf00      	nop
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <GPIOGetState>:
//	gpio->port = NULL;
//	gpio->pin = 0;
//	gpio->hcomp = hcomp;
//}

GPIOState GPIOGetState(GPIO_t *gpio) {
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
	if(gpio->port != NULL) {
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00e      	beq.n	800327e <GPIOGetState+0x2e>
		return HAL_GPIO_ReadPin(gpio->port, gpio->pin) == GPIO_PIN_SET ?
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	889b      	ldrh	r3, [r3, #4]
 8003268:	4619      	mov	r1, r3
 800326a:	4610      	mov	r0, r2
 800326c:	f000 fb7e 	bl	800396c <HAL_GPIO_ReadPin>
 8003270:	4603      	mov	r3, r0
				GPIO_HIGH : GPIO_LOW;
 8003272:	2b01      	cmp	r3, #1
 8003274:	bf14      	ite	ne
 8003276:	2301      	movne	r3, #1
 8003278:	2300      	moveq	r3, #0
 800327a:	b2db      	uxtb	r3, r3
 800327c:	e000      	b.n	8003280 <GPIOGetState+0x30>
//	else if (gpio->hcomp != NULL) {
//		return HAL_COMP_GetOutputLevel(gpio->hcomp) == COMP_OUTPUTLEVEL_HIGH ?
//				GPIO_HIGH : GPIO_LOW;
//	}
	else {
		return GPIO_LOW;
 800327e:	2301      	movs	r3, #1
	}
}
 8003280:	4618      	mov	r0, r3
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <GPIOSetState>:

void GPIOSetState(GPIO_t *gpio, GPIOState state) {
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	70fb      	strb	r3, [r7, #3]
	if(gpio->port != NULL) {
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00c      	beq.n	80032b6 <GPIOSetState+0x2e>
		HAL_GPIO_WritePin(gpio->port, gpio->pin, state == GPIO_HIGH ?
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6818      	ldr	r0, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	8899      	ldrh	r1, [r3, #4]
 80032a4:	78fb      	ldrb	r3, [r7, #3]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bf0c      	ite	eq
 80032aa:	2301      	moveq	r3, #1
 80032ac:	2300      	movne	r3, #0
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	461a      	mov	r2, r3
 80032b2:	f000 fb73 	bl	800399c <HAL_GPIO_WritePin>
				GPIO_PIN_SET : GPIO_PIN_RESET);
	}
}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80032c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80032c4:	f7ff fd46 	bl	8002d54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032c8:	480c      	ldr	r0, [pc, #48]	@ (80032fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032ca:	490d      	ldr	r1, [pc, #52]	@ (8003300 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003304 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032d0:	e002      	b.n	80032d8 <LoopCopyDataInit>

080032d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032d6:	3304      	adds	r3, #4

080032d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032dc:	d3f9      	bcc.n	80032d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032de:	4a0a      	ldr	r2, [pc, #40]	@ (8003308 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032e0:	4c0a      	ldr	r4, [pc, #40]	@ (800330c <LoopFillZerobss+0x22>)
  movs r3, #0
 80032e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032e4:	e001      	b.n	80032ea <LoopFillZerobss>

080032e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032e8:	3204      	adds	r2, #4

080032ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032ec:	d3fb      	bcc.n	80032e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032ee:	f00a fbcb 	bl	800da88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032f2:	f7ff f82d 	bl	8002350 <main>
  bx  lr    
 80032f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80032f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003300:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 8003304:	0800fef8 	.word	0x0800fef8
  ldr r2, =_sbss
 8003308:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 800330c:	2000118c 	.word	0x2000118c

08003310 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003310:	e7fe      	b.n	8003310 <ADC_IRQHandler>
	...

08003314 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003318:	4b0e      	ldr	r3, [pc, #56]	@ (8003354 <HAL_Init+0x40>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a0d      	ldr	r2, [pc, #52]	@ (8003354 <HAL_Init+0x40>)
 800331e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003322:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003324:	4b0b      	ldr	r3, [pc, #44]	@ (8003354 <HAL_Init+0x40>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a0a      	ldr	r2, [pc, #40]	@ (8003354 <HAL_Init+0x40>)
 800332a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800332e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003330:	4b08      	ldr	r3, [pc, #32]	@ (8003354 <HAL_Init+0x40>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a07      	ldr	r2, [pc, #28]	@ (8003354 <HAL_Init+0x40>)
 8003336:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800333a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800333c:	2003      	movs	r0, #3
 800333e:	f000 f94f 	bl	80035e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003342:	200f      	movs	r0, #15
 8003344:	f000 f808 	bl	8003358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003348:	f7ff fa56 	bl	80027f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40023c00 	.word	0x40023c00

08003358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003360:	4b12      	ldr	r3, [pc, #72]	@ (80033ac <HAL_InitTick+0x54>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	4b12      	ldr	r3, [pc, #72]	@ (80033b0 <HAL_InitTick+0x58>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	4619      	mov	r1, r3
 800336a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800336e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003372:	fbb2 f3f3 	udiv	r3, r2, r3
 8003376:	4618      	mov	r0, r3
 8003378:	f000 f967 	bl	800364a <HAL_SYSTICK_Config>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e00e      	b.n	80033a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b0f      	cmp	r3, #15
 800338a:	d80a      	bhi.n	80033a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800338c:	2200      	movs	r2, #0
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	f04f 30ff 	mov.w	r0, #4294967295
 8003394:	f000 f92f 	bl	80035f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003398:	4a06      	ldr	r2, [pc, #24]	@ (80033b4 <HAL_InitTick+0x5c>)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	e000      	b.n	80033a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	20000000 	.word	0x20000000
 80033b0:	20000008 	.word	0x20000008
 80033b4:	20000004 	.word	0x20000004

080033b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033bc:	4b06      	ldr	r3, [pc, #24]	@ (80033d8 <HAL_IncTick+0x20>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	461a      	mov	r2, r3
 80033c2:	4b06      	ldr	r3, [pc, #24]	@ (80033dc <HAL_IncTick+0x24>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4413      	add	r3, r2
 80033c8:	4a04      	ldr	r2, [pc, #16]	@ (80033dc <HAL_IncTick+0x24>)
 80033ca:	6013      	str	r3, [r2, #0]
}
 80033cc:	bf00      	nop
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	20000008 	.word	0x20000008
 80033dc:	20000650 	.word	0x20000650

080033e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  return uwTick;
 80033e4:	4b03      	ldr	r3, [pc, #12]	@ (80033f4 <HAL_GetTick+0x14>)
 80033e6:	681b      	ldr	r3, [r3, #0]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	20000650 	.word	0x20000650

080033f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003400:	f7ff ffee 	bl	80033e0 <HAL_GetTick>
 8003404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003410:	d005      	beq.n	800341e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003412:	4b0a      	ldr	r3, [pc, #40]	@ (800343c <HAL_Delay+0x44>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4413      	add	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800341e:	bf00      	nop
 8003420:	f7ff ffde 	bl	80033e0 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	429a      	cmp	r2, r3
 800342e:	d8f7      	bhi.n	8003420 <HAL_Delay+0x28>
  {
  }
}
 8003430:	bf00      	nop
 8003432:	bf00      	nop
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000008 	.word	0x20000008

08003440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003450:	4b0c      	ldr	r3, [pc, #48]	@ (8003484 <__NVIC_SetPriorityGrouping+0x44>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800345c:	4013      	ands	r3, r2
 800345e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003468:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800346c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003472:	4a04      	ldr	r2, [pc, #16]	@ (8003484 <__NVIC_SetPriorityGrouping+0x44>)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	60d3      	str	r3, [r2, #12]
}
 8003478:	bf00      	nop
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	e000ed00 	.word	0xe000ed00

08003488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800348c:	4b04      	ldr	r3, [pc, #16]	@ (80034a0 <__NVIC_GetPriorityGrouping+0x18>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	0a1b      	lsrs	r3, r3, #8
 8003492:	f003 0307 	and.w	r3, r3, #7
}
 8003496:	4618      	mov	r0, r3
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	e000ed00 	.word	0xe000ed00

080034a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	db0b      	blt.n	80034ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034b6:	79fb      	ldrb	r3, [r7, #7]
 80034b8:	f003 021f 	and.w	r2, r3, #31
 80034bc:	4907      	ldr	r1, [pc, #28]	@ (80034dc <__NVIC_EnableIRQ+0x38>)
 80034be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	2001      	movs	r0, #1
 80034c6:	fa00 f202 	lsl.w	r2, r0, r2
 80034ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	e000e100 	.word	0xe000e100

080034e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	6039      	str	r1, [r7, #0]
 80034ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	db0a      	blt.n	800350a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	490c      	ldr	r1, [pc, #48]	@ (800352c <__NVIC_SetPriority+0x4c>)
 80034fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fe:	0112      	lsls	r2, r2, #4
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	440b      	add	r3, r1
 8003504:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003508:	e00a      	b.n	8003520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	b2da      	uxtb	r2, r3
 800350e:	4908      	ldr	r1, [pc, #32]	@ (8003530 <__NVIC_SetPriority+0x50>)
 8003510:	79fb      	ldrb	r3, [r7, #7]
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	3b04      	subs	r3, #4
 8003518:	0112      	lsls	r2, r2, #4
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	440b      	add	r3, r1
 800351e:	761a      	strb	r2, [r3, #24]
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	e000e100 	.word	0xe000e100
 8003530:	e000ed00 	.word	0xe000ed00

08003534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003534:	b480      	push	{r7}
 8003536:	b089      	sub	sp, #36	@ 0x24
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f1c3 0307 	rsb	r3, r3, #7
 800354e:	2b04      	cmp	r3, #4
 8003550:	bf28      	it	cs
 8003552:	2304      	movcs	r3, #4
 8003554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	3304      	adds	r3, #4
 800355a:	2b06      	cmp	r3, #6
 800355c:	d902      	bls.n	8003564 <NVIC_EncodePriority+0x30>
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	3b03      	subs	r3, #3
 8003562:	e000      	b.n	8003566 <NVIC_EncodePriority+0x32>
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003568:	f04f 32ff 	mov.w	r2, #4294967295
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43da      	mvns	r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	401a      	ands	r2, r3
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800357c:	f04f 31ff 	mov.w	r1, #4294967295
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	fa01 f303 	lsl.w	r3, r1, r3
 8003586:	43d9      	mvns	r1, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800358c:	4313      	orrs	r3, r2
         );
}
 800358e:	4618      	mov	r0, r3
 8003590:	3724      	adds	r7, #36	@ 0x24
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
	...

0800359c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035ac:	d301      	bcc.n	80035b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035ae:	2301      	movs	r3, #1
 80035b0:	e00f      	b.n	80035d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035b2:	4a0a      	ldr	r2, [pc, #40]	@ (80035dc <SysTick_Config+0x40>)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ba:	210f      	movs	r1, #15
 80035bc:	f04f 30ff 	mov.w	r0, #4294967295
 80035c0:	f7ff ff8e 	bl	80034e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035c4:	4b05      	ldr	r3, [pc, #20]	@ (80035dc <SysTick_Config+0x40>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ca:	4b04      	ldr	r3, [pc, #16]	@ (80035dc <SysTick_Config+0x40>)
 80035cc:	2207      	movs	r2, #7
 80035ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	e000e010 	.word	0xe000e010

080035e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff ff29 	bl	8003440 <__NVIC_SetPriorityGrouping>
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b086      	sub	sp, #24
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	4603      	mov	r3, r0
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	607a      	str	r2, [r7, #4]
 8003602:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003608:	f7ff ff3e 	bl	8003488 <__NVIC_GetPriorityGrouping>
 800360c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	68b9      	ldr	r1, [r7, #8]
 8003612:	6978      	ldr	r0, [r7, #20]
 8003614:	f7ff ff8e 	bl	8003534 <NVIC_EncodePriority>
 8003618:	4602      	mov	r2, r0
 800361a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800361e:	4611      	mov	r1, r2
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff ff5d 	bl	80034e0 <__NVIC_SetPriority>
}
 8003626:	bf00      	nop
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	4603      	mov	r3, r0
 8003636:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff ff31 	bl	80034a4 <__NVIC_EnableIRQ>
}
 8003642:	bf00      	nop
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b082      	sub	sp, #8
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff ffa2 	bl	800359c <SysTick_Config>
 8003658:	4603      	mov	r3, r0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003664:	b480      	push	{r7}
 8003666:	b089      	sub	sp, #36	@ 0x24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800366e:	2300      	movs	r3, #0
 8003670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003672:	2300      	movs	r3, #0
 8003674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003676:	2300      	movs	r3, #0
 8003678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800367a:	2300      	movs	r3, #0
 800367c:	61fb      	str	r3, [r7, #28]
 800367e:	e159      	b.n	8003934 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003680:	2201      	movs	r2, #1
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4013      	ands	r3, r2
 8003692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	429a      	cmp	r2, r3
 800369a:	f040 8148 	bne.w	800392e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d005      	beq.n	80036b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d130      	bne.n	8003718 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	2203      	movs	r2, #3
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	43db      	mvns	r3, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4013      	ands	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4313      	orrs	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036ec:	2201      	movs	r2, #1
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	43db      	mvns	r3, r3
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4013      	ands	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	091b      	lsrs	r3, r3, #4
 8003702:	f003 0201 	and.w	r2, r3, #1
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	4313      	orrs	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 0303 	and.w	r3, r3, #3
 8003720:	2b03      	cmp	r3, #3
 8003722:	d017      	beq.n	8003754 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	2203      	movs	r2, #3
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	43db      	mvns	r3, r3
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4013      	ands	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4313      	orrs	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d123      	bne.n	80037a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	08da      	lsrs	r2, r3, #3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3208      	adds	r2, #8
 8003768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800376c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	220f      	movs	r2, #15
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	43db      	mvns	r3, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4013      	ands	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	691a      	ldr	r2, [r3, #16]
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	08da      	lsrs	r2, r3, #3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3208      	adds	r2, #8
 80037a2:	69b9      	ldr	r1, [r7, #24]
 80037a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	2203      	movs	r2, #3
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4013      	ands	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 0203 	and.w	r2, r3, #3
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 80a2 	beq.w	800392e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	4b57      	ldr	r3, [pc, #348]	@ (800394c <HAL_GPIO_Init+0x2e8>)
 80037f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f2:	4a56      	ldr	r2, [pc, #344]	@ (800394c <HAL_GPIO_Init+0x2e8>)
 80037f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80037fa:	4b54      	ldr	r3, [pc, #336]	@ (800394c <HAL_GPIO_Init+0x2e8>)
 80037fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003806:	4a52      	ldr	r2, [pc, #328]	@ (8003950 <HAL_GPIO_Init+0x2ec>)
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	089b      	lsrs	r3, r3, #2
 800380c:	3302      	adds	r3, #2
 800380e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	220f      	movs	r2, #15
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43db      	mvns	r3, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4013      	ands	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a49      	ldr	r2, [pc, #292]	@ (8003954 <HAL_GPIO_Init+0x2f0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d019      	beq.n	8003866 <HAL_GPIO_Init+0x202>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a48      	ldr	r2, [pc, #288]	@ (8003958 <HAL_GPIO_Init+0x2f4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d013      	beq.n	8003862 <HAL_GPIO_Init+0x1fe>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a47      	ldr	r2, [pc, #284]	@ (800395c <HAL_GPIO_Init+0x2f8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00d      	beq.n	800385e <HAL_GPIO_Init+0x1fa>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a46      	ldr	r2, [pc, #280]	@ (8003960 <HAL_GPIO_Init+0x2fc>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d007      	beq.n	800385a <HAL_GPIO_Init+0x1f6>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a45      	ldr	r2, [pc, #276]	@ (8003964 <HAL_GPIO_Init+0x300>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d101      	bne.n	8003856 <HAL_GPIO_Init+0x1f2>
 8003852:	2304      	movs	r3, #4
 8003854:	e008      	b.n	8003868 <HAL_GPIO_Init+0x204>
 8003856:	2307      	movs	r3, #7
 8003858:	e006      	b.n	8003868 <HAL_GPIO_Init+0x204>
 800385a:	2303      	movs	r3, #3
 800385c:	e004      	b.n	8003868 <HAL_GPIO_Init+0x204>
 800385e:	2302      	movs	r3, #2
 8003860:	e002      	b.n	8003868 <HAL_GPIO_Init+0x204>
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <HAL_GPIO_Init+0x204>
 8003866:	2300      	movs	r3, #0
 8003868:	69fa      	ldr	r2, [r7, #28]
 800386a:	f002 0203 	and.w	r2, r2, #3
 800386e:	0092      	lsls	r2, r2, #2
 8003870:	4093      	lsls	r3, r2
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4313      	orrs	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003878:	4935      	ldr	r1, [pc, #212]	@ (8003950 <HAL_GPIO_Init+0x2ec>)
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	089b      	lsrs	r3, r3, #2
 800387e:	3302      	adds	r3, #2
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003886:	4b38      	ldr	r3, [pc, #224]	@ (8003968 <HAL_GPIO_Init+0x304>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	43db      	mvns	r3, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4013      	ands	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038aa:	4a2f      	ldr	r2, [pc, #188]	@ (8003968 <HAL_GPIO_Init+0x304>)
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038b0:	4b2d      	ldr	r3, [pc, #180]	@ (8003968 <HAL_GPIO_Init+0x304>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038d4:	4a24      	ldr	r2, [pc, #144]	@ (8003968 <HAL_GPIO_Init+0x304>)
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038da:	4b23      	ldr	r3, [pc, #140]	@ (8003968 <HAL_GPIO_Init+0x304>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	43db      	mvns	r3, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4013      	ands	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038fe:	4a1a      	ldr	r2, [pc, #104]	@ (8003968 <HAL_GPIO_Init+0x304>)
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003904:	4b18      	ldr	r3, [pc, #96]	@ (8003968 <HAL_GPIO_Init+0x304>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	43db      	mvns	r3, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003928:	4a0f      	ldr	r2, [pc, #60]	@ (8003968 <HAL_GPIO_Init+0x304>)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	3301      	adds	r3, #1
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	2b0f      	cmp	r3, #15
 8003938:	f67f aea2 	bls.w	8003680 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800393c:	bf00      	nop
 800393e:	bf00      	nop
 8003940:	3724      	adds	r7, #36	@ 0x24
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40023800 	.word	0x40023800
 8003950:	40013800 	.word	0x40013800
 8003954:	40020000 	.word	0x40020000
 8003958:	40020400 	.word	0x40020400
 800395c:	40020800 	.word	0x40020800
 8003960:	40020c00 	.word	0x40020c00
 8003964:	40021000 	.word	0x40021000
 8003968:	40013c00 	.word	0x40013c00

0800396c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	887b      	ldrh	r3, [r7, #2]
 800397e:	4013      	ands	r3, r2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d002      	beq.n	800398a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003984:	2301      	movs	r3, #1
 8003986:	73fb      	strb	r3, [r7, #15]
 8003988:	e001      	b.n	800398e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800398a:	2300      	movs	r3, #0
 800398c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800398e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	807b      	strh	r3, [r7, #2]
 80039a8:	4613      	mov	r3, r2
 80039aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039ac:	787b      	ldrb	r3, [r7, #1]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039b2:	887a      	ldrh	r2, [r7, #2]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039b8:	e003      	b.n	80039c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039ba:	887b      	ldrh	r3, [r7, #2]
 80039bc:	041a      	lsls	r2, r3, #16
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	619a      	str	r2, [r3, #24]
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
	...

080039d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e12b      	b.n	8003c3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7fe ff26 	bl	8002848 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2224      	movs	r2, #36	@ 0x24
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0201 	bic.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a34:	f002 fe2e 	bl	8006694 <HAL_RCC_GetPCLK1Freq>
 8003a38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	4a81      	ldr	r2, [pc, #516]	@ (8003c44 <HAL_I2C_Init+0x274>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d807      	bhi.n	8003a54 <HAL_I2C_Init+0x84>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4a80      	ldr	r2, [pc, #512]	@ (8003c48 <HAL_I2C_Init+0x278>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	bf94      	ite	ls
 8003a4c:	2301      	movls	r3, #1
 8003a4e:	2300      	movhi	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	e006      	b.n	8003a62 <HAL_I2C_Init+0x92>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4a7d      	ldr	r2, [pc, #500]	@ (8003c4c <HAL_I2C_Init+0x27c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	bf94      	ite	ls
 8003a5c:	2301      	movls	r3, #1
 8003a5e:	2300      	movhi	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e0e7      	b.n	8003c3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4a78      	ldr	r2, [pc, #480]	@ (8003c50 <HAL_I2C_Init+0x280>)
 8003a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a72:	0c9b      	lsrs	r3, r3, #18
 8003a74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	4a6a      	ldr	r2, [pc, #424]	@ (8003c44 <HAL_I2C_Init+0x274>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d802      	bhi.n	8003aa4 <HAL_I2C_Init+0xd4>
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	e009      	b.n	8003ab8 <HAL_I2C_Init+0xe8>
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003aaa:	fb02 f303 	mul.w	r3, r2, r3
 8003aae:	4a69      	ldr	r2, [pc, #420]	@ (8003c54 <HAL_I2C_Init+0x284>)
 8003ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab4:	099b      	lsrs	r3, r3, #6
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6812      	ldr	r2, [r2, #0]
 8003abc:	430b      	orrs	r3, r1
 8003abe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003aca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	495c      	ldr	r1, [pc, #368]	@ (8003c44 <HAL_I2C_Init+0x274>)
 8003ad4:	428b      	cmp	r3, r1
 8003ad6:	d819      	bhi.n	8003b0c <HAL_I2C_Init+0x13c>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	1e59      	subs	r1, r3, #1
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ae6:	1c59      	adds	r1, r3, #1
 8003ae8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003aec:	400b      	ands	r3, r1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <HAL_I2C_Init+0x138>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1e59      	subs	r1, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b00:	3301      	adds	r3, #1
 8003b02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b06:	e051      	b.n	8003bac <HAL_I2C_Init+0x1dc>
 8003b08:	2304      	movs	r3, #4
 8003b0a:	e04f      	b.n	8003bac <HAL_I2C_Init+0x1dc>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d111      	bne.n	8003b38 <HAL_I2C_Init+0x168>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	1e58      	subs	r0, r3, #1
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6859      	ldr	r1, [r3, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	440b      	add	r3, r1
 8003b22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b26:	3301      	adds	r3, #1
 8003b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	bf0c      	ite	eq
 8003b30:	2301      	moveq	r3, #1
 8003b32:	2300      	movne	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	e012      	b.n	8003b5e <HAL_I2C_Init+0x18e>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	1e58      	subs	r0, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6859      	ldr	r1, [r3, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	0099      	lsls	r1, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b4e:	3301      	adds	r3, #1
 8003b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	bf0c      	ite	eq
 8003b58:	2301      	moveq	r3, #1
 8003b5a:	2300      	movne	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <HAL_I2C_Init+0x196>
 8003b62:	2301      	movs	r3, #1
 8003b64:	e022      	b.n	8003bac <HAL_I2C_Init+0x1dc>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10e      	bne.n	8003b8c <HAL_I2C_Init+0x1bc>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1e58      	subs	r0, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6859      	ldr	r1, [r3, #4]
 8003b76:	460b      	mov	r3, r1
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	440b      	add	r3, r1
 8003b7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b80:	3301      	adds	r3, #1
 8003b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b8a:	e00f      	b.n	8003bac <HAL_I2C_Init+0x1dc>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	1e58      	subs	r0, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6859      	ldr	r1, [r3, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	0099      	lsls	r1, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	6809      	ldr	r1, [r1, #0]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69da      	ldr	r2, [r3, #28]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003bda:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	6911      	ldr	r1, [r2, #16]
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	68d2      	ldr	r2, [r2, #12]
 8003be6:	4311      	orrs	r1, r2
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6812      	ldr	r2, [r2, #0]
 8003bec:	430b      	orrs	r3, r1
 8003bee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695a      	ldr	r2, [r3, #20]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0201 	orr.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	000186a0 	.word	0x000186a0
 8003c48:	001e847f 	.word	0x001e847f
 8003c4c:	003d08ff 	.word	0x003d08ff
 8003c50:	431bde83 	.word	0x431bde83
 8003c54:	10624dd3 	.word	0x10624dd3

08003c58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	607a      	str	r2, [r7, #4]
 8003c62:	461a      	mov	r2, r3
 8003c64:	460b      	mov	r3, r1
 8003c66:	817b      	strh	r3, [r7, #10]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c6c:	f7ff fbb8 	bl	80033e0 <HAL_GetTick>
 8003c70:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	f040 80e0 	bne.w	8003e40 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	2319      	movs	r3, #25
 8003c86:	2201      	movs	r2, #1
 8003c88:	4970      	ldr	r1, [pc, #448]	@ (8003e4c <HAL_I2C_Master_Transmit+0x1f4>)
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 fc64 	bl	8004558 <I2C_WaitOnFlagUntilTimeout>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c96:	2302      	movs	r3, #2
 8003c98:	e0d3      	b.n	8003e42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_I2C_Master_Transmit+0x50>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e0cc      	b.n	8003e42 <HAL_I2C_Master_Transmit+0x1ea>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d007      	beq.n	8003cce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0201 	orr.w	r2, r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cdc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2221      	movs	r2, #33	@ 0x21
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2210      	movs	r2, #16
 8003cea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	893a      	ldrh	r2, [r7, #8]
 8003cfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	4a50      	ldr	r2, [pc, #320]	@ (8003e50 <HAL_I2C_Master_Transmit+0x1f8>)
 8003d0e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d10:	8979      	ldrh	r1, [r7, #10]
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	6a3a      	ldr	r2, [r7, #32]
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 face 	bl	80042b8 <I2C_MasterRequestWrite>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e08d      	b.n	8003e42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d26:	2300      	movs	r3, #0
 8003d28:	613b      	str	r3, [r7, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	613b      	str	r3, [r7, #16]
 8003d3a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d3c:	e066      	b.n	8003e0c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	6a39      	ldr	r1, [r7, #32]
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fd22 	bl	800478c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00d      	beq.n	8003d6a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d107      	bne.n	8003d66 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e06b      	b.n	8003e42 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6e:	781a      	ldrb	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d11b      	bne.n	8003de0 <HAL_I2C_Master_Transmit+0x188>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d017      	beq.n	8003de0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db4:	781a      	ldrb	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	6a39      	ldr	r1, [r7, #32]
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 fd19 	bl	800481c <I2C_WaitOnBTFFlagUntilTimeout>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00d      	beq.n	8003e0c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d107      	bne.n	8003e08 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e06:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e01a      	b.n	8003e42 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d194      	bne.n	8003d3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	e000      	b.n	8003e42 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e40:	2302      	movs	r3, #2
  }
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	00100002 	.word	0x00100002
 8003e50:	ffff0000 	.word	0xffff0000

08003e54 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b08c      	sub	sp, #48	@ 0x30
 8003e58:	af02      	add	r7, sp, #8
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	607a      	str	r2, [r7, #4]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	460b      	mov	r3, r1
 8003e62:	817b      	strh	r3, [r7, #10]
 8003e64:	4613      	mov	r3, r2
 8003e66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e68:	f7ff faba 	bl	80033e0 <HAL_GetTick>
 8003e6c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	f040 8217 	bne.w	80042aa <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	2319      	movs	r3, #25
 8003e82:	2201      	movs	r2, #1
 8003e84:	497c      	ldr	r1, [pc, #496]	@ (8004078 <HAL_I2C_Master_Receive+0x224>)
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 fb66 	bl	8004558 <I2C_WaitOnFlagUntilTimeout>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003e92:	2302      	movs	r3, #2
 8003e94:	e20a      	b.n	80042ac <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_I2C_Master_Receive+0x50>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e203      	b.n	80042ac <HAL_I2C_Master_Receive+0x458>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d007      	beq.n	8003eca <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 0201 	orr.w	r2, r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ed8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2222      	movs	r2, #34	@ 0x22
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2210      	movs	r2, #16
 8003ee6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	893a      	ldrh	r2, [r7, #8]
 8003efa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4a5c      	ldr	r2, [pc, #368]	@ (800407c <HAL_I2C_Master_Receive+0x228>)
 8003f0a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f0c:	8979      	ldrh	r1, [r7, #10]
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 fa52 	bl	80043bc <I2C_MasterRequestRead>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e1c4      	b.n	80042ac <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d113      	bne.n	8003f52 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	623b      	str	r3, [r7, #32]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	623b      	str	r3, [r7, #32]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	623b      	str	r3, [r7, #32]
 8003f3e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	e198      	b.n	8004284 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d11b      	bne.n	8003f92 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	61fb      	str	r3, [r7, #28]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	61fb      	str	r3, [r7, #28]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	61fb      	str	r3, [r7, #28]
 8003f7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	e178      	b.n	8004284 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d11b      	bne.n	8003fd2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fa8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61bb      	str	r3, [r7, #24]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	61bb      	str	r3, [r7, #24]
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	e158      	b.n	8004284 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fe0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ff8:	e144      	b.n	8004284 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	f200 80f1 	bhi.w	80041e6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004008:	2b01      	cmp	r3, #1
 800400a:	d123      	bne.n	8004054 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800400c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800400e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 fc4b 	bl	80048ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e145      	b.n	80042ac <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691a      	ldr	r2, [r3, #16]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004048:	b29b      	uxth	r3, r3
 800404a:	3b01      	subs	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004052:	e117      	b.n	8004284 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004058:	2b02      	cmp	r3, #2
 800405a:	d14e      	bne.n	80040fa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800405c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004062:	2200      	movs	r2, #0
 8004064:	4906      	ldr	r1, [pc, #24]	@ (8004080 <HAL_I2C_Master_Receive+0x22c>)
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 fa76 	bl	8004558 <I2C_WaitOnFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d008      	beq.n	8004084 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e11a      	b.n	80042ac <HAL_I2C_Master_Receive+0x458>
 8004076:	bf00      	nop
 8004078:	00100002 	.word	0x00100002
 800407c:	ffff0000 	.word	0xffff0000
 8004080:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004092:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691a      	ldr	r2, [r3, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	691a      	ldr	r2, [r3, #16]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040f8:	e0c4      	b.n	8004284 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004100:	2200      	movs	r2, #0
 8004102:	496c      	ldr	r1, [pc, #432]	@ (80042b4 <HAL_I2C_Master_Receive+0x460>)
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 fa27 	bl	8004558 <I2C_WaitOnFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0cb      	b.n	80042ac <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004122:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691a      	ldr	r2, [r3, #16]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800415c:	2200      	movs	r2, #0
 800415e:	4955      	ldr	r1, [pc, #340]	@ (80042b4 <HAL_I2C_Master_Receive+0x460>)
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f9f9 	bl	8004558 <I2C_WaitOnFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e09d      	b.n	80042ac <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800417e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691a      	ldr	r2, [r3, #16]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041e4:	e04e      	b.n	8004284 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 fb5e 	bl	80048ac <I2C_WaitOnRXNEFlagUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e058      	b.n	80042ac <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004222:	b29b      	uxth	r3, r3
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b04      	cmp	r3, #4
 8004238:	d124      	bne.n	8004284 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800423e:	2b03      	cmp	r3, #3
 8004240:	d107      	bne.n	8004252 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004250:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800427a:	b29b      	uxth	r3, r3
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004288:	2b00      	cmp	r3, #0
 800428a:	f47f aeb6 	bne.w	8003ffa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2220      	movs	r2, #32
 8004292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042a6:	2300      	movs	r3, #0
 80042a8:	e000      	b.n	80042ac <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80042aa:	2302      	movs	r3, #2
  }
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3728      	adds	r7, #40	@ 0x28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	00010004 	.word	0x00010004

080042b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af02      	add	r7, sp, #8
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	607a      	str	r2, [r7, #4]
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	460b      	mov	r3, r1
 80042c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d006      	beq.n	80042e2 <I2C_MasterRequestWrite+0x2a>
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d003      	beq.n	80042e2 <I2C_MasterRequestWrite+0x2a>
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042e0:	d108      	bne.n	80042f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	e00b      	b.n	800430c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f8:	2b12      	cmp	r3, #18
 80042fa:	d107      	bne.n	800430c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800430a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f91d 	bl	8004558 <I2C_WaitOnFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00d      	beq.n	8004340 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800432e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004332:	d103      	bne.n	800433c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800433a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e035      	b.n	80043ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004348:	d108      	bne.n	800435c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800434a:	897b      	ldrh	r3, [r7, #10]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	461a      	mov	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004358:	611a      	str	r2, [r3, #16]
 800435a:	e01b      	b.n	8004394 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800435c:	897b      	ldrh	r3, [r7, #10]
 800435e:	11db      	asrs	r3, r3, #7
 8004360:	b2db      	uxtb	r3, r3
 8004362:	f003 0306 	and.w	r3, r3, #6
 8004366:	b2db      	uxtb	r3, r3
 8004368:	f063 030f 	orn	r3, r3, #15
 800436c:	b2da      	uxtb	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	490e      	ldr	r1, [pc, #56]	@ (80043b4 <I2C_MasterRequestWrite+0xfc>)
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 f966 	bl	800464c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e010      	b.n	80043ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800438a:	897b      	ldrh	r3, [r7, #10]
 800438c:	b2da      	uxtb	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	4907      	ldr	r1, [pc, #28]	@ (80043b8 <I2C_MasterRequestWrite+0x100>)
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 f956 	bl	800464c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	00010008 	.word	0x00010008
 80043b8:	00010002 	.word	0x00010002

080043bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	607a      	str	r2, [r7, #4]
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	460b      	mov	r3, r1
 80043ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d006      	beq.n	80043f6 <I2C_MasterRequestRead+0x3a>
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d003      	beq.n	80043f6 <I2C_MasterRequestRead+0x3a>
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043f4:	d108      	bne.n	8004408 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	e00b      	b.n	8004420 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440c:	2b11      	cmp	r3, #17
 800440e:	d107      	bne.n	8004420 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800441e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 f893 	bl	8004558 <I2C_WaitOnFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00d      	beq.n	8004454 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004446:	d103      	bne.n	8004450 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800444e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e079      	b.n	8004548 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800445c:	d108      	bne.n	8004470 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800445e:	897b      	ldrh	r3, [r7, #10]
 8004460:	b2db      	uxtb	r3, r3
 8004462:	f043 0301 	orr.w	r3, r3, #1
 8004466:	b2da      	uxtb	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	611a      	str	r2, [r3, #16]
 800446e:	e05f      	b.n	8004530 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004470:	897b      	ldrh	r3, [r7, #10]
 8004472:	11db      	asrs	r3, r3, #7
 8004474:	b2db      	uxtb	r3, r3
 8004476:	f003 0306 	and.w	r3, r3, #6
 800447a:	b2db      	uxtb	r3, r3
 800447c:	f063 030f 	orn	r3, r3, #15
 8004480:	b2da      	uxtb	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	4930      	ldr	r1, [pc, #192]	@ (8004550 <I2C_MasterRequestRead+0x194>)
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 f8dc 	bl	800464c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e054      	b.n	8004548 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800449e:	897b      	ldrh	r3, [r7, #10]
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	4929      	ldr	r1, [pc, #164]	@ (8004554 <I2C_MasterRequestRead+0x198>)
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 f8cc 	bl	800464c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e044      	b.n	8004548 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044be:	2300      	movs	r3, #0
 80044c0:	613b      	str	r3, [r7, #16]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 f831 	bl	8004558 <I2C_WaitOnFlagUntilTimeout>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00d      	beq.n	8004518 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004506:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800450a:	d103      	bne.n	8004514 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004512:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e017      	b.n	8004548 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004518:	897b      	ldrh	r3, [r7, #10]
 800451a:	11db      	asrs	r3, r3, #7
 800451c:	b2db      	uxtb	r3, r3
 800451e:	f003 0306 	and.w	r3, r3, #6
 8004522:	b2db      	uxtb	r3, r3
 8004524:	f063 030e 	orn	r3, r3, #14
 8004528:	b2da      	uxtb	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	4907      	ldr	r1, [pc, #28]	@ (8004554 <I2C_MasterRequestRead+0x198>)
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 f888 	bl	800464c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	00010008 	.word	0x00010008
 8004554:	00010002 	.word	0x00010002

08004558 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	603b      	str	r3, [r7, #0]
 8004564:	4613      	mov	r3, r2
 8004566:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004568:	e048      	b.n	80045fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004570:	d044      	beq.n	80045fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004572:	f7fe ff35 	bl	80033e0 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d302      	bcc.n	8004588 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d139      	bne.n	80045fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	0c1b      	lsrs	r3, r3, #16
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b01      	cmp	r3, #1
 8004590:	d10d      	bne.n	80045ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	43da      	mvns	r2, r3
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	4013      	ands	r3, r2
 800459e:	b29b      	uxth	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	bf0c      	ite	eq
 80045a4:	2301      	moveq	r3, #1
 80045a6:	2300      	movne	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	461a      	mov	r2, r3
 80045ac:	e00c      	b.n	80045c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	43da      	mvns	r2, r3
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	4013      	ands	r3, r2
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	bf0c      	ite	eq
 80045c0:	2301      	moveq	r3, #1
 80045c2:	2300      	movne	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	461a      	mov	r2, r3
 80045c8:	79fb      	ldrb	r3, [r7, #7]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d116      	bne.n	80045fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e8:	f043 0220 	orr.w	r2, r3, #32
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e023      	b.n	8004644 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	0c1b      	lsrs	r3, r3, #16
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b01      	cmp	r3, #1
 8004604:	d10d      	bne.n	8004622 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	43da      	mvns	r2, r3
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	4013      	ands	r3, r2
 8004612:	b29b      	uxth	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	bf0c      	ite	eq
 8004618:	2301      	moveq	r3, #1
 800461a:	2300      	movne	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	461a      	mov	r2, r3
 8004620:	e00c      	b.n	800463c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	43da      	mvns	r2, r3
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	4013      	ands	r3, r2
 800462e:	b29b      	uxth	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	bf0c      	ite	eq
 8004634:	2301      	moveq	r3, #1
 8004636:	2300      	movne	r3, #0
 8004638:	b2db      	uxtb	r3, r3
 800463a:	461a      	mov	r2, r3
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	429a      	cmp	r2, r3
 8004640:	d093      	beq.n	800456a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
 8004658:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800465a:	e071      	b.n	8004740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004666:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800466a:	d123      	bne.n	80046b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800467a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004684:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a0:	f043 0204 	orr.w	r2, r3, #4
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e067      	b.n	8004784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ba:	d041      	beq.n	8004740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046bc:	f7fe fe90 	bl	80033e0 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d302      	bcc.n	80046d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d136      	bne.n	8004740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	0c1b      	lsrs	r3, r3, #16
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d10c      	bne.n	80046f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	43da      	mvns	r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	4013      	ands	r3, r2
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	bf14      	ite	ne
 80046ee:	2301      	movne	r3, #1
 80046f0:	2300      	moveq	r3, #0
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	e00b      	b.n	800470e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	43da      	mvns	r2, r3
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	4013      	ands	r3, r2
 8004702:	b29b      	uxth	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	bf14      	ite	ne
 8004708:	2301      	movne	r3, #1
 800470a:	2300      	moveq	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d016      	beq.n	8004740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472c:	f043 0220 	orr.w	r2, r3, #32
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e021      	b.n	8004784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	0c1b      	lsrs	r3, r3, #16
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b01      	cmp	r3, #1
 8004748:	d10c      	bne.n	8004764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	43da      	mvns	r2, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	4013      	ands	r3, r2
 8004756:	b29b      	uxth	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	bf14      	ite	ne
 800475c:	2301      	movne	r3, #1
 800475e:	2300      	moveq	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	e00b      	b.n	800477c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	43da      	mvns	r2, r3
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4013      	ands	r3, r2
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	bf14      	ite	ne
 8004776:	2301      	movne	r3, #1
 8004778:	2300      	moveq	r3, #0
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	f47f af6d 	bne.w	800465c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004798:	e034      	b.n	8004804 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 f8e3 	bl	8004966 <I2C_IsAcknowledgeFailed>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e034      	b.n	8004814 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b0:	d028      	beq.n	8004804 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b2:	f7fe fe15 	bl	80033e0 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d302      	bcc.n	80047c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d11d      	bne.n	8004804 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047d2:	2b80      	cmp	r3, #128	@ 0x80
 80047d4:	d016      	beq.n	8004804 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2220      	movs	r2, #32
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f0:	f043 0220 	orr.w	r2, r3, #32
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e007      	b.n	8004814 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800480e:	2b80      	cmp	r3, #128	@ 0x80
 8004810:	d1c3      	bne.n	800479a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004828:	e034      	b.n	8004894 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 f89b 	bl	8004966 <I2C_IsAcknowledgeFailed>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e034      	b.n	80048a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004840:	d028      	beq.n	8004894 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004842:	f7fe fdcd 	bl	80033e0 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	429a      	cmp	r2, r3
 8004850:	d302      	bcc.n	8004858 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d11d      	bne.n	8004894 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	f003 0304 	and.w	r3, r3, #4
 8004862:	2b04      	cmp	r3, #4
 8004864:	d016      	beq.n	8004894 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2220      	movs	r2, #32
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004880:	f043 0220 	orr.w	r2, r3, #32
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e007      	b.n	80048a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d1c3      	bne.n	800482a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048b8:	e049      	b.n	800494e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	2b10      	cmp	r3, #16
 80048c6:	d119      	bne.n	80048fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f06f 0210 	mvn.w	r2, #16
 80048d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2220      	movs	r2, #32
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e030      	b.n	800495e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048fc:	f7fe fd70 	bl	80033e0 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	429a      	cmp	r2, r3
 800490a:	d302      	bcc.n	8004912 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d11d      	bne.n	800494e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800491c:	2b40      	cmp	r3, #64	@ 0x40
 800491e:	d016      	beq.n	800494e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2220      	movs	r2, #32
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493a:	f043 0220 	orr.w	r2, r3, #32
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e007      	b.n	800495e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004958:	2b40      	cmp	r3, #64	@ 0x40
 800495a:	d1ae      	bne.n	80048ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004978:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800497c:	d11b      	bne.n	80049b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004986:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a2:	f043 0204 	orr.w	r2, r3, #4
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af02      	add	r7, sp, #8
 80049ca:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e101      	b.n	8004bda <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d106      	bne.n	80049f6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f006 fe13 	bl	800b61c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2203      	movs	r2, #3
 80049fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a04:	d102      	bne.n	8004a0c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f003 fbd8 	bl	80081c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6818      	ldr	r0, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	7c1a      	ldrb	r2, [r3, #16]
 8004a1e:	f88d 2000 	strb.w	r2, [sp]
 8004a22:	3304      	adds	r3, #4
 8004a24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a26:	f003 fab7 	bl	8007f98 <USB_CoreInit>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e0ce      	b.n	8004bda <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2100      	movs	r1, #0
 8004a42:	4618      	mov	r0, r3
 8004a44:	f003 fbd0 	bl	80081e8 <USB_SetCurrentMode>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d005      	beq.n	8004a5a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2202      	movs	r2, #2
 8004a52:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e0bf      	b.n	8004bda <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	73fb      	strb	r3, [r7, #15]
 8004a5e:	e04a      	b.n	8004af6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a60:	7bfa      	ldrb	r2, [r7, #15]
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	4613      	mov	r3, r2
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	4413      	add	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	3315      	adds	r3, #21
 8004a70:	2201      	movs	r2, #1
 8004a72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a74:	7bfa      	ldrb	r2, [r7, #15]
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	440b      	add	r3, r1
 8004a82:	3314      	adds	r3, #20
 8004a84:	7bfa      	ldrb	r2, [r7, #15]
 8004a86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a88:	7bfa      	ldrb	r2, [r7, #15]
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
 8004a8c:	b298      	uxth	r0, r3
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	4413      	add	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	332e      	adds	r3, #46	@ 0x2e
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004aa0:	7bfa      	ldrb	r2, [r7, #15]
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	440b      	add	r3, r1
 8004aae:	3318      	adds	r3, #24
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ab4:	7bfa      	ldrb	r2, [r7, #15]
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	4413      	add	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	331c      	adds	r3, #28
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ac8:	7bfa      	ldrb	r2, [r7, #15]
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	3320      	adds	r3, #32
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004adc:	7bfa      	ldrb	r2, [r7, #15]
 8004ade:	6879      	ldr	r1, [r7, #4]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	4413      	add	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	440b      	add	r3, r1
 8004aea:	3324      	adds	r3, #36	@ 0x24
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
 8004af2:	3301      	adds	r3, #1
 8004af4:	73fb      	strb	r3, [r7, #15]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	791b      	ldrb	r3, [r3, #4]
 8004afa:	7bfa      	ldrb	r2, [r7, #15]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d3af      	bcc.n	8004a60 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b00:	2300      	movs	r3, #0
 8004b02:	73fb      	strb	r3, [r7, #15]
 8004b04:	e044      	b.n	8004b90 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b06:	7bfa      	ldrb	r2, [r7, #15]
 8004b08:	6879      	ldr	r1, [r7, #4]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	4413      	add	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	440b      	add	r3, r1
 8004b14:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004b18:	2200      	movs	r2, #0
 8004b1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004b1c:	7bfa      	ldrb	r2, [r7, #15]
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	4613      	mov	r3, r2
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	4413      	add	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004b2e:	7bfa      	ldrb	r2, [r7, #15]
 8004b30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004b32:	7bfa      	ldrb	r2, [r7, #15]
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	4613      	mov	r3, r2
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	4413      	add	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	440b      	add	r3, r1
 8004b40:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004b44:	2200      	movs	r2, #0
 8004b46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b48:	7bfa      	ldrb	r2, [r7, #15]
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	4413      	add	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	440b      	add	r3, r1
 8004b56:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b5e:	7bfa      	ldrb	r2, [r7, #15]
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	4613      	mov	r3, r2
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	4413      	add	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b74:	7bfa      	ldrb	r2, [r7, #15]
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	440b      	add	r3, r1
 8004b82:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	73fb      	strb	r3, [r7, #15]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	791b      	ldrb	r3, [r3, #4]
 8004b94:	7bfa      	ldrb	r2, [r7, #15]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d3b5      	bcc.n	8004b06 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	7c1a      	ldrb	r2, [r3, #16]
 8004ba2:	f88d 2000 	strb.w	r2, [sp]
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004baa:	f003 fb69 	bl	8008280 <USB_DevInit>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e00c      	b.n	8004bda <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f004 fbad 	bl	8009332 <USB_DevDisconnect>

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b084      	sub	sp, #16
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <HAL_PCD_Start+0x1c>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	e022      	b.n	8004c44 <HAL_PCD_Start+0x62>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d009      	beq.n	8004c26 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d105      	bne.n	8004c26 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f003 faba 	bl	80081a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f004 fb5b 	bl	80092f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004c4c:	b590      	push	{r4, r7, lr}
 8004c4e:	b08d      	sub	sp, #52	@ 0x34
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f004 fc19 	bl	800949a <USB_GetMode>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f040 848c 	bne.w	8005588 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f004 fb7d 	bl	8009374 <USB_ReadInterrupts>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 8482 	beq.w	8005586 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	0a1b      	lsrs	r3, r3, #8
 8004c8c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f004 fb6a 	bl	8009374 <USB_ReadInterrupts>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d107      	bne.n	8004cba <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	695a      	ldr	r2, [r3, #20]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f002 0202 	and.w	r2, r2, #2
 8004cb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f004 fb58 	bl	8009374 <USB_ReadInterrupts>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	f003 0310 	and.w	r3, r3, #16
 8004cca:	2b10      	cmp	r3, #16
 8004ccc:	d161      	bne.n	8004d92 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	699a      	ldr	r2, [r3, #24]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0210 	bic.w	r2, r2, #16
 8004cdc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	f003 020f 	and.w	r2, r3, #15
 8004cea:	4613      	mov	r3, r2
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	4413      	add	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	0c5b      	lsrs	r3, r3, #17
 8004d02:	f003 030f 	and.w	r3, r3, #15
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d124      	bne.n	8004d54 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004d10:	4013      	ands	r3, r2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d035      	beq.n	8004d82 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	091b      	lsrs	r3, r3, #4
 8004d1e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004d20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	461a      	mov	r2, r3
 8004d28:	6a38      	ldr	r0, [r7, #32]
 8004d2a:	f004 f98f 	bl	800904c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	68da      	ldr	r2, [r3, #12]
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	091b      	lsrs	r3, r3, #4
 8004d36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d3a:	441a      	add	r2, r3
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	695a      	ldr	r2, [r3, #20]
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	091b      	lsrs	r3, r3, #4
 8004d48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d4c:	441a      	add	r2, r3
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	615a      	str	r2, [r3, #20]
 8004d52:	e016      	b.n	8004d82 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	0c5b      	lsrs	r3, r3, #17
 8004d58:	f003 030f 	and.w	r3, r3, #15
 8004d5c:	2b06      	cmp	r3, #6
 8004d5e:	d110      	bne.n	8004d82 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004d66:	2208      	movs	r2, #8
 8004d68:	4619      	mov	r1, r3
 8004d6a:	6a38      	ldr	r0, [r7, #32]
 8004d6c:	f004 f96e 	bl	800904c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	695a      	ldr	r2, [r3, #20]
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	091b      	lsrs	r3, r3, #4
 8004d78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d7c:	441a      	add	r2, r3
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	699a      	ldr	r2, [r3, #24]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f042 0210 	orr.w	r2, r2, #16
 8004d90:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f004 faec 	bl	8009374 <USB_ReadInterrupts>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004da2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004da6:	f040 80a7 	bne.w	8004ef8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f004 faf1 	bl	800939a <USB_ReadDevAllOutEpInterrupt>
 8004db8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004dba:	e099      	b.n	8004ef0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 808e 	beq.w	8004ee4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dce:	b2d2      	uxtb	r2, r2
 8004dd0:	4611      	mov	r1, r2
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f004 fb15 	bl	8009402 <USB_ReadDevOutEPInterrupt>
 8004dd8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00c      	beq.n	8004dfe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004df0:	461a      	mov	r2, r3
 8004df2:	2301      	movs	r3, #1
 8004df4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004df6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 fe89 	bl	8005b10 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00c      	beq.n	8004e22 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e14:	461a      	mov	r2, r3
 8004e16:	2308      	movs	r3, #8
 8004e18:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004e1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 ff5f 	bl	8005ce0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f003 0310 	and.w	r3, r3, #16
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d008      	beq.n	8004e3e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e38:	461a      	mov	r2, r3
 8004e3a:	2310      	movs	r3, #16
 8004e3c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d030      	beq.n	8004eaa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e50:	2b80      	cmp	r3, #128	@ 0x80
 8004e52:	d109      	bne.n	8004e68 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e66:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	4413      	add	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	4413      	add	r3, r2
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	78db      	ldrb	r3, [r3, #3]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d108      	bne.n	8004e98 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	4619      	mov	r1, r3
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f006 fcbe 	bl	800b814 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f003 0320 	and.w	r3, r3, #32
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d008      	beq.n	8004ec6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	2320      	movs	r3, #32
 8004ec4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d009      	beq.n	8004ee4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004edc:	461a      	mov	r2, r3
 8004ede:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004ee2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eec:	085b      	lsrs	r3, r3, #1
 8004eee:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f47f af62 	bne.w	8004dbc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f004 fa39 	bl	8009374 <USB_ReadInterrupts>
 8004f02:	4603      	mov	r3, r0
 8004f04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f0c:	f040 80db 	bne.w	80050c6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f004 fa5a 	bl	80093ce <USB_ReadDevAllInEpInterrupt>
 8004f1a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004f20:	e0cd      	b.n	80050be <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 80c2 	beq.w	80050b2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	4611      	mov	r1, r2
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f004 fa80 	bl	800943e <USB_ReadDevInEPInterrupt>
 8004f3e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d057      	beq.n	8004ffa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4c:	f003 030f 	and.w	r3, r3, #15
 8004f50:	2201      	movs	r2, #1
 8004f52:	fa02 f303 	lsl.w	r3, r2, r3
 8004f56:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	43db      	mvns	r3, r3
 8004f64:	69f9      	ldr	r1, [r7, #28]
 8004f66:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	799b      	ldrb	r3, [r3, #6]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d132      	bne.n	8004fee <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004f88:	6879      	ldr	r1, [r7, #4]
 8004f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	4413      	add	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	440b      	add	r3, r1
 8004f96:	3320      	adds	r3, #32
 8004f98:	6819      	ldr	r1, [r3, #0]
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	4413      	add	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4403      	add	r3, r0
 8004fa8:	331c      	adds	r3, #28
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4419      	add	r1, r3
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	4413      	add	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4403      	add	r3, r0
 8004fbc:	3320      	adds	r3, #32
 8004fbe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d113      	bne.n	8004fee <HAL_PCD_IRQHandler+0x3a2>
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fca:	4613      	mov	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	4413      	add	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	3324      	adds	r3, #36	@ 0x24
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d108      	bne.n	8004fee <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6818      	ldr	r0, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	2101      	movs	r1, #1
 8004fea:	f004 fa87 	bl	80094fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f006 fb92 	bl	800b71e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f003 0308 	and.w	r3, r3, #8
 8005000:	2b00      	cmp	r3, #0
 8005002:	d008      	beq.n	8005016 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005010:	461a      	mov	r2, r3
 8005012:	2308      	movs	r3, #8
 8005014:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f003 0310 	and.w	r3, r3, #16
 800501c:	2b00      	cmp	r3, #0
 800501e:	d008      	beq.n	8005032 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800502c:	461a      	mov	r2, r3
 800502e:	2310      	movs	r3, #16
 8005030:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005038:	2b00      	cmp	r3, #0
 800503a:	d008      	beq.n	800504e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800503c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005048:	461a      	mov	r2, r3
 800504a:	2340      	movs	r3, #64	@ 0x40
 800504c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d023      	beq.n	80050a0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005058:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800505a:	6a38      	ldr	r0, [r7, #32]
 800505c:	f003 fa74 	bl	8008548 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005062:	4613      	mov	r3, r2
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	4413      	add	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	3310      	adds	r3, #16
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	4413      	add	r3, r2
 8005070:	3304      	adds	r3, #4
 8005072:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	78db      	ldrb	r3, [r3, #3]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d108      	bne.n	800508e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	2200      	movs	r2, #0
 8005080:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	b2db      	uxtb	r3, r3
 8005086:	4619      	mov	r1, r3
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f006 fbd5 	bl	800b838 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800508e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800509a:	461a      	mov	r2, r3
 800509c:	2302      	movs	r3, #2
 800509e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80050aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fca3 	bl	80059f8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80050b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b4:	3301      	adds	r3, #1
 80050b6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80050b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ba:	085b      	lsrs	r3, r3, #1
 80050bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80050be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f47f af2e 	bne.w	8004f22 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f004 f952 	bl	8009374 <USB_ReadInterrupts>
 80050d0:	4603      	mov	r3, r0
 80050d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050da:	d122      	bne.n	8005122 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	69fa      	ldr	r2, [r7, #28]
 80050e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050ea:	f023 0301 	bic.w	r3, r3, #1
 80050ee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d108      	bne.n	800510c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005102:	2100      	movs	r1, #0
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fe89 	bl	8005e1c <HAL_PCDEx_LPM_Callback>
 800510a:	e002      	b.n	8005112 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f006 fb73 	bl	800b7f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	695a      	ldr	r2, [r3, #20]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005120:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4618      	mov	r0, r3
 8005128:	f004 f924 	bl	8009374 <USB_ReadInterrupts>
 800512c:	4603      	mov	r3, r0
 800512e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005132:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005136:	d112      	bne.n	800515e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b01      	cmp	r3, #1
 8005146:	d102      	bne.n	800514e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f006 fb2f 	bl	800b7ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695a      	ldr	r2, [r3, #20]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800515c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f004 f906 	bl	8009374 <USB_ReadInterrupts>
 8005168:	4603      	mov	r3, r0
 800516a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800516e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005172:	f040 80b7 	bne.w	80052e4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	69fa      	ldr	r2, [r7, #28]
 8005180:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005184:	f023 0301 	bic.w	r3, r3, #1
 8005188:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2110      	movs	r1, #16
 8005190:	4618      	mov	r0, r3
 8005192:	f003 f9d9 	bl	8008548 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005196:	2300      	movs	r3, #0
 8005198:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800519a:	e046      	b.n	800522a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800519c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051a8:	461a      	mov	r2, r3
 80051aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80051ae:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80051b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051c0:	0151      	lsls	r1, r2, #5
 80051c2:	69fa      	ldr	r2, [r7, #28]
 80051c4:	440a      	add	r2, r1
 80051c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80051ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80051d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051dc:	461a      	mov	r2, r3
 80051de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80051e2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80051e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051f4:	0151      	lsls	r1, r2, #5
 80051f6:	69fa      	ldr	r2, [r7, #28]
 80051f8:	440a      	add	r2, r1
 80051fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005202:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005214:	0151      	lsls	r1, r2, #5
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	440a      	add	r2, r1
 800521a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800521e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005222:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005226:	3301      	adds	r3, #1
 8005228:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	791b      	ldrb	r3, [r3, #4]
 800522e:	461a      	mov	r2, r3
 8005230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005232:	4293      	cmp	r3, r2
 8005234:	d3b2      	bcc.n	800519c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005244:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005248:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	7bdb      	ldrb	r3, [r3, #15]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d016      	beq.n	8005280 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005258:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800525c:	69fa      	ldr	r2, [r7, #28]
 800525e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005262:	f043 030b 	orr.w	r3, r3, #11
 8005266:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005272:	69fa      	ldr	r2, [r7, #28]
 8005274:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005278:	f043 030b 	orr.w	r3, r3, #11
 800527c:	6453      	str	r3, [r2, #68]	@ 0x44
 800527e:	e015      	b.n	80052ac <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	69fa      	ldr	r2, [r7, #28]
 800528a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800528e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005292:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005296:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	69fa      	ldr	r2, [r7, #28]
 80052a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052a6:	f043 030b 	orr.w	r3, r3, #11
 80052aa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	69fa      	ldr	r2, [r7, #28]
 80052b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052ba:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80052be:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6818      	ldr	r0, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80052ce:	461a      	mov	r2, r3
 80052d0:	f004 f914 	bl	80094fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	695a      	ldr	r2, [r3, #20]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80052e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f004 f843 	bl	8009374 <USB_ReadInterrupts>
 80052ee:	4603      	mov	r3, r0
 80052f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052f8:	d123      	bne.n	8005342 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4618      	mov	r0, r3
 8005300:	f004 f8d9 	bl	80094b6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4618      	mov	r0, r3
 800530a:	f003 f996 	bl	800863a <USB_GetDevSpeed>
 800530e:	4603      	mov	r3, r0
 8005310:	461a      	mov	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681c      	ldr	r4, [r3, #0]
 800531a:	f001 f9af 	bl	800667c <HAL_RCC_GetHCLKFreq>
 800531e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005324:	461a      	mov	r2, r3
 8005326:	4620      	mov	r0, r4
 8005328:	f002 fe9a 	bl	8008060 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f006 fa1e 	bl	800b76e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	695a      	ldr	r2, [r3, #20]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005340:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4618      	mov	r0, r3
 8005348:	f004 f814 	bl	8009374 <USB_ReadInterrupts>
 800534c:	4603      	mov	r3, r0
 800534e:	f003 0308 	and.w	r3, r3, #8
 8005352:	2b08      	cmp	r3, #8
 8005354:	d10a      	bne.n	800536c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f006 f9fb 	bl	800b752 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695a      	ldr	r2, [r3, #20]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f002 0208 	and.w	r2, r2, #8
 800536a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4618      	mov	r0, r3
 8005372:	f003 ffff 	bl	8009374 <USB_ReadInterrupts>
 8005376:	4603      	mov	r3, r0
 8005378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800537c:	2b80      	cmp	r3, #128	@ 0x80
 800537e:	d123      	bne.n	80053c8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800538c:	2301      	movs	r3, #1
 800538e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005390:	e014      	b.n	80053bc <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005392:	6879      	ldr	r1, [r7, #4]
 8005394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005396:	4613      	mov	r3, r2
 8005398:	00db      	lsls	r3, r3, #3
 800539a:	4413      	add	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	440b      	add	r3, r1
 80053a0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d105      	bne.n	80053b6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80053aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	4619      	mov	r1, r3
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 faf0 	bl	8005996 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b8:	3301      	adds	r3, #1
 80053ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	791b      	ldrb	r3, [r3, #4]
 80053c0:	461a      	mov	r2, r3
 80053c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d3e4      	bcc.n	8005392 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f003 ffd1 	bl	8009374 <USB_ReadInterrupts>
 80053d2:	4603      	mov	r3, r0
 80053d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053dc:	d13c      	bne.n	8005458 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053de:	2301      	movs	r3, #1
 80053e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80053e2:	e02b      	b.n	800543c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80053e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80053f4:	6879      	ldr	r1, [r7, #4]
 80053f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053f8:	4613      	mov	r3, r2
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	4413      	add	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	440b      	add	r3, r1
 8005402:	3318      	adds	r3, #24
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d115      	bne.n	8005436 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800540a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800540c:	2b00      	cmp	r3, #0
 800540e:	da12      	bge.n	8005436 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005414:	4613      	mov	r3, r2
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	4413      	add	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	440b      	add	r3, r1
 800541e:	3317      	adds	r3, #23
 8005420:	2201      	movs	r2, #1
 8005422:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005426:	b2db      	uxtb	r3, r3
 8005428:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800542c:	b2db      	uxtb	r3, r3
 800542e:	4619      	mov	r1, r3
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 fab0 	bl	8005996 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005438:	3301      	adds	r3, #1
 800543a:	627b      	str	r3, [r7, #36]	@ 0x24
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	791b      	ldrb	r3, [r3, #4]
 8005440:	461a      	mov	r2, r3
 8005442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005444:	4293      	cmp	r3, r2
 8005446:	d3cd      	bcc.n	80053e4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	695a      	ldr	r2, [r3, #20]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005456:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4618      	mov	r0, r3
 800545e:	f003 ff89 	bl	8009374 <USB_ReadInterrupts>
 8005462:	4603      	mov	r3, r0
 8005464:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005468:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800546c:	d156      	bne.n	800551c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800546e:	2301      	movs	r3, #1
 8005470:	627b      	str	r3, [r7, #36]	@ 0x24
 8005472:	e045      	b.n	8005500 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005484:	6879      	ldr	r1, [r7, #4]
 8005486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005488:	4613      	mov	r3, r2
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	4413      	add	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	440b      	add	r3, r1
 8005492:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d12e      	bne.n	80054fa <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800549c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800549e:	2b00      	cmp	r3, #0
 80054a0:	da2b      	bge.n	80054fa <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80054ae:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d121      	bne.n	80054fa <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054ba:	4613      	mov	r3, r2
 80054bc:	00db      	lsls	r3, r3, #3
 80054be:	4413      	add	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	440b      	add	r3, r1
 80054c4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80054c8:	2201      	movs	r2, #1
 80054ca:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10a      	bne.n	80054fa <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	69fa      	ldr	r2, [r7, #28]
 80054ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80054f6:	6053      	str	r3, [r2, #4]
            break;
 80054f8:	e008      	b.n	800550c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fc:	3301      	adds	r3, #1
 80054fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	791b      	ldrb	r3, [r3, #4]
 8005504:	461a      	mov	r2, r3
 8005506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005508:	4293      	cmp	r3, r2
 800550a:	d3b3      	bcc.n	8005474 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	695a      	ldr	r2, [r3, #20]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800551a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4618      	mov	r0, r3
 8005522:	f003 ff27 	bl	8009374 <USB_ReadInterrupts>
 8005526:	4603      	mov	r3, r0
 8005528:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800552c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005530:	d10a      	bne.n	8005548 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f006 f992 	bl	800b85c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695a      	ldr	r2, [r3, #20]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005546:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4618      	mov	r0, r3
 800554e:	f003 ff11 	bl	8009374 <USB_ReadInterrupts>
 8005552:	4603      	mov	r3, r0
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b04      	cmp	r3, #4
 800555a:	d115      	bne.n	8005588 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	f003 0304 	and.w	r3, r3, #4
 800556a:	2b00      	cmp	r3, #0
 800556c:	d002      	beq.n	8005574 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f006 f982 	bl	800b878 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6859      	ldr	r1, [r3, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	430a      	orrs	r2, r1
 8005582:	605a      	str	r2, [r3, #4]
 8005584:	e000      	b.n	8005588 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005586:	bf00      	nop
    }
  }
}
 8005588:	3734      	adds	r7, #52	@ 0x34
 800558a:	46bd      	mov	sp, r7
 800558c:	bd90      	pop	{r4, r7, pc}

0800558e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b082      	sub	sp, #8
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	460b      	mov	r3, r1
 8005598:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d101      	bne.n	80055a8 <HAL_PCD_SetAddress+0x1a>
 80055a4:	2302      	movs	r3, #2
 80055a6:	e012      	b.n	80055ce <HAL_PCD_SetAddress+0x40>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	78fa      	ldrb	r2, [r7, #3]
 80055b4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	78fa      	ldrb	r2, [r7, #3]
 80055bc:	4611      	mov	r1, r2
 80055be:	4618      	mov	r0, r3
 80055c0:	f003 fe70 	bl	80092a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b084      	sub	sp, #16
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	4608      	mov	r0, r1
 80055e0:	4611      	mov	r1, r2
 80055e2:	461a      	mov	r2, r3
 80055e4:	4603      	mov	r3, r0
 80055e6:	70fb      	strb	r3, [r7, #3]
 80055e8:	460b      	mov	r3, r1
 80055ea:	803b      	strh	r3, [r7, #0]
 80055ec:	4613      	mov	r3, r2
 80055ee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80055f0:	2300      	movs	r3, #0
 80055f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80055f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	da0f      	bge.n	800561c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055fc:	78fb      	ldrb	r3, [r7, #3]
 80055fe:	f003 020f 	and.w	r2, r3, #15
 8005602:	4613      	mov	r3, r2
 8005604:	00db      	lsls	r3, r3, #3
 8005606:	4413      	add	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	3310      	adds	r3, #16
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	4413      	add	r3, r2
 8005610:	3304      	adds	r3, #4
 8005612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2201      	movs	r2, #1
 8005618:	705a      	strb	r2, [r3, #1]
 800561a:	e00f      	b.n	800563c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	f003 020f 	and.w	r2, r3, #15
 8005622:	4613      	mov	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4413      	add	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	4413      	add	r3, r2
 8005632:	3304      	adds	r3, #4
 8005634:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800563c:	78fb      	ldrb	r3, [r7, #3]
 800563e:	f003 030f 	and.w	r3, r3, #15
 8005642:	b2da      	uxtb	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005648:	883a      	ldrh	r2, [r7, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	78ba      	ldrb	r2, [r7, #2]
 8005652:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	785b      	ldrb	r3, [r3, #1]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d004      	beq.n	8005666 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	461a      	mov	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005666:	78bb      	ldrb	r3, [r7, #2]
 8005668:	2b02      	cmp	r3, #2
 800566a:	d102      	bne.n	8005672 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005678:	2b01      	cmp	r3, #1
 800567a:	d101      	bne.n	8005680 <HAL_PCD_EP_Open+0xaa>
 800567c:	2302      	movs	r3, #2
 800567e:	e00e      	b.n	800569e <HAL_PCD_EP_Open+0xc8>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68f9      	ldr	r1, [r7, #12]
 800568e:	4618      	mov	r0, r3
 8005690:	f002 fff8 	bl	8008684 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800569c:	7afb      	ldrb	r3, [r7, #11]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b084      	sub	sp, #16
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	460b      	mov	r3, r1
 80056b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	da0f      	bge.n	80056da <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056ba:	78fb      	ldrb	r3, [r7, #3]
 80056bc:	f003 020f 	and.w	r2, r3, #15
 80056c0:	4613      	mov	r3, r2
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	4413      	add	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	3310      	adds	r3, #16
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	4413      	add	r3, r2
 80056ce:	3304      	adds	r3, #4
 80056d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2201      	movs	r2, #1
 80056d6:	705a      	strb	r2, [r3, #1]
 80056d8:	e00f      	b.n	80056fa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056da:	78fb      	ldrb	r3, [r7, #3]
 80056dc:	f003 020f 	and.w	r2, r3, #15
 80056e0:	4613      	mov	r3, r2
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	4413      	add	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	4413      	add	r3, r2
 80056f0:	3304      	adds	r3, #4
 80056f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80056fa:	78fb      	ldrb	r3, [r7, #3]
 80056fc:	f003 030f 	and.w	r3, r3, #15
 8005700:	b2da      	uxtb	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800570c:	2b01      	cmp	r3, #1
 800570e:	d101      	bne.n	8005714 <HAL_PCD_EP_Close+0x6e>
 8005710:	2302      	movs	r3, #2
 8005712:	e00e      	b.n	8005732 <HAL_PCD_EP_Close+0x8c>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68f9      	ldr	r1, [r7, #12]
 8005722:	4618      	mov	r0, r3
 8005724:	f003 f836 	bl	8008794 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b086      	sub	sp, #24
 800573e:	af00      	add	r7, sp, #0
 8005740:	60f8      	str	r0, [r7, #12]
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	603b      	str	r3, [r7, #0]
 8005746:	460b      	mov	r3, r1
 8005748:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800574a:	7afb      	ldrb	r3, [r7, #11]
 800574c:	f003 020f 	and.w	r2, r3, #15
 8005750:	4613      	mov	r3, r2
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	4413      	add	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	4413      	add	r3, r2
 8005760:	3304      	adds	r3, #4
 8005762:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	2200      	movs	r2, #0
 8005774:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2200      	movs	r2, #0
 800577a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800577c:	7afb      	ldrb	r3, [r7, #11]
 800577e:	f003 030f 	and.w	r3, r3, #15
 8005782:	b2da      	uxtb	r2, r3
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	799b      	ldrb	r3, [r3, #6]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d102      	bne.n	8005796 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6818      	ldr	r0, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	799b      	ldrb	r3, [r3, #6]
 800579e:	461a      	mov	r2, r3
 80057a0:	6979      	ldr	r1, [r7, #20]
 80057a2:	f003 f8d3 	bl	800894c <USB_EPStartXfer>

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	607a      	str	r2, [r7, #4]
 80057ba:	603b      	str	r3, [r7, #0]
 80057bc:	460b      	mov	r3, r1
 80057be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057c0:	7afb      	ldrb	r3, [r7, #11]
 80057c2:	f003 020f 	and.w	r2, r3, #15
 80057c6:	4613      	mov	r3, r2
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	4413      	add	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	3310      	adds	r3, #16
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	4413      	add	r3, r2
 80057d4:	3304      	adds	r3, #4
 80057d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2200      	movs	r2, #0
 80057e8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2201      	movs	r2, #1
 80057ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057f0:	7afb      	ldrb	r3, [r7, #11]
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	799b      	ldrb	r3, [r3, #6]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d102      	bne.n	800580a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6818      	ldr	r0, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	799b      	ldrb	r3, [r3, #6]
 8005812:	461a      	mov	r2, r3
 8005814:	6979      	ldr	r1, [r7, #20]
 8005816:	f003 f899 	bl	800894c <USB_EPStartXfer>

  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3718      	adds	r7, #24
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	460b      	mov	r3, r1
 800582e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005830:	78fb      	ldrb	r3, [r7, #3]
 8005832:	f003 030f 	and.w	r3, r3, #15
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	7912      	ldrb	r2, [r2, #4]
 800583a:	4293      	cmp	r3, r2
 800583c:	d901      	bls.n	8005842 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e04f      	b.n	80058e2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005842:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005846:	2b00      	cmp	r3, #0
 8005848:	da0f      	bge.n	800586a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800584a:	78fb      	ldrb	r3, [r7, #3]
 800584c:	f003 020f 	and.w	r2, r3, #15
 8005850:	4613      	mov	r3, r2
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	4413      	add	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	3310      	adds	r3, #16
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	4413      	add	r3, r2
 800585e:	3304      	adds	r3, #4
 8005860:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2201      	movs	r2, #1
 8005866:	705a      	strb	r2, [r3, #1]
 8005868:	e00d      	b.n	8005886 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800586a:	78fa      	ldrb	r2, [r7, #3]
 800586c:	4613      	mov	r3, r2
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	4413      	add	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	4413      	add	r3, r2
 800587c:	3304      	adds	r3, #4
 800587e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2201      	movs	r2, #1
 800588a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800588c:	78fb      	ldrb	r3, [r7, #3]
 800588e:	f003 030f 	and.w	r3, r3, #15
 8005892:	b2da      	uxtb	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d101      	bne.n	80058a6 <HAL_PCD_EP_SetStall+0x82>
 80058a2:	2302      	movs	r3, #2
 80058a4:	e01d      	b.n	80058e2 <HAL_PCD_EP_SetStall+0xbe>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68f9      	ldr	r1, [r7, #12]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f003 fc21 	bl	80090fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80058ba:	78fb      	ldrb	r3, [r7, #3]
 80058bc:	f003 030f 	and.w	r3, r3, #15
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d109      	bne.n	80058d8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6818      	ldr	r0, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	7999      	ldrb	r1, [r3, #6]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80058d2:	461a      	mov	r2, r3
 80058d4:	f003 fe12 	bl	80094fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b084      	sub	sp, #16
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	460b      	mov	r3, r1
 80058f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80058f6:	78fb      	ldrb	r3, [r7, #3]
 80058f8:	f003 030f 	and.w	r3, r3, #15
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	7912      	ldrb	r2, [r2, #4]
 8005900:	4293      	cmp	r3, r2
 8005902:	d901      	bls.n	8005908 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e042      	b.n	800598e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005908:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800590c:	2b00      	cmp	r3, #0
 800590e:	da0f      	bge.n	8005930 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005910:	78fb      	ldrb	r3, [r7, #3]
 8005912:	f003 020f 	and.w	r2, r3, #15
 8005916:	4613      	mov	r3, r2
 8005918:	00db      	lsls	r3, r3, #3
 800591a:	4413      	add	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	3310      	adds	r3, #16
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	4413      	add	r3, r2
 8005924:	3304      	adds	r3, #4
 8005926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2201      	movs	r2, #1
 800592c:	705a      	strb	r2, [r3, #1]
 800592e:	e00f      	b.n	8005950 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	f003 020f 	and.w	r2, r3, #15
 8005936:	4613      	mov	r3, r2
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	4413      	add	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	4413      	add	r3, r2
 8005946:	3304      	adds	r3, #4
 8005948:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005956:	78fb      	ldrb	r3, [r7, #3]
 8005958:	f003 030f 	and.w	r3, r3, #15
 800595c:	b2da      	uxtb	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <HAL_PCD_EP_ClrStall+0x86>
 800596c:	2302      	movs	r3, #2
 800596e:	e00e      	b.n	800598e <HAL_PCD_EP_ClrStall+0xa4>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68f9      	ldr	r1, [r7, #12]
 800597e:	4618      	mov	r0, r3
 8005980:	f003 fc2a 	bl	80091d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b084      	sub	sp, #16
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	460b      	mov	r3, r1
 80059a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80059a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	da0c      	bge.n	80059c4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059aa:	78fb      	ldrb	r3, [r7, #3]
 80059ac:	f003 020f 	and.w	r2, r3, #15
 80059b0:	4613      	mov	r3, r2
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	4413      	add	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	3310      	adds	r3, #16
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	4413      	add	r3, r2
 80059be:	3304      	adds	r3, #4
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	e00c      	b.n	80059de <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059c4:	78fb      	ldrb	r3, [r7, #3]
 80059c6:	f003 020f 	and.w	r2, r3, #15
 80059ca:	4613      	mov	r3, r2
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	4413      	add	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	4413      	add	r3, r2
 80059da:	3304      	adds	r3, #4
 80059dc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68f9      	ldr	r1, [r7, #12]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f003 fa49 	bl	8008e7c <USB_EPStopXfer>
 80059ea:	4603      	mov	r3, r0
 80059ec:	72fb      	strb	r3, [r7, #11]

  return ret;
 80059ee:	7afb      	ldrb	r3, [r7, #11]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08a      	sub	sp, #40	@ 0x28
 80059fc:	af02      	add	r7, sp, #8
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	00db      	lsls	r3, r3, #3
 8005a12:	4413      	add	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	3310      	adds	r3, #16
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	3304      	adds	r3, #4
 8005a1e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	695a      	ldr	r2, [r3, #20]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d901      	bls.n	8005a30 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e06b      	b.n	8005b08 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	69fa      	ldr	r2, [r7, #28]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d902      	bls.n	8005a4c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	3303      	adds	r3, #3
 8005a50:	089b      	lsrs	r3, r3, #2
 8005a52:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a54:	e02a      	b.n	8005aac <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	691a      	ldr	r2, [r3, #16]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	69fa      	ldr	r2, [r7, #28]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d902      	bls.n	8005a72 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	3303      	adds	r3, #3
 8005a76:	089b      	lsrs	r3, r3, #2
 8005a78:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	68d9      	ldr	r1, [r3, #12]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	6978      	ldr	r0, [r7, #20]
 8005a90:	f003 fa9e 	bl	8008fd0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	68da      	ldr	r2, [r3, #12]
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	441a      	add	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	695a      	ldr	r2, [r3, #20]
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	441a      	add	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d809      	bhi.n	8005ad6 <PCD_WriteEmptyTxFifo+0xde>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	695a      	ldr	r2, [r3, #20]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d203      	bcs.n	8005ad6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1bf      	bne.n	8005a56 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	691a      	ldr	r2, [r3, #16]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d811      	bhi.n	8005b06 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	f003 030f 	and.w	r3, r3, #15
 8005ae8:	2201      	movs	r2, #1
 8005aea:	fa02 f303 	lsl.w	r3, r2, r3
 8005aee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005af6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	43db      	mvns	r3, r3
 8005afc:	6939      	ldr	r1, [r7, #16]
 8005afe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b02:	4013      	ands	r3, r2
 8005b04:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3720      	adds	r7, #32
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b088      	sub	sp, #32
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	333c      	adds	r3, #60	@ 0x3c
 8005b28:	3304      	adds	r3, #4
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	799b      	ldrb	r3, [r3, #6]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d17b      	bne.n	8005c3e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	f003 0308 	and.w	r3, r3, #8
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d015      	beq.n	8005b7c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	4a61      	ldr	r2, [pc, #388]	@ (8005cd8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	f240 80b9 	bls.w	8005ccc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f000 80b3 	beq.w	8005ccc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b72:	461a      	mov	r2, r3
 8005b74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b78:	6093      	str	r3, [r2, #8]
 8005b7a:	e0a7      	b.n	8005ccc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f003 0320 	and.w	r3, r3, #32
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d009      	beq.n	8005b9a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b92:	461a      	mov	r2, r3
 8005b94:	2320      	movs	r3, #32
 8005b96:	6093      	str	r3, [r2, #8]
 8005b98:	e098      	b.n	8005ccc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f040 8093 	bne.w	8005ccc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	4a4b      	ldr	r2, [pc, #300]	@ (8005cd8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d90f      	bls.n	8005bce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00a      	beq.n	8005bce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bca:	6093      	str	r3, [r2, #8]
 8005bcc:	e07e      	b.n	8005ccc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	4413      	add	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	4413      	add	r3, r2
 8005be0:	3304      	adds	r3, #4
 8005be2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6a1a      	ldr	r2, [r3, #32]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	0159      	lsls	r1, r3, #5
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	440b      	add	r3, r1
 8005bf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bfa:	1ad2      	subs	r2, r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d114      	bne.n	8005c30 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d109      	bne.n	8005c22 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6818      	ldr	r0, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c18:	461a      	mov	r2, r3
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	f003 fc6e 	bl	80094fc <USB_EP0_OutStart>
 8005c20:	e006      	b.n	8005c30 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	68da      	ldr	r2, [r3, #12]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	441a      	add	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	4619      	mov	r1, r3
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f005 fd56 	bl	800b6e8 <HAL_PCD_DataOutStageCallback>
 8005c3c:	e046      	b.n	8005ccc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	4a26      	ldr	r2, [pc, #152]	@ (8005cdc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d124      	bne.n	8005c90 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00a      	beq.n	8005c66 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c62:	6093      	str	r3, [r2, #8]
 8005c64:	e032      	b.n	8005ccc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f003 0320 	and.w	r3, r3, #32
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d008      	beq.n	8005c82 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	2320      	movs	r3, #32
 8005c80:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	4619      	mov	r1, r3
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f005 fd2d 	bl	800b6e8 <HAL_PCD_DataOutStageCallback>
 8005c8e:	e01d      	b.n	8005ccc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d114      	bne.n	8005cc0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005c96:	6879      	ldr	r1, [r7, #4]
 8005c98:	683a      	ldr	r2, [r7, #0]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d108      	bne.n	8005cc0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6818      	ldr	r0, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005cb8:	461a      	mov	r2, r3
 8005cba:	2100      	movs	r1, #0
 8005cbc:	f003 fc1e 	bl	80094fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f005 fd0e 	bl	800b6e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3720      	adds	r7, #32
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	4f54300a 	.word	0x4f54300a
 8005cdc:	4f54310a 	.word	0x4f54310a

08005ce0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	333c      	adds	r3, #60	@ 0x3c
 8005cf8:	3304      	adds	r3, #4
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	4a15      	ldr	r2, [pc, #84]	@ (8005d68 <PCD_EP_OutSetupPacket_int+0x88>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d90e      	bls.n	8005d34 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d009      	beq.n	8005d34 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d32:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f005 fcc5 	bl	800b6c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8005d68 <PCD_EP_OutSetupPacket_int+0x88>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d90c      	bls.n	8005d5c <PCD_EP_OutSetupPacket_int+0x7c>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	799b      	ldrb	r3, [r3, #6]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d108      	bne.n	8005d5c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6818      	ldr	r0, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005d54:	461a      	mov	r2, r3
 8005d56:	2101      	movs	r1, #1
 8005d58:	f003 fbd0 	bl	80094fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	4f54300a 	.word	0x4f54300a

08005d6c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	460b      	mov	r3, r1
 8005d76:	70fb      	strb	r3, [r7, #3]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d82:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005d84:	78fb      	ldrb	r3, [r7, #3]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d107      	bne.n	8005d9a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005d8a:	883b      	ldrh	r3, [r7, #0]
 8005d8c:	0419      	lsls	r1, r3, #16
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	430a      	orrs	r2, r1
 8005d96:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d98:	e028      	b.n	8005dec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da0:	0c1b      	lsrs	r3, r3, #16
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	4413      	add	r3, r2
 8005da6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005da8:	2300      	movs	r3, #0
 8005daa:	73fb      	strb	r3, [r7, #15]
 8005dac:	e00d      	b.n	8005dca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
 8005db4:	3340      	adds	r3, #64	@ 0x40
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	0c1b      	lsrs	r3, r3, #16
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	73fb      	strb	r3, [r7, #15]
 8005dca:	7bfa      	ldrb	r2, [r7, #15]
 8005dcc:	78fb      	ldrb	r3, [r7, #3]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d3ec      	bcc.n	8005dae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005dd4:	883b      	ldrh	r3, [r7, #0]
 8005dd6:	0418      	lsls	r0, r3, #16
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6819      	ldr	r1, [r3, #0]
 8005ddc:	78fb      	ldrb	r3, [r7, #3]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	4302      	orrs	r2, r0
 8005de4:	3340      	adds	r3, #64	@ 0x40
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	440b      	add	r3, r1
 8005dea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	460b      	mov	r3, r1
 8005e04:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	887a      	ldrh	r2, [r7, #2]
 8005e0c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	460b      	mov	r3, r1
 8005e26:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e267      	b.n	8006316 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d075      	beq.n	8005f3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e52:	4b88      	ldr	r3, [pc, #544]	@ (8006074 <HAL_RCC_OscConfig+0x240>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 030c 	and.w	r3, r3, #12
 8005e5a:	2b04      	cmp	r3, #4
 8005e5c:	d00c      	beq.n	8005e78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e5e:	4b85      	ldr	r3, [pc, #532]	@ (8006074 <HAL_RCC_OscConfig+0x240>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e66:	2b08      	cmp	r3, #8
 8005e68:	d112      	bne.n	8005e90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e6a:	4b82      	ldr	r3, [pc, #520]	@ (8006074 <HAL_RCC_OscConfig+0x240>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e76:	d10b      	bne.n	8005e90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e78:	4b7e      	ldr	r3, [pc, #504]	@ (8006074 <HAL_RCC_OscConfig+0x240>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d05b      	beq.n	8005f3c <HAL_RCC_OscConfig+0x108>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d157      	bne.n	8005f3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e242      	b.n	8006316 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e98:	d106      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x74>
 8005e9a:	4b76      	ldr	r3, [pc, #472]	@ (8006074 <HAL_RCC_OscConfig+0x240>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a75      	ldr	r2, [pc, #468]	@ (8006074 <HAL_RCC_OscConfig+0x240>)
 8005ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ea4:	6013      	str	r3, [r2, #0]
 8005ea6:	e01d      	b.n	8005ee4 <HAL_RCC_OscConfig+0xb0>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005eb0:	d10c      	bne.n	8005ecc <HAL_RCC_OscConfig+0x98>
 8005eb2:	4b70      	ldr	r3, [pc, #448]	@ (8006074 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a6f      	ldr	r2, [pc, #444]	@ (8006074 <HAL_RCC_OscConfig+0x240>)
 8005eb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	4b6d      	ldr	r3, [pc, #436]	@ (8006074 <HAL_RCC_OscConfig+0x240>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a6c      	ldr	r2, [pc, #432]	@ (8006074 <HAL_RCC_OscConfig+0x240>)
 8005ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	e00b      	b.n	8005ee4 <HAL_RCC_OscConfig+0xb0>
 8005ecc:	4b69      	ldr	r3, [pc, #420]	@ (8006074 <HAL_RCC_OscConfig+0x240>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a68      	ldr	r2, [pc, #416]	@ (8006074 <HAL_RCC_OscConfig+0x240>)
 8005ed2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ed6:	6013      	str	r3, [r2, #0]
 8005ed8:	4b66      	ldr	r3, [pc, #408]	@ (8006074 <HAL_RCC_OscConfig+0x240>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a65      	ldr	r2, [pc, #404]	@ (8006074 <HAL_RCC_OscConfig+0x240>)
 8005ede:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d013      	beq.n	8005f14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eec:	f7fd fa78 	bl	80033e0 <HAL_GetTick>
 8005ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ef2:	e008      	b.n	8005f06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ef4:	f7fd fa74 	bl	80033e0 <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	2b64      	cmp	r3, #100	@ 0x64
 8005f00:	d901      	bls.n	8005f06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e207      	b.n	8006316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f06:	4b5b      	ldr	r3, [pc, #364]	@ (8006074 <HAL_RCC_OscConfig+0x240>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d0f0      	beq.n	8005ef4 <HAL_RCC_OscConfig+0xc0>
 8005f12:	e014      	b.n	8005f3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f14:	f7fd fa64 	bl	80033e0 <HAL_GetTick>
 8005f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f1a:	e008      	b.n	8005f2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f1c:	f7fd fa60 	bl	80033e0 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b64      	cmp	r3, #100	@ 0x64
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e1f3      	b.n	8006316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f2e:	4b51      	ldr	r3, [pc, #324]	@ (8006074 <HAL_RCC_OscConfig+0x240>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1f0      	bne.n	8005f1c <HAL_RCC_OscConfig+0xe8>
 8005f3a:	e000      	b.n	8005f3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d063      	beq.n	8006012 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8006074 <HAL_RCC_OscConfig+0x240>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f003 030c 	and.w	r3, r3, #12
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00b      	beq.n	8005f6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f56:	4b47      	ldr	r3, [pc, #284]	@ (8006074 <HAL_RCC_OscConfig+0x240>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f5e:	2b08      	cmp	r3, #8
 8005f60:	d11c      	bne.n	8005f9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f62:	4b44      	ldr	r3, [pc, #272]	@ (8006074 <HAL_RCC_OscConfig+0x240>)
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d116      	bne.n	8005f9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f6e:	4b41      	ldr	r3, [pc, #260]	@ (8006074 <HAL_RCC_OscConfig+0x240>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d005      	beq.n	8005f86 <HAL_RCC_OscConfig+0x152>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d001      	beq.n	8005f86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e1c7      	b.n	8006316 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f86:	4b3b      	ldr	r3, [pc, #236]	@ (8006074 <HAL_RCC_OscConfig+0x240>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	4937      	ldr	r1, [pc, #220]	@ (8006074 <HAL_RCC_OscConfig+0x240>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f9a:	e03a      	b.n	8006012 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d020      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fa4:	4b34      	ldr	r3, [pc, #208]	@ (8006078 <HAL_RCC_OscConfig+0x244>)
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005faa:	f7fd fa19 	bl	80033e0 <HAL_GetTick>
 8005fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fb0:	e008      	b.n	8005fc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fb2:	f7fd fa15 	bl	80033e0 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d901      	bls.n	8005fc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e1a8      	b.n	8006316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8006074 <HAL_RCC_OscConfig+0x240>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d0f0      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fd0:	4b28      	ldr	r3, [pc, #160]	@ (8006074 <HAL_RCC_OscConfig+0x240>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	4925      	ldr	r1, [pc, #148]	@ (8006074 <HAL_RCC_OscConfig+0x240>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	600b      	str	r3, [r1, #0]
 8005fe4:	e015      	b.n	8006012 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fe6:	4b24      	ldr	r3, [pc, #144]	@ (8006078 <HAL_RCC_OscConfig+0x244>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fec:	f7fd f9f8 	bl	80033e0 <HAL_GetTick>
 8005ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ff2:	e008      	b.n	8006006 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ff4:	f7fd f9f4 	bl	80033e0 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d901      	bls.n	8006006 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e187      	b.n	8006316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006006:	4b1b      	ldr	r3, [pc, #108]	@ (8006074 <HAL_RCC_OscConfig+0x240>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1f0      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0308 	and.w	r3, r3, #8
 800601a:	2b00      	cmp	r3, #0
 800601c:	d036      	beq.n	800608c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d016      	beq.n	8006054 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006026:	4b15      	ldr	r3, [pc, #84]	@ (800607c <HAL_RCC_OscConfig+0x248>)
 8006028:	2201      	movs	r2, #1
 800602a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800602c:	f7fd f9d8 	bl	80033e0 <HAL_GetTick>
 8006030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006032:	e008      	b.n	8006046 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006034:	f7fd f9d4 	bl	80033e0 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d901      	bls.n	8006046 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e167      	b.n	8006316 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006046:	4b0b      	ldr	r3, [pc, #44]	@ (8006074 <HAL_RCC_OscConfig+0x240>)
 8006048:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0f0      	beq.n	8006034 <HAL_RCC_OscConfig+0x200>
 8006052:	e01b      	b.n	800608c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006054:	4b09      	ldr	r3, [pc, #36]	@ (800607c <HAL_RCC_OscConfig+0x248>)
 8006056:	2200      	movs	r2, #0
 8006058:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800605a:	f7fd f9c1 	bl	80033e0 <HAL_GetTick>
 800605e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006060:	e00e      	b.n	8006080 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006062:	f7fd f9bd 	bl	80033e0 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	2b02      	cmp	r3, #2
 800606e:	d907      	bls.n	8006080 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e150      	b.n	8006316 <HAL_RCC_OscConfig+0x4e2>
 8006074:	40023800 	.word	0x40023800
 8006078:	42470000 	.word	0x42470000
 800607c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006080:	4b88      	ldr	r3, [pc, #544]	@ (80062a4 <HAL_RCC_OscConfig+0x470>)
 8006082:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1ea      	bne.n	8006062 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 8097 	beq.w	80061c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800609a:	2300      	movs	r3, #0
 800609c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800609e:	4b81      	ldr	r3, [pc, #516]	@ (80062a4 <HAL_RCC_OscConfig+0x470>)
 80060a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10f      	bne.n	80060ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060aa:	2300      	movs	r3, #0
 80060ac:	60bb      	str	r3, [r7, #8]
 80060ae:	4b7d      	ldr	r3, [pc, #500]	@ (80062a4 <HAL_RCC_OscConfig+0x470>)
 80060b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b2:	4a7c      	ldr	r2, [pc, #496]	@ (80062a4 <HAL_RCC_OscConfig+0x470>)
 80060b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80060ba:	4b7a      	ldr	r3, [pc, #488]	@ (80062a4 <HAL_RCC_OscConfig+0x470>)
 80060bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060c2:	60bb      	str	r3, [r7, #8]
 80060c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060c6:	2301      	movs	r3, #1
 80060c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060ca:	4b77      	ldr	r3, [pc, #476]	@ (80062a8 <HAL_RCC_OscConfig+0x474>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d118      	bne.n	8006108 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060d6:	4b74      	ldr	r3, [pc, #464]	@ (80062a8 <HAL_RCC_OscConfig+0x474>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a73      	ldr	r2, [pc, #460]	@ (80062a8 <HAL_RCC_OscConfig+0x474>)
 80060dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060e2:	f7fd f97d 	bl	80033e0 <HAL_GetTick>
 80060e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060e8:	e008      	b.n	80060fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060ea:	f7fd f979 	bl	80033e0 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d901      	bls.n	80060fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e10c      	b.n	8006316 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060fc:	4b6a      	ldr	r3, [pc, #424]	@ (80062a8 <HAL_RCC_OscConfig+0x474>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0f0      	beq.n	80060ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d106      	bne.n	800611e <HAL_RCC_OscConfig+0x2ea>
 8006110:	4b64      	ldr	r3, [pc, #400]	@ (80062a4 <HAL_RCC_OscConfig+0x470>)
 8006112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006114:	4a63      	ldr	r2, [pc, #396]	@ (80062a4 <HAL_RCC_OscConfig+0x470>)
 8006116:	f043 0301 	orr.w	r3, r3, #1
 800611a:	6713      	str	r3, [r2, #112]	@ 0x70
 800611c:	e01c      	b.n	8006158 <HAL_RCC_OscConfig+0x324>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	2b05      	cmp	r3, #5
 8006124:	d10c      	bne.n	8006140 <HAL_RCC_OscConfig+0x30c>
 8006126:	4b5f      	ldr	r3, [pc, #380]	@ (80062a4 <HAL_RCC_OscConfig+0x470>)
 8006128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800612a:	4a5e      	ldr	r2, [pc, #376]	@ (80062a4 <HAL_RCC_OscConfig+0x470>)
 800612c:	f043 0304 	orr.w	r3, r3, #4
 8006130:	6713      	str	r3, [r2, #112]	@ 0x70
 8006132:	4b5c      	ldr	r3, [pc, #368]	@ (80062a4 <HAL_RCC_OscConfig+0x470>)
 8006134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006136:	4a5b      	ldr	r2, [pc, #364]	@ (80062a4 <HAL_RCC_OscConfig+0x470>)
 8006138:	f043 0301 	orr.w	r3, r3, #1
 800613c:	6713      	str	r3, [r2, #112]	@ 0x70
 800613e:	e00b      	b.n	8006158 <HAL_RCC_OscConfig+0x324>
 8006140:	4b58      	ldr	r3, [pc, #352]	@ (80062a4 <HAL_RCC_OscConfig+0x470>)
 8006142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006144:	4a57      	ldr	r2, [pc, #348]	@ (80062a4 <HAL_RCC_OscConfig+0x470>)
 8006146:	f023 0301 	bic.w	r3, r3, #1
 800614a:	6713      	str	r3, [r2, #112]	@ 0x70
 800614c:	4b55      	ldr	r3, [pc, #340]	@ (80062a4 <HAL_RCC_OscConfig+0x470>)
 800614e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006150:	4a54      	ldr	r2, [pc, #336]	@ (80062a4 <HAL_RCC_OscConfig+0x470>)
 8006152:	f023 0304 	bic.w	r3, r3, #4
 8006156:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d015      	beq.n	800618c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006160:	f7fd f93e 	bl	80033e0 <HAL_GetTick>
 8006164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006166:	e00a      	b.n	800617e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006168:	f7fd f93a 	bl	80033e0 <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006176:	4293      	cmp	r3, r2
 8006178:	d901      	bls.n	800617e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e0cb      	b.n	8006316 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800617e:	4b49      	ldr	r3, [pc, #292]	@ (80062a4 <HAL_RCC_OscConfig+0x470>)
 8006180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006182:	f003 0302 	and.w	r3, r3, #2
 8006186:	2b00      	cmp	r3, #0
 8006188:	d0ee      	beq.n	8006168 <HAL_RCC_OscConfig+0x334>
 800618a:	e014      	b.n	80061b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800618c:	f7fd f928 	bl	80033e0 <HAL_GetTick>
 8006190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006192:	e00a      	b.n	80061aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006194:	f7fd f924 	bl	80033e0 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e0b5      	b.n	8006316 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061aa:	4b3e      	ldr	r3, [pc, #248]	@ (80062a4 <HAL_RCC_OscConfig+0x470>)
 80061ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1ee      	bne.n	8006194 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061b6:	7dfb      	ldrb	r3, [r7, #23]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d105      	bne.n	80061c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061bc:	4b39      	ldr	r3, [pc, #228]	@ (80062a4 <HAL_RCC_OscConfig+0x470>)
 80061be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c0:	4a38      	ldr	r2, [pc, #224]	@ (80062a4 <HAL_RCC_OscConfig+0x470>)
 80061c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 80a1 	beq.w	8006314 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061d2:	4b34      	ldr	r3, [pc, #208]	@ (80062a4 <HAL_RCC_OscConfig+0x470>)
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f003 030c 	and.w	r3, r3, #12
 80061da:	2b08      	cmp	r3, #8
 80061dc:	d05c      	beq.n	8006298 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d141      	bne.n	800626a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061e6:	4b31      	ldr	r3, [pc, #196]	@ (80062ac <HAL_RCC_OscConfig+0x478>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ec:	f7fd f8f8 	bl	80033e0 <HAL_GetTick>
 80061f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061f2:	e008      	b.n	8006206 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061f4:	f7fd f8f4 	bl	80033e0 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e087      	b.n	8006316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006206:	4b27      	ldr	r3, [pc, #156]	@ (80062a4 <HAL_RCC_OscConfig+0x470>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1f0      	bne.n	80061f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	69da      	ldr	r2, [r3, #28]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	431a      	orrs	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006220:	019b      	lsls	r3, r3, #6
 8006222:	431a      	orrs	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006228:	085b      	lsrs	r3, r3, #1
 800622a:	3b01      	subs	r3, #1
 800622c:	041b      	lsls	r3, r3, #16
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006234:	061b      	lsls	r3, r3, #24
 8006236:	491b      	ldr	r1, [pc, #108]	@ (80062a4 <HAL_RCC_OscConfig+0x470>)
 8006238:	4313      	orrs	r3, r2
 800623a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800623c:	4b1b      	ldr	r3, [pc, #108]	@ (80062ac <HAL_RCC_OscConfig+0x478>)
 800623e:	2201      	movs	r2, #1
 8006240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006242:	f7fd f8cd 	bl	80033e0 <HAL_GetTick>
 8006246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006248:	e008      	b.n	800625c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800624a:	f7fd f8c9 	bl	80033e0 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	2b02      	cmp	r3, #2
 8006256:	d901      	bls.n	800625c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e05c      	b.n	8006316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800625c:	4b11      	ldr	r3, [pc, #68]	@ (80062a4 <HAL_RCC_OscConfig+0x470>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d0f0      	beq.n	800624a <HAL_RCC_OscConfig+0x416>
 8006268:	e054      	b.n	8006314 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800626a:	4b10      	ldr	r3, [pc, #64]	@ (80062ac <HAL_RCC_OscConfig+0x478>)
 800626c:	2200      	movs	r2, #0
 800626e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006270:	f7fd f8b6 	bl	80033e0 <HAL_GetTick>
 8006274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006278:	f7fd f8b2 	bl	80033e0 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e045      	b.n	8006316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800628a:	4b06      	ldr	r3, [pc, #24]	@ (80062a4 <HAL_RCC_OscConfig+0x470>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1f0      	bne.n	8006278 <HAL_RCC_OscConfig+0x444>
 8006296:	e03d      	b.n	8006314 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d107      	bne.n	80062b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e038      	b.n	8006316 <HAL_RCC_OscConfig+0x4e2>
 80062a4:	40023800 	.word	0x40023800
 80062a8:	40007000 	.word	0x40007000
 80062ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062b0:	4b1b      	ldr	r3, [pc, #108]	@ (8006320 <HAL_RCC_OscConfig+0x4ec>)
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d028      	beq.n	8006310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d121      	bne.n	8006310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d11a      	bne.n	8006310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80062e0:	4013      	ands	r3, r2
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80062e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d111      	bne.n	8006310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f6:	085b      	lsrs	r3, r3, #1
 80062f8:	3b01      	subs	r3, #1
 80062fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d107      	bne.n	8006310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800630a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800630c:	429a      	cmp	r2, r3
 800630e:	d001      	beq.n	8006314 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e000      	b.n	8006316 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3718      	adds	r7, #24
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	40023800 	.word	0x40023800

08006324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e0cc      	b.n	80064d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006338:	4b68      	ldr	r3, [pc, #416]	@ (80064dc <HAL_RCC_ClockConfig+0x1b8>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0307 	and.w	r3, r3, #7
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	429a      	cmp	r2, r3
 8006344:	d90c      	bls.n	8006360 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006346:	4b65      	ldr	r3, [pc, #404]	@ (80064dc <HAL_RCC_ClockConfig+0x1b8>)
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	b2d2      	uxtb	r2, r2
 800634c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800634e:	4b63      	ldr	r3, [pc, #396]	@ (80064dc <HAL_RCC_ClockConfig+0x1b8>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0307 	and.w	r3, r3, #7
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	429a      	cmp	r2, r3
 800635a:	d001      	beq.n	8006360 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e0b8      	b.n	80064d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d020      	beq.n	80063ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0304 	and.w	r3, r3, #4
 8006374:	2b00      	cmp	r3, #0
 8006376:	d005      	beq.n	8006384 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006378:	4b59      	ldr	r3, [pc, #356]	@ (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	4a58      	ldr	r2, [pc, #352]	@ (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 800637e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006382:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0308 	and.w	r3, r3, #8
 800638c:	2b00      	cmp	r3, #0
 800638e:	d005      	beq.n	800639c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006390:	4b53      	ldr	r3, [pc, #332]	@ (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	4a52      	ldr	r2, [pc, #328]	@ (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006396:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800639a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800639c:	4b50      	ldr	r3, [pc, #320]	@ (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	494d      	ldr	r1, [pc, #308]	@ (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d044      	beq.n	8006444 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d107      	bne.n	80063d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063c2:	4b47      	ldr	r3, [pc, #284]	@ (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d119      	bne.n	8006402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e07f      	b.n	80064d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d003      	beq.n	80063e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063de:	2b03      	cmp	r3, #3
 80063e0:	d107      	bne.n	80063f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063e2:	4b3f      	ldr	r3, [pc, #252]	@ (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d109      	bne.n	8006402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e06f      	b.n	80064d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063f2:	4b3b      	ldr	r3, [pc, #236]	@ (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e067      	b.n	80064d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006402:	4b37      	ldr	r3, [pc, #220]	@ (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f023 0203 	bic.w	r2, r3, #3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	4934      	ldr	r1, [pc, #208]	@ (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006410:	4313      	orrs	r3, r2
 8006412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006414:	f7fc ffe4 	bl	80033e0 <HAL_GetTick>
 8006418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800641a:	e00a      	b.n	8006432 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800641c:	f7fc ffe0 	bl	80033e0 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800642a:	4293      	cmp	r3, r2
 800642c:	d901      	bls.n	8006432 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e04f      	b.n	80064d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006432:	4b2b      	ldr	r3, [pc, #172]	@ (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f003 020c 	and.w	r2, r3, #12
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	429a      	cmp	r2, r3
 8006442:	d1eb      	bne.n	800641c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006444:	4b25      	ldr	r3, [pc, #148]	@ (80064dc <HAL_RCC_ClockConfig+0x1b8>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0307 	and.w	r3, r3, #7
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	429a      	cmp	r2, r3
 8006450:	d20c      	bcs.n	800646c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006452:	4b22      	ldr	r3, [pc, #136]	@ (80064dc <HAL_RCC_ClockConfig+0x1b8>)
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	b2d2      	uxtb	r2, r2
 8006458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800645a:	4b20      	ldr	r3, [pc, #128]	@ (80064dc <HAL_RCC_ClockConfig+0x1b8>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0307 	and.w	r3, r3, #7
 8006462:	683a      	ldr	r2, [r7, #0]
 8006464:	429a      	cmp	r2, r3
 8006466:	d001      	beq.n	800646c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e032      	b.n	80064d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0304 	and.w	r3, r3, #4
 8006474:	2b00      	cmp	r3, #0
 8006476:	d008      	beq.n	800648a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006478:	4b19      	ldr	r3, [pc, #100]	@ (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	4916      	ldr	r1, [pc, #88]	@ (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006486:	4313      	orrs	r3, r2
 8006488:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0308 	and.w	r3, r3, #8
 8006492:	2b00      	cmp	r3, #0
 8006494:	d009      	beq.n	80064aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006496:	4b12      	ldr	r3, [pc, #72]	@ (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	490e      	ldr	r1, [pc, #56]	@ (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064aa:	f000 f821 	bl	80064f0 <HAL_RCC_GetSysClockFreq>
 80064ae:	4602      	mov	r2, r0
 80064b0:	4b0b      	ldr	r3, [pc, #44]	@ (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	091b      	lsrs	r3, r3, #4
 80064b6:	f003 030f 	and.w	r3, r3, #15
 80064ba:	490a      	ldr	r1, [pc, #40]	@ (80064e4 <HAL_RCC_ClockConfig+0x1c0>)
 80064bc:	5ccb      	ldrb	r3, [r1, r3]
 80064be:	fa22 f303 	lsr.w	r3, r2, r3
 80064c2:	4a09      	ldr	r2, [pc, #36]	@ (80064e8 <HAL_RCC_ClockConfig+0x1c4>)
 80064c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80064c6:	4b09      	ldr	r3, [pc, #36]	@ (80064ec <HAL_RCC_ClockConfig+0x1c8>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fc ff44 	bl	8003358 <HAL_InitTick>

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	40023c00 	.word	0x40023c00
 80064e0:	40023800 	.word	0x40023800
 80064e4:	0800f778 	.word	0x0800f778
 80064e8:	20000000 	.word	0x20000000
 80064ec:	20000004 	.word	0x20000004

080064f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064f4:	b090      	sub	sp, #64	@ 0x40
 80064f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064f8:	2300      	movs	r3, #0
 80064fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80064fc:	2300      	movs	r3, #0
 80064fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006500:	2300      	movs	r3, #0
 8006502:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006508:	4b59      	ldr	r3, [pc, #356]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x180>)
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f003 030c 	and.w	r3, r3, #12
 8006510:	2b08      	cmp	r3, #8
 8006512:	d00d      	beq.n	8006530 <HAL_RCC_GetSysClockFreq+0x40>
 8006514:	2b08      	cmp	r3, #8
 8006516:	f200 80a1 	bhi.w	800665c <HAL_RCC_GetSysClockFreq+0x16c>
 800651a:	2b00      	cmp	r3, #0
 800651c:	d002      	beq.n	8006524 <HAL_RCC_GetSysClockFreq+0x34>
 800651e:	2b04      	cmp	r3, #4
 8006520:	d003      	beq.n	800652a <HAL_RCC_GetSysClockFreq+0x3a>
 8006522:	e09b      	b.n	800665c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006524:	4b53      	ldr	r3, [pc, #332]	@ (8006674 <HAL_RCC_GetSysClockFreq+0x184>)
 8006526:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8006528:	e09b      	b.n	8006662 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800652a:	4b53      	ldr	r3, [pc, #332]	@ (8006678 <HAL_RCC_GetSysClockFreq+0x188>)
 800652c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800652e:	e098      	b.n	8006662 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006530:	4b4f      	ldr	r3, [pc, #316]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x180>)
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006538:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800653a:	4b4d      	ldr	r3, [pc, #308]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x180>)
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d028      	beq.n	8006598 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006546:	4b4a      	ldr	r3, [pc, #296]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x180>)
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	099b      	lsrs	r3, r3, #6
 800654c:	2200      	movs	r2, #0
 800654e:	623b      	str	r3, [r7, #32]
 8006550:	627a      	str	r2, [r7, #36]	@ 0x24
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006558:	2100      	movs	r1, #0
 800655a:	4b47      	ldr	r3, [pc, #284]	@ (8006678 <HAL_RCC_GetSysClockFreq+0x188>)
 800655c:	fb03 f201 	mul.w	r2, r3, r1
 8006560:	2300      	movs	r3, #0
 8006562:	fb00 f303 	mul.w	r3, r0, r3
 8006566:	4413      	add	r3, r2
 8006568:	4a43      	ldr	r2, [pc, #268]	@ (8006678 <HAL_RCC_GetSysClockFreq+0x188>)
 800656a:	fba0 1202 	umull	r1, r2, r0, r2
 800656e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006570:	460a      	mov	r2, r1
 8006572:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006574:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006576:	4413      	add	r3, r2
 8006578:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800657a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800657c:	2200      	movs	r2, #0
 800657e:	61bb      	str	r3, [r7, #24]
 8006580:	61fa      	str	r2, [r7, #28]
 8006582:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006586:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800658a:	f7fa fb65 	bl	8000c58 <__aeabi_uldivmod>
 800658e:	4602      	mov	r2, r0
 8006590:	460b      	mov	r3, r1
 8006592:	4613      	mov	r3, r2
 8006594:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006596:	e053      	b.n	8006640 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006598:	4b35      	ldr	r3, [pc, #212]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x180>)
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	099b      	lsrs	r3, r3, #6
 800659e:	2200      	movs	r2, #0
 80065a0:	613b      	str	r3, [r7, #16]
 80065a2:	617a      	str	r2, [r7, #20]
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80065aa:	f04f 0b00 	mov.w	fp, #0
 80065ae:	4652      	mov	r2, sl
 80065b0:	465b      	mov	r3, fp
 80065b2:	f04f 0000 	mov.w	r0, #0
 80065b6:	f04f 0100 	mov.w	r1, #0
 80065ba:	0159      	lsls	r1, r3, #5
 80065bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065c0:	0150      	lsls	r0, r2, #5
 80065c2:	4602      	mov	r2, r0
 80065c4:	460b      	mov	r3, r1
 80065c6:	ebb2 080a 	subs.w	r8, r2, sl
 80065ca:	eb63 090b 	sbc.w	r9, r3, fp
 80065ce:	f04f 0200 	mov.w	r2, #0
 80065d2:	f04f 0300 	mov.w	r3, #0
 80065d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80065da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80065de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80065e2:	ebb2 0408 	subs.w	r4, r2, r8
 80065e6:	eb63 0509 	sbc.w	r5, r3, r9
 80065ea:	f04f 0200 	mov.w	r2, #0
 80065ee:	f04f 0300 	mov.w	r3, #0
 80065f2:	00eb      	lsls	r3, r5, #3
 80065f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065f8:	00e2      	lsls	r2, r4, #3
 80065fa:	4614      	mov	r4, r2
 80065fc:	461d      	mov	r5, r3
 80065fe:	eb14 030a 	adds.w	r3, r4, sl
 8006602:	603b      	str	r3, [r7, #0]
 8006604:	eb45 030b 	adc.w	r3, r5, fp
 8006608:	607b      	str	r3, [r7, #4]
 800660a:	f04f 0200 	mov.w	r2, #0
 800660e:	f04f 0300 	mov.w	r3, #0
 8006612:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006616:	4629      	mov	r1, r5
 8006618:	028b      	lsls	r3, r1, #10
 800661a:	4621      	mov	r1, r4
 800661c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006620:	4621      	mov	r1, r4
 8006622:	028a      	lsls	r2, r1, #10
 8006624:	4610      	mov	r0, r2
 8006626:	4619      	mov	r1, r3
 8006628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800662a:	2200      	movs	r2, #0
 800662c:	60bb      	str	r3, [r7, #8]
 800662e:	60fa      	str	r2, [r7, #12]
 8006630:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006634:	f7fa fb10 	bl	8000c58 <__aeabi_uldivmod>
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	4613      	mov	r3, r2
 800663e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006640:	4b0b      	ldr	r3, [pc, #44]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x180>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	0c1b      	lsrs	r3, r3, #16
 8006646:	f003 0303 	and.w	r3, r3, #3
 800664a:	3301      	adds	r3, #1
 800664c:	005b      	lsls	r3, r3, #1
 800664e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8006650:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006654:	fbb2 f3f3 	udiv	r3, r2, r3
 8006658:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800665a:	e002      	b.n	8006662 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800665c:	4b05      	ldr	r3, [pc, #20]	@ (8006674 <HAL_RCC_GetSysClockFreq+0x184>)
 800665e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006660:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006664:	4618      	mov	r0, r3
 8006666:	3740      	adds	r7, #64	@ 0x40
 8006668:	46bd      	mov	sp, r7
 800666a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800666e:	bf00      	nop
 8006670:	40023800 	.word	0x40023800
 8006674:	00f42400 	.word	0x00f42400
 8006678:	017d7840 	.word	0x017d7840

0800667c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006680:	4b03      	ldr	r3, [pc, #12]	@ (8006690 <HAL_RCC_GetHCLKFreq+0x14>)
 8006682:	681b      	ldr	r3, [r3, #0]
}
 8006684:	4618      	mov	r0, r3
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	20000000 	.word	0x20000000

08006694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006698:	f7ff fff0 	bl	800667c <HAL_RCC_GetHCLKFreq>
 800669c:	4602      	mov	r2, r0
 800669e:	4b05      	ldr	r3, [pc, #20]	@ (80066b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	0a9b      	lsrs	r3, r3, #10
 80066a4:	f003 0307 	and.w	r3, r3, #7
 80066a8:	4903      	ldr	r1, [pc, #12]	@ (80066b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066aa:	5ccb      	ldrb	r3, [r1, r3]
 80066ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	40023800 	.word	0x40023800
 80066b8:	0800f788 	.word	0x0800f788

080066bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066c0:	f7ff ffdc 	bl	800667c <HAL_RCC_GetHCLKFreq>
 80066c4:	4602      	mov	r2, r0
 80066c6:	4b05      	ldr	r3, [pc, #20]	@ (80066dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	0b5b      	lsrs	r3, r3, #13
 80066cc:	f003 0307 	and.w	r3, r3, #7
 80066d0:	4903      	ldr	r1, [pc, #12]	@ (80066e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066d2:	5ccb      	ldrb	r3, [r1, r3]
 80066d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066d8:	4618      	mov	r0, r3
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	40023800 	.word	0x40023800
 80066e0:	0800f788 	.word	0x0800f788

080066e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e041      	b.n	800677a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d106      	bne.n	8006710 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f7fc f938 	bl	8002980 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2202      	movs	r2, #2
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3304      	adds	r3, #4
 8006720:	4619      	mov	r1, r3
 8006722:	4610      	mov	r0, r2
 8006724:	f000 fc3c 	bl	8006fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
	...

08006784 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b01      	cmp	r3, #1
 8006796:	d001      	beq.n	800679c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e044      	b.n	8006826 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2202      	movs	r2, #2
 80067a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68da      	ldr	r2, [r3, #12]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 0201 	orr.w	r2, r2, #1
 80067b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a1e      	ldr	r2, [pc, #120]	@ (8006834 <HAL_TIM_Base_Start_IT+0xb0>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d018      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0x6c>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067c6:	d013      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0x6c>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a1a      	ldr	r2, [pc, #104]	@ (8006838 <HAL_TIM_Base_Start_IT+0xb4>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d00e      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0x6c>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a19      	ldr	r2, [pc, #100]	@ (800683c <HAL_TIM_Base_Start_IT+0xb8>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d009      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0x6c>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a17      	ldr	r2, [pc, #92]	@ (8006840 <HAL_TIM_Base_Start_IT+0xbc>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d004      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0x6c>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a16      	ldr	r2, [pc, #88]	@ (8006844 <HAL_TIM_Base_Start_IT+0xc0>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d111      	bne.n	8006814 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f003 0307 	and.w	r3, r3, #7
 80067fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b06      	cmp	r3, #6
 8006800:	d010      	beq.n	8006824 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f042 0201 	orr.w	r2, r2, #1
 8006810:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006812:	e007      	b.n	8006824 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f042 0201 	orr.w	r2, r2, #1
 8006822:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	40010000 	.word	0x40010000
 8006838:	40000400 	.word	0x40000400
 800683c:	40000800 	.word	0x40000800
 8006840:	40000c00 	.word	0x40000c00
 8006844:	40014000 	.word	0x40014000

08006848 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e041      	b.n	80068de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d106      	bne.n	8006874 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f839 	bl	80068e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	3304      	adds	r3, #4
 8006884:	4619      	mov	r1, r3
 8006886:	4610      	mov	r0, r2
 8006888:	f000 fb8a 	bl	8006fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80068ee:	bf00      	nop
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
	...

080068fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d109      	bne.n	8006920 <HAL_TIM_PWM_Start+0x24>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b01      	cmp	r3, #1
 8006916:	bf14      	ite	ne
 8006918:	2301      	movne	r3, #1
 800691a:	2300      	moveq	r3, #0
 800691c:	b2db      	uxtb	r3, r3
 800691e:	e022      	b.n	8006966 <HAL_TIM_PWM_Start+0x6a>
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2b04      	cmp	r3, #4
 8006924:	d109      	bne.n	800693a <HAL_TIM_PWM_Start+0x3e>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b01      	cmp	r3, #1
 8006930:	bf14      	ite	ne
 8006932:	2301      	movne	r3, #1
 8006934:	2300      	moveq	r3, #0
 8006936:	b2db      	uxtb	r3, r3
 8006938:	e015      	b.n	8006966 <HAL_TIM_PWM_Start+0x6a>
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2b08      	cmp	r3, #8
 800693e:	d109      	bne.n	8006954 <HAL_TIM_PWM_Start+0x58>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b01      	cmp	r3, #1
 800694a:	bf14      	ite	ne
 800694c:	2301      	movne	r3, #1
 800694e:	2300      	moveq	r3, #0
 8006950:	b2db      	uxtb	r3, r3
 8006952:	e008      	b.n	8006966 <HAL_TIM_PWM_Start+0x6a>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b01      	cmp	r3, #1
 800695e:	bf14      	ite	ne
 8006960:	2301      	movne	r3, #1
 8006962:	2300      	moveq	r3, #0
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e068      	b.n	8006a40 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d104      	bne.n	800697e <HAL_TIM_PWM_Start+0x82>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2202      	movs	r2, #2
 8006978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800697c:	e013      	b.n	80069a6 <HAL_TIM_PWM_Start+0xaa>
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2b04      	cmp	r3, #4
 8006982:	d104      	bne.n	800698e <HAL_TIM_PWM_Start+0x92>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2202      	movs	r2, #2
 8006988:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800698c:	e00b      	b.n	80069a6 <HAL_TIM_PWM_Start+0xaa>
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2b08      	cmp	r3, #8
 8006992:	d104      	bne.n	800699e <HAL_TIM_PWM_Start+0xa2>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800699c:	e003      	b.n	80069a6 <HAL_TIM_PWM_Start+0xaa>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2202      	movs	r2, #2
 80069a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2201      	movs	r2, #1
 80069ac:	6839      	ldr	r1, [r7, #0]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fda8 	bl	8007504 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a23      	ldr	r2, [pc, #140]	@ (8006a48 <HAL_TIM_PWM_Start+0x14c>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d107      	bne.n	80069ce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a1d      	ldr	r2, [pc, #116]	@ (8006a48 <HAL_TIM_PWM_Start+0x14c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d018      	beq.n	8006a0a <HAL_TIM_PWM_Start+0x10e>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069e0:	d013      	beq.n	8006a0a <HAL_TIM_PWM_Start+0x10e>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a19      	ldr	r2, [pc, #100]	@ (8006a4c <HAL_TIM_PWM_Start+0x150>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d00e      	beq.n	8006a0a <HAL_TIM_PWM_Start+0x10e>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a17      	ldr	r2, [pc, #92]	@ (8006a50 <HAL_TIM_PWM_Start+0x154>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d009      	beq.n	8006a0a <HAL_TIM_PWM_Start+0x10e>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a16      	ldr	r2, [pc, #88]	@ (8006a54 <HAL_TIM_PWM_Start+0x158>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d004      	beq.n	8006a0a <HAL_TIM_PWM_Start+0x10e>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a14      	ldr	r2, [pc, #80]	@ (8006a58 <HAL_TIM_PWM_Start+0x15c>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d111      	bne.n	8006a2e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f003 0307 	and.w	r3, r3, #7
 8006a14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2b06      	cmp	r3, #6
 8006a1a:	d010      	beq.n	8006a3e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0201 	orr.w	r2, r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a2c:	e007      	b.n	8006a3e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f042 0201 	orr.w	r2, r2, #1
 8006a3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	40010000 	.word	0x40010000
 8006a4c:	40000400 	.word	0x40000400
 8006a50:	40000800 	.word	0x40000800
 8006a54:	40000c00 	.word	0x40000c00
 8006a58:	40014000 	.word	0x40014000

08006a5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	f003 0302 	and.w	r3, r3, #2
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d020      	beq.n	8006ac0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f003 0302 	and.w	r3, r3, #2
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d01b      	beq.n	8006ac0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f06f 0202 	mvn.w	r2, #2
 8006a90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	f003 0303 	and.w	r3, r3, #3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fa5b 	bl	8006f62 <HAL_TIM_IC_CaptureCallback>
 8006aac:	e005      	b.n	8006aba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fa4d 	bl	8006f4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 fa5e 	bl	8006f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f003 0304 	and.w	r3, r3, #4
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d020      	beq.n	8006b0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f003 0304 	and.w	r3, r3, #4
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d01b      	beq.n	8006b0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f06f 0204 	mvn.w	r2, #4
 8006adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fa35 	bl	8006f62 <HAL_TIM_IC_CaptureCallback>
 8006af8:	e005      	b.n	8006b06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fa27 	bl	8006f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fa38 	bl	8006f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f003 0308 	and.w	r3, r3, #8
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d020      	beq.n	8006b58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f003 0308 	and.w	r3, r3, #8
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d01b      	beq.n	8006b58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f06f 0208 	mvn.w	r2, #8
 8006b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2204      	movs	r2, #4
 8006b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	f003 0303 	and.w	r3, r3, #3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d003      	beq.n	8006b46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fa0f 	bl	8006f62 <HAL_TIM_IC_CaptureCallback>
 8006b44:	e005      	b.n	8006b52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fa01 	bl	8006f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fa12 	bl	8006f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f003 0310 	and.w	r3, r3, #16
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d020      	beq.n	8006ba4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f003 0310 	and.w	r3, r3, #16
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d01b      	beq.n	8006ba4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f06f 0210 	mvn.w	r2, #16
 8006b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2208      	movs	r2, #8
 8006b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d003      	beq.n	8006b92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f9e9 	bl	8006f62 <HAL_TIM_IC_CaptureCallback>
 8006b90:	e005      	b.n	8006b9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f9db 	bl	8006f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f9ec 	bl	8006f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00c      	beq.n	8006bc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f003 0301 	and.w	r3, r3, #1
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d007      	beq.n	8006bc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f06f 0201 	mvn.w	r2, #1
 8006bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7fb fbae 	bl	8002324 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00c      	beq.n	8006bec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d007      	beq.n	8006bec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fd2a 	bl	8007640 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00c      	beq.n	8006c10 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d007      	beq.n	8006c10 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f9bd 	bl	8006f8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	f003 0320 	and.w	r3, r3, #32
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00c      	beq.n	8006c34 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f003 0320 	and.w	r3, r3, #32
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d007      	beq.n	8006c34 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f06f 0220 	mvn.w	r2, #32
 8006c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fcfc 	bl	800762c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c34:	bf00      	nop
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d101      	bne.n	8006c5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c56:	2302      	movs	r3, #2
 8006c58:	e0ae      	b.n	8006db8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b0c      	cmp	r3, #12
 8006c66:	f200 809f 	bhi.w	8006da8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c70:	08006ca5 	.word	0x08006ca5
 8006c74:	08006da9 	.word	0x08006da9
 8006c78:	08006da9 	.word	0x08006da9
 8006c7c:	08006da9 	.word	0x08006da9
 8006c80:	08006ce5 	.word	0x08006ce5
 8006c84:	08006da9 	.word	0x08006da9
 8006c88:	08006da9 	.word	0x08006da9
 8006c8c:	08006da9 	.word	0x08006da9
 8006c90:	08006d27 	.word	0x08006d27
 8006c94:	08006da9 	.word	0x08006da9
 8006c98:	08006da9 	.word	0x08006da9
 8006c9c:	08006da9 	.word	0x08006da9
 8006ca0:	08006d67 	.word	0x08006d67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68b9      	ldr	r1, [r7, #8]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 fa04 	bl	80070b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	699a      	ldr	r2, [r3, #24]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f042 0208 	orr.w	r2, r2, #8
 8006cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	699a      	ldr	r2, [r3, #24]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f022 0204 	bic.w	r2, r2, #4
 8006cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6999      	ldr	r1, [r3, #24]
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	691a      	ldr	r2, [r3, #16]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	619a      	str	r2, [r3, #24]
      break;
 8006ce2:	e064      	b.n	8006dae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68b9      	ldr	r1, [r7, #8]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 fa4a 	bl	8007184 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	699a      	ldr	r2, [r3, #24]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699a      	ldr	r2, [r3, #24]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6999      	ldr	r1, [r3, #24]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	021a      	lsls	r2, r3, #8
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	619a      	str	r2, [r3, #24]
      break;
 8006d24:	e043      	b.n	8006dae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68b9      	ldr	r1, [r7, #8]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f000 fa95 	bl	800725c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	69da      	ldr	r2, [r3, #28]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f042 0208 	orr.w	r2, r2, #8
 8006d40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	69da      	ldr	r2, [r3, #28]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f022 0204 	bic.w	r2, r2, #4
 8006d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	69d9      	ldr	r1, [r3, #28]
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	691a      	ldr	r2, [r3, #16]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	430a      	orrs	r2, r1
 8006d62:	61da      	str	r2, [r3, #28]
      break;
 8006d64:	e023      	b.n	8006dae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68b9      	ldr	r1, [r7, #8]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 fadf 	bl	8007330 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	69da      	ldr	r2, [r3, #28]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	69da      	ldr	r2, [r3, #28]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	69d9      	ldr	r1, [r3, #28]
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	021a      	lsls	r2, r3, #8
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	430a      	orrs	r2, r1
 8006da4:	61da      	str	r2, [r3, #28]
      break;
 8006da6:	e002      	b.n	8006dae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	75fb      	strb	r3, [r7, #23]
      break;
 8006dac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d101      	bne.n	8006ddc <HAL_TIM_ConfigClockSource+0x1c>
 8006dd8:	2302      	movs	r3, #2
 8006dda:	e0b4      	b.n	8006f46 <HAL_TIM_ConfigClockSource+0x186>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006dfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e14:	d03e      	beq.n	8006e94 <HAL_TIM_ConfigClockSource+0xd4>
 8006e16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e1a:	f200 8087 	bhi.w	8006f2c <HAL_TIM_ConfigClockSource+0x16c>
 8006e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e22:	f000 8086 	beq.w	8006f32 <HAL_TIM_ConfigClockSource+0x172>
 8006e26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e2a:	d87f      	bhi.n	8006f2c <HAL_TIM_ConfigClockSource+0x16c>
 8006e2c:	2b70      	cmp	r3, #112	@ 0x70
 8006e2e:	d01a      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0xa6>
 8006e30:	2b70      	cmp	r3, #112	@ 0x70
 8006e32:	d87b      	bhi.n	8006f2c <HAL_TIM_ConfigClockSource+0x16c>
 8006e34:	2b60      	cmp	r3, #96	@ 0x60
 8006e36:	d050      	beq.n	8006eda <HAL_TIM_ConfigClockSource+0x11a>
 8006e38:	2b60      	cmp	r3, #96	@ 0x60
 8006e3a:	d877      	bhi.n	8006f2c <HAL_TIM_ConfigClockSource+0x16c>
 8006e3c:	2b50      	cmp	r3, #80	@ 0x50
 8006e3e:	d03c      	beq.n	8006eba <HAL_TIM_ConfigClockSource+0xfa>
 8006e40:	2b50      	cmp	r3, #80	@ 0x50
 8006e42:	d873      	bhi.n	8006f2c <HAL_TIM_ConfigClockSource+0x16c>
 8006e44:	2b40      	cmp	r3, #64	@ 0x40
 8006e46:	d058      	beq.n	8006efa <HAL_TIM_ConfigClockSource+0x13a>
 8006e48:	2b40      	cmp	r3, #64	@ 0x40
 8006e4a:	d86f      	bhi.n	8006f2c <HAL_TIM_ConfigClockSource+0x16c>
 8006e4c:	2b30      	cmp	r3, #48	@ 0x30
 8006e4e:	d064      	beq.n	8006f1a <HAL_TIM_ConfigClockSource+0x15a>
 8006e50:	2b30      	cmp	r3, #48	@ 0x30
 8006e52:	d86b      	bhi.n	8006f2c <HAL_TIM_ConfigClockSource+0x16c>
 8006e54:	2b20      	cmp	r3, #32
 8006e56:	d060      	beq.n	8006f1a <HAL_TIM_ConfigClockSource+0x15a>
 8006e58:	2b20      	cmp	r3, #32
 8006e5a:	d867      	bhi.n	8006f2c <HAL_TIM_ConfigClockSource+0x16c>
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d05c      	beq.n	8006f1a <HAL_TIM_ConfigClockSource+0x15a>
 8006e60:	2b10      	cmp	r3, #16
 8006e62:	d05a      	beq.n	8006f1a <HAL_TIM_ConfigClockSource+0x15a>
 8006e64:	e062      	b.n	8006f2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e76:	f000 fb25 	bl	80074c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006e88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	609a      	str	r2, [r3, #8]
      break;
 8006e92:	e04f      	b.n	8006f34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ea4:	f000 fb0e 	bl	80074c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689a      	ldr	r2, [r3, #8]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006eb6:	609a      	str	r2, [r3, #8]
      break;
 8006eb8:	e03c      	b.n	8006f34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	f000 fa82 	bl	80073d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2150      	movs	r1, #80	@ 0x50
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 fadb 	bl	800748e <TIM_ITRx_SetConfig>
      break;
 8006ed8:	e02c      	b.n	8006f34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	f000 faa1 	bl	800742e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2160      	movs	r1, #96	@ 0x60
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f000 facb 	bl	800748e <TIM_ITRx_SetConfig>
      break;
 8006ef8:	e01c      	b.n	8006f34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f06:	461a      	mov	r2, r3
 8006f08:	f000 fa62 	bl	80073d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2140      	movs	r1, #64	@ 0x40
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 fabb 	bl	800748e <TIM_ITRx_SetConfig>
      break;
 8006f18:	e00c      	b.n	8006f34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4619      	mov	r1, r3
 8006f24:	4610      	mov	r0, r2
 8006f26:	f000 fab2 	bl	800748e <TIM_ITRx_SetConfig>
      break;
 8006f2a:	e003      	b.n	8006f34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f30:	e000      	b.n	8006f34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b083      	sub	sp, #12
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f56:	bf00      	nop
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b083      	sub	sp, #12
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f6a:	bf00      	nop
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b083      	sub	sp, #12
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f7e:	bf00      	nop
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b083      	sub	sp, #12
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f92:	bf00      	nop
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
	...

08006fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a3a      	ldr	r2, [pc, #232]	@ (800709c <TIM_Base_SetConfig+0xfc>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d00f      	beq.n	8006fd8 <TIM_Base_SetConfig+0x38>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fbe:	d00b      	beq.n	8006fd8 <TIM_Base_SetConfig+0x38>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a37      	ldr	r2, [pc, #220]	@ (80070a0 <TIM_Base_SetConfig+0x100>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d007      	beq.n	8006fd8 <TIM_Base_SetConfig+0x38>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a36      	ldr	r2, [pc, #216]	@ (80070a4 <TIM_Base_SetConfig+0x104>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d003      	beq.n	8006fd8 <TIM_Base_SetConfig+0x38>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a35      	ldr	r2, [pc, #212]	@ (80070a8 <TIM_Base_SetConfig+0x108>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d108      	bne.n	8006fea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a2b      	ldr	r2, [pc, #172]	@ (800709c <TIM_Base_SetConfig+0xfc>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d01b      	beq.n	800702a <TIM_Base_SetConfig+0x8a>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ff8:	d017      	beq.n	800702a <TIM_Base_SetConfig+0x8a>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a28      	ldr	r2, [pc, #160]	@ (80070a0 <TIM_Base_SetConfig+0x100>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d013      	beq.n	800702a <TIM_Base_SetConfig+0x8a>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a27      	ldr	r2, [pc, #156]	@ (80070a4 <TIM_Base_SetConfig+0x104>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d00f      	beq.n	800702a <TIM_Base_SetConfig+0x8a>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a26      	ldr	r2, [pc, #152]	@ (80070a8 <TIM_Base_SetConfig+0x108>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d00b      	beq.n	800702a <TIM_Base_SetConfig+0x8a>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a25      	ldr	r2, [pc, #148]	@ (80070ac <TIM_Base_SetConfig+0x10c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d007      	beq.n	800702a <TIM_Base_SetConfig+0x8a>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a24      	ldr	r2, [pc, #144]	@ (80070b0 <TIM_Base_SetConfig+0x110>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d003      	beq.n	800702a <TIM_Base_SetConfig+0x8a>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a23      	ldr	r2, [pc, #140]	@ (80070b4 <TIM_Base_SetConfig+0x114>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d108      	bne.n	800703c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	4313      	orrs	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	4313      	orrs	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	689a      	ldr	r2, [r3, #8]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a0e      	ldr	r2, [pc, #56]	@ (800709c <TIM_Base_SetConfig+0xfc>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d103      	bne.n	8007070 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	691a      	ldr	r2, [r3, #16]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	2b01      	cmp	r3, #1
 8007080:	d105      	bne.n	800708e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	f023 0201 	bic.w	r2, r3, #1
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	611a      	str	r2, [r3, #16]
  }
}
 800708e:	bf00      	nop
 8007090:	3714      	adds	r7, #20
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	40010000 	.word	0x40010000
 80070a0:	40000400 	.word	0x40000400
 80070a4:	40000800 	.word	0x40000800
 80070a8:	40000c00 	.word	0x40000c00
 80070ac:	40014000 	.word	0x40014000
 80070b0:	40014400 	.word	0x40014400
 80070b4:	40014800 	.word	0x40014800

080070b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	f023 0201 	bic.w	r2, r3, #1
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f023 0303 	bic.w	r3, r3, #3
 80070ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f023 0302 	bic.w	r3, r3, #2
 8007100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	4313      	orrs	r3, r2
 800710a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a1c      	ldr	r2, [pc, #112]	@ (8007180 <TIM_OC1_SetConfig+0xc8>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d10c      	bne.n	800712e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	f023 0308 	bic.w	r3, r3, #8
 800711a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	4313      	orrs	r3, r2
 8007124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f023 0304 	bic.w	r3, r3, #4
 800712c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a13      	ldr	r2, [pc, #76]	@ (8007180 <TIM_OC1_SetConfig+0xc8>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d111      	bne.n	800715a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800713c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	4313      	orrs	r3, r2
 800714e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	4313      	orrs	r3, r2
 8007158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	621a      	str	r2, [r3, #32]
}
 8007174:	bf00      	nop
 8007176:	371c      	adds	r7, #28
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	40010000 	.word	0x40010000

08007184 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007184:	b480      	push	{r7}
 8007186:	b087      	sub	sp, #28
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a1b      	ldr	r3, [r3, #32]
 8007198:	f023 0210 	bic.w	r2, r3, #16
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	021b      	lsls	r3, r3, #8
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f023 0320 	bic.w	r3, r3, #32
 80071ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	011b      	lsls	r3, r3, #4
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	4313      	orrs	r3, r2
 80071da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a1e      	ldr	r2, [pc, #120]	@ (8007258 <TIM_OC2_SetConfig+0xd4>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d10d      	bne.n	8007200 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	011b      	lsls	r3, r3, #4
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a15      	ldr	r2, [pc, #84]	@ (8007258 <TIM_OC2_SetConfig+0xd4>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d113      	bne.n	8007230 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800720e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007216:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	695b      	ldr	r3, [r3, #20]
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	4313      	orrs	r3, r2
 8007222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	4313      	orrs	r3, r2
 800722e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	621a      	str	r2, [r3, #32]
}
 800724a:	bf00      	nop
 800724c:	371c      	adds	r7, #28
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	40010000 	.word	0x40010000

0800725c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800725c:	b480      	push	{r7}
 800725e:	b087      	sub	sp, #28
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a1b      	ldr	r3, [r3, #32]
 8007270:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	69db      	ldr	r3, [r3, #28]
 8007282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800728a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f023 0303 	bic.w	r3, r3, #3
 8007292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	4313      	orrs	r3, r2
 800729c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80072a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	021b      	lsls	r3, r3, #8
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a1d      	ldr	r2, [pc, #116]	@ (800732c <TIM_OC3_SetConfig+0xd0>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d10d      	bne.n	80072d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80072c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	021b      	lsls	r3, r3, #8
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80072d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a14      	ldr	r2, [pc, #80]	@ (800732c <TIM_OC3_SetConfig+0xd0>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d113      	bne.n	8007306 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80072ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	011b      	lsls	r3, r3, #4
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	011b      	lsls	r3, r3, #4
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	4313      	orrs	r3, r2
 8007304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	621a      	str	r2, [r3, #32]
}
 8007320:	bf00      	nop
 8007322:	371c      	adds	r7, #28
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	40010000 	.word	0x40010000

08007330 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a1b      	ldr	r3, [r3, #32]
 8007344:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800735e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	021b      	lsls	r3, r3, #8
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	4313      	orrs	r3, r2
 8007372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800737a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	031b      	lsls	r3, r3, #12
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	4313      	orrs	r3, r2
 8007386:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a10      	ldr	r2, [pc, #64]	@ (80073cc <TIM_OC4_SetConfig+0x9c>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d109      	bne.n	80073a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007396:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	695b      	ldr	r3, [r3, #20]
 800739c:	019b      	lsls	r3, r3, #6
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	693a      	ldr	r2, [r7, #16]
 80073bc:	621a      	str	r2, [r3, #32]
}
 80073be:	bf00      	nop
 80073c0:	371c      	adds	r7, #28
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	40010000 	.word	0x40010000

080073d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b087      	sub	sp, #28
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6a1b      	ldr	r3, [r3, #32]
 80073e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	f023 0201 	bic.w	r2, r3, #1
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	011b      	lsls	r3, r3, #4
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	4313      	orrs	r3, r2
 8007404:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f023 030a 	bic.w	r3, r3, #10
 800740c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	4313      	orrs	r3, r2
 8007414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	621a      	str	r2, [r3, #32]
}
 8007422:	bf00      	nop
 8007424:	371c      	adds	r7, #28
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800742e:	b480      	push	{r7}
 8007430:	b087      	sub	sp, #28
 8007432:	af00      	add	r7, sp, #0
 8007434:	60f8      	str	r0, [r7, #12]
 8007436:	60b9      	str	r1, [r7, #8]
 8007438:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	f023 0210 	bic.w	r2, r3, #16
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007458:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	031b      	lsls	r3, r3, #12
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	4313      	orrs	r3, r2
 8007462:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800746a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	011b      	lsls	r3, r3, #4
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	4313      	orrs	r3, r2
 8007474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	697a      	ldr	r2, [r7, #20]
 8007480:	621a      	str	r2, [r3, #32]
}
 8007482:	bf00      	nop
 8007484:	371c      	adds	r7, #28
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800748e:	b480      	push	{r7}
 8007490:	b085      	sub	sp, #20
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
 8007496:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	f043 0307 	orr.w	r3, r3, #7
 80074b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	609a      	str	r2, [r3, #8]
}
 80074b8:	bf00      	nop
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b087      	sub	sp, #28
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
 80074d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	021a      	lsls	r2, r3, #8
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	431a      	orrs	r2, r3
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	697a      	ldr	r2, [r7, #20]
 80074f6:	609a      	str	r2, [r3, #8]
}
 80074f8:	bf00      	nop
 80074fa:	371c      	adds	r7, #28
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007504:	b480      	push	{r7}
 8007506:	b087      	sub	sp, #28
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	f003 031f 	and.w	r3, r3, #31
 8007516:	2201      	movs	r2, #1
 8007518:	fa02 f303 	lsl.w	r3, r2, r3
 800751c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6a1a      	ldr	r2, [r3, #32]
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	43db      	mvns	r3, r3
 8007526:	401a      	ands	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6a1a      	ldr	r2, [r3, #32]
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	f003 031f 	and.w	r3, r3, #31
 8007536:	6879      	ldr	r1, [r7, #4]
 8007538:	fa01 f303 	lsl.w	r3, r1, r3
 800753c:	431a      	orrs	r2, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	621a      	str	r2, [r3, #32]
}
 8007542:	bf00      	nop
 8007544:	371c      	adds	r7, #28
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
	...

08007550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007560:	2b01      	cmp	r3, #1
 8007562:	d101      	bne.n	8007568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007564:	2302      	movs	r3, #2
 8007566:	e050      	b.n	800760a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2202      	movs	r2, #2
 8007574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800758e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	4313      	orrs	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a1c      	ldr	r2, [pc, #112]	@ (8007618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d018      	beq.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075b4:	d013      	beq.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a18      	ldr	r2, [pc, #96]	@ (800761c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d00e      	beq.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a16      	ldr	r2, [pc, #88]	@ (8007620 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d009      	beq.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a15      	ldr	r2, [pc, #84]	@ (8007624 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d004      	beq.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a13      	ldr	r2, [pc, #76]	@ (8007628 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d10c      	bne.n	80075f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	40010000 	.word	0x40010000
 800761c:	40000400 	.word	0x40000400
 8007620:	40000800 	.word	0x40000800
 8007624:	40000c00 	.word	0x40000c00
 8007628:	40014000 	.word	0x40014000

0800762c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d101      	bne.n	8007666 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e042      	b.n	80076ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b00      	cmp	r3, #0
 8007670:	d106      	bne.n	8007680 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7fb fa18 	bl	8002ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2224      	movs	r2, #36	@ 0x24
 8007684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68da      	ldr	r2, [r3, #12]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007696:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 fa09 	bl	8007ab0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	691a      	ldr	r2, [r3, #16]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80076ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	695a      	ldr	r2, [r3, #20]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80076bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68da      	ldr	r2, [r3, #12]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80076cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2220      	movs	r2, #32
 80076d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2220      	movs	r2, #32
 80076e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b08a      	sub	sp, #40	@ 0x28
 80076f8:	af02      	add	r7, sp, #8
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	603b      	str	r3, [r7, #0]
 8007700:	4613      	mov	r3, r2
 8007702:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007704:	2300      	movs	r3, #0
 8007706:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800770e:	b2db      	uxtb	r3, r3
 8007710:	2b20      	cmp	r3, #32
 8007712:	d175      	bne.n	8007800 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d002      	beq.n	8007720 <HAL_UART_Transmit+0x2c>
 800771a:	88fb      	ldrh	r3, [r7, #6]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d101      	bne.n	8007724 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e06e      	b.n	8007802 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2221      	movs	r2, #33	@ 0x21
 800772e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007732:	f7fb fe55 	bl	80033e0 <HAL_GetTick>
 8007736:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	88fa      	ldrh	r2, [r7, #6]
 800773c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	88fa      	ldrh	r2, [r7, #6]
 8007742:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800774c:	d108      	bne.n	8007760 <HAL_UART_Transmit+0x6c>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d104      	bne.n	8007760 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007756:	2300      	movs	r3, #0
 8007758:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	61bb      	str	r3, [r7, #24]
 800775e:	e003      	b.n	8007768 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007764:	2300      	movs	r3, #0
 8007766:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007768:	e02e      	b.n	80077c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	2200      	movs	r2, #0
 8007772:	2180      	movs	r1, #128	@ 0x80
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 f8df 	bl	8007938 <UART_WaitOnFlagUntilTimeout>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d005      	beq.n	800778c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2220      	movs	r2, #32
 8007784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e03a      	b.n	8007802 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d10b      	bne.n	80077aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	881b      	ldrh	r3, [r3, #0]
 8007796:	461a      	mov	r2, r3
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	3302      	adds	r3, #2
 80077a6:	61bb      	str	r3, [r7, #24]
 80077a8:	e007      	b.n	80077ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	781a      	ldrb	r2, [r3, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	3301      	adds	r3, #1
 80077b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80077be:	b29b      	uxth	r3, r3
 80077c0:	3b01      	subs	r3, #1
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1cb      	bne.n	800776a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	9300      	str	r3, [sp, #0]
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	2200      	movs	r2, #0
 80077da:	2140      	movs	r1, #64	@ 0x40
 80077dc:	68f8      	ldr	r0, [r7, #12]
 80077de:	f000 f8ab 	bl	8007938 <UART_WaitOnFlagUntilTimeout>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d005      	beq.n	80077f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2220      	movs	r2, #32
 80077ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e006      	b.n	8007802 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2220      	movs	r2, #32
 80077f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80077fc:	2300      	movs	r3, #0
 80077fe:	e000      	b.n	8007802 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007800:	2302      	movs	r3, #2
  }
}
 8007802:	4618      	mov	r0, r3
 8007804:	3720      	adds	r7, #32
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b08a      	sub	sp, #40	@ 0x28
 800780e:	af02      	add	r7, sp, #8
 8007810:	60f8      	str	r0, [r7, #12]
 8007812:	60b9      	str	r1, [r7, #8]
 8007814:	603b      	str	r3, [r7, #0]
 8007816:	4613      	mov	r3, r2
 8007818:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800781a:	2300      	movs	r3, #0
 800781c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b20      	cmp	r3, #32
 8007828:	f040 8081 	bne.w	800792e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d002      	beq.n	8007838 <HAL_UART_Receive+0x2e>
 8007832:	88fb      	ldrh	r3, [r7, #6]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d101      	bne.n	800783c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e079      	b.n	8007930 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2222      	movs	r2, #34	@ 0x22
 8007846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007850:	f7fb fdc6 	bl	80033e0 <HAL_GetTick>
 8007854:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	88fa      	ldrh	r2, [r7, #6]
 800785a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	88fa      	ldrh	r2, [r7, #6]
 8007860:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800786a:	d108      	bne.n	800787e <HAL_UART_Receive+0x74>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d104      	bne.n	800787e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8007874:	2300      	movs	r3, #0
 8007876:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	61bb      	str	r3, [r7, #24]
 800787c:	e003      	b.n	8007886 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007882:	2300      	movs	r3, #0
 8007884:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007886:	e047      	b.n	8007918 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	2200      	movs	r2, #0
 8007890:	2120      	movs	r1, #32
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f000 f850 	bl	8007938 <UART_WaitOnFlagUntilTimeout>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d005      	beq.n	80078aa <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2220      	movs	r2, #32
 80078a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e042      	b.n	8007930 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10c      	bne.n	80078ca <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078bc:	b29a      	uxth	r2, r3
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	3302      	adds	r3, #2
 80078c6:	61bb      	str	r3, [r7, #24]
 80078c8:	e01f      	b.n	800790a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078d2:	d007      	beq.n	80078e4 <HAL_UART_Receive+0xda>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10a      	bne.n	80078f2 <HAL_UART_Receive+0xe8>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d106      	bne.n	80078f2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	701a      	strb	r2, [r3, #0]
 80078f0:	e008      	b.n	8007904 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078fe:	b2da      	uxtb	r2, r3
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	3301      	adds	r3, #1
 8007908:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800790e:	b29b      	uxth	r3, r3
 8007910:	3b01      	subs	r3, #1
 8007912:	b29a      	uxth	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800791c:	b29b      	uxth	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1b2      	bne.n	8007888 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2220      	movs	r2, #32
 8007926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	e000      	b.n	8007930 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800792e:	2302      	movs	r3, #2
  }
}
 8007930:	4618      	mov	r0, r3
 8007932:	3720      	adds	r7, #32
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	603b      	str	r3, [r7, #0]
 8007944:	4613      	mov	r3, r2
 8007946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007948:	e03b      	b.n	80079c2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007950:	d037      	beq.n	80079c2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007952:	f7fb fd45 	bl	80033e0 <HAL_GetTick>
 8007956:	4602      	mov	r2, r0
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	6a3a      	ldr	r2, [r7, #32]
 800795e:	429a      	cmp	r2, r3
 8007960:	d302      	bcc.n	8007968 <UART_WaitOnFlagUntilTimeout+0x30>
 8007962:	6a3b      	ldr	r3, [r7, #32]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d101      	bne.n	800796c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e03a      	b.n	80079e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	f003 0304 	and.w	r3, r3, #4
 8007976:	2b00      	cmp	r3, #0
 8007978:	d023      	beq.n	80079c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	2b80      	cmp	r3, #128	@ 0x80
 800797e:	d020      	beq.n	80079c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2b40      	cmp	r3, #64	@ 0x40
 8007984:	d01d      	beq.n	80079c2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0308 	and.w	r3, r3, #8
 8007990:	2b08      	cmp	r3, #8
 8007992:	d116      	bne.n	80079c2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007994:	2300      	movs	r3, #0
 8007996:	617b      	str	r3, [r7, #20]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	617b      	str	r3, [r7, #20]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	617b      	str	r3, [r7, #20]
 80079a8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f000 f81d 	bl	80079ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2208      	movs	r2, #8
 80079b4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e00f      	b.n	80079e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	4013      	ands	r3, r2
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	bf0c      	ite	eq
 80079d2:	2301      	moveq	r3, #1
 80079d4:	2300      	movne	r3, #0
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	461a      	mov	r2, r3
 80079da:	79fb      	ldrb	r3, [r7, #7]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d0b4      	beq.n	800794a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3718      	adds	r7, #24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079ea:	b480      	push	{r7}
 80079ec:	b095      	sub	sp, #84	@ 0x54
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	330c      	adds	r3, #12
 80079f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079fc:	e853 3f00 	ldrex	r3, [r3]
 8007a00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	330c      	adds	r3, #12
 8007a10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a12:	643a      	str	r2, [r7, #64]	@ 0x40
 8007a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a1a:	e841 2300 	strex	r3, r2, [r1]
 8007a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1e5      	bne.n	80079f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3314      	adds	r3, #20
 8007a2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2e:	6a3b      	ldr	r3, [r7, #32]
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	f023 0301 	bic.w	r3, r3, #1
 8007a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	3314      	adds	r3, #20
 8007a44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1e5      	bne.n	8007a26 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d119      	bne.n	8007a96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	330c      	adds	r3, #12
 8007a68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	e853 3f00 	ldrex	r3, [r3]
 8007a70:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	f023 0310 	bic.w	r3, r3, #16
 8007a78:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	330c      	adds	r3, #12
 8007a80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a82:	61ba      	str	r2, [r7, #24]
 8007a84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a86:	6979      	ldr	r1, [r7, #20]
 8007a88:	69ba      	ldr	r2, [r7, #24]
 8007a8a:	e841 2300 	strex	r3, r2, [r1]
 8007a8e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1e5      	bne.n	8007a62 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2220      	movs	r2, #32
 8007a9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007aa4:	bf00      	nop
 8007aa6:	3754      	adds	r7, #84	@ 0x54
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ab4:	b0c0      	sub	sp, #256	@ 0x100
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007acc:	68d9      	ldr	r1, [r3, #12]
 8007ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	ea40 0301 	orr.w	r3, r0, r1
 8007ad8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ade:	689a      	ldr	r2, [r3, #8]
 8007ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	431a      	orrs	r2, r3
 8007ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aec:	695b      	ldr	r3, [r3, #20]
 8007aee:	431a      	orrs	r2, r3
 8007af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007af4:	69db      	ldr	r3, [r3, #28]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007b08:	f021 010c 	bic.w	r1, r1, #12
 8007b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007b16:	430b      	orrs	r3, r1
 8007b18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b2a:	6999      	ldr	r1, [r3, #24]
 8007b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	ea40 0301 	orr.w	r3, r0, r1
 8007b36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	4b8f      	ldr	r3, [pc, #572]	@ (8007d7c <UART_SetConfig+0x2cc>)
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d005      	beq.n	8007b50 <UART_SetConfig+0xa0>
 8007b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	4b8d      	ldr	r3, [pc, #564]	@ (8007d80 <UART_SetConfig+0x2d0>)
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d104      	bne.n	8007b5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b50:	f7fe fdb4 	bl	80066bc <HAL_RCC_GetPCLK2Freq>
 8007b54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007b58:	e003      	b.n	8007b62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b5a:	f7fe fd9b 	bl	8006694 <HAL_RCC_GetPCLK1Freq>
 8007b5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b66:	69db      	ldr	r3, [r3, #28]
 8007b68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b6c:	f040 810c 	bne.w	8007d88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b74:	2200      	movs	r2, #0
 8007b76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007b7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007b7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007b82:	4622      	mov	r2, r4
 8007b84:	462b      	mov	r3, r5
 8007b86:	1891      	adds	r1, r2, r2
 8007b88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007b8a:	415b      	adcs	r3, r3
 8007b8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007b92:	4621      	mov	r1, r4
 8007b94:	eb12 0801 	adds.w	r8, r2, r1
 8007b98:	4629      	mov	r1, r5
 8007b9a:	eb43 0901 	adc.w	r9, r3, r1
 8007b9e:	f04f 0200 	mov.w	r2, #0
 8007ba2:	f04f 0300 	mov.w	r3, #0
 8007ba6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007baa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007bae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007bb2:	4690      	mov	r8, r2
 8007bb4:	4699      	mov	r9, r3
 8007bb6:	4623      	mov	r3, r4
 8007bb8:	eb18 0303 	adds.w	r3, r8, r3
 8007bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007bc0:	462b      	mov	r3, r5
 8007bc2:	eb49 0303 	adc.w	r3, r9, r3
 8007bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007bd6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007bda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007bde:	460b      	mov	r3, r1
 8007be0:	18db      	adds	r3, r3, r3
 8007be2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007be4:	4613      	mov	r3, r2
 8007be6:	eb42 0303 	adc.w	r3, r2, r3
 8007bea:	657b      	str	r3, [r7, #84]	@ 0x54
 8007bec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007bf0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007bf4:	f7f9 f830 	bl	8000c58 <__aeabi_uldivmod>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	4b61      	ldr	r3, [pc, #388]	@ (8007d84 <UART_SetConfig+0x2d4>)
 8007bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8007c02:	095b      	lsrs	r3, r3, #5
 8007c04:	011c      	lsls	r4, r3, #4
 8007c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007c14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007c18:	4642      	mov	r2, r8
 8007c1a:	464b      	mov	r3, r9
 8007c1c:	1891      	adds	r1, r2, r2
 8007c1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007c20:	415b      	adcs	r3, r3
 8007c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007c28:	4641      	mov	r1, r8
 8007c2a:	eb12 0a01 	adds.w	sl, r2, r1
 8007c2e:	4649      	mov	r1, r9
 8007c30:	eb43 0b01 	adc.w	fp, r3, r1
 8007c34:	f04f 0200 	mov.w	r2, #0
 8007c38:	f04f 0300 	mov.w	r3, #0
 8007c3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c48:	4692      	mov	sl, r2
 8007c4a:	469b      	mov	fp, r3
 8007c4c:	4643      	mov	r3, r8
 8007c4e:	eb1a 0303 	adds.w	r3, sl, r3
 8007c52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c56:	464b      	mov	r3, r9
 8007c58:	eb4b 0303 	adc.w	r3, fp, r3
 8007c5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007c70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007c74:	460b      	mov	r3, r1
 8007c76:	18db      	adds	r3, r3, r3
 8007c78:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	eb42 0303 	adc.w	r3, r2, r3
 8007c80:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007c86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007c8a:	f7f8 ffe5 	bl	8000c58 <__aeabi_uldivmod>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	460b      	mov	r3, r1
 8007c92:	4611      	mov	r1, r2
 8007c94:	4b3b      	ldr	r3, [pc, #236]	@ (8007d84 <UART_SetConfig+0x2d4>)
 8007c96:	fba3 2301 	umull	r2, r3, r3, r1
 8007c9a:	095b      	lsrs	r3, r3, #5
 8007c9c:	2264      	movs	r2, #100	@ 0x64
 8007c9e:	fb02 f303 	mul.w	r3, r2, r3
 8007ca2:	1acb      	subs	r3, r1, r3
 8007ca4:	00db      	lsls	r3, r3, #3
 8007ca6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007caa:	4b36      	ldr	r3, [pc, #216]	@ (8007d84 <UART_SetConfig+0x2d4>)
 8007cac:	fba3 2302 	umull	r2, r3, r3, r2
 8007cb0:	095b      	lsrs	r3, r3, #5
 8007cb2:	005b      	lsls	r3, r3, #1
 8007cb4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007cb8:	441c      	add	r4, r3
 8007cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007cc4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007cc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007ccc:	4642      	mov	r2, r8
 8007cce:	464b      	mov	r3, r9
 8007cd0:	1891      	adds	r1, r2, r2
 8007cd2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007cd4:	415b      	adcs	r3, r3
 8007cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007cdc:	4641      	mov	r1, r8
 8007cde:	1851      	adds	r1, r2, r1
 8007ce0:	6339      	str	r1, [r7, #48]	@ 0x30
 8007ce2:	4649      	mov	r1, r9
 8007ce4:	414b      	adcs	r3, r1
 8007ce6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ce8:	f04f 0200 	mov.w	r2, #0
 8007cec:	f04f 0300 	mov.w	r3, #0
 8007cf0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007cf4:	4659      	mov	r1, fp
 8007cf6:	00cb      	lsls	r3, r1, #3
 8007cf8:	4651      	mov	r1, sl
 8007cfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cfe:	4651      	mov	r1, sl
 8007d00:	00ca      	lsls	r2, r1, #3
 8007d02:	4610      	mov	r0, r2
 8007d04:	4619      	mov	r1, r3
 8007d06:	4603      	mov	r3, r0
 8007d08:	4642      	mov	r2, r8
 8007d0a:	189b      	adds	r3, r3, r2
 8007d0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d10:	464b      	mov	r3, r9
 8007d12:	460a      	mov	r2, r1
 8007d14:	eb42 0303 	adc.w	r3, r2, r3
 8007d18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007d2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007d30:	460b      	mov	r3, r1
 8007d32:	18db      	adds	r3, r3, r3
 8007d34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d36:	4613      	mov	r3, r2
 8007d38:	eb42 0303 	adc.w	r3, r2, r3
 8007d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007d42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007d46:	f7f8 ff87 	bl	8000c58 <__aeabi_uldivmod>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d84 <UART_SetConfig+0x2d4>)
 8007d50:	fba3 1302 	umull	r1, r3, r3, r2
 8007d54:	095b      	lsrs	r3, r3, #5
 8007d56:	2164      	movs	r1, #100	@ 0x64
 8007d58:	fb01 f303 	mul.w	r3, r1, r3
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	00db      	lsls	r3, r3, #3
 8007d60:	3332      	adds	r3, #50	@ 0x32
 8007d62:	4a08      	ldr	r2, [pc, #32]	@ (8007d84 <UART_SetConfig+0x2d4>)
 8007d64:	fba2 2303 	umull	r2, r3, r2, r3
 8007d68:	095b      	lsrs	r3, r3, #5
 8007d6a:	f003 0207 	and.w	r2, r3, #7
 8007d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4422      	add	r2, r4
 8007d76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d78:	e106      	b.n	8007f88 <UART_SetConfig+0x4d8>
 8007d7a:	bf00      	nop
 8007d7c:	40011000 	.word	0x40011000
 8007d80:	40011400 	.word	0x40011400
 8007d84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007d92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007d96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007d9a:	4642      	mov	r2, r8
 8007d9c:	464b      	mov	r3, r9
 8007d9e:	1891      	adds	r1, r2, r2
 8007da0:	6239      	str	r1, [r7, #32]
 8007da2:	415b      	adcs	r3, r3
 8007da4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007da6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007daa:	4641      	mov	r1, r8
 8007dac:	1854      	adds	r4, r2, r1
 8007dae:	4649      	mov	r1, r9
 8007db0:	eb43 0501 	adc.w	r5, r3, r1
 8007db4:	f04f 0200 	mov.w	r2, #0
 8007db8:	f04f 0300 	mov.w	r3, #0
 8007dbc:	00eb      	lsls	r3, r5, #3
 8007dbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007dc2:	00e2      	lsls	r2, r4, #3
 8007dc4:	4614      	mov	r4, r2
 8007dc6:	461d      	mov	r5, r3
 8007dc8:	4643      	mov	r3, r8
 8007dca:	18e3      	adds	r3, r4, r3
 8007dcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007dd0:	464b      	mov	r3, r9
 8007dd2:	eb45 0303 	adc.w	r3, r5, r3
 8007dd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007de6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007dea:	f04f 0200 	mov.w	r2, #0
 8007dee:	f04f 0300 	mov.w	r3, #0
 8007df2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007df6:	4629      	mov	r1, r5
 8007df8:	008b      	lsls	r3, r1, #2
 8007dfa:	4621      	mov	r1, r4
 8007dfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e00:	4621      	mov	r1, r4
 8007e02:	008a      	lsls	r2, r1, #2
 8007e04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007e08:	f7f8 ff26 	bl	8000c58 <__aeabi_uldivmod>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	460b      	mov	r3, r1
 8007e10:	4b60      	ldr	r3, [pc, #384]	@ (8007f94 <UART_SetConfig+0x4e4>)
 8007e12:	fba3 2302 	umull	r2, r3, r3, r2
 8007e16:	095b      	lsrs	r3, r3, #5
 8007e18:	011c      	lsls	r4, r3, #4
 8007e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007e28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007e2c:	4642      	mov	r2, r8
 8007e2e:	464b      	mov	r3, r9
 8007e30:	1891      	adds	r1, r2, r2
 8007e32:	61b9      	str	r1, [r7, #24]
 8007e34:	415b      	adcs	r3, r3
 8007e36:	61fb      	str	r3, [r7, #28]
 8007e38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e3c:	4641      	mov	r1, r8
 8007e3e:	1851      	adds	r1, r2, r1
 8007e40:	6139      	str	r1, [r7, #16]
 8007e42:	4649      	mov	r1, r9
 8007e44:	414b      	adcs	r3, r1
 8007e46:	617b      	str	r3, [r7, #20]
 8007e48:	f04f 0200 	mov.w	r2, #0
 8007e4c:	f04f 0300 	mov.w	r3, #0
 8007e50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e54:	4659      	mov	r1, fp
 8007e56:	00cb      	lsls	r3, r1, #3
 8007e58:	4651      	mov	r1, sl
 8007e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e5e:	4651      	mov	r1, sl
 8007e60:	00ca      	lsls	r2, r1, #3
 8007e62:	4610      	mov	r0, r2
 8007e64:	4619      	mov	r1, r3
 8007e66:	4603      	mov	r3, r0
 8007e68:	4642      	mov	r2, r8
 8007e6a:	189b      	adds	r3, r3, r2
 8007e6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e70:	464b      	mov	r3, r9
 8007e72:	460a      	mov	r2, r1
 8007e74:	eb42 0303 	adc.w	r3, r2, r3
 8007e78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007e88:	f04f 0200 	mov.w	r2, #0
 8007e8c:	f04f 0300 	mov.w	r3, #0
 8007e90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007e94:	4649      	mov	r1, r9
 8007e96:	008b      	lsls	r3, r1, #2
 8007e98:	4641      	mov	r1, r8
 8007e9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e9e:	4641      	mov	r1, r8
 8007ea0:	008a      	lsls	r2, r1, #2
 8007ea2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007ea6:	f7f8 fed7 	bl	8000c58 <__aeabi_uldivmod>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
 8007eae:	4611      	mov	r1, r2
 8007eb0:	4b38      	ldr	r3, [pc, #224]	@ (8007f94 <UART_SetConfig+0x4e4>)
 8007eb2:	fba3 2301 	umull	r2, r3, r3, r1
 8007eb6:	095b      	lsrs	r3, r3, #5
 8007eb8:	2264      	movs	r2, #100	@ 0x64
 8007eba:	fb02 f303 	mul.w	r3, r2, r3
 8007ebe:	1acb      	subs	r3, r1, r3
 8007ec0:	011b      	lsls	r3, r3, #4
 8007ec2:	3332      	adds	r3, #50	@ 0x32
 8007ec4:	4a33      	ldr	r2, [pc, #204]	@ (8007f94 <UART_SetConfig+0x4e4>)
 8007ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eca:	095b      	lsrs	r3, r3, #5
 8007ecc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ed0:	441c      	add	r4, r3
 8007ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	673b      	str	r3, [r7, #112]	@ 0x70
 8007eda:	677a      	str	r2, [r7, #116]	@ 0x74
 8007edc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007ee0:	4642      	mov	r2, r8
 8007ee2:	464b      	mov	r3, r9
 8007ee4:	1891      	adds	r1, r2, r2
 8007ee6:	60b9      	str	r1, [r7, #8]
 8007ee8:	415b      	adcs	r3, r3
 8007eea:	60fb      	str	r3, [r7, #12]
 8007eec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ef0:	4641      	mov	r1, r8
 8007ef2:	1851      	adds	r1, r2, r1
 8007ef4:	6039      	str	r1, [r7, #0]
 8007ef6:	4649      	mov	r1, r9
 8007ef8:	414b      	adcs	r3, r1
 8007efa:	607b      	str	r3, [r7, #4]
 8007efc:	f04f 0200 	mov.w	r2, #0
 8007f00:	f04f 0300 	mov.w	r3, #0
 8007f04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f08:	4659      	mov	r1, fp
 8007f0a:	00cb      	lsls	r3, r1, #3
 8007f0c:	4651      	mov	r1, sl
 8007f0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f12:	4651      	mov	r1, sl
 8007f14:	00ca      	lsls	r2, r1, #3
 8007f16:	4610      	mov	r0, r2
 8007f18:	4619      	mov	r1, r3
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	4642      	mov	r2, r8
 8007f1e:	189b      	adds	r3, r3, r2
 8007f20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f22:	464b      	mov	r3, r9
 8007f24:	460a      	mov	r2, r1
 8007f26:	eb42 0303 	adc.w	r3, r2, r3
 8007f2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f36:	667a      	str	r2, [r7, #100]	@ 0x64
 8007f38:	f04f 0200 	mov.w	r2, #0
 8007f3c:	f04f 0300 	mov.w	r3, #0
 8007f40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007f44:	4649      	mov	r1, r9
 8007f46:	008b      	lsls	r3, r1, #2
 8007f48:	4641      	mov	r1, r8
 8007f4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f4e:	4641      	mov	r1, r8
 8007f50:	008a      	lsls	r2, r1, #2
 8007f52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007f56:	f7f8 fe7f 	bl	8000c58 <__aeabi_uldivmod>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007f94 <UART_SetConfig+0x4e4>)
 8007f60:	fba3 1302 	umull	r1, r3, r3, r2
 8007f64:	095b      	lsrs	r3, r3, #5
 8007f66:	2164      	movs	r1, #100	@ 0x64
 8007f68:	fb01 f303 	mul.w	r3, r1, r3
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	011b      	lsls	r3, r3, #4
 8007f70:	3332      	adds	r3, #50	@ 0x32
 8007f72:	4a08      	ldr	r2, [pc, #32]	@ (8007f94 <UART_SetConfig+0x4e4>)
 8007f74:	fba2 2303 	umull	r2, r3, r2, r3
 8007f78:	095b      	lsrs	r3, r3, #5
 8007f7a:	f003 020f 	and.w	r2, r3, #15
 8007f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4422      	add	r2, r4
 8007f86:	609a      	str	r2, [r3, #8]
}
 8007f88:	bf00      	nop
 8007f8a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f94:	51eb851f 	.word	0x51eb851f

08007f98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f98:	b084      	sub	sp, #16
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b084      	sub	sp, #16
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	f107 001c 	add.w	r0, r7, #28
 8007fa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007faa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d123      	bne.n	8007ffa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fb6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007fc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007fda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d105      	bne.n	8007fee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f001 fae2 	bl	80095b8 <USB_CoreReset>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	73fb      	strb	r3, [r7, #15]
 8007ff8:	e01b      	b.n	8008032 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f001 fad6 	bl	80095b8 <USB_CoreReset>
 800800c:	4603      	mov	r3, r0
 800800e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008010:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008014:	2b00      	cmp	r3, #0
 8008016:	d106      	bne.n	8008026 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800801c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	639a      	str	r2, [r3, #56]	@ 0x38
 8008024:	e005      	b.n	8008032 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800802a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008032:	7fbb      	ldrb	r3, [r7, #30]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d10b      	bne.n	8008050 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	f043 0206 	orr.w	r2, r3, #6
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	f043 0220 	orr.w	r2, r3, #32
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008050:	7bfb      	ldrb	r3, [r7, #15]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800805c:	b004      	add	sp, #16
 800805e:	4770      	bx	lr

08008060 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008060:	b480      	push	{r7}
 8008062:	b087      	sub	sp, #28
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	4613      	mov	r3, r2
 800806c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800806e:	79fb      	ldrb	r3, [r7, #7]
 8008070:	2b02      	cmp	r3, #2
 8008072:	d165      	bne.n	8008140 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	4a41      	ldr	r2, [pc, #260]	@ (800817c <USB_SetTurnaroundTime+0x11c>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d906      	bls.n	800808a <USB_SetTurnaroundTime+0x2a>
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	4a40      	ldr	r2, [pc, #256]	@ (8008180 <USB_SetTurnaroundTime+0x120>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d202      	bcs.n	800808a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008084:	230f      	movs	r3, #15
 8008086:	617b      	str	r3, [r7, #20]
 8008088:	e062      	b.n	8008150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	4a3c      	ldr	r2, [pc, #240]	@ (8008180 <USB_SetTurnaroundTime+0x120>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d306      	bcc.n	80080a0 <USB_SetTurnaroundTime+0x40>
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	4a3b      	ldr	r2, [pc, #236]	@ (8008184 <USB_SetTurnaroundTime+0x124>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d202      	bcs.n	80080a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800809a:	230e      	movs	r3, #14
 800809c:	617b      	str	r3, [r7, #20]
 800809e:	e057      	b.n	8008150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	4a38      	ldr	r2, [pc, #224]	@ (8008184 <USB_SetTurnaroundTime+0x124>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d306      	bcc.n	80080b6 <USB_SetTurnaroundTime+0x56>
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	4a37      	ldr	r2, [pc, #220]	@ (8008188 <USB_SetTurnaroundTime+0x128>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d202      	bcs.n	80080b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80080b0:	230d      	movs	r3, #13
 80080b2:	617b      	str	r3, [r7, #20]
 80080b4:	e04c      	b.n	8008150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	4a33      	ldr	r2, [pc, #204]	@ (8008188 <USB_SetTurnaroundTime+0x128>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d306      	bcc.n	80080cc <USB_SetTurnaroundTime+0x6c>
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	4a32      	ldr	r2, [pc, #200]	@ (800818c <USB_SetTurnaroundTime+0x12c>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d802      	bhi.n	80080cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80080c6:	230c      	movs	r3, #12
 80080c8:	617b      	str	r3, [r7, #20]
 80080ca:	e041      	b.n	8008150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	4a2f      	ldr	r2, [pc, #188]	@ (800818c <USB_SetTurnaroundTime+0x12c>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d906      	bls.n	80080e2 <USB_SetTurnaroundTime+0x82>
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	4a2e      	ldr	r2, [pc, #184]	@ (8008190 <USB_SetTurnaroundTime+0x130>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d802      	bhi.n	80080e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80080dc:	230b      	movs	r3, #11
 80080de:	617b      	str	r3, [r7, #20]
 80080e0:	e036      	b.n	8008150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	4a2a      	ldr	r2, [pc, #168]	@ (8008190 <USB_SetTurnaroundTime+0x130>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d906      	bls.n	80080f8 <USB_SetTurnaroundTime+0x98>
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	4a29      	ldr	r2, [pc, #164]	@ (8008194 <USB_SetTurnaroundTime+0x134>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d802      	bhi.n	80080f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80080f2:	230a      	movs	r3, #10
 80080f4:	617b      	str	r3, [r7, #20]
 80080f6:	e02b      	b.n	8008150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	4a26      	ldr	r2, [pc, #152]	@ (8008194 <USB_SetTurnaroundTime+0x134>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d906      	bls.n	800810e <USB_SetTurnaroundTime+0xae>
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	4a25      	ldr	r2, [pc, #148]	@ (8008198 <USB_SetTurnaroundTime+0x138>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d202      	bcs.n	800810e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008108:	2309      	movs	r3, #9
 800810a:	617b      	str	r3, [r7, #20]
 800810c:	e020      	b.n	8008150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	4a21      	ldr	r2, [pc, #132]	@ (8008198 <USB_SetTurnaroundTime+0x138>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d306      	bcc.n	8008124 <USB_SetTurnaroundTime+0xc4>
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	4a20      	ldr	r2, [pc, #128]	@ (800819c <USB_SetTurnaroundTime+0x13c>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d802      	bhi.n	8008124 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800811e:	2308      	movs	r3, #8
 8008120:	617b      	str	r3, [r7, #20]
 8008122:	e015      	b.n	8008150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	4a1d      	ldr	r2, [pc, #116]	@ (800819c <USB_SetTurnaroundTime+0x13c>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d906      	bls.n	800813a <USB_SetTurnaroundTime+0xda>
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	4a1c      	ldr	r2, [pc, #112]	@ (80081a0 <USB_SetTurnaroundTime+0x140>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d202      	bcs.n	800813a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008134:	2307      	movs	r3, #7
 8008136:	617b      	str	r3, [r7, #20]
 8008138:	e00a      	b.n	8008150 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800813a:	2306      	movs	r3, #6
 800813c:	617b      	str	r3, [r7, #20]
 800813e:	e007      	b.n	8008150 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008140:	79fb      	ldrb	r3, [r7, #7]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d102      	bne.n	800814c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008146:	2309      	movs	r3, #9
 8008148:	617b      	str	r3, [r7, #20]
 800814a:	e001      	b.n	8008150 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800814c:	2309      	movs	r3, #9
 800814e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	68da      	ldr	r2, [r3, #12]
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	029b      	lsls	r3, r3, #10
 8008164:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008168:	431a      	orrs	r2, r3
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	371c      	adds	r7, #28
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr
 800817c:	00d8acbf 	.word	0x00d8acbf
 8008180:	00e4e1c0 	.word	0x00e4e1c0
 8008184:	00f42400 	.word	0x00f42400
 8008188:	01067380 	.word	0x01067380
 800818c:	011a499f 	.word	0x011a499f
 8008190:	01312cff 	.word	0x01312cff
 8008194:	014ca43f 	.word	0x014ca43f
 8008198:	016e3600 	.word	0x016e3600
 800819c:	01a6ab1f 	.word	0x01a6ab1f
 80081a0:	01e84800 	.word	0x01e84800

080081a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f043 0201 	orr.w	r2, r3, #1
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	370c      	adds	r7, #12
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081c6:	b480      	push	{r7}
 80081c8:	b083      	sub	sp, #12
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	f023 0201 	bic.w	r2, r3, #1
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	460b      	mov	r3, r1
 80081f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80081f4:	2300      	movs	r3, #0
 80081f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008204:	78fb      	ldrb	r3, [r7, #3]
 8008206:	2b01      	cmp	r3, #1
 8008208:	d115      	bne.n	8008236 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008216:	200a      	movs	r0, #10
 8008218:	f7fb f8ee 	bl	80033f8 <HAL_Delay>
      ms += 10U;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	330a      	adds	r3, #10
 8008220:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f001 f939 	bl	800949a <USB_GetMode>
 8008228:	4603      	mov	r3, r0
 800822a:	2b01      	cmp	r3, #1
 800822c:	d01e      	beq.n	800826c <USB_SetCurrentMode+0x84>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2bc7      	cmp	r3, #199	@ 0xc7
 8008232:	d9f0      	bls.n	8008216 <USB_SetCurrentMode+0x2e>
 8008234:	e01a      	b.n	800826c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008236:	78fb      	ldrb	r3, [r7, #3]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d115      	bne.n	8008268 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008248:	200a      	movs	r0, #10
 800824a:	f7fb f8d5 	bl	80033f8 <HAL_Delay>
      ms += 10U;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	330a      	adds	r3, #10
 8008252:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f001 f920 	bl	800949a <USB_GetMode>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d005      	beq.n	800826c <USB_SetCurrentMode+0x84>
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2bc7      	cmp	r3, #199	@ 0xc7
 8008264:	d9f0      	bls.n	8008248 <USB_SetCurrentMode+0x60>
 8008266:	e001      	b.n	800826c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	e005      	b.n	8008278 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2bc8      	cmp	r3, #200	@ 0xc8
 8008270:	d101      	bne.n	8008276 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e000      	b.n	8008278 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008280:	b084      	sub	sp, #16
 8008282:	b580      	push	{r7, lr}
 8008284:	b086      	sub	sp, #24
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800828e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008292:	2300      	movs	r3, #0
 8008294:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800829a:	2300      	movs	r3, #0
 800829c:	613b      	str	r3, [r7, #16]
 800829e:	e009      	b.n	80082b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	3340      	adds	r3, #64	@ 0x40
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	2200      	movs	r2, #0
 80082ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	3301      	adds	r3, #1
 80082b2:	613b      	str	r3, [r7, #16]
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	2b0e      	cmp	r3, #14
 80082b8:	d9f2      	bls.n	80082a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80082ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d11c      	bne.n	80082fc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082d0:	f043 0302 	orr.w	r3, r3, #2
 80082d4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082da:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082f2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80082fa:	e00b      	b.n	8008314 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008300:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800830c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800831a:	461a      	mov	r2, r3
 800831c:	2300      	movs	r3, #0
 800831e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008320:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008324:	2b01      	cmp	r3, #1
 8008326:	d10d      	bne.n	8008344 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008328:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800832c:	2b00      	cmp	r3, #0
 800832e:	d104      	bne.n	800833a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008330:	2100      	movs	r1, #0
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f968 	bl	8008608 <USB_SetDevSpeed>
 8008338:	e008      	b.n	800834c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800833a:	2101      	movs	r1, #1
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 f963 	bl	8008608 <USB_SetDevSpeed>
 8008342:	e003      	b.n	800834c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008344:	2103      	movs	r1, #3
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f95e 	bl	8008608 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800834c:	2110      	movs	r1, #16
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f8fa 	bl	8008548 <USB_FlushTxFifo>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f924 	bl	80085ac <USB_FlushRxFifo>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d001      	beq.n	800836e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008374:	461a      	mov	r2, r3
 8008376:	2300      	movs	r3, #0
 8008378:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008380:	461a      	mov	r2, r3
 8008382:	2300      	movs	r3, #0
 8008384:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800838c:	461a      	mov	r2, r3
 800838e:	2300      	movs	r3, #0
 8008390:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008392:	2300      	movs	r3, #0
 8008394:	613b      	str	r3, [r7, #16]
 8008396:	e043      	b.n	8008420 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	015a      	lsls	r2, r3, #5
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	4413      	add	r3, r2
 80083a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083ae:	d118      	bne.n	80083e2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10a      	bne.n	80083cc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	015a      	lsls	r2, r3, #5
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	4413      	add	r3, r2
 80083be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083c2:	461a      	mov	r2, r3
 80083c4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80083c8:	6013      	str	r3, [r2, #0]
 80083ca:	e013      	b.n	80083f4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	015a      	lsls	r2, r3, #5
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	4413      	add	r3, r2
 80083d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083d8:	461a      	mov	r2, r3
 80083da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80083de:	6013      	str	r3, [r2, #0]
 80083e0:	e008      	b.n	80083f4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	015a      	lsls	r2, r3, #5
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	4413      	add	r3, r2
 80083ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083ee:	461a      	mov	r2, r3
 80083f0:	2300      	movs	r3, #0
 80083f2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	015a      	lsls	r2, r3, #5
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	4413      	add	r3, r2
 80083fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008400:	461a      	mov	r2, r3
 8008402:	2300      	movs	r3, #0
 8008404:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	4413      	add	r3, r2
 800840e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008412:	461a      	mov	r2, r3
 8008414:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008418:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	3301      	adds	r3, #1
 800841e:	613b      	str	r3, [r7, #16]
 8008420:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008424:	461a      	mov	r2, r3
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	4293      	cmp	r3, r2
 800842a:	d3b5      	bcc.n	8008398 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800842c:	2300      	movs	r3, #0
 800842e:	613b      	str	r3, [r7, #16]
 8008430:	e043      	b.n	80084ba <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	015a      	lsls	r2, r3, #5
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	4413      	add	r3, r2
 800843a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008444:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008448:	d118      	bne.n	800847c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d10a      	bne.n	8008466 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	4413      	add	r3, r2
 8008458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800845c:	461a      	mov	r2, r3
 800845e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008462:	6013      	str	r3, [r2, #0]
 8008464:	e013      	b.n	800848e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	015a      	lsls	r2, r3, #5
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	4413      	add	r3, r2
 800846e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008472:	461a      	mov	r2, r3
 8008474:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008478:	6013      	str	r3, [r2, #0]
 800847a:	e008      	b.n	800848e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	4413      	add	r3, r2
 8008484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008488:	461a      	mov	r2, r3
 800848a:	2300      	movs	r3, #0
 800848c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	015a      	lsls	r2, r3, #5
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	4413      	add	r3, r2
 8008496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800849a:	461a      	mov	r2, r3
 800849c:	2300      	movs	r3, #0
 800849e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	015a      	lsls	r2, r3, #5
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	4413      	add	r3, r2
 80084a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ac:	461a      	mov	r2, r3
 80084ae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80084b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	3301      	adds	r3, #1
 80084b8:	613b      	str	r3, [r7, #16]
 80084ba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80084be:	461a      	mov	r2, r3
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d3b5      	bcc.n	8008432 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084d8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80084e6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80084e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d105      	bne.n	80084fc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	f043 0210 	orr.w	r2, r3, #16
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	699a      	ldr	r2, [r3, #24]
 8008500:	4b10      	ldr	r3, [pc, #64]	@ (8008544 <USB_DevInit+0x2c4>)
 8008502:	4313      	orrs	r3, r2
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008508:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800850c:	2b00      	cmp	r3, #0
 800850e:	d005      	beq.n	800851c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	699b      	ldr	r3, [r3, #24]
 8008514:	f043 0208 	orr.w	r2, r3, #8
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800851c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008520:	2b01      	cmp	r3, #1
 8008522:	d107      	bne.n	8008534 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800852c:	f043 0304 	orr.w	r3, r3, #4
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008534:	7dfb      	ldrb	r3, [r7, #23]
}
 8008536:	4618      	mov	r0, r3
 8008538:	3718      	adds	r7, #24
 800853a:	46bd      	mov	sp, r7
 800853c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008540:	b004      	add	sp, #16
 8008542:	4770      	bx	lr
 8008544:	803c3800 	.word	0x803c3800

08008548 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008552:	2300      	movs	r3, #0
 8008554:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	3301      	adds	r3, #1
 800855a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008562:	d901      	bls.n	8008568 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e01b      	b.n	80085a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	daf2      	bge.n	8008556 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008570:	2300      	movs	r3, #0
 8008572:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	019b      	lsls	r3, r3, #6
 8008578:	f043 0220 	orr.w	r2, r3, #32
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	3301      	adds	r3, #1
 8008584:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800858c:	d901      	bls.n	8008592 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800858e:	2303      	movs	r3, #3
 8008590:	e006      	b.n	80085a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	f003 0320 	and.w	r3, r3, #32
 800859a:	2b20      	cmp	r3, #32
 800859c:	d0f0      	beq.n	8008580 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085b4:	2300      	movs	r3, #0
 80085b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	3301      	adds	r3, #1
 80085bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085c4:	d901      	bls.n	80085ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e018      	b.n	80085fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	daf2      	bge.n	80085b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80085d2:	2300      	movs	r3, #0
 80085d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2210      	movs	r2, #16
 80085da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	3301      	adds	r3, #1
 80085e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085e8:	d901      	bls.n	80085ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e006      	b.n	80085fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	f003 0310 	and.w	r3, r3, #16
 80085f6:	2b10      	cmp	r3, #16
 80085f8:	d0f0      	beq.n	80085dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3714      	adds	r7, #20
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	460b      	mov	r3, r1
 8008612:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	78fb      	ldrb	r3, [r7, #3]
 8008622:	68f9      	ldr	r1, [r7, #12]
 8008624:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008628:	4313      	orrs	r3, r2
 800862a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3714      	adds	r7, #20
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800863a:	b480      	push	{r7}
 800863c:	b087      	sub	sp, #28
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	f003 0306 	and.w	r3, r3, #6
 8008652:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d102      	bne.n	8008660 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800865a:	2300      	movs	r3, #0
 800865c:	75fb      	strb	r3, [r7, #23]
 800865e:	e00a      	b.n	8008676 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2b02      	cmp	r3, #2
 8008664:	d002      	beq.n	800866c <USB_GetDevSpeed+0x32>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2b06      	cmp	r3, #6
 800866a:	d102      	bne.n	8008672 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800866c:	2302      	movs	r3, #2
 800866e:	75fb      	strb	r3, [r7, #23]
 8008670:	e001      	b.n	8008676 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008672:	230f      	movs	r3, #15
 8008674:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008676:	7dfb      	ldrb	r3, [r7, #23]
}
 8008678:	4618      	mov	r0, r3
 800867a:	371c      	adds	r7, #28
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	785b      	ldrb	r3, [r3, #1]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d13a      	bne.n	8008716 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086a6:	69da      	ldr	r2, [r3, #28]
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	f003 030f 	and.w	r3, r3, #15
 80086b0:	2101      	movs	r1, #1
 80086b2:	fa01 f303 	lsl.w	r3, r1, r3
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	68f9      	ldr	r1, [r7, #12]
 80086ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086be:	4313      	orrs	r3, r2
 80086c0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	015a      	lsls	r2, r3, #5
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	4413      	add	r3, r2
 80086ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d155      	bne.n	8008784 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	015a      	lsls	r2, r3, #5
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	4413      	add	r3, r2
 80086e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	791b      	ldrb	r3, [r3, #4]
 80086f2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086f4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	059b      	lsls	r3, r3, #22
 80086fa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086fc:	4313      	orrs	r3, r2
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	0151      	lsls	r1, r2, #5
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	440a      	add	r2, r1
 8008706:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800870a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800870e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008712:	6013      	str	r3, [r2, #0]
 8008714:	e036      	b.n	8008784 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800871c:	69da      	ldr	r2, [r3, #28]
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	f003 030f 	and.w	r3, r3, #15
 8008726:	2101      	movs	r1, #1
 8008728:	fa01 f303 	lsl.w	r3, r1, r3
 800872c:	041b      	lsls	r3, r3, #16
 800872e:	68f9      	ldr	r1, [r7, #12]
 8008730:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008734:	4313      	orrs	r3, r2
 8008736:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	015a      	lsls	r2, r3, #5
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	4413      	add	r3, r2
 8008740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800874a:	2b00      	cmp	r3, #0
 800874c:	d11a      	bne.n	8008784 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	015a      	lsls	r2, r3, #5
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	4413      	add	r3, r2
 8008756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	791b      	ldrb	r3, [r3, #4]
 8008768:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800876a:	430b      	orrs	r3, r1
 800876c:	4313      	orrs	r3, r2
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	0151      	lsls	r1, r2, #5
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	440a      	add	r2, r1
 8008776:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800877a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800877e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008782:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3714      	adds	r7, #20
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
	...

08008794 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	785b      	ldrb	r3, [r3, #1]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d161      	bne.n	8008874 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	015a      	lsls	r2, r3, #5
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	4413      	add	r3, r2
 80087b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80087c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087c6:	d11f      	bne.n	8008808 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	015a      	lsls	r2, r3, #5
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	4413      	add	r3, r2
 80087d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	0151      	lsls	r1, r2, #5
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	440a      	add	r2, r1
 80087de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80087e6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	015a      	lsls	r2, r3, #5
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	4413      	add	r3, r2
 80087f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	0151      	lsls	r1, r2, #5
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	440a      	add	r2, r1
 80087fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008802:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008806:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800880e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	f003 030f 	and.w	r3, r3, #15
 8008818:	2101      	movs	r1, #1
 800881a:	fa01 f303 	lsl.w	r3, r1, r3
 800881e:	b29b      	uxth	r3, r3
 8008820:	43db      	mvns	r3, r3
 8008822:	68f9      	ldr	r1, [r7, #12]
 8008824:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008828:	4013      	ands	r3, r2
 800882a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008832:	69da      	ldr	r2, [r3, #28]
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	f003 030f 	and.w	r3, r3, #15
 800883c:	2101      	movs	r1, #1
 800883e:	fa01 f303 	lsl.w	r3, r1, r3
 8008842:	b29b      	uxth	r3, r3
 8008844:	43db      	mvns	r3, r3
 8008846:	68f9      	ldr	r1, [r7, #12]
 8008848:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800884c:	4013      	ands	r3, r2
 800884e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	4413      	add	r3, r2
 8008858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	0159      	lsls	r1, r3, #5
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	440b      	add	r3, r1
 8008866:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800886a:	4619      	mov	r1, r3
 800886c:	4b35      	ldr	r3, [pc, #212]	@ (8008944 <USB_DeactivateEndpoint+0x1b0>)
 800886e:	4013      	ands	r3, r2
 8008870:	600b      	str	r3, [r1, #0]
 8008872:	e060      	b.n	8008936 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	015a      	lsls	r2, r3, #5
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	4413      	add	r3, r2
 800887c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008886:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800888a:	d11f      	bne.n	80088cc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	015a      	lsls	r2, r3, #5
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4413      	add	r3, r2
 8008894:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68ba      	ldr	r2, [r7, #8]
 800889c:	0151      	lsls	r1, r2, #5
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	440a      	add	r2, r1
 80088a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80088aa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	015a      	lsls	r2, r3, #5
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	4413      	add	r3, r2
 80088b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	68ba      	ldr	r2, [r7, #8]
 80088bc:	0151      	lsls	r1, r2, #5
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	440a      	add	r2, r1
 80088c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80088ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	f003 030f 	and.w	r3, r3, #15
 80088dc:	2101      	movs	r1, #1
 80088de:	fa01 f303 	lsl.w	r3, r1, r3
 80088e2:	041b      	lsls	r3, r3, #16
 80088e4:	43db      	mvns	r3, r3
 80088e6:	68f9      	ldr	r1, [r7, #12]
 80088e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088ec:	4013      	ands	r3, r2
 80088ee:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088f6:	69da      	ldr	r2, [r3, #28]
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	f003 030f 	and.w	r3, r3, #15
 8008900:	2101      	movs	r1, #1
 8008902:	fa01 f303 	lsl.w	r3, r1, r3
 8008906:	041b      	lsls	r3, r3, #16
 8008908:	43db      	mvns	r3, r3
 800890a:	68f9      	ldr	r1, [r7, #12]
 800890c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008910:	4013      	ands	r3, r2
 8008912:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4413      	add	r3, r2
 800891c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	0159      	lsls	r1, r3, #5
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	440b      	add	r3, r1
 800892a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800892e:	4619      	mov	r1, r3
 8008930:	4b05      	ldr	r3, [pc, #20]	@ (8008948 <USB_DeactivateEndpoint+0x1b4>)
 8008932:	4013      	ands	r3, r2
 8008934:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	3714      	adds	r7, #20
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr
 8008944:	ec337800 	.word	0xec337800
 8008948:	eff37800 	.word	0xeff37800

0800894c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b08a      	sub	sp, #40	@ 0x28
 8008950:	af02      	add	r7, sp, #8
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	4613      	mov	r3, r2
 8008958:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	785b      	ldrb	r3, [r3, #1]
 8008968:	2b01      	cmp	r3, #1
 800896a:	f040 817a 	bne.w	8008c62 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d132      	bne.n	80089dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	015a      	lsls	r2, r3, #5
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	4413      	add	r3, r2
 800897e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	69ba      	ldr	r2, [r7, #24]
 8008986:	0151      	lsls	r1, r2, #5
 8008988:	69fa      	ldr	r2, [r7, #28]
 800898a:	440a      	add	r2, r1
 800898c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008990:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008994:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008998:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	015a      	lsls	r2, r3, #5
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	4413      	add	r3, r2
 80089a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	69ba      	ldr	r2, [r7, #24]
 80089aa:	0151      	lsls	r1, r2, #5
 80089ac:	69fa      	ldr	r2, [r7, #28]
 80089ae:	440a      	add	r2, r1
 80089b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80089b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	015a      	lsls	r2, r3, #5
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	4413      	add	r3, r2
 80089c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	69ba      	ldr	r2, [r7, #24]
 80089ca:	0151      	lsls	r1, r2, #5
 80089cc:	69fa      	ldr	r2, [r7, #28]
 80089ce:	440a      	add	r2, r1
 80089d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089d4:	0cdb      	lsrs	r3, r3, #19
 80089d6:	04db      	lsls	r3, r3, #19
 80089d8:	6113      	str	r3, [r2, #16]
 80089da:	e092      	b.n	8008b02 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	015a      	lsls	r2, r3, #5
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	4413      	add	r3, r2
 80089e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	69ba      	ldr	r2, [r7, #24]
 80089ec:	0151      	lsls	r1, r2, #5
 80089ee:	69fa      	ldr	r2, [r7, #28]
 80089f0:	440a      	add	r2, r1
 80089f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089f6:	0cdb      	lsrs	r3, r3, #19
 80089f8:	04db      	lsls	r3, r3, #19
 80089fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	015a      	lsls	r2, r3, #5
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	4413      	add	r3, r2
 8008a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	69ba      	ldr	r2, [r7, #24]
 8008a0c:	0151      	lsls	r1, r2, #5
 8008a0e:	69fa      	ldr	r2, [r7, #28]
 8008a10:	440a      	add	r2, r1
 8008a12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a16:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008a1a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008a1e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d11a      	bne.n	8008a5c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	691a      	ldr	r2, [r3, #16]
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d903      	bls.n	8008a3a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	689a      	ldr	r2, [r3, #8]
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	69ba      	ldr	r2, [r7, #24]
 8008a4a:	0151      	lsls	r1, r2, #5
 8008a4c:	69fa      	ldr	r2, [r7, #28]
 8008a4e:	440a      	add	r2, r1
 8008a50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a58:	6113      	str	r3, [r2, #16]
 8008a5a:	e01b      	b.n	8008a94 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	015a      	lsls	r2, r3, #5
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	4413      	add	r3, r2
 8008a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a68:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	6919      	ldr	r1, [r3, #16]
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	440b      	add	r3, r1
 8008a74:	1e59      	subs	r1, r3, #1
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a7e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008a80:	4ba2      	ldr	r3, [pc, #648]	@ (8008d0c <USB_EPStartXfer+0x3c0>)
 8008a82:	400b      	ands	r3, r1
 8008a84:	69b9      	ldr	r1, [r7, #24]
 8008a86:	0148      	lsls	r0, r1, #5
 8008a88:	69f9      	ldr	r1, [r7, #28]
 8008a8a:	4401      	add	r1, r0
 8008a8c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008a90:	4313      	orrs	r3, r2
 8008a92:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	015a      	lsls	r2, r3, #5
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aa0:	691a      	ldr	r2, [r3, #16]
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008aaa:	69b9      	ldr	r1, [r7, #24]
 8008aac:	0148      	lsls	r0, r1, #5
 8008aae:	69f9      	ldr	r1, [r7, #28]
 8008ab0:	4401      	add	r1, r0
 8008ab2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	791b      	ldrb	r3, [r3, #4]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d11f      	bne.n	8008b02 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	015a      	lsls	r2, r3, #5
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	4413      	add	r3, r2
 8008aca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	69ba      	ldr	r2, [r7, #24]
 8008ad2:	0151      	lsls	r1, r2, #5
 8008ad4:	69fa      	ldr	r2, [r7, #28]
 8008ad6:	440a      	add	r2, r1
 8008ad8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008adc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008ae0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	015a      	lsls	r2, r3, #5
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	4413      	add	r3, r2
 8008aea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	69ba      	ldr	r2, [r7, #24]
 8008af2:	0151      	lsls	r1, r2, #5
 8008af4:	69fa      	ldr	r2, [r7, #28]
 8008af6:	440a      	add	r2, r1
 8008af8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008afc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008b00:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008b02:	79fb      	ldrb	r3, [r7, #7]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d14b      	bne.n	8008ba0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	69db      	ldr	r3, [r3, #28]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d009      	beq.n	8008b24 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	015a      	lsls	r2, r3, #5
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	4413      	add	r3, r2
 8008b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	69db      	ldr	r3, [r3, #28]
 8008b22:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	791b      	ldrb	r3, [r3, #4]
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d128      	bne.n	8008b7e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d110      	bne.n	8008b5e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	015a      	lsls	r2, r3, #5
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	4413      	add	r3, r2
 8008b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	69ba      	ldr	r2, [r7, #24]
 8008b4c:	0151      	lsls	r1, r2, #5
 8008b4e:	69fa      	ldr	r2, [r7, #28]
 8008b50:	440a      	add	r2, r1
 8008b52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b56:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008b5a:	6013      	str	r3, [r2, #0]
 8008b5c:	e00f      	b.n	8008b7e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	015a      	lsls	r2, r3, #5
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	4413      	add	r3, r2
 8008b66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	69ba      	ldr	r2, [r7, #24]
 8008b6e:	0151      	lsls	r1, r2, #5
 8008b70:	69fa      	ldr	r2, [r7, #28]
 8008b72:	440a      	add	r2, r1
 8008b74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b7c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	015a      	lsls	r2, r3, #5
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	4413      	add	r3, r2
 8008b86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	69ba      	ldr	r2, [r7, #24]
 8008b8e:	0151      	lsls	r1, r2, #5
 8008b90:	69fa      	ldr	r2, [r7, #28]
 8008b92:	440a      	add	r2, r1
 8008b94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b98:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008b9c:	6013      	str	r3, [r2, #0]
 8008b9e:	e165      	b.n	8008e6c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	015a      	lsls	r2, r3, #5
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	69ba      	ldr	r2, [r7, #24]
 8008bb0:	0151      	lsls	r1, r2, #5
 8008bb2:	69fa      	ldr	r2, [r7, #28]
 8008bb4:	440a      	add	r2, r1
 8008bb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008bbe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	791b      	ldrb	r3, [r3, #4]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d015      	beq.n	8008bf4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f000 814d 	beq.w	8008e6c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	f003 030f 	and.w	r3, r3, #15
 8008be2:	2101      	movs	r1, #1
 8008be4:	fa01 f303 	lsl.w	r3, r1, r3
 8008be8:	69f9      	ldr	r1, [r7, #28]
 8008bea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	634b      	str	r3, [r1, #52]	@ 0x34
 8008bf2:	e13b      	b.n	8008e6c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d110      	bne.n	8008c26 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	015a      	lsls	r2, r3, #5
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	69ba      	ldr	r2, [r7, #24]
 8008c14:	0151      	lsls	r1, r2, #5
 8008c16:	69fa      	ldr	r2, [r7, #28]
 8008c18:	440a      	add	r2, r1
 8008c1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c1e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008c22:	6013      	str	r3, [r2, #0]
 8008c24:	e00f      	b.n	8008c46 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	015a      	lsls	r2, r3, #5
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	69ba      	ldr	r2, [r7, #24]
 8008c36:	0151      	lsls	r1, r2, #5
 8008c38:	69fa      	ldr	r2, [r7, #28]
 8008c3a:	440a      	add	r2, r1
 8008c3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c44:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	68d9      	ldr	r1, [r3, #12]
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	781a      	ldrb	r2, [r3, #0]
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	b298      	uxth	r0, r3
 8008c54:	79fb      	ldrb	r3, [r7, #7]
 8008c56:	9300      	str	r3, [sp, #0]
 8008c58:	4603      	mov	r3, r0
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f000 f9b8 	bl	8008fd0 <USB_WritePacket>
 8008c60:	e104      	b.n	8008e6c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	015a      	lsls	r2, r3, #5
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	4413      	add	r3, r2
 8008c6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c6e:	691b      	ldr	r3, [r3, #16]
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	0151      	lsls	r1, r2, #5
 8008c74:	69fa      	ldr	r2, [r7, #28]
 8008c76:	440a      	add	r2, r1
 8008c78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c7c:	0cdb      	lsrs	r3, r3, #19
 8008c7e:	04db      	lsls	r3, r3, #19
 8008c80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	015a      	lsls	r2, r3, #5
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	4413      	add	r3, r2
 8008c8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	69ba      	ldr	r2, [r7, #24]
 8008c92:	0151      	lsls	r1, r2, #5
 8008c94:	69fa      	ldr	r2, [r7, #28]
 8008c96:	440a      	add	r2, r1
 8008c98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c9c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008ca0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008ca4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d131      	bne.n	8008d10 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d003      	beq.n	8008cbc <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	689a      	ldr	r2, [r3, #8]
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	689a      	ldr	r2, [r3, #8]
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	015a      	lsls	r2, r3, #5
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	4413      	add	r3, r2
 8008ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cd0:	691a      	ldr	r2, [r3, #16]
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cda:	69b9      	ldr	r1, [r7, #24]
 8008cdc:	0148      	lsls	r0, r1, #5
 8008cde:	69f9      	ldr	r1, [r7, #28]
 8008ce0:	4401      	add	r1, r0
 8008ce2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	015a      	lsls	r2, r3, #5
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cf6:	691b      	ldr	r3, [r3, #16]
 8008cf8:	69ba      	ldr	r2, [r7, #24]
 8008cfa:	0151      	lsls	r1, r2, #5
 8008cfc:	69fa      	ldr	r2, [r7, #28]
 8008cfe:	440a      	add	r2, r1
 8008d00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d08:	6113      	str	r3, [r2, #16]
 8008d0a:	e061      	b.n	8008dd0 <USB_EPStartXfer+0x484>
 8008d0c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d123      	bne.n	8008d60 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d24:	691a      	ldr	r2, [r3, #16]
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d2e:	69b9      	ldr	r1, [r7, #24]
 8008d30:	0148      	lsls	r0, r1, #5
 8008d32:	69f9      	ldr	r1, [r7, #28]
 8008d34:	4401      	add	r1, r0
 8008d36:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	015a      	lsls	r2, r3, #5
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	4413      	add	r3, r2
 8008d46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d4a:	691b      	ldr	r3, [r3, #16]
 8008d4c:	69ba      	ldr	r2, [r7, #24]
 8008d4e:	0151      	lsls	r1, r2, #5
 8008d50:	69fa      	ldr	r2, [r7, #28]
 8008d52:	440a      	add	r2, r1
 8008d54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d58:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d5c:	6113      	str	r3, [r2, #16]
 8008d5e:	e037      	b.n	8008dd0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	691a      	ldr	r2, [r3, #16]
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	4413      	add	r3, r2
 8008d6a:	1e5a      	subs	r2, r3, #1
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d74:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	8afa      	ldrh	r2, [r7, #22]
 8008d7c:	fb03 f202 	mul.w	r2, r3, r2
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	015a      	lsls	r2, r3, #5
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d90:	691a      	ldr	r2, [r3, #16]
 8008d92:	8afb      	ldrh	r3, [r7, #22]
 8008d94:	04d9      	lsls	r1, r3, #19
 8008d96:	4b38      	ldr	r3, [pc, #224]	@ (8008e78 <USB_EPStartXfer+0x52c>)
 8008d98:	400b      	ands	r3, r1
 8008d9a:	69b9      	ldr	r1, [r7, #24]
 8008d9c:	0148      	lsls	r0, r1, #5
 8008d9e:	69f9      	ldr	r1, [r7, #28]
 8008da0:	4401      	add	r1, r0
 8008da2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008da6:	4313      	orrs	r3, r2
 8008da8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	015a      	lsls	r2, r3, #5
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	4413      	add	r3, r2
 8008db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008db6:	691a      	ldr	r2, [r3, #16]
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	6a1b      	ldr	r3, [r3, #32]
 8008dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dc0:	69b9      	ldr	r1, [r7, #24]
 8008dc2:	0148      	lsls	r0, r1, #5
 8008dc4:	69f9      	ldr	r1, [r7, #28]
 8008dc6:	4401      	add	r1, r0
 8008dc8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008dd0:	79fb      	ldrb	r3, [r7, #7]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d10d      	bne.n	8008df2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d009      	beq.n	8008df2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	68d9      	ldr	r1, [r3, #12]
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	015a      	lsls	r2, r3, #5
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	4413      	add	r3, r2
 8008dea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dee:	460a      	mov	r2, r1
 8008df0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	791b      	ldrb	r3, [r3, #4]
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d128      	bne.n	8008e4c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d110      	bne.n	8008e2c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	015a      	lsls	r2, r3, #5
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	4413      	add	r3, r2
 8008e12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	69ba      	ldr	r2, [r7, #24]
 8008e1a:	0151      	lsls	r1, r2, #5
 8008e1c:	69fa      	ldr	r2, [r7, #28]
 8008e1e:	440a      	add	r2, r1
 8008e20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e24:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008e28:	6013      	str	r3, [r2, #0]
 8008e2a:	e00f      	b.n	8008e4c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	015a      	lsls	r2, r3, #5
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	4413      	add	r3, r2
 8008e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	69ba      	ldr	r2, [r7, #24]
 8008e3c:	0151      	lsls	r1, r2, #5
 8008e3e:	69fa      	ldr	r2, [r7, #28]
 8008e40:	440a      	add	r2, r1
 8008e42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e4a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	015a      	lsls	r2, r3, #5
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	4413      	add	r3, r2
 8008e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	69ba      	ldr	r2, [r7, #24]
 8008e5c:	0151      	lsls	r1, r2, #5
 8008e5e:	69fa      	ldr	r2, [r7, #28]
 8008e60:	440a      	add	r2, r1
 8008e62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e66:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008e6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3720      	adds	r7, #32
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	1ff80000 	.word	0x1ff80000

08008e7c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b087      	sub	sp, #28
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e86:	2300      	movs	r3, #0
 8008e88:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	785b      	ldrb	r3, [r3, #1]
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d14a      	bne.n	8008f30 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	015a      	lsls	r2, r3, #5
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008eae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008eb2:	f040 8086 	bne.w	8008fc2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	015a      	lsls	r2, r3, #5
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	683a      	ldr	r2, [r7, #0]
 8008ec8:	7812      	ldrb	r2, [r2, #0]
 8008eca:	0151      	lsls	r1, r2, #5
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	440a      	add	r2, r1
 8008ed0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ed4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008ed8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	683a      	ldr	r2, [r7, #0]
 8008eec:	7812      	ldrb	r2, [r2, #0]
 8008eee:	0151      	lsls	r1, r2, #5
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	440a      	add	r2, r1
 8008ef4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ef8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008efc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	3301      	adds	r3, #1
 8008f02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d902      	bls.n	8008f14 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	75fb      	strb	r3, [r7, #23]
          break;
 8008f12:	e056      	b.n	8008fc2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	015a      	lsls	r2, r3, #5
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f2c:	d0e7      	beq.n	8008efe <USB_EPStopXfer+0x82>
 8008f2e:	e048      	b.n	8008fc2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	015a      	lsls	r2, r3, #5
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	4413      	add	r3, r2
 8008f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f48:	d13b      	bne.n	8008fc2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	015a      	lsls	r2, r3, #5
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	4413      	add	r3, r2
 8008f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	7812      	ldrb	r2, [r2, #0]
 8008f5e:	0151      	lsls	r1, r2, #5
 8008f60:	693a      	ldr	r2, [r7, #16]
 8008f62:	440a      	add	r2, r1
 8008f64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008f6c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	015a      	lsls	r2, r3, #5
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	4413      	add	r3, r2
 8008f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	683a      	ldr	r2, [r7, #0]
 8008f80:	7812      	ldrb	r2, [r2, #0]
 8008f82:	0151      	lsls	r1, r2, #5
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	440a      	add	r2, r1
 8008f88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	3301      	adds	r3, #1
 8008f96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d902      	bls.n	8008fa8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	75fb      	strb	r3, [r7, #23]
          break;
 8008fa6:	e00c      	b.n	8008fc2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	015a      	lsls	r2, r3, #5
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fc0:	d0e7      	beq.n	8008f92 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	371c      	adds	r7, #28
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b089      	sub	sp, #36	@ 0x24
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	4611      	mov	r1, r2
 8008fdc:	461a      	mov	r2, r3
 8008fde:	460b      	mov	r3, r1
 8008fe0:	71fb      	strb	r3, [r7, #7]
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008fee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d123      	bne.n	800903e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008ff6:	88bb      	ldrh	r3, [r7, #4]
 8008ff8:	3303      	adds	r3, #3
 8008ffa:	089b      	lsrs	r3, r3, #2
 8008ffc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008ffe:	2300      	movs	r3, #0
 8009000:	61bb      	str	r3, [r7, #24]
 8009002:	e018      	b.n	8009036 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009004:	79fb      	ldrb	r3, [r7, #7]
 8009006:	031a      	lsls	r2, r3, #12
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	4413      	add	r3, r2
 800900c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009010:	461a      	mov	r2, r3
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	3301      	adds	r3, #1
 800901c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	3301      	adds	r3, #1
 8009022:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	3301      	adds	r3, #1
 8009028:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	3301      	adds	r3, #1
 800902e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	3301      	adds	r3, #1
 8009034:	61bb      	str	r3, [r7, #24]
 8009036:	69ba      	ldr	r2, [r7, #24]
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	429a      	cmp	r2, r3
 800903c:	d3e2      	bcc.n	8009004 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3724      	adds	r7, #36	@ 0x24
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800904c:	b480      	push	{r7}
 800904e:	b08b      	sub	sp, #44	@ 0x2c
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	4613      	mov	r3, r2
 8009058:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009062:	88fb      	ldrh	r3, [r7, #6]
 8009064:	089b      	lsrs	r3, r3, #2
 8009066:	b29b      	uxth	r3, r3
 8009068:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800906a:	88fb      	ldrh	r3, [r7, #6]
 800906c:	f003 0303 	and.w	r3, r3, #3
 8009070:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009072:	2300      	movs	r3, #0
 8009074:	623b      	str	r3, [r7, #32]
 8009076:	e014      	b.n	80090a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009082:	601a      	str	r2, [r3, #0]
    pDest++;
 8009084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009086:	3301      	adds	r3, #1
 8009088:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800908a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908c:	3301      	adds	r3, #1
 800908e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009092:	3301      	adds	r3, #1
 8009094:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009098:	3301      	adds	r3, #1
 800909a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800909c:	6a3b      	ldr	r3, [r7, #32]
 800909e:	3301      	adds	r3, #1
 80090a0:	623b      	str	r3, [r7, #32]
 80090a2:	6a3a      	ldr	r2, [r7, #32]
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d3e6      	bcc.n	8009078 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80090aa:	8bfb      	ldrh	r3, [r7, #30]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d01e      	beq.n	80090ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80090b0:	2300      	movs	r3, #0
 80090b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80090ba:	461a      	mov	r2, r3
 80090bc:	f107 0310 	add.w	r3, r7, #16
 80090c0:	6812      	ldr	r2, [r2, #0]
 80090c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80090c4:	693a      	ldr	r2, [r7, #16]
 80090c6:	6a3b      	ldr	r3, [r7, #32]
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	00db      	lsls	r3, r3, #3
 80090cc:	fa22 f303 	lsr.w	r3, r2, r3
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d4:	701a      	strb	r2, [r3, #0]
      i++;
 80090d6:	6a3b      	ldr	r3, [r7, #32]
 80090d8:	3301      	adds	r3, #1
 80090da:	623b      	str	r3, [r7, #32]
      pDest++;
 80090dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090de:	3301      	adds	r3, #1
 80090e0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80090e2:	8bfb      	ldrh	r3, [r7, #30]
 80090e4:	3b01      	subs	r3, #1
 80090e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80090e8:	8bfb      	ldrh	r3, [r7, #30]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1ea      	bne.n	80090c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80090ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	372c      	adds	r7, #44	@ 0x2c
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	785b      	ldrb	r3, [r3, #1]
 8009114:	2b01      	cmp	r3, #1
 8009116:	d12c      	bne.n	8009172 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	015a      	lsls	r2, r3, #5
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	4413      	add	r3, r2
 8009120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	db12      	blt.n	8009150 <USB_EPSetStall+0x54>
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00f      	beq.n	8009150 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	015a      	lsls	r2, r3, #5
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	4413      	add	r3, r2
 8009138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	0151      	lsls	r1, r2, #5
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	440a      	add	r2, r1
 8009146:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800914a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800914e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	015a      	lsls	r2, r3, #5
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	4413      	add	r3, r2
 8009158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	0151      	lsls	r1, r2, #5
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	440a      	add	r2, r1
 8009166:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800916a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800916e:	6013      	str	r3, [r2, #0]
 8009170:	e02b      	b.n	80091ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	015a      	lsls	r2, r3, #5
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	4413      	add	r3, r2
 800917a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	db12      	blt.n	80091aa <USB_EPSetStall+0xae>
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00f      	beq.n	80091aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	015a      	lsls	r2, r3, #5
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	4413      	add	r3, r2
 8009192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	0151      	lsls	r1, r2, #5
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	440a      	add	r2, r1
 80091a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80091a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	015a      	lsls	r2, r3, #5
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	4413      	add	r3, r2
 80091b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68ba      	ldr	r2, [r7, #8]
 80091ba:	0151      	lsls	r1, r2, #5
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	440a      	add	r2, r1
 80091c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80091c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3714      	adds	r7, #20
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80091d8:	b480      	push	{r7}
 80091da:	b085      	sub	sp, #20
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	785b      	ldrb	r3, [r3, #1]
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d128      	bne.n	8009246 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	015a      	lsls	r2, r3, #5
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	4413      	add	r3, r2
 80091fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	0151      	lsls	r1, r2, #5
 8009206:	68fa      	ldr	r2, [r7, #12]
 8009208:	440a      	add	r2, r1
 800920a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800920e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009212:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	791b      	ldrb	r3, [r3, #4]
 8009218:	2b03      	cmp	r3, #3
 800921a:	d003      	beq.n	8009224 <USB_EPClearStall+0x4c>
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	791b      	ldrb	r3, [r3, #4]
 8009220:	2b02      	cmp	r3, #2
 8009222:	d138      	bne.n	8009296 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	015a      	lsls	r2, r3, #5
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	4413      	add	r3, r2
 800922c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	68ba      	ldr	r2, [r7, #8]
 8009234:	0151      	lsls	r1, r2, #5
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	440a      	add	r2, r1
 800923a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800923e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009242:	6013      	str	r3, [r2, #0]
 8009244:	e027      	b.n	8009296 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	015a      	lsls	r2, r3, #5
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	4413      	add	r3, r2
 800924e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	68ba      	ldr	r2, [r7, #8]
 8009256:	0151      	lsls	r1, r2, #5
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	440a      	add	r2, r1
 800925c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009260:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009264:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	791b      	ldrb	r3, [r3, #4]
 800926a:	2b03      	cmp	r3, #3
 800926c:	d003      	beq.n	8009276 <USB_EPClearStall+0x9e>
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	791b      	ldrb	r3, [r3, #4]
 8009272:	2b02      	cmp	r3, #2
 8009274:	d10f      	bne.n	8009296 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	015a      	lsls	r2, r3, #5
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	4413      	add	r3, r2
 800927e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	0151      	lsls	r1, r2, #5
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	440a      	add	r2, r1
 800928c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009294:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3714      	adds	r7, #20
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092c2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80092c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	78fb      	ldrb	r3, [r7, #3]
 80092d2:	011b      	lsls	r3, r3, #4
 80092d4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80092d8:	68f9      	ldr	r1, [r7, #12]
 80092da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80092de:	4313      	orrs	r3, r2
 80092e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3714      	adds	r7, #20
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800930a:	f023 0303 	bic.w	r3, r3, #3
 800930e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800931e:	f023 0302 	bic.w	r3, r3, #2
 8009322:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3714      	adds	r7, #20
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr

08009332 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009332:	b480      	push	{r7}
 8009334:	b085      	sub	sp, #20
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800934c:	f023 0303 	bic.w	r3, r3, #3
 8009350:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	68fa      	ldr	r2, [r7, #12]
 800935c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009360:	f043 0302 	orr.w	r3, r3, #2
 8009364:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3714      	adds	r7, #20
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009374:	b480      	push	{r7}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	695b      	ldr	r3, [r3, #20]
 8009380:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	68fa      	ldr	r2, [r7, #12]
 8009388:	4013      	ands	r3, r2
 800938a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800938c:	68fb      	ldr	r3, [r7, #12]
}
 800938e:	4618      	mov	r0, r3
 8009390:	3714      	adds	r7, #20
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr

0800939a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800939a:	b480      	push	{r7}
 800939c:	b085      	sub	sp, #20
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093ac:	699b      	ldr	r3, [r3, #24]
 80093ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093b6:	69db      	ldr	r3, [r3, #28]
 80093b8:	68ba      	ldr	r2, [r7, #8]
 80093ba:	4013      	ands	r3, r2
 80093bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	0c1b      	lsrs	r3, r3, #16
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3714      	adds	r7, #20
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr

080093ce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80093ce:	b480      	push	{r7}
 80093d0:	b085      	sub	sp, #20
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093e0:	699b      	ldr	r3, [r3, #24]
 80093e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093ea:	69db      	ldr	r3, [r3, #28]
 80093ec:	68ba      	ldr	r2, [r7, #8]
 80093ee:	4013      	ands	r3, r2
 80093f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	b29b      	uxth	r3, r3
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3714      	adds	r7, #20
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr

08009402 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009402:	b480      	push	{r7}
 8009404:	b085      	sub	sp, #20
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
 800940a:	460b      	mov	r3, r1
 800940c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009412:	78fb      	ldrb	r3, [r7, #3]
 8009414:	015a      	lsls	r2, r3, #5
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	4413      	add	r3, r2
 800941a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009428:	695b      	ldr	r3, [r3, #20]
 800942a:	68ba      	ldr	r2, [r7, #8]
 800942c:	4013      	ands	r3, r2
 800942e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009430:	68bb      	ldr	r3, [r7, #8]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3714      	adds	r7, #20
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800943e:	b480      	push	{r7}
 8009440:	b087      	sub	sp, #28
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	460b      	mov	r3, r1
 8009448:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800945e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009460:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009462:	78fb      	ldrb	r3, [r7, #3]
 8009464:	f003 030f 	and.w	r3, r3, #15
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	fa22 f303 	lsr.w	r3, r2, r3
 800946e:	01db      	lsls	r3, r3, #7
 8009470:	b2db      	uxtb	r3, r3
 8009472:	693a      	ldr	r2, [r7, #16]
 8009474:	4313      	orrs	r3, r2
 8009476:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009478:	78fb      	ldrb	r3, [r7, #3]
 800947a:	015a      	lsls	r2, r3, #5
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	4413      	add	r3, r2
 8009480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	693a      	ldr	r2, [r7, #16]
 8009488:	4013      	ands	r3, r2
 800948a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800948c:	68bb      	ldr	r3, [r7, #8]
}
 800948e:	4618      	mov	r0, r3
 8009490:	371c      	adds	r7, #28
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr

0800949a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800949a:	b480      	push	{r7}
 800949c:	b083      	sub	sp, #12
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	695b      	ldr	r3, [r3, #20]
 80094a6:	f003 0301 	and.w	r3, r3, #1
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	370c      	adds	r7, #12
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr

080094b6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80094b6:	b480      	push	{r7}
 80094b8:	b085      	sub	sp, #20
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094d0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80094d4:	f023 0307 	bic.w	r3, r3, #7
 80094d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80094e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3714      	adds	r7, #20
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b087      	sub	sp, #28
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	460b      	mov	r3, r1
 8009506:	607a      	str	r2, [r7, #4]
 8009508:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	333c      	adds	r3, #60	@ 0x3c
 8009512:	3304      	adds	r3, #4
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	4a26      	ldr	r2, [pc, #152]	@ (80095b4 <USB_EP0_OutStart+0xb8>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d90a      	bls.n	8009536 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800952c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009530:	d101      	bne.n	8009536 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	e037      	b.n	80095a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800953c:	461a      	mov	r2, r3
 800953e:	2300      	movs	r3, #0
 8009540:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	697a      	ldr	r2, [r7, #20]
 800954c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009550:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009554:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	697a      	ldr	r2, [r7, #20]
 8009560:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009564:	f043 0318 	orr.w	r3, r3, #24
 8009568:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	697a      	ldr	r2, [r7, #20]
 8009574:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009578:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800957c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800957e:	7afb      	ldrb	r3, [r7, #11]
 8009580:	2b01      	cmp	r3, #1
 8009582:	d10f      	bne.n	80095a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800958a:	461a      	mov	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	697a      	ldr	r2, [r7, #20]
 800959a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800959e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80095a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	371c      	adds	r7, #28
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	4f54300a 	.word	0x4f54300a

080095b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095c0:	2300      	movs	r3, #0
 80095c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	3301      	adds	r3, #1
 80095c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095d0:	d901      	bls.n	80095d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80095d2:	2303      	movs	r3, #3
 80095d4:	e01b      	b.n	800960e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	daf2      	bge.n	80095c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80095de:	2300      	movs	r3, #0
 80095e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	691b      	ldr	r3, [r3, #16]
 80095e6:	f043 0201 	orr.w	r2, r3, #1
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	3301      	adds	r3, #1
 80095f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095fa:	d901      	bls.n	8009600 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80095fc:	2303      	movs	r3, #3
 80095fe:	e006      	b.n	800960e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	f003 0301 	and.w	r3, r3, #1
 8009608:	2b01      	cmp	r3, #1
 800960a:	d0f0      	beq.n	80095ee <USB_CoreReset+0x36>

  return HAL_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3714      	adds	r7, #20
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
	...

0800961c <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	460b      	mov	r3, r1
 8009626:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8009628:	2024      	movs	r0, #36	@ 0x24
 800962a:	f002 faab 	bl	800bb84 <USBD_static_malloc>
 800962e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d109      	bne.n	800964a <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	32b0      	adds	r2, #176	@ 0xb0
 8009640:	2100      	movs	r1, #0
 8009642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009646:	2302      	movs	r3, #2
 8009648:	e08b      	b.n	8009762 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	32b0      	adds	r2, #176	@ 0xb0
 8009654:	68f9      	ldr	r1, [r7, #12]
 8009656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	32b0      	adds	r2, #176	@ 0xb0
 8009664:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	7c1b      	ldrb	r3, [r3, #16]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d11b      	bne.n	80096ae <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8009676:	4b3d      	ldr	r3, [pc, #244]	@ (800976c <USBD_CUSTOM_HID_Init+0x150>)
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	f003 020f 	and.w	r2, r3, #15
 800967e:	6879      	ldr	r1, [r7, #4]
 8009680:	4613      	mov	r3, r2
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	4413      	add	r3, r2
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	440b      	add	r3, r1
 800968a:	3326      	adds	r3, #38	@ 0x26
 800968c:	2205      	movs	r2, #5
 800968e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8009690:	4b37      	ldr	r3, [pc, #220]	@ (8009770 <USBD_CUSTOM_HID_Init+0x154>)
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	f003 020f 	and.w	r2, r3, #15
 8009698:	6879      	ldr	r1, [r7, #4]
 800969a:	4613      	mov	r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	4413      	add	r3, r2
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	440b      	add	r3, r1
 80096a4:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80096a8:	2205      	movs	r2, #5
 80096aa:	801a      	strh	r2, [r3, #0]
 80096ac:	e01a      	b.n	80096e4 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80096ae:	4b2f      	ldr	r3, [pc, #188]	@ (800976c <USBD_CUSTOM_HID_Init+0x150>)
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	f003 020f 	and.w	r2, r3, #15
 80096b6:	6879      	ldr	r1, [r7, #4]
 80096b8:	4613      	mov	r3, r2
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	4413      	add	r3, r2
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	440b      	add	r3, r1
 80096c2:	3326      	adds	r3, #38	@ 0x26
 80096c4:	2205      	movs	r2, #5
 80096c6:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80096c8:	4b29      	ldr	r3, [pc, #164]	@ (8009770 <USBD_CUSTOM_HID_Init+0x154>)
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	f003 020f 	and.w	r2, r3, #15
 80096d0:	6879      	ldr	r1, [r7, #4]
 80096d2:	4613      	mov	r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	440b      	add	r3, r1
 80096dc:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80096e0:	2205      	movs	r2, #5
 80096e2:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 80096e4:	4b21      	ldr	r3, [pc, #132]	@ (800976c <USBD_CUSTOM_HID_Init+0x150>)
 80096e6:	7819      	ldrb	r1, [r3, #0]
 80096e8:	2304      	movs	r3, #4
 80096ea:	2203      	movs	r2, #3
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f002 f938 	bl	800b962 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 80096f2:	4b1e      	ldr	r3, [pc, #120]	@ (800976c <USBD_CUSTOM_HID_Init+0x150>)
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	f003 020f 	and.w	r2, r3, #15
 80096fa:	6879      	ldr	r1, [r7, #4]
 80096fc:	4613      	mov	r3, r2
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	4413      	add	r3, r2
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	440b      	add	r3, r1
 8009706:	3324      	adds	r3, #36	@ 0x24
 8009708:	2201      	movs	r2, #1
 800970a:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 800970c:	4b18      	ldr	r3, [pc, #96]	@ (8009770 <USBD_CUSTOM_HID_Init+0x154>)
 800970e:	7819      	ldrb	r1, [r3, #0]
 8009710:	2309      	movs	r3, #9
 8009712:	2203      	movs	r2, #3
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f002 f924 	bl	800b962 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800971a:	4b15      	ldr	r3, [pc, #84]	@ (8009770 <USBD_CUSTOM_HID_Init+0x154>)
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	f003 020f 	and.w	r2, r3, #15
 8009722:	6879      	ldr	r1, [r7, #4]
 8009724:	4613      	mov	r3, r2
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	4413      	add	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	440b      	add	r3, r1
 800972e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009732:	2201      	movs	r2, #1
 8009734:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2200      	movs	r2, #0
 800973a:	f883 2020 	strb.w	r2, [r3, #32]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	33b0      	adds	r3, #176	@ 0xb0
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4413      	add	r3, r2
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8009752:	4b07      	ldr	r3, [pc, #28]	@ (8009770 <USBD_CUSTOM_HID_Init+0x154>)
 8009754:	7819      	ldrb	r1, [r3, #0]
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	2310      	movs	r3, #16
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f002 f9f0 	bl	800bb40 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	20000086 	.word	0x20000086
 8009770:	20000087 	.word	0x20000087

08009774 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	460b      	mov	r3, r1
 800977e:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8009780:	4b37      	ldr	r3, [pc, #220]	@ (8009860 <USBD_CUSTOM_HID_DeInit+0xec>)
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	4619      	mov	r1, r3
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f002 f911 	bl	800b9ae <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 800978c:	4b34      	ldr	r3, [pc, #208]	@ (8009860 <USBD_CUSTOM_HID_DeInit+0xec>)
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	f003 020f 	and.w	r2, r3, #15
 8009794:	6879      	ldr	r1, [r7, #4]
 8009796:	4613      	mov	r3, r2
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	4413      	add	r3, r2
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	440b      	add	r3, r1
 80097a0:	3324      	adds	r3, #36	@ 0x24
 80097a2:	2200      	movs	r2, #0
 80097a4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80097a6:	4b2e      	ldr	r3, [pc, #184]	@ (8009860 <USBD_CUSTOM_HID_DeInit+0xec>)
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	f003 020f 	and.w	r2, r3, #15
 80097ae:	6879      	ldr	r1, [r7, #4]
 80097b0:	4613      	mov	r3, r2
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	4413      	add	r3, r2
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	440b      	add	r3, r1
 80097ba:	3326      	adds	r3, #38	@ 0x26
 80097bc:	2200      	movs	r2, #0
 80097be:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 80097c0:	4b28      	ldr	r3, [pc, #160]	@ (8009864 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	4619      	mov	r1, r3
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f002 f8f1 	bl	800b9ae <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 80097cc:	4b25      	ldr	r3, [pc, #148]	@ (8009864 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	f003 020f 	and.w	r2, r3, #15
 80097d4:	6879      	ldr	r1, [r7, #4]
 80097d6:	4613      	mov	r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	4413      	add	r3, r2
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	440b      	add	r3, r1
 80097e0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80097e4:	2200      	movs	r2, #0
 80097e6:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 80097e8:	4b1e      	ldr	r3, [pc, #120]	@ (8009864 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	f003 020f 	and.w	r2, r3, #15
 80097f0:	6879      	ldr	r1, [r7, #4]
 80097f2:	4613      	mov	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4413      	add	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	440b      	add	r3, r1
 80097fc:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8009800:	2200      	movs	r2, #0
 8009802:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	32b0      	adds	r2, #176	@ 0xb0
 800980e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d01f      	beq.n	8009856 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	33b0      	adds	r3, #176	@ 0xb0
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	4413      	add	r3, r2
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	32b0      	adds	r2, #176	@ 0xb0
 8009834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009838:	4618      	mov	r0, r3
 800983a:	f002 f9b1 	bl	800bba0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	32b0      	adds	r2, #176	@ 0xb0
 8009848:	2100      	movs	r1, #0
 800984a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	20000086 	.word	0x20000086
 8009864:	20000087 	.word	0x20000087

08009868 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b088      	sub	sp, #32
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	32b0      	adds	r2, #176	@ 0xb0
 800987c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009880:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8009882:	2300      	movs	r3, #0
 8009884:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8009886:	2300      	movs	r3, #0
 8009888:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800988a:	2300      	movs	r3, #0
 800988c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800988e:	2300      	movs	r3, #0
 8009890:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d101      	bne.n	800989c <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8009898:	2303      	movs	r3, #3
 800989a:	e0f8      	b.n	8009a8e <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d056      	beq.n	8009956 <USBD_CUSTOM_HID_Setup+0xee>
 80098a8:	2b20      	cmp	r3, #32
 80098aa:	f040 80e8 	bne.w	8009a7e <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	785b      	ldrb	r3, [r3, #1]
 80098b2:	3b02      	subs	r3, #2
 80098b4:	2b09      	cmp	r3, #9
 80098b6:	d846      	bhi.n	8009946 <USBD_CUSTOM_HID_Setup+0xde>
 80098b8:	a201      	add	r2, pc, #4	@ (adr r2, 80098c0 <USBD_CUSTOM_HID_Setup+0x58>)
 80098ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098be:	bf00      	nop
 80098c0:	08009919 	.word	0x08009919
 80098c4:	080098f7 	.word	0x080098f7
 80098c8:	08009947 	.word	0x08009947
 80098cc:	08009947 	.word	0x08009947
 80098d0:	08009947 	.word	0x08009947
 80098d4:	08009947 	.word	0x08009947
 80098d8:	08009947 	.word	0x08009947
 80098dc:	08009929 	.word	0x08009929
 80098e0:	08009907 	.word	0x08009907
 80098e4:	080098e9 	.word	0x080098e9
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	885b      	ldrh	r3, [r3, #2]
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	461a      	mov	r2, r3
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	611a      	str	r2, [r3, #16]
          break;
 80098f4:	e02e      	b.n	8009954 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	3310      	adds	r3, #16
 80098fa:	2201      	movs	r2, #1
 80098fc:	4619      	mov	r1, r3
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f001 fc96 	bl	800b230 <USBD_CtlSendData>
          break;
 8009904:	e026      	b.n	8009954 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	885b      	ldrh	r3, [r3, #2]
 800990a:	0a1b      	lsrs	r3, r3, #8
 800990c:	b29b      	uxth	r3, r3
 800990e:	b2db      	uxtb	r3, r3
 8009910:	461a      	mov	r2, r3
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	615a      	str	r2, [r3, #20]
          break;
 8009916:	e01d      	b.n	8009954 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	3314      	adds	r3, #20
 800991c:	2201      	movs	r2, #1
 800991e:	4619      	mov	r1, r3
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f001 fc85 	bl	800b230 <USBD_CtlSendData>
          break;
 8009926:	e015      	b.n	8009954 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	2201      	movs	r2, #1
 800992c:	61da      	str	r2, [r3, #28]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800992e:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	88db      	ldrh	r3, [r3, #6]
 8009934:	2b10      	cmp	r3, #16
 8009936:	bf28      	it	cs
 8009938:	2310      	movcs	r3, #16
 800993a:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800993c:	461a      	mov	r2, r3
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f001 fca2 	bl	800b288 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8009944:	e006      	b.n	8009954 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8009946:	6839      	ldr	r1, [r7, #0]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f001 fc00 	bl	800b14e <USBD_CtlError>
          ret = USBD_FAIL;
 800994e:	2303      	movs	r3, #3
 8009950:	75fb      	strb	r3, [r7, #23]
          break;
 8009952:	bf00      	nop
      }
      break;
 8009954:	e09a      	b.n	8009a8c <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	785b      	ldrb	r3, [r3, #1]
 800995a:	2b0b      	cmp	r3, #11
 800995c:	f200 8086 	bhi.w	8009a6c <USBD_CUSTOM_HID_Setup+0x204>
 8009960:	a201      	add	r2, pc, #4	@ (adr r2, 8009968 <USBD_CUSTOM_HID_Setup+0x100>)
 8009962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009966:	bf00      	nop
 8009968:	08009999 	.word	0x08009999
 800996c:	08009a7b 	.word	0x08009a7b
 8009970:	08009a6d 	.word	0x08009a6d
 8009974:	08009a6d 	.word	0x08009a6d
 8009978:	08009a6d 	.word	0x08009a6d
 800997c:	08009a6d 	.word	0x08009a6d
 8009980:	080099c3 	.word	0x080099c3
 8009984:	08009a6d 	.word	0x08009a6d
 8009988:	08009a6d 	.word	0x08009a6d
 800998c:	08009a6d 	.word	0x08009a6d
 8009990:	08009a1b 	.word	0x08009a1b
 8009994:	08009a45 	.word	0x08009a45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	2b03      	cmp	r3, #3
 80099a2:	d107      	bne.n	80099b4 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80099a4:	f107 030e 	add.w	r3, r7, #14
 80099a8:	2202      	movs	r2, #2
 80099aa:	4619      	mov	r1, r3
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f001 fc3f 	bl	800b230 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099b2:	e063      	b.n	8009a7c <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80099b4:	6839      	ldr	r1, [r7, #0]
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f001 fbc9 	bl	800b14e <USBD_CtlError>
            ret = USBD_FAIL;
 80099bc:	2303      	movs	r3, #3
 80099be:	75fb      	strb	r3, [r7, #23]
          break;
 80099c0:	e05c      	b.n	8009a7c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	885b      	ldrh	r3, [r3, #2]
 80099c6:	0a1b      	lsrs	r3, r3, #8
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	2b22      	cmp	r3, #34	@ 0x22
 80099cc:	d110      	bne.n	80099f0 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	88db      	ldrh	r3, [r3, #6]
 80099d2:	2b31      	cmp	r3, #49	@ 0x31
 80099d4:	bf28      	it	cs
 80099d6:	2331      	movcs	r3, #49	@ 0x31
 80099d8:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	33b0      	adds	r3, #176	@ 0xb0
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	61bb      	str	r3, [r7, #24]
 80099ee:	e00d      	b.n	8009a0c <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	885b      	ldrh	r3, [r3, #2]
 80099f4:	0a1b      	lsrs	r3, r3, #8
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	2b21      	cmp	r3, #33	@ 0x21
 80099fa:	d107      	bne.n	8009a0c <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80099fc:	4b26      	ldr	r3, [pc, #152]	@ (8009a98 <USBD_CUSTOM_HID_Setup+0x230>)
 80099fe:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	88db      	ldrh	r3, [r3, #6]
 8009a04:	2b09      	cmp	r3, #9
 8009a06:	bf28      	it	cs
 8009a08:	2309      	movcs	r3, #9
 8009a0a:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8009a0c:	8bfb      	ldrh	r3, [r7, #30]
 8009a0e:	461a      	mov	r2, r3
 8009a10:	69b9      	ldr	r1, [r7, #24]
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f001 fc0c 	bl	800b230 <USBD_CtlSendData>
          break;
 8009a18:	e030      	b.n	8009a7c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	2b03      	cmp	r3, #3
 8009a24:	d107      	bne.n	8009a36 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	3318      	adds	r3, #24
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f001 fbfe 	bl	800b230 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a34:	e022      	b.n	8009a7c <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8009a36:	6839      	ldr	r1, [r7, #0]
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f001 fb88 	bl	800b14e <USBD_CtlError>
            ret = USBD_FAIL;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	75fb      	strb	r3, [r7, #23]
          break;
 8009a42:	e01b      	b.n	8009a7c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	2b03      	cmp	r3, #3
 8009a4e:	d106      	bne.n	8009a5e <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	885b      	ldrh	r3, [r3, #2]
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	461a      	mov	r2, r3
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	619a      	str	r2, [r3, #24]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a5c:	e00e      	b.n	8009a7c <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8009a5e:	6839      	ldr	r1, [r7, #0]
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f001 fb74 	bl	800b14e <USBD_CtlError>
            ret = USBD_FAIL;
 8009a66:	2303      	movs	r3, #3
 8009a68:	75fb      	strb	r3, [r7, #23]
          break;
 8009a6a:	e007      	b.n	8009a7c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009a6c:	6839      	ldr	r1, [r7, #0]
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f001 fb6d 	bl	800b14e <USBD_CtlError>
          ret = USBD_FAIL;
 8009a74:	2303      	movs	r3, #3
 8009a76:	75fb      	strb	r3, [r7, #23]
          break;
 8009a78:	e000      	b.n	8009a7c <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8009a7a:	bf00      	nop
      }
      break;
 8009a7c:	e006      	b.n	8009a8c <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8009a7e:	6839      	ldr	r1, [r7, #0]
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f001 fb64 	bl	800b14e <USBD_CtlError>
      ret = USBD_FAIL;
 8009a86:	2303      	movs	r3, #3
 8009a88:	75fb      	strb	r3, [r7, #23]
      break;
 8009a8a:	bf00      	nop
  }
  return (uint8_t)ret;
 8009a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3720      	adds	r7, #32
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	20000070 	.word	0x20000070

08009a9c <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b086      	sub	sp, #24
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	32b0      	adds	r2, #176	@ 0xb0
 8009ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ab8:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d101      	bne.n	8009ac4 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009ac0:	2303      	movs	r3, #3
 8009ac2:	e019      	b.n	8009af8 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	2b03      	cmp	r3, #3
 8009ace:	d112      	bne.n	8009af6 <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d10b      	bne.n	8009af2 <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	2201      	movs	r2, #1
 8009ade:	f883 2020 	strb.w	r2, [r3, #32]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8009ae2:	4b07      	ldr	r3, [pc, #28]	@ (8009b00 <USBD_CUSTOM_HID_SendReport+0x64>)
 8009ae4:	7819      	ldrb	r1, [r3, #0]
 8009ae6:	88fb      	ldrh	r3, [r7, #6]
 8009ae8:	68ba      	ldr	r2, [r7, #8]
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f002 f807 	bl	800bafe <USBD_LL_Transmit>
 8009af0:	e001      	b.n	8009af6 <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8009af2:	2301      	movs	r3, #1
 8009af4:	e000      	b.n	8009af8 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3718      	adds	r7, #24
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	20000086 	.word	0x20000086

08009b04 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8009b0c:	2181      	movs	r1, #129	@ 0x81
 8009b0e:	4815      	ldr	r0, [pc, #84]	@ (8009b64 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8009b10:	f000 fce7 	bl	800a4e2 <USBD_GetEpDesc>
 8009b14:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8009b16:	2101      	movs	r1, #1
 8009b18:	4812      	ldr	r0, [pc, #72]	@ (8009b64 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8009b1a:	f000 fce2 	bl	800a4e2 <USBD_GetEpDesc>
 8009b1e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d009      	beq.n	8009b3a <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f042 0204 	orr.w	r2, r2, #4
 8009b2e:	711a      	strb	r2, [r3, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2205      	movs	r2, #5
 8009b38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d009      	beq.n	8009b54 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f042 0209 	orr.w	r2, r2, #9
 8009b48:	711a      	strb	r2, [r3, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	2205      	movs	r2, #5
 8009b52:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2229      	movs	r2, #41	@ 0x29
 8009b58:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8009b5a:	4b02      	ldr	r3, [pc, #8]	@ (8009b64 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3710      	adds	r7, #16
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	20000044 	.word	0x20000044

08009b68 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8009b70:	2181      	movs	r1, #129	@ 0x81
 8009b72:	4815      	ldr	r0, [pc, #84]	@ (8009bc8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8009b74:	f000 fcb5 	bl	800a4e2 <USBD_GetEpDesc>
 8009b78:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8009b7a:	2101      	movs	r1, #1
 8009b7c:	4812      	ldr	r0, [pc, #72]	@ (8009bc8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8009b7e:	f000 fcb0 	bl	800a4e2 <USBD_GetEpDesc>
 8009b82:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d009      	beq.n	8009b9e <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f042 0204 	orr.w	r2, r2, #4
 8009b92:	711a      	strb	r2, [r3, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2205      	movs	r2, #5
 8009b9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d009      	beq.n	8009bb8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f042 0209 	orr.w	r2, r2, #9
 8009bac:	711a      	strb	r2, [r3, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	2205      	movs	r2, #5
 8009bb6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2229      	movs	r2, #41	@ 0x29
 8009bbc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8009bbe:	4b02      	ldr	r3, [pc, #8]	@ (8009bc8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	20000044 	.word	0x20000044

08009bcc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8009bd4:	2181      	movs	r1, #129	@ 0x81
 8009bd6:	4815      	ldr	r0, [pc, #84]	@ (8009c2c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8009bd8:	f000 fc83 	bl	800a4e2 <USBD_GetEpDesc>
 8009bdc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8009bde:	2101      	movs	r1, #1
 8009be0:	4812      	ldr	r0, [pc, #72]	@ (8009c2c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8009be2:	f000 fc7e 	bl	800a4e2 <USBD_GetEpDesc>
 8009be6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d009      	beq.n	8009c02 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f042 0204 	orr.w	r2, r2, #4
 8009bf6:	711a      	strb	r2, [r3, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2205      	movs	r2, #5
 8009c00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d009      	beq.n	8009c1c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f042 0209 	orr.w	r2, r2, #9
 8009c10:	711a      	strb	r2, [r3, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	2205      	movs	r2, #5
 8009c1a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2229      	movs	r2, #41	@ 0x29
 8009c20:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8009c22:	4b02      	ldr	r3, [pc, #8]	@ (8009c2c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3710      	adds	r7, #16
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	20000044 	.word	0x20000044

08009c30 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	460b      	mov	r3, r1
 8009c3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	32b0      	adds	r2, #176	@ 0xb0
 8009c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 2020 	strb.w	r2, [r3, #32]

  return (uint8_t)USBD_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	370c      	adds	r7, #12
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr

08009c5e <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b084      	sub	sp, #16
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
 8009c66:	460b      	mov	r3, r1
 8009c68:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	32b0      	adds	r2, #176	@ 0xb0
 8009c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c78:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	33b0      	adds	r3, #176	@ 0xb0
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	4413      	add	r3, r2
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	4610      	mov	r0, r2
 8009c90:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	2310      	movs	r3, #16
 8009c96:	2101      	movs	r1, #1
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f001 ff51 	bl	800bb40 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]

 USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	32b0      	adds	r2, #176	@ 0xb0
 8009cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cbe:	60fb      	str	r3, [r7, #12]

 if (hhid->IsReportAvailable == 1U)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	69db      	ldr	r3, [r3, #28]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d10e      	bne.n	8009ce6 <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
 {
   ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	33b0      	adds	r3, #176	@ 0xb0
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	4413      	add	r3, r2
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	4610      	mov	r0, r2
 8009cde:	4798      	blx	r3
   hhid->IsReportAvailable = 0U;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	61da      	str	r2, [r3, #28]

 }

 return (uint8_t)USBD_OK;
 8009ce6:	2300      	movs	r3, #0

}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3710      	adds	r7, #16
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	220a      	movs	r2, #10
 8009cfc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8009cfe:	4b03      	ldr	r3, [pc, #12]	@ (8009d0c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	370c      	adds	r7, #12
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr
 8009d0c:	2000007c 	.word	0x2000007c

08009d10 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d101      	bne.n	8009d24 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e009      	b.n	8009d38 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	33b0      	adds	r3, #176	@ 0xb0
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	4413      	add	r3, r2
 8009d32:	683a      	ldr	r2, [r7, #0]
 8009d34:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b086      	sub	sp, #24
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	4613      	mov	r3, r2
 8009d50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d101      	bne.n	8009d5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009d58:	2303      	movs	r3, #3
 8009d5a:	e01f      	b.n	8009d9c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d003      	beq.n	8009d82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	68ba      	ldr	r2, [r7, #8]
 8009d7e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2201      	movs	r2, #1
 8009d86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	79fa      	ldrb	r2, [r7, #7]
 8009d8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	f001 fd7f 	bl	800b894 <USBD_LL_Init>
 8009d96:	4603      	mov	r3, r0
 8009d98:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3718      	adds	r7, #24
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009dae:	2300      	movs	r3, #0
 8009db0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d101      	bne.n	8009dbc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009db8:	2303      	movs	r3, #3
 8009dba:	e025      	b.n	8009e08 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	683a      	ldr	r2, [r7, #0]
 8009dc0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	32ae      	adds	r2, #174	@ 0xae
 8009dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d00f      	beq.n	8009df8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	32ae      	adds	r2, #174	@ 0xae
 8009de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009de8:	f107 020e 	add.w	r2, r7, #14
 8009dec:	4610      	mov	r0, r2
 8009dee:	4798      	blx	r3
 8009df0:	4602      	mov	r2, r0
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009dfe:	1c5a      	adds	r2, r3, #1
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3710      	adds	r7, #16
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f001 fd87 	bl	800b92c <USBD_LL_Start>
 8009e1e:	4603      	mov	r3, r0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3708      	adds	r7, #8
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009e30:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	370c      	adds	r7, #12
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr

08009e3e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e3e:	b580      	push	{r7, lr}
 8009e40:	b084      	sub	sp, #16
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
 8009e46:	460b      	mov	r3, r1
 8009e48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d009      	beq.n	8009e6c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	78fa      	ldrb	r2, [r7, #3]
 8009e62:	4611      	mov	r1, r2
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	4798      	blx	r3
 8009e68:	4603      	mov	r3, r0
 8009e6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b084      	sub	sp, #16
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
 8009e7e:	460b      	mov	r3, r1
 8009e80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e82:	2300      	movs	r3, #0
 8009e84:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	78fa      	ldrb	r2, [r7, #3]
 8009e90:	4611      	mov	r1, r2
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	4798      	blx	r3
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d001      	beq.n	8009ea0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3710      	adds	r7, #16
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b084      	sub	sp, #16
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
 8009eb2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009eba:	6839      	ldr	r1, [r7, #0]
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f001 f90c 	bl	800b0da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009ede:	f003 031f 	and.w	r3, r3, #31
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d01a      	beq.n	8009f1c <USBD_LL_SetupStage+0x72>
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	d822      	bhi.n	8009f30 <USBD_LL_SetupStage+0x86>
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d002      	beq.n	8009ef4 <USBD_LL_SetupStage+0x4a>
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d00a      	beq.n	8009f08 <USBD_LL_SetupStage+0x5e>
 8009ef2:	e01d      	b.n	8009f30 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009efa:	4619      	mov	r1, r3
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 fb63 	bl	800a5c8 <USBD_StdDevReq>
 8009f02:	4603      	mov	r3, r0
 8009f04:	73fb      	strb	r3, [r7, #15]
      break;
 8009f06:	e020      	b.n	8009f4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f0e:	4619      	mov	r1, r3
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 fbcb 	bl	800a6ac <USBD_StdItfReq>
 8009f16:	4603      	mov	r3, r0
 8009f18:	73fb      	strb	r3, [r7, #15]
      break;
 8009f1a:	e016      	b.n	8009f4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f22:	4619      	mov	r1, r3
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 fc2d 	bl	800a784 <USBD_StdEPReq>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8009f2e:	e00c      	b.n	8009f4a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009f36:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f001 fd54 	bl	800b9ec <USBD_LL_StallEP>
 8009f44:	4603      	mov	r3, r0
 8009f46:	73fb      	strb	r3, [r7, #15]
      break;
 8009f48:	bf00      	nop
  }

  return ret;
 8009f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3710      	adds	r7, #16
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	607a      	str	r2, [r7, #4]
 8009f60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f62:	2300      	movs	r3, #0
 8009f64:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009f66:	7afb      	ldrb	r3, [r7, #11]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d16e      	bne.n	800a04a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009f72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009f7a:	2b03      	cmp	r3, #3
 8009f7c:	f040 8098 	bne.w	800a0b0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	689a      	ldr	r2, [r3, #8]
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d913      	bls.n	8009fb4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	689a      	ldr	r2, [r3, #8]
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	1ad2      	subs	r2, r2, r3
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	68da      	ldr	r2, [r3, #12]
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	bf28      	it	cs
 8009fa6:	4613      	movcs	r3, r2
 8009fa8:	461a      	mov	r2, r3
 8009faa:	6879      	ldr	r1, [r7, #4]
 8009fac:	68f8      	ldr	r0, [r7, #12]
 8009fae:	f001 f988 	bl	800b2c2 <USBD_CtlContinueRx>
 8009fb2:	e07d      	b.n	800a0b0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009fba:	f003 031f 	and.w	r3, r3, #31
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d014      	beq.n	8009fec <USBD_LL_DataOutStage+0x98>
 8009fc2:	2b02      	cmp	r3, #2
 8009fc4:	d81d      	bhi.n	800a002 <USBD_LL_DataOutStage+0xae>
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d002      	beq.n	8009fd0 <USBD_LL_DataOutStage+0x7c>
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d003      	beq.n	8009fd6 <USBD_LL_DataOutStage+0x82>
 8009fce:	e018      	b.n	800a002 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	75bb      	strb	r3, [r7, #22]
            break;
 8009fd4:	e018      	b.n	800a008 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	4619      	mov	r1, r3
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f000 fa64 	bl	800a4ae <USBD_CoreFindIF>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	75bb      	strb	r3, [r7, #22]
            break;
 8009fea:	e00d      	b.n	800a008 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f000 fa66 	bl	800a4c8 <USBD_CoreFindEP>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	75bb      	strb	r3, [r7, #22]
            break;
 800a000:	e002      	b.n	800a008 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a002:	2300      	movs	r3, #0
 800a004:	75bb      	strb	r3, [r7, #22]
            break;
 800a006:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a008:	7dbb      	ldrb	r3, [r7, #22]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d119      	bne.n	800a042 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a014:	b2db      	uxtb	r3, r3
 800a016:	2b03      	cmp	r3, #3
 800a018:	d113      	bne.n	800a042 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a01a:	7dba      	ldrb	r2, [r7, #22]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	32ae      	adds	r2, #174	@ 0xae
 800a020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d00b      	beq.n	800a042 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a02a:	7dba      	ldrb	r2, [r7, #22]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a032:	7dba      	ldrb	r2, [r7, #22]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	32ae      	adds	r2, #174	@ 0xae
 800a038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a03c:	691b      	ldr	r3, [r3, #16]
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a042:	68f8      	ldr	r0, [r7, #12]
 800a044:	f001 f94e 	bl	800b2e4 <USBD_CtlSendStatus>
 800a048:	e032      	b.n	800a0b0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a04a:	7afb      	ldrb	r3, [r7, #11]
 800a04c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a050:	b2db      	uxtb	r3, r3
 800a052:	4619      	mov	r1, r3
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	f000 fa37 	bl	800a4c8 <USBD_CoreFindEP>
 800a05a:	4603      	mov	r3, r0
 800a05c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a05e:	7dbb      	ldrb	r3, [r7, #22]
 800a060:	2bff      	cmp	r3, #255	@ 0xff
 800a062:	d025      	beq.n	800a0b0 <USBD_LL_DataOutStage+0x15c>
 800a064:	7dbb      	ldrb	r3, [r7, #22]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d122      	bne.n	800a0b0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a070:	b2db      	uxtb	r3, r3
 800a072:	2b03      	cmp	r3, #3
 800a074:	d117      	bne.n	800a0a6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a076:	7dba      	ldrb	r2, [r7, #22]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	32ae      	adds	r2, #174	@ 0xae
 800a07c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a080:	699b      	ldr	r3, [r3, #24]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d00f      	beq.n	800a0a6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a086:	7dba      	ldrb	r2, [r7, #22]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a08e:	7dba      	ldrb	r2, [r7, #22]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	32ae      	adds	r2, #174	@ 0xae
 800a094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a098:	699b      	ldr	r3, [r3, #24]
 800a09a:	7afa      	ldrb	r2, [r7, #11]
 800a09c:	4611      	mov	r1, r2
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	4798      	blx	r3
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a0a6:	7dfb      	ldrb	r3, [r7, #23]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d001      	beq.n	800a0b0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a0ac:	7dfb      	ldrb	r3, [r7, #23]
 800a0ae:	e000      	b.n	800a0b2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a0b0:	2300      	movs	r3, #0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3718      	adds	r7, #24
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b086      	sub	sp, #24
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	60f8      	str	r0, [r7, #12]
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	607a      	str	r2, [r7, #4]
 800a0c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a0c8:	7afb      	ldrb	r3, [r7, #11]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d16f      	bne.n	800a1ae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	3314      	adds	r3, #20
 800a0d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a0da:	2b02      	cmp	r3, #2
 800a0dc:	d15a      	bne.n	800a194 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	689a      	ldr	r2, [r3, #8]
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	68db      	ldr	r3, [r3, #12]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d914      	bls.n	800a114 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	689a      	ldr	r2, [r3, #8]
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	1ad2      	subs	r2, r2, r3
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	6879      	ldr	r1, [r7, #4]
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f001 f8b0 	bl	800b266 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a106:	2300      	movs	r3, #0
 800a108:	2200      	movs	r2, #0
 800a10a:	2100      	movs	r1, #0
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f001 fd17 	bl	800bb40 <USBD_LL_PrepareReceive>
 800a112:	e03f      	b.n	800a194 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	68da      	ldr	r2, [r3, #12]
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d11c      	bne.n	800a15a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	685a      	ldr	r2, [r3, #4]
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a128:	429a      	cmp	r2, r3
 800a12a:	d316      	bcc.n	800a15a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	685a      	ldr	r2, [r3, #4]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a136:	429a      	cmp	r2, r3
 800a138:	d20f      	bcs.n	800a15a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a13a:	2200      	movs	r2, #0
 800a13c:	2100      	movs	r1, #0
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f001 f891 	bl	800b266 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2200      	movs	r2, #0
 800a148:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a14c:	2300      	movs	r3, #0
 800a14e:	2200      	movs	r2, #0
 800a150:	2100      	movs	r1, #0
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f001 fcf4 	bl	800bb40 <USBD_LL_PrepareReceive>
 800a158:	e01c      	b.n	800a194 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a160:	b2db      	uxtb	r3, r3
 800a162:	2b03      	cmp	r3, #3
 800a164:	d10f      	bne.n	800a186 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d009      	beq.n	800a186 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2200      	movs	r2, #0
 800a176:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a186:	2180      	movs	r1, #128	@ 0x80
 800a188:	68f8      	ldr	r0, [r7, #12]
 800a18a:	f001 fc2f 	bl	800b9ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f001 f8bb 	bl	800b30a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d03a      	beq.n	800a214 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f7ff fe42 	bl	8009e28 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a1ac:	e032      	b.n	800a214 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a1ae:	7afb      	ldrb	r3, [r7, #11]
 800a1b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	68f8      	ldr	r0, [r7, #12]
 800a1ba:	f000 f985 	bl	800a4c8 <USBD_CoreFindEP>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a1c2:	7dfb      	ldrb	r3, [r7, #23]
 800a1c4:	2bff      	cmp	r3, #255	@ 0xff
 800a1c6:	d025      	beq.n	800a214 <USBD_LL_DataInStage+0x15a>
 800a1c8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d122      	bne.n	800a214 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2b03      	cmp	r3, #3
 800a1d8:	d11c      	bne.n	800a214 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a1da:	7dfa      	ldrb	r2, [r7, #23]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	32ae      	adds	r2, #174	@ 0xae
 800a1e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1e4:	695b      	ldr	r3, [r3, #20]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d014      	beq.n	800a214 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a1ea:	7dfa      	ldrb	r2, [r7, #23]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a1f2:	7dfa      	ldrb	r2, [r7, #23]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	32ae      	adds	r2, #174	@ 0xae
 800a1f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1fc:	695b      	ldr	r3, [r3, #20]
 800a1fe:	7afa      	ldrb	r2, [r7, #11]
 800a200:	4611      	mov	r1, r2
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	4798      	blx	r3
 800a206:	4603      	mov	r3, r0
 800a208:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a20a:	7dbb      	ldrb	r3, [r7, #22]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d001      	beq.n	800a214 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a210:	7dbb      	ldrb	r3, [r7, #22]
 800a212:	e000      	b.n	800a216 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3718      	adds	r7, #24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}

0800a21e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b084      	sub	sp, #16
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a226:	2300      	movs	r3, #0
 800a228:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2201      	movs	r2, #1
 800a22e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2200      	movs	r2, #0
 800a23e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a256:	2b00      	cmp	r3, #0
 800a258:	d014      	beq.n	800a284 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00e      	beq.n	800a284 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	6852      	ldr	r2, [r2, #4]
 800a272:	b2d2      	uxtb	r2, r2
 800a274:	4611      	mov	r1, r2
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	4798      	blx	r3
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d001      	beq.n	800a284 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a280:	2303      	movs	r3, #3
 800a282:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a284:	2340      	movs	r3, #64	@ 0x40
 800a286:	2200      	movs	r2, #0
 800a288:	2100      	movs	r1, #0
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f001 fb69 	bl	800b962 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2240      	movs	r2, #64	@ 0x40
 800a29c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a2a0:	2340      	movs	r3, #64	@ 0x40
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	2180      	movs	r1, #128	@ 0x80
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f001 fb5b 	bl	800b962 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2240      	movs	r2, #64	@ 0x40
 800a2b6:	621a      	str	r2, [r3, #32]

  return ret;
 800a2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a2c2:	b480      	push	{r7}
 800a2c4:	b083      	sub	sp, #12
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	78fa      	ldrb	r2, [r7, #3]
 800a2d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a2d4:	2300      	movs	r3, #0
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	370c      	adds	r7, #12
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr

0800a2e2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a2e2:	b480      	push	{r7}
 800a2e4:	b083      	sub	sp, #12
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	2b04      	cmp	r3, #4
 800a2f4:	d006      	beq.n	800a304 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2fc:	b2da      	uxtb	r2, r3
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2204      	movs	r2, #4
 800a308:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a30c:	2300      	movs	r3, #0
}
 800a30e:	4618      	mov	r0, r3
 800a310:	370c      	adds	r7, #12
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr

0800a31a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a31a:	b480      	push	{r7}
 800a31c:	b083      	sub	sp, #12
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	2b04      	cmp	r3, #4
 800a32c:	d106      	bne.n	800a33c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a334:	b2da      	uxtb	r2, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	370c      	adds	r7, #12
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr

0800a34a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b082      	sub	sp, #8
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	2b03      	cmp	r3, #3
 800a35c:	d110      	bne.n	800a380 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a364:	2b00      	cmp	r3, #0
 800a366:	d00b      	beq.n	800a380 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a36e:	69db      	ldr	r3, [r3, #28]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d005      	beq.n	800a380 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a37a:	69db      	ldr	r3, [r3, #28]
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a380:	2300      	movs	r3, #0
}
 800a382:	4618      	mov	r0, r3
 800a384:	3708      	adds	r7, #8
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b082      	sub	sp, #8
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
 800a392:	460b      	mov	r3, r1
 800a394:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	32ae      	adds	r2, #174	@ 0xae
 800a3a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d101      	bne.n	800a3ac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a3a8:	2303      	movs	r3, #3
 800a3aa:	e01c      	b.n	800a3e6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	2b03      	cmp	r3, #3
 800a3b6:	d115      	bne.n	800a3e4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	32ae      	adds	r2, #174	@ 0xae
 800a3c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3c6:	6a1b      	ldr	r3, [r3, #32]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00b      	beq.n	800a3e4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	32ae      	adds	r2, #174	@ 0xae
 800a3d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3da:	6a1b      	ldr	r3, [r3, #32]
 800a3dc:	78fa      	ldrb	r2, [r7, #3]
 800a3de:	4611      	mov	r1, r2
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b082      	sub	sp, #8
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	32ae      	adds	r2, #174	@ 0xae
 800a404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d101      	bne.n	800a410 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a40c:	2303      	movs	r3, #3
 800a40e:	e01c      	b.n	800a44a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a416:	b2db      	uxtb	r3, r3
 800a418:	2b03      	cmp	r3, #3
 800a41a:	d115      	bne.n	800a448 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	32ae      	adds	r2, #174	@ 0xae
 800a426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a42a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d00b      	beq.n	800a448 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	32ae      	adds	r2, #174	@ 0xae
 800a43a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a43e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a440:	78fa      	ldrb	r2, [r7, #3]
 800a442:	4611      	mov	r1, r2
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a452:	b480      	push	{r7}
 800a454:	b083      	sub	sp, #12
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	370c      	adds	r7, #12
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr

0800a468 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a470:	2300      	movs	r3, #0
 800a472:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a482:	2b00      	cmp	r3, #0
 800a484:	d00e      	beq.n	800a4a4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	6852      	ldr	r2, [r2, #4]
 800a492:	b2d2      	uxtb	r2, r2
 800a494:	4611      	mov	r1, r2
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	4798      	blx	r3
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d001      	beq.n	800a4a4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a4a0:	2303      	movs	r3, #3
 800a4a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a4a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a4ae:	b480      	push	{r7}
 800a4b0:	b083      	sub	sp, #12
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a4ba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	370c      	adds	r7, #12
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a4d4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	370c      	adds	r7, #12
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr

0800a4e2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b086      	sub	sp, #24
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	885b      	ldrh	r3, [r3, #2]
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	68fa      	ldr	r2, [r7, #12]
 800a502:	7812      	ldrb	r2, [r2, #0]
 800a504:	4293      	cmp	r3, r2
 800a506:	d91f      	bls.n	800a548 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a50e:	e013      	b.n	800a538 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a510:	f107 030a 	add.w	r3, r7, #10
 800a514:	4619      	mov	r1, r3
 800a516:	6978      	ldr	r0, [r7, #20]
 800a518:	f000 f81b 	bl	800a552 <USBD_GetNextDesc>
 800a51c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	785b      	ldrb	r3, [r3, #1]
 800a522:	2b05      	cmp	r3, #5
 800a524:	d108      	bne.n	800a538 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	789b      	ldrb	r3, [r3, #2]
 800a52e:	78fa      	ldrb	r2, [r7, #3]
 800a530:	429a      	cmp	r2, r3
 800a532:	d008      	beq.n	800a546 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a534:	2300      	movs	r3, #0
 800a536:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	885b      	ldrh	r3, [r3, #2]
 800a53c:	b29a      	uxth	r2, r3
 800a53e:	897b      	ldrh	r3, [r7, #10]
 800a540:	429a      	cmp	r2, r3
 800a542:	d8e5      	bhi.n	800a510 <USBD_GetEpDesc+0x2e>
 800a544:	e000      	b.n	800a548 <USBD_GetEpDesc+0x66>
          break;
 800a546:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a548:	693b      	ldr	r3, [r7, #16]
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3718      	adds	r7, #24
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a552:	b480      	push	{r7}
 800a554:	b085      	sub	sp, #20
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
 800a55a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	881b      	ldrh	r3, [r3, #0]
 800a564:	68fa      	ldr	r2, [r7, #12]
 800a566:	7812      	ldrb	r2, [r2, #0]
 800a568:	4413      	add	r3, r2
 800a56a:	b29a      	uxth	r2, r3
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	461a      	mov	r2, r3
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	4413      	add	r3, r2
 800a57a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a57c:	68fb      	ldr	r3, [r7, #12]
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3714      	adds	r7, #20
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr

0800a58a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a58a:	b480      	push	{r7}
 800a58c:	b087      	sub	sp, #28
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a5a8:	8a3b      	ldrh	r3, [r7, #16]
 800a5aa:	021b      	lsls	r3, r3, #8
 800a5ac:	b21a      	sxth	r2, r3
 800a5ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	b21b      	sxth	r3, r3
 800a5b6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a5b8:	89fb      	ldrh	r3, [r7, #14]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	371c      	adds	r7, #28
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr
	...

0800a5c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a5de:	2b40      	cmp	r3, #64	@ 0x40
 800a5e0:	d005      	beq.n	800a5ee <USBD_StdDevReq+0x26>
 800a5e2:	2b40      	cmp	r3, #64	@ 0x40
 800a5e4:	d857      	bhi.n	800a696 <USBD_StdDevReq+0xce>
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d00f      	beq.n	800a60a <USBD_StdDevReq+0x42>
 800a5ea:	2b20      	cmp	r3, #32
 800a5ec:	d153      	bne.n	800a696 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	32ae      	adds	r2, #174	@ 0xae
 800a5f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5fc:	689b      	ldr	r3, [r3, #8]
 800a5fe:	6839      	ldr	r1, [r7, #0]
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	4798      	blx	r3
 800a604:	4603      	mov	r3, r0
 800a606:	73fb      	strb	r3, [r7, #15]
      break;
 800a608:	e04a      	b.n	800a6a0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	785b      	ldrb	r3, [r3, #1]
 800a60e:	2b09      	cmp	r3, #9
 800a610:	d83b      	bhi.n	800a68a <USBD_StdDevReq+0xc2>
 800a612:	a201      	add	r2, pc, #4	@ (adr r2, 800a618 <USBD_StdDevReq+0x50>)
 800a614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a618:	0800a66d 	.word	0x0800a66d
 800a61c:	0800a681 	.word	0x0800a681
 800a620:	0800a68b 	.word	0x0800a68b
 800a624:	0800a677 	.word	0x0800a677
 800a628:	0800a68b 	.word	0x0800a68b
 800a62c:	0800a64b 	.word	0x0800a64b
 800a630:	0800a641 	.word	0x0800a641
 800a634:	0800a68b 	.word	0x0800a68b
 800a638:	0800a663 	.word	0x0800a663
 800a63c:	0800a655 	.word	0x0800a655
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a640:	6839      	ldr	r1, [r7, #0]
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 fa3c 	bl	800aac0 <USBD_GetDescriptor>
          break;
 800a648:	e024      	b.n	800a694 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a64a:	6839      	ldr	r1, [r7, #0]
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 fba1 	bl	800ad94 <USBD_SetAddress>
          break;
 800a652:	e01f      	b.n	800a694 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a654:	6839      	ldr	r1, [r7, #0]
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 fbe0 	bl	800ae1c <USBD_SetConfig>
 800a65c:	4603      	mov	r3, r0
 800a65e:	73fb      	strb	r3, [r7, #15]
          break;
 800a660:	e018      	b.n	800a694 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a662:	6839      	ldr	r1, [r7, #0]
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 fc83 	bl	800af70 <USBD_GetConfig>
          break;
 800a66a:	e013      	b.n	800a694 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a66c:	6839      	ldr	r1, [r7, #0]
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 fcb4 	bl	800afdc <USBD_GetStatus>
          break;
 800a674:	e00e      	b.n	800a694 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a676:	6839      	ldr	r1, [r7, #0]
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f000 fce3 	bl	800b044 <USBD_SetFeature>
          break;
 800a67e:	e009      	b.n	800a694 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a680:	6839      	ldr	r1, [r7, #0]
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 fd07 	bl	800b096 <USBD_ClrFeature>
          break;
 800a688:	e004      	b.n	800a694 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a68a:	6839      	ldr	r1, [r7, #0]
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 fd5e 	bl	800b14e <USBD_CtlError>
          break;
 800a692:	bf00      	nop
      }
      break;
 800a694:	e004      	b.n	800a6a0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a696:	6839      	ldr	r1, [r7, #0]
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 fd58 	bl	800b14e <USBD_CtlError>
      break;
 800a69e:	bf00      	nop
  }

  return ret;
 800a6a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop

0800a6ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a6c2:	2b40      	cmp	r3, #64	@ 0x40
 800a6c4:	d005      	beq.n	800a6d2 <USBD_StdItfReq+0x26>
 800a6c6:	2b40      	cmp	r3, #64	@ 0x40
 800a6c8:	d852      	bhi.n	800a770 <USBD_StdItfReq+0xc4>
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d001      	beq.n	800a6d2 <USBD_StdItfReq+0x26>
 800a6ce:	2b20      	cmp	r3, #32
 800a6d0:	d14e      	bne.n	800a770 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	3b01      	subs	r3, #1
 800a6dc:	2b02      	cmp	r3, #2
 800a6de:	d840      	bhi.n	800a762 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	889b      	ldrh	r3, [r3, #4]
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d836      	bhi.n	800a758 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	889b      	ldrh	r3, [r3, #4]
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f7ff fedb 	bl	800a4ae <USBD_CoreFindIF>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6fc:	7bbb      	ldrb	r3, [r7, #14]
 800a6fe:	2bff      	cmp	r3, #255	@ 0xff
 800a700:	d01d      	beq.n	800a73e <USBD_StdItfReq+0x92>
 800a702:	7bbb      	ldrb	r3, [r7, #14]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d11a      	bne.n	800a73e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a708:	7bba      	ldrb	r2, [r7, #14]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	32ae      	adds	r2, #174	@ 0xae
 800a70e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d00f      	beq.n	800a738 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a718:	7bba      	ldrb	r2, [r7, #14]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a720:	7bba      	ldrb	r2, [r7, #14]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	32ae      	adds	r2, #174	@ 0xae
 800a726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	6839      	ldr	r1, [r7, #0]
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	4798      	blx	r3
 800a732:	4603      	mov	r3, r0
 800a734:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a736:	e004      	b.n	800a742 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a738:	2303      	movs	r3, #3
 800a73a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a73c:	e001      	b.n	800a742 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a73e:	2303      	movs	r3, #3
 800a740:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	88db      	ldrh	r3, [r3, #6]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d110      	bne.n	800a76c <USBD_StdItfReq+0xc0>
 800a74a:	7bfb      	ldrb	r3, [r7, #15]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d10d      	bne.n	800a76c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 fdc7 	bl	800b2e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a756:	e009      	b.n	800a76c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a758:	6839      	ldr	r1, [r7, #0]
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 fcf7 	bl	800b14e <USBD_CtlError>
          break;
 800a760:	e004      	b.n	800a76c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a762:	6839      	ldr	r1, [r7, #0]
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f000 fcf2 	bl	800b14e <USBD_CtlError>
          break;
 800a76a:	e000      	b.n	800a76e <USBD_StdItfReq+0xc2>
          break;
 800a76c:	bf00      	nop
      }
      break;
 800a76e:	e004      	b.n	800a77a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a770:	6839      	ldr	r1, [r7, #0]
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 fceb 	bl	800b14e <USBD_CtlError>
      break;
 800a778:	bf00      	nop
  }

  return ret;
 800a77a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3710      	adds	r7, #16
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a78e:	2300      	movs	r3, #0
 800a790:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	889b      	ldrh	r3, [r3, #4]
 800a796:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a7a0:	2b40      	cmp	r3, #64	@ 0x40
 800a7a2:	d007      	beq.n	800a7b4 <USBD_StdEPReq+0x30>
 800a7a4:	2b40      	cmp	r3, #64	@ 0x40
 800a7a6:	f200 817f 	bhi.w	800aaa8 <USBD_StdEPReq+0x324>
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d02a      	beq.n	800a804 <USBD_StdEPReq+0x80>
 800a7ae:	2b20      	cmp	r3, #32
 800a7b0:	f040 817a 	bne.w	800aaa8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a7b4:	7bbb      	ldrb	r3, [r7, #14]
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f7ff fe85 	bl	800a4c8 <USBD_CoreFindEP>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7c2:	7b7b      	ldrb	r3, [r7, #13]
 800a7c4:	2bff      	cmp	r3, #255	@ 0xff
 800a7c6:	f000 8174 	beq.w	800aab2 <USBD_StdEPReq+0x32e>
 800a7ca:	7b7b      	ldrb	r3, [r7, #13]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	f040 8170 	bne.w	800aab2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a7d2:	7b7a      	ldrb	r2, [r7, #13]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a7da:	7b7a      	ldrb	r2, [r7, #13]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	32ae      	adds	r2, #174	@ 0xae
 800a7e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	f000 8163 	beq.w	800aab2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a7ec:	7b7a      	ldrb	r2, [r7, #13]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	32ae      	adds	r2, #174	@ 0xae
 800a7f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	6839      	ldr	r1, [r7, #0]
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	4798      	blx	r3
 800a7fe:	4603      	mov	r3, r0
 800a800:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a802:	e156      	b.n	800aab2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	785b      	ldrb	r3, [r3, #1]
 800a808:	2b03      	cmp	r3, #3
 800a80a:	d008      	beq.n	800a81e <USBD_StdEPReq+0x9a>
 800a80c:	2b03      	cmp	r3, #3
 800a80e:	f300 8145 	bgt.w	800aa9c <USBD_StdEPReq+0x318>
 800a812:	2b00      	cmp	r3, #0
 800a814:	f000 809b 	beq.w	800a94e <USBD_StdEPReq+0x1ca>
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d03c      	beq.n	800a896 <USBD_StdEPReq+0x112>
 800a81c:	e13e      	b.n	800aa9c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a824:	b2db      	uxtb	r3, r3
 800a826:	2b02      	cmp	r3, #2
 800a828:	d002      	beq.n	800a830 <USBD_StdEPReq+0xac>
 800a82a:	2b03      	cmp	r3, #3
 800a82c:	d016      	beq.n	800a85c <USBD_StdEPReq+0xd8>
 800a82e:	e02c      	b.n	800a88a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a830:	7bbb      	ldrb	r3, [r7, #14]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d00d      	beq.n	800a852 <USBD_StdEPReq+0xce>
 800a836:	7bbb      	ldrb	r3, [r7, #14]
 800a838:	2b80      	cmp	r3, #128	@ 0x80
 800a83a:	d00a      	beq.n	800a852 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a83c:	7bbb      	ldrb	r3, [r7, #14]
 800a83e:	4619      	mov	r1, r3
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f001 f8d3 	bl	800b9ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a846:	2180      	movs	r1, #128	@ 0x80
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f001 f8cf 	bl	800b9ec <USBD_LL_StallEP>
 800a84e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a850:	e020      	b.n	800a894 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a852:	6839      	ldr	r1, [r7, #0]
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 fc7a 	bl	800b14e <USBD_CtlError>
              break;
 800a85a:	e01b      	b.n	800a894 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	885b      	ldrh	r3, [r3, #2]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d10e      	bne.n	800a882 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a864:	7bbb      	ldrb	r3, [r7, #14]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d00b      	beq.n	800a882 <USBD_StdEPReq+0xfe>
 800a86a:	7bbb      	ldrb	r3, [r7, #14]
 800a86c:	2b80      	cmp	r3, #128	@ 0x80
 800a86e:	d008      	beq.n	800a882 <USBD_StdEPReq+0xfe>
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	88db      	ldrh	r3, [r3, #6]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d104      	bne.n	800a882 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a878:	7bbb      	ldrb	r3, [r7, #14]
 800a87a:	4619      	mov	r1, r3
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f001 f8b5 	bl	800b9ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 fd2e 	bl	800b2e4 <USBD_CtlSendStatus>

              break;
 800a888:	e004      	b.n	800a894 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a88a:	6839      	ldr	r1, [r7, #0]
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 fc5e 	bl	800b14e <USBD_CtlError>
              break;
 800a892:	bf00      	nop
          }
          break;
 800a894:	e107      	b.n	800aaa6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	2b02      	cmp	r3, #2
 800a8a0:	d002      	beq.n	800a8a8 <USBD_StdEPReq+0x124>
 800a8a2:	2b03      	cmp	r3, #3
 800a8a4:	d016      	beq.n	800a8d4 <USBD_StdEPReq+0x150>
 800a8a6:	e04b      	b.n	800a940 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8a8:	7bbb      	ldrb	r3, [r7, #14]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d00d      	beq.n	800a8ca <USBD_StdEPReq+0x146>
 800a8ae:	7bbb      	ldrb	r3, [r7, #14]
 800a8b0:	2b80      	cmp	r3, #128	@ 0x80
 800a8b2:	d00a      	beq.n	800a8ca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a8b4:	7bbb      	ldrb	r3, [r7, #14]
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f001 f897 	bl	800b9ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8be:	2180      	movs	r1, #128	@ 0x80
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f001 f893 	bl	800b9ec <USBD_LL_StallEP>
 800a8c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a8c8:	e040      	b.n	800a94c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a8ca:	6839      	ldr	r1, [r7, #0]
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 fc3e 	bl	800b14e <USBD_CtlError>
              break;
 800a8d2:	e03b      	b.n	800a94c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	885b      	ldrh	r3, [r3, #2]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d136      	bne.n	800a94a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a8dc:	7bbb      	ldrb	r3, [r7, #14]
 800a8de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d004      	beq.n	800a8f0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a8e6:	7bbb      	ldrb	r3, [r7, #14]
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f001 f89d 	bl	800ba2a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f000 fcf7 	bl	800b2e4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a8f6:	7bbb      	ldrb	r3, [r7, #14]
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f7ff fde4 	bl	800a4c8 <USBD_CoreFindEP>
 800a900:	4603      	mov	r3, r0
 800a902:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a904:	7b7b      	ldrb	r3, [r7, #13]
 800a906:	2bff      	cmp	r3, #255	@ 0xff
 800a908:	d01f      	beq.n	800a94a <USBD_StdEPReq+0x1c6>
 800a90a:	7b7b      	ldrb	r3, [r7, #13]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d11c      	bne.n	800a94a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a910:	7b7a      	ldrb	r2, [r7, #13]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a918:	7b7a      	ldrb	r2, [r7, #13]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	32ae      	adds	r2, #174	@ 0xae
 800a91e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d010      	beq.n	800a94a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a928:	7b7a      	ldrb	r2, [r7, #13]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	32ae      	adds	r2, #174	@ 0xae
 800a92e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	6839      	ldr	r1, [r7, #0]
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	4798      	blx	r3
 800a93a:	4603      	mov	r3, r0
 800a93c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a93e:	e004      	b.n	800a94a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a940:	6839      	ldr	r1, [r7, #0]
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f000 fc03 	bl	800b14e <USBD_CtlError>
              break;
 800a948:	e000      	b.n	800a94c <USBD_StdEPReq+0x1c8>
              break;
 800a94a:	bf00      	nop
          }
          break;
 800a94c:	e0ab      	b.n	800aaa6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a954:	b2db      	uxtb	r3, r3
 800a956:	2b02      	cmp	r3, #2
 800a958:	d002      	beq.n	800a960 <USBD_StdEPReq+0x1dc>
 800a95a:	2b03      	cmp	r3, #3
 800a95c:	d032      	beq.n	800a9c4 <USBD_StdEPReq+0x240>
 800a95e:	e097      	b.n	800aa90 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a960:	7bbb      	ldrb	r3, [r7, #14]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d007      	beq.n	800a976 <USBD_StdEPReq+0x1f2>
 800a966:	7bbb      	ldrb	r3, [r7, #14]
 800a968:	2b80      	cmp	r3, #128	@ 0x80
 800a96a:	d004      	beq.n	800a976 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a96c:	6839      	ldr	r1, [r7, #0]
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 fbed 	bl	800b14e <USBD_CtlError>
                break;
 800a974:	e091      	b.n	800aa9a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a976:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	da0b      	bge.n	800a996 <USBD_StdEPReq+0x212>
 800a97e:	7bbb      	ldrb	r3, [r7, #14]
 800a980:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a984:	4613      	mov	r3, r2
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	4413      	add	r3, r2
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	3310      	adds	r3, #16
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	4413      	add	r3, r2
 800a992:	3304      	adds	r3, #4
 800a994:	e00b      	b.n	800a9ae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a996:	7bbb      	ldrb	r3, [r7, #14]
 800a998:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a99c:	4613      	mov	r3, r2
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	4413      	add	r3, r2
 800a9a2:	009b      	lsls	r3, r3, #2
 800a9a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	4413      	add	r3, r2
 800a9ac:	3304      	adds	r3, #4
 800a9ae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	2202      	movs	r2, #2
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 fc37 	bl	800b230 <USBD_CtlSendData>
              break;
 800a9c2:	e06a      	b.n	800aa9a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a9c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	da11      	bge.n	800a9f0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a9cc:	7bbb      	ldrb	r3, [r7, #14]
 800a9ce:	f003 020f 	and.w	r2, r3, #15
 800a9d2:	6879      	ldr	r1, [r7, #4]
 800a9d4:	4613      	mov	r3, r2
 800a9d6:	009b      	lsls	r3, r3, #2
 800a9d8:	4413      	add	r3, r2
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	440b      	add	r3, r1
 800a9de:	3324      	adds	r3, #36	@ 0x24
 800a9e0:	881b      	ldrh	r3, [r3, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d117      	bne.n	800aa16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a9e6:	6839      	ldr	r1, [r7, #0]
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 fbb0 	bl	800b14e <USBD_CtlError>
                  break;
 800a9ee:	e054      	b.n	800aa9a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a9f0:	7bbb      	ldrb	r3, [r7, #14]
 800a9f2:	f003 020f 	and.w	r2, r3, #15
 800a9f6:	6879      	ldr	r1, [r7, #4]
 800a9f8:	4613      	mov	r3, r2
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	4413      	add	r3, r2
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	440b      	add	r3, r1
 800aa02:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aa06:	881b      	ldrh	r3, [r3, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d104      	bne.n	800aa16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aa0c:	6839      	ldr	r1, [r7, #0]
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 fb9d 	bl	800b14e <USBD_CtlError>
                  break;
 800aa14:	e041      	b.n	800aa9a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	da0b      	bge.n	800aa36 <USBD_StdEPReq+0x2b2>
 800aa1e:	7bbb      	ldrb	r3, [r7, #14]
 800aa20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa24:	4613      	mov	r3, r2
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	4413      	add	r3, r2
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	3310      	adds	r3, #16
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	4413      	add	r3, r2
 800aa32:	3304      	adds	r3, #4
 800aa34:	e00b      	b.n	800aa4e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa36:	7bbb      	ldrb	r3, [r7, #14]
 800aa38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa3c:	4613      	mov	r3, r2
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	4413      	add	r3, r2
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	4413      	add	r3, r2
 800aa4c:	3304      	adds	r3, #4
 800aa4e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aa50:	7bbb      	ldrb	r3, [r7, #14]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d002      	beq.n	800aa5c <USBD_StdEPReq+0x2d8>
 800aa56:	7bbb      	ldrb	r3, [r7, #14]
 800aa58:	2b80      	cmp	r3, #128	@ 0x80
 800aa5a:	d103      	bne.n	800aa64 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	601a      	str	r2, [r3, #0]
 800aa62:	e00e      	b.n	800aa82 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aa64:	7bbb      	ldrb	r3, [r7, #14]
 800aa66:	4619      	mov	r1, r3
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 fffd 	bl	800ba68 <USBD_LL_IsStallEP>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d003      	beq.n	800aa7c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	2201      	movs	r2, #1
 800aa78:	601a      	str	r2, [r3, #0]
 800aa7a:	e002      	b.n	800aa82 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	2202      	movs	r2, #2
 800aa86:	4619      	mov	r1, r3
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 fbd1 	bl	800b230 <USBD_CtlSendData>
              break;
 800aa8e:	e004      	b.n	800aa9a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800aa90:	6839      	ldr	r1, [r7, #0]
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 fb5b 	bl	800b14e <USBD_CtlError>
              break;
 800aa98:	bf00      	nop
          }
          break;
 800aa9a:	e004      	b.n	800aaa6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800aa9c:	6839      	ldr	r1, [r7, #0]
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 fb55 	bl	800b14e <USBD_CtlError>
          break;
 800aaa4:	bf00      	nop
      }
      break;
 800aaa6:	e005      	b.n	800aab4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800aaa8:	6839      	ldr	r1, [r7, #0]
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 fb4f 	bl	800b14e <USBD_CtlError>
      break;
 800aab0:	e000      	b.n	800aab4 <USBD_StdEPReq+0x330>
      break;
 800aab2:	bf00      	nop
  }

  return ret;
 800aab4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
	...

0800aac0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aaca:	2300      	movs	r3, #0
 800aacc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aace:	2300      	movs	r3, #0
 800aad0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aad2:	2300      	movs	r3, #0
 800aad4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	885b      	ldrh	r3, [r3, #2]
 800aada:	0a1b      	lsrs	r3, r3, #8
 800aadc:	b29b      	uxth	r3, r3
 800aade:	3b01      	subs	r3, #1
 800aae0:	2b06      	cmp	r3, #6
 800aae2:	f200 8128 	bhi.w	800ad36 <USBD_GetDescriptor+0x276>
 800aae6:	a201      	add	r2, pc, #4	@ (adr r2, 800aaec <USBD_GetDescriptor+0x2c>)
 800aae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaec:	0800ab09 	.word	0x0800ab09
 800aaf0:	0800ab21 	.word	0x0800ab21
 800aaf4:	0800ab61 	.word	0x0800ab61
 800aaf8:	0800ad37 	.word	0x0800ad37
 800aafc:	0800ad37 	.word	0x0800ad37
 800ab00:	0800acd7 	.word	0x0800acd7
 800ab04:	0800ad03 	.word	0x0800ad03
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	7c12      	ldrb	r2, [r2, #16]
 800ab14:	f107 0108 	add.w	r1, r7, #8
 800ab18:	4610      	mov	r0, r2
 800ab1a:	4798      	blx	r3
 800ab1c:	60f8      	str	r0, [r7, #12]
      break;
 800ab1e:	e112      	b.n	800ad46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	7c1b      	ldrb	r3, [r3, #16]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d10d      	bne.n	800ab44 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab30:	f107 0208 	add.w	r2, r7, #8
 800ab34:	4610      	mov	r0, r2
 800ab36:	4798      	blx	r3
 800ab38:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	2202      	movs	r2, #2
 800ab40:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ab42:	e100      	b.n	800ad46 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab4c:	f107 0208 	add.w	r2, r7, #8
 800ab50:	4610      	mov	r0, r2
 800ab52:	4798      	blx	r3
 800ab54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	3301      	adds	r3, #1
 800ab5a:	2202      	movs	r2, #2
 800ab5c:	701a      	strb	r2, [r3, #0]
      break;
 800ab5e:	e0f2      	b.n	800ad46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	885b      	ldrh	r3, [r3, #2]
 800ab64:	b2db      	uxtb	r3, r3
 800ab66:	2b05      	cmp	r3, #5
 800ab68:	f200 80ac 	bhi.w	800acc4 <USBD_GetDescriptor+0x204>
 800ab6c:	a201      	add	r2, pc, #4	@ (adr r2, 800ab74 <USBD_GetDescriptor+0xb4>)
 800ab6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab72:	bf00      	nop
 800ab74:	0800ab8d 	.word	0x0800ab8d
 800ab78:	0800abc1 	.word	0x0800abc1
 800ab7c:	0800abf5 	.word	0x0800abf5
 800ab80:	0800ac29 	.word	0x0800ac29
 800ab84:	0800ac5d 	.word	0x0800ac5d
 800ab88:	0800ac91 	.word	0x0800ac91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d00b      	beq.n	800abb0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	7c12      	ldrb	r2, [r2, #16]
 800aba4:	f107 0108 	add.w	r1, r7, #8
 800aba8:	4610      	mov	r0, r2
 800abaa:	4798      	blx	r3
 800abac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abae:	e091      	b.n	800acd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abb0:	6839      	ldr	r1, [r7, #0]
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 facb 	bl	800b14e <USBD_CtlError>
            err++;
 800abb8:	7afb      	ldrb	r3, [r7, #11]
 800abba:	3301      	adds	r3, #1
 800abbc:	72fb      	strb	r3, [r7, #11]
          break;
 800abbe:	e089      	b.n	800acd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d00b      	beq.n	800abe4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	7c12      	ldrb	r2, [r2, #16]
 800abd8:	f107 0108 	add.w	r1, r7, #8
 800abdc:	4610      	mov	r0, r2
 800abde:	4798      	blx	r3
 800abe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abe2:	e077      	b.n	800acd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abe4:	6839      	ldr	r1, [r7, #0]
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 fab1 	bl	800b14e <USBD_CtlError>
            err++;
 800abec:	7afb      	ldrb	r3, [r7, #11]
 800abee:	3301      	adds	r3, #1
 800abf0:	72fb      	strb	r3, [r7, #11]
          break;
 800abf2:	e06f      	b.n	800acd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00b      	beq.n	800ac18 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	7c12      	ldrb	r2, [r2, #16]
 800ac0c:	f107 0108 	add.w	r1, r7, #8
 800ac10:	4610      	mov	r0, r2
 800ac12:	4798      	blx	r3
 800ac14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac16:	e05d      	b.n	800acd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac18:	6839      	ldr	r1, [r7, #0]
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 fa97 	bl	800b14e <USBD_CtlError>
            err++;
 800ac20:	7afb      	ldrb	r3, [r7, #11]
 800ac22:	3301      	adds	r3, #1
 800ac24:	72fb      	strb	r3, [r7, #11]
          break;
 800ac26:	e055      	b.n	800acd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac2e:	691b      	ldr	r3, [r3, #16]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d00b      	beq.n	800ac4c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	7c12      	ldrb	r2, [r2, #16]
 800ac40:	f107 0108 	add.w	r1, r7, #8
 800ac44:	4610      	mov	r0, r2
 800ac46:	4798      	blx	r3
 800ac48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac4a:	e043      	b.n	800acd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac4c:	6839      	ldr	r1, [r7, #0]
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 fa7d 	bl	800b14e <USBD_CtlError>
            err++;
 800ac54:	7afb      	ldrb	r3, [r7, #11]
 800ac56:	3301      	adds	r3, #1
 800ac58:	72fb      	strb	r3, [r7, #11]
          break;
 800ac5a:	e03b      	b.n	800acd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac62:	695b      	ldr	r3, [r3, #20]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d00b      	beq.n	800ac80 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac6e:	695b      	ldr	r3, [r3, #20]
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	7c12      	ldrb	r2, [r2, #16]
 800ac74:	f107 0108 	add.w	r1, r7, #8
 800ac78:	4610      	mov	r0, r2
 800ac7a:	4798      	blx	r3
 800ac7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac7e:	e029      	b.n	800acd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac80:	6839      	ldr	r1, [r7, #0]
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 fa63 	bl	800b14e <USBD_CtlError>
            err++;
 800ac88:	7afb      	ldrb	r3, [r7, #11]
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	72fb      	strb	r3, [r7, #11]
          break;
 800ac8e:	e021      	b.n	800acd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac96:	699b      	ldr	r3, [r3, #24]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d00b      	beq.n	800acb4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aca2:	699b      	ldr	r3, [r3, #24]
 800aca4:	687a      	ldr	r2, [r7, #4]
 800aca6:	7c12      	ldrb	r2, [r2, #16]
 800aca8:	f107 0108 	add.w	r1, r7, #8
 800acac:	4610      	mov	r0, r2
 800acae:	4798      	blx	r3
 800acb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acb2:	e00f      	b.n	800acd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acb4:	6839      	ldr	r1, [r7, #0]
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 fa49 	bl	800b14e <USBD_CtlError>
            err++;
 800acbc:	7afb      	ldrb	r3, [r7, #11]
 800acbe:	3301      	adds	r3, #1
 800acc0:	72fb      	strb	r3, [r7, #11]
          break;
 800acc2:	e007      	b.n	800acd4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800acc4:	6839      	ldr	r1, [r7, #0]
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 fa41 	bl	800b14e <USBD_CtlError>
          err++;
 800accc:	7afb      	ldrb	r3, [r7, #11]
 800acce:	3301      	adds	r3, #1
 800acd0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800acd2:	bf00      	nop
      }
      break;
 800acd4:	e037      	b.n	800ad46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	7c1b      	ldrb	r3, [r3, #16]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d109      	bne.n	800acf2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ace4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ace6:	f107 0208 	add.w	r2, r7, #8
 800acea:	4610      	mov	r0, r2
 800acec:	4798      	blx	r3
 800acee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800acf0:	e029      	b.n	800ad46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800acf2:	6839      	ldr	r1, [r7, #0]
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 fa2a 	bl	800b14e <USBD_CtlError>
        err++;
 800acfa:	7afb      	ldrb	r3, [r7, #11]
 800acfc:	3301      	adds	r3, #1
 800acfe:	72fb      	strb	r3, [r7, #11]
      break;
 800ad00:	e021      	b.n	800ad46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	7c1b      	ldrb	r3, [r3, #16]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d10d      	bne.n	800ad26 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad12:	f107 0208 	add.w	r2, r7, #8
 800ad16:	4610      	mov	r0, r2
 800ad18:	4798      	blx	r3
 800ad1a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	2207      	movs	r2, #7
 800ad22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad24:	e00f      	b.n	800ad46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ad26:	6839      	ldr	r1, [r7, #0]
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f000 fa10 	bl	800b14e <USBD_CtlError>
        err++;
 800ad2e:	7afb      	ldrb	r3, [r7, #11]
 800ad30:	3301      	adds	r3, #1
 800ad32:	72fb      	strb	r3, [r7, #11]
      break;
 800ad34:	e007      	b.n	800ad46 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ad36:	6839      	ldr	r1, [r7, #0]
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 fa08 	bl	800b14e <USBD_CtlError>
      err++;
 800ad3e:	7afb      	ldrb	r3, [r7, #11]
 800ad40:	3301      	adds	r3, #1
 800ad42:	72fb      	strb	r3, [r7, #11]
      break;
 800ad44:	bf00      	nop
  }

  if (err != 0U)
 800ad46:	7afb      	ldrb	r3, [r7, #11]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d11e      	bne.n	800ad8a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	88db      	ldrh	r3, [r3, #6]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d016      	beq.n	800ad82 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ad54:	893b      	ldrh	r3, [r7, #8]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00e      	beq.n	800ad78 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	88da      	ldrh	r2, [r3, #6]
 800ad5e:	893b      	ldrh	r3, [r7, #8]
 800ad60:	4293      	cmp	r3, r2
 800ad62:	bf28      	it	cs
 800ad64:	4613      	movcs	r3, r2
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ad6a:	893b      	ldrh	r3, [r7, #8]
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	68f9      	ldr	r1, [r7, #12]
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f000 fa5d 	bl	800b230 <USBD_CtlSendData>
 800ad76:	e009      	b.n	800ad8c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ad78:	6839      	ldr	r1, [r7, #0]
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 f9e7 	bl	800b14e <USBD_CtlError>
 800ad80:	e004      	b.n	800ad8c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 faae 	bl	800b2e4 <USBD_CtlSendStatus>
 800ad88:	e000      	b.n	800ad8c <USBD_GetDescriptor+0x2cc>
    return;
 800ad8a:	bf00      	nop
  }
}
 800ad8c:	3710      	adds	r7, #16
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop

0800ad94 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	889b      	ldrh	r3, [r3, #4]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d131      	bne.n	800ae0a <USBD_SetAddress+0x76>
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	88db      	ldrh	r3, [r3, #6]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d12d      	bne.n	800ae0a <USBD_SetAddress+0x76>
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	885b      	ldrh	r3, [r3, #2]
 800adb2:	2b7f      	cmp	r3, #127	@ 0x7f
 800adb4:	d829      	bhi.n	800ae0a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	885b      	ldrh	r3, [r3, #2]
 800adba:	b2db      	uxtb	r3, r3
 800adbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800adc0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	2b03      	cmp	r3, #3
 800adcc:	d104      	bne.n	800add8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800adce:	6839      	ldr	r1, [r7, #0]
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 f9bc 	bl	800b14e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800add6:	e01d      	b.n	800ae14 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	7bfa      	ldrb	r2, [r7, #15]
 800addc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ade0:	7bfb      	ldrb	r3, [r7, #15]
 800ade2:	4619      	mov	r1, r3
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 fe6b 	bl	800bac0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 fa7a 	bl	800b2e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800adf0:	7bfb      	ldrb	r3, [r7, #15]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d004      	beq.n	800ae00 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2202      	movs	r2, #2
 800adfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adfe:	e009      	b.n	800ae14 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2201      	movs	r2, #1
 800ae04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae08:	e004      	b.n	800ae14 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ae0a:	6839      	ldr	r1, [r7, #0]
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 f99e 	bl	800b14e <USBD_CtlError>
  }
}
 800ae12:	bf00      	nop
 800ae14:	bf00      	nop
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae26:	2300      	movs	r3, #0
 800ae28:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	885b      	ldrh	r3, [r3, #2]
 800ae2e:	b2da      	uxtb	r2, r3
 800ae30:	4b4e      	ldr	r3, [pc, #312]	@ (800af6c <USBD_SetConfig+0x150>)
 800ae32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ae34:	4b4d      	ldr	r3, [pc, #308]	@ (800af6c <USBD_SetConfig+0x150>)
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d905      	bls.n	800ae48 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ae3c:	6839      	ldr	r1, [r7, #0]
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 f985 	bl	800b14e <USBD_CtlError>
    return USBD_FAIL;
 800ae44:	2303      	movs	r3, #3
 800ae46:	e08c      	b.n	800af62 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d002      	beq.n	800ae5a <USBD_SetConfig+0x3e>
 800ae54:	2b03      	cmp	r3, #3
 800ae56:	d029      	beq.n	800aeac <USBD_SetConfig+0x90>
 800ae58:	e075      	b.n	800af46 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ae5a:	4b44      	ldr	r3, [pc, #272]	@ (800af6c <USBD_SetConfig+0x150>)
 800ae5c:	781b      	ldrb	r3, [r3, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d020      	beq.n	800aea4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ae62:	4b42      	ldr	r3, [pc, #264]	@ (800af6c <USBD_SetConfig+0x150>)
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	461a      	mov	r2, r3
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae6c:	4b3f      	ldr	r3, [pc, #252]	@ (800af6c <USBD_SetConfig+0x150>)
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	4619      	mov	r1, r3
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f7fe ffe3 	bl	8009e3e <USBD_SetClassConfig>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ae7c:	7bfb      	ldrb	r3, [r7, #15]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d008      	beq.n	800ae94 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ae82:	6839      	ldr	r1, [r7, #0]
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 f962 	bl	800b14e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2202      	movs	r2, #2
 800ae8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ae92:	e065      	b.n	800af60 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 fa25 	bl	800b2e4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2203      	movs	r2, #3
 800ae9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800aea2:	e05d      	b.n	800af60 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 fa1d 	bl	800b2e4 <USBD_CtlSendStatus>
      break;
 800aeaa:	e059      	b.n	800af60 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800aeac:	4b2f      	ldr	r3, [pc, #188]	@ (800af6c <USBD_SetConfig+0x150>)
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d112      	bne.n	800aeda <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2202      	movs	r2, #2
 800aeb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800aebc:	4b2b      	ldr	r3, [pc, #172]	@ (800af6c <USBD_SetConfig+0x150>)
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	461a      	mov	r2, r3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aec6:	4b29      	ldr	r3, [pc, #164]	@ (800af6c <USBD_SetConfig+0x150>)
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	4619      	mov	r1, r3
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f7fe ffd2 	bl	8009e76 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 fa06 	bl	800b2e4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aed8:	e042      	b.n	800af60 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800aeda:	4b24      	ldr	r3, [pc, #144]	@ (800af6c <USBD_SetConfig+0x150>)
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	461a      	mov	r2, r3
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d02a      	beq.n	800af3e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	4619      	mov	r1, r3
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f7fe ffc0 	bl	8009e76 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aef6:	4b1d      	ldr	r3, [pc, #116]	@ (800af6c <USBD_SetConfig+0x150>)
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	461a      	mov	r2, r3
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af00:	4b1a      	ldr	r3, [pc, #104]	@ (800af6c <USBD_SetConfig+0x150>)
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	4619      	mov	r1, r3
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f7fe ff99 	bl	8009e3e <USBD_SetClassConfig>
 800af0c:	4603      	mov	r3, r0
 800af0e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800af10:	7bfb      	ldrb	r3, [r7, #15]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d00f      	beq.n	800af36 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800af16:	6839      	ldr	r1, [r7, #0]
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 f918 	bl	800b14e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	b2db      	uxtb	r3, r3
 800af24:	4619      	mov	r1, r3
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f7fe ffa5 	bl	8009e76 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2202      	movs	r2, #2
 800af30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800af34:	e014      	b.n	800af60 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 f9d4 	bl	800b2e4 <USBD_CtlSendStatus>
      break;
 800af3c:	e010      	b.n	800af60 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 f9d0 	bl	800b2e4 <USBD_CtlSendStatus>
      break;
 800af44:	e00c      	b.n	800af60 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800af46:	6839      	ldr	r1, [r7, #0]
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 f900 	bl	800b14e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800af4e:	4b07      	ldr	r3, [pc, #28]	@ (800af6c <USBD_SetConfig+0x150>)
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	4619      	mov	r1, r3
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f7fe ff8e 	bl	8009e76 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800af5a:	2303      	movs	r3, #3
 800af5c:	73fb      	strb	r3, [r7, #15]
      break;
 800af5e:	bf00      	nop
  }

  return ret;
 800af60:	7bfb      	ldrb	r3, [r7, #15]
}
 800af62:	4618      	mov	r0, r3
 800af64:	3710      	adds	r7, #16
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	20000654 	.word	0x20000654

0800af70 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	88db      	ldrh	r3, [r3, #6]
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d004      	beq.n	800af8c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800af82:	6839      	ldr	r1, [r7, #0]
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f000 f8e2 	bl	800b14e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800af8a:	e023      	b.n	800afd4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af92:	b2db      	uxtb	r3, r3
 800af94:	2b02      	cmp	r3, #2
 800af96:	dc02      	bgt.n	800af9e <USBD_GetConfig+0x2e>
 800af98:	2b00      	cmp	r3, #0
 800af9a:	dc03      	bgt.n	800afa4 <USBD_GetConfig+0x34>
 800af9c:	e015      	b.n	800afca <USBD_GetConfig+0x5a>
 800af9e:	2b03      	cmp	r3, #3
 800afa0:	d00b      	beq.n	800afba <USBD_GetConfig+0x4a>
 800afa2:	e012      	b.n	800afca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2200      	movs	r2, #0
 800afa8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	3308      	adds	r3, #8
 800afae:	2201      	movs	r2, #1
 800afb0:	4619      	mov	r1, r3
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 f93c 	bl	800b230 <USBD_CtlSendData>
        break;
 800afb8:	e00c      	b.n	800afd4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	3304      	adds	r3, #4
 800afbe:	2201      	movs	r2, #1
 800afc0:	4619      	mov	r1, r3
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 f934 	bl	800b230 <USBD_CtlSendData>
        break;
 800afc8:	e004      	b.n	800afd4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800afca:	6839      	ldr	r1, [r7, #0]
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f000 f8be 	bl	800b14e <USBD_CtlError>
        break;
 800afd2:	bf00      	nop
}
 800afd4:	bf00      	nop
 800afd6:	3708      	adds	r7, #8
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afec:	b2db      	uxtb	r3, r3
 800afee:	3b01      	subs	r3, #1
 800aff0:	2b02      	cmp	r3, #2
 800aff2:	d81e      	bhi.n	800b032 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	88db      	ldrh	r3, [r3, #6]
 800aff8:	2b02      	cmp	r3, #2
 800affa:	d004      	beq.n	800b006 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800affc:	6839      	ldr	r1, [r7, #0]
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 f8a5 	bl	800b14e <USBD_CtlError>
        break;
 800b004:	e01a      	b.n	800b03c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2201      	movs	r2, #1
 800b00a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b012:	2b00      	cmp	r3, #0
 800b014:	d005      	beq.n	800b022 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	68db      	ldr	r3, [r3, #12]
 800b01a:	f043 0202 	orr.w	r2, r3, #2
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	330c      	adds	r3, #12
 800b026:	2202      	movs	r2, #2
 800b028:	4619      	mov	r1, r3
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 f900 	bl	800b230 <USBD_CtlSendData>
      break;
 800b030:	e004      	b.n	800b03c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b032:	6839      	ldr	r1, [r7, #0]
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 f88a 	bl	800b14e <USBD_CtlError>
      break;
 800b03a:	bf00      	nop
  }
}
 800b03c:	bf00      	nop
 800b03e:	3708      	adds	r7, #8
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	885b      	ldrh	r3, [r3, #2]
 800b052:	2b01      	cmp	r3, #1
 800b054:	d107      	bne.n	800b066 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2201      	movs	r2, #1
 800b05a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 f940 	bl	800b2e4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b064:	e013      	b.n	800b08e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	885b      	ldrh	r3, [r3, #2]
 800b06a:	2b02      	cmp	r3, #2
 800b06c:	d10b      	bne.n	800b086 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	889b      	ldrh	r3, [r3, #4]
 800b072:	0a1b      	lsrs	r3, r3, #8
 800b074:	b29b      	uxth	r3, r3
 800b076:	b2da      	uxtb	r2, r3
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 f930 	bl	800b2e4 <USBD_CtlSendStatus>
}
 800b084:	e003      	b.n	800b08e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b086:	6839      	ldr	r1, [r7, #0]
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 f860 	bl	800b14e <USBD_CtlError>
}
 800b08e:	bf00      	nop
 800b090:	3708      	adds	r7, #8
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b096:	b580      	push	{r7, lr}
 800b098:	b082      	sub	sp, #8
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
 800b09e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	2b02      	cmp	r3, #2
 800b0ac:	d80b      	bhi.n	800b0c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	885b      	ldrh	r3, [r3, #2]
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d10c      	bne.n	800b0d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 f910 	bl	800b2e4 <USBD_CtlSendStatus>
      }
      break;
 800b0c4:	e004      	b.n	800b0d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b0c6:	6839      	ldr	r1, [r7, #0]
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 f840 	bl	800b14e <USBD_CtlError>
      break;
 800b0ce:	e000      	b.n	800b0d2 <USBD_ClrFeature+0x3c>
      break;
 800b0d0:	bf00      	nop
  }
}
 800b0d2:	bf00      	nop
 800b0d4:	3708      	adds	r7, #8
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}

0800b0da <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b084      	sub	sp, #16
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
 800b0e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	781a      	ldrb	r2, [r3, #0]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	781a      	ldrb	r2, [r3, #0]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	3301      	adds	r3, #1
 800b102:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f7ff fa40 	bl	800a58a <SWAPBYTE>
 800b10a:	4603      	mov	r3, r0
 800b10c:	461a      	mov	r2, r3
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	3301      	adds	r3, #1
 800b116:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	3301      	adds	r3, #1
 800b11c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	f7ff fa33 	bl	800a58a <SWAPBYTE>
 800b124:	4603      	mov	r3, r0
 800b126:	461a      	mov	r2, r3
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	3301      	adds	r3, #1
 800b130:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	3301      	adds	r3, #1
 800b136:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b138:	68f8      	ldr	r0, [r7, #12]
 800b13a:	f7ff fa26 	bl	800a58a <SWAPBYTE>
 800b13e:	4603      	mov	r3, r0
 800b140:	461a      	mov	r2, r3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	80da      	strh	r2, [r3, #6]
}
 800b146:	bf00      	nop
 800b148:	3710      	adds	r7, #16
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}

0800b14e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b14e:	b580      	push	{r7, lr}
 800b150:	b082      	sub	sp, #8
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
 800b156:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b158:	2180      	movs	r1, #128	@ 0x80
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 fc46 	bl	800b9ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b160:	2100      	movs	r1, #0
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 fc42 	bl	800b9ec <USBD_LL_StallEP>
}
 800b168:	bf00      	nop
 800b16a:	3708      	adds	r7, #8
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b086      	sub	sp, #24
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b17c:	2300      	movs	r3, #0
 800b17e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d036      	beq.n	800b1f4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b18a:	6938      	ldr	r0, [r7, #16]
 800b18c:	f000 f836 	bl	800b1fc <USBD_GetLen>
 800b190:	4603      	mov	r3, r0
 800b192:	3301      	adds	r3, #1
 800b194:	b29b      	uxth	r3, r3
 800b196:	005b      	lsls	r3, r3, #1
 800b198:	b29a      	uxth	r2, r3
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b19e:	7dfb      	ldrb	r3, [r7, #23]
 800b1a0:	68ba      	ldr	r2, [r7, #8]
 800b1a2:	4413      	add	r3, r2
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	7812      	ldrb	r2, [r2, #0]
 800b1a8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b1aa:	7dfb      	ldrb	r3, [r7, #23]
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b1b0:	7dfb      	ldrb	r3, [r7, #23]
 800b1b2:	68ba      	ldr	r2, [r7, #8]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	2203      	movs	r2, #3
 800b1b8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b1ba:	7dfb      	ldrb	r3, [r7, #23]
 800b1bc:	3301      	adds	r3, #1
 800b1be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b1c0:	e013      	b.n	800b1ea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b1c2:	7dfb      	ldrb	r3, [r7, #23]
 800b1c4:	68ba      	ldr	r2, [r7, #8]
 800b1c6:	4413      	add	r3, r2
 800b1c8:	693a      	ldr	r2, [r7, #16]
 800b1ca:	7812      	ldrb	r2, [r2, #0]
 800b1cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	613b      	str	r3, [r7, #16]
    idx++;
 800b1d4:	7dfb      	ldrb	r3, [r7, #23]
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b1da:	7dfb      	ldrb	r3, [r7, #23]
 800b1dc:	68ba      	ldr	r2, [r7, #8]
 800b1de:	4413      	add	r3, r2
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	701a      	strb	r2, [r3, #0]
    idx++;
 800b1e4:	7dfb      	ldrb	r3, [r7, #23]
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d1e7      	bne.n	800b1c2 <USBD_GetString+0x52>
 800b1f2:	e000      	b.n	800b1f6 <USBD_GetString+0x86>
    return;
 800b1f4:	bf00      	nop
  }
}
 800b1f6:	3718      	adds	r7, #24
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b085      	sub	sp, #20
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b204:	2300      	movs	r3, #0
 800b206:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b20c:	e005      	b.n	800b21a <USBD_GetLen+0x1e>
  {
    len++;
 800b20e:	7bfb      	ldrb	r3, [r7, #15]
 800b210:	3301      	adds	r3, #1
 800b212:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	3301      	adds	r3, #1
 800b218:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d1f5      	bne.n	800b20e <USBD_GetLen+0x12>
  }

  return len;
 800b222:	7bfb      	ldrb	r3, [r7, #15]
}
 800b224:	4618      	mov	r0, r3
 800b226:	3714      	adds	r7, #20
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b084      	sub	sp, #16
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2202      	movs	r2, #2
 800b240:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	68ba      	ldr	r2, [r7, #8]
 800b254:	2100      	movs	r1, #0
 800b256:	68f8      	ldr	r0, [r7, #12]
 800b258:	f000 fc51 	bl	800bafe <USBD_LL_Transmit>

  return USBD_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b084      	sub	sp, #16
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	60f8      	str	r0, [r7, #12]
 800b26e:	60b9      	str	r1, [r7, #8]
 800b270:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	68ba      	ldr	r2, [r7, #8]
 800b276:	2100      	movs	r1, #0
 800b278:	68f8      	ldr	r0, [r7, #12]
 800b27a:	f000 fc40 	bl	800bafe <USBD_LL_Transmit>

  return USBD_OK;
 800b27e:	2300      	movs	r3, #0
}
 800b280:	4618      	mov	r0, r3
 800b282:	3710      	adds	r7, #16
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2203      	movs	r2, #3
 800b298:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	687a      	ldr	r2, [r7, #4]
 800b2a8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	68ba      	ldr	r2, [r7, #8]
 800b2b0:	2100      	movs	r1, #0
 800b2b2:	68f8      	ldr	r0, [r7, #12]
 800b2b4:	f000 fc44 	bl	800bb40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2b8:	2300      	movs	r3, #0
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3710      	adds	r7, #16
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}

0800b2c2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b2c2:	b580      	push	{r7, lr}
 800b2c4:	b084      	sub	sp, #16
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	60f8      	str	r0, [r7, #12]
 800b2ca:	60b9      	str	r1, [r7, #8]
 800b2cc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	68ba      	ldr	r2, [r7, #8]
 800b2d2:	2100      	movs	r1, #0
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	f000 fc33 	bl	800bb40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3710      	adds	r7, #16
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2204      	movs	r2, #4
 800b2f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	2100      	movs	r1, #0
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 fbff 	bl	800bafe <USBD_LL_Transmit>

  return USBD_OK;
 800b300:	2300      	movs	r3, #0
}
 800b302:	4618      	mov	r0, r3
 800b304:	3708      	adds	r7, #8
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b082      	sub	sp, #8
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2205      	movs	r2, #5
 800b316:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b31a:	2300      	movs	r3, #0
 800b31c:	2200      	movs	r2, #0
 800b31e:	2100      	movs	r1, #0
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f000 fc0d 	bl	800bb40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b326:	2300      	movs	r3, #0
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3708      	adds	r7, #8
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b334:	2200      	movs	r2, #0
 800b336:	4912      	ldr	r1, [pc, #72]	@ (800b380 <MX_USB_DEVICE_Init+0x50>)
 800b338:	4812      	ldr	r0, [pc, #72]	@ (800b384 <MX_USB_DEVICE_Init+0x54>)
 800b33a:	f7fe fd03 	bl	8009d44 <USBD_Init>
 800b33e:	4603      	mov	r3, r0
 800b340:	2b00      	cmp	r3, #0
 800b342:	d001      	beq.n	800b348 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b344:	f7f7 fa52 	bl	80027ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800b348:	490f      	ldr	r1, [pc, #60]	@ (800b388 <MX_USB_DEVICE_Init+0x58>)
 800b34a:	480e      	ldr	r0, [pc, #56]	@ (800b384 <MX_USB_DEVICE_Init+0x54>)
 800b34c:	f7fe fd2a 	bl	8009da4 <USBD_RegisterClass>
 800b350:	4603      	mov	r3, r0
 800b352:	2b00      	cmp	r3, #0
 800b354:	d001      	beq.n	800b35a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b356:	f7f7 fa49 	bl	80027ec <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800b35a:	490c      	ldr	r1, [pc, #48]	@ (800b38c <MX_USB_DEVICE_Init+0x5c>)
 800b35c:	4809      	ldr	r0, [pc, #36]	@ (800b384 <MX_USB_DEVICE_Init+0x54>)
 800b35e:	f7fe fcd7 	bl	8009d10 <USBD_CUSTOM_HID_RegisterInterface>
 800b362:	4603      	mov	r3, r0
 800b364:	2b00      	cmp	r3, #0
 800b366:	d001      	beq.n	800b36c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b368:	f7f7 fa40 	bl	80027ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b36c:	4805      	ldr	r0, [pc, #20]	@ (800b384 <MX_USB_DEVICE_Init+0x54>)
 800b36e:	f7fe fd4f 	bl	8009e10 <USBD_Start>
 800b372:	4603      	mov	r3, r0
 800b374:	2b00      	cmp	r3, #0
 800b376:	d001      	beq.n	800b37c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b378:	f7f7 fa38 	bl	80027ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b37c:	bf00      	nop
 800b37e:	bd80      	pop	{r7, pc}
 800b380:	200000cc 	.word	0x200000cc
 800b384:	20000658 	.word	0x20000658
 800b388:	2000000c 	.word	0x2000000c
 800b38c:	200000bc 	.word	0x200000bc

0800b390 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800b390:	b480      	push	{r7}
 800b392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b394:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b396:	4618      	mov	r0, r3
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800b3a4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr

0800b3b0 <CUSTOM_HID_OutEvent_FS>:
  * @brief  Manage the CUSTOM HID class events
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t* state)
{
 800b3b0:	b4f0      	push	{r4, r5, r6, r7}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 6 */

	// Copy the reception buffer to report_buffer
	memcpy(report_buffer, state, 64);
 800b3b8:	4a0e      	ldr	r2, [pc, #56]	@ (800b3f4 <CUSTOM_HID_OutEvent_FS+0x44>)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	4610      	mov	r0, r2
 800b3be:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	f8d1 c000 	ldr.w	ip, [r1]
 800b3ca:	684e      	ldr	r6, [r1, #4]
 800b3cc:	688d      	ldr	r5, [r1, #8]
 800b3ce:	68c9      	ldr	r1, [r1, #12]
 800b3d0:	f8c2 c000 	str.w	ip, [r2]
 800b3d4:	6056      	str	r6, [r2, #4]
 800b3d6:	6095      	str	r5, [r2, #8]
 800b3d8:	60d1      	str	r1, [r2, #12]
 800b3da:	3310      	adds	r3, #16
 800b3dc:	3010      	adds	r0, #16
 800b3de:	42a3      	cmp	r3, r4
 800b3e0:	d1ef      	bne.n	800b3c2 <CUSTOM_HID_OutEvent_FS+0x12>

	flag_rx = 1;
 800b3e2:	4b05      	ldr	r3, [pc, #20]	@ (800b3f8 <CUSTOM_HID_OutEvent_FS+0x48>)
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	701a      	strb	r2, [r3, #0]

	return (USBD_OK);
 800b3e8:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3708      	adds	r7, #8
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bcf0      	pop	{r4, r5, r6, r7}
 800b3f2:	4770      	bx	lr
 800b3f4:	2000030c 	.word	0x2000030c
 800b3f8:	2000034c 	.word	0x2000034c

0800b3fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	4603      	mov	r3, r0
 800b404:	6039      	str	r1, [r7, #0]
 800b406:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	2212      	movs	r2, #18
 800b40c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b40e:	4b03      	ldr	r3, [pc, #12]	@ (800b41c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b410:	4618      	mov	r0, r3
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr
 800b41c:	200000e8 	.word	0x200000e8

0800b420 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b420:	b480      	push	{r7}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	4603      	mov	r3, r0
 800b428:	6039      	str	r1, [r7, #0]
 800b42a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	2204      	movs	r2, #4
 800b430:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b432:	4b03      	ldr	r3, [pc, #12]	@ (800b440 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b434:	4618      	mov	r0, r3
 800b436:	370c      	adds	r7, #12
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr
 800b440:	200000fc 	.word	0x200000fc

0800b444 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	4603      	mov	r3, r0
 800b44c:	6039      	str	r1, [r7, #0]
 800b44e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b450:	79fb      	ldrb	r3, [r7, #7]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d105      	bne.n	800b462 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b456:	683a      	ldr	r2, [r7, #0]
 800b458:	4907      	ldr	r1, [pc, #28]	@ (800b478 <USBD_FS_ProductStrDescriptor+0x34>)
 800b45a:	4808      	ldr	r0, [pc, #32]	@ (800b47c <USBD_FS_ProductStrDescriptor+0x38>)
 800b45c:	f7ff fe88 	bl	800b170 <USBD_GetString>
 800b460:	e004      	b.n	800b46c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b462:	683a      	ldr	r2, [r7, #0]
 800b464:	4904      	ldr	r1, [pc, #16]	@ (800b478 <USBD_FS_ProductStrDescriptor+0x34>)
 800b466:	4805      	ldr	r0, [pc, #20]	@ (800b47c <USBD_FS_ProductStrDescriptor+0x38>)
 800b468:	f7ff fe82 	bl	800b170 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b46c:	4b02      	ldr	r3, [pc, #8]	@ (800b478 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3708      	adds	r7, #8
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	20000934 	.word	0x20000934
 800b47c:	0800f718 	.word	0x0800f718

0800b480 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
 800b486:	4603      	mov	r3, r0
 800b488:	6039      	str	r1, [r7, #0]
 800b48a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b48c:	683a      	ldr	r2, [r7, #0]
 800b48e:	4904      	ldr	r1, [pc, #16]	@ (800b4a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b490:	4804      	ldr	r0, [pc, #16]	@ (800b4a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b492:	f7ff fe6d 	bl	800b170 <USBD_GetString>
  return USBD_StrDesc;
 800b496:	4b02      	ldr	r3, [pc, #8]	@ (800b4a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3708      	adds	r7, #8
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	20000934 	.word	0x20000934
 800b4a4:	0800f738 	.word	0x0800f738

0800b4a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	6039      	str	r1, [r7, #0]
 800b4b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	221a      	movs	r2, #26
 800b4b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b4ba:	f000 f843 	bl	800b544 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b4be:	4b02      	ldr	r3, [pc, #8]	@ (800b4c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3708      	adds	r7, #8
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	20000100 	.word	0x20000100

0800b4cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b082      	sub	sp, #8
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	6039      	str	r1, [r7, #0]
 800b4d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b4d8:	79fb      	ldrb	r3, [r7, #7]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d105      	bne.n	800b4ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b4de:	683a      	ldr	r2, [r7, #0]
 800b4e0:	4907      	ldr	r1, [pc, #28]	@ (800b500 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b4e2:	4808      	ldr	r0, [pc, #32]	@ (800b504 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b4e4:	f7ff fe44 	bl	800b170 <USBD_GetString>
 800b4e8:	e004      	b.n	800b4f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b4ea:	683a      	ldr	r2, [r7, #0]
 800b4ec:	4904      	ldr	r1, [pc, #16]	@ (800b500 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b4ee:	4805      	ldr	r0, [pc, #20]	@ (800b504 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b4f0:	f7ff fe3e 	bl	800b170 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4f4:	4b02      	ldr	r3, [pc, #8]	@ (800b500 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3708      	adds	r7, #8
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	20000934 	.word	0x20000934
 800b504:	0800f74c 	.word	0x0800f74c

0800b508 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	4603      	mov	r3, r0
 800b510:	6039      	str	r1, [r7, #0]
 800b512:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b514:	79fb      	ldrb	r3, [r7, #7]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d105      	bne.n	800b526 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b51a:	683a      	ldr	r2, [r7, #0]
 800b51c:	4907      	ldr	r1, [pc, #28]	@ (800b53c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b51e:	4808      	ldr	r0, [pc, #32]	@ (800b540 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b520:	f7ff fe26 	bl	800b170 <USBD_GetString>
 800b524:	e004      	b.n	800b530 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b526:	683a      	ldr	r2, [r7, #0]
 800b528:	4904      	ldr	r1, [pc, #16]	@ (800b53c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b52a:	4805      	ldr	r0, [pc, #20]	@ (800b540 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b52c:	f7ff fe20 	bl	800b170 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b530:	4b02      	ldr	r3, [pc, #8]	@ (800b53c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b532:	4618      	mov	r0, r3
 800b534:	3708      	adds	r7, #8
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	20000934 	.word	0x20000934
 800b540:	0800f760 	.word	0x0800f760

0800b544 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b54a:	4b0f      	ldr	r3, [pc, #60]	@ (800b588 <Get_SerialNum+0x44>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b550:	4b0e      	ldr	r3, [pc, #56]	@ (800b58c <Get_SerialNum+0x48>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b556:	4b0e      	ldr	r3, [pc, #56]	@ (800b590 <Get_SerialNum+0x4c>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b55c:	68fa      	ldr	r2, [r7, #12]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	4413      	add	r3, r2
 800b562:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d009      	beq.n	800b57e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b56a:	2208      	movs	r2, #8
 800b56c:	4909      	ldr	r1, [pc, #36]	@ (800b594 <Get_SerialNum+0x50>)
 800b56e:	68f8      	ldr	r0, [r7, #12]
 800b570:	f000 f814 	bl	800b59c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b574:	2204      	movs	r2, #4
 800b576:	4908      	ldr	r1, [pc, #32]	@ (800b598 <Get_SerialNum+0x54>)
 800b578:	68b8      	ldr	r0, [r7, #8]
 800b57a:	f000 f80f 	bl	800b59c <IntToUnicode>
  }
}
 800b57e:	bf00      	nop
 800b580:	3710      	adds	r7, #16
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	1fff7a10 	.word	0x1fff7a10
 800b58c:	1fff7a14 	.word	0x1fff7a14
 800b590:	1fff7a18 	.word	0x1fff7a18
 800b594:	20000102 	.word	0x20000102
 800b598:	20000112 	.word	0x20000112

0800b59c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b087      	sub	sp, #28
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	4613      	mov	r3, r2
 800b5a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	75fb      	strb	r3, [r7, #23]
 800b5b2:	e027      	b.n	800b604 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	0f1b      	lsrs	r3, r3, #28
 800b5b8:	2b09      	cmp	r3, #9
 800b5ba:	d80b      	bhi.n	800b5d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	0f1b      	lsrs	r3, r3, #28
 800b5c0:	b2da      	uxtb	r2, r3
 800b5c2:	7dfb      	ldrb	r3, [r7, #23]
 800b5c4:	005b      	lsls	r3, r3, #1
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	440b      	add	r3, r1
 800b5cc:	3230      	adds	r2, #48	@ 0x30
 800b5ce:	b2d2      	uxtb	r2, r2
 800b5d0:	701a      	strb	r2, [r3, #0]
 800b5d2:	e00a      	b.n	800b5ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	0f1b      	lsrs	r3, r3, #28
 800b5d8:	b2da      	uxtb	r2, r3
 800b5da:	7dfb      	ldrb	r3, [r7, #23]
 800b5dc:	005b      	lsls	r3, r3, #1
 800b5de:	4619      	mov	r1, r3
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	440b      	add	r3, r1
 800b5e4:	3237      	adds	r2, #55	@ 0x37
 800b5e6:	b2d2      	uxtb	r2, r2
 800b5e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	011b      	lsls	r3, r3, #4
 800b5ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b5f0:	7dfb      	ldrb	r3, [r7, #23]
 800b5f2:	005b      	lsls	r3, r3, #1
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	68ba      	ldr	r2, [r7, #8]
 800b5f8:	4413      	add	r3, r2
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b5fe:	7dfb      	ldrb	r3, [r7, #23]
 800b600:	3301      	adds	r3, #1
 800b602:	75fb      	strb	r3, [r7, #23]
 800b604:	7dfa      	ldrb	r2, [r7, #23]
 800b606:	79fb      	ldrb	r3, [r7, #7]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d3d3      	bcc.n	800b5b4 <IntToUnicode+0x18>
  }
}
 800b60c:	bf00      	nop
 800b60e:	bf00      	nop
 800b610:	371c      	adds	r7, #28
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr
	...

0800b61c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b08a      	sub	sp, #40	@ 0x28
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b624:	f107 0314 	add.w	r3, r7, #20
 800b628:	2200      	movs	r2, #0
 800b62a:	601a      	str	r2, [r3, #0]
 800b62c:	605a      	str	r2, [r3, #4]
 800b62e:	609a      	str	r2, [r3, #8]
 800b630:	60da      	str	r2, [r3, #12]
 800b632:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b63c:	d13a      	bne.n	800b6b4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b63e:	2300      	movs	r3, #0
 800b640:	613b      	str	r3, [r7, #16]
 800b642:	4b1e      	ldr	r3, [pc, #120]	@ (800b6bc <HAL_PCD_MspInit+0xa0>)
 800b644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b646:	4a1d      	ldr	r2, [pc, #116]	@ (800b6bc <HAL_PCD_MspInit+0xa0>)
 800b648:	f043 0301 	orr.w	r3, r3, #1
 800b64c:	6313      	str	r3, [r2, #48]	@ 0x30
 800b64e:	4b1b      	ldr	r3, [pc, #108]	@ (800b6bc <HAL_PCD_MspInit+0xa0>)
 800b650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b652:	f003 0301 	and.w	r3, r3, #1
 800b656:	613b      	str	r3, [r7, #16]
 800b658:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b65a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b65e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b660:	2302      	movs	r3, #2
 800b662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b664:	2300      	movs	r3, #0
 800b666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b668:	2303      	movs	r3, #3
 800b66a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b66c:	230a      	movs	r3, #10
 800b66e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b670:	f107 0314 	add.w	r3, r7, #20
 800b674:	4619      	mov	r1, r3
 800b676:	4812      	ldr	r0, [pc, #72]	@ (800b6c0 <HAL_PCD_MspInit+0xa4>)
 800b678:	f7f7 fff4 	bl	8003664 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b67c:	4b0f      	ldr	r3, [pc, #60]	@ (800b6bc <HAL_PCD_MspInit+0xa0>)
 800b67e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b680:	4a0e      	ldr	r2, [pc, #56]	@ (800b6bc <HAL_PCD_MspInit+0xa0>)
 800b682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b686:	6353      	str	r3, [r2, #52]	@ 0x34
 800b688:	2300      	movs	r3, #0
 800b68a:	60fb      	str	r3, [r7, #12]
 800b68c:	4b0b      	ldr	r3, [pc, #44]	@ (800b6bc <HAL_PCD_MspInit+0xa0>)
 800b68e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b690:	4a0a      	ldr	r2, [pc, #40]	@ (800b6bc <HAL_PCD_MspInit+0xa0>)
 800b692:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b696:	6453      	str	r3, [r2, #68]	@ 0x44
 800b698:	4b08      	ldr	r3, [pc, #32]	@ (800b6bc <HAL_PCD_MspInit+0xa0>)
 800b69a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b69c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b6a0:	60fb      	str	r3, [r7, #12]
 800b6a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	2100      	movs	r1, #0
 800b6a8:	2043      	movs	r0, #67	@ 0x43
 800b6aa:	f7f7 ffa4 	bl	80035f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b6ae:	2043      	movs	r0, #67	@ 0x43
 800b6b0:	f7f7 ffbd 	bl	800362e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b6b4:	bf00      	nop
 800b6b6:	3728      	adds	r7, #40	@ 0x28
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	40023800 	.word	0x40023800
 800b6c0:	40020000 	.word	0x40020000

0800b6c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b6d8:	4619      	mov	r1, r3
 800b6da:	4610      	mov	r0, r2
 800b6dc:	f7fe fbe5 	bl	8009eaa <USBD_LL_SetupStage>
}
 800b6e0:	bf00      	nop
 800b6e2:	3708      	adds	r7, #8
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b6fa:	78fa      	ldrb	r2, [r7, #3]
 800b6fc:	6879      	ldr	r1, [r7, #4]
 800b6fe:	4613      	mov	r3, r2
 800b700:	00db      	lsls	r3, r3, #3
 800b702:	4413      	add	r3, r2
 800b704:	009b      	lsls	r3, r3, #2
 800b706:	440b      	add	r3, r1
 800b708:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b70c:	681a      	ldr	r2, [r3, #0]
 800b70e:	78fb      	ldrb	r3, [r7, #3]
 800b710:	4619      	mov	r1, r3
 800b712:	f7fe fc1f 	bl	8009f54 <USBD_LL_DataOutStage>
}
 800b716:	bf00      	nop
 800b718:	3708      	adds	r7, #8
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}

0800b71e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b71e:	b580      	push	{r7, lr}
 800b720:	b082      	sub	sp, #8
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
 800b726:	460b      	mov	r3, r1
 800b728:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b730:	78fa      	ldrb	r2, [r7, #3]
 800b732:	6879      	ldr	r1, [r7, #4]
 800b734:	4613      	mov	r3, r2
 800b736:	00db      	lsls	r3, r3, #3
 800b738:	4413      	add	r3, r2
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	440b      	add	r3, r1
 800b73e:	3320      	adds	r3, #32
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	78fb      	ldrb	r3, [r7, #3]
 800b744:	4619      	mov	r1, r3
 800b746:	f7fe fcb8 	bl	800a0ba <USBD_LL_DataInStage>
}
 800b74a:	bf00      	nop
 800b74c:	3708      	adds	r7, #8
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}

0800b752 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b752:	b580      	push	{r7, lr}
 800b754:	b082      	sub	sp, #8
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b760:	4618      	mov	r0, r3
 800b762:	f7fe fdf2 	bl	800a34a <USBD_LL_SOF>
}
 800b766:	bf00      	nop
 800b768:	3708      	adds	r7, #8
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}

0800b76e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b76e:	b580      	push	{r7, lr}
 800b770:	b084      	sub	sp, #16
 800b772:	af00      	add	r7, sp, #0
 800b774:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b776:	2301      	movs	r3, #1
 800b778:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	79db      	ldrb	r3, [r3, #7]
 800b77e:	2b02      	cmp	r3, #2
 800b780:	d001      	beq.n	800b786 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b782:	f7f7 f833 	bl	80027ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b78c:	7bfa      	ldrb	r2, [r7, #15]
 800b78e:	4611      	mov	r1, r2
 800b790:	4618      	mov	r0, r3
 800b792:	f7fe fd96 	bl	800a2c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b79c:	4618      	mov	r0, r3
 800b79e:	f7fe fd3e 	bl	800a21e <USBD_LL_Reset>
}
 800b7a2:	bf00      	nop
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
	...

0800b7ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7fe fd91 	bl	800a2e2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	6812      	ldr	r2, [r2, #0]
 800b7ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b7d2:	f043 0301 	orr.w	r3, r3, #1
 800b7d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	7adb      	ldrb	r3, [r3, #11]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d005      	beq.n	800b7ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b7e0:	4b04      	ldr	r3, [pc, #16]	@ (800b7f4 <HAL_PCD_SuspendCallback+0x48>)
 800b7e2:	691b      	ldr	r3, [r3, #16]
 800b7e4:	4a03      	ldr	r2, [pc, #12]	@ (800b7f4 <HAL_PCD_SuspendCallback+0x48>)
 800b7e6:	f043 0306 	orr.w	r3, r3, #6
 800b7ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b7ec:	bf00      	nop
 800b7ee:	3708      	adds	r7, #8
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	e000ed00 	.word	0xe000ed00

0800b7f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b806:	4618      	mov	r0, r3
 800b808:	f7fe fd87 	bl	800a31a <USBD_LL_Resume>
}
 800b80c:	bf00      	nop
 800b80e:	3708      	adds	r7, #8
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	460b      	mov	r3, r1
 800b81e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b826:	78fa      	ldrb	r2, [r7, #3]
 800b828:	4611      	mov	r1, r2
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7fe fddf 	bl	800a3ee <USBD_LL_IsoOUTIncomplete>
}
 800b830:	bf00      	nop
 800b832:	3708      	adds	r7, #8
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	460b      	mov	r3, r1
 800b842:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b84a:	78fa      	ldrb	r2, [r7, #3]
 800b84c:	4611      	mov	r1, r2
 800b84e:	4618      	mov	r0, r3
 800b850:	f7fe fd9b 	bl	800a38a <USBD_LL_IsoINIncomplete>
}
 800b854:	bf00      	nop
 800b856:	3708      	adds	r7, #8
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b082      	sub	sp, #8
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7fe fdf1 	bl	800a452 <USBD_LL_DevConnected>
}
 800b870:	bf00      	nop
 800b872:	3708      	adds	r7, #8
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b886:	4618      	mov	r0, r3
 800b888:	f7fe fdee 	bl	800a468 <USBD_LL_DevDisconnected>
}
 800b88c:	bf00      	nop
 800b88e:	3708      	adds	r7, #8
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d13c      	bne.n	800b91e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b8a4:	4a20      	ldr	r2, [pc, #128]	@ (800b928 <USBD_LL_Init+0x94>)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	4a1e      	ldr	r2, [pc, #120]	@ (800b928 <USBD_LL_Init+0x94>)
 800b8b0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b8b4:	4b1c      	ldr	r3, [pc, #112]	@ (800b928 <USBD_LL_Init+0x94>)
 800b8b6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b8ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b8bc:	4b1a      	ldr	r3, [pc, #104]	@ (800b928 <USBD_LL_Init+0x94>)
 800b8be:	2204      	movs	r2, #4
 800b8c0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b8c2:	4b19      	ldr	r3, [pc, #100]	@ (800b928 <USBD_LL_Init+0x94>)
 800b8c4:	2202      	movs	r2, #2
 800b8c6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b8c8:	4b17      	ldr	r3, [pc, #92]	@ (800b928 <USBD_LL_Init+0x94>)
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b8ce:	4b16      	ldr	r3, [pc, #88]	@ (800b928 <USBD_LL_Init+0x94>)
 800b8d0:	2202      	movs	r2, #2
 800b8d2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b8d4:	4b14      	ldr	r3, [pc, #80]	@ (800b928 <USBD_LL_Init+0x94>)
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b8da:	4b13      	ldr	r3, [pc, #76]	@ (800b928 <USBD_LL_Init+0x94>)
 800b8dc:	2200      	movs	r2, #0
 800b8de:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b8e0:	4b11      	ldr	r3, [pc, #68]	@ (800b928 <USBD_LL_Init+0x94>)
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b8e6:	4b10      	ldr	r3, [pc, #64]	@ (800b928 <USBD_LL_Init+0x94>)
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b8ec:	4b0e      	ldr	r3, [pc, #56]	@ (800b928 <USBD_LL_Init+0x94>)
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b8f2:	480d      	ldr	r0, [pc, #52]	@ (800b928 <USBD_LL_Init+0x94>)
 800b8f4:	f7f9 f866 	bl	80049c4 <HAL_PCD_Init>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d001      	beq.n	800b902 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b8fe:	f7f6 ff75 	bl	80027ec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b902:	2180      	movs	r1, #128	@ 0x80
 800b904:	4808      	ldr	r0, [pc, #32]	@ (800b928 <USBD_LL_Init+0x94>)
 800b906:	f7fa fa78 	bl	8005dfa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b90a:	2240      	movs	r2, #64	@ 0x40
 800b90c:	2100      	movs	r1, #0
 800b90e:	4806      	ldr	r0, [pc, #24]	@ (800b928 <USBD_LL_Init+0x94>)
 800b910:	f7fa fa2c 	bl	8005d6c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b914:	2280      	movs	r2, #128	@ 0x80
 800b916:	2101      	movs	r1, #1
 800b918:	4803      	ldr	r0, [pc, #12]	@ (800b928 <USBD_LL_Init+0x94>)
 800b91a:	f7fa fa27 	bl	8005d6c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b91e:	2300      	movs	r3, #0
}
 800b920:	4618      	mov	r0, r3
 800b922:	3708      	adds	r7, #8
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	20000b34 	.word	0x20000b34

0800b92c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b934:	2300      	movs	r3, #0
 800b936:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b938:	2300      	movs	r3, #0
 800b93a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b942:	4618      	mov	r0, r3
 800b944:	f7f9 f94d 	bl	8004be2 <HAL_PCD_Start>
 800b948:	4603      	mov	r3, r0
 800b94a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b94c:	7bfb      	ldrb	r3, [r7, #15]
 800b94e:	4618      	mov	r0, r3
 800b950:	f000 f930 	bl	800bbb4 <USBD_Get_USB_Status>
 800b954:	4603      	mov	r3, r0
 800b956:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b958:	7bbb      	ldrb	r3, [r7, #14]
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3710      	adds	r7, #16
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}

0800b962 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b962:	b580      	push	{r7, lr}
 800b964:	b084      	sub	sp, #16
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
 800b96a:	4608      	mov	r0, r1
 800b96c:	4611      	mov	r1, r2
 800b96e:	461a      	mov	r2, r3
 800b970:	4603      	mov	r3, r0
 800b972:	70fb      	strb	r3, [r7, #3]
 800b974:	460b      	mov	r3, r1
 800b976:	70bb      	strb	r3, [r7, #2]
 800b978:	4613      	mov	r3, r2
 800b97a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b97c:	2300      	movs	r3, #0
 800b97e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b980:	2300      	movs	r3, #0
 800b982:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b98a:	78bb      	ldrb	r3, [r7, #2]
 800b98c:	883a      	ldrh	r2, [r7, #0]
 800b98e:	78f9      	ldrb	r1, [r7, #3]
 800b990:	f7f9 fe21 	bl	80055d6 <HAL_PCD_EP_Open>
 800b994:	4603      	mov	r3, r0
 800b996:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b998:	7bfb      	ldrb	r3, [r7, #15]
 800b99a:	4618      	mov	r0, r3
 800b99c:	f000 f90a 	bl	800bbb4 <USBD_Get_USB_Status>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b084      	sub	sp, #16
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b9c8:	78fa      	ldrb	r2, [r7, #3]
 800b9ca:	4611      	mov	r1, r2
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7f9 fe6a 	bl	80056a6 <HAL_PCD_EP_Close>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9d6:	7bfb      	ldrb	r3, [r7, #15]
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f000 f8eb 	bl	800bbb4 <USBD_Get_USB_Status>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3710      	adds	r7, #16
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba06:	78fa      	ldrb	r2, [r7, #3]
 800ba08:	4611      	mov	r1, r2
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7f9 ff0a 	bl	8005824 <HAL_PCD_EP_SetStall>
 800ba10:	4603      	mov	r3, r0
 800ba12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba14:	7bfb      	ldrb	r3, [r7, #15]
 800ba16:	4618      	mov	r0, r3
 800ba18:	f000 f8cc 	bl	800bbb4 <USBD_Get_USB_Status>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba20:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3710      	adds	r7, #16
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}

0800ba2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba2a:	b580      	push	{r7, lr}
 800ba2c:	b084      	sub	sp, #16
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
 800ba32:	460b      	mov	r3, r1
 800ba34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba36:	2300      	movs	r3, #0
 800ba38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba44:	78fa      	ldrb	r2, [r7, #3]
 800ba46:	4611      	mov	r1, r2
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f7f9 ff4e 	bl	80058ea <HAL_PCD_EP_ClrStall>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba52:	7bfb      	ldrb	r3, [r7, #15]
 800ba54:	4618      	mov	r0, r3
 800ba56:	f000 f8ad 	bl	800bbb4 <USBD_Get_USB_Status>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	460b      	mov	r3, r1
 800ba72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ba7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	da0b      	bge.n	800ba9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ba84:	78fb      	ldrb	r3, [r7, #3]
 800ba86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ba8a:	68f9      	ldr	r1, [r7, #12]
 800ba8c:	4613      	mov	r3, r2
 800ba8e:	00db      	lsls	r3, r3, #3
 800ba90:	4413      	add	r3, r2
 800ba92:	009b      	lsls	r3, r3, #2
 800ba94:	440b      	add	r3, r1
 800ba96:	3316      	adds	r3, #22
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	e00b      	b.n	800bab4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ba9c:	78fb      	ldrb	r3, [r7, #3]
 800ba9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800baa2:	68f9      	ldr	r1, [r7, #12]
 800baa4:	4613      	mov	r3, r2
 800baa6:	00db      	lsls	r3, r3, #3
 800baa8:	4413      	add	r3, r2
 800baaa:	009b      	lsls	r3, r3, #2
 800baac:	440b      	add	r3, r1
 800baae:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800bab2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3714      	adds	r7, #20
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr

0800bac0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	460b      	mov	r3, r1
 800baca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bacc:	2300      	movs	r3, #0
 800bace:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bad0:	2300      	movs	r3, #0
 800bad2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bada:	78fa      	ldrb	r2, [r7, #3]
 800badc:	4611      	mov	r1, r2
 800bade:	4618      	mov	r0, r3
 800bae0:	f7f9 fd55 	bl	800558e <HAL_PCD_SetAddress>
 800bae4:	4603      	mov	r3, r0
 800bae6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bae8:	7bfb      	ldrb	r3, [r7, #15]
 800baea:	4618      	mov	r0, r3
 800baec:	f000 f862 	bl	800bbb4 <USBD_Get_USB_Status>
 800baf0:	4603      	mov	r3, r0
 800baf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800baf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b086      	sub	sp, #24
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	60f8      	str	r0, [r7, #12]
 800bb06:	607a      	str	r2, [r7, #4]
 800bb08:	603b      	str	r3, [r7, #0]
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb12:	2300      	movs	r3, #0
 800bb14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bb1c:	7af9      	ldrb	r1, [r7, #11]
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	f7f9 fe45 	bl	80057b0 <HAL_PCD_EP_Transmit>
 800bb26:	4603      	mov	r3, r0
 800bb28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb2a:	7dfb      	ldrb	r3, [r7, #23]
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f000 f841 	bl	800bbb4 <USBD_Get_USB_Status>
 800bb32:	4603      	mov	r3, r0
 800bb34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb36:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3718      	adds	r7, #24
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}

0800bb40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b086      	sub	sp, #24
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	60f8      	str	r0, [r7, #12]
 800bb48:	607a      	str	r2, [r7, #4]
 800bb4a:	603b      	str	r3, [r7, #0]
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb50:	2300      	movs	r3, #0
 800bb52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb54:	2300      	movs	r3, #0
 800bb56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bb5e:	7af9      	ldrb	r1, [r7, #11]
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	f7f9 fde9 	bl	800573a <HAL_PCD_EP_Receive>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb6c:	7dfb      	ldrb	r3, [r7, #23]
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f000 f820 	bl	800bbb4 <USBD_Get_USB_Status>
 800bb74:	4603      	mov	r3, r0
 800bb76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb78:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3718      	adds	r7, #24
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
	...

0800bb84 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b083      	sub	sp, #12
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800bb8c:	4b03      	ldr	r3, [pc, #12]	@ (800bb9c <USBD_static_malloc+0x18>)
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	370c      	adds	r7, #12
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr
 800bb9a:	bf00      	nop
 800bb9c:	20001018 	.word	0x20001018

0800bba0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b083      	sub	sp, #12
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]

}
 800bba8:	bf00      	nop
 800bbaa:	370c      	adds	r7, #12
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr

0800bbb4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b085      	sub	sp, #20
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	4603      	mov	r3, r0
 800bbbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bbc2:	79fb      	ldrb	r3, [r7, #7]
 800bbc4:	2b03      	cmp	r3, #3
 800bbc6:	d817      	bhi.n	800bbf8 <USBD_Get_USB_Status+0x44>
 800bbc8:	a201      	add	r2, pc, #4	@ (adr r2, 800bbd0 <USBD_Get_USB_Status+0x1c>)
 800bbca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbce:	bf00      	nop
 800bbd0:	0800bbe1 	.word	0x0800bbe1
 800bbd4:	0800bbe7 	.word	0x0800bbe7
 800bbd8:	0800bbed 	.word	0x0800bbed
 800bbdc:	0800bbf3 	.word	0x0800bbf3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	73fb      	strb	r3, [r7, #15]
    break;
 800bbe4:	e00b      	b.n	800bbfe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bbe6:	2303      	movs	r3, #3
 800bbe8:	73fb      	strb	r3, [r7, #15]
    break;
 800bbea:	e008      	b.n	800bbfe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bbec:	2301      	movs	r3, #1
 800bbee:	73fb      	strb	r3, [r7, #15]
    break;
 800bbf0:	e005      	b.n	800bbfe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bbf2:	2303      	movs	r3, #3
 800bbf4:	73fb      	strb	r3, [r7, #15]
    break;
 800bbf6:	e002      	b.n	800bbfe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bbf8:	2303      	movs	r3, #3
 800bbfa:	73fb      	strb	r3, [r7, #15]
    break;
 800bbfc:	bf00      	nop
  }
  return usb_status;
 800bbfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3714      	adds	r7, #20
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr

0800bc0c <powf>:
 800bc0c:	b508      	push	{r3, lr}
 800bc0e:	ed2d 8b04 	vpush	{d8-d9}
 800bc12:	eeb0 8a60 	vmov.f32	s16, s1
 800bc16:	eeb0 9a40 	vmov.f32	s18, s0
 800bc1a:	f000 f93f 	bl	800be9c <__ieee754_powf>
 800bc1e:	eeb4 8a48 	vcmp.f32	s16, s16
 800bc22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc26:	eef0 8a40 	vmov.f32	s17, s0
 800bc2a:	d63e      	bvs.n	800bcaa <powf+0x9e>
 800bc2c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800bc30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc34:	d112      	bne.n	800bc5c <powf+0x50>
 800bc36:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bc3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc3e:	d039      	beq.n	800bcb4 <powf+0xa8>
 800bc40:	eeb0 0a48 	vmov.f32	s0, s16
 800bc44:	f000 f880 	bl	800bd48 <finitef>
 800bc48:	b378      	cbz	r0, 800bcaa <powf+0x9e>
 800bc4a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bc4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc52:	d52a      	bpl.n	800bcaa <powf+0x9e>
 800bc54:	f001 ff12 	bl	800da7c <__errno>
 800bc58:	2322      	movs	r3, #34	@ 0x22
 800bc5a:	e014      	b.n	800bc86 <powf+0x7a>
 800bc5c:	f000 f874 	bl	800bd48 <finitef>
 800bc60:	b998      	cbnz	r0, 800bc8a <powf+0x7e>
 800bc62:	eeb0 0a49 	vmov.f32	s0, s18
 800bc66:	f000 f86f 	bl	800bd48 <finitef>
 800bc6a:	b170      	cbz	r0, 800bc8a <powf+0x7e>
 800bc6c:	eeb0 0a48 	vmov.f32	s0, s16
 800bc70:	f000 f86a 	bl	800bd48 <finitef>
 800bc74:	b148      	cbz	r0, 800bc8a <powf+0x7e>
 800bc76:	eef4 8a68 	vcmp.f32	s17, s17
 800bc7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc7e:	d7e9      	bvc.n	800bc54 <powf+0x48>
 800bc80:	f001 fefc 	bl	800da7c <__errno>
 800bc84:	2321      	movs	r3, #33	@ 0x21
 800bc86:	6003      	str	r3, [r0, #0]
 800bc88:	e00f      	b.n	800bcaa <powf+0x9e>
 800bc8a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800bc8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc92:	d10a      	bne.n	800bcaa <powf+0x9e>
 800bc94:	eeb0 0a49 	vmov.f32	s0, s18
 800bc98:	f000 f856 	bl	800bd48 <finitef>
 800bc9c:	b128      	cbz	r0, 800bcaa <powf+0x9e>
 800bc9e:	eeb0 0a48 	vmov.f32	s0, s16
 800bca2:	f000 f851 	bl	800bd48 <finitef>
 800bca6:	2800      	cmp	r0, #0
 800bca8:	d1d4      	bne.n	800bc54 <powf+0x48>
 800bcaa:	eeb0 0a68 	vmov.f32	s0, s17
 800bcae:	ecbd 8b04 	vpop	{d8-d9}
 800bcb2:	bd08      	pop	{r3, pc}
 800bcb4:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800bcb8:	e7f7      	b.n	800bcaa <powf+0x9e>
	...

0800bcbc <sinf>:
 800bcbc:	ee10 3a10 	vmov	r3, s0
 800bcc0:	b507      	push	{r0, r1, r2, lr}
 800bcc2:	4a1f      	ldr	r2, [pc, #124]	@ (800bd40 <sinf+0x84>)
 800bcc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d807      	bhi.n	800bcdc <sinf+0x20>
 800bccc:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800bd44 <sinf+0x88>
 800bcd0:	2000      	movs	r0, #0
 800bcd2:	b003      	add	sp, #12
 800bcd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcd8:	f000 b898 	b.w	800be0c <__kernel_sinf>
 800bcdc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bce0:	d304      	bcc.n	800bcec <sinf+0x30>
 800bce2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bce6:	b003      	add	sp, #12
 800bce8:	f85d fb04 	ldr.w	pc, [sp], #4
 800bcec:	4668      	mov	r0, sp
 800bcee:	f000 fba5 	bl	800c43c <__ieee754_rem_pio2f>
 800bcf2:	f000 0003 	and.w	r0, r0, #3
 800bcf6:	2801      	cmp	r0, #1
 800bcf8:	d00a      	beq.n	800bd10 <sinf+0x54>
 800bcfa:	2802      	cmp	r0, #2
 800bcfc:	d00f      	beq.n	800bd1e <sinf+0x62>
 800bcfe:	b9c0      	cbnz	r0, 800bd32 <sinf+0x76>
 800bd00:	eddd 0a01 	vldr	s1, [sp, #4]
 800bd04:	ed9d 0a00 	vldr	s0, [sp]
 800bd08:	2001      	movs	r0, #1
 800bd0a:	f000 f87f 	bl	800be0c <__kernel_sinf>
 800bd0e:	e7ea      	b.n	800bce6 <sinf+0x2a>
 800bd10:	eddd 0a01 	vldr	s1, [sp, #4]
 800bd14:	ed9d 0a00 	vldr	s0, [sp]
 800bd18:	f000 f820 	bl	800bd5c <__kernel_cosf>
 800bd1c:	e7e3      	b.n	800bce6 <sinf+0x2a>
 800bd1e:	eddd 0a01 	vldr	s1, [sp, #4]
 800bd22:	ed9d 0a00 	vldr	s0, [sp]
 800bd26:	2001      	movs	r0, #1
 800bd28:	f000 f870 	bl	800be0c <__kernel_sinf>
 800bd2c:	eeb1 0a40 	vneg.f32	s0, s0
 800bd30:	e7d9      	b.n	800bce6 <sinf+0x2a>
 800bd32:	eddd 0a01 	vldr	s1, [sp, #4]
 800bd36:	ed9d 0a00 	vldr	s0, [sp]
 800bd3a:	f000 f80f 	bl	800bd5c <__kernel_cosf>
 800bd3e:	e7f5      	b.n	800bd2c <sinf+0x70>
 800bd40:	3f490fd8 	.word	0x3f490fd8
 800bd44:	00000000 	.word	0x00000000

0800bd48 <finitef>:
 800bd48:	ee10 3a10 	vmov	r3, s0
 800bd4c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800bd50:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800bd54:	bfac      	ite	ge
 800bd56:	2000      	movge	r0, #0
 800bd58:	2001      	movlt	r0, #1
 800bd5a:	4770      	bx	lr

0800bd5c <__kernel_cosf>:
 800bd5c:	ee10 3a10 	vmov	r3, s0
 800bd60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bd64:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800bd68:	eef0 6a40 	vmov.f32	s13, s0
 800bd6c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bd70:	d204      	bcs.n	800bd7c <__kernel_cosf+0x20>
 800bd72:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800bd76:	ee17 2a90 	vmov	r2, s15
 800bd7a:	b342      	cbz	r2, 800bdce <__kernel_cosf+0x72>
 800bd7c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800bd80:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800bdec <__kernel_cosf+0x90>
 800bd84:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800bdf0 <__kernel_cosf+0x94>
 800bd88:	4a1a      	ldr	r2, [pc, #104]	@ (800bdf4 <__kernel_cosf+0x98>)
 800bd8a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bdf8 <__kernel_cosf+0x9c>
 800bd94:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bd98:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800bdfc <__kernel_cosf+0xa0>
 800bd9c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bda0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800be00 <__kernel_cosf+0xa4>
 800bda4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bda8:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800be04 <__kernel_cosf+0xa8>
 800bdac:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bdb0:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800bdb4:	ee26 6a07 	vmul.f32	s12, s12, s14
 800bdb8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bdbc:	eee7 0a06 	vfma.f32	s1, s14, s12
 800bdc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdc4:	d804      	bhi.n	800bdd0 <__kernel_cosf+0x74>
 800bdc6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800bdca:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bdce:	4770      	bx	lr
 800bdd0:	4a0d      	ldr	r2, [pc, #52]	@ (800be08 <__kernel_cosf+0xac>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	bf9a      	itte	ls
 800bdd6:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800bdda:	ee07 3a10 	vmovls	s14, r3
 800bdde:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800bde2:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bde6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bdea:	e7ec      	b.n	800bdc6 <__kernel_cosf+0x6a>
 800bdec:	ad47d74e 	.word	0xad47d74e
 800bdf0:	310f74f6 	.word	0x310f74f6
 800bdf4:	3e999999 	.word	0x3e999999
 800bdf8:	b493f27c 	.word	0xb493f27c
 800bdfc:	37d00d01 	.word	0x37d00d01
 800be00:	bab60b61 	.word	0xbab60b61
 800be04:	3d2aaaab 	.word	0x3d2aaaab
 800be08:	3f480000 	.word	0x3f480000

0800be0c <__kernel_sinf>:
 800be0c:	ee10 3a10 	vmov	r3, s0
 800be10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800be14:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800be18:	d204      	bcs.n	800be24 <__kernel_sinf+0x18>
 800be1a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800be1e:	ee17 3a90 	vmov	r3, s15
 800be22:	b35b      	cbz	r3, 800be7c <__kernel_sinf+0x70>
 800be24:	ee20 7a00 	vmul.f32	s14, s0, s0
 800be28:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800be80 <__kernel_sinf+0x74>
 800be2c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800be84 <__kernel_sinf+0x78>
 800be30:	eea7 6a27 	vfma.f32	s12, s14, s15
 800be34:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800be88 <__kernel_sinf+0x7c>
 800be38:	eee6 7a07 	vfma.f32	s15, s12, s14
 800be3c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800be8c <__kernel_sinf+0x80>
 800be40:	eea7 6a87 	vfma.f32	s12, s15, s14
 800be44:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800be90 <__kernel_sinf+0x84>
 800be48:	ee60 6a07 	vmul.f32	s13, s0, s14
 800be4c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800be50:	b930      	cbnz	r0, 800be60 <__kernel_sinf+0x54>
 800be52:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800be94 <__kernel_sinf+0x88>
 800be56:	eea7 6a27 	vfma.f32	s12, s14, s15
 800be5a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800be5e:	4770      	bx	lr
 800be60:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800be64:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800be68:	eee0 7a86 	vfma.f32	s15, s1, s12
 800be6c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800be70:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800be98 <__kernel_sinf+0x8c>
 800be74:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800be78:	ee30 0a60 	vsub.f32	s0, s0, s1
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	2f2ec9d3 	.word	0x2f2ec9d3
 800be84:	b2d72f34 	.word	0xb2d72f34
 800be88:	3638ef1b 	.word	0x3638ef1b
 800be8c:	b9500d01 	.word	0xb9500d01
 800be90:	3c088889 	.word	0x3c088889
 800be94:	be2aaaab 	.word	0xbe2aaaab
 800be98:	3e2aaaab 	.word	0x3e2aaaab

0800be9c <__ieee754_powf>:
 800be9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bea0:	ee10 4a90 	vmov	r4, s1
 800bea4:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800bea8:	ed2d 8b02 	vpush	{d8}
 800beac:	ee10 6a10 	vmov	r6, s0
 800beb0:	eeb0 8a40 	vmov.f32	s16, s0
 800beb4:	eef0 8a60 	vmov.f32	s17, s1
 800beb8:	d10c      	bne.n	800bed4 <__ieee754_powf+0x38>
 800beba:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800bebe:	0076      	lsls	r6, r6, #1
 800bec0:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800bec4:	f240 829c 	bls.w	800c400 <__ieee754_powf+0x564>
 800bec8:	ee38 0a28 	vadd.f32	s0, s16, s17
 800becc:	ecbd 8b02 	vpop	{d8}
 800bed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bed4:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800bed8:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800bedc:	d802      	bhi.n	800bee4 <__ieee754_powf+0x48>
 800bede:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800bee2:	d908      	bls.n	800bef6 <__ieee754_powf+0x5a>
 800bee4:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800bee8:	d1ee      	bne.n	800bec8 <__ieee754_powf+0x2c>
 800beea:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800beee:	0064      	lsls	r4, r4, #1
 800bef0:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800bef4:	e7e6      	b.n	800bec4 <__ieee754_powf+0x28>
 800bef6:	2e00      	cmp	r6, #0
 800bef8:	da1e      	bge.n	800bf38 <__ieee754_powf+0x9c>
 800befa:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800befe:	d22b      	bcs.n	800bf58 <__ieee754_powf+0xbc>
 800bf00:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800bf04:	d332      	bcc.n	800bf6c <__ieee754_powf+0xd0>
 800bf06:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800bf0a:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800bf0e:	fa49 f503 	asr.w	r5, r9, r3
 800bf12:	fa05 f303 	lsl.w	r3, r5, r3
 800bf16:	454b      	cmp	r3, r9
 800bf18:	d126      	bne.n	800bf68 <__ieee754_powf+0xcc>
 800bf1a:	f005 0501 	and.w	r5, r5, #1
 800bf1e:	f1c5 0502 	rsb	r5, r5, #2
 800bf22:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800bf26:	d122      	bne.n	800bf6e <__ieee754_powf+0xd2>
 800bf28:	2c00      	cmp	r4, #0
 800bf2a:	f280 826f 	bge.w	800c40c <__ieee754_powf+0x570>
 800bf2e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800bf32:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800bf36:	e7c9      	b.n	800becc <__ieee754_powf+0x30>
 800bf38:	2500      	movs	r5, #0
 800bf3a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800bf3e:	d1f0      	bne.n	800bf22 <__ieee754_powf+0x86>
 800bf40:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800bf44:	f000 825c 	beq.w	800c400 <__ieee754_powf+0x564>
 800bf48:	d908      	bls.n	800bf5c <__ieee754_powf+0xc0>
 800bf4a:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800c2ac <__ieee754_powf+0x410>
 800bf4e:	2c00      	cmp	r4, #0
 800bf50:	bfa8      	it	ge
 800bf52:	eeb0 0a68 	vmovge.f32	s0, s17
 800bf56:	e7b9      	b.n	800becc <__ieee754_powf+0x30>
 800bf58:	2502      	movs	r5, #2
 800bf5a:	e7ee      	b.n	800bf3a <__ieee754_powf+0x9e>
 800bf5c:	2c00      	cmp	r4, #0
 800bf5e:	f280 8252 	bge.w	800c406 <__ieee754_powf+0x56a>
 800bf62:	eeb1 0a68 	vneg.f32	s0, s17
 800bf66:	e7b1      	b.n	800becc <__ieee754_powf+0x30>
 800bf68:	2500      	movs	r5, #0
 800bf6a:	e7da      	b.n	800bf22 <__ieee754_powf+0x86>
 800bf6c:	2500      	movs	r5, #0
 800bf6e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800bf72:	d102      	bne.n	800bf7a <__ieee754_powf+0xde>
 800bf74:	ee28 0a08 	vmul.f32	s0, s16, s16
 800bf78:	e7a8      	b.n	800becc <__ieee754_powf+0x30>
 800bf7a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800bf7e:	d109      	bne.n	800bf94 <__ieee754_powf+0xf8>
 800bf80:	2e00      	cmp	r6, #0
 800bf82:	db07      	blt.n	800bf94 <__ieee754_powf+0xf8>
 800bf84:	eeb0 0a48 	vmov.f32	s0, s16
 800bf88:	ecbd 8b02 	vpop	{d8}
 800bf8c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf90:	f000 bc18 	b.w	800c7c4 <__ieee754_sqrtf>
 800bf94:	eeb0 0a48 	vmov.f32	s0, s16
 800bf98:	f000 fb80 	bl	800c69c <fabsf>
 800bf9c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800bfa0:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800bfa4:	4647      	mov	r7, r8
 800bfa6:	d002      	beq.n	800bfae <__ieee754_powf+0x112>
 800bfa8:	f1b8 0f00 	cmp.w	r8, #0
 800bfac:	d117      	bne.n	800bfde <__ieee754_powf+0x142>
 800bfae:	2c00      	cmp	r4, #0
 800bfb0:	bfbc      	itt	lt
 800bfb2:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800bfb6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800bfba:	2e00      	cmp	r6, #0
 800bfbc:	da86      	bge.n	800becc <__ieee754_powf+0x30>
 800bfbe:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800bfc2:	ea58 0805 	orrs.w	r8, r8, r5
 800bfc6:	d104      	bne.n	800bfd2 <__ieee754_powf+0x136>
 800bfc8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bfcc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800bfd0:	e77c      	b.n	800becc <__ieee754_powf+0x30>
 800bfd2:	2d01      	cmp	r5, #1
 800bfd4:	f47f af7a 	bne.w	800becc <__ieee754_powf+0x30>
 800bfd8:	eeb1 0a40 	vneg.f32	s0, s0
 800bfdc:	e776      	b.n	800becc <__ieee754_powf+0x30>
 800bfde:	0ff0      	lsrs	r0, r6, #31
 800bfe0:	3801      	subs	r0, #1
 800bfe2:	ea55 0300 	orrs.w	r3, r5, r0
 800bfe6:	d104      	bne.n	800bff2 <__ieee754_powf+0x156>
 800bfe8:	ee38 8a48 	vsub.f32	s16, s16, s16
 800bfec:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800bff0:	e76c      	b.n	800becc <__ieee754_powf+0x30>
 800bff2:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800bff6:	d973      	bls.n	800c0e0 <__ieee754_powf+0x244>
 800bff8:	4bad      	ldr	r3, [pc, #692]	@ (800c2b0 <__ieee754_powf+0x414>)
 800bffa:	4598      	cmp	r8, r3
 800bffc:	d808      	bhi.n	800c010 <__ieee754_powf+0x174>
 800bffe:	2c00      	cmp	r4, #0
 800c000:	da0b      	bge.n	800c01a <__ieee754_powf+0x17e>
 800c002:	2000      	movs	r0, #0
 800c004:	ecbd 8b02 	vpop	{d8}
 800c008:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c00c:	f000 bbd4 	b.w	800c7b8 <__math_oflowf>
 800c010:	4ba8      	ldr	r3, [pc, #672]	@ (800c2b4 <__ieee754_powf+0x418>)
 800c012:	4598      	cmp	r8, r3
 800c014:	d908      	bls.n	800c028 <__ieee754_powf+0x18c>
 800c016:	2c00      	cmp	r4, #0
 800c018:	dcf3      	bgt.n	800c002 <__ieee754_powf+0x166>
 800c01a:	2000      	movs	r0, #0
 800c01c:	ecbd 8b02 	vpop	{d8}
 800c020:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c024:	f000 bbc2 	b.w	800c7ac <__math_uflowf>
 800c028:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c02c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c030:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800c2b8 <__ieee754_powf+0x41c>
 800c034:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800c038:	eee0 6a67 	vfms.f32	s13, s0, s15
 800c03c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c040:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800c044:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c04c:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800c2bc <__ieee754_powf+0x420>
 800c050:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800c054:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800c2c0 <__ieee754_powf+0x424>
 800c058:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c05c:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800c2c4 <__ieee754_powf+0x428>
 800c060:	eef0 6a67 	vmov.f32	s13, s15
 800c064:	eee0 6a07 	vfma.f32	s13, s0, s14
 800c068:	ee16 3a90 	vmov	r3, s13
 800c06c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800c070:	f023 030f 	bic.w	r3, r3, #15
 800c074:	ee06 3a90 	vmov	s13, r3
 800c078:	eee0 6a47 	vfms.f32	s13, s0, s14
 800c07c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c080:	3d01      	subs	r5, #1
 800c082:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800c086:	4305      	orrs	r5, r0
 800c088:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c08c:	f024 040f 	bic.w	r4, r4, #15
 800c090:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800c094:	bf18      	it	ne
 800c096:	eeb0 8a47 	vmovne.f32	s16, s14
 800c09a:	ee07 4a10 	vmov	s14, r4
 800c09e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800c0a2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800c0a6:	ee07 3a90 	vmov	s15, r3
 800c0aa:	eee7 0a27 	vfma.f32	s1, s14, s15
 800c0ae:	ee07 4a10 	vmov	s14, r4
 800c0b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c0b6:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800c0ba:	ee17 1a10 	vmov	r1, s14
 800c0be:	2900      	cmp	r1, #0
 800c0c0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c0c4:	f340 80dd 	ble.w	800c282 <__ieee754_powf+0x3e6>
 800c0c8:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800c0cc:	f240 80ca 	bls.w	800c264 <__ieee754_powf+0x3c8>
 800c0d0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c0d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0d8:	bf4c      	ite	mi
 800c0da:	2001      	movmi	r0, #1
 800c0dc:	2000      	movpl	r0, #0
 800c0de:	e791      	b.n	800c004 <__ieee754_powf+0x168>
 800c0e0:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800c0e4:	bf01      	itttt	eq
 800c0e6:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800c2c8 <__ieee754_powf+0x42c>
 800c0ea:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800c0ee:	f06f 0317 	mvneq.w	r3, #23
 800c0f2:	ee17 7a90 	vmoveq	r7, s15
 800c0f6:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800c0fa:	bf18      	it	ne
 800c0fc:	2300      	movne	r3, #0
 800c0fe:	3a7f      	subs	r2, #127	@ 0x7f
 800c100:	441a      	add	r2, r3
 800c102:	4b72      	ldr	r3, [pc, #456]	@ (800c2cc <__ieee754_powf+0x430>)
 800c104:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800c108:	429f      	cmp	r7, r3
 800c10a:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800c10e:	dd06      	ble.n	800c11e <__ieee754_powf+0x282>
 800c110:	4b6f      	ldr	r3, [pc, #444]	@ (800c2d0 <__ieee754_powf+0x434>)
 800c112:	429f      	cmp	r7, r3
 800c114:	f340 80a4 	ble.w	800c260 <__ieee754_powf+0x3c4>
 800c118:	3201      	adds	r2, #1
 800c11a:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800c11e:	2600      	movs	r6, #0
 800c120:	4b6c      	ldr	r3, [pc, #432]	@ (800c2d4 <__ieee754_powf+0x438>)
 800c122:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800c126:	ee07 1a10 	vmov	s14, r1
 800c12a:	edd3 5a00 	vldr	s11, [r3]
 800c12e:	4b6a      	ldr	r3, [pc, #424]	@ (800c2d8 <__ieee754_powf+0x43c>)
 800c130:	ee75 7a87 	vadd.f32	s15, s11, s14
 800c134:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c138:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800c13c:	1049      	asrs	r1, r1, #1
 800c13e:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800c142:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800c146:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800c14a:	ee37 6a65 	vsub.f32	s12, s14, s11
 800c14e:	ee07 1a90 	vmov	s15, r1
 800c152:	ee26 5a24 	vmul.f32	s10, s12, s9
 800c156:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800c15a:	ee15 7a10 	vmov	r7, s10
 800c15e:	401f      	ands	r7, r3
 800c160:	ee06 7a90 	vmov	s13, r7
 800c164:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800c168:	ee37 7a65 	vsub.f32	s14, s14, s11
 800c16c:	ee65 7a05 	vmul.f32	s15, s10, s10
 800c170:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800c174:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c2dc <__ieee754_powf+0x440>
 800c178:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800c2e0 <__ieee754_powf+0x444>
 800c17c:	eee7 5a87 	vfma.f32	s11, s15, s14
 800c180:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800c2e4 <__ieee754_powf+0x448>
 800c184:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c188:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800c2b8 <__ieee754_powf+0x41c>
 800c18c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c190:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800c2e8 <__ieee754_powf+0x44c>
 800c194:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c198:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800c2ec <__ieee754_powf+0x450>
 800c19c:	ee26 6a24 	vmul.f32	s12, s12, s9
 800c1a0:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c1a4:	ee35 7a26 	vadd.f32	s14, s10, s13
 800c1a8:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800c1ac:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c1b0:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800c1b4:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800c1b8:	eef0 5a67 	vmov.f32	s11, s15
 800c1bc:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800c1c0:	ee75 5a87 	vadd.f32	s11, s11, s14
 800c1c4:	ee15 1a90 	vmov	r1, s11
 800c1c8:	4019      	ands	r1, r3
 800c1ca:	ee05 1a90 	vmov	s11, r1
 800c1ce:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800c1d2:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800c1d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c1da:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c1de:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c1e2:	eeb0 6a67 	vmov.f32	s12, s15
 800c1e6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800c1ea:	ee16 1a10 	vmov	r1, s12
 800c1ee:	4019      	ands	r1, r3
 800c1f0:	ee06 1a10 	vmov	s12, r1
 800c1f4:	eeb0 7a46 	vmov.f32	s14, s12
 800c1f8:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800c1fc:	493c      	ldr	r1, [pc, #240]	@ (800c2f0 <__ieee754_powf+0x454>)
 800c1fe:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800c202:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c206:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800c2f4 <__ieee754_powf+0x458>
 800c20a:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800c2f8 <__ieee754_powf+0x45c>
 800c20e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c212:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800c2fc <__ieee754_powf+0x460>
 800c216:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c21a:	ed91 7a00 	vldr	s14, [r1]
 800c21e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c222:	ee07 2a10 	vmov	s14, r2
 800c226:	eef0 6a67 	vmov.f32	s13, s15
 800c22a:	4a35      	ldr	r2, [pc, #212]	@ (800c300 <__ieee754_powf+0x464>)
 800c22c:	eee6 6a25 	vfma.f32	s13, s12, s11
 800c230:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800c234:	ed92 5a00 	vldr	s10, [r2]
 800c238:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c23c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c240:	ee76 6a87 	vadd.f32	s13, s13, s14
 800c244:	ee16 2a90 	vmov	r2, s13
 800c248:	4013      	ands	r3, r2
 800c24a:	ee06 3a90 	vmov	s13, r3
 800c24e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c252:	ee37 7a45 	vsub.f32	s14, s14, s10
 800c256:	eea6 7a65 	vfms.f32	s14, s12, s11
 800c25a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c25e:	e70f      	b.n	800c080 <__ieee754_powf+0x1e4>
 800c260:	2601      	movs	r6, #1
 800c262:	e75d      	b.n	800c120 <__ieee754_powf+0x284>
 800c264:	d152      	bne.n	800c30c <__ieee754_powf+0x470>
 800c266:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800c304 <__ieee754_powf+0x468>
 800c26a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c26e:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800c272:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c27a:	f73f af29 	bgt.w	800c0d0 <__ieee754_powf+0x234>
 800c27e:	2386      	movs	r3, #134	@ 0x86
 800c280:	e048      	b.n	800c314 <__ieee754_powf+0x478>
 800c282:	4a21      	ldr	r2, [pc, #132]	@ (800c308 <__ieee754_powf+0x46c>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d907      	bls.n	800c298 <__ieee754_powf+0x3fc>
 800c288:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c290:	bf4c      	ite	mi
 800c292:	2001      	movmi	r0, #1
 800c294:	2000      	movpl	r0, #0
 800c296:	e6c1      	b.n	800c01c <__ieee754_powf+0x180>
 800c298:	d138      	bne.n	800c30c <__ieee754_powf+0x470>
 800c29a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c29e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800c2a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2a6:	dbea      	blt.n	800c27e <__ieee754_powf+0x3e2>
 800c2a8:	e7ee      	b.n	800c288 <__ieee754_powf+0x3ec>
 800c2aa:	bf00      	nop
 800c2ac:	00000000 	.word	0x00000000
 800c2b0:	3f7ffff3 	.word	0x3f7ffff3
 800c2b4:	3f800007 	.word	0x3f800007
 800c2b8:	3eaaaaab 	.word	0x3eaaaaab
 800c2bc:	3fb8aa3b 	.word	0x3fb8aa3b
 800c2c0:	36eca570 	.word	0x36eca570
 800c2c4:	3fb8aa00 	.word	0x3fb8aa00
 800c2c8:	4b800000 	.word	0x4b800000
 800c2cc:	001cc471 	.word	0x001cc471
 800c2d0:	005db3d6 	.word	0x005db3d6
 800c2d4:	0800f7a0 	.word	0x0800f7a0
 800c2d8:	fffff000 	.word	0xfffff000
 800c2dc:	3e6c3255 	.word	0x3e6c3255
 800c2e0:	3e53f142 	.word	0x3e53f142
 800c2e4:	3e8ba305 	.word	0x3e8ba305
 800c2e8:	3edb6db7 	.word	0x3edb6db7
 800c2ec:	3f19999a 	.word	0x3f19999a
 800c2f0:	0800f790 	.word	0x0800f790
 800c2f4:	3f76384f 	.word	0x3f76384f
 800c2f8:	3f763800 	.word	0x3f763800
 800c2fc:	369dc3a0 	.word	0x369dc3a0
 800c300:	0800f798 	.word	0x0800f798
 800c304:	3338aa3c 	.word	0x3338aa3c
 800c308:	43160000 	.word	0x43160000
 800c30c:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800c310:	d971      	bls.n	800c3f6 <__ieee754_powf+0x55a>
 800c312:	15db      	asrs	r3, r3, #23
 800c314:	3b7e      	subs	r3, #126	@ 0x7e
 800c316:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800c31a:	4118      	asrs	r0, r3
 800c31c:	4408      	add	r0, r1
 800c31e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c322:	4a3c      	ldr	r2, [pc, #240]	@ (800c414 <__ieee754_powf+0x578>)
 800c324:	3b7f      	subs	r3, #127	@ 0x7f
 800c326:	411a      	asrs	r2, r3
 800c328:	4002      	ands	r2, r0
 800c32a:	ee07 2a10 	vmov	s14, r2
 800c32e:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800c332:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800c336:	f1c3 0317 	rsb	r3, r3, #23
 800c33a:	4118      	asrs	r0, r3
 800c33c:	2900      	cmp	r1, #0
 800c33e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c342:	bfb8      	it	lt
 800c344:	4240      	neglt	r0, r0
 800c346:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800c34a:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800c418 <__ieee754_powf+0x57c>
 800c34e:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800c41c <__ieee754_powf+0x580>
 800c352:	ee17 3a10 	vmov	r3, s14
 800c356:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800c35a:	f023 030f 	bic.w	r3, r3, #15
 800c35e:	ee07 3a10 	vmov	s14, r3
 800c362:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c366:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c36a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c36e:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800c420 <__ieee754_powf+0x584>
 800c372:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c376:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800c37a:	eef0 6a67 	vmov.f32	s13, s15
 800c37e:	eee7 6a06 	vfma.f32	s13, s14, s12
 800c382:	eef0 5a66 	vmov.f32	s11, s13
 800c386:	eee7 5a46 	vfms.f32	s11, s14, s12
 800c38a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c38e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c392:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800c424 <__ieee754_powf+0x588>
 800c396:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800c428 <__ieee754_powf+0x58c>
 800c39a:	eea7 6a25 	vfma.f32	s12, s14, s11
 800c39e:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800c42c <__ieee754_powf+0x590>
 800c3a2:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c3a6:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800c430 <__ieee754_powf+0x594>
 800c3aa:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c3ae:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800c434 <__ieee754_powf+0x598>
 800c3b2:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c3b6:	eeb0 6a66 	vmov.f32	s12, s13
 800c3ba:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800c3be:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800c3c2:	ee66 5a86 	vmul.f32	s11, s13, s12
 800c3c6:	ee36 6a47 	vsub.f32	s12, s12, s14
 800c3ca:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800c3ce:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800c3d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c3da:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c3de:	ee10 3a10 	vmov	r3, s0
 800c3e2:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800c3e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c3ea:	da06      	bge.n	800c3fa <__ieee754_powf+0x55e>
 800c3ec:	f000 f95e 	bl	800c6ac <scalbnf>
 800c3f0:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c3f4:	e56a      	b.n	800becc <__ieee754_powf+0x30>
 800c3f6:	2000      	movs	r0, #0
 800c3f8:	e7a5      	b.n	800c346 <__ieee754_powf+0x4aa>
 800c3fa:	ee00 3a10 	vmov	s0, r3
 800c3fe:	e7f7      	b.n	800c3f0 <__ieee754_powf+0x554>
 800c400:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c404:	e562      	b.n	800becc <__ieee754_powf+0x30>
 800c406:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800c438 <__ieee754_powf+0x59c>
 800c40a:	e55f      	b.n	800becc <__ieee754_powf+0x30>
 800c40c:	eeb0 0a48 	vmov.f32	s0, s16
 800c410:	e55c      	b.n	800becc <__ieee754_powf+0x30>
 800c412:	bf00      	nop
 800c414:	ff800000 	.word	0xff800000
 800c418:	3f317218 	.word	0x3f317218
 800c41c:	3f317200 	.word	0x3f317200
 800c420:	35bfbe8c 	.word	0x35bfbe8c
 800c424:	b5ddea0e 	.word	0xb5ddea0e
 800c428:	3331bb4c 	.word	0x3331bb4c
 800c42c:	388ab355 	.word	0x388ab355
 800c430:	bb360b61 	.word	0xbb360b61
 800c434:	3e2aaaab 	.word	0x3e2aaaab
 800c438:	00000000 	.word	0x00000000

0800c43c <__ieee754_rem_pio2f>:
 800c43c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c43e:	ee10 6a10 	vmov	r6, s0
 800c442:	4b88      	ldr	r3, [pc, #544]	@ (800c664 <__ieee754_rem_pio2f+0x228>)
 800c444:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800c448:	429d      	cmp	r5, r3
 800c44a:	b087      	sub	sp, #28
 800c44c:	4604      	mov	r4, r0
 800c44e:	d805      	bhi.n	800c45c <__ieee754_rem_pio2f+0x20>
 800c450:	2300      	movs	r3, #0
 800c452:	ed80 0a00 	vstr	s0, [r0]
 800c456:	6043      	str	r3, [r0, #4]
 800c458:	2000      	movs	r0, #0
 800c45a:	e022      	b.n	800c4a2 <__ieee754_rem_pio2f+0x66>
 800c45c:	4b82      	ldr	r3, [pc, #520]	@ (800c668 <__ieee754_rem_pio2f+0x22c>)
 800c45e:	429d      	cmp	r5, r3
 800c460:	d83a      	bhi.n	800c4d8 <__ieee754_rem_pio2f+0x9c>
 800c462:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c466:	2e00      	cmp	r6, #0
 800c468:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800c66c <__ieee754_rem_pio2f+0x230>
 800c46c:	4a80      	ldr	r2, [pc, #512]	@ (800c670 <__ieee754_rem_pio2f+0x234>)
 800c46e:	f023 030f 	bic.w	r3, r3, #15
 800c472:	dd18      	ble.n	800c4a6 <__ieee754_rem_pio2f+0x6a>
 800c474:	4293      	cmp	r3, r2
 800c476:	ee70 7a47 	vsub.f32	s15, s0, s14
 800c47a:	bf09      	itett	eq
 800c47c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800c674 <__ieee754_rem_pio2f+0x238>
 800c480:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800c678 <__ieee754_rem_pio2f+0x23c>
 800c484:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800c67c <__ieee754_rem_pio2f+0x240>
 800c488:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800c48c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800c490:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c494:	ed80 7a00 	vstr	s14, [r0]
 800c498:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c49c:	edc0 7a01 	vstr	s15, [r0, #4]
 800c4a0:	2001      	movs	r0, #1
 800c4a2:	b007      	add	sp, #28
 800c4a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	ee70 7a07 	vadd.f32	s15, s0, s14
 800c4ac:	bf09      	itett	eq
 800c4ae:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800c674 <__ieee754_rem_pio2f+0x238>
 800c4b2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800c678 <__ieee754_rem_pio2f+0x23c>
 800c4b6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800c67c <__ieee754_rem_pio2f+0x240>
 800c4ba:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800c4be:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c4c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c4c6:	ed80 7a00 	vstr	s14, [r0]
 800c4ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4ce:	edc0 7a01 	vstr	s15, [r0, #4]
 800c4d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d6:	e7e4      	b.n	800c4a2 <__ieee754_rem_pio2f+0x66>
 800c4d8:	4b69      	ldr	r3, [pc, #420]	@ (800c680 <__ieee754_rem_pio2f+0x244>)
 800c4da:	429d      	cmp	r5, r3
 800c4dc:	d873      	bhi.n	800c5c6 <__ieee754_rem_pio2f+0x18a>
 800c4de:	f000 f8dd 	bl	800c69c <fabsf>
 800c4e2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800c684 <__ieee754_rem_pio2f+0x248>
 800c4e6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c4ea:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c4ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c4f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c4f6:	ee17 0a90 	vmov	r0, s15
 800c4fa:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c66c <__ieee754_rem_pio2f+0x230>
 800c4fe:	eea7 0a67 	vfms.f32	s0, s14, s15
 800c502:	281f      	cmp	r0, #31
 800c504:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c678 <__ieee754_rem_pio2f+0x23c>
 800c508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c50c:	eeb1 6a47 	vneg.f32	s12, s14
 800c510:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c514:	ee16 1a90 	vmov	r1, s13
 800c518:	dc09      	bgt.n	800c52e <__ieee754_rem_pio2f+0xf2>
 800c51a:	4a5b      	ldr	r2, [pc, #364]	@ (800c688 <__ieee754_rem_pio2f+0x24c>)
 800c51c:	1e47      	subs	r7, r0, #1
 800c51e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c522:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800c526:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d107      	bne.n	800c53e <__ieee754_rem_pio2f+0x102>
 800c52e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800c532:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800c536:	2a08      	cmp	r2, #8
 800c538:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800c53c:	dc14      	bgt.n	800c568 <__ieee754_rem_pio2f+0x12c>
 800c53e:	6021      	str	r1, [r4, #0]
 800c540:	ed94 7a00 	vldr	s14, [r4]
 800c544:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c548:	2e00      	cmp	r6, #0
 800c54a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c54e:	ed84 0a01 	vstr	s0, [r4, #4]
 800c552:	daa6      	bge.n	800c4a2 <__ieee754_rem_pio2f+0x66>
 800c554:	eeb1 7a47 	vneg.f32	s14, s14
 800c558:	eeb1 0a40 	vneg.f32	s0, s0
 800c55c:	ed84 7a00 	vstr	s14, [r4]
 800c560:	ed84 0a01 	vstr	s0, [r4, #4]
 800c564:	4240      	negs	r0, r0
 800c566:	e79c      	b.n	800c4a2 <__ieee754_rem_pio2f+0x66>
 800c568:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800c674 <__ieee754_rem_pio2f+0x238>
 800c56c:	eef0 6a40 	vmov.f32	s13, s0
 800c570:	eee6 6a25 	vfma.f32	s13, s12, s11
 800c574:	ee70 7a66 	vsub.f32	s15, s0, s13
 800c578:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c57c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c67c <__ieee754_rem_pio2f+0x240>
 800c580:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800c584:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800c588:	ee15 2a90 	vmov	r2, s11
 800c58c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c590:	1a5b      	subs	r3, r3, r1
 800c592:	2b19      	cmp	r3, #25
 800c594:	dc04      	bgt.n	800c5a0 <__ieee754_rem_pio2f+0x164>
 800c596:	edc4 5a00 	vstr	s11, [r4]
 800c59a:	eeb0 0a66 	vmov.f32	s0, s13
 800c59e:	e7cf      	b.n	800c540 <__ieee754_rem_pio2f+0x104>
 800c5a0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800c68c <__ieee754_rem_pio2f+0x250>
 800c5a4:	eeb0 0a66 	vmov.f32	s0, s13
 800c5a8:	eea6 0a25 	vfma.f32	s0, s12, s11
 800c5ac:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c5b0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800c690 <__ieee754_rem_pio2f+0x254>
 800c5b4:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c5b8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800c5bc:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c5c0:	ed84 7a00 	vstr	s14, [r4]
 800c5c4:	e7bc      	b.n	800c540 <__ieee754_rem_pio2f+0x104>
 800c5c6:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800c5ca:	d306      	bcc.n	800c5da <__ieee754_rem_pio2f+0x19e>
 800c5cc:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c5d0:	edc0 7a01 	vstr	s15, [r0, #4]
 800c5d4:	edc0 7a00 	vstr	s15, [r0]
 800c5d8:	e73e      	b.n	800c458 <__ieee754_rem_pio2f+0x1c>
 800c5da:	15ea      	asrs	r2, r5, #23
 800c5dc:	3a86      	subs	r2, #134	@ 0x86
 800c5de:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800c5e2:	ee07 3a90 	vmov	s15, r3
 800c5e6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c5ea:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800c694 <__ieee754_rem_pio2f+0x258>
 800c5ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c5f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c5f6:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c5fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c5fe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c602:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c606:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c60a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c60e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c612:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c61a:	edcd 7a05 	vstr	s15, [sp, #20]
 800c61e:	d11e      	bne.n	800c65e <__ieee754_rem_pio2f+0x222>
 800c620:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c628:	bf0c      	ite	eq
 800c62a:	2301      	moveq	r3, #1
 800c62c:	2302      	movne	r3, #2
 800c62e:	491a      	ldr	r1, [pc, #104]	@ (800c698 <__ieee754_rem_pio2f+0x25c>)
 800c630:	9101      	str	r1, [sp, #4]
 800c632:	2102      	movs	r1, #2
 800c634:	9100      	str	r1, [sp, #0]
 800c636:	a803      	add	r0, sp, #12
 800c638:	4621      	mov	r1, r4
 800c63a:	f000 f8c7 	bl	800c7cc <__kernel_rem_pio2f>
 800c63e:	2e00      	cmp	r6, #0
 800c640:	f6bf af2f 	bge.w	800c4a2 <__ieee754_rem_pio2f+0x66>
 800c644:	edd4 7a00 	vldr	s15, [r4]
 800c648:	eef1 7a67 	vneg.f32	s15, s15
 800c64c:	edc4 7a00 	vstr	s15, [r4]
 800c650:	edd4 7a01 	vldr	s15, [r4, #4]
 800c654:	eef1 7a67 	vneg.f32	s15, s15
 800c658:	edc4 7a01 	vstr	s15, [r4, #4]
 800c65c:	e782      	b.n	800c564 <__ieee754_rem_pio2f+0x128>
 800c65e:	2303      	movs	r3, #3
 800c660:	e7e5      	b.n	800c62e <__ieee754_rem_pio2f+0x1f2>
 800c662:	bf00      	nop
 800c664:	3f490fd8 	.word	0x3f490fd8
 800c668:	4016cbe3 	.word	0x4016cbe3
 800c66c:	3fc90f80 	.word	0x3fc90f80
 800c670:	3fc90fd0 	.word	0x3fc90fd0
 800c674:	37354400 	.word	0x37354400
 800c678:	37354443 	.word	0x37354443
 800c67c:	2e85a308 	.word	0x2e85a308
 800c680:	43490f80 	.word	0x43490f80
 800c684:	3f22f984 	.word	0x3f22f984
 800c688:	0800f7a8 	.word	0x0800f7a8
 800c68c:	2e85a300 	.word	0x2e85a300
 800c690:	248d3132 	.word	0x248d3132
 800c694:	43800000 	.word	0x43800000
 800c698:	0800f828 	.word	0x0800f828

0800c69c <fabsf>:
 800c69c:	ee10 3a10 	vmov	r3, s0
 800c6a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c6a4:	ee00 3a10 	vmov	s0, r3
 800c6a8:	4770      	bx	lr
	...

0800c6ac <scalbnf>:
 800c6ac:	ee10 3a10 	vmov	r3, s0
 800c6b0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c6b4:	d02b      	beq.n	800c70e <scalbnf+0x62>
 800c6b6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c6ba:	d302      	bcc.n	800c6c2 <scalbnf+0x16>
 800c6bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c6c0:	4770      	bx	lr
 800c6c2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c6c6:	d123      	bne.n	800c710 <scalbnf+0x64>
 800c6c8:	4b24      	ldr	r3, [pc, #144]	@ (800c75c <scalbnf+0xb0>)
 800c6ca:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800c760 <scalbnf+0xb4>
 800c6ce:	4298      	cmp	r0, r3
 800c6d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c6d4:	db17      	blt.n	800c706 <scalbnf+0x5a>
 800c6d6:	ee10 3a10 	vmov	r3, s0
 800c6da:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c6de:	3a19      	subs	r2, #25
 800c6e0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c6e4:	4288      	cmp	r0, r1
 800c6e6:	dd15      	ble.n	800c714 <scalbnf+0x68>
 800c6e8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800c764 <scalbnf+0xb8>
 800c6ec:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c768 <scalbnf+0xbc>
 800c6f0:	ee10 3a10 	vmov	r3, s0
 800c6f4:	eeb0 7a67 	vmov.f32	s14, s15
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	bfb8      	it	lt
 800c6fc:	eef0 7a66 	vmovlt.f32	s15, s13
 800c700:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c704:	4770      	bx	lr
 800c706:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c76c <scalbnf+0xc0>
 800c70a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c70e:	4770      	bx	lr
 800c710:	0dd2      	lsrs	r2, r2, #23
 800c712:	e7e5      	b.n	800c6e0 <scalbnf+0x34>
 800c714:	4410      	add	r0, r2
 800c716:	28fe      	cmp	r0, #254	@ 0xfe
 800c718:	dce6      	bgt.n	800c6e8 <scalbnf+0x3c>
 800c71a:	2800      	cmp	r0, #0
 800c71c:	dd06      	ble.n	800c72c <scalbnf+0x80>
 800c71e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c722:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c726:	ee00 3a10 	vmov	s0, r3
 800c72a:	4770      	bx	lr
 800c72c:	f110 0f16 	cmn.w	r0, #22
 800c730:	da09      	bge.n	800c746 <scalbnf+0x9a>
 800c732:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c76c <scalbnf+0xc0>
 800c736:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c770 <scalbnf+0xc4>
 800c73a:	ee10 3a10 	vmov	r3, s0
 800c73e:	eeb0 7a67 	vmov.f32	s14, s15
 800c742:	2b00      	cmp	r3, #0
 800c744:	e7d9      	b.n	800c6fa <scalbnf+0x4e>
 800c746:	3019      	adds	r0, #25
 800c748:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c74c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c750:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c774 <scalbnf+0xc8>
 800c754:	ee07 3a90 	vmov	s15, r3
 800c758:	e7d7      	b.n	800c70a <scalbnf+0x5e>
 800c75a:	bf00      	nop
 800c75c:	ffff3cb0 	.word	0xffff3cb0
 800c760:	4c000000 	.word	0x4c000000
 800c764:	7149f2ca 	.word	0x7149f2ca
 800c768:	f149f2ca 	.word	0xf149f2ca
 800c76c:	0da24260 	.word	0x0da24260
 800c770:	8da24260 	.word	0x8da24260
 800c774:	33000000 	.word	0x33000000

0800c778 <with_errnof>:
 800c778:	b510      	push	{r4, lr}
 800c77a:	ed2d 8b02 	vpush	{d8}
 800c77e:	eeb0 8a40 	vmov.f32	s16, s0
 800c782:	4604      	mov	r4, r0
 800c784:	f001 f97a 	bl	800da7c <__errno>
 800c788:	eeb0 0a48 	vmov.f32	s0, s16
 800c78c:	ecbd 8b02 	vpop	{d8}
 800c790:	6004      	str	r4, [r0, #0]
 800c792:	bd10      	pop	{r4, pc}

0800c794 <xflowf>:
 800c794:	b130      	cbz	r0, 800c7a4 <xflowf+0x10>
 800c796:	eef1 7a40 	vneg.f32	s15, s0
 800c79a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c79e:	2022      	movs	r0, #34	@ 0x22
 800c7a0:	f7ff bfea 	b.w	800c778 <with_errnof>
 800c7a4:	eef0 7a40 	vmov.f32	s15, s0
 800c7a8:	e7f7      	b.n	800c79a <xflowf+0x6>
	...

0800c7ac <__math_uflowf>:
 800c7ac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c7b4 <__math_uflowf+0x8>
 800c7b0:	f7ff bff0 	b.w	800c794 <xflowf>
 800c7b4:	10000000 	.word	0x10000000

0800c7b8 <__math_oflowf>:
 800c7b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c7c0 <__math_oflowf+0x8>
 800c7bc:	f7ff bfea 	b.w	800c794 <xflowf>
 800c7c0:	70000000 	.word	0x70000000

0800c7c4 <__ieee754_sqrtf>:
 800c7c4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c7c8:	4770      	bx	lr
	...

0800c7cc <__kernel_rem_pio2f>:
 800c7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d0:	ed2d 8b04 	vpush	{d8-d9}
 800c7d4:	b0d9      	sub	sp, #356	@ 0x164
 800c7d6:	4690      	mov	r8, r2
 800c7d8:	9001      	str	r0, [sp, #4]
 800c7da:	4ab9      	ldr	r2, [pc, #740]	@ (800cac0 <__kernel_rem_pio2f+0x2f4>)
 800c7dc:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800c7de:	f118 0f04 	cmn.w	r8, #4
 800c7e2:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800c7e6:	460f      	mov	r7, r1
 800c7e8:	f103 3bff 	add.w	fp, r3, #4294967295
 800c7ec:	db27      	blt.n	800c83e <__kernel_rem_pio2f+0x72>
 800c7ee:	f1b8 0203 	subs.w	r2, r8, #3
 800c7f2:	bf48      	it	mi
 800c7f4:	f108 0204 	addmi.w	r2, r8, #4
 800c7f8:	10d2      	asrs	r2, r2, #3
 800c7fa:	1c55      	adds	r5, r2, #1
 800c7fc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c7fe:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800cad0 <__kernel_rem_pio2f+0x304>
 800c802:	00e8      	lsls	r0, r5, #3
 800c804:	eba2 060b 	sub.w	r6, r2, fp
 800c808:	9002      	str	r0, [sp, #8]
 800c80a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800c80e:	eb0a 0c0b 	add.w	ip, sl, fp
 800c812:	ac1c      	add	r4, sp, #112	@ 0x70
 800c814:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800c818:	2000      	movs	r0, #0
 800c81a:	4560      	cmp	r0, ip
 800c81c:	dd11      	ble.n	800c842 <__kernel_rem_pio2f+0x76>
 800c81e:	a91c      	add	r1, sp, #112	@ 0x70
 800c820:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800c824:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800c828:	f04f 0c00 	mov.w	ip, #0
 800c82c:	45d4      	cmp	ip, sl
 800c82e:	dc27      	bgt.n	800c880 <__kernel_rem_pio2f+0xb4>
 800c830:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c834:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800cad0 <__kernel_rem_pio2f+0x304>
 800c838:	4606      	mov	r6, r0
 800c83a:	2400      	movs	r4, #0
 800c83c:	e016      	b.n	800c86c <__kernel_rem_pio2f+0xa0>
 800c83e:	2200      	movs	r2, #0
 800c840:	e7db      	b.n	800c7fa <__kernel_rem_pio2f+0x2e>
 800c842:	42c6      	cmn	r6, r0
 800c844:	bf5d      	ittte	pl
 800c846:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800c84a:	ee07 1a90 	vmovpl	s15, r1
 800c84e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c852:	eef0 7a47 	vmovmi.f32	s15, s14
 800c856:	ece4 7a01 	vstmia	r4!, {s15}
 800c85a:	3001      	adds	r0, #1
 800c85c:	e7dd      	b.n	800c81a <__kernel_rem_pio2f+0x4e>
 800c85e:	ecfe 6a01 	vldmia	lr!, {s13}
 800c862:	ed96 7a00 	vldr	s14, [r6]
 800c866:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c86a:	3401      	adds	r4, #1
 800c86c:	455c      	cmp	r4, fp
 800c86e:	f1a6 0604 	sub.w	r6, r6, #4
 800c872:	ddf4      	ble.n	800c85e <__kernel_rem_pio2f+0x92>
 800c874:	ece9 7a01 	vstmia	r9!, {s15}
 800c878:	f10c 0c01 	add.w	ip, ip, #1
 800c87c:	3004      	adds	r0, #4
 800c87e:	e7d5      	b.n	800c82c <__kernel_rem_pio2f+0x60>
 800c880:	a908      	add	r1, sp, #32
 800c882:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c886:	9104      	str	r1, [sp, #16]
 800c888:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c88a:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800cacc <__kernel_rem_pio2f+0x300>
 800c88e:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800cac8 <__kernel_rem_pio2f+0x2fc>
 800c892:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c896:	9203      	str	r2, [sp, #12]
 800c898:	4654      	mov	r4, sl
 800c89a:	00a2      	lsls	r2, r4, #2
 800c89c:	9205      	str	r2, [sp, #20]
 800c89e:	aa58      	add	r2, sp, #352	@ 0x160
 800c8a0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800c8a4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800c8a8:	a944      	add	r1, sp, #272	@ 0x110
 800c8aa:	aa08      	add	r2, sp, #32
 800c8ac:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800c8b0:	4694      	mov	ip, r2
 800c8b2:	4626      	mov	r6, r4
 800c8b4:	2e00      	cmp	r6, #0
 800c8b6:	f1a0 0004 	sub.w	r0, r0, #4
 800c8ba:	dc4c      	bgt.n	800c956 <__kernel_rem_pio2f+0x18a>
 800c8bc:	4628      	mov	r0, r5
 800c8be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c8c2:	f7ff fef3 	bl	800c6ac <scalbnf>
 800c8c6:	eeb0 8a40 	vmov.f32	s16, s0
 800c8ca:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800c8ce:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c8d2:	f000 f9ed 	bl	800ccb0 <floorf>
 800c8d6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800c8da:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c8de:	2d00      	cmp	r5, #0
 800c8e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c8e4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c8e8:	ee17 9a90 	vmov	r9, s15
 800c8ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c8f0:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c8f4:	dd41      	ble.n	800c97a <__kernel_rem_pio2f+0x1ae>
 800c8f6:	f104 3cff 	add.w	ip, r4, #4294967295
 800c8fa:	a908      	add	r1, sp, #32
 800c8fc:	f1c5 0e08 	rsb	lr, r5, #8
 800c900:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800c904:	fa46 f00e 	asr.w	r0, r6, lr
 800c908:	4481      	add	r9, r0
 800c90a:	fa00 f00e 	lsl.w	r0, r0, lr
 800c90e:	1a36      	subs	r6, r6, r0
 800c910:	f1c5 0007 	rsb	r0, r5, #7
 800c914:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800c918:	4106      	asrs	r6, r0
 800c91a:	2e00      	cmp	r6, #0
 800c91c:	dd3c      	ble.n	800c998 <__kernel_rem_pio2f+0x1cc>
 800c91e:	f04f 0e00 	mov.w	lr, #0
 800c922:	f109 0901 	add.w	r9, r9, #1
 800c926:	4670      	mov	r0, lr
 800c928:	4574      	cmp	r4, lr
 800c92a:	dc68      	bgt.n	800c9fe <__kernel_rem_pio2f+0x232>
 800c92c:	2d00      	cmp	r5, #0
 800c92e:	dd03      	ble.n	800c938 <__kernel_rem_pio2f+0x16c>
 800c930:	2d01      	cmp	r5, #1
 800c932:	d074      	beq.n	800ca1e <__kernel_rem_pio2f+0x252>
 800c934:	2d02      	cmp	r5, #2
 800c936:	d07d      	beq.n	800ca34 <__kernel_rem_pio2f+0x268>
 800c938:	2e02      	cmp	r6, #2
 800c93a:	d12d      	bne.n	800c998 <__kernel_rem_pio2f+0x1cc>
 800c93c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c940:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c944:	b340      	cbz	r0, 800c998 <__kernel_rem_pio2f+0x1cc>
 800c946:	4628      	mov	r0, r5
 800c948:	9306      	str	r3, [sp, #24]
 800c94a:	f7ff feaf 	bl	800c6ac <scalbnf>
 800c94e:	9b06      	ldr	r3, [sp, #24]
 800c950:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c954:	e020      	b.n	800c998 <__kernel_rem_pio2f+0x1cc>
 800c956:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c95a:	3e01      	subs	r6, #1
 800c95c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c964:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c968:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c96c:	ecac 0a01 	vstmia	ip!, {s0}
 800c970:	ed90 0a00 	vldr	s0, [r0]
 800c974:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c978:	e79c      	b.n	800c8b4 <__kernel_rem_pio2f+0xe8>
 800c97a:	d105      	bne.n	800c988 <__kernel_rem_pio2f+0x1bc>
 800c97c:	1e60      	subs	r0, r4, #1
 800c97e:	a908      	add	r1, sp, #32
 800c980:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800c984:	11f6      	asrs	r6, r6, #7
 800c986:	e7c8      	b.n	800c91a <__kernel_rem_pio2f+0x14e>
 800c988:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c98c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c994:	da31      	bge.n	800c9fa <__kernel_rem_pio2f+0x22e>
 800c996:	2600      	movs	r6, #0
 800c998:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c99c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9a0:	f040 8098 	bne.w	800cad4 <__kernel_rem_pio2f+0x308>
 800c9a4:	1e60      	subs	r0, r4, #1
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	4550      	cmp	r0, sl
 800c9aa:	da4b      	bge.n	800ca44 <__kernel_rem_pio2f+0x278>
 800c9ac:	2a00      	cmp	r2, #0
 800c9ae:	d065      	beq.n	800ca7c <__kernel_rem_pio2f+0x2b0>
 800c9b0:	3c01      	subs	r4, #1
 800c9b2:	ab08      	add	r3, sp, #32
 800c9b4:	3d08      	subs	r5, #8
 800c9b6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d0f8      	beq.n	800c9b0 <__kernel_rem_pio2f+0x1e4>
 800c9be:	4628      	mov	r0, r5
 800c9c0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c9c4:	f7ff fe72 	bl	800c6ac <scalbnf>
 800c9c8:	1c63      	adds	r3, r4, #1
 800c9ca:	aa44      	add	r2, sp, #272	@ 0x110
 800c9cc:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800cacc <__kernel_rem_pio2f+0x300>
 800c9d0:	0099      	lsls	r1, r3, #2
 800c9d2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c9d6:	4623      	mov	r3, r4
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	f280 80a9 	bge.w	800cb30 <__kernel_rem_pio2f+0x364>
 800c9de:	4623      	mov	r3, r4
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	f2c0 80c7 	blt.w	800cb74 <__kernel_rem_pio2f+0x3a8>
 800c9e6:	aa44      	add	r2, sp, #272	@ 0x110
 800c9e8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800c9ec:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800cac4 <__kernel_rem_pio2f+0x2f8>
 800c9f0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800cad0 <__kernel_rem_pio2f+0x304>
 800c9f4:	2000      	movs	r0, #0
 800c9f6:	1ae2      	subs	r2, r4, r3
 800c9f8:	e0b1      	b.n	800cb5e <__kernel_rem_pio2f+0x392>
 800c9fa:	2602      	movs	r6, #2
 800c9fc:	e78f      	b.n	800c91e <__kernel_rem_pio2f+0x152>
 800c9fe:	f852 1b04 	ldr.w	r1, [r2], #4
 800ca02:	b948      	cbnz	r0, 800ca18 <__kernel_rem_pio2f+0x24c>
 800ca04:	b121      	cbz	r1, 800ca10 <__kernel_rem_pio2f+0x244>
 800ca06:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800ca0a:	f842 1c04 	str.w	r1, [r2, #-4]
 800ca0e:	2101      	movs	r1, #1
 800ca10:	f10e 0e01 	add.w	lr, lr, #1
 800ca14:	4608      	mov	r0, r1
 800ca16:	e787      	b.n	800c928 <__kernel_rem_pio2f+0x15c>
 800ca18:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800ca1c:	e7f5      	b.n	800ca0a <__kernel_rem_pio2f+0x23e>
 800ca1e:	f104 3cff 	add.w	ip, r4, #4294967295
 800ca22:	aa08      	add	r2, sp, #32
 800ca24:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800ca28:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ca2c:	a908      	add	r1, sp, #32
 800ca2e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800ca32:	e781      	b.n	800c938 <__kernel_rem_pio2f+0x16c>
 800ca34:	f104 3cff 	add.w	ip, r4, #4294967295
 800ca38:	aa08      	add	r2, sp, #32
 800ca3a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800ca3e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800ca42:	e7f3      	b.n	800ca2c <__kernel_rem_pio2f+0x260>
 800ca44:	a908      	add	r1, sp, #32
 800ca46:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800ca4a:	3801      	subs	r0, #1
 800ca4c:	430a      	orrs	r2, r1
 800ca4e:	e7ab      	b.n	800c9a8 <__kernel_rem_pio2f+0x1dc>
 800ca50:	3201      	adds	r2, #1
 800ca52:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800ca56:	2e00      	cmp	r6, #0
 800ca58:	d0fa      	beq.n	800ca50 <__kernel_rem_pio2f+0x284>
 800ca5a:	9905      	ldr	r1, [sp, #20]
 800ca5c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800ca60:	eb0d 0001 	add.w	r0, sp, r1
 800ca64:	18e6      	adds	r6, r4, r3
 800ca66:	a91c      	add	r1, sp, #112	@ 0x70
 800ca68:	f104 0c01 	add.w	ip, r4, #1
 800ca6c:	384c      	subs	r0, #76	@ 0x4c
 800ca6e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800ca72:	4422      	add	r2, r4
 800ca74:	4562      	cmp	r2, ip
 800ca76:	da04      	bge.n	800ca82 <__kernel_rem_pio2f+0x2b6>
 800ca78:	4614      	mov	r4, r2
 800ca7a:	e70e      	b.n	800c89a <__kernel_rem_pio2f+0xce>
 800ca7c:	9804      	ldr	r0, [sp, #16]
 800ca7e:	2201      	movs	r2, #1
 800ca80:	e7e7      	b.n	800ca52 <__kernel_rem_pio2f+0x286>
 800ca82:	9903      	ldr	r1, [sp, #12]
 800ca84:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ca88:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800ca8c:	9105      	str	r1, [sp, #20]
 800ca8e:	ee07 1a90 	vmov	s15, r1
 800ca92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca96:	2400      	movs	r4, #0
 800ca98:	ece6 7a01 	vstmia	r6!, {s15}
 800ca9c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800cad0 <__kernel_rem_pio2f+0x304>
 800caa0:	46b1      	mov	r9, r6
 800caa2:	455c      	cmp	r4, fp
 800caa4:	dd04      	ble.n	800cab0 <__kernel_rem_pio2f+0x2e4>
 800caa6:	ece0 7a01 	vstmia	r0!, {s15}
 800caaa:	f10c 0c01 	add.w	ip, ip, #1
 800caae:	e7e1      	b.n	800ca74 <__kernel_rem_pio2f+0x2a8>
 800cab0:	ecfe 6a01 	vldmia	lr!, {s13}
 800cab4:	ed39 7a01 	vldmdb	r9!, {s14}
 800cab8:	3401      	adds	r4, #1
 800caba:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cabe:	e7f0      	b.n	800caa2 <__kernel_rem_pio2f+0x2d6>
 800cac0:	0800fb6c 	.word	0x0800fb6c
 800cac4:	0800fb40 	.word	0x0800fb40
 800cac8:	43800000 	.word	0x43800000
 800cacc:	3b800000 	.word	0x3b800000
 800cad0:	00000000 	.word	0x00000000
 800cad4:	9b02      	ldr	r3, [sp, #8]
 800cad6:	eeb0 0a48 	vmov.f32	s0, s16
 800cada:	eba3 0008 	sub.w	r0, r3, r8
 800cade:	f7ff fde5 	bl	800c6ac <scalbnf>
 800cae2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800cac8 <__kernel_rem_pio2f+0x2fc>
 800cae6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800caea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caee:	db19      	blt.n	800cb24 <__kernel_rem_pio2f+0x358>
 800caf0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800cacc <__kernel_rem_pio2f+0x300>
 800caf4:	ee60 7a27 	vmul.f32	s15, s0, s15
 800caf8:	aa08      	add	r2, sp, #32
 800cafa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cafe:	3508      	adds	r5, #8
 800cb00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb04:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800cb08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cb0c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cb10:	ee10 3a10 	vmov	r3, s0
 800cb14:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800cb18:	ee17 3a90 	vmov	r3, s15
 800cb1c:	3401      	adds	r4, #1
 800cb1e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800cb22:	e74c      	b.n	800c9be <__kernel_rem_pio2f+0x1f2>
 800cb24:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cb28:	aa08      	add	r2, sp, #32
 800cb2a:	ee10 3a10 	vmov	r3, s0
 800cb2e:	e7f6      	b.n	800cb1e <__kernel_rem_pio2f+0x352>
 800cb30:	a808      	add	r0, sp, #32
 800cb32:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800cb36:	9001      	str	r0, [sp, #4]
 800cb38:	ee07 0a90 	vmov	s15, r0
 800cb3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb40:	3b01      	subs	r3, #1
 800cb42:	ee67 7a80 	vmul.f32	s15, s15, s0
 800cb46:	ee20 0a07 	vmul.f32	s0, s0, s14
 800cb4a:	ed62 7a01 	vstmdb	r2!, {s15}
 800cb4e:	e743      	b.n	800c9d8 <__kernel_rem_pio2f+0x20c>
 800cb50:	ecfc 6a01 	vldmia	ip!, {s13}
 800cb54:	ecb5 7a01 	vldmia	r5!, {s14}
 800cb58:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cb5c:	3001      	adds	r0, #1
 800cb5e:	4550      	cmp	r0, sl
 800cb60:	dc01      	bgt.n	800cb66 <__kernel_rem_pio2f+0x39a>
 800cb62:	4282      	cmp	r2, r0
 800cb64:	daf4      	bge.n	800cb50 <__kernel_rem_pio2f+0x384>
 800cb66:	a858      	add	r0, sp, #352	@ 0x160
 800cb68:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800cb6c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800cb70:	3b01      	subs	r3, #1
 800cb72:	e735      	b.n	800c9e0 <__kernel_rem_pio2f+0x214>
 800cb74:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800cb76:	2b02      	cmp	r3, #2
 800cb78:	dc09      	bgt.n	800cb8e <__kernel_rem_pio2f+0x3c2>
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	dc2b      	bgt.n	800cbd6 <__kernel_rem_pio2f+0x40a>
 800cb7e:	d044      	beq.n	800cc0a <__kernel_rem_pio2f+0x43e>
 800cb80:	f009 0007 	and.w	r0, r9, #7
 800cb84:	b059      	add	sp, #356	@ 0x164
 800cb86:	ecbd 8b04 	vpop	{d8-d9}
 800cb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb8e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800cb90:	2b03      	cmp	r3, #3
 800cb92:	d1f5      	bne.n	800cb80 <__kernel_rem_pio2f+0x3b4>
 800cb94:	aa30      	add	r2, sp, #192	@ 0xc0
 800cb96:	1f0b      	subs	r3, r1, #4
 800cb98:	4413      	add	r3, r2
 800cb9a:	461a      	mov	r2, r3
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	2800      	cmp	r0, #0
 800cba0:	f1a2 0204 	sub.w	r2, r2, #4
 800cba4:	dc52      	bgt.n	800cc4c <__kernel_rem_pio2f+0x480>
 800cba6:	4622      	mov	r2, r4
 800cba8:	2a01      	cmp	r2, #1
 800cbaa:	f1a3 0304 	sub.w	r3, r3, #4
 800cbae:	dc5d      	bgt.n	800cc6c <__kernel_rem_pio2f+0x4a0>
 800cbb0:	ab30      	add	r3, sp, #192	@ 0xc0
 800cbb2:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800cad0 <__kernel_rem_pio2f+0x304>
 800cbb6:	440b      	add	r3, r1
 800cbb8:	2c01      	cmp	r4, #1
 800cbba:	dc67      	bgt.n	800cc8c <__kernel_rem_pio2f+0x4c0>
 800cbbc:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800cbc0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800cbc4:	2e00      	cmp	r6, #0
 800cbc6:	d167      	bne.n	800cc98 <__kernel_rem_pio2f+0x4cc>
 800cbc8:	edc7 6a00 	vstr	s13, [r7]
 800cbcc:	ed87 7a01 	vstr	s14, [r7, #4]
 800cbd0:	edc7 7a02 	vstr	s15, [r7, #8]
 800cbd4:	e7d4      	b.n	800cb80 <__kernel_rem_pio2f+0x3b4>
 800cbd6:	ab30      	add	r3, sp, #192	@ 0xc0
 800cbd8:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800cad0 <__kernel_rem_pio2f+0x304>
 800cbdc:	440b      	add	r3, r1
 800cbde:	4622      	mov	r2, r4
 800cbe0:	2a00      	cmp	r2, #0
 800cbe2:	da24      	bge.n	800cc2e <__kernel_rem_pio2f+0x462>
 800cbe4:	b34e      	cbz	r6, 800cc3a <__kernel_rem_pio2f+0x46e>
 800cbe6:	eef1 7a47 	vneg.f32	s15, s14
 800cbea:	edc7 7a00 	vstr	s15, [r7]
 800cbee:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800cbf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cbf6:	aa31      	add	r2, sp, #196	@ 0xc4
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	429c      	cmp	r4, r3
 800cbfc:	da20      	bge.n	800cc40 <__kernel_rem_pio2f+0x474>
 800cbfe:	b10e      	cbz	r6, 800cc04 <__kernel_rem_pio2f+0x438>
 800cc00:	eef1 7a67 	vneg.f32	s15, s15
 800cc04:	edc7 7a01 	vstr	s15, [r7, #4]
 800cc08:	e7ba      	b.n	800cb80 <__kernel_rem_pio2f+0x3b4>
 800cc0a:	ab30      	add	r3, sp, #192	@ 0xc0
 800cc0c:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800cad0 <__kernel_rem_pio2f+0x304>
 800cc10:	440b      	add	r3, r1
 800cc12:	2c00      	cmp	r4, #0
 800cc14:	da05      	bge.n	800cc22 <__kernel_rem_pio2f+0x456>
 800cc16:	b10e      	cbz	r6, 800cc1c <__kernel_rem_pio2f+0x450>
 800cc18:	eef1 7a67 	vneg.f32	s15, s15
 800cc1c:	edc7 7a00 	vstr	s15, [r7]
 800cc20:	e7ae      	b.n	800cb80 <__kernel_rem_pio2f+0x3b4>
 800cc22:	ed33 7a01 	vldmdb	r3!, {s14}
 800cc26:	3c01      	subs	r4, #1
 800cc28:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc2c:	e7f1      	b.n	800cc12 <__kernel_rem_pio2f+0x446>
 800cc2e:	ed73 7a01 	vldmdb	r3!, {s15}
 800cc32:	3a01      	subs	r2, #1
 800cc34:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cc38:	e7d2      	b.n	800cbe0 <__kernel_rem_pio2f+0x414>
 800cc3a:	eef0 7a47 	vmov.f32	s15, s14
 800cc3e:	e7d4      	b.n	800cbea <__kernel_rem_pio2f+0x41e>
 800cc40:	ecb2 7a01 	vldmia	r2!, {s14}
 800cc44:	3301      	adds	r3, #1
 800cc46:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc4a:	e7d6      	b.n	800cbfa <__kernel_rem_pio2f+0x42e>
 800cc4c:	edd2 7a00 	vldr	s15, [r2]
 800cc50:	edd2 6a01 	vldr	s13, [r2, #4]
 800cc54:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cc58:	3801      	subs	r0, #1
 800cc5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc5e:	ed82 7a00 	vstr	s14, [r2]
 800cc62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc66:	edc2 7a01 	vstr	s15, [r2, #4]
 800cc6a:	e798      	b.n	800cb9e <__kernel_rem_pio2f+0x3d2>
 800cc6c:	edd3 7a00 	vldr	s15, [r3]
 800cc70:	edd3 6a01 	vldr	s13, [r3, #4]
 800cc74:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cc78:	3a01      	subs	r2, #1
 800cc7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc7e:	ed83 7a00 	vstr	s14, [r3]
 800cc82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc86:	edc3 7a01 	vstr	s15, [r3, #4]
 800cc8a:	e78d      	b.n	800cba8 <__kernel_rem_pio2f+0x3dc>
 800cc8c:	ed33 7a01 	vldmdb	r3!, {s14}
 800cc90:	3c01      	subs	r4, #1
 800cc92:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc96:	e78f      	b.n	800cbb8 <__kernel_rem_pio2f+0x3ec>
 800cc98:	eef1 6a66 	vneg.f32	s13, s13
 800cc9c:	eeb1 7a47 	vneg.f32	s14, s14
 800cca0:	edc7 6a00 	vstr	s13, [r7]
 800cca4:	ed87 7a01 	vstr	s14, [r7, #4]
 800cca8:	eef1 7a67 	vneg.f32	s15, s15
 800ccac:	e790      	b.n	800cbd0 <__kernel_rem_pio2f+0x404>
 800ccae:	bf00      	nop

0800ccb0 <floorf>:
 800ccb0:	ee10 3a10 	vmov	r3, s0
 800ccb4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ccb8:	3a7f      	subs	r2, #127	@ 0x7f
 800ccba:	2a16      	cmp	r2, #22
 800ccbc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ccc0:	dc2b      	bgt.n	800cd1a <floorf+0x6a>
 800ccc2:	2a00      	cmp	r2, #0
 800ccc4:	da12      	bge.n	800ccec <floorf+0x3c>
 800ccc6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800cd2c <floorf+0x7c>
 800ccca:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ccce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ccd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccd6:	dd06      	ble.n	800cce6 <floorf+0x36>
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	da24      	bge.n	800cd26 <floorf+0x76>
 800ccdc:	2900      	cmp	r1, #0
 800ccde:	4b14      	ldr	r3, [pc, #80]	@ (800cd30 <floorf+0x80>)
 800cce0:	bf08      	it	eq
 800cce2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800cce6:	ee00 3a10 	vmov	s0, r3
 800ccea:	4770      	bx	lr
 800ccec:	4911      	ldr	r1, [pc, #68]	@ (800cd34 <floorf+0x84>)
 800ccee:	4111      	asrs	r1, r2
 800ccf0:	420b      	tst	r3, r1
 800ccf2:	d0fa      	beq.n	800ccea <floorf+0x3a>
 800ccf4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800cd2c <floorf+0x7c>
 800ccf8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ccfc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cd00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd04:	ddef      	ble.n	800cce6 <floorf+0x36>
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	bfbe      	ittt	lt
 800cd0a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800cd0e:	fa40 f202 	asrlt.w	r2, r0, r2
 800cd12:	189b      	addlt	r3, r3, r2
 800cd14:	ea23 0301 	bic.w	r3, r3, r1
 800cd18:	e7e5      	b.n	800cce6 <floorf+0x36>
 800cd1a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800cd1e:	d3e4      	bcc.n	800ccea <floorf+0x3a>
 800cd20:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cd24:	4770      	bx	lr
 800cd26:	2300      	movs	r3, #0
 800cd28:	e7dd      	b.n	800cce6 <floorf+0x36>
 800cd2a:	bf00      	nop
 800cd2c:	7149f2ca 	.word	0x7149f2ca
 800cd30:	bf800000 	.word	0xbf800000
 800cd34:	007fffff 	.word	0x007fffff

0800cd38 <__cvt>:
 800cd38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd3c:	ec57 6b10 	vmov	r6, r7, d0
 800cd40:	2f00      	cmp	r7, #0
 800cd42:	460c      	mov	r4, r1
 800cd44:	4619      	mov	r1, r3
 800cd46:	463b      	mov	r3, r7
 800cd48:	bfbb      	ittet	lt
 800cd4a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cd4e:	461f      	movlt	r7, r3
 800cd50:	2300      	movge	r3, #0
 800cd52:	232d      	movlt	r3, #45	@ 0x2d
 800cd54:	700b      	strb	r3, [r1, #0]
 800cd56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cd58:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cd5c:	4691      	mov	r9, r2
 800cd5e:	f023 0820 	bic.w	r8, r3, #32
 800cd62:	bfbc      	itt	lt
 800cd64:	4632      	movlt	r2, r6
 800cd66:	4616      	movlt	r6, r2
 800cd68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cd6c:	d005      	beq.n	800cd7a <__cvt+0x42>
 800cd6e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cd72:	d100      	bne.n	800cd76 <__cvt+0x3e>
 800cd74:	3401      	adds	r4, #1
 800cd76:	2102      	movs	r1, #2
 800cd78:	e000      	b.n	800cd7c <__cvt+0x44>
 800cd7a:	2103      	movs	r1, #3
 800cd7c:	ab03      	add	r3, sp, #12
 800cd7e:	9301      	str	r3, [sp, #4]
 800cd80:	ab02      	add	r3, sp, #8
 800cd82:	9300      	str	r3, [sp, #0]
 800cd84:	ec47 6b10 	vmov	d0, r6, r7
 800cd88:	4653      	mov	r3, sl
 800cd8a:	4622      	mov	r2, r4
 800cd8c:	f000 ff3c 	bl	800dc08 <_dtoa_r>
 800cd90:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cd94:	4605      	mov	r5, r0
 800cd96:	d119      	bne.n	800cdcc <__cvt+0x94>
 800cd98:	f019 0f01 	tst.w	r9, #1
 800cd9c:	d00e      	beq.n	800cdbc <__cvt+0x84>
 800cd9e:	eb00 0904 	add.w	r9, r0, r4
 800cda2:	2200      	movs	r2, #0
 800cda4:	2300      	movs	r3, #0
 800cda6:	4630      	mov	r0, r6
 800cda8:	4639      	mov	r1, r7
 800cdaa:	f7f3 fe95 	bl	8000ad8 <__aeabi_dcmpeq>
 800cdae:	b108      	cbz	r0, 800cdb4 <__cvt+0x7c>
 800cdb0:	f8cd 900c 	str.w	r9, [sp, #12]
 800cdb4:	2230      	movs	r2, #48	@ 0x30
 800cdb6:	9b03      	ldr	r3, [sp, #12]
 800cdb8:	454b      	cmp	r3, r9
 800cdba:	d31e      	bcc.n	800cdfa <__cvt+0xc2>
 800cdbc:	9b03      	ldr	r3, [sp, #12]
 800cdbe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cdc0:	1b5b      	subs	r3, r3, r5
 800cdc2:	4628      	mov	r0, r5
 800cdc4:	6013      	str	r3, [r2, #0]
 800cdc6:	b004      	add	sp, #16
 800cdc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdcc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cdd0:	eb00 0904 	add.w	r9, r0, r4
 800cdd4:	d1e5      	bne.n	800cda2 <__cvt+0x6a>
 800cdd6:	7803      	ldrb	r3, [r0, #0]
 800cdd8:	2b30      	cmp	r3, #48	@ 0x30
 800cdda:	d10a      	bne.n	800cdf2 <__cvt+0xba>
 800cddc:	2200      	movs	r2, #0
 800cdde:	2300      	movs	r3, #0
 800cde0:	4630      	mov	r0, r6
 800cde2:	4639      	mov	r1, r7
 800cde4:	f7f3 fe78 	bl	8000ad8 <__aeabi_dcmpeq>
 800cde8:	b918      	cbnz	r0, 800cdf2 <__cvt+0xba>
 800cdea:	f1c4 0401 	rsb	r4, r4, #1
 800cdee:	f8ca 4000 	str.w	r4, [sl]
 800cdf2:	f8da 3000 	ldr.w	r3, [sl]
 800cdf6:	4499      	add	r9, r3
 800cdf8:	e7d3      	b.n	800cda2 <__cvt+0x6a>
 800cdfa:	1c59      	adds	r1, r3, #1
 800cdfc:	9103      	str	r1, [sp, #12]
 800cdfe:	701a      	strb	r2, [r3, #0]
 800ce00:	e7d9      	b.n	800cdb6 <__cvt+0x7e>

0800ce02 <__exponent>:
 800ce02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce04:	2900      	cmp	r1, #0
 800ce06:	bfba      	itte	lt
 800ce08:	4249      	neglt	r1, r1
 800ce0a:	232d      	movlt	r3, #45	@ 0x2d
 800ce0c:	232b      	movge	r3, #43	@ 0x2b
 800ce0e:	2909      	cmp	r1, #9
 800ce10:	7002      	strb	r2, [r0, #0]
 800ce12:	7043      	strb	r3, [r0, #1]
 800ce14:	dd29      	ble.n	800ce6a <__exponent+0x68>
 800ce16:	f10d 0307 	add.w	r3, sp, #7
 800ce1a:	461d      	mov	r5, r3
 800ce1c:	270a      	movs	r7, #10
 800ce1e:	461a      	mov	r2, r3
 800ce20:	fbb1 f6f7 	udiv	r6, r1, r7
 800ce24:	fb07 1416 	mls	r4, r7, r6, r1
 800ce28:	3430      	adds	r4, #48	@ 0x30
 800ce2a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ce2e:	460c      	mov	r4, r1
 800ce30:	2c63      	cmp	r4, #99	@ 0x63
 800ce32:	f103 33ff 	add.w	r3, r3, #4294967295
 800ce36:	4631      	mov	r1, r6
 800ce38:	dcf1      	bgt.n	800ce1e <__exponent+0x1c>
 800ce3a:	3130      	adds	r1, #48	@ 0x30
 800ce3c:	1e94      	subs	r4, r2, #2
 800ce3e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ce42:	1c41      	adds	r1, r0, #1
 800ce44:	4623      	mov	r3, r4
 800ce46:	42ab      	cmp	r3, r5
 800ce48:	d30a      	bcc.n	800ce60 <__exponent+0x5e>
 800ce4a:	f10d 0309 	add.w	r3, sp, #9
 800ce4e:	1a9b      	subs	r3, r3, r2
 800ce50:	42ac      	cmp	r4, r5
 800ce52:	bf88      	it	hi
 800ce54:	2300      	movhi	r3, #0
 800ce56:	3302      	adds	r3, #2
 800ce58:	4403      	add	r3, r0
 800ce5a:	1a18      	subs	r0, r3, r0
 800ce5c:	b003      	add	sp, #12
 800ce5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce60:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ce64:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ce68:	e7ed      	b.n	800ce46 <__exponent+0x44>
 800ce6a:	2330      	movs	r3, #48	@ 0x30
 800ce6c:	3130      	adds	r1, #48	@ 0x30
 800ce6e:	7083      	strb	r3, [r0, #2]
 800ce70:	70c1      	strb	r1, [r0, #3]
 800ce72:	1d03      	adds	r3, r0, #4
 800ce74:	e7f1      	b.n	800ce5a <__exponent+0x58>
	...

0800ce78 <_printf_float>:
 800ce78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce7c:	b08d      	sub	sp, #52	@ 0x34
 800ce7e:	460c      	mov	r4, r1
 800ce80:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ce84:	4616      	mov	r6, r2
 800ce86:	461f      	mov	r7, r3
 800ce88:	4605      	mov	r5, r0
 800ce8a:	f000 fdad 	bl	800d9e8 <_localeconv_r>
 800ce8e:	6803      	ldr	r3, [r0, #0]
 800ce90:	9304      	str	r3, [sp, #16]
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7f3 f9f4 	bl	8000280 <strlen>
 800ce98:	2300      	movs	r3, #0
 800ce9a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce9c:	f8d8 3000 	ldr.w	r3, [r8]
 800cea0:	9005      	str	r0, [sp, #20]
 800cea2:	3307      	adds	r3, #7
 800cea4:	f023 0307 	bic.w	r3, r3, #7
 800cea8:	f103 0208 	add.w	r2, r3, #8
 800ceac:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ceb0:	f8d4 b000 	ldr.w	fp, [r4]
 800ceb4:	f8c8 2000 	str.w	r2, [r8]
 800ceb8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cebc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cec0:	9307      	str	r3, [sp, #28]
 800cec2:	f8cd 8018 	str.w	r8, [sp, #24]
 800cec6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ceca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cece:	4b9c      	ldr	r3, [pc, #624]	@ (800d140 <_printf_float+0x2c8>)
 800ced0:	f04f 32ff 	mov.w	r2, #4294967295
 800ced4:	f7f3 fe32 	bl	8000b3c <__aeabi_dcmpun>
 800ced8:	bb70      	cbnz	r0, 800cf38 <_printf_float+0xc0>
 800ceda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cede:	4b98      	ldr	r3, [pc, #608]	@ (800d140 <_printf_float+0x2c8>)
 800cee0:	f04f 32ff 	mov.w	r2, #4294967295
 800cee4:	f7f3 fe0c 	bl	8000b00 <__aeabi_dcmple>
 800cee8:	bb30      	cbnz	r0, 800cf38 <_printf_float+0xc0>
 800ceea:	2200      	movs	r2, #0
 800ceec:	2300      	movs	r3, #0
 800ceee:	4640      	mov	r0, r8
 800cef0:	4649      	mov	r1, r9
 800cef2:	f7f3 fdfb 	bl	8000aec <__aeabi_dcmplt>
 800cef6:	b110      	cbz	r0, 800cefe <_printf_float+0x86>
 800cef8:	232d      	movs	r3, #45	@ 0x2d
 800cefa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cefe:	4a91      	ldr	r2, [pc, #580]	@ (800d144 <_printf_float+0x2cc>)
 800cf00:	4b91      	ldr	r3, [pc, #580]	@ (800d148 <_printf_float+0x2d0>)
 800cf02:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cf06:	bf94      	ite	ls
 800cf08:	4690      	movls	r8, r2
 800cf0a:	4698      	movhi	r8, r3
 800cf0c:	2303      	movs	r3, #3
 800cf0e:	6123      	str	r3, [r4, #16]
 800cf10:	f02b 0304 	bic.w	r3, fp, #4
 800cf14:	6023      	str	r3, [r4, #0]
 800cf16:	f04f 0900 	mov.w	r9, #0
 800cf1a:	9700      	str	r7, [sp, #0]
 800cf1c:	4633      	mov	r3, r6
 800cf1e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cf20:	4621      	mov	r1, r4
 800cf22:	4628      	mov	r0, r5
 800cf24:	f000 f9d2 	bl	800d2cc <_printf_common>
 800cf28:	3001      	adds	r0, #1
 800cf2a:	f040 808d 	bne.w	800d048 <_printf_float+0x1d0>
 800cf2e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf32:	b00d      	add	sp, #52	@ 0x34
 800cf34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf38:	4642      	mov	r2, r8
 800cf3a:	464b      	mov	r3, r9
 800cf3c:	4640      	mov	r0, r8
 800cf3e:	4649      	mov	r1, r9
 800cf40:	f7f3 fdfc 	bl	8000b3c <__aeabi_dcmpun>
 800cf44:	b140      	cbz	r0, 800cf58 <_printf_float+0xe0>
 800cf46:	464b      	mov	r3, r9
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	bfbc      	itt	lt
 800cf4c:	232d      	movlt	r3, #45	@ 0x2d
 800cf4e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cf52:	4a7e      	ldr	r2, [pc, #504]	@ (800d14c <_printf_float+0x2d4>)
 800cf54:	4b7e      	ldr	r3, [pc, #504]	@ (800d150 <_printf_float+0x2d8>)
 800cf56:	e7d4      	b.n	800cf02 <_printf_float+0x8a>
 800cf58:	6863      	ldr	r3, [r4, #4]
 800cf5a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cf5e:	9206      	str	r2, [sp, #24]
 800cf60:	1c5a      	adds	r2, r3, #1
 800cf62:	d13b      	bne.n	800cfdc <_printf_float+0x164>
 800cf64:	2306      	movs	r3, #6
 800cf66:	6063      	str	r3, [r4, #4]
 800cf68:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	6022      	str	r2, [r4, #0]
 800cf70:	9303      	str	r3, [sp, #12]
 800cf72:	ab0a      	add	r3, sp, #40	@ 0x28
 800cf74:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cf78:	ab09      	add	r3, sp, #36	@ 0x24
 800cf7a:	9300      	str	r3, [sp, #0]
 800cf7c:	6861      	ldr	r1, [r4, #4]
 800cf7e:	ec49 8b10 	vmov	d0, r8, r9
 800cf82:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cf86:	4628      	mov	r0, r5
 800cf88:	f7ff fed6 	bl	800cd38 <__cvt>
 800cf8c:	9b06      	ldr	r3, [sp, #24]
 800cf8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cf90:	2b47      	cmp	r3, #71	@ 0x47
 800cf92:	4680      	mov	r8, r0
 800cf94:	d129      	bne.n	800cfea <_printf_float+0x172>
 800cf96:	1cc8      	adds	r0, r1, #3
 800cf98:	db02      	blt.n	800cfa0 <_printf_float+0x128>
 800cf9a:	6863      	ldr	r3, [r4, #4]
 800cf9c:	4299      	cmp	r1, r3
 800cf9e:	dd41      	ble.n	800d024 <_printf_float+0x1ac>
 800cfa0:	f1aa 0a02 	sub.w	sl, sl, #2
 800cfa4:	fa5f fa8a 	uxtb.w	sl, sl
 800cfa8:	3901      	subs	r1, #1
 800cfaa:	4652      	mov	r2, sl
 800cfac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cfb0:	9109      	str	r1, [sp, #36]	@ 0x24
 800cfb2:	f7ff ff26 	bl	800ce02 <__exponent>
 800cfb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cfb8:	1813      	adds	r3, r2, r0
 800cfba:	2a01      	cmp	r2, #1
 800cfbc:	4681      	mov	r9, r0
 800cfbe:	6123      	str	r3, [r4, #16]
 800cfc0:	dc02      	bgt.n	800cfc8 <_printf_float+0x150>
 800cfc2:	6822      	ldr	r2, [r4, #0]
 800cfc4:	07d2      	lsls	r2, r2, #31
 800cfc6:	d501      	bpl.n	800cfcc <_printf_float+0x154>
 800cfc8:	3301      	adds	r3, #1
 800cfca:	6123      	str	r3, [r4, #16]
 800cfcc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d0a2      	beq.n	800cf1a <_printf_float+0xa2>
 800cfd4:	232d      	movs	r3, #45	@ 0x2d
 800cfd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cfda:	e79e      	b.n	800cf1a <_printf_float+0xa2>
 800cfdc:	9a06      	ldr	r2, [sp, #24]
 800cfde:	2a47      	cmp	r2, #71	@ 0x47
 800cfe0:	d1c2      	bne.n	800cf68 <_printf_float+0xf0>
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d1c0      	bne.n	800cf68 <_printf_float+0xf0>
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	e7bd      	b.n	800cf66 <_printf_float+0xee>
 800cfea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cfee:	d9db      	bls.n	800cfa8 <_printf_float+0x130>
 800cff0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cff4:	d118      	bne.n	800d028 <_printf_float+0x1b0>
 800cff6:	2900      	cmp	r1, #0
 800cff8:	6863      	ldr	r3, [r4, #4]
 800cffa:	dd0b      	ble.n	800d014 <_printf_float+0x19c>
 800cffc:	6121      	str	r1, [r4, #16]
 800cffe:	b913      	cbnz	r3, 800d006 <_printf_float+0x18e>
 800d000:	6822      	ldr	r2, [r4, #0]
 800d002:	07d0      	lsls	r0, r2, #31
 800d004:	d502      	bpl.n	800d00c <_printf_float+0x194>
 800d006:	3301      	adds	r3, #1
 800d008:	440b      	add	r3, r1
 800d00a:	6123      	str	r3, [r4, #16]
 800d00c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d00e:	f04f 0900 	mov.w	r9, #0
 800d012:	e7db      	b.n	800cfcc <_printf_float+0x154>
 800d014:	b913      	cbnz	r3, 800d01c <_printf_float+0x1a4>
 800d016:	6822      	ldr	r2, [r4, #0]
 800d018:	07d2      	lsls	r2, r2, #31
 800d01a:	d501      	bpl.n	800d020 <_printf_float+0x1a8>
 800d01c:	3302      	adds	r3, #2
 800d01e:	e7f4      	b.n	800d00a <_printf_float+0x192>
 800d020:	2301      	movs	r3, #1
 800d022:	e7f2      	b.n	800d00a <_printf_float+0x192>
 800d024:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d028:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d02a:	4299      	cmp	r1, r3
 800d02c:	db05      	blt.n	800d03a <_printf_float+0x1c2>
 800d02e:	6823      	ldr	r3, [r4, #0]
 800d030:	6121      	str	r1, [r4, #16]
 800d032:	07d8      	lsls	r0, r3, #31
 800d034:	d5ea      	bpl.n	800d00c <_printf_float+0x194>
 800d036:	1c4b      	adds	r3, r1, #1
 800d038:	e7e7      	b.n	800d00a <_printf_float+0x192>
 800d03a:	2900      	cmp	r1, #0
 800d03c:	bfd4      	ite	le
 800d03e:	f1c1 0202 	rsble	r2, r1, #2
 800d042:	2201      	movgt	r2, #1
 800d044:	4413      	add	r3, r2
 800d046:	e7e0      	b.n	800d00a <_printf_float+0x192>
 800d048:	6823      	ldr	r3, [r4, #0]
 800d04a:	055a      	lsls	r2, r3, #21
 800d04c:	d407      	bmi.n	800d05e <_printf_float+0x1e6>
 800d04e:	6923      	ldr	r3, [r4, #16]
 800d050:	4642      	mov	r2, r8
 800d052:	4631      	mov	r1, r6
 800d054:	4628      	mov	r0, r5
 800d056:	47b8      	blx	r7
 800d058:	3001      	adds	r0, #1
 800d05a:	d12b      	bne.n	800d0b4 <_printf_float+0x23c>
 800d05c:	e767      	b.n	800cf2e <_printf_float+0xb6>
 800d05e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d062:	f240 80dd 	bls.w	800d220 <_printf_float+0x3a8>
 800d066:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d06a:	2200      	movs	r2, #0
 800d06c:	2300      	movs	r3, #0
 800d06e:	f7f3 fd33 	bl	8000ad8 <__aeabi_dcmpeq>
 800d072:	2800      	cmp	r0, #0
 800d074:	d033      	beq.n	800d0de <_printf_float+0x266>
 800d076:	4a37      	ldr	r2, [pc, #220]	@ (800d154 <_printf_float+0x2dc>)
 800d078:	2301      	movs	r3, #1
 800d07a:	4631      	mov	r1, r6
 800d07c:	4628      	mov	r0, r5
 800d07e:	47b8      	blx	r7
 800d080:	3001      	adds	r0, #1
 800d082:	f43f af54 	beq.w	800cf2e <_printf_float+0xb6>
 800d086:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d08a:	4543      	cmp	r3, r8
 800d08c:	db02      	blt.n	800d094 <_printf_float+0x21c>
 800d08e:	6823      	ldr	r3, [r4, #0]
 800d090:	07d8      	lsls	r0, r3, #31
 800d092:	d50f      	bpl.n	800d0b4 <_printf_float+0x23c>
 800d094:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d098:	4631      	mov	r1, r6
 800d09a:	4628      	mov	r0, r5
 800d09c:	47b8      	blx	r7
 800d09e:	3001      	adds	r0, #1
 800d0a0:	f43f af45 	beq.w	800cf2e <_printf_float+0xb6>
 800d0a4:	f04f 0900 	mov.w	r9, #0
 800d0a8:	f108 38ff 	add.w	r8, r8, #4294967295
 800d0ac:	f104 0a1a 	add.w	sl, r4, #26
 800d0b0:	45c8      	cmp	r8, r9
 800d0b2:	dc09      	bgt.n	800d0c8 <_printf_float+0x250>
 800d0b4:	6823      	ldr	r3, [r4, #0]
 800d0b6:	079b      	lsls	r3, r3, #30
 800d0b8:	f100 8103 	bmi.w	800d2c2 <_printf_float+0x44a>
 800d0bc:	68e0      	ldr	r0, [r4, #12]
 800d0be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d0c0:	4298      	cmp	r0, r3
 800d0c2:	bfb8      	it	lt
 800d0c4:	4618      	movlt	r0, r3
 800d0c6:	e734      	b.n	800cf32 <_printf_float+0xba>
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	4652      	mov	r2, sl
 800d0cc:	4631      	mov	r1, r6
 800d0ce:	4628      	mov	r0, r5
 800d0d0:	47b8      	blx	r7
 800d0d2:	3001      	adds	r0, #1
 800d0d4:	f43f af2b 	beq.w	800cf2e <_printf_float+0xb6>
 800d0d8:	f109 0901 	add.w	r9, r9, #1
 800d0dc:	e7e8      	b.n	800d0b0 <_printf_float+0x238>
 800d0de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	dc39      	bgt.n	800d158 <_printf_float+0x2e0>
 800d0e4:	4a1b      	ldr	r2, [pc, #108]	@ (800d154 <_printf_float+0x2dc>)
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	4631      	mov	r1, r6
 800d0ea:	4628      	mov	r0, r5
 800d0ec:	47b8      	blx	r7
 800d0ee:	3001      	adds	r0, #1
 800d0f0:	f43f af1d 	beq.w	800cf2e <_printf_float+0xb6>
 800d0f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d0f8:	ea59 0303 	orrs.w	r3, r9, r3
 800d0fc:	d102      	bne.n	800d104 <_printf_float+0x28c>
 800d0fe:	6823      	ldr	r3, [r4, #0]
 800d100:	07d9      	lsls	r1, r3, #31
 800d102:	d5d7      	bpl.n	800d0b4 <_printf_float+0x23c>
 800d104:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d108:	4631      	mov	r1, r6
 800d10a:	4628      	mov	r0, r5
 800d10c:	47b8      	blx	r7
 800d10e:	3001      	adds	r0, #1
 800d110:	f43f af0d 	beq.w	800cf2e <_printf_float+0xb6>
 800d114:	f04f 0a00 	mov.w	sl, #0
 800d118:	f104 0b1a 	add.w	fp, r4, #26
 800d11c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d11e:	425b      	negs	r3, r3
 800d120:	4553      	cmp	r3, sl
 800d122:	dc01      	bgt.n	800d128 <_printf_float+0x2b0>
 800d124:	464b      	mov	r3, r9
 800d126:	e793      	b.n	800d050 <_printf_float+0x1d8>
 800d128:	2301      	movs	r3, #1
 800d12a:	465a      	mov	r2, fp
 800d12c:	4631      	mov	r1, r6
 800d12e:	4628      	mov	r0, r5
 800d130:	47b8      	blx	r7
 800d132:	3001      	adds	r0, #1
 800d134:	f43f aefb 	beq.w	800cf2e <_printf_float+0xb6>
 800d138:	f10a 0a01 	add.w	sl, sl, #1
 800d13c:	e7ee      	b.n	800d11c <_printf_float+0x2a4>
 800d13e:	bf00      	nop
 800d140:	7fefffff 	.word	0x7fefffff
 800d144:	0800fb78 	.word	0x0800fb78
 800d148:	0800fb7c 	.word	0x0800fb7c
 800d14c:	0800fb80 	.word	0x0800fb80
 800d150:	0800fb84 	.word	0x0800fb84
 800d154:	0800fb88 	.word	0x0800fb88
 800d158:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d15a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d15e:	4553      	cmp	r3, sl
 800d160:	bfa8      	it	ge
 800d162:	4653      	movge	r3, sl
 800d164:	2b00      	cmp	r3, #0
 800d166:	4699      	mov	r9, r3
 800d168:	dc36      	bgt.n	800d1d8 <_printf_float+0x360>
 800d16a:	f04f 0b00 	mov.w	fp, #0
 800d16e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d172:	f104 021a 	add.w	r2, r4, #26
 800d176:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d178:	9306      	str	r3, [sp, #24]
 800d17a:	eba3 0309 	sub.w	r3, r3, r9
 800d17e:	455b      	cmp	r3, fp
 800d180:	dc31      	bgt.n	800d1e6 <_printf_float+0x36e>
 800d182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d184:	459a      	cmp	sl, r3
 800d186:	dc3a      	bgt.n	800d1fe <_printf_float+0x386>
 800d188:	6823      	ldr	r3, [r4, #0]
 800d18a:	07da      	lsls	r2, r3, #31
 800d18c:	d437      	bmi.n	800d1fe <_printf_float+0x386>
 800d18e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d190:	ebaa 0903 	sub.w	r9, sl, r3
 800d194:	9b06      	ldr	r3, [sp, #24]
 800d196:	ebaa 0303 	sub.w	r3, sl, r3
 800d19a:	4599      	cmp	r9, r3
 800d19c:	bfa8      	it	ge
 800d19e:	4699      	movge	r9, r3
 800d1a0:	f1b9 0f00 	cmp.w	r9, #0
 800d1a4:	dc33      	bgt.n	800d20e <_printf_float+0x396>
 800d1a6:	f04f 0800 	mov.w	r8, #0
 800d1aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d1ae:	f104 0b1a 	add.w	fp, r4, #26
 800d1b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1b4:	ebaa 0303 	sub.w	r3, sl, r3
 800d1b8:	eba3 0309 	sub.w	r3, r3, r9
 800d1bc:	4543      	cmp	r3, r8
 800d1be:	f77f af79 	ble.w	800d0b4 <_printf_float+0x23c>
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	465a      	mov	r2, fp
 800d1c6:	4631      	mov	r1, r6
 800d1c8:	4628      	mov	r0, r5
 800d1ca:	47b8      	blx	r7
 800d1cc:	3001      	adds	r0, #1
 800d1ce:	f43f aeae 	beq.w	800cf2e <_printf_float+0xb6>
 800d1d2:	f108 0801 	add.w	r8, r8, #1
 800d1d6:	e7ec      	b.n	800d1b2 <_printf_float+0x33a>
 800d1d8:	4642      	mov	r2, r8
 800d1da:	4631      	mov	r1, r6
 800d1dc:	4628      	mov	r0, r5
 800d1de:	47b8      	blx	r7
 800d1e0:	3001      	adds	r0, #1
 800d1e2:	d1c2      	bne.n	800d16a <_printf_float+0x2f2>
 800d1e4:	e6a3      	b.n	800cf2e <_printf_float+0xb6>
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	4631      	mov	r1, r6
 800d1ea:	4628      	mov	r0, r5
 800d1ec:	9206      	str	r2, [sp, #24]
 800d1ee:	47b8      	blx	r7
 800d1f0:	3001      	adds	r0, #1
 800d1f2:	f43f ae9c 	beq.w	800cf2e <_printf_float+0xb6>
 800d1f6:	9a06      	ldr	r2, [sp, #24]
 800d1f8:	f10b 0b01 	add.w	fp, fp, #1
 800d1fc:	e7bb      	b.n	800d176 <_printf_float+0x2fe>
 800d1fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d202:	4631      	mov	r1, r6
 800d204:	4628      	mov	r0, r5
 800d206:	47b8      	blx	r7
 800d208:	3001      	adds	r0, #1
 800d20a:	d1c0      	bne.n	800d18e <_printf_float+0x316>
 800d20c:	e68f      	b.n	800cf2e <_printf_float+0xb6>
 800d20e:	9a06      	ldr	r2, [sp, #24]
 800d210:	464b      	mov	r3, r9
 800d212:	4442      	add	r2, r8
 800d214:	4631      	mov	r1, r6
 800d216:	4628      	mov	r0, r5
 800d218:	47b8      	blx	r7
 800d21a:	3001      	adds	r0, #1
 800d21c:	d1c3      	bne.n	800d1a6 <_printf_float+0x32e>
 800d21e:	e686      	b.n	800cf2e <_printf_float+0xb6>
 800d220:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d224:	f1ba 0f01 	cmp.w	sl, #1
 800d228:	dc01      	bgt.n	800d22e <_printf_float+0x3b6>
 800d22a:	07db      	lsls	r3, r3, #31
 800d22c:	d536      	bpl.n	800d29c <_printf_float+0x424>
 800d22e:	2301      	movs	r3, #1
 800d230:	4642      	mov	r2, r8
 800d232:	4631      	mov	r1, r6
 800d234:	4628      	mov	r0, r5
 800d236:	47b8      	blx	r7
 800d238:	3001      	adds	r0, #1
 800d23a:	f43f ae78 	beq.w	800cf2e <_printf_float+0xb6>
 800d23e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d242:	4631      	mov	r1, r6
 800d244:	4628      	mov	r0, r5
 800d246:	47b8      	blx	r7
 800d248:	3001      	adds	r0, #1
 800d24a:	f43f ae70 	beq.w	800cf2e <_printf_float+0xb6>
 800d24e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d252:	2200      	movs	r2, #0
 800d254:	2300      	movs	r3, #0
 800d256:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d25a:	f7f3 fc3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800d25e:	b9c0      	cbnz	r0, 800d292 <_printf_float+0x41a>
 800d260:	4653      	mov	r3, sl
 800d262:	f108 0201 	add.w	r2, r8, #1
 800d266:	4631      	mov	r1, r6
 800d268:	4628      	mov	r0, r5
 800d26a:	47b8      	blx	r7
 800d26c:	3001      	adds	r0, #1
 800d26e:	d10c      	bne.n	800d28a <_printf_float+0x412>
 800d270:	e65d      	b.n	800cf2e <_printf_float+0xb6>
 800d272:	2301      	movs	r3, #1
 800d274:	465a      	mov	r2, fp
 800d276:	4631      	mov	r1, r6
 800d278:	4628      	mov	r0, r5
 800d27a:	47b8      	blx	r7
 800d27c:	3001      	adds	r0, #1
 800d27e:	f43f ae56 	beq.w	800cf2e <_printf_float+0xb6>
 800d282:	f108 0801 	add.w	r8, r8, #1
 800d286:	45d0      	cmp	r8, sl
 800d288:	dbf3      	blt.n	800d272 <_printf_float+0x3fa>
 800d28a:	464b      	mov	r3, r9
 800d28c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d290:	e6df      	b.n	800d052 <_printf_float+0x1da>
 800d292:	f04f 0800 	mov.w	r8, #0
 800d296:	f104 0b1a 	add.w	fp, r4, #26
 800d29a:	e7f4      	b.n	800d286 <_printf_float+0x40e>
 800d29c:	2301      	movs	r3, #1
 800d29e:	4642      	mov	r2, r8
 800d2a0:	e7e1      	b.n	800d266 <_printf_float+0x3ee>
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	464a      	mov	r2, r9
 800d2a6:	4631      	mov	r1, r6
 800d2a8:	4628      	mov	r0, r5
 800d2aa:	47b8      	blx	r7
 800d2ac:	3001      	adds	r0, #1
 800d2ae:	f43f ae3e 	beq.w	800cf2e <_printf_float+0xb6>
 800d2b2:	f108 0801 	add.w	r8, r8, #1
 800d2b6:	68e3      	ldr	r3, [r4, #12]
 800d2b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d2ba:	1a5b      	subs	r3, r3, r1
 800d2bc:	4543      	cmp	r3, r8
 800d2be:	dcf0      	bgt.n	800d2a2 <_printf_float+0x42a>
 800d2c0:	e6fc      	b.n	800d0bc <_printf_float+0x244>
 800d2c2:	f04f 0800 	mov.w	r8, #0
 800d2c6:	f104 0919 	add.w	r9, r4, #25
 800d2ca:	e7f4      	b.n	800d2b6 <_printf_float+0x43e>

0800d2cc <_printf_common>:
 800d2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2d0:	4616      	mov	r6, r2
 800d2d2:	4698      	mov	r8, r3
 800d2d4:	688a      	ldr	r2, [r1, #8]
 800d2d6:	690b      	ldr	r3, [r1, #16]
 800d2d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	bfb8      	it	lt
 800d2e0:	4613      	movlt	r3, r2
 800d2e2:	6033      	str	r3, [r6, #0]
 800d2e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d2e8:	4607      	mov	r7, r0
 800d2ea:	460c      	mov	r4, r1
 800d2ec:	b10a      	cbz	r2, 800d2f2 <_printf_common+0x26>
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	6033      	str	r3, [r6, #0]
 800d2f2:	6823      	ldr	r3, [r4, #0]
 800d2f4:	0699      	lsls	r1, r3, #26
 800d2f6:	bf42      	ittt	mi
 800d2f8:	6833      	ldrmi	r3, [r6, #0]
 800d2fa:	3302      	addmi	r3, #2
 800d2fc:	6033      	strmi	r3, [r6, #0]
 800d2fe:	6825      	ldr	r5, [r4, #0]
 800d300:	f015 0506 	ands.w	r5, r5, #6
 800d304:	d106      	bne.n	800d314 <_printf_common+0x48>
 800d306:	f104 0a19 	add.w	sl, r4, #25
 800d30a:	68e3      	ldr	r3, [r4, #12]
 800d30c:	6832      	ldr	r2, [r6, #0]
 800d30e:	1a9b      	subs	r3, r3, r2
 800d310:	42ab      	cmp	r3, r5
 800d312:	dc26      	bgt.n	800d362 <_printf_common+0x96>
 800d314:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d318:	6822      	ldr	r2, [r4, #0]
 800d31a:	3b00      	subs	r3, #0
 800d31c:	bf18      	it	ne
 800d31e:	2301      	movne	r3, #1
 800d320:	0692      	lsls	r2, r2, #26
 800d322:	d42b      	bmi.n	800d37c <_printf_common+0xb0>
 800d324:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d328:	4641      	mov	r1, r8
 800d32a:	4638      	mov	r0, r7
 800d32c:	47c8      	blx	r9
 800d32e:	3001      	adds	r0, #1
 800d330:	d01e      	beq.n	800d370 <_printf_common+0xa4>
 800d332:	6823      	ldr	r3, [r4, #0]
 800d334:	6922      	ldr	r2, [r4, #16]
 800d336:	f003 0306 	and.w	r3, r3, #6
 800d33a:	2b04      	cmp	r3, #4
 800d33c:	bf02      	ittt	eq
 800d33e:	68e5      	ldreq	r5, [r4, #12]
 800d340:	6833      	ldreq	r3, [r6, #0]
 800d342:	1aed      	subeq	r5, r5, r3
 800d344:	68a3      	ldr	r3, [r4, #8]
 800d346:	bf0c      	ite	eq
 800d348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d34c:	2500      	movne	r5, #0
 800d34e:	4293      	cmp	r3, r2
 800d350:	bfc4      	itt	gt
 800d352:	1a9b      	subgt	r3, r3, r2
 800d354:	18ed      	addgt	r5, r5, r3
 800d356:	2600      	movs	r6, #0
 800d358:	341a      	adds	r4, #26
 800d35a:	42b5      	cmp	r5, r6
 800d35c:	d11a      	bne.n	800d394 <_printf_common+0xc8>
 800d35e:	2000      	movs	r0, #0
 800d360:	e008      	b.n	800d374 <_printf_common+0xa8>
 800d362:	2301      	movs	r3, #1
 800d364:	4652      	mov	r2, sl
 800d366:	4641      	mov	r1, r8
 800d368:	4638      	mov	r0, r7
 800d36a:	47c8      	blx	r9
 800d36c:	3001      	adds	r0, #1
 800d36e:	d103      	bne.n	800d378 <_printf_common+0xac>
 800d370:	f04f 30ff 	mov.w	r0, #4294967295
 800d374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d378:	3501      	adds	r5, #1
 800d37a:	e7c6      	b.n	800d30a <_printf_common+0x3e>
 800d37c:	18e1      	adds	r1, r4, r3
 800d37e:	1c5a      	adds	r2, r3, #1
 800d380:	2030      	movs	r0, #48	@ 0x30
 800d382:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d386:	4422      	add	r2, r4
 800d388:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d38c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d390:	3302      	adds	r3, #2
 800d392:	e7c7      	b.n	800d324 <_printf_common+0x58>
 800d394:	2301      	movs	r3, #1
 800d396:	4622      	mov	r2, r4
 800d398:	4641      	mov	r1, r8
 800d39a:	4638      	mov	r0, r7
 800d39c:	47c8      	blx	r9
 800d39e:	3001      	adds	r0, #1
 800d3a0:	d0e6      	beq.n	800d370 <_printf_common+0xa4>
 800d3a2:	3601      	adds	r6, #1
 800d3a4:	e7d9      	b.n	800d35a <_printf_common+0x8e>
	...

0800d3a8 <_printf_i>:
 800d3a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3ac:	7e0f      	ldrb	r7, [r1, #24]
 800d3ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d3b0:	2f78      	cmp	r7, #120	@ 0x78
 800d3b2:	4691      	mov	r9, r2
 800d3b4:	4680      	mov	r8, r0
 800d3b6:	460c      	mov	r4, r1
 800d3b8:	469a      	mov	sl, r3
 800d3ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d3be:	d807      	bhi.n	800d3d0 <_printf_i+0x28>
 800d3c0:	2f62      	cmp	r7, #98	@ 0x62
 800d3c2:	d80a      	bhi.n	800d3da <_printf_i+0x32>
 800d3c4:	2f00      	cmp	r7, #0
 800d3c6:	f000 80d2 	beq.w	800d56e <_printf_i+0x1c6>
 800d3ca:	2f58      	cmp	r7, #88	@ 0x58
 800d3cc:	f000 80b9 	beq.w	800d542 <_printf_i+0x19a>
 800d3d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d3d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d3d8:	e03a      	b.n	800d450 <_printf_i+0xa8>
 800d3da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d3de:	2b15      	cmp	r3, #21
 800d3e0:	d8f6      	bhi.n	800d3d0 <_printf_i+0x28>
 800d3e2:	a101      	add	r1, pc, #4	@ (adr r1, 800d3e8 <_printf_i+0x40>)
 800d3e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d3e8:	0800d441 	.word	0x0800d441
 800d3ec:	0800d455 	.word	0x0800d455
 800d3f0:	0800d3d1 	.word	0x0800d3d1
 800d3f4:	0800d3d1 	.word	0x0800d3d1
 800d3f8:	0800d3d1 	.word	0x0800d3d1
 800d3fc:	0800d3d1 	.word	0x0800d3d1
 800d400:	0800d455 	.word	0x0800d455
 800d404:	0800d3d1 	.word	0x0800d3d1
 800d408:	0800d3d1 	.word	0x0800d3d1
 800d40c:	0800d3d1 	.word	0x0800d3d1
 800d410:	0800d3d1 	.word	0x0800d3d1
 800d414:	0800d555 	.word	0x0800d555
 800d418:	0800d47f 	.word	0x0800d47f
 800d41c:	0800d50f 	.word	0x0800d50f
 800d420:	0800d3d1 	.word	0x0800d3d1
 800d424:	0800d3d1 	.word	0x0800d3d1
 800d428:	0800d577 	.word	0x0800d577
 800d42c:	0800d3d1 	.word	0x0800d3d1
 800d430:	0800d47f 	.word	0x0800d47f
 800d434:	0800d3d1 	.word	0x0800d3d1
 800d438:	0800d3d1 	.word	0x0800d3d1
 800d43c:	0800d517 	.word	0x0800d517
 800d440:	6833      	ldr	r3, [r6, #0]
 800d442:	1d1a      	adds	r2, r3, #4
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	6032      	str	r2, [r6, #0]
 800d448:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d44c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d450:	2301      	movs	r3, #1
 800d452:	e09d      	b.n	800d590 <_printf_i+0x1e8>
 800d454:	6833      	ldr	r3, [r6, #0]
 800d456:	6820      	ldr	r0, [r4, #0]
 800d458:	1d19      	adds	r1, r3, #4
 800d45a:	6031      	str	r1, [r6, #0]
 800d45c:	0606      	lsls	r6, r0, #24
 800d45e:	d501      	bpl.n	800d464 <_printf_i+0xbc>
 800d460:	681d      	ldr	r5, [r3, #0]
 800d462:	e003      	b.n	800d46c <_printf_i+0xc4>
 800d464:	0645      	lsls	r5, r0, #25
 800d466:	d5fb      	bpl.n	800d460 <_printf_i+0xb8>
 800d468:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d46c:	2d00      	cmp	r5, #0
 800d46e:	da03      	bge.n	800d478 <_printf_i+0xd0>
 800d470:	232d      	movs	r3, #45	@ 0x2d
 800d472:	426d      	negs	r5, r5
 800d474:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d478:	4859      	ldr	r0, [pc, #356]	@ (800d5e0 <_printf_i+0x238>)
 800d47a:	230a      	movs	r3, #10
 800d47c:	e011      	b.n	800d4a2 <_printf_i+0xfa>
 800d47e:	6821      	ldr	r1, [r4, #0]
 800d480:	6833      	ldr	r3, [r6, #0]
 800d482:	0608      	lsls	r0, r1, #24
 800d484:	f853 5b04 	ldr.w	r5, [r3], #4
 800d488:	d402      	bmi.n	800d490 <_printf_i+0xe8>
 800d48a:	0649      	lsls	r1, r1, #25
 800d48c:	bf48      	it	mi
 800d48e:	b2ad      	uxthmi	r5, r5
 800d490:	2f6f      	cmp	r7, #111	@ 0x6f
 800d492:	4853      	ldr	r0, [pc, #332]	@ (800d5e0 <_printf_i+0x238>)
 800d494:	6033      	str	r3, [r6, #0]
 800d496:	bf14      	ite	ne
 800d498:	230a      	movne	r3, #10
 800d49a:	2308      	moveq	r3, #8
 800d49c:	2100      	movs	r1, #0
 800d49e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d4a2:	6866      	ldr	r6, [r4, #4]
 800d4a4:	60a6      	str	r6, [r4, #8]
 800d4a6:	2e00      	cmp	r6, #0
 800d4a8:	bfa2      	ittt	ge
 800d4aa:	6821      	ldrge	r1, [r4, #0]
 800d4ac:	f021 0104 	bicge.w	r1, r1, #4
 800d4b0:	6021      	strge	r1, [r4, #0]
 800d4b2:	b90d      	cbnz	r5, 800d4b8 <_printf_i+0x110>
 800d4b4:	2e00      	cmp	r6, #0
 800d4b6:	d04b      	beq.n	800d550 <_printf_i+0x1a8>
 800d4b8:	4616      	mov	r6, r2
 800d4ba:	fbb5 f1f3 	udiv	r1, r5, r3
 800d4be:	fb03 5711 	mls	r7, r3, r1, r5
 800d4c2:	5dc7      	ldrb	r7, [r0, r7]
 800d4c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d4c8:	462f      	mov	r7, r5
 800d4ca:	42bb      	cmp	r3, r7
 800d4cc:	460d      	mov	r5, r1
 800d4ce:	d9f4      	bls.n	800d4ba <_printf_i+0x112>
 800d4d0:	2b08      	cmp	r3, #8
 800d4d2:	d10b      	bne.n	800d4ec <_printf_i+0x144>
 800d4d4:	6823      	ldr	r3, [r4, #0]
 800d4d6:	07df      	lsls	r7, r3, #31
 800d4d8:	d508      	bpl.n	800d4ec <_printf_i+0x144>
 800d4da:	6923      	ldr	r3, [r4, #16]
 800d4dc:	6861      	ldr	r1, [r4, #4]
 800d4de:	4299      	cmp	r1, r3
 800d4e0:	bfde      	ittt	le
 800d4e2:	2330      	movle	r3, #48	@ 0x30
 800d4e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d4e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d4ec:	1b92      	subs	r2, r2, r6
 800d4ee:	6122      	str	r2, [r4, #16]
 800d4f0:	f8cd a000 	str.w	sl, [sp]
 800d4f4:	464b      	mov	r3, r9
 800d4f6:	aa03      	add	r2, sp, #12
 800d4f8:	4621      	mov	r1, r4
 800d4fa:	4640      	mov	r0, r8
 800d4fc:	f7ff fee6 	bl	800d2cc <_printf_common>
 800d500:	3001      	adds	r0, #1
 800d502:	d14a      	bne.n	800d59a <_printf_i+0x1f2>
 800d504:	f04f 30ff 	mov.w	r0, #4294967295
 800d508:	b004      	add	sp, #16
 800d50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d50e:	6823      	ldr	r3, [r4, #0]
 800d510:	f043 0320 	orr.w	r3, r3, #32
 800d514:	6023      	str	r3, [r4, #0]
 800d516:	4833      	ldr	r0, [pc, #204]	@ (800d5e4 <_printf_i+0x23c>)
 800d518:	2778      	movs	r7, #120	@ 0x78
 800d51a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d51e:	6823      	ldr	r3, [r4, #0]
 800d520:	6831      	ldr	r1, [r6, #0]
 800d522:	061f      	lsls	r7, r3, #24
 800d524:	f851 5b04 	ldr.w	r5, [r1], #4
 800d528:	d402      	bmi.n	800d530 <_printf_i+0x188>
 800d52a:	065f      	lsls	r7, r3, #25
 800d52c:	bf48      	it	mi
 800d52e:	b2ad      	uxthmi	r5, r5
 800d530:	6031      	str	r1, [r6, #0]
 800d532:	07d9      	lsls	r1, r3, #31
 800d534:	bf44      	itt	mi
 800d536:	f043 0320 	orrmi.w	r3, r3, #32
 800d53a:	6023      	strmi	r3, [r4, #0]
 800d53c:	b11d      	cbz	r5, 800d546 <_printf_i+0x19e>
 800d53e:	2310      	movs	r3, #16
 800d540:	e7ac      	b.n	800d49c <_printf_i+0xf4>
 800d542:	4827      	ldr	r0, [pc, #156]	@ (800d5e0 <_printf_i+0x238>)
 800d544:	e7e9      	b.n	800d51a <_printf_i+0x172>
 800d546:	6823      	ldr	r3, [r4, #0]
 800d548:	f023 0320 	bic.w	r3, r3, #32
 800d54c:	6023      	str	r3, [r4, #0]
 800d54e:	e7f6      	b.n	800d53e <_printf_i+0x196>
 800d550:	4616      	mov	r6, r2
 800d552:	e7bd      	b.n	800d4d0 <_printf_i+0x128>
 800d554:	6833      	ldr	r3, [r6, #0]
 800d556:	6825      	ldr	r5, [r4, #0]
 800d558:	6961      	ldr	r1, [r4, #20]
 800d55a:	1d18      	adds	r0, r3, #4
 800d55c:	6030      	str	r0, [r6, #0]
 800d55e:	062e      	lsls	r6, r5, #24
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	d501      	bpl.n	800d568 <_printf_i+0x1c0>
 800d564:	6019      	str	r1, [r3, #0]
 800d566:	e002      	b.n	800d56e <_printf_i+0x1c6>
 800d568:	0668      	lsls	r0, r5, #25
 800d56a:	d5fb      	bpl.n	800d564 <_printf_i+0x1bc>
 800d56c:	8019      	strh	r1, [r3, #0]
 800d56e:	2300      	movs	r3, #0
 800d570:	6123      	str	r3, [r4, #16]
 800d572:	4616      	mov	r6, r2
 800d574:	e7bc      	b.n	800d4f0 <_printf_i+0x148>
 800d576:	6833      	ldr	r3, [r6, #0]
 800d578:	1d1a      	adds	r2, r3, #4
 800d57a:	6032      	str	r2, [r6, #0]
 800d57c:	681e      	ldr	r6, [r3, #0]
 800d57e:	6862      	ldr	r2, [r4, #4]
 800d580:	2100      	movs	r1, #0
 800d582:	4630      	mov	r0, r6
 800d584:	f7f2 fe2c 	bl	80001e0 <memchr>
 800d588:	b108      	cbz	r0, 800d58e <_printf_i+0x1e6>
 800d58a:	1b80      	subs	r0, r0, r6
 800d58c:	6060      	str	r0, [r4, #4]
 800d58e:	6863      	ldr	r3, [r4, #4]
 800d590:	6123      	str	r3, [r4, #16]
 800d592:	2300      	movs	r3, #0
 800d594:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d598:	e7aa      	b.n	800d4f0 <_printf_i+0x148>
 800d59a:	6923      	ldr	r3, [r4, #16]
 800d59c:	4632      	mov	r2, r6
 800d59e:	4649      	mov	r1, r9
 800d5a0:	4640      	mov	r0, r8
 800d5a2:	47d0      	blx	sl
 800d5a4:	3001      	adds	r0, #1
 800d5a6:	d0ad      	beq.n	800d504 <_printf_i+0x15c>
 800d5a8:	6823      	ldr	r3, [r4, #0]
 800d5aa:	079b      	lsls	r3, r3, #30
 800d5ac:	d413      	bmi.n	800d5d6 <_printf_i+0x22e>
 800d5ae:	68e0      	ldr	r0, [r4, #12]
 800d5b0:	9b03      	ldr	r3, [sp, #12]
 800d5b2:	4298      	cmp	r0, r3
 800d5b4:	bfb8      	it	lt
 800d5b6:	4618      	movlt	r0, r3
 800d5b8:	e7a6      	b.n	800d508 <_printf_i+0x160>
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	4632      	mov	r2, r6
 800d5be:	4649      	mov	r1, r9
 800d5c0:	4640      	mov	r0, r8
 800d5c2:	47d0      	blx	sl
 800d5c4:	3001      	adds	r0, #1
 800d5c6:	d09d      	beq.n	800d504 <_printf_i+0x15c>
 800d5c8:	3501      	adds	r5, #1
 800d5ca:	68e3      	ldr	r3, [r4, #12]
 800d5cc:	9903      	ldr	r1, [sp, #12]
 800d5ce:	1a5b      	subs	r3, r3, r1
 800d5d0:	42ab      	cmp	r3, r5
 800d5d2:	dcf2      	bgt.n	800d5ba <_printf_i+0x212>
 800d5d4:	e7eb      	b.n	800d5ae <_printf_i+0x206>
 800d5d6:	2500      	movs	r5, #0
 800d5d8:	f104 0619 	add.w	r6, r4, #25
 800d5dc:	e7f5      	b.n	800d5ca <_printf_i+0x222>
 800d5de:	bf00      	nop
 800d5e0:	0800fb8a 	.word	0x0800fb8a
 800d5e4:	0800fb9b 	.word	0x0800fb9b

0800d5e8 <std>:
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	b510      	push	{r4, lr}
 800d5ec:	4604      	mov	r4, r0
 800d5ee:	e9c0 3300 	strd	r3, r3, [r0]
 800d5f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d5f6:	6083      	str	r3, [r0, #8]
 800d5f8:	8181      	strh	r1, [r0, #12]
 800d5fa:	6643      	str	r3, [r0, #100]	@ 0x64
 800d5fc:	81c2      	strh	r2, [r0, #14]
 800d5fe:	6183      	str	r3, [r0, #24]
 800d600:	4619      	mov	r1, r3
 800d602:	2208      	movs	r2, #8
 800d604:	305c      	adds	r0, #92	@ 0x5c
 800d606:	f000 f9e7 	bl	800d9d8 <memset>
 800d60a:	4b0d      	ldr	r3, [pc, #52]	@ (800d640 <std+0x58>)
 800d60c:	6263      	str	r3, [r4, #36]	@ 0x24
 800d60e:	4b0d      	ldr	r3, [pc, #52]	@ (800d644 <std+0x5c>)
 800d610:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d612:	4b0d      	ldr	r3, [pc, #52]	@ (800d648 <std+0x60>)
 800d614:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d616:	4b0d      	ldr	r3, [pc, #52]	@ (800d64c <std+0x64>)
 800d618:	6323      	str	r3, [r4, #48]	@ 0x30
 800d61a:	4b0d      	ldr	r3, [pc, #52]	@ (800d650 <std+0x68>)
 800d61c:	6224      	str	r4, [r4, #32]
 800d61e:	429c      	cmp	r4, r3
 800d620:	d006      	beq.n	800d630 <std+0x48>
 800d622:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d626:	4294      	cmp	r4, r2
 800d628:	d002      	beq.n	800d630 <std+0x48>
 800d62a:	33d0      	adds	r3, #208	@ 0xd0
 800d62c:	429c      	cmp	r4, r3
 800d62e:	d105      	bne.n	800d63c <std+0x54>
 800d630:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d638:	f000 ba4a 	b.w	800dad0 <__retarget_lock_init_recursive>
 800d63c:	bd10      	pop	{r4, pc}
 800d63e:	bf00      	nop
 800d640:	0800d829 	.word	0x0800d829
 800d644:	0800d84b 	.word	0x0800d84b
 800d648:	0800d883 	.word	0x0800d883
 800d64c:	0800d8a7 	.word	0x0800d8a7
 800d650:	20001040 	.word	0x20001040

0800d654 <stdio_exit_handler>:
 800d654:	4a02      	ldr	r2, [pc, #8]	@ (800d660 <stdio_exit_handler+0xc>)
 800d656:	4903      	ldr	r1, [pc, #12]	@ (800d664 <stdio_exit_handler+0x10>)
 800d658:	4803      	ldr	r0, [pc, #12]	@ (800d668 <stdio_exit_handler+0x14>)
 800d65a:	f000 b869 	b.w	800d730 <_fwalk_sglue>
 800d65e:	bf00      	nop
 800d660:	2000011c 	.word	0x2000011c
 800d664:	0800f19d 	.word	0x0800f19d
 800d668:	2000012c 	.word	0x2000012c

0800d66c <cleanup_stdio>:
 800d66c:	6841      	ldr	r1, [r0, #4]
 800d66e:	4b0c      	ldr	r3, [pc, #48]	@ (800d6a0 <cleanup_stdio+0x34>)
 800d670:	4299      	cmp	r1, r3
 800d672:	b510      	push	{r4, lr}
 800d674:	4604      	mov	r4, r0
 800d676:	d001      	beq.n	800d67c <cleanup_stdio+0x10>
 800d678:	f001 fd90 	bl	800f19c <_fflush_r>
 800d67c:	68a1      	ldr	r1, [r4, #8]
 800d67e:	4b09      	ldr	r3, [pc, #36]	@ (800d6a4 <cleanup_stdio+0x38>)
 800d680:	4299      	cmp	r1, r3
 800d682:	d002      	beq.n	800d68a <cleanup_stdio+0x1e>
 800d684:	4620      	mov	r0, r4
 800d686:	f001 fd89 	bl	800f19c <_fflush_r>
 800d68a:	68e1      	ldr	r1, [r4, #12]
 800d68c:	4b06      	ldr	r3, [pc, #24]	@ (800d6a8 <cleanup_stdio+0x3c>)
 800d68e:	4299      	cmp	r1, r3
 800d690:	d004      	beq.n	800d69c <cleanup_stdio+0x30>
 800d692:	4620      	mov	r0, r4
 800d694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d698:	f001 bd80 	b.w	800f19c <_fflush_r>
 800d69c:	bd10      	pop	{r4, pc}
 800d69e:	bf00      	nop
 800d6a0:	20001040 	.word	0x20001040
 800d6a4:	200010a8 	.word	0x200010a8
 800d6a8:	20001110 	.word	0x20001110

0800d6ac <global_stdio_init.part.0>:
 800d6ac:	b510      	push	{r4, lr}
 800d6ae:	4b0b      	ldr	r3, [pc, #44]	@ (800d6dc <global_stdio_init.part.0+0x30>)
 800d6b0:	4c0b      	ldr	r4, [pc, #44]	@ (800d6e0 <global_stdio_init.part.0+0x34>)
 800d6b2:	4a0c      	ldr	r2, [pc, #48]	@ (800d6e4 <global_stdio_init.part.0+0x38>)
 800d6b4:	601a      	str	r2, [r3, #0]
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	2104      	movs	r1, #4
 800d6bc:	f7ff ff94 	bl	800d5e8 <std>
 800d6c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d6c4:	2201      	movs	r2, #1
 800d6c6:	2109      	movs	r1, #9
 800d6c8:	f7ff ff8e 	bl	800d5e8 <std>
 800d6cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d6d0:	2202      	movs	r2, #2
 800d6d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6d6:	2112      	movs	r1, #18
 800d6d8:	f7ff bf86 	b.w	800d5e8 <std>
 800d6dc:	20001178 	.word	0x20001178
 800d6e0:	20001040 	.word	0x20001040
 800d6e4:	0800d655 	.word	0x0800d655

0800d6e8 <__sfp_lock_acquire>:
 800d6e8:	4801      	ldr	r0, [pc, #4]	@ (800d6f0 <__sfp_lock_acquire+0x8>)
 800d6ea:	f000 b9f2 	b.w	800dad2 <__retarget_lock_acquire_recursive>
 800d6ee:	bf00      	nop
 800d6f0:	20001181 	.word	0x20001181

0800d6f4 <__sfp_lock_release>:
 800d6f4:	4801      	ldr	r0, [pc, #4]	@ (800d6fc <__sfp_lock_release+0x8>)
 800d6f6:	f000 b9ed 	b.w	800dad4 <__retarget_lock_release_recursive>
 800d6fa:	bf00      	nop
 800d6fc:	20001181 	.word	0x20001181

0800d700 <__sinit>:
 800d700:	b510      	push	{r4, lr}
 800d702:	4604      	mov	r4, r0
 800d704:	f7ff fff0 	bl	800d6e8 <__sfp_lock_acquire>
 800d708:	6a23      	ldr	r3, [r4, #32]
 800d70a:	b11b      	cbz	r3, 800d714 <__sinit+0x14>
 800d70c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d710:	f7ff bff0 	b.w	800d6f4 <__sfp_lock_release>
 800d714:	4b04      	ldr	r3, [pc, #16]	@ (800d728 <__sinit+0x28>)
 800d716:	6223      	str	r3, [r4, #32]
 800d718:	4b04      	ldr	r3, [pc, #16]	@ (800d72c <__sinit+0x2c>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d1f5      	bne.n	800d70c <__sinit+0xc>
 800d720:	f7ff ffc4 	bl	800d6ac <global_stdio_init.part.0>
 800d724:	e7f2      	b.n	800d70c <__sinit+0xc>
 800d726:	bf00      	nop
 800d728:	0800d66d 	.word	0x0800d66d
 800d72c:	20001178 	.word	0x20001178

0800d730 <_fwalk_sglue>:
 800d730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d734:	4607      	mov	r7, r0
 800d736:	4688      	mov	r8, r1
 800d738:	4614      	mov	r4, r2
 800d73a:	2600      	movs	r6, #0
 800d73c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d740:	f1b9 0901 	subs.w	r9, r9, #1
 800d744:	d505      	bpl.n	800d752 <_fwalk_sglue+0x22>
 800d746:	6824      	ldr	r4, [r4, #0]
 800d748:	2c00      	cmp	r4, #0
 800d74a:	d1f7      	bne.n	800d73c <_fwalk_sglue+0xc>
 800d74c:	4630      	mov	r0, r6
 800d74e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d752:	89ab      	ldrh	r3, [r5, #12]
 800d754:	2b01      	cmp	r3, #1
 800d756:	d907      	bls.n	800d768 <_fwalk_sglue+0x38>
 800d758:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d75c:	3301      	adds	r3, #1
 800d75e:	d003      	beq.n	800d768 <_fwalk_sglue+0x38>
 800d760:	4629      	mov	r1, r5
 800d762:	4638      	mov	r0, r7
 800d764:	47c0      	blx	r8
 800d766:	4306      	orrs	r6, r0
 800d768:	3568      	adds	r5, #104	@ 0x68
 800d76a:	e7e9      	b.n	800d740 <_fwalk_sglue+0x10>

0800d76c <_puts_r>:
 800d76c:	6a03      	ldr	r3, [r0, #32]
 800d76e:	b570      	push	{r4, r5, r6, lr}
 800d770:	6884      	ldr	r4, [r0, #8]
 800d772:	4605      	mov	r5, r0
 800d774:	460e      	mov	r6, r1
 800d776:	b90b      	cbnz	r3, 800d77c <_puts_r+0x10>
 800d778:	f7ff ffc2 	bl	800d700 <__sinit>
 800d77c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d77e:	07db      	lsls	r3, r3, #31
 800d780:	d405      	bmi.n	800d78e <_puts_r+0x22>
 800d782:	89a3      	ldrh	r3, [r4, #12]
 800d784:	0598      	lsls	r0, r3, #22
 800d786:	d402      	bmi.n	800d78e <_puts_r+0x22>
 800d788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d78a:	f000 f9a2 	bl	800dad2 <__retarget_lock_acquire_recursive>
 800d78e:	89a3      	ldrh	r3, [r4, #12]
 800d790:	0719      	lsls	r1, r3, #28
 800d792:	d502      	bpl.n	800d79a <_puts_r+0x2e>
 800d794:	6923      	ldr	r3, [r4, #16]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d135      	bne.n	800d806 <_puts_r+0x9a>
 800d79a:	4621      	mov	r1, r4
 800d79c:	4628      	mov	r0, r5
 800d79e:	f000 f8c5 	bl	800d92c <__swsetup_r>
 800d7a2:	b380      	cbz	r0, 800d806 <_puts_r+0x9a>
 800d7a4:	f04f 35ff 	mov.w	r5, #4294967295
 800d7a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d7aa:	07da      	lsls	r2, r3, #31
 800d7ac:	d405      	bmi.n	800d7ba <_puts_r+0x4e>
 800d7ae:	89a3      	ldrh	r3, [r4, #12]
 800d7b0:	059b      	lsls	r3, r3, #22
 800d7b2:	d402      	bmi.n	800d7ba <_puts_r+0x4e>
 800d7b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7b6:	f000 f98d 	bl	800dad4 <__retarget_lock_release_recursive>
 800d7ba:	4628      	mov	r0, r5
 800d7bc:	bd70      	pop	{r4, r5, r6, pc}
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	da04      	bge.n	800d7cc <_puts_r+0x60>
 800d7c2:	69a2      	ldr	r2, [r4, #24]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	dc17      	bgt.n	800d7f8 <_puts_r+0x8c>
 800d7c8:	290a      	cmp	r1, #10
 800d7ca:	d015      	beq.n	800d7f8 <_puts_r+0x8c>
 800d7cc:	6823      	ldr	r3, [r4, #0]
 800d7ce:	1c5a      	adds	r2, r3, #1
 800d7d0:	6022      	str	r2, [r4, #0]
 800d7d2:	7019      	strb	r1, [r3, #0]
 800d7d4:	68a3      	ldr	r3, [r4, #8]
 800d7d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d7da:	3b01      	subs	r3, #1
 800d7dc:	60a3      	str	r3, [r4, #8]
 800d7de:	2900      	cmp	r1, #0
 800d7e0:	d1ed      	bne.n	800d7be <_puts_r+0x52>
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	da11      	bge.n	800d80a <_puts_r+0x9e>
 800d7e6:	4622      	mov	r2, r4
 800d7e8:	210a      	movs	r1, #10
 800d7ea:	4628      	mov	r0, r5
 800d7ec:	f000 f85f 	bl	800d8ae <__swbuf_r>
 800d7f0:	3001      	adds	r0, #1
 800d7f2:	d0d7      	beq.n	800d7a4 <_puts_r+0x38>
 800d7f4:	250a      	movs	r5, #10
 800d7f6:	e7d7      	b.n	800d7a8 <_puts_r+0x3c>
 800d7f8:	4622      	mov	r2, r4
 800d7fa:	4628      	mov	r0, r5
 800d7fc:	f000 f857 	bl	800d8ae <__swbuf_r>
 800d800:	3001      	adds	r0, #1
 800d802:	d1e7      	bne.n	800d7d4 <_puts_r+0x68>
 800d804:	e7ce      	b.n	800d7a4 <_puts_r+0x38>
 800d806:	3e01      	subs	r6, #1
 800d808:	e7e4      	b.n	800d7d4 <_puts_r+0x68>
 800d80a:	6823      	ldr	r3, [r4, #0]
 800d80c:	1c5a      	adds	r2, r3, #1
 800d80e:	6022      	str	r2, [r4, #0]
 800d810:	220a      	movs	r2, #10
 800d812:	701a      	strb	r2, [r3, #0]
 800d814:	e7ee      	b.n	800d7f4 <_puts_r+0x88>
	...

0800d818 <puts>:
 800d818:	4b02      	ldr	r3, [pc, #8]	@ (800d824 <puts+0xc>)
 800d81a:	4601      	mov	r1, r0
 800d81c:	6818      	ldr	r0, [r3, #0]
 800d81e:	f7ff bfa5 	b.w	800d76c <_puts_r>
 800d822:	bf00      	nop
 800d824:	20000128 	.word	0x20000128

0800d828 <__sread>:
 800d828:	b510      	push	{r4, lr}
 800d82a:	460c      	mov	r4, r1
 800d82c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d830:	f000 f900 	bl	800da34 <_read_r>
 800d834:	2800      	cmp	r0, #0
 800d836:	bfab      	itete	ge
 800d838:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d83a:	89a3      	ldrhlt	r3, [r4, #12]
 800d83c:	181b      	addge	r3, r3, r0
 800d83e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d842:	bfac      	ite	ge
 800d844:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d846:	81a3      	strhlt	r3, [r4, #12]
 800d848:	bd10      	pop	{r4, pc}

0800d84a <__swrite>:
 800d84a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d84e:	461f      	mov	r7, r3
 800d850:	898b      	ldrh	r3, [r1, #12]
 800d852:	05db      	lsls	r3, r3, #23
 800d854:	4605      	mov	r5, r0
 800d856:	460c      	mov	r4, r1
 800d858:	4616      	mov	r6, r2
 800d85a:	d505      	bpl.n	800d868 <__swrite+0x1e>
 800d85c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d860:	2302      	movs	r3, #2
 800d862:	2200      	movs	r2, #0
 800d864:	f000 f8d4 	bl	800da10 <_lseek_r>
 800d868:	89a3      	ldrh	r3, [r4, #12]
 800d86a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d86e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d872:	81a3      	strh	r3, [r4, #12]
 800d874:	4632      	mov	r2, r6
 800d876:	463b      	mov	r3, r7
 800d878:	4628      	mov	r0, r5
 800d87a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d87e:	f000 b8eb 	b.w	800da58 <_write_r>

0800d882 <__sseek>:
 800d882:	b510      	push	{r4, lr}
 800d884:	460c      	mov	r4, r1
 800d886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d88a:	f000 f8c1 	bl	800da10 <_lseek_r>
 800d88e:	1c43      	adds	r3, r0, #1
 800d890:	89a3      	ldrh	r3, [r4, #12]
 800d892:	bf15      	itete	ne
 800d894:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d896:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d89a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d89e:	81a3      	strheq	r3, [r4, #12]
 800d8a0:	bf18      	it	ne
 800d8a2:	81a3      	strhne	r3, [r4, #12]
 800d8a4:	bd10      	pop	{r4, pc}

0800d8a6 <__sclose>:
 800d8a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8aa:	f000 b8a1 	b.w	800d9f0 <_close_r>

0800d8ae <__swbuf_r>:
 800d8ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8b0:	460e      	mov	r6, r1
 800d8b2:	4614      	mov	r4, r2
 800d8b4:	4605      	mov	r5, r0
 800d8b6:	b118      	cbz	r0, 800d8c0 <__swbuf_r+0x12>
 800d8b8:	6a03      	ldr	r3, [r0, #32]
 800d8ba:	b90b      	cbnz	r3, 800d8c0 <__swbuf_r+0x12>
 800d8bc:	f7ff ff20 	bl	800d700 <__sinit>
 800d8c0:	69a3      	ldr	r3, [r4, #24]
 800d8c2:	60a3      	str	r3, [r4, #8]
 800d8c4:	89a3      	ldrh	r3, [r4, #12]
 800d8c6:	071a      	lsls	r2, r3, #28
 800d8c8:	d501      	bpl.n	800d8ce <__swbuf_r+0x20>
 800d8ca:	6923      	ldr	r3, [r4, #16]
 800d8cc:	b943      	cbnz	r3, 800d8e0 <__swbuf_r+0x32>
 800d8ce:	4621      	mov	r1, r4
 800d8d0:	4628      	mov	r0, r5
 800d8d2:	f000 f82b 	bl	800d92c <__swsetup_r>
 800d8d6:	b118      	cbz	r0, 800d8e0 <__swbuf_r+0x32>
 800d8d8:	f04f 37ff 	mov.w	r7, #4294967295
 800d8dc:	4638      	mov	r0, r7
 800d8de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8e0:	6823      	ldr	r3, [r4, #0]
 800d8e2:	6922      	ldr	r2, [r4, #16]
 800d8e4:	1a98      	subs	r0, r3, r2
 800d8e6:	6963      	ldr	r3, [r4, #20]
 800d8e8:	b2f6      	uxtb	r6, r6
 800d8ea:	4283      	cmp	r3, r0
 800d8ec:	4637      	mov	r7, r6
 800d8ee:	dc05      	bgt.n	800d8fc <__swbuf_r+0x4e>
 800d8f0:	4621      	mov	r1, r4
 800d8f2:	4628      	mov	r0, r5
 800d8f4:	f001 fc52 	bl	800f19c <_fflush_r>
 800d8f8:	2800      	cmp	r0, #0
 800d8fa:	d1ed      	bne.n	800d8d8 <__swbuf_r+0x2a>
 800d8fc:	68a3      	ldr	r3, [r4, #8]
 800d8fe:	3b01      	subs	r3, #1
 800d900:	60a3      	str	r3, [r4, #8]
 800d902:	6823      	ldr	r3, [r4, #0]
 800d904:	1c5a      	adds	r2, r3, #1
 800d906:	6022      	str	r2, [r4, #0]
 800d908:	701e      	strb	r6, [r3, #0]
 800d90a:	6962      	ldr	r2, [r4, #20]
 800d90c:	1c43      	adds	r3, r0, #1
 800d90e:	429a      	cmp	r2, r3
 800d910:	d004      	beq.n	800d91c <__swbuf_r+0x6e>
 800d912:	89a3      	ldrh	r3, [r4, #12]
 800d914:	07db      	lsls	r3, r3, #31
 800d916:	d5e1      	bpl.n	800d8dc <__swbuf_r+0x2e>
 800d918:	2e0a      	cmp	r6, #10
 800d91a:	d1df      	bne.n	800d8dc <__swbuf_r+0x2e>
 800d91c:	4621      	mov	r1, r4
 800d91e:	4628      	mov	r0, r5
 800d920:	f001 fc3c 	bl	800f19c <_fflush_r>
 800d924:	2800      	cmp	r0, #0
 800d926:	d0d9      	beq.n	800d8dc <__swbuf_r+0x2e>
 800d928:	e7d6      	b.n	800d8d8 <__swbuf_r+0x2a>
	...

0800d92c <__swsetup_r>:
 800d92c:	b538      	push	{r3, r4, r5, lr}
 800d92e:	4b29      	ldr	r3, [pc, #164]	@ (800d9d4 <__swsetup_r+0xa8>)
 800d930:	4605      	mov	r5, r0
 800d932:	6818      	ldr	r0, [r3, #0]
 800d934:	460c      	mov	r4, r1
 800d936:	b118      	cbz	r0, 800d940 <__swsetup_r+0x14>
 800d938:	6a03      	ldr	r3, [r0, #32]
 800d93a:	b90b      	cbnz	r3, 800d940 <__swsetup_r+0x14>
 800d93c:	f7ff fee0 	bl	800d700 <__sinit>
 800d940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d944:	0719      	lsls	r1, r3, #28
 800d946:	d422      	bmi.n	800d98e <__swsetup_r+0x62>
 800d948:	06da      	lsls	r2, r3, #27
 800d94a:	d407      	bmi.n	800d95c <__swsetup_r+0x30>
 800d94c:	2209      	movs	r2, #9
 800d94e:	602a      	str	r2, [r5, #0]
 800d950:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d954:	81a3      	strh	r3, [r4, #12]
 800d956:	f04f 30ff 	mov.w	r0, #4294967295
 800d95a:	e033      	b.n	800d9c4 <__swsetup_r+0x98>
 800d95c:	0758      	lsls	r0, r3, #29
 800d95e:	d512      	bpl.n	800d986 <__swsetup_r+0x5a>
 800d960:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d962:	b141      	cbz	r1, 800d976 <__swsetup_r+0x4a>
 800d964:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d968:	4299      	cmp	r1, r3
 800d96a:	d002      	beq.n	800d972 <__swsetup_r+0x46>
 800d96c:	4628      	mov	r0, r5
 800d96e:	f000 ff0f 	bl	800e790 <_free_r>
 800d972:	2300      	movs	r3, #0
 800d974:	6363      	str	r3, [r4, #52]	@ 0x34
 800d976:	89a3      	ldrh	r3, [r4, #12]
 800d978:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d97c:	81a3      	strh	r3, [r4, #12]
 800d97e:	2300      	movs	r3, #0
 800d980:	6063      	str	r3, [r4, #4]
 800d982:	6923      	ldr	r3, [r4, #16]
 800d984:	6023      	str	r3, [r4, #0]
 800d986:	89a3      	ldrh	r3, [r4, #12]
 800d988:	f043 0308 	orr.w	r3, r3, #8
 800d98c:	81a3      	strh	r3, [r4, #12]
 800d98e:	6923      	ldr	r3, [r4, #16]
 800d990:	b94b      	cbnz	r3, 800d9a6 <__swsetup_r+0x7a>
 800d992:	89a3      	ldrh	r3, [r4, #12]
 800d994:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d998:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d99c:	d003      	beq.n	800d9a6 <__swsetup_r+0x7a>
 800d99e:	4621      	mov	r1, r4
 800d9a0:	4628      	mov	r0, r5
 800d9a2:	f001 fc49 	bl	800f238 <__smakebuf_r>
 800d9a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9aa:	f013 0201 	ands.w	r2, r3, #1
 800d9ae:	d00a      	beq.n	800d9c6 <__swsetup_r+0x9a>
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	60a2      	str	r2, [r4, #8]
 800d9b4:	6962      	ldr	r2, [r4, #20]
 800d9b6:	4252      	negs	r2, r2
 800d9b8:	61a2      	str	r2, [r4, #24]
 800d9ba:	6922      	ldr	r2, [r4, #16]
 800d9bc:	b942      	cbnz	r2, 800d9d0 <__swsetup_r+0xa4>
 800d9be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d9c2:	d1c5      	bne.n	800d950 <__swsetup_r+0x24>
 800d9c4:	bd38      	pop	{r3, r4, r5, pc}
 800d9c6:	0799      	lsls	r1, r3, #30
 800d9c8:	bf58      	it	pl
 800d9ca:	6962      	ldrpl	r2, [r4, #20]
 800d9cc:	60a2      	str	r2, [r4, #8]
 800d9ce:	e7f4      	b.n	800d9ba <__swsetup_r+0x8e>
 800d9d0:	2000      	movs	r0, #0
 800d9d2:	e7f7      	b.n	800d9c4 <__swsetup_r+0x98>
 800d9d4:	20000128 	.word	0x20000128

0800d9d8 <memset>:
 800d9d8:	4402      	add	r2, r0
 800d9da:	4603      	mov	r3, r0
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	d100      	bne.n	800d9e2 <memset+0xa>
 800d9e0:	4770      	bx	lr
 800d9e2:	f803 1b01 	strb.w	r1, [r3], #1
 800d9e6:	e7f9      	b.n	800d9dc <memset+0x4>

0800d9e8 <_localeconv_r>:
 800d9e8:	4800      	ldr	r0, [pc, #0]	@ (800d9ec <_localeconv_r+0x4>)
 800d9ea:	4770      	bx	lr
 800d9ec:	20000268 	.word	0x20000268

0800d9f0 <_close_r>:
 800d9f0:	b538      	push	{r3, r4, r5, lr}
 800d9f2:	4d06      	ldr	r5, [pc, #24]	@ (800da0c <_close_r+0x1c>)
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	4604      	mov	r4, r0
 800d9f8:	4608      	mov	r0, r1
 800d9fa:	602b      	str	r3, [r5, #0]
 800d9fc:	f7f5 f940 	bl	8002c80 <_close>
 800da00:	1c43      	adds	r3, r0, #1
 800da02:	d102      	bne.n	800da0a <_close_r+0x1a>
 800da04:	682b      	ldr	r3, [r5, #0]
 800da06:	b103      	cbz	r3, 800da0a <_close_r+0x1a>
 800da08:	6023      	str	r3, [r4, #0]
 800da0a:	bd38      	pop	{r3, r4, r5, pc}
 800da0c:	2000117c 	.word	0x2000117c

0800da10 <_lseek_r>:
 800da10:	b538      	push	{r3, r4, r5, lr}
 800da12:	4d07      	ldr	r5, [pc, #28]	@ (800da30 <_lseek_r+0x20>)
 800da14:	4604      	mov	r4, r0
 800da16:	4608      	mov	r0, r1
 800da18:	4611      	mov	r1, r2
 800da1a:	2200      	movs	r2, #0
 800da1c:	602a      	str	r2, [r5, #0]
 800da1e:	461a      	mov	r2, r3
 800da20:	f7f5 f955 	bl	8002cce <_lseek>
 800da24:	1c43      	adds	r3, r0, #1
 800da26:	d102      	bne.n	800da2e <_lseek_r+0x1e>
 800da28:	682b      	ldr	r3, [r5, #0]
 800da2a:	b103      	cbz	r3, 800da2e <_lseek_r+0x1e>
 800da2c:	6023      	str	r3, [r4, #0]
 800da2e:	bd38      	pop	{r3, r4, r5, pc}
 800da30:	2000117c 	.word	0x2000117c

0800da34 <_read_r>:
 800da34:	b538      	push	{r3, r4, r5, lr}
 800da36:	4d07      	ldr	r5, [pc, #28]	@ (800da54 <_read_r+0x20>)
 800da38:	4604      	mov	r4, r0
 800da3a:	4608      	mov	r0, r1
 800da3c:	4611      	mov	r1, r2
 800da3e:	2200      	movs	r2, #0
 800da40:	602a      	str	r2, [r5, #0]
 800da42:	461a      	mov	r2, r3
 800da44:	f7f5 f8e3 	bl	8002c0e <_read>
 800da48:	1c43      	adds	r3, r0, #1
 800da4a:	d102      	bne.n	800da52 <_read_r+0x1e>
 800da4c:	682b      	ldr	r3, [r5, #0]
 800da4e:	b103      	cbz	r3, 800da52 <_read_r+0x1e>
 800da50:	6023      	str	r3, [r4, #0]
 800da52:	bd38      	pop	{r3, r4, r5, pc}
 800da54:	2000117c 	.word	0x2000117c

0800da58 <_write_r>:
 800da58:	b538      	push	{r3, r4, r5, lr}
 800da5a:	4d07      	ldr	r5, [pc, #28]	@ (800da78 <_write_r+0x20>)
 800da5c:	4604      	mov	r4, r0
 800da5e:	4608      	mov	r0, r1
 800da60:	4611      	mov	r1, r2
 800da62:	2200      	movs	r2, #0
 800da64:	602a      	str	r2, [r5, #0]
 800da66:	461a      	mov	r2, r3
 800da68:	f7f5 f8ee 	bl	8002c48 <_write>
 800da6c:	1c43      	adds	r3, r0, #1
 800da6e:	d102      	bne.n	800da76 <_write_r+0x1e>
 800da70:	682b      	ldr	r3, [r5, #0]
 800da72:	b103      	cbz	r3, 800da76 <_write_r+0x1e>
 800da74:	6023      	str	r3, [r4, #0]
 800da76:	bd38      	pop	{r3, r4, r5, pc}
 800da78:	2000117c 	.word	0x2000117c

0800da7c <__errno>:
 800da7c:	4b01      	ldr	r3, [pc, #4]	@ (800da84 <__errno+0x8>)
 800da7e:	6818      	ldr	r0, [r3, #0]
 800da80:	4770      	bx	lr
 800da82:	bf00      	nop
 800da84:	20000128 	.word	0x20000128

0800da88 <__libc_init_array>:
 800da88:	b570      	push	{r4, r5, r6, lr}
 800da8a:	4d0d      	ldr	r5, [pc, #52]	@ (800dac0 <__libc_init_array+0x38>)
 800da8c:	4c0d      	ldr	r4, [pc, #52]	@ (800dac4 <__libc_init_array+0x3c>)
 800da8e:	1b64      	subs	r4, r4, r5
 800da90:	10a4      	asrs	r4, r4, #2
 800da92:	2600      	movs	r6, #0
 800da94:	42a6      	cmp	r6, r4
 800da96:	d109      	bne.n	800daac <__libc_init_array+0x24>
 800da98:	4d0b      	ldr	r5, [pc, #44]	@ (800dac8 <__libc_init_array+0x40>)
 800da9a:	4c0c      	ldr	r4, [pc, #48]	@ (800dacc <__libc_init_array+0x44>)
 800da9c:	f001 fe2a 	bl	800f6f4 <_init>
 800daa0:	1b64      	subs	r4, r4, r5
 800daa2:	10a4      	asrs	r4, r4, #2
 800daa4:	2600      	movs	r6, #0
 800daa6:	42a6      	cmp	r6, r4
 800daa8:	d105      	bne.n	800dab6 <__libc_init_array+0x2e>
 800daaa:	bd70      	pop	{r4, r5, r6, pc}
 800daac:	f855 3b04 	ldr.w	r3, [r5], #4
 800dab0:	4798      	blx	r3
 800dab2:	3601      	adds	r6, #1
 800dab4:	e7ee      	b.n	800da94 <__libc_init_array+0xc>
 800dab6:	f855 3b04 	ldr.w	r3, [r5], #4
 800daba:	4798      	blx	r3
 800dabc:	3601      	adds	r6, #1
 800dabe:	e7f2      	b.n	800daa6 <__libc_init_array+0x1e>
 800dac0:	0800fef0 	.word	0x0800fef0
 800dac4:	0800fef0 	.word	0x0800fef0
 800dac8:	0800fef0 	.word	0x0800fef0
 800dacc:	0800fef4 	.word	0x0800fef4

0800dad0 <__retarget_lock_init_recursive>:
 800dad0:	4770      	bx	lr

0800dad2 <__retarget_lock_acquire_recursive>:
 800dad2:	4770      	bx	lr

0800dad4 <__retarget_lock_release_recursive>:
 800dad4:	4770      	bx	lr

0800dad6 <memcpy>:
 800dad6:	440a      	add	r2, r1
 800dad8:	4291      	cmp	r1, r2
 800dada:	f100 33ff 	add.w	r3, r0, #4294967295
 800dade:	d100      	bne.n	800dae2 <memcpy+0xc>
 800dae0:	4770      	bx	lr
 800dae2:	b510      	push	{r4, lr}
 800dae4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dae8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800daec:	4291      	cmp	r1, r2
 800daee:	d1f9      	bne.n	800dae4 <memcpy+0xe>
 800daf0:	bd10      	pop	{r4, pc}

0800daf2 <quorem>:
 800daf2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf6:	6903      	ldr	r3, [r0, #16]
 800daf8:	690c      	ldr	r4, [r1, #16]
 800dafa:	42a3      	cmp	r3, r4
 800dafc:	4607      	mov	r7, r0
 800dafe:	db7e      	blt.n	800dbfe <quorem+0x10c>
 800db00:	3c01      	subs	r4, #1
 800db02:	f101 0814 	add.w	r8, r1, #20
 800db06:	00a3      	lsls	r3, r4, #2
 800db08:	f100 0514 	add.w	r5, r0, #20
 800db0c:	9300      	str	r3, [sp, #0]
 800db0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800db12:	9301      	str	r3, [sp, #4]
 800db14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800db18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800db1c:	3301      	adds	r3, #1
 800db1e:	429a      	cmp	r2, r3
 800db20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800db24:	fbb2 f6f3 	udiv	r6, r2, r3
 800db28:	d32e      	bcc.n	800db88 <quorem+0x96>
 800db2a:	f04f 0a00 	mov.w	sl, #0
 800db2e:	46c4      	mov	ip, r8
 800db30:	46ae      	mov	lr, r5
 800db32:	46d3      	mov	fp, sl
 800db34:	f85c 3b04 	ldr.w	r3, [ip], #4
 800db38:	b298      	uxth	r0, r3
 800db3a:	fb06 a000 	mla	r0, r6, r0, sl
 800db3e:	0c02      	lsrs	r2, r0, #16
 800db40:	0c1b      	lsrs	r3, r3, #16
 800db42:	fb06 2303 	mla	r3, r6, r3, r2
 800db46:	f8de 2000 	ldr.w	r2, [lr]
 800db4a:	b280      	uxth	r0, r0
 800db4c:	b292      	uxth	r2, r2
 800db4e:	1a12      	subs	r2, r2, r0
 800db50:	445a      	add	r2, fp
 800db52:	f8de 0000 	ldr.w	r0, [lr]
 800db56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800db5a:	b29b      	uxth	r3, r3
 800db5c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800db60:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800db64:	b292      	uxth	r2, r2
 800db66:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800db6a:	45e1      	cmp	r9, ip
 800db6c:	f84e 2b04 	str.w	r2, [lr], #4
 800db70:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800db74:	d2de      	bcs.n	800db34 <quorem+0x42>
 800db76:	9b00      	ldr	r3, [sp, #0]
 800db78:	58eb      	ldr	r3, [r5, r3]
 800db7a:	b92b      	cbnz	r3, 800db88 <quorem+0x96>
 800db7c:	9b01      	ldr	r3, [sp, #4]
 800db7e:	3b04      	subs	r3, #4
 800db80:	429d      	cmp	r5, r3
 800db82:	461a      	mov	r2, r3
 800db84:	d32f      	bcc.n	800dbe6 <quorem+0xf4>
 800db86:	613c      	str	r4, [r7, #16]
 800db88:	4638      	mov	r0, r7
 800db8a:	f001 f97b 	bl	800ee84 <__mcmp>
 800db8e:	2800      	cmp	r0, #0
 800db90:	db25      	blt.n	800dbde <quorem+0xec>
 800db92:	4629      	mov	r1, r5
 800db94:	2000      	movs	r0, #0
 800db96:	f858 2b04 	ldr.w	r2, [r8], #4
 800db9a:	f8d1 c000 	ldr.w	ip, [r1]
 800db9e:	fa1f fe82 	uxth.w	lr, r2
 800dba2:	fa1f f38c 	uxth.w	r3, ip
 800dba6:	eba3 030e 	sub.w	r3, r3, lr
 800dbaa:	4403      	add	r3, r0
 800dbac:	0c12      	lsrs	r2, r2, #16
 800dbae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dbb2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dbb6:	b29b      	uxth	r3, r3
 800dbb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dbbc:	45c1      	cmp	r9, r8
 800dbbe:	f841 3b04 	str.w	r3, [r1], #4
 800dbc2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dbc6:	d2e6      	bcs.n	800db96 <quorem+0xa4>
 800dbc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dbcc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dbd0:	b922      	cbnz	r2, 800dbdc <quorem+0xea>
 800dbd2:	3b04      	subs	r3, #4
 800dbd4:	429d      	cmp	r5, r3
 800dbd6:	461a      	mov	r2, r3
 800dbd8:	d30b      	bcc.n	800dbf2 <quorem+0x100>
 800dbda:	613c      	str	r4, [r7, #16]
 800dbdc:	3601      	adds	r6, #1
 800dbde:	4630      	mov	r0, r6
 800dbe0:	b003      	add	sp, #12
 800dbe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbe6:	6812      	ldr	r2, [r2, #0]
 800dbe8:	3b04      	subs	r3, #4
 800dbea:	2a00      	cmp	r2, #0
 800dbec:	d1cb      	bne.n	800db86 <quorem+0x94>
 800dbee:	3c01      	subs	r4, #1
 800dbf0:	e7c6      	b.n	800db80 <quorem+0x8e>
 800dbf2:	6812      	ldr	r2, [r2, #0]
 800dbf4:	3b04      	subs	r3, #4
 800dbf6:	2a00      	cmp	r2, #0
 800dbf8:	d1ef      	bne.n	800dbda <quorem+0xe8>
 800dbfa:	3c01      	subs	r4, #1
 800dbfc:	e7ea      	b.n	800dbd4 <quorem+0xe2>
 800dbfe:	2000      	movs	r0, #0
 800dc00:	e7ee      	b.n	800dbe0 <quorem+0xee>
 800dc02:	0000      	movs	r0, r0
 800dc04:	0000      	movs	r0, r0
	...

0800dc08 <_dtoa_r>:
 800dc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc0c:	69c7      	ldr	r7, [r0, #28]
 800dc0e:	b099      	sub	sp, #100	@ 0x64
 800dc10:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dc14:	ec55 4b10 	vmov	r4, r5, d0
 800dc18:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800dc1a:	9109      	str	r1, [sp, #36]	@ 0x24
 800dc1c:	4683      	mov	fp, r0
 800dc1e:	920e      	str	r2, [sp, #56]	@ 0x38
 800dc20:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dc22:	b97f      	cbnz	r7, 800dc44 <_dtoa_r+0x3c>
 800dc24:	2010      	movs	r0, #16
 800dc26:	f000 fdfd 	bl	800e824 <malloc>
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	f8cb 001c 	str.w	r0, [fp, #28]
 800dc30:	b920      	cbnz	r0, 800dc3c <_dtoa_r+0x34>
 800dc32:	4ba7      	ldr	r3, [pc, #668]	@ (800ded0 <_dtoa_r+0x2c8>)
 800dc34:	21ef      	movs	r1, #239	@ 0xef
 800dc36:	48a7      	ldr	r0, [pc, #668]	@ (800ded4 <_dtoa_r+0x2cc>)
 800dc38:	f001 fb6c 	bl	800f314 <__assert_func>
 800dc3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dc40:	6007      	str	r7, [r0, #0]
 800dc42:	60c7      	str	r7, [r0, #12]
 800dc44:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dc48:	6819      	ldr	r1, [r3, #0]
 800dc4a:	b159      	cbz	r1, 800dc64 <_dtoa_r+0x5c>
 800dc4c:	685a      	ldr	r2, [r3, #4]
 800dc4e:	604a      	str	r2, [r1, #4]
 800dc50:	2301      	movs	r3, #1
 800dc52:	4093      	lsls	r3, r2
 800dc54:	608b      	str	r3, [r1, #8]
 800dc56:	4658      	mov	r0, fp
 800dc58:	f000 feda 	bl	800ea10 <_Bfree>
 800dc5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dc60:	2200      	movs	r2, #0
 800dc62:	601a      	str	r2, [r3, #0]
 800dc64:	1e2b      	subs	r3, r5, #0
 800dc66:	bfb9      	ittee	lt
 800dc68:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dc6c:	9303      	strlt	r3, [sp, #12]
 800dc6e:	2300      	movge	r3, #0
 800dc70:	6033      	strge	r3, [r6, #0]
 800dc72:	9f03      	ldr	r7, [sp, #12]
 800dc74:	4b98      	ldr	r3, [pc, #608]	@ (800ded8 <_dtoa_r+0x2d0>)
 800dc76:	bfbc      	itt	lt
 800dc78:	2201      	movlt	r2, #1
 800dc7a:	6032      	strlt	r2, [r6, #0]
 800dc7c:	43bb      	bics	r3, r7
 800dc7e:	d112      	bne.n	800dca6 <_dtoa_r+0x9e>
 800dc80:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dc82:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dc86:	6013      	str	r3, [r2, #0]
 800dc88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dc8c:	4323      	orrs	r3, r4
 800dc8e:	f000 854d 	beq.w	800e72c <_dtoa_r+0xb24>
 800dc92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dc94:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800deec <_dtoa_r+0x2e4>
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	f000 854f 	beq.w	800e73c <_dtoa_r+0xb34>
 800dc9e:	f10a 0303 	add.w	r3, sl, #3
 800dca2:	f000 bd49 	b.w	800e738 <_dtoa_r+0xb30>
 800dca6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	ec51 0b17 	vmov	r0, r1, d7
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800dcb6:	f7f2 ff0f 	bl	8000ad8 <__aeabi_dcmpeq>
 800dcba:	4680      	mov	r8, r0
 800dcbc:	b158      	cbz	r0, 800dcd6 <_dtoa_r+0xce>
 800dcbe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	6013      	str	r3, [r2, #0]
 800dcc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dcc6:	b113      	cbz	r3, 800dcce <_dtoa_r+0xc6>
 800dcc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dcca:	4b84      	ldr	r3, [pc, #528]	@ (800dedc <_dtoa_r+0x2d4>)
 800dccc:	6013      	str	r3, [r2, #0]
 800dcce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800def0 <_dtoa_r+0x2e8>
 800dcd2:	f000 bd33 	b.w	800e73c <_dtoa_r+0xb34>
 800dcd6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800dcda:	aa16      	add	r2, sp, #88	@ 0x58
 800dcdc:	a917      	add	r1, sp, #92	@ 0x5c
 800dcde:	4658      	mov	r0, fp
 800dce0:	f001 f980 	bl	800efe4 <__d2b>
 800dce4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800dce8:	4681      	mov	r9, r0
 800dcea:	2e00      	cmp	r6, #0
 800dcec:	d077      	beq.n	800ddde <_dtoa_r+0x1d6>
 800dcee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dcf0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800dcf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dcf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dcfc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800dd00:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800dd04:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dd08:	4619      	mov	r1, r3
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	4b74      	ldr	r3, [pc, #464]	@ (800dee0 <_dtoa_r+0x2d8>)
 800dd0e:	f7f2 fac3 	bl	8000298 <__aeabi_dsub>
 800dd12:	a369      	add	r3, pc, #420	@ (adr r3, 800deb8 <_dtoa_r+0x2b0>)
 800dd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd18:	f7f2 fc76 	bl	8000608 <__aeabi_dmul>
 800dd1c:	a368      	add	r3, pc, #416	@ (adr r3, 800dec0 <_dtoa_r+0x2b8>)
 800dd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd22:	f7f2 fabb 	bl	800029c <__adddf3>
 800dd26:	4604      	mov	r4, r0
 800dd28:	4630      	mov	r0, r6
 800dd2a:	460d      	mov	r5, r1
 800dd2c:	f7f2 fc02 	bl	8000534 <__aeabi_i2d>
 800dd30:	a365      	add	r3, pc, #404	@ (adr r3, 800dec8 <_dtoa_r+0x2c0>)
 800dd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd36:	f7f2 fc67 	bl	8000608 <__aeabi_dmul>
 800dd3a:	4602      	mov	r2, r0
 800dd3c:	460b      	mov	r3, r1
 800dd3e:	4620      	mov	r0, r4
 800dd40:	4629      	mov	r1, r5
 800dd42:	f7f2 faab 	bl	800029c <__adddf3>
 800dd46:	4604      	mov	r4, r0
 800dd48:	460d      	mov	r5, r1
 800dd4a:	f7f2 ff0d 	bl	8000b68 <__aeabi_d2iz>
 800dd4e:	2200      	movs	r2, #0
 800dd50:	4607      	mov	r7, r0
 800dd52:	2300      	movs	r3, #0
 800dd54:	4620      	mov	r0, r4
 800dd56:	4629      	mov	r1, r5
 800dd58:	f7f2 fec8 	bl	8000aec <__aeabi_dcmplt>
 800dd5c:	b140      	cbz	r0, 800dd70 <_dtoa_r+0x168>
 800dd5e:	4638      	mov	r0, r7
 800dd60:	f7f2 fbe8 	bl	8000534 <__aeabi_i2d>
 800dd64:	4622      	mov	r2, r4
 800dd66:	462b      	mov	r3, r5
 800dd68:	f7f2 feb6 	bl	8000ad8 <__aeabi_dcmpeq>
 800dd6c:	b900      	cbnz	r0, 800dd70 <_dtoa_r+0x168>
 800dd6e:	3f01      	subs	r7, #1
 800dd70:	2f16      	cmp	r7, #22
 800dd72:	d851      	bhi.n	800de18 <_dtoa_r+0x210>
 800dd74:	4b5b      	ldr	r3, [pc, #364]	@ (800dee4 <_dtoa_r+0x2dc>)
 800dd76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dd82:	f7f2 feb3 	bl	8000aec <__aeabi_dcmplt>
 800dd86:	2800      	cmp	r0, #0
 800dd88:	d048      	beq.n	800de1c <_dtoa_r+0x214>
 800dd8a:	3f01      	subs	r7, #1
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	9312      	str	r3, [sp, #72]	@ 0x48
 800dd90:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dd92:	1b9b      	subs	r3, r3, r6
 800dd94:	1e5a      	subs	r2, r3, #1
 800dd96:	bf44      	itt	mi
 800dd98:	f1c3 0801 	rsbmi	r8, r3, #1
 800dd9c:	2300      	movmi	r3, #0
 800dd9e:	9208      	str	r2, [sp, #32]
 800dda0:	bf54      	ite	pl
 800dda2:	f04f 0800 	movpl.w	r8, #0
 800dda6:	9308      	strmi	r3, [sp, #32]
 800dda8:	2f00      	cmp	r7, #0
 800ddaa:	db39      	blt.n	800de20 <_dtoa_r+0x218>
 800ddac:	9b08      	ldr	r3, [sp, #32]
 800ddae:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ddb0:	443b      	add	r3, r7
 800ddb2:	9308      	str	r3, [sp, #32]
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800ddb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddba:	2b09      	cmp	r3, #9
 800ddbc:	d864      	bhi.n	800de88 <_dtoa_r+0x280>
 800ddbe:	2b05      	cmp	r3, #5
 800ddc0:	bfc4      	itt	gt
 800ddc2:	3b04      	subgt	r3, #4
 800ddc4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ddc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddc8:	f1a3 0302 	sub.w	r3, r3, #2
 800ddcc:	bfcc      	ite	gt
 800ddce:	2400      	movgt	r4, #0
 800ddd0:	2401      	movle	r4, #1
 800ddd2:	2b03      	cmp	r3, #3
 800ddd4:	d863      	bhi.n	800de9e <_dtoa_r+0x296>
 800ddd6:	e8df f003 	tbb	[pc, r3]
 800ddda:	372a      	.short	0x372a
 800dddc:	5535      	.short	0x5535
 800ddde:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800dde2:	441e      	add	r6, r3
 800dde4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800dde8:	2b20      	cmp	r3, #32
 800ddea:	bfc1      	itttt	gt
 800ddec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ddf0:	409f      	lslgt	r7, r3
 800ddf2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ddf6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ddfa:	bfd6      	itet	le
 800ddfc:	f1c3 0320 	rsble	r3, r3, #32
 800de00:	ea47 0003 	orrgt.w	r0, r7, r3
 800de04:	fa04 f003 	lslle.w	r0, r4, r3
 800de08:	f7f2 fb84 	bl	8000514 <__aeabi_ui2d>
 800de0c:	2201      	movs	r2, #1
 800de0e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800de12:	3e01      	subs	r6, #1
 800de14:	9214      	str	r2, [sp, #80]	@ 0x50
 800de16:	e777      	b.n	800dd08 <_dtoa_r+0x100>
 800de18:	2301      	movs	r3, #1
 800de1a:	e7b8      	b.n	800dd8e <_dtoa_r+0x186>
 800de1c:	9012      	str	r0, [sp, #72]	@ 0x48
 800de1e:	e7b7      	b.n	800dd90 <_dtoa_r+0x188>
 800de20:	427b      	negs	r3, r7
 800de22:	930a      	str	r3, [sp, #40]	@ 0x28
 800de24:	2300      	movs	r3, #0
 800de26:	eba8 0807 	sub.w	r8, r8, r7
 800de2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800de2c:	e7c4      	b.n	800ddb8 <_dtoa_r+0x1b0>
 800de2e:	2300      	movs	r3, #0
 800de30:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de34:	2b00      	cmp	r3, #0
 800de36:	dc35      	bgt.n	800dea4 <_dtoa_r+0x29c>
 800de38:	2301      	movs	r3, #1
 800de3a:	9300      	str	r3, [sp, #0]
 800de3c:	9307      	str	r3, [sp, #28]
 800de3e:	461a      	mov	r2, r3
 800de40:	920e      	str	r2, [sp, #56]	@ 0x38
 800de42:	e00b      	b.n	800de5c <_dtoa_r+0x254>
 800de44:	2301      	movs	r3, #1
 800de46:	e7f3      	b.n	800de30 <_dtoa_r+0x228>
 800de48:	2300      	movs	r3, #0
 800de4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de4e:	18fb      	adds	r3, r7, r3
 800de50:	9300      	str	r3, [sp, #0]
 800de52:	3301      	adds	r3, #1
 800de54:	2b01      	cmp	r3, #1
 800de56:	9307      	str	r3, [sp, #28]
 800de58:	bfb8      	it	lt
 800de5a:	2301      	movlt	r3, #1
 800de5c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800de60:	2100      	movs	r1, #0
 800de62:	2204      	movs	r2, #4
 800de64:	f102 0514 	add.w	r5, r2, #20
 800de68:	429d      	cmp	r5, r3
 800de6a:	d91f      	bls.n	800deac <_dtoa_r+0x2a4>
 800de6c:	6041      	str	r1, [r0, #4]
 800de6e:	4658      	mov	r0, fp
 800de70:	f000 fd8e 	bl	800e990 <_Balloc>
 800de74:	4682      	mov	sl, r0
 800de76:	2800      	cmp	r0, #0
 800de78:	d13c      	bne.n	800def4 <_dtoa_r+0x2ec>
 800de7a:	4b1b      	ldr	r3, [pc, #108]	@ (800dee8 <_dtoa_r+0x2e0>)
 800de7c:	4602      	mov	r2, r0
 800de7e:	f240 11af 	movw	r1, #431	@ 0x1af
 800de82:	e6d8      	b.n	800dc36 <_dtoa_r+0x2e>
 800de84:	2301      	movs	r3, #1
 800de86:	e7e0      	b.n	800de4a <_dtoa_r+0x242>
 800de88:	2401      	movs	r4, #1
 800de8a:	2300      	movs	r3, #0
 800de8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800de8e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800de90:	f04f 33ff 	mov.w	r3, #4294967295
 800de94:	9300      	str	r3, [sp, #0]
 800de96:	9307      	str	r3, [sp, #28]
 800de98:	2200      	movs	r2, #0
 800de9a:	2312      	movs	r3, #18
 800de9c:	e7d0      	b.n	800de40 <_dtoa_r+0x238>
 800de9e:	2301      	movs	r3, #1
 800dea0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dea2:	e7f5      	b.n	800de90 <_dtoa_r+0x288>
 800dea4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dea6:	9300      	str	r3, [sp, #0]
 800dea8:	9307      	str	r3, [sp, #28]
 800deaa:	e7d7      	b.n	800de5c <_dtoa_r+0x254>
 800deac:	3101      	adds	r1, #1
 800deae:	0052      	lsls	r2, r2, #1
 800deb0:	e7d8      	b.n	800de64 <_dtoa_r+0x25c>
 800deb2:	bf00      	nop
 800deb4:	f3af 8000 	nop.w
 800deb8:	636f4361 	.word	0x636f4361
 800debc:	3fd287a7 	.word	0x3fd287a7
 800dec0:	8b60c8b3 	.word	0x8b60c8b3
 800dec4:	3fc68a28 	.word	0x3fc68a28
 800dec8:	509f79fb 	.word	0x509f79fb
 800decc:	3fd34413 	.word	0x3fd34413
 800ded0:	0800fbb9 	.word	0x0800fbb9
 800ded4:	0800fbd0 	.word	0x0800fbd0
 800ded8:	7ff00000 	.word	0x7ff00000
 800dedc:	0800fb89 	.word	0x0800fb89
 800dee0:	3ff80000 	.word	0x3ff80000
 800dee4:	0800fcc8 	.word	0x0800fcc8
 800dee8:	0800fc28 	.word	0x0800fc28
 800deec:	0800fbb5 	.word	0x0800fbb5
 800def0:	0800fb88 	.word	0x0800fb88
 800def4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800def8:	6018      	str	r0, [r3, #0]
 800defa:	9b07      	ldr	r3, [sp, #28]
 800defc:	2b0e      	cmp	r3, #14
 800defe:	f200 80a4 	bhi.w	800e04a <_dtoa_r+0x442>
 800df02:	2c00      	cmp	r4, #0
 800df04:	f000 80a1 	beq.w	800e04a <_dtoa_r+0x442>
 800df08:	2f00      	cmp	r7, #0
 800df0a:	dd33      	ble.n	800df74 <_dtoa_r+0x36c>
 800df0c:	4bad      	ldr	r3, [pc, #692]	@ (800e1c4 <_dtoa_r+0x5bc>)
 800df0e:	f007 020f 	and.w	r2, r7, #15
 800df12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df16:	ed93 7b00 	vldr	d7, [r3]
 800df1a:	05f8      	lsls	r0, r7, #23
 800df1c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800df20:	ea4f 1427 	mov.w	r4, r7, asr #4
 800df24:	d516      	bpl.n	800df54 <_dtoa_r+0x34c>
 800df26:	4ba8      	ldr	r3, [pc, #672]	@ (800e1c8 <_dtoa_r+0x5c0>)
 800df28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800df2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800df30:	f7f2 fc94 	bl	800085c <__aeabi_ddiv>
 800df34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df38:	f004 040f 	and.w	r4, r4, #15
 800df3c:	2603      	movs	r6, #3
 800df3e:	4da2      	ldr	r5, [pc, #648]	@ (800e1c8 <_dtoa_r+0x5c0>)
 800df40:	b954      	cbnz	r4, 800df58 <_dtoa_r+0x350>
 800df42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df4a:	f7f2 fc87 	bl	800085c <__aeabi_ddiv>
 800df4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df52:	e028      	b.n	800dfa6 <_dtoa_r+0x39e>
 800df54:	2602      	movs	r6, #2
 800df56:	e7f2      	b.n	800df3e <_dtoa_r+0x336>
 800df58:	07e1      	lsls	r1, r4, #31
 800df5a:	d508      	bpl.n	800df6e <_dtoa_r+0x366>
 800df5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df60:	e9d5 2300 	ldrd	r2, r3, [r5]
 800df64:	f7f2 fb50 	bl	8000608 <__aeabi_dmul>
 800df68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df6c:	3601      	adds	r6, #1
 800df6e:	1064      	asrs	r4, r4, #1
 800df70:	3508      	adds	r5, #8
 800df72:	e7e5      	b.n	800df40 <_dtoa_r+0x338>
 800df74:	f000 80d2 	beq.w	800e11c <_dtoa_r+0x514>
 800df78:	427c      	negs	r4, r7
 800df7a:	4b92      	ldr	r3, [pc, #584]	@ (800e1c4 <_dtoa_r+0x5bc>)
 800df7c:	4d92      	ldr	r5, [pc, #584]	@ (800e1c8 <_dtoa_r+0x5c0>)
 800df7e:	f004 020f 	and.w	r2, r4, #15
 800df82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800df8e:	f7f2 fb3b 	bl	8000608 <__aeabi_dmul>
 800df92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df96:	1124      	asrs	r4, r4, #4
 800df98:	2300      	movs	r3, #0
 800df9a:	2602      	movs	r6, #2
 800df9c:	2c00      	cmp	r4, #0
 800df9e:	f040 80b2 	bne.w	800e106 <_dtoa_r+0x4fe>
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d1d3      	bne.n	800df4e <_dtoa_r+0x346>
 800dfa6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dfa8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	f000 80b7 	beq.w	800e120 <_dtoa_r+0x518>
 800dfb2:	4b86      	ldr	r3, [pc, #536]	@ (800e1cc <_dtoa_r+0x5c4>)
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	4629      	mov	r1, r5
 800dfba:	f7f2 fd97 	bl	8000aec <__aeabi_dcmplt>
 800dfbe:	2800      	cmp	r0, #0
 800dfc0:	f000 80ae 	beq.w	800e120 <_dtoa_r+0x518>
 800dfc4:	9b07      	ldr	r3, [sp, #28]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	f000 80aa 	beq.w	800e120 <_dtoa_r+0x518>
 800dfcc:	9b00      	ldr	r3, [sp, #0]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	dd37      	ble.n	800e042 <_dtoa_r+0x43a>
 800dfd2:	1e7b      	subs	r3, r7, #1
 800dfd4:	9304      	str	r3, [sp, #16]
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	4b7d      	ldr	r3, [pc, #500]	@ (800e1d0 <_dtoa_r+0x5c8>)
 800dfda:	2200      	movs	r2, #0
 800dfdc:	4629      	mov	r1, r5
 800dfde:	f7f2 fb13 	bl	8000608 <__aeabi_dmul>
 800dfe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dfe6:	9c00      	ldr	r4, [sp, #0]
 800dfe8:	3601      	adds	r6, #1
 800dfea:	4630      	mov	r0, r6
 800dfec:	f7f2 faa2 	bl	8000534 <__aeabi_i2d>
 800dff0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dff4:	f7f2 fb08 	bl	8000608 <__aeabi_dmul>
 800dff8:	4b76      	ldr	r3, [pc, #472]	@ (800e1d4 <_dtoa_r+0x5cc>)
 800dffa:	2200      	movs	r2, #0
 800dffc:	f7f2 f94e 	bl	800029c <__adddf3>
 800e000:	4605      	mov	r5, r0
 800e002:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e006:	2c00      	cmp	r4, #0
 800e008:	f040 808d 	bne.w	800e126 <_dtoa_r+0x51e>
 800e00c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e010:	4b71      	ldr	r3, [pc, #452]	@ (800e1d8 <_dtoa_r+0x5d0>)
 800e012:	2200      	movs	r2, #0
 800e014:	f7f2 f940 	bl	8000298 <__aeabi_dsub>
 800e018:	4602      	mov	r2, r0
 800e01a:	460b      	mov	r3, r1
 800e01c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e020:	462a      	mov	r2, r5
 800e022:	4633      	mov	r3, r6
 800e024:	f7f2 fd80 	bl	8000b28 <__aeabi_dcmpgt>
 800e028:	2800      	cmp	r0, #0
 800e02a:	f040 828b 	bne.w	800e544 <_dtoa_r+0x93c>
 800e02e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e032:	462a      	mov	r2, r5
 800e034:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e038:	f7f2 fd58 	bl	8000aec <__aeabi_dcmplt>
 800e03c:	2800      	cmp	r0, #0
 800e03e:	f040 8128 	bne.w	800e292 <_dtoa_r+0x68a>
 800e042:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e046:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e04a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	f2c0 815a 	blt.w	800e306 <_dtoa_r+0x6fe>
 800e052:	2f0e      	cmp	r7, #14
 800e054:	f300 8157 	bgt.w	800e306 <_dtoa_r+0x6fe>
 800e058:	4b5a      	ldr	r3, [pc, #360]	@ (800e1c4 <_dtoa_r+0x5bc>)
 800e05a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e05e:	ed93 7b00 	vldr	d7, [r3]
 800e062:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e064:	2b00      	cmp	r3, #0
 800e066:	ed8d 7b00 	vstr	d7, [sp]
 800e06a:	da03      	bge.n	800e074 <_dtoa_r+0x46c>
 800e06c:	9b07      	ldr	r3, [sp, #28]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	f340 8101 	ble.w	800e276 <_dtoa_r+0x66e>
 800e074:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e078:	4656      	mov	r6, sl
 800e07a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e07e:	4620      	mov	r0, r4
 800e080:	4629      	mov	r1, r5
 800e082:	f7f2 fbeb 	bl	800085c <__aeabi_ddiv>
 800e086:	f7f2 fd6f 	bl	8000b68 <__aeabi_d2iz>
 800e08a:	4680      	mov	r8, r0
 800e08c:	f7f2 fa52 	bl	8000534 <__aeabi_i2d>
 800e090:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e094:	f7f2 fab8 	bl	8000608 <__aeabi_dmul>
 800e098:	4602      	mov	r2, r0
 800e09a:	460b      	mov	r3, r1
 800e09c:	4620      	mov	r0, r4
 800e09e:	4629      	mov	r1, r5
 800e0a0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e0a4:	f7f2 f8f8 	bl	8000298 <__aeabi_dsub>
 800e0a8:	f806 4b01 	strb.w	r4, [r6], #1
 800e0ac:	9d07      	ldr	r5, [sp, #28]
 800e0ae:	eba6 040a 	sub.w	r4, r6, sl
 800e0b2:	42a5      	cmp	r5, r4
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	460b      	mov	r3, r1
 800e0b8:	f040 8117 	bne.w	800e2ea <_dtoa_r+0x6e2>
 800e0bc:	f7f2 f8ee 	bl	800029c <__adddf3>
 800e0c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0c4:	4604      	mov	r4, r0
 800e0c6:	460d      	mov	r5, r1
 800e0c8:	f7f2 fd2e 	bl	8000b28 <__aeabi_dcmpgt>
 800e0cc:	2800      	cmp	r0, #0
 800e0ce:	f040 80f9 	bne.w	800e2c4 <_dtoa_r+0x6bc>
 800e0d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0d6:	4620      	mov	r0, r4
 800e0d8:	4629      	mov	r1, r5
 800e0da:	f7f2 fcfd 	bl	8000ad8 <__aeabi_dcmpeq>
 800e0de:	b118      	cbz	r0, 800e0e8 <_dtoa_r+0x4e0>
 800e0e0:	f018 0f01 	tst.w	r8, #1
 800e0e4:	f040 80ee 	bne.w	800e2c4 <_dtoa_r+0x6bc>
 800e0e8:	4649      	mov	r1, r9
 800e0ea:	4658      	mov	r0, fp
 800e0ec:	f000 fc90 	bl	800ea10 <_Bfree>
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	7033      	strb	r3, [r6, #0]
 800e0f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e0f6:	3701      	adds	r7, #1
 800e0f8:	601f      	str	r7, [r3, #0]
 800e0fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	f000 831d 	beq.w	800e73c <_dtoa_r+0xb34>
 800e102:	601e      	str	r6, [r3, #0]
 800e104:	e31a      	b.n	800e73c <_dtoa_r+0xb34>
 800e106:	07e2      	lsls	r2, r4, #31
 800e108:	d505      	bpl.n	800e116 <_dtoa_r+0x50e>
 800e10a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e10e:	f7f2 fa7b 	bl	8000608 <__aeabi_dmul>
 800e112:	3601      	adds	r6, #1
 800e114:	2301      	movs	r3, #1
 800e116:	1064      	asrs	r4, r4, #1
 800e118:	3508      	adds	r5, #8
 800e11a:	e73f      	b.n	800df9c <_dtoa_r+0x394>
 800e11c:	2602      	movs	r6, #2
 800e11e:	e742      	b.n	800dfa6 <_dtoa_r+0x39e>
 800e120:	9c07      	ldr	r4, [sp, #28]
 800e122:	9704      	str	r7, [sp, #16]
 800e124:	e761      	b.n	800dfea <_dtoa_r+0x3e2>
 800e126:	4b27      	ldr	r3, [pc, #156]	@ (800e1c4 <_dtoa_r+0x5bc>)
 800e128:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e12a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e12e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e132:	4454      	add	r4, sl
 800e134:	2900      	cmp	r1, #0
 800e136:	d053      	beq.n	800e1e0 <_dtoa_r+0x5d8>
 800e138:	4928      	ldr	r1, [pc, #160]	@ (800e1dc <_dtoa_r+0x5d4>)
 800e13a:	2000      	movs	r0, #0
 800e13c:	f7f2 fb8e 	bl	800085c <__aeabi_ddiv>
 800e140:	4633      	mov	r3, r6
 800e142:	462a      	mov	r2, r5
 800e144:	f7f2 f8a8 	bl	8000298 <__aeabi_dsub>
 800e148:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e14c:	4656      	mov	r6, sl
 800e14e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e152:	f7f2 fd09 	bl	8000b68 <__aeabi_d2iz>
 800e156:	4605      	mov	r5, r0
 800e158:	f7f2 f9ec 	bl	8000534 <__aeabi_i2d>
 800e15c:	4602      	mov	r2, r0
 800e15e:	460b      	mov	r3, r1
 800e160:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e164:	f7f2 f898 	bl	8000298 <__aeabi_dsub>
 800e168:	3530      	adds	r5, #48	@ 0x30
 800e16a:	4602      	mov	r2, r0
 800e16c:	460b      	mov	r3, r1
 800e16e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e172:	f806 5b01 	strb.w	r5, [r6], #1
 800e176:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e17a:	f7f2 fcb7 	bl	8000aec <__aeabi_dcmplt>
 800e17e:	2800      	cmp	r0, #0
 800e180:	d171      	bne.n	800e266 <_dtoa_r+0x65e>
 800e182:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e186:	4911      	ldr	r1, [pc, #68]	@ (800e1cc <_dtoa_r+0x5c4>)
 800e188:	2000      	movs	r0, #0
 800e18a:	f7f2 f885 	bl	8000298 <__aeabi_dsub>
 800e18e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e192:	f7f2 fcab 	bl	8000aec <__aeabi_dcmplt>
 800e196:	2800      	cmp	r0, #0
 800e198:	f040 8095 	bne.w	800e2c6 <_dtoa_r+0x6be>
 800e19c:	42a6      	cmp	r6, r4
 800e19e:	f43f af50 	beq.w	800e042 <_dtoa_r+0x43a>
 800e1a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e1a6:	4b0a      	ldr	r3, [pc, #40]	@ (800e1d0 <_dtoa_r+0x5c8>)
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	f7f2 fa2d 	bl	8000608 <__aeabi_dmul>
 800e1ae:	4b08      	ldr	r3, [pc, #32]	@ (800e1d0 <_dtoa_r+0x5c8>)
 800e1b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1ba:	f7f2 fa25 	bl	8000608 <__aeabi_dmul>
 800e1be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1c2:	e7c4      	b.n	800e14e <_dtoa_r+0x546>
 800e1c4:	0800fcc8 	.word	0x0800fcc8
 800e1c8:	0800fca0 	.word	0x0800fca0
 800e1cc:	3ff00000 	.word	0x3ff00000
 800e1d0:	40240000 	.word	0x40240000
 800e1d4:	401c0000 	.word	0x401c0000
 800e1d8:	40140000 	.word	0x40140000
 800e1dc:	3fe00000 	.word	0x3fe00000
 800e1e0:	4631      	mov	r1, r6
 800e1e2:	4628      	mov	r0, r5
 800e1e4:	f7f2 fa10 	bl	8000608 <__aeabi_dmul>
 800e1e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e1ec:	9415      	str	r4, [sp, #84]	@ 0x54
 800e1ee:	4656      	mov	r6, sl
 800e1f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1f4:	f7f2 fcb8 	bl	8000b68 <__aeabi_d2iz>
 800e1f8:	4605      	mov	r5, r0
 800e1fa:	f7f2 f99b 	bl	8000534 <__aeabi_i2d>
 800e1fe:	4602      	mov	r2, r0
 800e200:	460b      	mov	r3, r1
 800e202:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e206:	f7f2 f847 	bl	8000298 <__aeabi_dsub>
 800e20a:	3530      	adds	r5, #48	@ 0x30
 800e20c:	f806 5b01 	strb.w	r5, [r6], #1
 800e210:	4602      	mov	r2, r0
 800e212:	460b      	mov	r3, r1
 800e214:	42a6      	cmp	r6, r4
 800e216:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e21a:	f04f 0200 	mov.w	r2, #0
 800e21e:	d124      	bne.n	800e26a <_dtoa_r+0x662>
 800e220:	4bac      	ldr	r3, [pc, #688]	@ (800e4d4 <_dtoa_r+0x8cc>)
 800e222:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e226:	f7f2 f839 	bl	800029c <__adddf3>
 800e22a:	4602      	mov	r2, r0
 800e22c:	460b      	mov	r3, r1
 800e22e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e232:	f7f2 fc79 	bl	8000b28 <__aeabi_dcmpgt>
 800e236:	2800      	cmp	r0, #0
 800e238:	d145      	bne.n	800e2c6 <_dtoa_r+0x6be>
 800e23a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e23e:	49a5      	ldr	r1, [pc, #660]	@ (800e4d4 <_dtoa_r+0x8cc>)
 800e240:	2000      	movs	r0, #0
 800e242:	f7f2 f829 	bl	8000298 <__aeabi_dsub>
 800e246:	4602      	mov	r2, r0
 800e248:	460b      	mov	r3, r1
 800e24a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e24e:	f7f2 fc4d 	bl	8000aec <__aeabi_dcmplt>
 800e252:	2800      	cmp	r0, #0
 800e254:	f43f aef5 	beq.w	800e042 <_dtoa_r+0x43a>
 800e258:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e25a:	1e73      	subs	r3, r6, #1
 800e25c:	9315      	str	r3, [sp, #84]	@ 0x54
 800e25e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e262:	2b30      	cmp	r3, #48	@ 0x30
 800e264:	d0f8      	beq.n	800e258 <_dtoa_r+0x650>
 800e266:	9f04      	ldr	r7, [sp, #16]
 800e268:	e73e      	b.n	800e0e8 <_dtoa_r+0x4e0>
 800e26a:	4b9b      	ldr	r3, [pc, #620]	@ (800e4d8 <_dtoa_r+0x8d0>)
 800e26c:	f7f2 f9cc 	bl	8000608 <__aeabi_dmul>
 800e270:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e274:	e7bc      	b.n	800e1f0 <_dtoa_r+0x5e8>
 800e276:	d10c      	bne.n	800e292 <_dtoa_r+0x68a>
 800e278:	4b98      	ldr	r3, [pc, #608]	@ (800e4dc <_dtoa_r+0x8d4>)
 800e27a:	2200      	movs	r2, #0
 800e27c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e280:	f7f2 f9c2 	bl	8000608 <__aeabi_dmul>
 800e284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e288:	f7f2 fc44 	bl	8000b14 <__aeabi_dcmpge>
 800e28c:	2800      	cmp	r0, #0
 800e28e:	f000 8157 	beq.w	800e540 <_dtoa_r+0x938>
 800e292:	2400      	movs	r4, #0
 800e294:	4625      	mov	r5, r4
 800e296:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e298:	43db      	mvns	r3, r3
 800e29a:	9304      	str	r3, [sp, #16]
 800e29c:	4656      	mov	r6, sl
 800e29e:	2700      	movs	r7, #0
 800e2a0:	4621      	mov	r1, r4
 800e2a2:	4658      	mov	r0, fp
 800e2a4:	f000 fbb4 	bl	800ea10 <_Bfree>
 800e2a8:	2d00      	cmp	r5, #0
 800e2aa:	d0dc      	beq.n	800e266 <_dtoa_r+0x65e>
 800e2ac:	b12f      	cbz	r7, 800e2ba <_dtoa_r+0x6b2>
 800e2ae:	42af      	cmp	r7, r5
 800e2b0:	d003      	beq.n	800e2ba <_dtoa_r+0x6b2>
 800e2b2:	4639      	mov	r1, r7
 800e2b4:	4658      	mov	r0, fp
 800e2b6:	f000 fbab 	bl	800ea10 <_Bfree>
 800e2ba:	4629      	mov	r1, r5
 800e2bc:	4658      	mov	r0, fp
 800e2be:	f000 fba7 	bl	800ea10 <_Bfree>
 800e2c2:	e7d0      	b.n	800e266 <_dtoa_r+0x65e>
 800e2c4:	9704      	str	r7, [sp, #16]
 800e2c6:	4633      	mov	r3, r6
 800e2c8:	461e      	mov	r6, r3
 800e2ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e2ce:	2a39      	cmp	r2, #57	@ 0x39
 800e2d0:	d107      	bne.n	800e2e2 <_dtoa_r+0x6da>
 800e2d2:	459a      	cmp	sl, r3
 800e2d4:	d1f8      	bne.n	800e2c8 <_dtoa_r+0x6c0>
 800e2d6:	9a04      	ldr	r2, [sp, #16]
 800e2d8:	3201      	adds	r2, #1
 800e2da:	9204      	str	r2, [sp, #16]
 800e2dc:	2230      	movs	r2, #48	@ 0x30
 800e2de:	f88a 2000 	strb.w	r2, [sl]
 800e2e2:	781a      	ldrb	r2, [r3, #0]
 800e2e4:	3201      	adds	r2, #1
 800e2e6:	701a      	strb	r2, [r3, #0]
 800e2e8:	e7bd      	b.n	800e266 <_dtoa_r+0x65e>
 800e2ea:	4b7b      	ldr	r3, [pc, #492]	@ (800e4d8 <_dtoa_r+0x8d0>)
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	f7f2 f98b 	bl	8000608 <__aeabi_dmul>
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	4604      	mov	r4, r0
 800e2f8:	460d      	mov	r5, r1
 800e2fa:	f7f2 fbed 	bl	8000ad8 <__aeabi_dcmpeq>
 800e2fe:	2800      	cmp	r0, #0
 800e300:	f43f aebb 	beq.w	800e07a <_dtoa_r+0x472>
 800e304:	e6f0      	b.n	800e0e8 <_dtoa_r+0x4e0>
 800e306:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e308:	2a00      	cmp	r2, #0
 800e30a:	f000 80db 	beq.w	800e4c4 <_dtoa_r+0x8bc>
 800e30e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e310:	2a01      	cmp	r2, #1
 800e312:	f300 80bf 	bgt.w	800e494 <_dtoa_r+0x88c>
 800e316:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e318:	2a00      	cmp	r2, #0
 800e31a:	f000 80b7 	beq.w	800e48c <_dtoa_r+0x884>
 800e31e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e322:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e324:	4646      	mov	r6, r8
 800e326:	9a08      	ldr	r2, [sp, #32]
 800e328:	2101      	movs	r1, #1
 800e32a:	441a      	add	r2, r3
 800e32c:	4658      	mov	r0, fp
 800e32e:	4498      	add	r8, r3
 800e330:	9208      	str	r2, [sp, #32]
 800e332:	f000 fc21 	bl	800eb78 <__i2b>
 800e336:	4605      	mov	r5, r0
 800e338:	b15e      	cbz	r6, 800e352 <_dtoa_r+0x74a>
 800e33a:	9b08      	ldr	r3, [sp, #32]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	dd08      	ble.n	800e352 <_dtoa_r+0x74a>
 800e340:	42b3      	cmp	r3, r6
 800e342:	9a08      	ldr	r2, [sp, #32]
 800e344:	bfa8      	it	ge
 800e346:	4633      	movge	r3, r6
 800e348:	eba8 0803 	sub.w	r8, r8, r3
 800e34c:	1af6      	subs	r6, r6, r3
 800e34e:	1ad3      	subs	r3, r2, r3
 800e350:	9308      	str	r3, [sp, #32]
 800e352:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e354:	b1f3      	cbz	r3, 800e394 <_dtoa_r+0x78c>
 800e356:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e358:	2b00      	cmp	r3, #0
 800e35a:	f000 80b7 	beq.w	800e4cc <_dtoa_r+0x8c4>
 800e35e:	b18c      	cbz	r4, 800e384 <_dtoa_r+0x77c>
 800e360:	4629      	mov	r1, r5
 800e362:	4622      	mov	r2, r4
 800e364:	4658      	mov	r0, fp
 800e366:	f000 fcc7 	bl	800ecf8 <__pow5mult>
 800e36a:	464a      	mov	r2, r9
 800e36c:	4601      	mov	r1, r0
 800e36e:	4605      	mov	r5, r0
 800e370:	4658      	mov	r0, fp
 800e372:	f000 fc17 	bl	800eba4 <__multiply>
 800e376:	4649      	mov	r1, r9
 800e378:	9004      	str	r0, [sp, #16]
 800e37a:	4658      	mov	r0, fp
 800e37c:	f000 fb48 	bl	800ea10 <_Bfree>
 800e380:	9b04      	ldr	r3, [sp, #16]
 800e382:	4699      	mov	r9, r3
 800e384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e386:	1b1a      	subs	r2, r3, r4
 800e388:	d004      	beq.n	800e394 <_dtoa_r+0x78c>
 800e38a:	4649      	mov	r1, r9
 800e38c:	4658      	mov	r0, fp
 800e38e:	f000 fcb3 	bl	800ecf8 <__pow5mult>
 800e392:	4681      	mov	r9, r0
 800e394:	2101      	movs	r1, #1
 800e396:	4658      	mov	r0, fp
 800e398:	f000 fbee 	bl	800eb78 <__i2b>
 800e39c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e39e:	4604      	mov	r4, r0
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	f000 81cf 	beq.w	800e744 <_dtoa_r+0xb3c>
 800e3a6:	461a      	mov	r2, r3
 800e3a8:	4601      	mov	r1, r0
 800e3aa:	4658      	mov	r0, fp
 800e3ac:	f000 fca4 	bl	800ecf8 <__pow5mult>
 800e3b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3b2:	2b01      	cmp	r3, #1
 800e3b4:	4604      	mov	r4, r0
 800e3b6:	f300 8095 	bgt.w	800e4e4 <_dtoa_r+0x8dc>
 800e3ba:	9b02      	ldr	r3, [sp, #8]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	f040 8087 	bne.w	800e4d0 <_dtoa_r+0x8c8>
 800e3c2:	9b03      	ldr	r3, [sp, #12]
 800e3c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	f040 8089 	bne.w	800e4e0 <_dtoa_r+0x8d8>
 800e3ce:	9b03      	ldr	r3, [sp, #12]
 800e3d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e3d4:	0d1b      	lsrs	r3, r3, #20
 800e3d6:	051b      	lsls	r3, r3, #20
 800e3d8:	b12b      	cbz	r3, 800e3e6 <_dtoa_r+0x7de>
 800e3da:	9b08      	ldr	r3, [sp, #32]
 800e3dc:	3301      	adds	r3, #1
 800e3de:	9308      	str	r3, [sp, #32]
 800e3e0:	f108 0801 	add.w	r8, r8, #1
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e3e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	f000 81b0 	beq.w	800e750 <_dtoa_r+0xb48>
 800e3f0:	6923      	ldr	r3, [r4, #16]
 800e3f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e3f6:	6918      	ldr	r0, [r3, #16]
 800e3f8:	f000 fb72 	bl	800eae0 <__hi0bits>
 800e3fc:	f1c0 0020 	rsb	r0, r0, #32
 800e400:	9b08      	ldr	r3, [sp, #32]
 800e402:	4418      	add	r0, r3
 800e404:	f010 001f 	ands.w	r0, r0, #31
 800e408:	d077      	beq.n	800e4fa <_dtoa_r+0x8f2>
 800e40a:	f1c0 0320 	rsb	r3, r0, #32
 800e40e:	2b04      	cmp	r3, #4
 800e410:	dd6b      	ble.n	800e4ea <_dtoa_r+0x8e2>
 800e412:	9b08      	ldr	r3, [sp, #32]
 800e414:	f1c0 001c 	rsb	r0, r0, #28
 800e418:	4403      	add	r3, r0
 800e41a:	4480      	add	r8, r0
 800e41c:	4406      	add	r6, r0
 800e41e:	9308      	str	r3, [sp, #32]
 800e420:	f1b8 0f00 	cmp.w	r8, #0
 800e424:	dd05      	ble.n	800e432 <_dtoa_r+0x82a>
 800e426:	4649      	mov	r1, r9
 800e428:	4642      	mov	r2, r8
 800e42a:	4658      	mov	r0, fp
 800e42c:	f000 fcbe 	bl	800edac <__lshift>
 800e430:	4681      	mov	r9, r0
 800e432:	9b08      	ldr	r3, [sp, #32]
 800e434:	2b00      	cmp	r3, #0
 800e436:	dd05      	ble.n	800e444 <_dtoa_r+0x83c>
 800e438:	4621      	mov	r1, r4
 800e43a:	461a      	mov	r2, r3
 800e43c:	4658      	mov	r0, fp
 800e43e:	f000 fcb5 	bl	800edac <__lshift>
 800e442:	4604      	mov	r4, r0
 800e444:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e446:	2b00      	cmp	r3, #0
 800e448:	d059      	beq.n	800e4fe <_dtoa_r+0x8f6>
 800e44a:	4621      	mov	r1, r4
 800e44c:	4648      	mov	r0, r9
 800e44e:	f000 fd19 	bl	800ee84 <__mcmp>
 800e452:	2800      	cmp	r0, #0
 800e454:	da53      	bge.n	800e4fe <_dtoa_r+0x8f6>
 800e456:	1e7b      	subs	r3, r7, #1
 800e458:	9304      	str	r3, [sp, #16]
 800e45a:	4649      	mov	r1, r9
 800e45c:	2300      	movs	r3, #0
 800e45e:	220a      	movs	r2, #10
 800e460:	4658      	mov	r0, fp
 800e462:	f000 faf7 	bl	800ea54 <__multadd>
 800e466:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e468:	4681      	mov	r9, r0
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	f000 8172 	beq.w	800e754 <_dtoa_r+0xb4c>
 800e470:	2300      	movs	r3, #0
 800e472:	4629      	mov	r1, r5
 800e474:	220a      	movs	r2, #10
 800e476:	4658      	mov	r0, fp
 800e478:	f000 faec 	bl	800ea54 <__multadd>
 800e47c:	9b00      	ldr	r3, [sp, #0]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	4605      	mov	r5, r0
 800e482:	dc67      	bgt.n	800e554 <_dtoa_r+0x94c>
 800e484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e486:	2b02      	cmp	r3, #2
 800e488:	dc41      	bgt.n	800e50e <_dtoa_r+0x906>
 800e48a:	e063      	b.n	800e554 <_dtoa_r+0x94c>
 800e48c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e48e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e492:	e746      	b.n	800e322 <_dtoa_r+0x71a>
 800e494:	9b07      	ldr	r3, [sp, #28]
 800e496:	1e5c      	subs	r4, r3, #1
 800e498:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e49a:	42a3      	cmp	r3, r4
 800e49c:	bfbf      	itttt	lt
 800e49e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e4a0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e4a2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e4a4:	1ae3      	sublt	r3, r4, r3
 800e4a6:	bfb4      	ite	lt
 800e4a8:	18d2      	addlt	r2, r2, r3
 800e4aa:	1b1c      	subge	r4, r3, r4
 800e4ac:	9b07      	ldr	r3, [sp, #28]
 800e4ae:	bfbc      	itt	lt
 800e4b0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e4b2:	2400      	movlt	r4, #0
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	bfb5      	itete	lt
 800e4b8:	eba8 0603 	sublt.w	r6, r8, r3
 800e4bc:	9b07      	ldrge	r3, [sp, #28]
 800e4be:	2300      	movlt	r3, #0
 800e4c0:	4646      	movge	r6, r8
 800e4c2:	e730      	b.n	800e326 <_dtoa_r+0x71e>
 800e4c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e4c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e4c8:	4646      	mov	r6, r8
 800e4ca:	e735      	b.n	800e338 <_dtoa_r+0x730>
 800e4cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e4ce:	e75c      	b.n	800e38a <_dtoa_r+0x782>
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	e788      	b.n	800e3e6 <_dtoa_r+0x7de>
 800e4d4:	3fe00000 	.word	0x3fe00000
 800e4d8:	40240000 	.word	0x40240000
 800e4dc:	40140000 	.word	0x40140000
 800e4e0:	9b02      	ldr	r3, [sp, #8]
 800e4e2:	e780      	b.n	800e3e6 <_dtoa_r+0x7de>
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e4e8:	e782      	b.n	800e3f0 <_dtoa_r+0x7e8>
 800e4ea:	d099      	beq.n	800e420 <_dtoa_r+0x818>
 800e4ec:	9a08      	ldr	r2, [sp, #32]
 800e4ee:	331c      	adds	r3, #28
 800e4f0:	441a      	add	r2, r3
 800e4f2:	4498      	add	r8, r3
 800e4f4:	441e      	add	r6, r3
 800e4f6:	9208      	str	r2, [sp, #32]
 800e4f8:	e792      	b.n	800e420 <_dtoa_r+0x818>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	e7f6      	b.n	800e4ec <_dtoa_r+0x8e4>
 800e4fe:	9b07      	ldr	r3, [sp, #28]
 800e500:	9704      	str	r7, [sp, #16]
 800e502:	2b00      	cmp	r3, #0
 800e504:	dc20      	bgt.n	800e548 <_dtoa_r+0x940>
 800e506:	9300      	str	r3, [sp, #0]
 800e508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e50a:	2b02      	cmp	r3, #2
 800e50c:	dd1e      	ble.n	800e54c <_dtoa_r+0x944>
 800e50e:	9b00      	ldr	r3, [sp, #0]
 800e510:	2b00      	cmp	r3, #0
 800e512:	f47f aec0 	bne.w	800e296 <_dtoa_r+0x68e>
 800e516:	4621      	mov	r1, r4
 800e518:	2205      	movs	r2, #5
 800e51a:	4658      	mov	r0, fp
 800e51c:	f000 fa9a 	bl	800ea54 <__multadd>
 800e520:	4601      	mov	r1, r0
 800e522:	4604      	mov	r4, r0
 800e524:	4648      	mov	r0, r9
 800e526:	f000 fcad 	bl	800ee84 <__mcmp>
 800e52a:	2800      	cmp	r0, #0
 800e52c:	f77f aeb3 	ble.w	800e296 <_dtoa_r+0x68e>
 800e530:	4656      	mov	r6, sl
 800e532:	2331      	movs	r3, #49	@ 0x31
 800e534:	f806 3b01 	strb.w	r3, [r6], #1
 800e538:	9b04      	ldr	r3, [sp, #16]
 800e53a:	3301      	adds	r3, #1
 800e53c:	9304      	str	r3, [sp, #16]
 800e53e:	e6ae      	b.n	800e29e <_dtoa_r+0x696>
 800e540:	9c07      	ldr	r4, [sp, #28]
 800e542:	9704      	str	r7, [sp, #16]
 800e544:	4625      	mov	r5, r4
 800e546:	e7f3      	b.n	800e530 <_dtoa_r+0x928>
 800e548:	9b07      	ldr	r3, [sp, #28]
 800e54a:	9300      	str	r3, [sp, #0]
 800e54c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e54e:	2b00      	cmp	r3, #0
 800e550:	f000 8104 	beq.w	800e75c <_dtoa_r+0xb54>
 800e554:	2e00      	cmp	r6, #0
 800e556:	dd05      	ble.n	800e564 <_dtoa_r+0x95c>
 800e558:	4629      	mov	r1, r5
 800e55a:	4632      	mov	r2, r6
 800e55c:	4658      	mov	r0, fp
 800e55e:	f000 fc25 	bl	800edac <__lshift>
 800e562:	4605      	mov	r5, r0
 800e564:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e566:	2b00      	cmp	r3, #0
 800e568:	d05a      	beq.n	800e620 <_dtoa_r+0xa18>
 800e56a:	6869      	ldr	r1, [r5, #4]
 800e56c:	4658      	mov	r0, fp
 800e56e:	f000 fa0f 	bl	800e990 <_Balloc>
 800e572:	4606      	mov	r6, r0
 800e574:	b928      	cbnz	r0, 800e582 <_dtoa_r+0x97a>
 800e576:	4b84      	ldr	r3, [pc, #528]	@ (800e788 <_dtoa_r+0xb80>)
 800e578:	4602      	mov	r2, r0
 800e57a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e57e:	f7ff bb5a 	b.w	800dc36 <_dtoa_r+0x2e>
 800e582:	692a      	ldr	r2, [r5, #16]
 800e584:	3202      	adds	r2, #2
 800e586:	0092      	lsls	r2, r2, #2
 800e588:	f105 010c 	add.w	r1, r5, #12
 800e58c:	300c      	adds	r0, #12
 800e58e:	f7ff faa2 	bl	800dad6 <memcpy>
 800e592:	2201      	movs	r2, #1
 800e594:	4631      	mov	r1, r6
 800e596:	4658      	mov	r0, fp
 800e598:	f000 fc08 	bl	800edac <__lshift>
 800e59c:	f10a 0301 	add.w	r3, sl, #1
 800e5a0:	9307      	str	r3, [sp, #28]
 800e5a2:	9b00      	ldr	r3, [sp, #0]
 800e5a4:	4453      	add	r3, sl
 800e5a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e5a8:	9b02      	ldr	r3, [sp, #8]
 800e5aa:	f003 0301 	and.w	r3, r3, #1
 800e5ae:	462f      	mov	r7, r5
 800e5b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5b2:	4605      	mov	r5, r0
 800e5b4:	9b07      	ldr	r3, [sp, #28]
 800e5b6:	4621      	mov	r1, r4
 800e5b8:	3b01      	subs	r3, #1
 800e5ba:	4648      	mov	r0, r9
 800e5bc:	9300      	str	r3, [sp, #0]
 800e5be:	f7ff fa98 	bl	800daf2 <quorem>
 800e5c2:	4639      	mov	r1, r7
 800e5c4:	9002      	str	r0, [sp, #8]
 800e5c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e5ca:	4648      	mov	r0, r9
 800e5cc:	f000 fc5a 	bl	800ee84 <__mcmp>
 800e5d0:	462a      	mov	r2, r5
 800e5d2:	9008      	str	r0, [sp, #32]
 800e5d4:	4621      	mov	r1, r4
 800e5d6:	4658      	mov	r0, fp
 800e5d8:	f000 fc70 	bl	800eebc <__mdiff>
 800e5dc:	68c2      	ldr	r2, [r0, #12]
 800e5de:	4606      	mov	r6, r0
 800e5e0:	bb02      	cbnz	r2, 800e624 <_dtoa_r+0xa1c>
 800e5e2:	4601      	mov	r1, r0
 800e5e4:	4648      	mov	r0, r9
 800e5e6:	f000 fc4d 	bl	800ee84 <__mcmp>
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	4631      	mov	r1, r6
 800e5ee:	4658      	mov	r0, fp
 800e5f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800e5f2:	f000 fa0d 	bl	800ea10 <_Bfree>
 800e5f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e5fa:	9e07      	ldr	r6, [sp, #28]
 800e5fc:	ea43 0102 	orr.w	r1, r3, r2
 800e600:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e602:	4319      	orrs	r1, r3
 800e604:	d110      	bne.n	800e628 <_dtoa_r+0xa20>
 800e606:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e60a:	d029      	beq.n	800e660 <_dtoa_r+0xa58>
 800e60c:	9b08      	ldr	r3, [sp, #32]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	dd02      	ble.n	800e618 <_dtoa_r+0xa10>
 800e612:	9b02      	ldr	r3, [sp, #8]
 800e614:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e618:	9b00      	ldr	r3, [sp, #0]
 800e61a:	f883 8000 	strb.w	r8, [r3]
 800e61e:	e63f      	b.n	800e2a0 <_dtoa_r+0x698>
 800e620:	4628      	mov	r0, r5
 800e622:	e7bb      	b.n	800e59c <_dtoa_r+0x994>
 800e624:	2201      	movs	r2, #1
 800e626:	e7e1      	b.n	800e5ec <_dtoa_r+0x9e4>
 800e628:	9b08      	ldr	r3, [sp, #32]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	db04      	blt.n	800e638 <_dtoa_r+0xa30>
 800e62e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e630:	430b      	orrs	r3, r1
 800e632:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e634:	430b      	orrs	r3, r1
 800e636:	d120      	bne.n	800e67a <_dtoa_r+0xa72>
 800e638:	2a00      	cmp	r2, #0
 800e63a:	dded      	ble.n	800e618 <_dtoa_r+0xa10>
 800e63c:	4649      	mov	r1, r9
 800e63e:	2201      	movs	r2, #1
 800e640:	4658      	mov	r0, fp
 800e642:	f000 fbb3 	bl	800edac <__lshift>
 800e646:	4621      	mov	r1, r4
 800e648:	4681      	mov	r9, r0
 800e64a:	f000 fc1b 	bl	800ee84 <__mcmp>
 800e64e:	2800      	cmp	r0, #0
 800e650:	dc03      	bgt.n	800e65a <_dtoa_r+0xa52>
 800e652:	d1e1      	bne.n	800e618 <_dtoa_r+0xa10>
 800e654:	f018 0f01 	tst.w	r8, #1
 800e658:	d0de      	beq.n	800e618 <_dtoa_r+0xa10>
 800e65a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e65e:	d1d8      	bne.n	800e612 <_dtoa_r+0xa0a>
 800e660:	9a00      	ldr	r2, [sp, #0]
 800e662:	2339      	movs	r3, #57	@ 0x39
 800e664:	7013      	strb	r3, [r2, #0]
 800e666:	4633      	mov	r3, r6
 800e668:	461e      	mov	r6, r3
 800e66a:	3b01      	subs	r3, #1
 800e66c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e670:	2a39      	cmp	r2, #57	@ 0x39
 800e672:	d052      	beq.n	800e71a <_dtoa_r+0xb12>
 800e674:	3201      	adds	r2, #1
 800e676:	701a      	strb	r2, [r3, #0]
 800e678:	e612      	b.n	800e2a0 <_dtoa_r+0x698>
 800e67a:	2a00      	cmp	r2, #0
 800e67c:	dd07      	ble.n	800e68e <_dtoa_r+0xa86>
 800e67e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e682:	d0ed      	beq.n	800e660 <_dtoa_r+0xa58>
 800e684:	9a00      	ldr	r2, [sp, #0]
 800e686:	f108 0301 	add.w	r3, r8, #1
 800e68a:	7013      	strb	r3, [r2, #0]
 800e68c:	e608      	b.n	800e2a0 <_dtoa_r+0x698>
 800e68e:	9b07      	ldr	r3, [sp, #28]
 800e690:	9a07      	ldr	r2, [sp, #28]
 800e692:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e696:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e698:	4293      	cmp	r3, r2
 800e69a:	d028      	beq.n	800e6ee <_dtoa_r+0xae6>
 800e69c:	4649      	mov	r1, r9
 800e69e:	2300      	movs	r3, #0
 800e6a0:	220a      	movs	r2, #10
 800e6a2:	4658      	mov	r0, fp
 800e6a4:	f000 f9d6 	bl	800ea54 <__multadd>
 800e6a8:	42af      	cmp	r7, r5
 800e6aa:	4681      	mov	r9, r0
 800e6ac:	f04f 0300 	mov.w	r3, #0
 800e6b0:	f04f 020a 	mov.w	r2, #10
 800e6b4:	4639      	mov	r1, r7
 800e6b6:	4658      	mov	r0, fp
 800e6b8:	d107      	bne.n	800e6ca <_dtoa_r+0xac2>
 800e6ba:	f000 f9cb 	bl	800ea54 <__multadd>
 800e6be:	4607      	mov	r7, r0
 800e6c0:	4605      	mov	r5, r0
 800e6c2:	9b07      	ldr	r3, [sp, #28]
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	9307      	str	r3, [sp, #28]
 800e6c8:	e774      	b.n	800e5b4 <_dtoa_r+0x9ac>
 800e6ca:	f000 f9c3 	bl	800ea54 <__multadd>
 800e6ce:	4629      	mov	r1, r5
 800e6d0:	4607      	mov	r7, r0
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	220a      	movs	r2, #10
 800e6d6:	4658      	mov	r0, fp
 800e6d8:	f000 f9bc 	bl	800ea54 <__multadd>
 800e6dc:	4605      	mov	r5, r0
 800e6de:	e7f0      	b.n	800e6c2 <_dtoa_r+0xaba>
 800e6e0:	9b00      	ldr	r3, [sp, #0]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	bfcc      	ite	gt
 800e6e6:	461e      	movgt	r6, r3
 800e6e8:	2601      	movle	r6, #1
 800e6ea:	4456      	add	r6, sl
 800e6ec:	2700      	movs	r7, #0
 800e6ee:	4649      	mov	r1, r9
 800e6f0:	2201      	movs	r2, #1
 800e6f2:	4658      	mov	r0, fp
 800e6f4:	f000 fb5a 	bl	800edac <__lshift>
 800e6f8:	4621      	mov	r1, r4
 800e6fa:	4681      	mov	r9, r0
 800e6fc:	f000 fbc2 	bl	800ee84 <__mcmp>
 800e700:	2800      	cmp	r0, #0
 800e702:	dcb0      	bgt.n	800e666 <_dtoa_r+0xa5e>
 800e704:	d102      	bne.n	800e70c <_dtoa_r+0xb04>
 800e706:	f018 0f01 	tst.w	r8, #1
 800e70a:	d1ac      	bne.n	800e666 <_dtoa_r+0xa5e>
 800e70c:	4633      	mov	r3, r6
 800e70e:	461e      	mov	r6, r3
 800e710:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e714:	2a30      	cmp	r2, #48	@ 0x30
 800e716:	d0fa      	beq.n	800e70e <_dtoa_r+0xb06>
 800e718:	e5c2      	b.n	800e2a0 <_dtoa_r+0x698>
 800e71a:	459a      	cmp	sl, r3
 800e71c:	d1a4      	bne.n	800e668 <_dtoa_r+0xa60>
 800e71e:	9b04      	ldr	r3, [sp, #16]
 800e720:	3301      	adds	r3, #1
 800e722:	9304      	str	r3, [sp, #16]
 800e724:	2331      	movs	r3, #49	@ 0x31
 800e726:	f88a 3000 	strb.w	r3, [sl]
 800e72a:	e5b9      	b.n	800e2a0 <_dtoa_r+0x698>
 800e72c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e72e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e78c <_dtoa_r+0xb84>
 800e732:	b11b      	cbz	r3, 800e73c <_dtoa_r+0xb34>
 800e734:	f10a 0308 	add.w	r3, sl, #8
 800e738:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e73a:	6013      	str	r3, [r2, #0]
 800e73c:	4650      	mov	r0, sl
 800e73e:	b019      	add	sp, #100	@ 0x64
 800e740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e746:	2b01      	cmp	r3, #1
 800e748:	f77f ae37 	ble.w	800e3ba <_dtoa_r+0x7b2>
 800e74c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e74e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e750:	2001      	movs	r0, #1
 800e752:	e655      	b.n	800e400 <_dtoa_r+0x7f8>
 800e754:	9b00      	ldr	r3, [sp, #0]
 800e756:	2b00      	cmp	r3, #0
 800e758:	f77f aed6 	ble.w	800e508 <_dtoa_r+0x900>
 800e75c:	4656      	mov	r6, sl
 800e75e:	4621      	mov	r1, r4
 800e760:	4648      	mov	r0, r9
 800e762:	f7ff f9c6 	bl	800daf2 <quorem>
 800e766:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e76a:	f806 8b01 	strb.w	r8, [r6], #1
 800e76e:	9b00      	ldr	r3, [sp, #0]
 800e770:	eba6 020a 	sub.w	r2, r6, sl
 800e774:	4293      	cmp	r3, r2
 800e776:	ddb3      	ble.n	800e6e0 <_dtoa_r+0xad8>
 800e778:	4649      	mov	r1, r9
 800e77a:	2300      	movs	r3, #0
 800e77c:	220a      	movs	r2, #10
 800e77e:	4658      	mov	r0, fp
 800e780:	f000 f968 	bl	800ea54 <__multadd>
 800e784:	4681      	mov	r9, r0
 800e786:	e7ea      	b.n	800e75e <_dtoa_r+0xb56>
 800e788:	0800fc28 	.word	0x0800fc28
 800e78c:	0800fbac 	.word	0x0800fbac

0800e790 <_free_r>:
 800e790:	b538      	push	{r3, r4, r5, lr}
 800e792:	4605      	mov	r5, r0
 800e794:	2900      	cmp	r1, #0
 800e796:	d041      	beq.n	800e81c <_free_r+0x8c>
 800e798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e79c:	1f0c      	subs	r4, r1, #4
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	bfb8      	it	lt
 800e7a2:	18e4      	addlt	r4, r4, r3
 800e7a4:	f000 f8e8 	bl	800e978 <__malloc_lock>
 800e7a8:	4a1d      	ldr	r2, [pc, #116]	@ (800e820 <_free_r+0x90>)
 800e7aa:	6813      	ldr	r3, [r2, #0]
 800e7ac:	b933      	cbnz	r3, 800e7bc <_free_r+0x2c>
 800e7ae:	6063      	str	r3, [r4, #4]
 800e7b0:	6014      	str	r4, [r2, #0]
 800e7b2:	4628      	mov	r0, r5
 800e7b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7b8:	f000 b8e4 	b.w	800e984 <__malloc_unlock>
 800e7bc:	42a3      	cmp	r3, r4
 800e7be:	d908      	bls.n	800e7d2 <_free_r+0x42>
 800e7c0:	6820      	ldr	r0, [r4, #0]
 800e7c2:	1821      	adds	r1, r4, r0
 800e7c4:	428b      	cmp	r3, r1
 800e7c6:	bf01      	itttt	eq
 800e7c8:	6819      	ldreq	r1, [r3, #0]
 800e7ca:	685b      	ldreq	r3, [r3, #4]
 800e7cc:	1809      	addeq	r1, r1, r0
 800e7ce:	6021      	streq	r1, [r4, #0]
 800e7d0:	e7ed      	b.n	800e7ae <_free_r+0x1e>
 800e7d2:	461a      	mov	r2, r3
 800e7d4:	685b      	ldr	r3, [r3, #4]
 800e7d6:	b10b      	cbz	r3, 800e7dc <_free_r+0x4c>
 800e7d8:	42a3      	cmp	r3, r4
 800e7da:	d9fa      	bls.n	800e7d2 <_free_r+0x42>
 800e7dc:	6811      	ldr	r1, [r2, #0]
 800e7de:	1850      	adds	r0, r2, r1
 800e7e0:	42a0      	cmp	r0, r4
 800e7e2:	d10b      	bne.n	800e7fc <_free_r+0x6c>
 800e7e4:	6820      	ldr	r0, [r4, #0]
 800e7e6:	4401      	add	r1, r0
 800e7e8:	1850      	adds	r0, r2, r1
 800e7ea:	4283      	cmp	r3, r0
 800e7ec:	6011      	str	r1, [r2, #0]
 800e7ee:	d1e0      	bne.n	800e7b2 <_free_r+0x22>
 800e7f0:	6818      	ldr	r0, [r3, #0]
 800e7f2:	685b      	ldr	r3, [r3, #4]
 800e7f4:	6053      	str	r3, [r2, #4]
 800e7f6:	4408      	add	r0, r1
 800e7f8:	6010      	str	r0, [r2, #0]
 800e7fa:	e7da      	b.n	800e7b2 <_free_r+0x22>
 800e7fc:	d902      	bls.n	800e804 <_free_r+0x74>
 800e7fe:	230c      	movs	r3, #12
 800e800:	602b      	str	r3, [r5, #0]
 800e802:	e7d6      	b.n	800e7b2 <_free_r+0x22>
 800e804:	6820      	ldr	r0, [r4, #0]
 800e806:	1821      	adds	r1, r4, r0
 800e808:	428b      	cmp	r3, r1
 800e80a:	bf04      	itt	eq
 800e80c:	6819      	ldreq	r1, [r3, #0]
 800e80e:	685b      	ldreq	r3, [r3, #4]
 800e810:	6063      	str	r3, [r4, #4]
 800e812:	bf04      	itt	eq
 800e814:	1809      	addeq	r1, r1, r0
 800e816:	6021      	streq	r1, [r4, #0]
 800e818:	6054      	str	r4, [r2, #4]
 800e81a:	e7ca      	b.n	800e7b2 <_free_r+0x22>
 800e81c:	bd38      	pop	{r3, r4, r5, pc}
 800e81e:	bf00      	nop
 800e820:	20001188 	.word	0x20001188

0800e824 <malloc>:
 800e824:	4b02      	ldr	r3, [pc, #8]	@ (800e830 <malloc+0xc>)
 800e826:	4601      	mov	r1, r0
 800e828:	6818      	ldr	r0, [r3, #0]
 800e82a:	f000 b825 	b.w	800e878 <_malloc_r>
 800e82e:	bf00      	nop
 800e830:	20000128 	.word	0x20000128

0800e834 <sbrk_aligned>:
 800e834:	b570      	push	{r4, r5, r6, lr}
 800e836:	4e0f      	ldr	r6, [pc, #60]	@ (800e874 <sbrk_aligned+0x40>)
 800e838:	460c      	mov	r4, r1
 800e83a:	6831      	ldr	r1, [r6, #0]
 800e83c:	4605      	mov	r5, r0
 800e83e:	b911      	cbnz	r1, 800e846 <sbrk_aligned+0x12>
 800e840:	f000 fd58 	bl	800f2f4 <_sbrk_r>
 800e844:	6030      	str	r0, [r6, #0]
 800e846:	4621      	mov	r1, r4
 800e848:	4628      	mov	r0, r5
 800e84a:	f000 fd53 	bl	800f2f4 <_sbrk_r>
 800e84e:	1c43      	adds	r3, r0, #1
 800e850:	d103      	bne.n	800e85a <sbrk_aligned+0x26>
 800e852:	f04f 34ff 	mov.w	r4, #4294967295
 800e856:	4620      	mov	r0, r4
 800e858:	bd70      	pop	{r4, r5, r6, pc}
 800e85a:	1cc4      	adds	r4, r0, #3
 800e85c:	f024 0403 	bic.w	r4, r4, #3
 800e860:	42a0      	cmp	r0, r4
 800e862:	d0f8      	beq.n	800e856 <sbrk_aligned+0x22>
 800e864:	1a21      	subs	r1, r4, r0
 800e866:	4628      	mov	r0, r5
 800e868:	f000 fd44 	bl	800f2f4 <_sbrk_r>
 800e86c:	3001      	adds	r0, #1
 800e86e:	d1f2      	bne.n	800e856 <sbrk_aligned+0x22>
 800e870:	e7ef      	b.n	800e852 <sbrk_aligned+0x1e>
 800e872:	bf00      	nop
 800e874:	20001184 	.word	0x20001184

0800e878 <_malloc_r>:
 800e878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e87c:	1ccd      	adds	r5, r1, #3
 800e87e:	f025 0503 	bic.w	r5, r5, #3
 800e882:	3508      	adds	r5, #8
 800e884:	2d0c      	cmp	r5, #12
 800e886:	bf38      	it	cc
 800e888:	250c      	movcc	r5, #12
 800e88a:	2d00      	cmp	r5, #0
 800e88c:	4606      	mov	r6, r0
 800e88e:	db01      	blt.n	800e894 <_malloc_r+0x1c>
 800e890:	42a9      	cmp	r1, r5
 800e892:	d904      	bls.n	800e89e <_malloc_r+0x26>
 800e894:	230c      	movs	r3, #12
 800e896:	6033      	str	r3, [r6, #0]
 800e898:	2000      	movs	r0, #0
 800e89a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e89e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e974 <_malloc_r+0xfc>
 800e8a2:	f000 f869 	bl	800e978 <__malloc_lock>
 800e8a6:	f8d8 3000 	ldr.w	r3, [r8]
 800e8aa:	461c      	mov	r4, r3
 800e8ac:	bb44      	cbnz	r4, 800e900 <_malloc_r+0x88>
 800e8ae:	4629      	mov	r1, r5
 800e8b0:	4630      	mov	r0, r6
 800e8b2:	f7ff ffbf 	bl	800e834 <sbrk_aligned>
 800e8b6:	1c43      	adds	r3, r0, #1
 800e8b8:	4604      	mov	r4, r0
 800e8ba:	d158      	bne.n	800e96e <_malloc_r+0xf6>
 800e8bc:	f8d8 4000 	ldr.w	r4, [r8]
 800e8c0:	4627      	mov	r7, r4
 800e8c2:	2f00      	cmp	r7, #0
 800e8c4:	d143      	bne.n	800e94e <_malloc_r+0xd6>
 800e8c6:	2c00      	cmp	r4, #0
 800e8c8:	d04b      	beq.n	800e962 <_malloc_r+0xea>
 800e8ca:	6823      	ldr	r3, [r4, #0]
 800e8cc:	4639      	mov	r1, r7
 800e8ce:	4630      	mov	r0, r6
 800e8d0:	eb04 0903 	add.w	r9, r4, r3
 800e8d4:	f000 fd0e 	bl	800f2f4 <_sbrk_r>
 800e8d8:	4581      	cmp	r9, r0
 800e8da:	d142      	bne.n	800e962 <_malloc_r+0xea>
 800e8dc:	6821      	ldr	r1, [r4, #0]
 800e8de:	1a6d      	subs	r5, r5, r1
 800e8e0:	4629      	mov	r1, r5
 800e8e2:	4630      	mov	r0, r6
 800e8e4:	f7ff ffa6 	bl	800e834 <sbrk_aligned>
 800e8e8:	3001      	adds	r0, #1
 800e8ea:	d03a      	beq.n	800e962 <_malloc_r+0xea>
 800e8ec:	6823      	ldr	r3, [r4, #0]
 800e8ee:	442b      	add	r3, r5
 800e8f0:	6023      	str	r3, [r4, #0]
 800e8f2:	f8d8 3000 	ldr.w	r3, [r8]
 800e8f6:	685a      	ldr	r2, [r3, #4]
 800e8f8:	bb62      	cbnz	r2, 800e954 <_malloc_r+0xdc>
 800e8fa:	f8c8 7000 	str.w	r7, [r8]
 800e8fe:	e00f      	b.n	800e920 <_malloc_r+0xa8>
 800e900:	6822      	ldr	r2, [r4, #0]
 800e902:	1b52      	subs	r2, r2, r5
 800e904:	d420      	bmi.n	800e948 <_malloc_r+0xd0>
 800e906:	2a0b      	cmp	r2, #11
 800e908:	d917      	bls.n	800e93a <_malloc_r+0xc2>
 800e90a:	1961      	adds	r1, r4, r5
 800e90c:	42a3      	cmp	r3, r4
 800e90e:	6025      	str	r5, [r4, #0]
 800e910:	bf18      	it	ne
 800e912:	6059      	strne	r1, [r3, #4]
 800e914:	6863      	ldr	r3, [r4, #4]
 800e916:	bf08      	it	eq
 800e918:	f8c8 1000 	streq.w	r1, [r8]
 800e91c:	5162      	str	r2, [r4, r5]
 800e91e:	604b      	str	r3, [r1, #4]
 800e920:	4630      	mov	r0, r6
 800e922:	f000 f82f 	bl	800e984 <__malloc_unlock>
 800e926:	f104 000b 	add.w	r0, r4, #11
 800e92a:	1d23      	adds	r3, r4, #4
 800e92c:	f020 0007 	bic.w	r0, r0, #7
 800e930:	1ac2      	subs	r2, r0, r3
 800e932:	bf1c      	itt	ne
 800e934:	1a1b      	subne	r3, r3, r0
 800e936:	50a3      	strne	r3, [r4, r2]
 800e938:	e7af      	b.n	800e89a <_malloc_r+0x22>
 800e93a:	6862      	ldr	r2, [r4, #4]
 800e93c:	42a3      	cmp	r3, r4
 800e93e:	bf0c      	ite	eq
 800e940:	f8c8 2000 	streq.w	r2, [r8]
 800e944:	605a      	strne	r2, [r3, #4]
 800e946:	e7eb      	b.n	800e920 <_malloc_r+0xa8>
 800e948:	4623      	mov	r3, r4
 800e94a:	6864      	ldr	r4, [r4, #4]
 800e94c:	e7ae      	b.n	800e8ac <_malloc_r+0x34>
 800e94e:	463c      	mov	r4, r7
 800e950:	687f      	ldr	r7, [r7, #4]
 800e952:	e7b6      	b.n	800e8c2 <_malloc_r+0x4a>
 800e954:	461a      	mov	r2, r3
 800e956:	685b      	ldr	r3, [r3, #4]
 800e958:	42a3      	cmp	r3, r4
 800e95a:	d1fb      	bne.n	800e954 <_malloc_r+0xdc>
 800e95c:	2300      	movs	r3, #0
 800e95e:	6053      	str	r3, [r2, #4]
 800e960:	e7de      	b.n	800e920 <_malloc_r+0xa8>
 800e962:	230c      	movs	r3, #12
 800e964:	6033      	str	r3, [r6, #0]
 800e966:	4630      	mov	r0, r6
 800e968:	f000 f80c 	bl	800e984 <__malloc_unlock>
 800e96c:	e794      	b.n	800e898 <_malloc_r+0x20>
 800e96e:	6005      	str	r5, [r0, #0]
 800e970:	e7d6      	b.n	800e920 <_malloc_r+0xa8>
 800e972:	bf00      	nop
 800e974:	20001188 	.word	0x20001188

0800e978 <__malloc_lock>:
 800e978:	4801      	ldr	r0, [pc, #4]	@ (800e980 <__malloc_lock+0x8>)
 800e97a:	f7ff b8aa 	b.w	800dad2 <__retarget_lock_acquire_recursive>
 800e97e:	bf00      	nop
 800e980:	20001180 	.word	0x20001180

0800e984 <__malloc_unlock>:
 800e984:	4801      	ldr	r0, [pc, #4]	@ (800e98c <__malloc_unlock+0x8>)
 800e986:	f7ff b8a5 	b.w	800dad4 <__retarget_lock_release_recursive>
 800e98a:	bf00      	nop
 800e98c:	20001180 	.word	0x20001180

0800e990 <_Balloc>:
 800e990:	b570      	push	{r4, r5, r6, lr}
 800e992:	69c6      	ldr	r6, [r0, #28]
 800e994:	4604      	mov	r4, r0
 800e996:	460d      	mov	r5, r1
 800e998:	b976      	cbnz	r6, 800e9b8 <_Balloc+0x28>
 800e99a:	2010      	movs	r0, #16
 800e99c:	f7ff ff42 	bl	800e824 <malloc>
 800e9a0:	4602      	mov	r2, r0
 800e9a2:	61e0      	str	r0, [r4, #28]
 800e9a4:	b920      	cbnz	r0, 800e9b0 <_Balloc+0x20>
 800e9a6:	4b18      	ldr	r3, [pc, #96]	@ (800ea08 <_Balloc+0x78>)
 800e9a8:	4818      	ldr	r0, [pc, #96]	@ (800ea0c <_Balloc+0x7c>)
 800e9aa:	216b      	movs	r1, #107	@ 0x6b
 800e9ac:	f000 fcb2 	bl	800f314 <__assert_func>
 800e9b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e9b4:	6006      	str	r6, [r0, #0]
 800e9b6:	60c6      	str	r6, [r0, #12]
 800e9b8:	69e6      	ldr	r6, [r4, #28]
 800e9ba:	68f3      	ldr	r3, [r6, #12]
 800e9bc:	b183      	cbz	r3, 800e9e0 <_Balloc+0x50>
 800e9be:	69e3      	ldr	r3, [r4, #28]
 800e9c0:	68db      	ldr	r3, [r3, #12]
 800e9c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e9c6:	b9b8      	cbnz	r0, 800e9f8 <_Balloc+0x68>
 800e9c8:	2101      	movs	r1, #1
 800e9ca:	fa01 f605 	lsl.w	r6, r1, r5
 800e9ce:	1d72      	adds	r2, r6, #5
 800e9d0:	0092      	lsls	r2, r2, #2
 800e9d2:	4620      	mov	r0, r4
 800e9d4:	f000 fcbc 	bl	800f350 <_calloc_r>
 800e9d8:	b160      	cbz	r0, 800e9f4 <_Balloc+0x64>
 800e9da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e9de:	e00e      	b.n	800e9fe <_Balloc+0x6e>
 800e9e0:	2221      	movs	r2, #33	@ 0x21
 800e9e2:	2104      	movs	r1, #4
 800e9e4:	4620      	mov	r0, r4
 800e9e6:	f000 fcb3 	bl	800f350 <_calloc_r>
 800e9ea:	69e3      	ldr	r3, [r4, #28]
 800e9ec:	60f0      	str	r0, [r6, #12]
 800e9ee:	68db      	ldr	r3, [r3, #12]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d1e4      	bne.n	800e9be <_Balloc+0x2e>
 800e9f4:	2000      	movs	r0, #0
 800e9f6:	bd70      	pop	{r4, r5, r6, pc}
 800e9f8:	6802      	ldr	r2, [r0, #0]
 800e9fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e9fe:	2300      	movs	r3, #0
 800ea00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ea04:	e7f7      	b.n	800e9f6 <_Balloc+0x66>
 800ea06:	bf00      	nop
 800ea08:	0800fbb9 	.word	0x0800fbb9
 800ea0c:	0800fc39 	.word	0x0800fc39

0800ea10 <_Bfree>:
 800ea10:	b570      	push	{r4, r5, r6, lr}
 800ea12:	69c6      	ldr	r6, [r0, #28]
 800ea14:	4605      	mov	r5, r0
 800ea16:	460c      	mov	r4, r1
 800ea18:	b976      	cbnz	r6, 800ea38 <_Bfree+0x28>
 800ea1a:	2010      	movs	r0, #16
 800ea1c:	f7ff ff02 	bl	800e824 <malloc>
 800ea20:	4602      	mov	r2, r0
 800ea22:	61e8      	str	r0, [r5, #28]
 800ea24:	b920      	cbnz	r0, 800ea30 <_Bfree+0x20>
 800ea26:	4b09      	ldr	r3, [pc, #36]	@ (800ea4c <_Bfree+0x3c>)
 800ea28:	4809      	ldr	r0, [pc, #36]	@ (800ea50 <_Bfree+0x40>)
 800ea2a:	218f      	movs	r1, #143	@ 0x8f
 800ea2c:	f000 fc72 	bl	800f314 <__assert_func>
 800ea30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea34:	6006      	str	r6, [r0, #0]
 800ea36:	60c6      	str	r6, [r0, #12]
 800ea38:	b13c      	cbz	r4, 800ea4a <_Bfree+0x3a>
 800ea3a:	69eb      	ldr	r3, [r5, #28]
 800ea3c:	6862      	ldr	r2, [r4, #4]
 800ea3e:	68db      	ldr	r3, [r3, #12]
 800ea40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ea44:	6021      	str	r1, [r4, #0]
 800ea46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ea4a:	bd70      	pop	{r4, r5, r6, pc}
 800ea4c:	0800fbb9 	.word	0x0800fbb9
 800ea50:	0800fc39 	.word	0x0800fc39

0800ea54 <__multadd>:
 800ea54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea58:	690d      	ldr	r5, [r1, #16]
 800ea5a:	4607      	mov	r7, r0
 800ea5c:	460c      	mov	r4, r1
 800ea5e:	461e      	mov	r6, r3
 800ea60:	f101 0c14 	add.w	ip, r1, #20
 800ea64:	2000      	movs	r0, #0
 800ea66:	f8dc 3000 	ldr.w	r3, [ip]
 800ea6a:	b299      	uxth	r1, r3
 800ea6c:	fb02 6101 	mla	r1, r2, r1, r6
 800ea70:	0c1e      	lsrs	r6, r3, #16
 800ea72:	0c0b      	lsrs	r3, r1, #16
 800ea74:	fb02 3306 	mla	r3, r2, r6, r3
 800ea78:	b289      	uxth	r1, r1
 800ea7a:	3001      	adds	r0, #1
 800ea7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ea80:	4285      	cmp	r5, r0
 800ea82:	f84c 1b04 	str.w	r1, [ip], #4
 800ea86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ea8a:	dcec      	bgt.n	800ea66 <__multadd+0x12>
 800ea8c:	b30e      	cbz	r6, 800ead2 <__multadd+0x7e>
 800ea8e:	68a3      	ldr	r3, [r4, #8]
 800ea90:	42ab      	cmp	r3, r5
 800ea92:	dc19      	bgt.n	800eac8 <__multadd+0x74>
 800ea94:	6861      	ldr	r1, [r4, #4]
 800ea96:	4638      	mov	r0, r7
 800ea98:	3101      	adds	r1, #1
 800ea9a:	f7ff ff79 	bl	800e990 <_Balloc>
 800ea9e:	4680      	mov	r8, r0
 800eaa0:	b928      	cbnz	r0, 800eaae <__multadd+0x5a>
 800eaa2:	4602      	mov	r2, r0
 800eaa4:	4b0c      	ldr	r3, [pc, #48]	@ (800ead8 <__multadd+0x84>)
 800eaa6:	480d      	ldr	r0, [pc, #52]	@ (800eadc <__multadd+0x88>)
 800eaa8:	21ba      	movs	r1, #186	@ 0xba
 800eaaa:	f000 fc33 	bl	800f314 <__assert_func>
 800eaae:	6922      	ldr	r2, [r4, #16]
 800eab0:	3202      	adds	r2, #2
 800eab2:	f104 010c 	add.w	r1, r4, #12
 800eab6:	0092      	lsls	r2, r2, #2
 800eab8:	300c      	adds	r0, #12
 800eaba:	f7ff f80c 	bl	800dad6 <memcpy>
 800eabe:	4621      	mov	r1, r4
 800eac0:	4638      	mov	r0, r7
 800eac2:	f7ff ffa5 	bl	800ea10 <_Bfree>
 800eac6:	4644      	mov	r4, r8
 800eac8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eacc:	3501      	adds	r5, #1
 800eace:	615e      	str	r6, [r3, #20]
 800ead0:	6125      	str	r5, [r4, #16]
 800ead2:	4620      	mov	r0, r4
 800ead4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ead8:	0800fc28 	.word	0x0800fc28
 800eadc:	0800fc39 	.word	0x0800fc39

0800eae0 <__hi0bits>:
 800eae0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800eae4:	4603      	mov	r3, r0
 800eae6:	bf36      	itet	cc
 800eae8:	0403      	lslcc	r3, r0, #16
 800eaea:	2000      	movcs	r0, #0
 800eaec:	2010      	movcc	r0, #16
 800eaee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800eaf2:	bf3c      	itt	cc
 800eaf4:	021b      	lslcc	r3, r3, #8
 800eaf6:	3008      	addcc	r0, #8
 800eaf8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eafc:	bf3c      	itt	cc
 800eafe:	011b      	lslcc	r3, r3, #4
 800eb00:	3004      	addcc	r0, #4
 800eb02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb06:	bf3c      	itt	cc
 800eb08:	009b      	lslcc	r3, r3, #2
 800eb0a:	3002      	addcc	r0, #2
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	db05      	blt.n	800eb1c <__hi0bits+0x3c>
 800eb10:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800eb14:	f100 0001 	add.w	r0, r0, #1
 800eb18:	bf08      	it	eq
 800eb1a:	2020      	moveq	r0, #32
 800eb1c:	4770      	bx	lr

0800eb1e <__lo0bits>:
 800eb1e:	6803      	ldr	r3, [r0, #0]
 800eb20:	4602      	mov	r2, r0
 800eb22:	f013 0007 	ands.w	r0, r3, #7
 800eb26:	d00b      	beq.n	800eb40 <__lo0bits+0x22>
 800eb28:	07d9      	lsls	r1, r3, #31
 800eb2a:	d421      	bmi.n	800eb70 <__lo0bits+0x52>
 800eb2c:	0798      	lsls	r0, r3, #30
 800eb2e:	bf49      	itett	mi
 800eb30:	085b      	lsrmi	r3, r3, #1
 800eb32:	089b      	lsrpl	r3, r3, #2
 800eb34:	2001      	movmi	r0, #1
 800eb36:	6013      	strmi	r3, [r2, #0]
 800eb38:	bf5c      	itt	pl
 800eb3a:	6013      	strpl	r3, [r2, #0]
 800eb3c:	2002      	movpl	r0, #2
 800eb3e:	4770      	bx	lr
 800eb40:	b299      	uxth	r1, r3
 800eb42:	b909      	cbnz	r1, 800eb48 <__lo0bits+0x2a>
 800eb44:	0c1b      	lsrs	r3, r3, #16
 800eb46:	2010      	movs	r0, #16
 800eb48:	b2d9      	uxtb	r1, r3
 800eb4a:	b909      	cbnz	r1, 800eb50 <__lo0bits+0x32>
 800eb4c:	3008      	adds	r0, #8
 800eb4e:	0a1b      	lsrs	r3, r3, #8
 800eb50:	0719      	lsls	r1, r3, #28
 800eb52:	bf04      	itt	eq
 800eb54:	091b      	lsreq	r3, r3, #4
 800eb56:	3004      	addeq	r0, #4
 800eb58:	0799      	lsls	r1, r3, #30
 800eb5a:	bf04      	itt	eq
 800eb5c:	089b      	lsreq	r3, r3, #2
 800eb5e:	3002      	addeq	r0, #2
 800eb60:	07d9      	lsls	r1, r3, #31
 800eb62:	d403      	bmi.n	800eb6c <__lo0bits+0x4e>
 800eb64:	085b      	lsrs	r3, r3, #1
 800eb66:	f100 0001 	add.w	r0, r0, #1
 800eb6a:	d003      	beq.n	800eb74 <__lo0bits+0x56>
 800eb6c:	6013      	str	r3, [r2, #0]
 800eb6e:	4770      	bx	lr
 800eb70:	2000      	movs	r0, #0
 800eb72:	4770      	bx	lr
 800eb74:	2020      	movs	r0, #32
 800eb76:	4770      	bx	lr

0800eb78 <__i2b>:
 800eb78:	b510      	push	{r4, lr}
 800eb7a:	460c      	mov	r4, r1
 800eb7c:	2101      	movs	r1, #1
 800eb7e:	f7ff ff07 	bl	800e990 <_Balloc>
 800eb82:	4602      	mov	r2, r0
 800eb84:	b928      	cbnz	r0, 800eb92 <__i2b+0x1a>
 800eb86:	4b05      	ldr	r3, [pc, #20]	@ (800eb9c <__i2b+0x24>)
 800eb88:	4805      	ldr	r0, [pc, #20]	@ (800eba0 <__i2b+0x28>)
 800eb8a:	f240 1145 	movw	r1, #325	@ 0x145
 800eb8e:	f000 fbc1 	bl	800f314 <__assert_func>
 800eb92:	2301      	movs	r3, #1
 800eb94:	6144      	str	r4, [r0, #20]
 800eb96:	6103      	str	r3, [r0, #16]
 800eb98:	bd10      	pop	{r4, pc}
 800eb9a:	bf00      	nop
 800eb9c:	0800fc28 	.word	0x0800fc28
 800eba0:	0800fc39 	.word	0x0800fc39

0800eba4 <__multiply>:
 800eba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eba8:	4614      	mov	r4, r2
 800ebaa:	690a      	ldr	r2, [r1, #16]
 800ebac:	6923      	ldr	r3, [r4, #16]
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	bfa8      	it	ge
 800ebb2:	4623      	movge	r3, r4
 800ebb4:	460f      	mov	r7, r1
 800ebb6:	bfa4      	itt	ge
 800ebb8:	460c      	movge	r4, r1
 800ebba:	461f      	movge	r7, r3
 800ebbc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ebc0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ebc4:	68a3      	ldr	r3, [r4, #8]
 800ebc6:	6861      	ldr	r1, [r4, #4]
 800ebc8:	eb0a 0609 	add.w	r6, sl, r9
 800ebcc:	42b3      	cmp	r3, r6
 800ebce:	b085      	sub	sp, #20
 800ebd0:	bfb8      	it	lt
 800ebd2:	3101      	addlt	r1, #1
 800ebd4:	f7ff fedc 	bl	800e990 <_Balloc>
 800ebd8:	b930      	cbnz	r0, 800ebe8 <__multiply+0x44>
 800ebda:	4602      	mov	r2, r0
 800ebdc:	4b44      	ldr	r3, [pc, #272]	@ (800ecf0 <__multiply+0x14c>)
 800ebde:	4845      	ldr	r0, [pc, #276]	@ (800ecf4 <__multiply+0x150>)
 800ebe0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ebe4:	f000 fb96 	bl	800f314 <__assert_func>
 800ebe8:	f100 0514 	add.w	r5, r0, #20
 800ebec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ebf0:	462b      	mov	r3, r5
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	4543      	cmp	r3, r8
 800ebf6:	d321      	bcc.n	800ec3c <__multiply+0x98>
 800ebf8:	f107 0114 	add.w	r1, r7, #20
 800ebfc:	f104 0214 	add.w	r2, r4, #20
 800ec00:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ec04:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ec08:	9302      	str	r3, [sp, #8]
 800ec0a:	1b13      	subs	r3, r2, r4
 800ec0c:	3b15      	subs	r3, #21
 800ec0e:	f023 0303 	bic.w	r3, r3, #3
 800ec12:	3304      	adds	r3, #4
 800ec14:	f104 0715 	add.w	r7, r4, #21
 800ec18:	42ba      	cmp	r2, r7
 800ec1a:	bf38      	it	cc
 800ec1c:	2304      	movcc	r3, #4
 800ec1e:	9301      	str	r3, [sp, #4]
 800ec20:	9b02      	ldr	r3, [sp, #8]
 800ec22:	9103      	str	r1, [sp, #12]
 800ec24:	428b      	cmp	r3, r1
 800ec26:	d80c      	bhi.n	800ec42 <__multiply+0x9e>
 800ec28:	2e00      	cmp	r6, #0
 800ec2a:	dd03      	ble.n	800ec34 <__multiply+0x90>
 800ec2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d05b      	beq.n	800ecec <__multiply+0x148>
 800ec34:	6106      	str	r6, [r0, #16]
 800ec36:	b005      	add	sp, #20
 800ec38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec3c:	f843 2b04 	str.w	r2, [r3], #4
 800ec40:	e7d8      	b.n	800ebf4 <__multiply+0x50>
 800ec42:	f8b1 a000 	ldrh.w	sl, [r1]
 800ec46:	f1ba 0f00 	cmp.w	sl, #0
 800ec4a:	d024      	beq.n	800ec96 <__multiply+0xf2>
 800ec4c:	f104 0e14 	add.w	lr, r4, #20
 800ec50:	46a9      	mov	r9, r5
 800ec52:	f04f 0c00 	mov.w	ip, #0
 800ec56:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ec5a:	f8d9 3000 	ldr.w	r3, [r9]
 800ec5e:	fa1f fb87 	uxth.w	fp, r7
 800ec62:	b29b      	uxth	r3, r3
 800ec64:	fb0a 330b 	mla	r3, sl, fp, r3
 800ec68:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ec6c:	f8d9 7000 	ldr.w	r7, [r9]
 800ec70:	4463      	add	r3, ip
 800ec72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ec76:	fb0a c70b 	mla	r7, sl, fp, ip
 800ec7a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ec7e:	b29b      	uxth	r3, r3
 800ec80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ec84:	4572      	cmp	r2, lr
 800ec86:	f849 3b04 	str.w	r3, [r9], #4
 800ec8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ec8e:	d8e2      	bhi.n	800ec56 <__multiply+0xb2>
 800ec90:	9b01      	ldr	r3, [sp, #4]
 800ec92:	f845 c003 	str.w	ip, [r5, r3]
 800ec96:	9b03      	ldr	r3, [sp, #12]
 800ec98:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ec9c:	3104      	adds	r1, #4
 800ec9e:	f1b9 0f00 	cmp.w	r9, #0
 800eca2:	d021      	beq.n	800ece8 <__multiply+0x144>
 800eca4:	682b      	ldr	r3, [r5, #0]
 800eca6:	f104 0c14 	add.w	ip, r4, #20
 800ecaa:	46ae      	mov	lr, r5
 800ecac:	f04f 0a00 	mov.w	sl, #0
 800ecb0:	f8bc b000 	ldrh.w	fp, [ip]
 800ecb4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ecb8:	fb09 770b 	mla	r7, r9, fp, r7
 800ecbc:	4457      	add	r7, sl
 800ecbe:	b29b      	uxth	r3, r3
 800ecc0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ecc4:	f84e 3b04 	str.w	r3, [lr], #4
 800ecc8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800eccc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ecd0:	f8be 3000 	ldrh.w	r3, [lr]
 800ecd4:	fb09 330a 	mla	r3, r9, sl, r3
 800ecd8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ecdc:	4562      	cmp	r2, ip
 800ecde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ece2:	d8e5      	bhi.n	800ecb0 <__multiply+0x10c>
 800ece4:	9f01      	ldr	r7, [sp, #4]
 800ece6:	51eb      	str	r3, [r5, r7]
 800ece8:	3504      	adds	r5, #4
 800ecea:	e799      	b.n	800ec20 <__multiply+0x7c>
 800ecec:	3e01      	subs	r6, #1
 800ecee:	e79b      	b.n	800ec28 <__multiply+0x84>
 800ecf0:	0800fc28 	.word	0x0800fc28
 800ecf4:	0800fc39 	.word	0x0800fc39

0800ecf8 <__pow5mult>:
 800ecf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecfc:	4615      	mov	r5, r2
 800ecfe:	f012 0203 	ands.w	r2, r2, #3
 800ed02:	4607      	mov	r7, r0
 800ed04:	460e      	mov	r6, r1
 800ed06:	d007      	beq.n	800ed18 <__pow5mult+0x20>
 800ed08:	4c25      	ldr	r4, [pc, #148]	@ (800eda0 <__pow5mult+0xa8>)
 800ed0a:	3a01      	subs	r2, #1
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ed12:	f7ff fe9f 	bl	800ea54 <__multadd>
 800ed16:	4606      	mov	r6, r0
 800ed18:	10ad      	asrs	r5, r5, #2
 800ed1a:	d03d      	beq.n	800ed98 <__pow5mult+0xa0>
 800ed1c:	69fc      	ldr	r4, [r7, #28]
 800ed1e:	b97c      	cbnz	r4, 800ed40 <__pow5mult+0x48>
 800ed20:	2010      	movs	r0, #16
 800ed22:	f7ff fd7f 	bl	800e824 <malloc>
 800ed26:	4602      	mov	r2, r0
 800ed28:	61f8      	str	r0, [r7, #28]
 800ed2a:	b928      	cbnz	r0, 800ed38 <__pow5mult+0x40>
 800ed2c:	4b1d      	ldr	r3, [pc, #116]	@ (800eda4 <__pow5mult+0xac>)
 800ed2e:	481e      	ldr	r0, [pc, #120]	@ (800eda8 <__pow5mult+0xb0>)
 800ed30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ed34:	f000 faee 	bl	800f314 <__assert_func>
 800ed38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ed3c:	6004      	str	r4, [r0, #0]
 800ed3e:	60c4      	str	r4, [r0, #12]
 800ed40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ed44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ed48:	b94c      	cbnz	r4, 800ed5e <__pow5mult+0x66>
 800ed4a:	f240 2171 	movw	r1, #625	@ 0x271
 800ed4e:	4638      	mov	r0, r7
 800ed50:	f7ff ff12 	bl	800eb78 <__i2b>
 800ed54:	2300      	movs	r3, #0
 800ed56:	f8c8 0008 	str.w	r0, [r8, #8]
 800ed5a:	4604      	mov	r4, r0
 800ed5c:	6003      	str	r3, [r0, #0]
 800ed5e:	f04f 0900 	mov.w	r9, #0
 800ed62:	07eb      	lsls	r3, r5, #31
 800ed64:	d50a      	bpl.n	800ed7c <__pow5mult+0x84>
 800ed66:	4631      	mov	r1, r6
 800ed68:	4622      	mov	r2, r4
 800ed6a:	4638      	mov	r0, r7
 800ed6c:	f7ff ff1a 	bl	800eba4 <__multiply>
 800ed70:	4631      	mov	r1, r6
 800ed72:	4680      	mov	r8, r0
 800ed74:	4638      	mov	r0, r7
 800ed76:	f7ff fe4b 	bl	800ea10 <_Bfree>
 800ed7a:	4646      	mov	r6, r8
 800ed7c:	106d      	asrs	r5, r5, #1
 800ed7e:	d00b      	beq.n	800ed98 <__pow5mult+0xa0>
 800ed80:	6820      	ldr	r0, [r4, #0]
 800ed82:	b938      	cbnz	r0, 800ed94 <__pow5mult+0x9c>
 800ed84:	4622      	mov	r2, r4
 800ed86:	4621      	mov	r1, r4
 800ed88:	4638      	mov	r0, r7
 800ed8a:	f7ff ff0b 	bl	800eba4 <__multiply>
 800ed8e:	6020      	str	r0, [r4, #0]
 800ed90:	f8c0 9000 	str.w	r9, [r0]
 800ed94:	4604      	mov	r4, r0
 800ed96:	e7e4      	b.n	800ed62 <__pow5mult+0x6a>
 800ed98:	4630      	mov	r0, r6
 800ed9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed9e:	bf00      	nop
 800eda0:	0800fc94 	.word	0x0800fc94
 800eda4:	0800fbb9 	.word	0x0800fbb9
 800eda8:	0800fc39 	.word	0x0800fc39

0800edac <__lshift>:
 800edac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edb0:	460c      	mov	r4, r1
 800edb2:	6849      	ldr	r1, [r1, #4]
 800edb4:	6923      	ldr	r3, [r4, #16]
 800edb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800edba:	68a3      	ldr	r3, [r4, #8]
 800edbc:	4607      	mov	r7, r0
 800edbe:	4691      	mov	r9, r2
 800edc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800edc4:	f108 0601 	add.w	r6, r8, #1
 800edc8:	42b3      	cmp	r3, r6
 800edca:	db0b      	blt.n	800ede4 <__lshift+0x38>
 800edcc:	4638      	mov	r0, r7
 800edce:	f7ff fddf 	bl	800e990 <_Balloc>
 800edd2:	4605      	mov	r5, r0
 800edd4:	b948      	cbnz	r0, 800edea <__lshift+0x3e>
 800edd6:	4602      	mov	r2, r0
 800edd8:	4b28      	ldr	r3, [pc, #160]	@ (800ee7c <__lshift+0xd0>)
 800edda:	4829      	ldr	r0, [pc, #164]	@ (800ee80 <__lshift+0xd4>)
 800eddc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ede0:	f000 fa98 	bl	800f314 <__assert_func>
 800ede4:	3101      	adds	r1, #1
 800ede6:	005b      	lsls	r3, r3, #1
 800ede8:	e7ee      	b.n	800edc8 <__lshift+0x1c>
 800edea:	2300      	movs	r3, #0
 800edec:	f100 0114 	add.w	r1, r0, #20
 800edf0:	f100 0210 	add.w	r2, r0, #16
 800edf4:	4618      	mov	r0, r3
 800edf6:	4553      	cmp	r3, sl
 800edf8:	db33      	blt.n	800ee62 <__lshift+0xb6>
 800edfa:	6920      	ldr	r0, [r4, #16]
 800edfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ee00:	f104 0314 	add.w	r3, r4, #20
 800ee04:	f019 091f 	ands.w	r9, r9, #31
 800ee08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ee0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ee10:	d02b      	beq.n	800ee6a <__lshift+0xbe>
 800ee12:	f1c9 0e20 	rsb	lr, r9, #32
 800ee16:	468a      	mov	sl, r1
 800ee18:	2200      	movs	r2, #0
 800ee1a:	6818      	ldr	r0, [r3, #0]
 800ee1c:	fa00 f009 	lsl.w	r0, r0, r9
 800ee20:	4310      	orrs	r0, r2
 800ee22:	f84a 0b04 	str.w	r0, [sl], #4
 800ee26:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee2a:	459c      	cmp	ip, r3
 800ee2c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ee30:	d8f3      	bhi.n	800ee1a <__lshift+0x6e>
 800ee32:	ebac 0304 	sub.w	r3, ip, r4
 800ee36:	3b15      	subs	r3, #21
 800ee38:	f023 0303 	bic.w	r3, r3, #3
 800ee3c:	3304      	adds	r3, #4
 800ee3e:	f104 0015 	add.w	r0, r4, #21
 800ee42:	4584      	cmp	ip, r0
 800ee44:	bf38      	it	cc
 800ee46:	2304      	movcc	r3, #4
 800ee48:	50ca      	str	r2, [r1, r3]
 800ee4a:	b10a      	cbz	r2, 800ee50 <__lshift+0xa4>
 800ee4c:	f108 0602 	add.w	r6, r8, #2
 800ee50:	3e01      	subs	r6, #1
 800ee52:	4638      	mov	r0, r7
 800ee54:	612e      	str	r6, [r5, #16]
 800ee56:	4621      	mov	r1, r4
 800ee58:	f7ff fdda 	bl	800ea10 <_Bfree>
 800ee5c:	4628      	mov	r0, r5
 800ee5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee62:	f842 0f04 	str.w	r0, [r2, #4]!
 800ee66:	3301      	adds	r3, #1
 800ee68:	e7c5      	b.n	800edf6 <__lshift+0x4a>
 800ee6a:	3904      	subs	r1, #4
 800ee6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee70:	f841 2f04 	str.w	r2, [r1, #4]!
 800ee74:	459c      	cmp	ip, r3
 800ee76:	d8f9      	bhi.n	800ee6c <__lshift+0xc0>
 800ee78:	e7ea      	b.n	800ee50 <__lshift+0xa4>
 800ee7a:	bf00      	nop
 800ee7c:	0800fc28 	.word	0x0800fc28
 800ee80:	0800fc39 	.word	0x0800fc39

0800ee84 <__mcmp>:
 800ee84:	690a      	ldr	r2, [r1, #16]
 800ee86:	4603      	mov	r3, r0
 800ee88:	6900      	ldr	r0, [r0, #16]
 800ee8a:	1a80      	subs	r0, r0, r2
 800ee8c:	b530      	push	{r4, r5, lr}
 800ee8e:	d10e      	bne.n	800eeae <__mcmp+0x2a>
 800ee90:	3314      	adds	r3, #20
 800ee92:	3114      	adds	r1, #20
 800ee94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ee98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ee9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800eea0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800eea4:	4295      	cmp	r5, r2
 800eea6:	d003      	beq.n	800eeb0 <__mcmp+0x2c>
 800eea8:	d205      	bcs.n	800eeb6 <__mcmp+0x32>
 800eeaa:	f04f 30ff 	mov.w	r0, #4294967295
 800eeae:	bd30      	pop	{r4, r5, pc}
 800eeb0:	42a3      	cmp	r3, r4
 800eeb2:	d3f3      	bcc.n	800ee9c <__mcmp+0x18>
 800eeb4:	e7fb      	b.n	800eeae <__mcmp+0x2a>
 800eeb6:	2001      	movs	r0, #1
 800eeb8:	e7f9      	b.n	800eeae <__mcmp+0x2a>
	...

0800eebc <__mdiff>:
 800eebc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eec0:	4689      	mov	r9, r1
 800eec2:	4606      	mov	r6, r0
 800eec4:	4611      	mov	r1, r2
 800eec6:	4648      	mov	r0, r9
 800eec8:	4614      	mov	r4, r2
 800eeca:	f7ff ffdb 	bl	800ee84 <__mcmp>
 800eece:	1e05      	subs	r5, r0, #0
 800eed0:	d112      	bne.n	800eef8 <__mdiff+0x3c>
 800eed2:	4629      	mov	r1, r5
 800eed4:	4630      	mov	r0, r6
 800eed6:	f7ff fd5b 	bl	800e990 <_Balloc>
 800eeda:	4602      	mov	r2, r0
 800eedc:	b928      	cbnz	r0, 800eeea <__mdiff+0x2e>
 800eede:	4b3f      	ldr	r3, [pc, #252]	@ (800efdc <__mdiff+0x120>)
 800eee0:	f240 2137 	movw	r1, #567	@ 0x237
 800eee4:	483e      	ldr	r0, [pc, #248]	@ (800efe0 <__mdiff+0x124>)
 800eee6:	f000 fa15 	bl	800f314 <__assert_func>
 800eeea:	2301      	movs	r3, #1
 800eeec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eef0:	4610      	mov	r0, r2
 800eef2:	b003      	add	sp, #12
 800eef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eef8:	bfbc      	itt	lt
 800eefa:	464b      	movlt	r3, r9
 800eefc:	46a1      	movlt	r9, r4
 800eefe:	4630      	mov	r0, r6
 800ef00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ef04:	bfba      	itte	lt
 800ef06:	461c      	movlt	r4, r3
 800ef08:	2501      	movlt	r5, #1
 800ef0a:	2500      	movge	r5, #0
 800ef0c:	f7ff fd40 	bl	800e990 <_Balloc>
 800ef10:	4602      	mov	r2, r0
 800ef12:	b918      	cbnz	r0, 800ef1c <__mdiff+0x60>
 800ef14:	4b31      	ldr	r3, [pc, #196]	@ (800efdc <__mdiff+0x120>)
 800ef16:	f240 2145 	movw	r1, #581	@ 0x245
 800ef1a:	e7e3      	b.n	800eee4 <__mdiff+0x28>
 800ef1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ef20:	6926      	ldr	r6, [r4, #16]
 800ef22:	60c5      	str	r5, [r0, #12]
 800ef24:	f109 0310 	add.w	r3, r9, #16
 800ef28:	f109 0514 	add.w	r5, r9, #20
 800ef2c:	f104 0e14 	add.w	lr, r4, #20
 800ef30:	f100 0b14 	add.w	fp, r0, #20
 800ef34:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ef38:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ef3c:	9301      	str	r3, [sp, #4]
 800ef3e:	46d9      	mov	r9, fp
 800ef40:	f04f 0c00 	mov.w	ip, #0
 800ef44:	9b01      	ldr	r3, [sp, #4]
 800ef46:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ef4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ef4e:	9301      	str	r3, [sp, #4]
 800ef50:	fa1f f38a 	uxth.w	r3, sl
 800ef54:	4619      	mov	r1, r3
 800ef56:	b283      	uxth	r3, r0
 800ef58:	1acb      	subs	r3, r1, r3
 800ef5a:	0c00      	lsrs	r0, r0, #16
 800ef5c:	4463      	add	r3, ip
 800ef5e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ef62:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ef66:	b29b      	uxth	r3, r3
 800ef68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ef6c:	4576      	cmp	r6, lr
 800ef6e:	f849 3b04 	str.w	r3, [r9], #4
 800ef72:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ef76:	d8e5      	bhi.n	800ef44 <__mdiff+0x88>
 800ef78:	1b33      	subs	r3, r6, r4
 800ef7a:	3b15      	subs	r3, #21
 800ef7c:	f023 0303 	bic.w	r3, r3, #3
 800ef80:	3415      	adds	r4, #21
 800ef82:	3304      	adds	r3, #4
 800ef84:	42a6      	cmp	r6, r4
 800ef86:	bf38      	it	cc
 800ef88:	2304      	movcc	r3, #4
 800ef8a:	441d      	add	r5, r3
 800ef8c:	445b      	add	r3, fp
 800ef8e:	461e      	mov	r6, r3
 800ef90:	462c      	mov	r4, r5
 800ef92:	4544      	cmp	r4, r8
 800ef94:	d30e      	bcc.n	800efb4 <__mdiff+0xf8>
 800ef96:	f108 0103 	add.w	r1, r8, #3
 800ef9a:	1b49      	subs	r1, r1, r5
 800ef9c:	f021 0103 	bic.w	r1, r1, #3
 800efa0:	3d03      	subs	r5, #3
 800efa2:	45a8      	cmp	r8, r5
 800efa4:	bf38      	it	cc
 800efa6:	2100      	movcc	r1, #0
 800efa8:	440b      	add	r3, r1
 800efaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800efae:	b191      	cbz	r1, 800efd6 <__mdiff+0x11a>
 800efb0:	6117      	str	r7, [r2, #16]
 800efb2:	e79d      	b.n	800eef0 <__mdiff+0x34>
 800efb4:	f854 1b04 	ldr.w	r1, [r4], #4
 800efb8:	46e6      	mov	lr, ip
 800efba:	0c08      	lsrs	r0, r1, #16
 800efbc:	fa1c fc81 	uxtah	ip, ip, r1
 800efc0:	4471      	add	r1, lr
 800efc2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800efc6:	b289      	uxth	r1, r1
 800efc8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800efcc:	f846 1b04 	str.w	r1, [r6], #4
 800efd0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800efd4:	e7dd      	b.n	800ef92 <__mdiff+0xd6>
 800efd6:	3f01      	subs	r7, #1
 800efd8:	e7e7      	b.n	800efaa <__mdiff+0xee>
 800efda:	bf00      	nop
 800efdc:	0800fc28 	.word	0x0800fc28
 800efe0:	0800fc39 	.word	0x0800fc39

0800efe4 <__d2b>:
 800efe4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800efe8:	460f      	mov	r7, r1
 800efea:	2101      	movs	r1, #1
 800efec:	ec59 8b10 	vmov	r8, r9, d0
 800eff0:	4616      	mov	r6, r2
 800eff2:	f7ff fccd 	bl	800e990 <_Balloc>
 800eff6:	4604      	mov	r4, r0
 800eff8:	b930      	cbnz	r0, 800f008 <__d2b+0x24>
 800effa:	4602      	mov	r2, r0
 800effc:	4b23      	ldr	r3, [pc, #140]	@ (800f08c <__d2b+0xa8>)
 800effe:	4824      	ldr	r0, [pc, #144]	@ (800f090 <__d2b+0xac>)
 800f000:	f240 310f 	movw	r1, #783	@ 0x30f
 800f004:	f000 f986 	bl	800f314 <__assert_func>
 800f008:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f00c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f010:	b10d      	cbz	r5, 800f016 <__d2b+0x32>
 800f012:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f016:	9301      	str	r3, [sp, #4]
 800f018:	f1b8 0300 	subs.w	r3, r8, #0
 800f01c:	d023      	beq.n	800f066 <__d2b+0x82>
 800f01e:	4668      	mov	r0, sp
 800f020:	9300      	str	r3, [sp, #0]
 800f022:	f7ff fd7c 	bl	800eb1e <__lo0bits>
 800f026:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f02a:	b1d0      	cbz	r0, 800f062 <__d2b+0x7e>
 800f02c:	f1c0 0320 	rsb	r3, r0, #32
 800f030:	fa02 f303 	lsl.w	r3, r2, r3
 800f034:	430b      	orrs	r3, r1
 800f036:	40c2      	lsrs	r2, r0
 800f038:	6163      	str	r3, [r4, #20]
 800f03a:	9201      	str	r2, [sp, #4]
 800f03c:	9b01      	ldr	r3, [sp, #4]
 800f03e:	61a3      	str	r3, [r4, #24]
 800f040:	2b00      	cmp	r3, #0
 800f042:	bf0c      	ite	eq
 800f044:	2201      	moveq	r2, #1
 800f046:	2202      	movne	r2, #2
 800f048:	6122      	str	r2, [r4, #16]
 800f04a:	b1a5      	cbz	r5, 800f076 <__d2b+0x92>
 800f04c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f050:	4405      	add	r5, r0
 800f052:	603d      	str	r5, [r7, #0]
 800f054:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f058:	6030      	str	r0, [r6, #0]
 800f05a:	4620      	mov	r0, r4
 800f05c:	b003      	add	sp, #12
 800f05e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f062:	6161      	str	r1, [r4, #20]
 800f064:	e7ea      	b.n	800f03c <__d2b+0x58>
 800f066:	a801      	add	r0, sp, #4
 800f068:	f7ff fd59 	bl	800eb1e <__lo0bits>
 800f06c:	9b01      	ldr	r3, [sp, #4]
 800f06e:	6163      	str	r3, [r4, #20]
 800f070:	3020      	adds	r0, #32
 800f072:	2201      	movs	r2, #1
 800f074:	e7e8      	b.n	800f048 <__d2b+0x64>
 800f076:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f07a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f07e:	6038      	str	r0, [r7, #0]
 800f080:	6918      	ldr	r0, [r3, #16]
 800f082:	f7ff fd2d 	bl	800eae0 <__hi0bits>
 800f086:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f08a:	e7e5      	b.n	800f058 <__d2b+0x74>
 800f08c:	0800fc28 	.word	0x0800fc28
 800f090:	0800fc39 	.word	0x0800fc39

0800f094 <__sflush_r>:
 800f094:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f09c:	0716      	lsls	r6, r2, #28
 800f09e:	4605      	mov	r5, r0
 800f0a0:	460c      	mov	r4, r1
 800f0a2:	d454      	bmi.n	800f14e <__sflush_r+0xba>
 800f0a4:	684b      	ldr	r3, [r1, #4]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	dc02      	bgt.n	800f0b0 <__sflush_r+0x1c>
 800f0aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	dd48      	ble.n	800f142 <__sflush_r+0xae>
 800f0b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f0b2:	2e00      	cmp	r6, #0
 800f0b4:	d045      	beq.n	800f142 <__sflush_r+0xae>
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f0bc:	682f      	ldr	r7, [r5, #0]
 800f0be:	6a21      	ldr	r1, [r4, #32]
 800f0c0:	602b      	str	r3, [r5, #0]
 800f0c2:	d030      	beq.n	800f126 <__sflush_r+0x92>
 800f0c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f0c6:	89a3      	ldrh	r3, [r4, #12]
 800f0c8:	0759      	lsls	r1, r3, #29
 800f0ca:	d505      	bpl.n	800f0d8 <__sflush_r+0x44>
 800f0cc:	6863      	ldr	r3, [r4, #4]
 800f0ce:	1ad2      	subs	r2, r2, r3
 800f0d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f0d2:	b10b      	cbz	r3, 800f0d8 <__sflush_r+0x44>
 800f0d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f0d6:	1ad2      	subs	r2, r2, r3
 800f0d8:	2300      	movs	r3, #0
 800f0da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f0dc:	6a21      	ldr	r1, [r4, #32]
 800f0de:	4628      	mov	r0, r5
 800f0e0:	47b0      	blx	r6
 800f0e2:	1c43      	adds	r3, r0, #1
 800f0e4:	89a3      	ldrh	r3, [r4, #12]
 800f0e6:	d106      	bne.n	800f0f6 <__sflush_r+0x62>
 800f0e8:	6829      	ldr	r1, [r5, #0]
 800f0ea:	291d      	cmp	r1, #29
 800f0ec:	d82b      	bhi.n	800f146 <__sflush_r+0xb2>
 800f0ee:	4a2a      	ldr	r2, [pc, #168]	@ (800f198 <__sflush_r+0x104>)
 800f0f0:	410a      	asrs	r2, r1
 800f0f2:	07d6      	lsls	r6, r2, #31
 800f0f4:	d427      	bmi.n	800f146 <__sflush_r+0xb2>
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	6062      	str	r2, [r4, #4]
 800f0fa:	04d9      	lsls	r1, r3, #19
 800f0fc:	6922      	ldr	r2, [r4, #16]
 800f0fe:	6022      	str	r2, [r4, #0]
 800f100:	d504      	bpl.n	800f10c <__sflush_r+0x78>
 800f102:	1c42      	adds	r2, r0, #1
 800f104:	d101      	bne.n	800f10a <__sflush_r+0x76>
 800f106:	682b      	ldr	r3, [r5, #0]
 800f108:	b903      	cbnz	r3, 800f10c <__sflush_r+0x78>
 800f10a:	6560      	str	r0, [r4, #84]	@ 0x54
 800f10c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f10e:	602f      	str	r7, [r5, #0]
 800f110:	b1b9      	cbz	r1, 800f142 <__sflush_r+0xae>
 800f112:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f116:	4299      	cmp	r1, r3
 800f118:	d002      	beq.n	800f120 <__sflush_r+0x8c>
 800f11a:	4628      	mov	r0, r5
 800f11c:	f7ff fb38 	bl	800e790 <_free_r>
 800f120:	2300      	movs	r3, #0
 800f122:	6363      	str	r3, [r4, #52]	@ 0x34
 800f124:	e00d      	b.n	800f142 <__sflush_r+0xae>
 800f126:	2301      	movs	r3, #1
 800f128:	4628      	mov	r0, r5
 800f12a:	47b0      	blx	r6
 800f12c:	4602      	mov	r2, r0
 800f12e:	1c50      	adds	r0, r2, #1
 800f130:	d1c9      	bne.n	800f0c6 <__sflush_r+0x32>
 800f132:	682b      	ldr	r3, [r5, #0]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d0c6      	beq.n	800f0c6 <__sflush_r+0x32>
 800f138:	2b1d      	cmp	r3, #29
 800f13a:	d001      	beq.n	800f140 <__sflush_r+0xac>
 800f13c:	2b16      	cmp	r3, #22
 800f13e:	d11e      	bne.n	800f17e <__sflush_r+0xea>
 800f140:	602f      	str	r7, [r5, #0]
 800f142:	2000      	movs	r0, #0
 800f144:	e022      	b.n	800f18c <__sflush_r+0xf8>
 800f146:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f14a:	b21b      	sxth	r3, r3
 800f14c:	e01b      	b.n	800f186 <__sflush_r+0xf2>
 800f14e:	690f      	ldr	r7, [r1, #16]
 800f150:	2f00      	cmp	r7, #0
 800f152:	d0f6      	beq.n	800f142 <__sflush_r+0xae>
 800f154:	0793      	lsls	r3, r2, #30
 800f156:	680e      	ldr	r6, [r1, #0]
 800f158:	bf08      	it	eq
 800f15a:	694b      	ldreq	r3, [r1, #20]
 800f15c:	600f      	str	r7, [r1, #0]
 800f15e:	bf18      	it	ne
 800f160:	2300      	movne	r3, #0
 800f162:	eba6 0807 	sub.w	r8, r6, r7
 800f166:	608b      	str	r3, [r1, #8]
 800f168:	f1b8 0f00 	cmp.w	r8, #0
 800f16c:	dde9      	ble.n	800f142 <__sflush_r+0xae>
 800f16e:	6a21      	ldr	r1, [r4, #32]
 800f170:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f172:	4643      	mov	r3, r8
 800f174:	463a      	mov	r2, r7
 800f176:	4628      	mov	r0, r5
 800f178:	47b0      	blx	r6
 800f17a:	2800      	cmp	r0, #0
 800f17c:	dc08      	bgt.n	800f190 <__sflush_r+0xfc>
 800f17e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f182:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f186:	81a3      	strh	r3, [r4, #12]
 800f188:	f04f 30ff 	mov.w	r0, #4294967295
 800f18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f190:	4407      	add	r7, r0
 800f192:	eba8 0800 	sub.w	r8, r8, r0
 800f196:	e7e7      	b.n	800f168 <__sflush_r+0xd4>
 800f198:	dfbffffe 	.word	0xdfbffffe

0800f19c <_fflush_r>:
 800f19c:	b538      	push	{r3, r4, r5, lr}
 800f19e:	690b      	ldr	r3, [r1, #16]
 800f1a0:	4605      	mov	r5, r0
 800f1a2:	460c      	mov	r4, r1
 800f1a4:	b913      	cbnz	r3, 800f1ac <_fflush_r+0x10>
 800f1a6:	2500      	movs	r5, #0
 800f1a8:	4628      	mov	r0, r5
 800f1aa:	bd38      	pop	{r3, r4, r5, pc}
 800f1ac:	b118      	cbz	r0, 800f1b6 <_fflush_r+0x1a>
 800f1ae:	6a03      	ldr	r3, [r0, #32]
 800f1b0:	b90b      	cbnz	r3, 800f1b6 <_fflush_r+0x1a>
 800f1b2:	f7fe faa5 	bl	800d700 <__sinit>
 800f1b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d0f3      	beq.n	800f1a6 <_fflush_r+0xa>
 800f1be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f1c0:	07d0      	lsls	r0, r2, #31
 800f1c2:	d404      	bmi.n	800f1ce <_fflush_r+0x32>
 800f1c4:	0599      	lsls	r1, r3, #22
 800f1c6:	d402      	bmi.n	800f1ce <_fflush_r+0x32>
 800f1c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f1ca:	f7fe fc82 	bl	800dad2 <__retarget_lock_acquire_recursive>
 800f1ce:	4628      	mov	r0, r5
 800f1d0:	4621      	mov	r1, r4
 800f1d2:	f7ff ff5f 	bl	800f094 <__sflush_r>
 800f1d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f1d8:	07da      	lsls	r2, r3, #31
 800f1da:	4605      	mov	r5, r0
 800f1dc:	d4e4      	bmi.n	800f1a8 <_fflush_r+0xc>
 800f1de:	89a3      	ldrh	r3, [r4, #12]
 800f1e0:	059b      	lsls	r3, r3, #22
 800f1e2:	d4e1      	bmi.n	800f1a8 <_fflush_r+0xc>
 800f1e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f1e6:	f7fe fc75 	bl	800dad4 <__retarget_lock_release_recursive>
 800f1ea:	e7dd      	b.n	800f1a8 <_fflush_r+0xc>

0800f1ec <__swhatbuf_r>:
 800f1ec:	b570      	push	{r4, r5, r6, lr}
 800f1ee:	460c      	mov	r4, r1
 800f1f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1f4:	2900      	cmp	r1, #0
 800f1f6:	b096      	sub	sp, #88	@ 0x58
 800f1f8:	4615      	mov	r5, r2
 800f1fa:	461e      	mov	r6, r3
 800f1fc:	da0d      	bge.n	800f21a <__swhatbuf_r+0x2e>
 800f1fe:	89a3      	ldrh	r3, [r4, #12]
 800f200:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f204:	f04f 0100 	mov.w	r1, #0
 800f208:	bf14      	ite	ne
 800f20a:	2340      	movne	r3, #64	@ 0x40
 800f20c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f210:	2000      	movs	r0, #0
 800f212:	6031      	str	r1, [r6, #0]
 800f214:	602b      	str	r3, [r5, #0]
 800f216:	b016      	add	sp, #88	@ 0x58
 800f218:	bd70      	pop	{r4, r5, r6, pc}
 800f21a:	466a      	mov	r2, sp
 800f21c:	f000 f848 	bl	800f2b0 <_fstat_r>
 800f220:	2800      	cmp	r0, #0
 800f222:	dbec      	blt.n	800f1fe <__swhatbuf_r+0x12>
 800f224:	9901      	ldr	r1, [sp, #4]
 800f226:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f22a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f22e:	4259      	negs	r1, r3
 800f230:	4159      	adcs	r1, r3
 800f232:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f236:	e7eb      	b.n	800f210 <__swhatbuf_r+0x24>

0800f238 <__smakebuf_r>:
 800f238:	898b      	ldrh	r3, [r1, #12]
 800f23a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f23c:	079d      	lsls	r5, r3, #30
 800f23e:	4606      	mov	r6, r0
 800f240:	460c      	mov	r4, r1
 800f242:	d507      	bpl.n	800f254 <__smakebuf_r+0x1c>
 800f244:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f248:	6023      	str	r3, [r4, #0]
 800f24a:	6123      	str	r3, [r4, #16]
 800f24c:	2301      	movs	r3, #1
 800f24e:	6163      	str	r3, [r4, #20]
 800f250:	b003      	add	sp, #12
 800f252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f254:	ab01      	add	r3, sp, #4
 800f256:	466a      	mov	r2, sp
 800f258:	f7ff ffc8 	bl	800f1ec <__swhatbuf_r>
 800f25c:	9f00      	ldr	r7, [sp, #0]
 800f25e:	4605      	mov	r5, r0
 800f260:	4639      	mov	r1, r7
 800f262:	4630      	mov	r0, r6
 800f264:	f7ff fb08 	bl	800e878 <_malloc_r>
 800f268:	b948      	cbnz	r0, 800f27e <__smakebuf_r+0x46>
 800f26a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f26e:	059a      	lsls	r2, r3, #22
 800f270:	d4ee      	bmi.n	800f250 <__smakebuf_r+0x18>
 800f272:	f023 0303 	bic.w	r3, r3, #3
 800f276:	f043 0302 	orr.w	r3, r3, #2
 800f27a:	81a3      	strh	r3, [r4, #12]
 800f27c:	e7e2      	b.n	800f244 <__smakebuf_r+0xc>
 800f27e:	89a3      	ldrh	r3, [r4, #12]
 800f280:	6020      	str	r0, [r4, #0]
 800f282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f286:	81a3      	strh	r3, [r4, #12]
 800f288:	9b01      	ldr	r3, [sp, #4]
 800f28a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f28e:	b15b      	cbz	r3, 800f2a8 <__smakebuf_r+0x70>
 800f290:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f294:	4630      	mov	r0, r6
 800f296:	f000 f81d 	bl	800f2d4 <_isatty_r>
 800f29a:	b128      	cbz	r0, 800f2a8 <__smakebuf_r+0x70>
 800f29c:	89a3      	ldrh	r3, [r4, #12]
 800f29e:	f023 0303 	bic.w	r3, r3, #3
 800f2a2:	f043 0301 	orr.w	r3, r3, #1
 800f2a6:	81a3      	strh	r3, [r4, #12]
 800f2a8:	89a3      	ldrh	r3, [r4, #12]
 800f2aa:	431d      	orrs	r5, r3
 800f2ac:	81a5      	strh	r5, [r4, #12]
 800f2ae:	e7cf      	b.n	800f250 <__smakebuf_r+0x18>

0800f2b0 <_fstat_r>:
 800f2b0:	b538      	push	{r3, r4, r5, lr}
 800f2b2:	4d07      	ldr	r5, [pc, #28]	@ (800f2d0 <_fstat_r+0x20>)
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	4604      	mov	r4, r0
 800f2b8:	4608      	mov	r0, r1
 800f2ba:	4611      	mov	r1, r2
 800f2bc:	602b      	str	r3, [r5, #0]
 800f2be:	f7f3 fceb 	bl	8002c98 <_fstat>
 800f2c2:	1c43      	adds	r3, r0, #1
 800f2c4:	d102      	bne.n	800f2cc <_fstat_r+0x1c>
 800f2c6:	682b      	ldr	r3, [r5, #0]
 800f2c8:	b103      	cbz	r3, 800f2cc <_fstat_r+0x1c>
 800f2ca:	6023      	str	r3, [r4, #0]
 800f2cc:	bd38      	pop	{r3, r4, r5, pc}
 800f2ce:	bf00      	nop
 800f2d0:	2000117c 	.word	0x2000117c

0800f2d4 <_isatty_r>:
 800f2d4:	b538      	push	{r3, r4, r5, lr}
 800f2d6:	4d06      	ldr	r5, [pc, #24]	@ (800f2f0 <_isatty_r+0x1c>)
 800f2d8:	2300      	movs	r3, #0
 800f2da:	4604      	mov	r4, r0
 800f2dc:	4608      	mov	r0, r1
 800f2de:	602b      	str	r3, [r5, #0]
 800f2e0:	f7f3 fcea 	bl	8002cb8 <_isatty>
 800f2e4:	1c43      	adds	r3, r0, #1
 800f2e6:	d102      	bne.n	800f2ee <_isatty_r+0x1a>
 800f2e8:	682b      	ldr	r3, [r5, #0]
 800f2ea:	b103      	cbz	r3, 800f2ee <_isatty_r+0x1a>
 800f2ec:	6023      	str	r3, [r4, #0]
 800f2ee:	bd38      	pop	{r3, r4, r5, pc}
 800f2f0:	2000117c 	.word	0x2000117c

0800f2f4 <_sbrk_r>:
 800f2f4:	b538      	push	{r3, r4, r5, lr}
 800f2f6:	4d06      	ldr	r5, [pc, #24]	@ (800f310 <_sbrk_r+0x1c>)
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	4604      	mov	r4, r0
 800f2fc:	4608      	mov	r0, r1
 800f2fe:	602b      	str	r3, [r5, #0]
 800f300:	f7f3 fcf2 	bl	8002ce8 <_sbrk>
 800f304:	1c43      	adds	r3, r0, #1
 800f306:	d102      	bne.n	800f30e <_sbrk_r+0x1a>
 800f308:	682b      	ldr	r3, [r5, #0]
 800f30a:	b103      	cbz	r3, 800f30e <_sbrk_r+0x1a>
 800f30c:	6023      	str	r3, [r4, #0]
 800f30e:	bd38      	pop	{r3, r4, r5, pc}
 800f310:	2000117c 	.word	0x2000117c

0800f314 <__assert_func>:
 800f314:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f316:	4614      	mov	r4, r2
 800f318:	461a      	mov	r2, r3
 800f31a:	4b09      	ldr	r3, [pc, #36]	@ (800f340 <__assert_func+0x2c>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	4605      	mov	r5, r0
 800f320:	68d8      	ldr	r0, [r3, #12]
 800f322:	b954      	cbnz	r4, 800f33a <__assert_func+0x26>
 800f324:	4b07      	ldr	r3, [pc, #28]	@ (800f344 <__assert_func+0x30>)
 800f326:	461c      	mov	r4, r3
 800f328:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f32c:	9100      	str	r1, [sp, #0]
 800f32e:	462b      	mov	r3, r5
 800f330:	4905      	ldr	r1, [pc, #20]	@ (800f348 <__assert_func+0x34>)
 800f332:	f000 f841 	bl	800f3b8 <fiprintf>
 800f336:	f000 f851 	bl	800f3dc <abort>
 800f33a:	4b04      	ldr	r3, [pc, #16]	@ (800f34c <__assert_func+0x38>)
 800f33c:	e7f4      	b.n	800f328 <__assert_func+0x14>
 800f33e:	bf00      	nop
 800f340:	20000128 	.word	0x20000128
 800f344:	0800fdd5 	.word	0x0800fdd5
 800f348:	0800fda7 	.word	0x0800fda7
 800f34c:	0800fd9a 	.word	0x0800fd9a

0800f350 <_calloc_r>:
 800f350:	b570      	push	{r4, r5, r6, lr}
 800f352:	fba1 5402 	umull	r5, r4, r1, r2
 800f356:	b93c      	cbnz	r4, 800f368 <_calloc_r+0x18>
 800f358:	4629      	mov	r1, r5
 800f35a:	f7ff fa8d 	bl	800e878 <_malloc_r>
 800f35e:	4606      	mov	r6, r0
 800f360:	b928      	cbnz	r0, 800f36e <_calloc_r+0x1e>
 800f362:	2600      	movs	r6, #0
 800f364:	4630      	mov	r0, r6
 800f366:	bd70      	pop	{r4, r5, r6, pc}
 800f368:	220c      	movs	r2, #12
 800f36a:	6002      	str	r2, [r0, #0]
 800f36c:	e7f9      	b.n	800f362 <_calloc_r+0x12>
 800f36e:	462a      	mov	r2, r5
 800f370:	4621      	mov	r1, r4
 800f372:	f7fe fb31 	bl	800d9d8 <memset>
 800f376:	e7f5      	b.n	800f364 <_calloc_r+0x14>

0800f378 <__ascii_mbtowc>:
 800f378:	b082      	sub	sp, #8
 800f37a:	b901      	cbnz	r1, 800f37e <__ascii_mbtowc+0x6>
 800f37c:	a901      	add	r1, sp, #4
 800f37e:	b142      	cbz	r2, 800f392 <__ascii_mbtowc+0x1a>
 800f380:	b14b      	cbz	r3, 800f396 <__ascii_mbtowc+0x1e>
 800f382:	7813      	ldrb	r3, [r2, #0]
 800f384:	600b      	str	r3, [r1, #0]
 800f386:	7812      	ldrb	r2, [r2, #0]
 800f388:	1e10      	subs	r0, r2, #0
 800f38a:	bf18      	it	ne
 800f38c:	2001      	movne	r0, #1
 800f38e:	b002      	add	sp, #8
 800f390:	4770      	bx	lr
 800f392:	4610      	mov	r0, r2
 800f394:	e7fb      	b.n	800f38e <__ascii_mbtowc+0x16>
 800f396:	f06f 0001 	mvn.w	r0, #1
 800f39a:	e7f8      	b.n	800f38e <__ascii_mbtowc+0x16>

0800f39c <__ascii_wctomb>:
 800f39c:	4603      	mov	r3, r0
 800f39e:	4608      	mov	r0, r1
 800f3a0:	b141      	cbz	r1, 800f3b4 <__ascii_wctomb+0x18>
 800f3a2:	2aff      	cmp	r2, #255	@ 0xff
 800f3a4:	d904      	bls.n	800f3b0 <__ascii_wctomb+0x14>
 800f3a6:	228a      	movs	r2, #138	@ 0x8a
 800f3a8:	601a      	str	r2, [r3, #0]
 800f3aa:	f04f 30ff 	mov.w	r0, #4294967295
 800f3ae:	4770      	bx	lr
 800f3b0:	700a      	strb	r2, [r1, #0]
 800f3b2:	2001      	movs	r0, #1
 800f3b4:	4770      	bx	lr
	...

0800f3b8 <fiprintf>:
 800f3b8:	b40e      	push	{r1, r2, r3}
 800f3ba:	b503      	push	{r0, r1, lr}
 800f3bc:	4601      	mov	r1, r0
 800f3be:	ab03      	add	r3, sp, #12
 800f3c0:	4805      	ldr	r0, [pc, #20]	@ (800f3d8 <fiprintf+0x20>)
 800f3c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3c6:	6800      	ldr	r0, [r0, #0]
 800f3c8:	9301      	str	r3, [sp, #4]
 800f3ca:	f000 f837 	bl	800f43c <_vfiprintf_r>
 800f3ce:	b002      	add	sp, #8
 800f3d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3d4:	b003      	add	sp, #12
 800f3d6:	4770      	bx	lr
 800f3d8:	20000128 	.word	0x20000128

0800f3dc <abort>:
 800f3dc:	b508      	push	{r3, lr}
 800f3de:	2006      	movs	r0, #6
 800f3e0:	f000 f96c 	bl	800f6bc <raise>
 800f3e4:	2001      	movs	r0, #1
 800f3e6:	f7f3 fc07 	bl	8002bf8 <_exit>

0800f3ea <__sfputc_r>:
 800f3ea:	6893      	ldr	r3, [r2, #8]
 800f3ec:	3b01      	subs	r3, #1
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	b410      	push	{r4}
 800f3f2:	6093      	str	r3, [r2, #8]
 800f3f4:	da08      	bge.n	800f408 <__sfputc_r+0x1e>
 800f3f6:	6994      	ldr	r4, [r2, #24]
 800f3f8:	42a3      	cmp	r3, r4
 800f3fa:	db01      	blt.n	800f400 <__sfputc_r+0x16>
 800f3fc:	290a      	cmp	r1, #10
 800f3fe:	d103      	bne.n	800f408 <__sfputc_r+0x1e>
 800f400:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f404:	f7fe ba53 	b.w	800d8ae <__swbuf_r>
 800f408:	6813      	ldr	r3, [r2, #0]
 800f40a:	1c58      	adds	r0, r3, #1
 800f40c:	6010      	str	r0, [r2, #0]
 800f40e:	7019      	strb	r1, [r3, #0]
 800f410:	4608      	mov	r0, r1
 800f412:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f416:	4770      	bx	lr

0800f418 <__sfputs_r>:
 800f418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f41a:	4606      	mov	r6, r0
 800f41c:	460f      	mov	r7, r1
 800f41e:	4614      	mov	r4, r2
 800f420:	18d5      	adds	r5, r2, r3
 800f422:	42ac      	cmp	r4, r5
 800f424:	d101      	bne.n	800f42a <__sfputs_r+0x12>
 800f426:	2000      	movs	r0, #0
 800f428:	e007      	b.n	800f43a <__sfputs_r+0x22>
 800f42a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f42e:	463a      	mov	r2, r7
 800f430:	4630      	mov	r0, r6
 800f432:	f7ff ffda 	bl	800f3ea <__sfputc_r>
 800f436:	1c43      	adds	r3, r0, #1
 800f438:	d1f3      	bne.n	800f422 <__sfputs_r+0xa>
 800f43a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f43c <_vfiprintf_r>:
 800f43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f440:	460d      	mov	r5, r1
 800f442:	b09d      	sub	sp, #116	@ 0x74
 800f444:	4614      	mov	r4, r2
 800f446:	4698      	mov	r8, r3
 800f448:	4606      	mov	r6, r0
 800f44a:	b118      	cbz	r0, 800f454 <_vfiprintf_r+0x18>
 800f44c:	6a03      	ldr	r3, [r0, #32]
 800f44e:	b90b      	cbnz	r3, 800f454 <_vfiprintf_r+0x18>
 800f450:	f7fe f956 	bl	800d700 <__sinit>
 800f454:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f456:	07d9      	lsls	r1, r3, #31
 800f458:	d405      	bmi.n	800f466 <_vfiprintf_r+0x2a>
 800f45a:	89ab      	ldrh	r3, [r5, #12]
 800f45c:	059a      	lsls	r2, r3, #22
 800f45e:	d402      	bmi.n	800f466 <_vfiprintf_r+0x2a>
 800f460:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f462:	f7fe fb36 	bl	800dad2 <__retarget_lock_acquire_recursive>
 800f466:	89ab      	ldrh	r3, [r5, #12]
 800f468:	071b      	lsls	r3, r3, #28
 800f46a:	d501      	bpl.n	800f470 <_vfiprintf_r+0x34>
 800f46c:	692b      	ldr	r3, [r5, #16]
 800f46e:	b99b      	cbnz	r3, 800f498 <_vfiprintf_r+0x5c>
 800f470:	4629      	mov	r1, r5
 800f472:	4630      	mov	r0, r6
 800f474:	f7fe fa5a 	bl	800d92c <__swsetup_r>
 800f478:	b170      	cbz	r0, 800f498 <_vfiprintf_r+0x5c>
 800f47a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f47c:	07dc      	lsls	r4, r3, #31
 800f47e:	d504      	bpl.n	800f48a <_vfiprintf_r+0x4e>
 800f480:	f04f 30ff 	mov.w	r0, #4294967295
 800f484:	b01d      	add	sp, #116	@ 0x74
 800f486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f48a:	89ab      	ldrh	r3, [r5, #12]
 800f48c:	0598      	lsls	r0, r3, #22
 800f48e:	d4f7      	bmi.n	800f480 <_vfiprintf_r+0x44>
 800f490:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f492:	f7fe fb1f 	bl	800dad4 <__retarget_lock_release_recursive>
 800f496:	e7f3      	b.n	800f480 <_vfiprintf_r+0x44>
 800f498:	2300      	movs	r3, #0
 800f49a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f49c:	2320      	movs	r3, #32
 800f49e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f4a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f4a6:	2330      	movs	r3, #48	@ 0x30
 800f4a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f658 <_vfiprintf_r+0x21c>
 800f4ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f4b0:	f04f 0901 	mov.w	r9, #1
 800f4b4:	4623      	mov	r3, r4
 800f4b6:	469a      	mov	sl, r3
 800f4b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4bc:	b10a      	cbz	r2, 800f4c2 <_vfiprintf_r+0x86>
 800f4be:	2a25      	cmp	r2, #37	@ 0x25
 800f4c0:	d1f9      	bne.n	800f4b6 <_vfiprintf_r+0x7a>
 800f4c2:	ebba 0b04 	subs.w	fp, sl, r4
 800f4c6:	d00b      	beq.n	800f4e0 <_vfiprintf_r+0xa4>
 800f4c8:	465b      	mov	r3, fp
 800f4ca:	4622      	mov	r2, r4
 800f4cc:	4629      	mov	r1, r5
 800f4ce:	4630      	mov	r0, r6
 800f4d0:	f7ff ffa2 	bl	800f418 <__sfputs_r>
 800f4d4:	3001      	adds	r0, #1
 800f4d6:	f000 80a7 	beq.w	800f628 <_vfiprintf_r+0x1ec>
 800f4da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4dc:	445a      	add	r2, fp
 800f4de:	9209      	str	r2, [sp, #36]	@ 0x24
 800f4e0:	f89a 3000 	ldrb.w	r3, [sl]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	f000 809f 	beq.w	800f628 <_vfiprintf_r+0x1ec>
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	f04f 32ff 	mov.w	r2, #4294967295
 800f4f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4f4:	f10a 0a01 	add.w	sl, sl, #1
 800f4f8:	9304      	str	r3, [sp, #16]
 800f4fa:	9307      	str	r3, [sp, #28]
 800f4fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f500:	931a      	str	r3, [sp, #104]	@ 0x68
 800f502:	4654      	mov	r4, sl
 800f504:	2205      	movs	r2, #5
 800f506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f50a:	4853      	ldr	r0, [pc, #332]	@ (800f658 <_vfiprintf_r+0x21c>)
 800f50c:	f7f0 fe68 	bl	80001e0 <memchr>
 800f510:	9a04      	ldr	r2, [sp, #16]
 800f512:	b9d8      	cbnz	r0, 800f54c <_vfiprintf_r+0x110>
 800f514:	06d1      	lsls	r1, r2, #27
 800f516:	bf44      	itt	mi
 800f518:	2320      	movmi	r3, #32
 800f51a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f51e:	0713      	lsls	r3, r2, #28
 800f520:	bf44      	itt	mi
 800f522:	232b      	movmi	r3, #43	@ 0x2b
 800f524:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f528:	f89a 3000 	ldrb.w	r3, [sl]
 800f52c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f52e:	d015      	beq.n	800f55c <_vfiprintf_r+0x120>
 800f530:	9a07      	ldr	r2, [sp, #28]
 800f532:	4654      	mov	r4, sl
 800f534:	2000      	movs	r0, #0
 800f536:	f04f 0c0a 	mov.w	ip, #10
 800f53a:	4621      	mov	r1, r4
 800f53c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f540:	3b30      	subs	r3, #48	@ 0x30
 800f542:	2b09      	cmp	r3, #9
 800f544:	d94b      	bls.n	800f5de <_vfiprintf_r+0x1a2>
 800f546:	b1b0      	cbz	r0, 800f576 <_vfiprintf_r+0x13a>
 800f548:	9207      	str	r2, [sp, #28]
 800f54a:	e014      	b.n	800f576 <_vfiprintf_r+0x13a>
 800f54c:	eba0 0308 	sub.w	r3, r0, r8
 800f550:	fa09 f303 	lsl.w	r3, r9, r3
 800f554:	4313      	orrs	r3, r2
 800f556:	9304      	str	r3, [sp, #16]
 800f558:	46a2      	mov	sl, r4
 800f55a:	e7d2      	b.n	800f502 <_vfiprintf_r+0xc6>
 800f55c:	9b03      	ldr	r3, [sp, #12]
 800f55e:	1d19      	adds	r1, r3, #4
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	9103      	str	r1, [sp, #12]
 800f564:	2b00      	cmp	r3, #0
 800f566:	bfbb      	ittet	lt
 800f568:	425b      	neglt	r3, r3
 800f56a:	f042 0202 	orrlt.w	r2, r2, #2
 800f56e:	9307      	strge	r3, [sp, #28]
 800f570:	9307      	strlt	r3, [sp, #28]
 800f572:	bfb8      	it	lt
 800f574:	9204      	strlt	r2, [sp, #16]
 800f576:	7823      	ldrb	r3, [r4, #0]
 800f578:	2b2e      	cmp	r3, #46	@ 0x2e
 800f57a:	d10a      	bne.n	800f592 <_vfiprintf_r+0x156>
 800f57c:	7863      	ldrb	r3, [r4, #1]
 800f57e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f580:	d132      	bne.n	800f5e8 <_vfiprintf_r+0x1ac>
 800f582:	9b03      	ldr	r3, [sp, #12]
 800f584:	1d1a      	adds	r2, r3, #4
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	9203      	str	r2, [sp, #12]
 800f58a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f58e:	3402      	adds	r4, #2
 800f590:	9305      	str	r3, [sp, #20]
 800f592:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f668 <_vfiprintf_r+0x22c>
 800f596:	7821      	ldrb	r1, [r4, #0]
 800f598:	2203      	movs	r2, #3
 800f59a:	4650      	mov	r0, sl
 800f59c:	f7f0 fe20 	bl	80001e0 <memchr>
 800f5a0:	b138      	cbz	r0, 800f5b2 <_vfiprintf_r+0x176>
 800f5a2:	9b04      	ldr	r3, [sp, #16]
 800f5a4:	eba0 000a 	sub.w	r0, r0, sl
 800f5a8:	2240      	movs	r2, #64	@ 0x40
 800f5aa:	4082      	lsls	r2, r0
 800f5ac:	4313      	orrs	r3, r2
 800f5ae:	3401      	adds	r4, #1
 800f5b0:	9304      	str	r3, [sp, #16]
 800f5b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5b6:	4829      	ldr	r0, [pc, #164]	@ (800f65c <_vfiprintf_r+0x220>)
 800f5b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f5bc:	2206      	movs	r2, #6
 800f5be:	f7f0 fe0f 	bl	80001e0 <memchr>
 800f5c2:	2800      	cmp	r0, #0
 800f5c4:	d03f      	beq.n	800f646 <_vfiprintf_r+0x20a>
 800f5c6:	4b26      	ldr	r3, [pc, #152]	@ (800f660 <_vfiprintf_r+0x224>)
 800f5c8:	bb1b      	cbnz	r3, 800f612 <_vfiprintf_r+0x1d6>
 800f5ca:	9b03      	ldr	r3, [sp, #12]
 800f5cc:	3307      	adds	r3, #7
 800f5ce:	f023 0307 	bic.w	r3, r3, #7
 800f5d2:	3308      	adds	r3, #8
 800f5d4:	9303      	str	r3, [sp, #12]
 800f5d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5d8:	443b      	add	r3, r7
 800f5da:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5dc:	e76a      	b.n	800f4b4 <_vfiprintf_r+0x78>
 800f5de:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5e2:	460c      	mov	r4, r1
 800f5e4:	2001      	movs	r0, #1
 800f5e6:	e7a8      	b.n	800f53a <_vfiprintf_r+0xfe>
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	3401      	adds	r4, #1
 800f5ec:	9305      	str	r3, [sp, #20]
 800f5ee:	4619      	mov	r1, r3
 800f5f0:	f04f 0c0a 	mov.w	ip, #10
 800f5f4:	4620      	mov	r0, r4
 800f5f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5fa:	3a30      	subs	r2, #48	@ 0x30
 800f5fc:	2a09      	cmp	r2, #9
 800f5fe:	d903      	bls.n	800f608 <_vfiprintf_r+0x1cc>
 800f600:	2b00      	cmp	r3, #0
 800f602:	d0c6      	beq.n	800f592 <_vfiprintf_r+0x156>
 800f604:	9105      	str	r1, [sp, #20]
 800f606:	e7c4      	b.n	800f592 <_vfiprintf_r+0x156>
 800f608:	fb0c 2101 	mla	r1, ip, r1, r2
 800f60c:	4604      	mov	r4, r0
 800f60e:	2301      	movs	r3, #1
 800f610:	e7f0      	b.n	800f5f4 <_vfiprintf_r+0x1b8>
 800f612:	ab03      	add	r3, sp, #12
 800f614:	9300      	str	r3, [sp, #0]
 800f616:	462a      	mov	r2, r5
 800f618:	4b12      	ldr	r3, [pc, #72]	@ (800f664 <_vfiprintf_r+0x228>)
 800f61a:	a904      	add	r1, sp, #16
 800f61c:	4630      	mov	r0, r6
 800f61e:	f7fd fc2b 	bl	800ce78 <_printf_float>
 800f622:	4607      	mov	r7, r0
 800f624:	1c78      	adds	r0, r7, #1
 800f626:	d1d6      	bne.n	800f5d6 <_vfiprintf_r+0x19a>
 800f628:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f62a:	07d9      	lsls	r1, r3, #31
 800f62c:	d405      	bmi.n	800f63a <_vfiprintf_r+0x1fe>
 800f62e:	89ab      	ldrh	r3, [r5, #12]
 800f630:	059a      	lsls	r2, r3, #22
 800f632:	d402      	bmi.n	800f63a <_vfiprintf_r+0x1fe>
 800f634:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f636:	f7fe fa4d 	bl	800dad4 <__retarget_lock_release_recursive>
 800f63a:	89ab      	ldrh	r3, [r5, #12]
 800f63c:	065b      	lsls	r3, r3, #25
 800f63e:	f53f af1f 	bmi.w	800f480 <_vfiprintf_r+0x44>
 800f642:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f644:	e71e      	b.n	800f484 <_vfiprintf_r+0x48>
 800f646:	ab03      	add	r3, sp, #12
 800f648:	9300      	str	r3, [sp, #0]
 800f64a:	462a      	mov	r2, r5
 800f64c:	4b05      	ldr	r3, [pc, #20]	@ (800f664 <_vfiprintf_r+0x228>)
 800f64e:	a904      	add	r1, sp, #16
 800f650:	4630      	mov	r0, r6
 800f652:	f7fd fea9 	bl	800d3a8 <_printf_i>
 800f656:	e7e4      	b.n	800f622 <_vfiprintf_r+0x1e6>
 800f658:	0800fed7 	.word	0x0800fed7
 800f65c:	0800fee1 	.word	0x0800fee1
 800f660:	0800ce79 	.word	0x0800ce79
 800f664:	0800f419 	.word	0x0800f419
 800f668:	0800fedd 	.word	0x0800fedd

0800f66c <_raise_r>:
 800f66c:	291f      	cmp	r1, #31
 800f66e:	b538      	push	{r3, r4, r5, lr}
 800f670:	4605      	mov	r5, r0
 800f672:	460c      	mov	r4, r1
 800f674:	d904      	bls.n	800f680 <_raise_r+0x14>
 800f676:	2316      	movs	r3, #22
 800f678:	6003      	str	r3, [r0, #0]
 800f67a:	f04f 30ff 	mov.w	r0, #4294967295
 800f67e:	bd38      	pop	{r3, r4, r5, pc}
 800f680:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f682:	b112      	cbz	r2, 800f68a <_raise_r+0x1e>
 800f684:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f688:	b94b      	cbnz	r3, 800f69e <_raise_r+0x32>
 800f68a:	4628      	mov	r0, r5
 800f68c:	f000 f830 	bl	800f6f0 <_getpid_r>
 800f690:	4622      	mov	r2, r4
 800f692:	4601      	mov	r1, r0
 800f694:	4628      	mov	r0, r5
 800f696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f69a:	f000 b817 	b.w	800f6cc <_kill_r>
 800f69e:	2b01      	cmp	r3, #1
 800f6a0:	d00a      	beq.n	800f6b8 <_raise_r+0x4c>
 800f6a2:	1c59      	adds	r1, r3, #1
 800f6a4:	d103      	bne.n	800f6ae <_raise_r+0x42>
 800f6a6:	2316      	movs	r3, #22
 800f6a8:	6003      	str	r3, [r0, #0]
 800f6aa:	2001      	movs	r0, #1
 800f6ac:	e7e7      	b.n	800f67e <_raise_r+0x12>
 800f6ae:	2100      	movs	r1, #0
 800f6b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f6b4:	4620      	mov	r0, r4
 800f6b6:	4798      	blx	r3
 800f6b8:	2000      	movs	r0, #0
 800f6ba:	e7e0      	b.n	800f67e <_raise_r+0x12>

0800f6bc <raise>:
 800f6bc:	4b02      	ldr	r3, [pc, #8]	@ (800f6c8 <raise+0xc>)
 800f6be:	4601      	mov	r1, r0
 800f6c0:	6818      	ldr	r0, [r3, #0]
 800f6c2:	f7ff bfd3 	b.w	800f66c <_raise_r>
 800f6c6:	bf00      	nop
 800f6c8:	20000128 	.word	0x20000128

0800f6cc <_kill_r>:
 800f6cc:	b538      	push	{r3, r4, r5, lr}
 800f6ce:	4d07      	ldr	r5, [pc, #28]	@ (800f6ec <_kill_r+0x20>)
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	4604      	mov	r4, r0
 800f6d4:	4608      	mov	r0, r1
 800f6d6:	4611      	mov	r1, r2
 800f6d8:	602b      	str	r3, [r5, #0]
 800f6da:	f7f3 fa7d 	bl	8002bd8 <_kill>
 800f6de:	1c43      	adds	r3, r0, #1
 800f6e0:	d102      	bne.n	800f6e8 <_kill_r+0x1c>
 800f6e2:	682b      	ldr	r3, [r5, #0]
 800f6e4:	b103      	cbz	r3, 800f6e8 <_kill_r+0x1c>
 800f6e6:	6023      	str	r3, [r4, #0]
 800f6e8:	bd38      	pop	{r3, r4, r5, pc}
 800f6ea:	bf00      	nop
 800f6ec:	2000117c 	.word	0x2000117c

0800f6f0 <_getpid_r>:
 800f6f0:	f7f3 ba6a 	b.w	8002bc8 <_getpid>

0800f6f4 <_init>:
 800f6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6f6:	bf00      	nop
 800f6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6fa:	bc08      	pop	{r3}
 800f6fc:	469e      	mov	lr, r3
 800f6fe:	4770      	bx	lr

0800f700 <_fini>:
 800f700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f702:	bf00      	nop
 800f704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f706:	bc08      	pop	{r3}
 800f708:	469e      	mov	lr, r3
 800f70a:	4770      	bx	lr
