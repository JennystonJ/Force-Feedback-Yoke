
Force Feedback Yoke.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f4c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  0800f658  0800f658  0001f658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fad4  0800fad4  00020334  2**0
                  CONTENTS
  4 .ARM          00000000  0800fad4  0800fad4  00020334  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fad4  0800fad4  00020334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fad4  0800fad4  0001fad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fad8  0800fad8  0001fad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  0800fadc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020334  2**0
                  CONTENTS
 10 .bss          00000b6c  20000334  20000334  00020334  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ea0  20000ea0  00020334  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020334  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020974  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000492b  00000000  00000000  00040cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a30  00000000  00000000  00045608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001820  00000000  00000000  00047038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000720f  00000000  00000000  00048858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000230a6  00000000  00000000  0004fa67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1c1e  00000000  00000000  00072b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013472b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007d40  00000000  00000000  0013477c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000334 	.word	0x20000334
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f63c 	.word	0x0800f63c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000338 	.word	0x20000338
 80001cc:	0800f63c 	.word	0x0800f63c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <FFBInit>:
 */

#include "force_feedback_controller.h"
#include "utilities.h"

void FFBInit(FFBController_t *ffb) {
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	ffb->constantGain = 0;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f04f 0200 	mov.w	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
	ffb->periodicGain = 0;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f04f 0200 	mov.w	r2, #0
 8000bbe:	60da      	str	r2, [r3, #12]
	ffb->springGain = 165;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a0c      	ldr	r2, [pc, #48]	; (8000bf4 <FFBInit+0x4c>)
 8000bc4:	611a      	str	r2, [r3, #16]
	ffb->damperGain = 2;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bcc:	615a      	str	r2, [r3, #20]

	ffb->gain = 1;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000bd4:	605a      	str	r2, [r3, #4]
	ffb->motorKtConstant = 0.0265;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <FFBInit+0x50>)
 8000bda:	601a      	str	r2, [r3, #0]
	ffb->minimumSpringForce = 0.01;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <FFBInit+0x54>)
 8000be0:	619a      	str	r2, [r3, #24]
	ffb->lockAngle = 90;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <FFBInit+0x58>)
 8000be6:	61da      	str	r2, [r3, #28]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	43250000 	.word	0x43250000
 8000bf8:	3cd91687 	.word	0x3cd91687
 8000bfc:	3c23d70a 	.word	0x3c23d70a
 8000c00:	42b40000 	.word	0x42b40000

08000c04 <PIDInit>:

#include "pid.h"

static float Abs(float x);

void PIDInit(PID_t *pid) {
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
//	pid->kP = 292;//350;//250;//180;//35;
//	pid->kI = 100;//20;//60;//20;//20;//3;//7;
//	pid->kD = 0.5;//2.2;

	pid->kP = 200;//250;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <PIDInit+0x38>)
 8000c10:	601a      	str	r2, [r3, #0]
	pid->kI = 400;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <PIDInit+0x3c>)
 8000c16:	605a      	str	r2, [r3, #4]
	pid->kD = 0.8;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <PIDInit+0x40>)
 8000c1c:	609a      	str	r2, [r3, #8]

	pid->integral = 0;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f04f 0200 	mov.w	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
	pid->preError = 0;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f04f 0200 	mov.w	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	43480000 	.word	0x43480000
 8000c40:	43c80000 	.word	0x43c80000
 8000c44:	3f4ccccd 	.word	0x3f4ccccd

08000c48 <ComputePID>:

float ComputePID(PID_t *pid, float setPoint, float actual) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	ed87 0a02 	vstr	s0, [r7, #8]
 8000c54:	edc7 0a01 	vstr	s1, [r7, #4]
	float error = setPoint - actual;
 8000c58:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c64:	edc7 7a06 	vstr	s15, [r7, #24]

	//integrate only if error is large enough
	if(Abs(error) > PID_EPSILON) {
 8000c68:	ed97 0a06 	vldr	s0, [r7, #24]
 8000c6c:	f000 f892 	bl	8000d94 <Abs>
 8000c70:	eef0 7a40 	vmov.f32	s15, s0
 8000c74:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8000d6c <ComputePID+0x124>
 8000c78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c80:	dd0d      	ble.n	8000c9e <ComputePID+0x56>
		pid->integral += error*PID_DT;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	ed93 7a03 	vldr	s14, [r3, #12]
 8000c88:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c8c:	eddf 6a38 	vldr	s13, [pc, #224]	; 8000d70 <ComputePID+0x128>
 8000c90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	edc3 7a03 	vstr	s15, [r3, #12]
	}
	//constrain integral
	if(pid->integral > PID_I_MAX) {
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ca4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8000d74 <ComputePID+0x12c>
 8000ca8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cb0:	dd03      	ble.n	8000cba <ComputePID+0x72>
		pid->integral = PID_I_MAX;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	4a30      	ldr	r2, [pc, #192]	; (8000d78 <ComputePID+0x130>)
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	e00c      	b.n	8000cd4 <ComputePID+0x8c>
	}
	else if(pid->integral < PID_I_MIN) {
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	edd3 7a03 	vldr	s15, [r3, #12]
 8000cc0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000d7c <ComputePID+0x134>
 8000cc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ccc:	d502      	bpl.n	8000cd4 <ComputePID+0x8c>
		pid->integral = PID_I_MIN;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	4a2b      	ldr	r2, [pc, #172]	; (8000d80 <ComputePID+0x138>)
 8000cd2:	60da      	str	r2, [r3, #12]
	}

	float derivative = (error - pid->preError)/PID_DT;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	edd3 7a04 	vldr	s15, [r3, #16]
 8000cda:	ed97 7a06 	vldr	s14, [r7, #24]
 8000cde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ce2:	eddf 6a23 	vldr	s13, [pc, #140]	; 8000d70 <ComputePID+0x128>
 8000ce6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cea:	edc7 7a05 	vstr	s15, [r7, #20]

	float output = pid->kP*error + pid->kI*pid->integral + pid->kD*derivative;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	ed93 7a00 	vldr	s14, [r3]
 8000cf4:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	edd3 6a01 	vldr	s13, [r3, #4]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	edd3 6a02 	vldr	s13, [r3, #8]
 8000d16:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d22:	edc7 7a07 	vstr	s15, [r7, #28]
	//constrain PID output
	if(output > PID_MAX) {
 8000d26:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d2a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000d84 <ComputePID+0x13c>
 8000d2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d36:	dd02      	ble.n	8000d3e <ComputePID+0xf6>
		output = PID_MAX;
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <ComputePID+0x140>)
 8000d3a:	61fb      	str	r3, [r7, #28]
 8000d3c:	e00a      	b.n	8000d54 <ComputePID+0x10c>
	}
	else if(output < PID_MIN) {
 8000d3e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d42:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000d8c <ComputePID+0x144>
 8000d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d4e:	d501      	bpl.n	8000d54 <ComputePID+0x10c>
		output = PID_MIN;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <ComputePID+0x148>)
 8000d52:	61fb      	str	r3, [r7, #28]
	}

	//update previous error for derivative calculation
	pid->preError = error;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	611a      	str	r2, [r3, #16]

	return output;
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	ee07 3a90 	vmov	s15, r3
}
 8000d60:	eeb0 0a67 	vmov.f32	s0, s15
 8000d64:	3720      	adds	r7, #32
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	3f19999a 	.word	0x3f19999a
 8000d70:	3c23d70a 	.word	0x3c23d70a
 8000d74:	447a0000 	.word	0x447a0000
 8000d78:	447a0000 	.word	0x447a0000
 8000d7c:	c47a0000 	.word	0xc47a0000
 8000d80:	c47a0000 	.word	0xc47a0000
 8000d84:	4515f000 	.word	0x4515f000
 8000d88:	4515f000 	.word	0x4515f000
 8000d8c:	c515f000 	.word	0xc515f000
 8000d90:	c515f000 	.word	0xc515f000

08000d94 <Abs>:

static float Abs(float x) {
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x < 0) {
 8000d9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000da2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000daa:	d504      	bpl.n	8000db6 <Abs+0x22>
		return -x;
 8000dac:	edd7 7a01 	vldr	s15, [r7, #4]
 8000db0:	eef1 7a67 	vneg.f32	s15, s15
 8000db4:	e001      	b.n	8000dba <Abs+0x26>
	}
	else{
		return x;
 8000db6:	edd7 7a01 	vldr	s15, [r7, #4]
	}
}
 8000dba:	eeb0 0a67 	vmov.f32	s0, s15
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <RotaryEncInit>:
#include "rotary_encoder.h"
#include "utilities.h"

static float RotaryEncCalcSpeed(RotaryEncoder_t *encoder, float deltaTimeMs);

void RotaryEncInit(RotaryEncoder_t *encoder) {
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	encoder->prevHardCount = 0;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	809a      	strh	r2, [r3, #4]
	encoder->count32 = 0;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
	encoder->speed = 0;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f04f 0200 	mov.w	r2, #0
 8000de2:	60da      	str	r2, [r3, #12]
	encoder->prevSpeedCount = 0;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
	encoder->dtCounter = 0;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
	encoder->prevDt = 0;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	615a      	str	r2, [r3, #20]
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <RotaryEncGetCount>:

void RotaryEncSetCount(RotaryEncoder_t *encoder, int32_t count) {
	encoder->count32 = count;
}

int32_t RotaryEncGetCount(RotaryEncoder_t *encoder) {
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
	return encoder->count32;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <RotaryEncUpdate>:
	return encoder->speed;
}


void RotaryEncUpdate(RotaryEncoder_t *encoder, uint16_t newCount,
		float deltaTimeMs) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	460b      	mov	r3, r1
 8000e26:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e2a:	817b      	strh	r3, [r7, #10]

	//for speed calculation
	int32_t prevCount32 = encoder->count32;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	61fb      	str	r3, [r7, #28]

	//find change in count
	int32_t deltaCount = (int32_t)newCount - encoder->prevHardCount;
 8000e32:	897b      	ldrh	r3, [r7, #10]
 8000e34:	68fa      	ldr	r2, [r7, #12]
 8000e36:	8892      	ldrh	r2, [r2, #4]
 8000e38:	1a9b      	subs	r3, r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]

	//newCount did not wrap around
	if(Abs(deltaCount) < ENC_COUNT_WRAP_THRESHOLD) {
 8000e3c:	69b8      	ldr	r0, [r7, #24]
 8000e3e:	f000 f875 	bl	8000f2c <Abs>
 8000e42:	4603      	mov	r3, r0
 8000e44:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	dc06      	bgt.n	8000e5a <RotaryEncUpdate+0x3e>
		encoder->count32 += deltaCount;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	441a      	add	r2, r3
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	e01d      	b.n	8000e96 <RotaryEncUpdate+0x7a>
	}
	//newCount wrapped around
	else {
		//newCount underflow
		if(encoder->prevHardCount < newCount){
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	889b      	ldrh	r3, [r3, #4]
 8000e5e:	897a      	ldrh	r2, [r7, #10]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d90d      	bls.n	8000e80 <RotaryEncUpdate+0x64>
			encoder->count32 -= (int32_t)0xFFFF + encoder->prevHardCount -
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	889b      	ldrh	r3, [r3, #4]
 8000e6c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000e70:	33ff      	adds	r3, #255	; 0xff
 8000e72:	8979      	ldrh	r1, [r7, #10]
 8000e74:	1a5b      	subs	r3, r3, r1
					newCount + 1;
 8000e76:	3301      	adds	r3, #1
			encoder->count32 -= (int32_t)0xFFFF + encoder->prevHardCount -
 8000e78:	1ad2      	subs	r2, r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	e00a      	b.n	8000e96 <RotaryEncUpdate+0x7a>
		}
		//newCount overflow
		else {
			encoder->count32 += (int32_t)0xFFFF - encoder->prevHardCount + 1 +
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	889b      	ldrh	r3, [r3, #4]
 8000e88:	f5c3 3180 	rsb	r1, r3, #65536	; 0x10000
 8000e8c:	897b      	ldrh	r3, [r7, #10]
 8000e8e:	440b      	add	r3, r1
 8000e90:	441a      	add	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	601a      	str	r2, [r3, #0]

	//TODO: switch to UnwrapAtThreshold16 function
//	encoder->count32 += UnwrapAtThreshold16(newCount, encoder->prevHardCount,
//			ENC_COUNT_WRAP_THRESHOLD);

	int32_t speedDeltaCount = encoder->count32 - encoder->prevSpeedCount;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	617b      	str	r3, [r7, #20]
	encoder->dtCounter += ENC_UPDATE_TIME_STEP;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	691b      	ldr	r3, [r3, #16]
 8000ea6:	1d5a      	adds	r2, r3, #5
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
	if(speedDeltaCount >= ENC_UPDATE_SPEED_MIN_COUNT_DELTA &&
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	dd23      	ble.n	8000efa <RotaryEncUpdate+0xde>
			encoder->dtCounter >=
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	691b      	ldr	r3, [r3, #16]
	if(speedDeltaCount >= ENC_UPDATE_SPEED_MIN_COUNT_DELTA &&
 8000eb6:	2b7c      	cmp	r3, #124	; 0x7c
 8000eb8:	d91f      	bls.n	8000efa <RotaryEncUpdate+0xde>
			ENC_UPDATE_TIME_STEP*ENC_UPDATE_SPEED_SAMPLES) {

		//calculate and update speed
		encoder->speed = speedDeltaCount /
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	ee07 3a90 	vmov	s15, r3
 8000ec0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
				(encoder->dtCounter * ENC_UPDATE_MS_SCALE);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	691b      	ldr	r3, [r3, #16]
 8000ec8:	ee07 3a90 	vmov	s15, r3
 8000ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ed0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000f28 <RotaryEncUpdate+0x10c>
 8000ed4:	ee27 7a87 	vmul.f32	s14, s15, s14
		encoder->speed = speedDeltaCount /
 8000ed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	edc3 7a03 	vstr	s15, [r3, #12]
		encoder->prevDt = encoder->dtCounter;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	691a      	ldr	r2, [r3, #16]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	615a      	str	r2, [r3, #20]
		encoder->dtCounter = 0;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
		encoder->prevSpeedCount = encoder->count32;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	e00f      	b.n	8000f1a <RotaryEncUpdate+0xfe>
	}
	else if(encoder->dtCounter >= 500) {
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f02:	d30a      	bcc.n	8000f1a <RotaryEncUpdate+0xfe>
		encoder->speed = 0;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
		encoder->prevSpeedCount = encoder->count32;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	609a      	str	r2, [r3, #8]
		encoder->dtCounter = 0;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
//	}



	//update previous hardware count
	encoder->prevHardCount = newCount;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	897a      	ldrh	r2, [r7, #10]
 8000f1e:	809a      	strh	r2, [r3, #4]
}
 8000f20:	bf00      	nop
 8000f22:	3720      	adds	r7, #32
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	3dcccccd 	.word	0x3dcccccd

08000f2c <Abs>:
			return 0xFFFF - (int32_t)currentCount + newCount + 1;
		}
	}
}

int32_t Abs(int32_t x) {
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	return x > 0 ? x : -x;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	bfb8      	it	lt
 8000f3a:	425b      	neglt	r3, r3
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f50:	1d39      	adds	r1, r7, #4
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	2201      	movs	r2, #1
 8000f58:	4803      	ldr	r0, [pc, #12]	; (8000f68 <__io_putchar+0x20>)
 8000f5a:	f006 ff45 	bl	8007de8 <HAL_UART_Transmit>
  return ch;
 8000f5e:	687b      	ldr	r3, [r7, #4]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000538 	.word	0x20000538

08000f6c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	if(htim == &htim6) {
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d10a      	bne.n	8000f92 <HAL_TIM_PeriodElapsedCallback+0x26>
		RotaryEncUpdate(&encoder, __HAL_TIM_GET_COUNTER(&htim4), 0.5);
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480a      	ldr	r0, [pc, #40]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000f8c:	f7ff ff46 	bl	8000e1c <RotaryEncUpdate>
	}
	else if(htim == &htim7) {
		MotorControllerUpdate(&controller, 2);
		//testCurrent = MotorControllerGetCurrent(&controller);
	}
}
 8000f90:	e008      	b.n	8000fa4 <HAL_TIM_PeriodElapsedCallback+0x38>
	else if(htim == &htim7) {
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a08      	ldr	r2, [pc, #32]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d104      	bne.n	8000fa4 <HAL_TIM_PeriodElapsedCallback+0x38>
		MotorControllerUpdate(&controller, 2);
 8000f9a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000f9e:	4807      	ldr	r0, [pc, #28]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000fa0:	f000 fbc1 	bl	8001726 <MotorControllerUpdate>
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200004a0 	.word	0x200004a0
 8000fb0:	20000454 	.word	0x20000454
 8000fb4:	200005c0 	.word	0x200005c0
 8000fb8:	200004ec 	.word	0x200004ec
 8000fbc:	2000064c 	.word	0x2000064c

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b094      	sub	sp, #80	; 0x50
 8000fc4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc6:	f001 f9f7 	bl	80023b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fca:	f000 f8a1 	bl	8001110 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fce:	f000 fb03 	bl	80015d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fd2:	f000 f903 	bl	80011dc <MX_I2C1_Init>
  MX_SPI1_Init();
 8000fd6:	f000 f93f 	bl	8001258 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000fda:	f000 fa0b 	bl	80013f4 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000fde:	f000 facb 	bl	8001578 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000fe2:	f00b f99f 	bl	800c324 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000fe6:	f000 f975 	bl	80012d4 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000fea:	f000 fa59 	bl	80014a0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000fee:	f000 fa8d 	bl	800150c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  GameHID_t gameHID = {
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	873b      	strh	r3, [r7, #56]	; 0x38
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		  .joyX = 0,
		  .joyY = 0,
		  .joyB1 = 0
  };

  PIDInit(&positionPid);
 8001000:	4836      	ldr	r0, [pc, #216]	; (80010dc <main+0x11c>)
 8001002:	f7ff fdff 	bl	8000c04 <PIDInit>
  RotaryEncInit(&encoder);
 8001006:	4836      	ldr	r0, [pc, #216]	; (80010e0 <main+0x120>)
 8001008:	f7ff fede 	bl	8000dc8 <RotaryEncInit>

  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800100c:	213c      	movs	r1, #60	; 0x3c
 800100e:	4835      	ldr	r0, [pc, #212]	; (80010e4 <main+0x124>)
 8001010:	f005 ff0a 	bl	8006e28 <HAL_TIM_Encoder_Start>

  PIDInit(&currentPid);
 8001014:	4834      	ldr	r0, [pc, #208]	; (80010e8 <main+0x128>)
 8001016:	f7ff fdf5 	bl	8000c04 <PIDInit>
  currentPid.kP = 3580;
 800101a:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <main+0x128>)
 800101c:	4a33      	ldr	r2, [pc, #204]	; (80010ec <main+0x12c>)
 800101e:	601a      	str	r2, [r3, #0]
  currentPid.kI = 0;
 8001020:	4b31      	ldr	r3, [pc, #196]	; (80010e8 <main+0x128>)
 8001022:	f04f 0200 	mov.w	r2, #0
 8001026:	605a      	str	r2, [r3, #4]
  currentPid.kD = 0;
 8001028:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <main+0x128>)
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  CurrentSenseInit(&currentSense, &hi2c1);
 8001030:	492f      	ldr	r1, [pc, #188]	; (80010f0 <main+0x130>)
 8001032:	4830      	ldr	r0, [pc, #192]	; (80010f4 <main+0x134>)
 8001034:	f000 ff30 	bl	8001e98 <CurrentSenseInit>

  GPIO_t gpioMotorReverse;
  GPIOInit(&gpioMotorReverse, MOTOR_FORWARD_GPIO_Port, MOTOR_FORWARD_Pin);
 8001038:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800103c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001040:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001044:	4618      	mov	r0, r3
 8001046:	f001 f95e 	bl	8002306 <GPIOInit>

  GPIO_t gpioMotorForward;
  GPIOInit(&gpioMotorForward, MOTOR_REVERSE_GPIO_Port, MOTOR_REVERSE_Pin);
 800104a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800104e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001052:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001056:	4618      	mov	r0, r3
 8001058:	f001 f955 	bl	8002306 <GPIOInit>

  MotorInit(&motor, &htim1, TIM_CHANNEL_3, gpioMotorReverse, gpioMotorForward);
 800105c:	aa01      	add	r2, sp, #4
 800105e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001062:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001066:	e882 0003 	stmia.w	r2, {r0, r1}
 800106a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001070:	2208      	movs	r2, #8
 8001072:	4921      	ldr	r1, [pc, #132]	; (80010f8 <main+0x138>)
 8001074:	4821      	ldr	r0, [pc, #132]	; (80010fc <main+0x13c>)
 8001076:	f001 f805 	bl	8002084 <MotorInit>
  //MotorSetOffset(&motor, MOTOR_OFFSET);
  MotorStartPWM(&motor);
 800107a:	4820      	ldr	r0, [pc, #128]	; (80010fc <main+0x13c>)
 800107c:	f001 f82e 	bl	80020dc <MotorStartPWM>

  FFBInit(&ffb);
 8001080:	481f      	ldr	r0, [pc, #124]	; (8001100 <main+0x140>)
 8001082:	f7ff fd91 	bl	8000ba8 <FFBInit>

  HAL_TIM_Base_Start_IT(&htim1);
 8001086:	481c      	ldr	r0, [pc, #112]	; (80010f8 <main+0x138>)
 8001088:	f005 fc66 	bl	8006958 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 800108c:	481d      	ldr	r0, [pc, #116]	; (8001104 <main+0x144>)
 800108e:	f005 fc63 	bl	8006958 <HAL_TIM_Base_Start_IT>

  while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET){}
 8001092:	bf00      	nop
 8001094:	2101      	movs	r1, #1
 8001096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109a:	f001 fca3 	bl	80029e4 <HAL_GPIO_ReadPin>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0f7      	beq.n	8001094 <main+0xd4>

  //Home motor
  GPIO_t homeSensorGpio;
  GPIOInit(&homeSensorGpio, HOME_SENSOR_GPIO_Port, HOME_SENSOR_Pin);
 80010a4:	f107 0320 	add.w	r3, r7, #32
 80010a8:	2202      	movs	r2, #2
 80010aa:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 f929 	bl	8002306 <GPIOInit>
  HomeSensorInit(&homeSensor, homeSensorGpio);
 80010b4:	f107 0320 	add.w	r3, r7, #32
 80010b8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80010bc:	4812      	ldr	r0, [pc, #72]	; (8001108 <main+0x148>)
 80010be:	f000 fe8f 	bl	8001de0 <HomeSensorInit>
  HomeSensorHome(&homeSensor, &motor);
 80010c2:	490e      	ldr	r1, [pc, #56]	; (80010fc <main+0x13c>)
 80010c4:	4810      	ldr	r0, [pc, #64]	; (8001108 <main+0x148>)
 80010c6:	f000 fe9f 	bl	8001e08 <HomeSensorHome>

  while(1) {
	  printf("%d\r\n", (int)RotaryEncGetCount(&encoder));
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <main+0x120>)
 80010cc:	f7ff fe99 	bl	8000e02 <RotaryEncGetCount>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4619      	mov	r1, r3
 80010d4:	480d      	ldr	r0, [pc, #52]	; (800110c <main+0x14c>)
 80010d6:	f00c f9ef 	bl	800d4b8 <iprintf>
 80010da:	e7f6      	b.n	80010ca <main+0x10a>
 80010dc:	200005dc 	.word	0x200005dc
 80010e0:	200005c0 	.word	0x200005c0
 80010e4:	20000454 	.word	0x20000454
 80010e8:	200005f0 	.word	0x200005f0
 80010ec:	455fc000 	.word	0x455fc000
 80010f0:	20000350 	.word	0x20000350
 80010f4:	200005d8 	.word	0x200005d8
 80010f8:	20000408 	.word	0x20000408
 80010fc:	20000604 	.word	0x20000604
 8001100:	20000624 	.word	0x20000624
 8001104:	200004a0 	.word	0x200004a0
 8001108:	20000644 	.word	0x20000644
 800110c:	0800f658 	.word	0x0800f658

08001110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b09e      	sub	sp, #120	; 0x78
 8001114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001116:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800111a:	2228      	movs	r2, #40	; 0x28
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f00b fd58 	bl	800cbd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001124:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001134:	463b      	mov	r3, r7
 8001136:	223c      	movs	r2, #60	; 0x3c
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f00b fd4a 	bl	800cbd4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001140:	2303      	movs	r3, #3
 8001142:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001144:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001148:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800114e:	2301      	movs	r3, #1
 8001150:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001152:	2310      	movs	r3, #16
 8001154:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001156:	2302      	movs	r3, #2
 8001158:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800115a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800115e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001160:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001164:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001166:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800116a:	4618      	mov	r0, r3
 800116c:	f003 fece 	bl	8004f0c <HAL_RCC_OscConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001176:	f000 fad1 	bl	800171c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117a:	230f      	movs	r3, #15
 800117c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800117e:	2302      	movs	r3, #2
 8001180:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800118a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001190:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001194:	2101      	movs	r1, #1
 8001196:	4618      	mov	r0, r3
 8001198:	f004 fef6 	bl	8005f88 <HAL_RCC_ClockConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011a2:	f000 fabb 	bl	800171c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <SystemClock_Config+0xc8>)
 80011a8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80011b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011b6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011bc:	463b      	mov	r3, r7
 80011be:	4618      	mov	r0, r3
 80011c0:	f005 f918 	bl	80063f4 <HAL_RCCEx_PeriphCLKConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80011ca:	f000 faa7 	bl	800171c <Error_Handler>
  }
}
 80011ce:	bf00      	nop
 80011d0:	3778      	adds	r7, #120	; 0x78
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	00021021 	.word	0x00021021

080011dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <MX_I2C1_Init+0x74>)
 80011e2:	4a1c      	ldr	r2, [pc, #112]	; (8001254 <MX_I2C1_Init+0x78>)
 80011e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80011e6:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <MX_I2C1_Init+0x74>)
 80011e8:	f240 220b 	movw	r2, #523	; 0x20b
 80011ec:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <MX_I2C1_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <MX_I2C1_Init+0x74>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <MX_I2C1_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001200:	4b13      	ldr	r3, [pc, #76]	; (8001250 <MX_I2C1_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <MX_I2C1_Init+0x74>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <MX_I2C1_Init+0x74>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001212:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MX_I2C1_Init+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001218:	480d      	ldr	r0, [pc, #52]	; (8001250 <MX_I2C1_Init+0x74>)
 800121a:	f001 fc13 	bl	8002a44 <HAL_I2C_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001224:	f000 fa7a 	bl	800171c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001228:	2100      	movs	r1, #0
 800122a:	4809      	ldr	r0, [pc, #36]	; (8001250 <MX_I2C1_Init+0x74>)
 800122c:	f002 f916 	bl	800345c <HAL_I2CEx_ConfigAnalogFilter>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001236:	f000 fa71 	bl	800171c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800123a:	2100      	movs	r1, #0
 800123c:	4804      	ldr	r0, [pc, #16]	; (8001250 <MX_I2C1_Init+0x74>)
 800123e:	f002 f958 	bl	80034f2 <HAL_I2CEx_ConfigDigitalFilter>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001248:	f000 fa68 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000350 	.word	0x20000350
 8001254:	40005400 	.word	0x40005400

08001258 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <MX_SPI1_Init+0x74>)
 800125e:	4a1c      	ldr	r2, [pc, #112]	; (80012d0 <MX_SPI1_Init+0x78>)
 8001260:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001262:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <MX_SPI1_Init+0x74>)
 8001264:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001268:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <MX_SPI1_Init+0x74>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <MX_SPI1_Init+0x74>)
 8001272:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001276:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <MX_SPI1_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <MX_SPI1_Init+0x74>)
 8001280:	2200      	movs	r2, #0
 8001282:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_SPI1_Init+0x74>)
 8001286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800128a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_SPI1_Init+0x74>)
 800128e:	2208      	movs	r2, #8
 8001290:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_SPI1_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_SPI1_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <MX_SPI1_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_SPI1_Init+0x74>)
 80012a6:	2207      	movs	r2, #7
 80012a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <MX_SPI1_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_SPI1_Init+0x74>)
 80012b2:	2208      	movs	r2, #8
 80012b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_SPI1_Init+0x74>)
 80012b8:	f005 fa4c 	bl	8006754 <HAL_SPI_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012c2:	f000 fa2b 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200003a4 	.word	0x200003a4
 80012d0:	40013000 	.word	0x40013000

080012d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b096      	sub	sp, #88	; 0x58
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]
 80012f6:	615a      	str	r2, [r3, #20]
 80012f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	222c      	movs	r2, #44	; 0x2c
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f00b fc67 	bl	800cbd4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001306:	4b39      	ldr	r3, [pc, #228]	; (80013ec <MX_TIM1_Init+0x118>)
 8001308:	4a39      	ldr	r2, [pc, #228]	; (80013f0 <MX_TIM1_Init+0x11c>)
 800130a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800130c:	4b37      	ldr	r3, [pc, #220]	; (80013ec <MX_TIM1_Init+0x118>)
 800130e:	2200      	movs	r2, #0
 8001310:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001312:	4b36      	ldr	r3, [pc, #216]	; (80013ec <MX_TIM1_Init+0x118>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2400-1;
 8001318:	4b34      	ldr	r3, [pc, #208]	; (80013ec <MX_TIM1_Init+0x118>)
 800131a:	f640 125f 	movw	r2, #2399	; 0x95f
 800131e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001320:	4b32      	ldr	r3, [pc, #200]	; (80013ec <MX_TIM1_Init+0x118>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001326:	4b31      	ldr	r3, [pc, #196]	; (80013ec <MX_TIM1_Init+0x118>)
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800132c:	4b2f      	ldr	r3, [pc, #188]	; (80013ec <MX_TIM1_Init+0x118>)
 800132e:	2280      	movs	r2, #128	; 0x80
 8001330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001332:	482e      	ldr	r0, [pc, #184]	; (80013ec <MX_TIM1_Init+0x118>)
 8001334:	f005 fb7a 	bl	8006a2c <HAL_TIM_PWM_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800133e:	f000 f9ed 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001342:	2300      	movs	r3, #0
 8001344:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001346:	2300      	movs	r3, #0
 8001348:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800134e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001352:	4619      	mov	r1, r3
 8001354:	4825      	ldr	r0, [pc, #148]	; (80013ec <MX_TIM1_Init+0x118>)
 8001356:	f006 fbdd 	bl	8007b14 <HAL_TIMEx_MasterConfigSynchronization>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001360:	f000 f9dc 	bl	800171c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001364:	2360      	movs	r3, #96	; 0x60
 8001366:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800136c:	2300      	movs	r3, #0
 800136e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001370:	2300      	movs	r3, #0
 8001372:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800137c:	2300      	movs	r3, #0
 800137e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001380:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001384:	2208      	movs	r2, #8
 8001386:	4619      	mov	r1, r3
 8001388:	4818      	ldr	r0, [pc, #96]	; (80013ec <MX_TIM1_Init+0x118>)
 800138a:	f005 fefb 	bl	8007184 <HAL_TIM_PWM_ConfigChannel>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001394:	f000 f9c2 	bl	800171c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	4619      	mov	r1, r3
 80013cc:	4807      	ldr	r0, [pc, #28]	; (80013ec <MX_TIM1_Init+0x118>)
 80013ce:	f006 fc21 	bl	8007c14 <HAL_TIMEx_ConfigBreakDeadTime>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80013d8:	f000 f9a0 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013dc:	4803      	ldr	r0, [pc, #12]	; (80013ec <MX_TIM1_Init+0x118>)
 80013de:	f000 fb63 	bl	8001aa8 <HAL_TIM_MspPostInit>

}
 80013e2:	bf00      	nop
 80013e4:	3758      	adds	r7, #88	; 0x58
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000408 	.word	0x20000408
 80013f0:	40012c00 	.word	0x40012c00

080013f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08c      	sub	sp, #48	; 0x30
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	2224      	movs	r2, #36	; 0x24
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f00b fbe6 	bl	800cbd4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001408:	463b      	mov	r3, r7
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001412:	4b21      	ldr	r3, [pc, #132]	; (8001498 <MX_TIM4_Init+0xa4>)
 8001414:	4a21      	ldr	r2, [pc, #132]	; (800149c <MX_TIM4_Init+0xa8>)
 8001416:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001418:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <MX_TIM4_Init+0xa4>)
 800141a:	2200      	movs	r2, #0
 800141c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141e:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <MX_TIM4_Init+0xa4>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001424:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <MX_TIM4_Init+0xa4>)
 8001426:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800142a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142c:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <MX_TIM4_Init+0xa4>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001432:	4b19      	ldr	r3, [pc, #100]	; (8001498 <MX_TIM4_Init+0xa4>)
 8001434:	2280      	movs	r2, #128	; 0x80
 8001436:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001438:	2303      	movs	r3, #3
 800143a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800143c:	2300      	movs	r3, #0
 800143e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001440:	2301      	movs	r3, #1
 8001442:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 4;
 8001448:	2304      	movs	r3, #4
 800144a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001450:	2301      	movs	r3, #1
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 4;
 8001458:	2304      	movs	r3, #4
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	4619      	mov	r1, r3
 8001462:	480d      	ldr	r0, [pc, #52]	; (8001498 <MX_TIM4_Init+0xa4>)
 8001464:	f005 fc3a 	bl	8006cdc <HAL_TIM_Encoder_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800146e:	f000 f955 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800147a:	463b      	mov	r3, r7
 800147c:	4619      	mov	r1, r3
 800147e:	4806      	ldr	r0, [pc, #24]	; (8001498 <MX_TIM4_Init+0xa4>)
 8001480:	f006 fb48 	bl	8007b14 <HAL_TIMEx_MasterConfigSynchronization>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800148a:	f000 f947 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	3730      	adds	r7, #48	; 0x30
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000454 	.word	0x20000454
 800149c:	40000800 	.word	0x40000800

080014a0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <MX_TIM6_Init+0x64>)
 80014b2:	4a15      	ldr	r2, [pc, #84]	; (8001508 <MX_TIM6_Init+0x68>)
 80014b4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24-1;
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <MX_TIM6_Init+0x64>)
 80014b8:	2217      	movs	r2, #23
 80014ba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_TIM6_Init+0x64>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <MX_TIM6_Init+0x64>)
 80014c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014c8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_TIM6_Init+0x64>)
 80014cc:	2280      	movs	r2, #128	; 0x80
 80014ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80014d0:	480c      	ldr	r0, [pc, #48]	; (8001504 <MX_TIM6_Init+0x64>)
 80014d2:	f005 f9ea 	bl	80068aa <HAL_TIM_Base_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80014dc:	f000 f91e 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	4619      	mov	r1, r3
 80014ec:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_TIM6_Init+0x64>)
 80014ee:	f006 fb11 	bl	8007b14 <HAL_TIMEx_MasterConfigSynchronization>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80014f8:	f000 f910 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200004a0 	.word	0x200004a0
 8001508:	40001000 	.word	0x40001000

0800150c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <MX_TIM7_Init+0x64>)
 800151e:	4a15      	ldr	r2, [pc, #84]	; (8001574 <MX_TIM7_Init+0x68>)
 8001520:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 48-1;
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <MX_TIM7_Init+0x64>)
 8001524:	222f      	movs	r2, #47	; 0x2f
 8001526:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_TIM7_Init+0x64>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2000-1;
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <MX_TIM7_Init+0x64>)
 8001530:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001534:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_TIM7_Init+0x64>)
 8001538:	2280      	movs	r2, #128	; 0x80
 800153a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800153c:	480c      	ldr	r0, [pc, #48]	; (8001570 <MX_TIM7_Init+0x64>)
 800153e:	f005 f9b4 	bl	80068aa <HAL_TIM_Base_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001548:	f000 f8e8 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154c:	2300      	movs	r3, #0
 800154e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	4619      	mov	r1, r3
 8001558:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_TIM7_Init+0x64>)
 800155a:	f006 fadb 	bl	8007b14 <HAL_TIMEx_MasterConfigSynchronization>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001564:	f000 f8da 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	200004ec 	.word	0x200004ec
 8001574:	40001400 	.word	0x40001400

08001578 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <MX_USART1_UART_Init+0x58>)
 800157e:	4a15      	ldr	r2, [pc, #84]	; (80015d4 <MX_USART1_UART_Init+0x5c>)
 8001580:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <MX_USART1_UART_Init+0x58>)
 8001584:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001588:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_USART1_UART_Init+0x58>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MX_USART1_UART_Init+0x58>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_USART1_UART_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_USART1_UART_Init+0x58>)
 800159e:	220c      	movs	r2, #12
 80015a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <MX_USART1_UART_Init+0x58>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_USART1_UART_Init+0x58>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <MX_USART1_UART_Init+0x58>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_USART1_UART_Init+0x58>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_USART1_UART_Init+0x58>)
 80015bc:	f006 fbc6 	bl	8007d4c <HAL_UART_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015c6:	f000 f8a9 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000538 	.word	0x20000538
 80015d4:	40013800 	.word	0x40013800

080015d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08c      	sub	sp, #48	; 0x30
 80015dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	f107 031c 	add.w	r3, r7, #28
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ee:	4b49      	ldr	r3, [pc, #292]	; (8001714 <MX_GPIO_Init+0x13c>)
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	4a48      	ldr	r2, [pc, #288]	; (8001714 <MX_GPIO_Init+0x13c>)
 80015f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015f8:	6153      	str	r3, [r2, #20]
 80015fa:	4b46      	ldr	r3, [pc, #280]	; (8001714 <MX_GPIO_Init+0x13c>)
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001602:	61bb      	str	r3, [r7, #24]
 8001604:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001606:	4b43      	ldr	r3, [pc, #268]	; (8001714 <MX_GPIO_Init+0x13c>)
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	4a42      	ldr	r2, [pc, #264]	; (8001714 <MX_GPIO_Init+0x13c>)
 800160c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001610:	6153      	str	r3, [r2, #20]
 8001612:	4b40      	ldr	r3, [pc, #256]	; (8001714 <MX_GPIO_Init+0x13c>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800161e:	4b3d      	ldr	r3, [pc, #244]	; (8001714 <MX_GPIO_Init+0x13c>)
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	4a3c      	ldr	r2, [pc, #240]	; (8001714 <MX_GPIO_Init+0x13c>)
 8001624:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001628:	6153      	str	r3, [r2, #20]
 800162a:	4b3a      	ldr	r3, [pc, #232]	; (8001714 <MX_GPIO_Init+0x13c>)
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	4b37      	ldr	r3, [pc, #220]	; (8001714 <MX_GPIO_Init+0x13c>)
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	4a36      	ldr	r2, [pc, #216]	; (8001714 <MX_GPIO_Init+0x13c>)
 800163c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001640:	6153      	str	r3, [r2, #20]
 8001642:	4b34      	ldr	r3, [pc, #208]	; (8001714 <MX_GPIO_Init+0x13c>)
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800164e:	4b31      	ldr	r3, [pc, #196]	; (8001714 <MX_GPIO_Init+0x13c>)
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	4a30      	ldr	r2, [pc, #192]	; (8001714 <MX_GPIO_Init+0x13c>)
 8001654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001658:	6153      	str	r3, [r2, #20]
 800165a:	4b2e      	ldr	r3, [pc, #184]	; (8001714 <MX_GPIO_Init+0x13c>)
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001666:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <MX_GPIO_Init+0x13c>)
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	4a2a      	ldr	r2, [pc, #168]	; (8001714 <MX_GPIO_Init+0x13c>)
 800166c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001670:	6153      	str	r3, [r2, #20]
 8001672:	4b28      	ldr	r3, [pc, #160]	; (8001714 <MX_GPIO_Init+0x13c>)
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800167e:	2200      	movs	r2, #0
 8001680:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001684:	4824      	ldr	r0, [pc, #144]	; (8001718 <MX_GPIO_Init+0x140>)
 8001686:	f001 f9c5 	bl	8002a14 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_REVERSE_Pin|MOTOR_FORWARD_Pin, GPIO_PIN_RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001694:	f001 f9be 	bl	8002a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001698:	2337      	movs	r3, #55	; 0x37
 800169a:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800169c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80016a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	4619      	mov	r1, r3
 80016ac:	481a      	ldr	r0, [pc, #104]	; (8001718 <MX_GPIO_Init+0x140>)
 80016ae:	f001 f81f 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80016b2:	f64f 7308 	movw	r3, #65288	; 0xff08
 80016b6:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b8:	2301      	movs	r3, #1
 80016ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016c4:	f107 031c 	add.w	r3, r7, #28
 80016c8:	4619      	mov	r1, r3
 80016ca:	4813      	ldr	r0, [pc, #76]	; (8001718 <MX_GPIO_Init+0x140>)
 80016cc:	f001 f810 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin HOME_SENSOR_Pin */
  GPIO_InitStruct.Pin = B1_Pin|HOME_SENSOR_Pin;
 80016d0:	2303      	movs	r3, #3
 80016d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d4:	2300      	movs	r3, #0
 80016d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016dc:	f107 031c 	add.w	r3, r7, #28
 80016e0:	4619      	mov	r1, r3
 80016e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e6:	f001 f803 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_REVERSE_Pin MOTOR_FORWARD_Pin */
  GPIO_InitStruct.Pin = MOTOR_REVERSE_Pin|MOTOR_FORWARD_Pin;
 80016ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f0:	2301      	movs	r3, #1
 80016f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fc:	f107 031c 	add.w	r3, r7, #28
 8001700:	4619      	mov	r1, r3
 8001702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001706:	f000 fff3 	bl	80026f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800170a:	bf00      	nop
 800170c:	3730      	adds	r7, #48	; 0x30
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40021000 	.word	0x40021000
 8001718:	48001000 	.word	0x48001000

0800171c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001720:	b672      	cpsid	i
}
 8001722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001724:	e7fe      	b.n	8001724 <Error_Handler+0x8>

08001726 <MotorControllerUpdate>:

float MotorControllerGetSpeed(MotorController_t *controller) {
	return RotaryEncGetSpeed(controller->init.encoder);
}

void MotorControllerUpdate(MotorController_t *controller, float deltaTime) {
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	ed87 0a00 	vstr	s0, [r7]
	if(controller->mode == MOTOR_CONTROL_POSITION) {
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d105      	bne.n	8001748 <MotorControllerUpdate+0x22>
		MotorControllerPositionUpdate(controller, deltaTime);
 800173c:	ed97 0a00 	vldr	s0, [r7]
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 f80f 	bl	8001764 <MotorControllerPositionUpdate>
	}
	else if(controller->mode == MOTOR_CONTROL_CURRENT) {
		MotorControllerCurrentUpdate(controller, deltaTime);
	}
}
 8001746:	e009      	b.n	800175c <MotorControllerUpdate+0x36>
	else if(controller->mode == MOTOR_CONTROL_CURRENT) {
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800174e:	2b02      	cmp	r3, #2
 8001750:	d104      	bne.n	800175c <MotorControllerUpdate+0x36>
		MotorControllerCurrentUpdate(controller, deltaTime);
 8001752:	ed97 0a00 	vldr	s0, [r7]
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f810 	bl	800177c <MotorControllerCurrentUpdate>
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <MotorControllerPositionUpdate>:

//TODO: implement
static void MotorControllerPositionUpdate(MotorController_t *controller,
		float deltaTime) {
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	ed87 0a00 	vstr	s0, [r7]

}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <MotorControllerCurrentUpdate>:

static void MotorControllerCurrentUpdate(MotorController_t *controller,
		float deltaTime) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	ed87 0a00 	vstr	s0, [r7]
	float actualCurrent = CurrentSenseGetCurrent(
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	4618      	mov	r0, r3
 800178e:	f000 fba5 	bl	8001edc <CurrentSenseGetCurrent>
 8001792:	ed87 0a03 	vstr	s0, [r7, #12]
			controller->init.currentSensor);

	//determine actual current direction
	if(MotorGetDirection(controller->init.motor) == DIR_FORWARD) {
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f000 fceb 	bl	8002176 <MotorGetDirection>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d00d      	beq.n	80017c2 <MotorControllerCurrentUpdate+0x46>
		//do nothing
	}
	else if(MotorGetDirection(controller->init.motor) == DIR_REVERSE) {
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 fce3 	bl	8002176 <MotorGetDirection>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d105      	bne.n	80017c2 <MotorControllerCurrentUpdate+0x46>
		//flip actual current direction
		actualCurrent *= -1;
 80017b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ba:	eef1 7a67 	vneg.f32	s15, s15
 80017be:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	//calculate PID for motor output power
	int32_t motorPower = ComputePID(controller->init.currentPid,
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	695a      	ldr	r2, [r3, #20]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	edd3 7a07 	vldr	s15, [r3, #28]
 80017cc:	edd7 0a03 	vldr	s1, [r7, #12]
 80017d0:	eeb0 0a67 	vmov.f32	s0, s15
 80017d4:	4610      	mov	r0, r2
 80017d6:	f7ff fa37 	bl	8000c48 <ComputePID>
 80017da:	eef0 7a40 	vmov.f32	s15, s0
 80017de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017e2:	ee17 3a90 	vmov	r3, s15
 80017e6:	60bb      	str	r3, [r7, #8]
			controller->currentSetPoint, actualCurrent);
	MotorSetPower(controller->init.motor, motorPower);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68b9      	ldr	r1, [r7, #8]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 fd57 	bl	80022a2 <MotorSetPower>

	testCurrent = actualCurrent;
 80017f4:	4a03      	ldr	r2, [pc, #12]	; (8001804 <MotorControllerCurrentUpdate+0x88>)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6013      	str	r3, [r2, #0]
}
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200006b4 	.word	0x200006b4

08001808 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180e:	4b0f      	ldr	r3, [pc, #60]	; (800184c <HAL_MspInit+0x44>)
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	4a0e      	ldr	r2, [pc, #56]	; (800184c <HAL_MspInit+0x44>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6193      	str	r3, [r2, #24]
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <HAL_MspInit+0x44>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_MspInit+0x44>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	4a08      	ldr	r2, [pc, #32]	; (800184c <HAL_MspInit+0x44>)
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001830:	61d3      	str	r3, [r2, #28]
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_MspInit+0x44>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800183e:	2007      	movs	r0, #7
 8001840:	f000 ff14 	bl	800266c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40021000 	.word	0x40021000

08001850 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	; 0x28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a17      	ldr	r2, [pc, #92]	; (80018cc <HAL_I2C_MspInit+0x7c>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d127      	bne.n	80018c2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001872:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <HAL_I2C_MspInit+0x80>)
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	4a16      	ldr	r2, [pc, #88]	; (80018d0 <HAL_I2C_MspInit+0x80>)
 8001878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800187c:	6153      	str	r3, [r2, #20]
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <HAL_I2C_MspInit+0x80>)
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800188a:	23c0      	movs	r3, #192	; 0xc0
 800188c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800188e:	2312      	movs	r3, #18
 8001890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001892:	2301      	movs	r3, #1
 8001894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001896:	2303      	movs	r3, #3
 8001898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800189a:	2304      	movs	r3, #4
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4619      	mov	r1, r3
 80018a4:	480b      	ldr	r0, [pc, #44]	; (80018d4 <HAL_I2C_MspInit+0x84>)
 80018a6:	f000 ff23 	bl	80026f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <HAL_I2C_MspInit+0x80>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <HAL_I2C_MspInit+0x80>)
 80018b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018b4:	61d3      	str	r3, [r2, #28]
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <HAL_I2C_MspInit+0x80>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018c2:	bf00      	nop
 80018c4:	3728      	adds	r7, #40	; 0x28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40005400 	.word	0x40005400
 80018d0:	40021000 	.word	0x40021000
 80018d4:	48000400 	.word	0x48000400

080018d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a17      	ldr	r2, [pc, #92]	; (8001954 <HAL_SPI_MspInit+0x7c>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d128      	bne.n	800194c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018fa:	4b17      	ldr	r3, [pc, #92]	; (8001958 <HAL_SPI_MspInit+0x80>)
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	4a16      	ldr	r2, [pc, #88]	; (8001958 <HAL_SPI_MspInit+0x80>)
 8001900:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001904:	6193      	str	r3, [r2, #24]
 8001906:	4b14      	ldr	r3, [pc, #80]	; (8001958 <HAL_SPI_MspInit+0x80>)
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <HAL_SPI_MspInit+0x80>)
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	4a10      	ldr	r2, [pc, #64]	; (8001958 <HAL_SPI_MspInit+0x80>)
 8001918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800191c:	6153      	str	r3, [r2, #20]
 800191e:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <HAL_SPI_MspInit+0x80>)
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800192a:	23e0      	movs	r3, #224	; 0xe0
 800192c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800193a:	2305      	movs	r3, #5
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001948:	f000 fed2 	bl	80026f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800194c:	bf00      	nop
 800194e:	3728      	adds	r7, #40	; 0x28
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40013000 	.word	0x40013000
 8001958:	40021000 	.word	0x40021000

0800195c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <HAL_TIM_PWM_MspInit+0x38>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d10b      	bne.n	8001986 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <HAL_TIM_PWM_MspInit+0x3c>)
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	4a09      	ldr	r2, [pc, #36]	; (8001998 <HAL_TIM_PWM_MspInit+0x3c>)
 8001974:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001978:	6193      	str	r3, [r2, #24]
 800197a:	4b07      	ldr	r3, [pc, #28]	; (8001998 <HAL_TIM_PWM_MspInit+0x3c>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001986:	bf00      	nop
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40012c00 	.word	0x40012c00
 8001998:	40021000 	.word	0x40021000

0800199c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a17      	ldr	r2, [pc, #92]	; (8001a18 <HAL_TIM_Encoder_MspInit+0x7c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d128      	bne.n	8001a10 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019be:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <HAL_TIM_Encoder_MspInit+0x80>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	4a16      	ldr	r2, [pc, #88]	; (8001a1c <HAL_TIM_Encoder_MspInit+0x80>)
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	61d3      	str	r3, [r2, #28]
 80019ca:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <HAL_TIM_Encoder_MspInit+0x80>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d6:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <HAL_TIM_Encoder_MspInit+0x80>)
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	4a10      	ldr	r2, [pc, #64]	; (8001a1c <HAL_TIM_Encoder_MspInit+0x80>)
 80019dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019e0:	6153      	str	r3, [r2, #20]
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <HAL_TIM_Encoder_MspInit+0x80>)
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80019ee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80019f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f4:	2302      	movs	r3, #2
 80019f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a00:	2302      	movs	r3, #2
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4805      	ldr	r0, [pc, #20]	; (8001a20 <HAL_TIM_Encoder_MspInit+0x84>)
 8001a0c:	f000 fe70 	bl	80026f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a10:	bf00      	nop
 8001a12:	3728      	adds	r7, #40	; 0x28
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40000800 	.word	0x40000800
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	48000c00 	.word	0x48000c00

08001a24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a1a      	ldr	r2, [pc, #104]	; (8001a9c <HAL_TIM_Base_MspInit+0x78>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d114      	bne.n	8001a60 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a36:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <HAL_TIM_Base_MspInit+0x7c>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	4a19      	ldr	r2, [pc, #100]	; (8001aa0 <HAL_TIM_Base_MspInit+0x7c>)
 8001a3c:	f043 0310 	orr.w	r3, r3, #16
 8001a40:	61d3      	str	r3, [r2, #28]
 8001a42:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <HAL_TIM_Base_MspInit+0x7c>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2100      	movs	r1, #0
 8001a52:	2036      	movs	r0, #54	; 0x36
 8001a54:	f000 fe15 	bl	8002682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a58:	2036      	movs	r0, #54	; 0x36
 8001a5a:	f000 fe2e 	bl	80026ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001a5e:	e018      	b.n	8001a92 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a0f      	ldr	r2, [pc, #60]	; (8001aa4 <HAL_TIM_Base_MspInit+0x80>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d113      	bne.n	8001a92 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <HAL_TIM_Base_MspInit+0x7c>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	4a0c      	ldr	r2, [pc, #48]	; (8001aa0 <HAL_TIM_Base_MspInit+0x7c>)
 8001a70:	f043 0320 	orr.w	r3, r3, #32
 8001a74:	61d3      	str	r3, [r2, #28]
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <HAL_TIM_Base_MspInit+0x7c>)
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	f003 0320 	and.w	r3, r3, #32
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2100      	movs	r1, #0
 8001a86:	2037      	movs	r0, #55	; 0x37
 8001a88:	f000 fdfb 	bl	8002682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001a8c:	2037      	movs	r0, #55	; 0x37
 8001a8e:	f000 fe14 	bl	80026ba <HAL_NVIC_EnableIRQ>
}
 8001a92:	bf00      	nop
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40001000 	.word	0x40001000
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40001400 	.word	0x40001400

08001aa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <HAL_TIM_MspPostInit+0x68>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d11d      	bne.n	8001b06 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <HAL_TIM_MspPostInit+0x6c>)
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	4a11      	ldr	r2, [pc, #68]	; (8001b14 <HAL_TIM_MspPostInit+0x6c>)
 8001ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad4:	6153      	str	r3, [r2, #20]
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <HAL_TIM_MspPostInit+0x6c>)
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 8001ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001af4:	2306      	movs	r3, #6
 8001af6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	4619      	mov	r1, r3
 8001afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b02:	f000 fdf5 	bl	80026f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b06:	bf00      	nop
 8001b08:	3720      	adds	r7, #32
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40012c00 	.word	0x40012c00
 8001b14:	40021000 	.word	0x40021000

08001b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08a      	sub	sp, #40	; 0x28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a17      	ldr	r2, [pc, #92]	; (8001b94 <HAL_UART_MspInit+0x7c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d127      	bne.n	8001b8a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b3a:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <HAL_UART_MspInit+0x80>)
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	4a16      	ldr	r2, [pc, #88]	; (8001b98 <HAL_UART_MspInit+0x80>)
 8001b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b44:	6193      	str	r3, [r2, #24]
 8001b46:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <HAL_UART_MspInit+0x80>)
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b52:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <HAL_UART_MspInit+0x80>)
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	4a10      	ldr	r2, [pc, #64]	; (8001b98 <HAL_UART_MspInit+0x80>)
 8001b58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b5c:	6153      	str	r3, [r2, #20]
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <HAL_UART_MspInit+0x80>)
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b6a:	2330      	movs	r3, #48	; 0x30
 8001b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b76:	2303      	movs	r3, #3
 8001b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b7a:	2307      	movs	r3, #7
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	4805      	ldr	r0, [pc, #20]	; (8001b9c <HAL_UART_MspInit+0x84>)
 8001b86:	f000 fdb3 	bl	80026f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b8a:	bf00      	nop
 8001b8c:	3728      	adds	r7, #40	; 0x28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40013800 	.word	0x40013800
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	48000800 	.word	0x48000800

08001ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <NMI_Handler+0x4>

08001ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001baa:	e7fe      	b.n	8001baa <HardFault_Handler+0x4>

08001bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <MemManage_Handler+0x4>

08001bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb6:	e7fe      	b.n	8001bb6 <BusFault_Handler+0x4>

08001bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bbc:	e7fe      	b.n	8001bbc <UsageFault_Handler+0x4>

08001bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bec:	f000 fc2a 	bl	8002444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001bfa:	f001 fdbe 	bl	800377a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000b88 	.word	0x20000b88

08001c08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <TIM6_DAC_IRQHandler+0x10>)
 8001c0e:	f005 f999 	bl	8006f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200004a0 	.word	0x200004a0

08001c1c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <TIM7_IRQHandler+0x10>)
 8001c22:	f005 f98f 	bl	8006f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	200004ec 	.word	0x200004ec

08001c30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return 1;
 8001c34:	2301      	movs	r3, #1
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <_kill>:

int _kill(int pid, int sig)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c4a:	f00a ff99 	bl	800cb80 <__errno>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2216      	movs	r2, #22
 8001c52:	601a      	str	r2, [r3, #0]
  return -1;
 8001c54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <_exit>:

void _exit (int status)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c68:	f04f 31ff 	mov.w	r1, #4294967295
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ffe7 	bl	8001c40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c72:	e7fe      	b.n	8001c72 <_exit+0x12>

08001c74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	e00a      	b.n	8001c9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c86:	f3af 8000 	nop.w
 8001c8a:	4601      	mov	r1, r0
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	60ba      	str	r2, [r7, #8]
 8001c92:	b2ca      	uxtb	r2, r1
 8001c94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	dbf0      	blt.n	8001c86 <_read+0x12>
  }

  return len;
 8001ca4:	687b      	ldr	r3, [r7, #4]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	60f8      	str	r0, [r7, #12]
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	e009      	b.n	8001cd4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	1c5a      	adds	r2, r3, #1
 8001cc4:	60ba      	str	r2, [r7, #8]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff f93d 	bl	8000f48 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	dbf1      	blt.n	8001cc0 <_write+0x12>
  }
  return len;
 8001cdc:	687b      	ldr	r3, [r7, #4]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <_close>:

int _close(int file)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d0e:	605a      	str	r2, [r3, #4]
  return 0;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <_isatty>:

int _isatty(int file)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d26:	2301      	movs	r3, #1
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
	...

08001d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d58:	4a14      	ldr	r2, [pc, #80]	; (8001dac <_sbrk+0x5c>)
 8001d5a:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <_sbrk+0x60>)
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d64:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <_sbrk+0x64>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d102      	bne.n	8001d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <_sbrk+0x64>)
 8001d6e:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <_sbrk+0x68>)
 8001d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d72:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <_sbrk+0x64>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d207      	bcs.n	8001d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d80:	f00a fefe 	bl	800cb80 <__errno>
 8001d84:	4603      	mov	r3, r0
 8001d86:	220c      	movs	r2, #12
 8001d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8e:	e009      	b.n	8001da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <_sbrk+0x64>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d96:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <_sbrk+0x64>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	4a05      	ldr	r2, [pc, #20]	; (8001db4 <_sbrk+0x64>)
 8001da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001da2:	68fb      	ldr	r3, [r7, #12]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	2000a000 	.word	0x2000a000
 8001db0:	00000400 	.word	0x00000400
 8001db4:	200006b8 	.word	0x200006b8
 8001db8:	20000ea0 	.word	0x20000ea0

08001dbc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <SystemInit+0x20>)
 8001dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc6:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <SystemInit+0x20>)
 8001dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <HomeSensorInit>:
 *      Author: Jennyston
 */

#include "devices/home_sensor.h"

void HomeSensorInit(HomeSensor_t *homeSensor, GPIO_t gpio) {
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	e883 0006 	stmia.w	r3, {r1, r2}
	homeSensor->gpio = gpio;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	461a      	mov	r2, r3
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001df8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001dfc:	bf00      	nop
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HomeSensorHome>:

void HomeSensorHome(HomeSensor_t *homeSensor, Motor_t *motor) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
//	//get motor spinning
//	MotorSetPower(motor, HOME_MOTOR_MAX_SPEED);
//	HAL_Delay(1000);

	//run motor at max speed and find home position
	MotorSetPower(motor, HOME_MOTOR_MAX_SPEED);
 8001e12:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8001e16:	6838      	ldr	r0, [r7, #0]
 8001e18:	f000 fa43 	bl	80022a2 <MotorSetPower>
	while(GPIOGetState(&(homeSensor->gpio)) == GPIO_LOW) {
 8001e1c:	bf00      	nop
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f000 fa83 	bl	800232c <GPIOGetState>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d0f8      	beq.n	8001e1e <HomeSensorHome+0x16>
		//wait (do nothing)
	}

	//dead time
	MotorSetPower(motor, 0);
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	6838      	ldr	r0, [r7, #0]
 8001e30:	f000 fa37 	bl	80022a2 <MotorSetPower>
	HAL_Delay(500);
 8001e34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e38:	f000 fb24 	bl	8002484 <HAL_Delay>

	//home position has been found, back off slowly
	MotorSetPower(motor, -HOME_MOTOR_MIN_SPEED);
 8001e3c:	4915      	ldr	r1, [pc, #84]	; (8001e94 <HomeSensorHome+0x8c>)
 8001e3e:	6838      	ldr	r0, [r7, #0]
 8001e40:	f000 fa2f 	bl	80022a2 <MotorSetPower>
	while(GPIOGetState(&(homeSensor->gpio)) == GPIO_HIGH) {
 8001e44:	bf00      	nop
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 fa6f 	bl	800232c <GPIOGetState>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0f8      	beq.n	8001e46 <HomeSensorHome+0x3e>
		//wait (do nothing)
	}
	HAL_Delay(250);
 8001e54:	20fa      	movs	r0, #250	; 0xfa
 8001e56:	f000 fb15 	bl	8002484 <HAL_Delay>

	//dead time
	MotorSetPower(motor, 0);
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	6838      	ldr	r0, [r7, #0]
 8001e5e:	f000 fa20 	bl	80022a2 <MotorSetPower>
	HAL_Delay(500);
 8001e62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e66:	f000 fb0d 	bl	8002484 <HAL_Delay>

	//move forward back to home position slowly
	MotorSetPower(motor, HOME_MOTOR_MIN_SPEED);
 8001e6a:	f240 414c 	movw	r1, #1100	; 0x44c
 8001e6e:	6838      	ldr	r0, [r7, #0]
 8001e70:	f000 fa17 	bl	80022a2 <MotorSetPower>
	while(GPIOGetState(&(homeSensor->gpio)) == GPIO_LOW) {
 8001e74:	bf00      	nop
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f000 fa57 	bl	800232c <GPIOGetState>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d0f8      	beq.n	8001e76 <HomeSensorHome+0x6e>
		//wait (do nothing)
	}

	MotorSetPower(motor, 0);
 8001e84:	2100      	movs	r1, #0
 8001e86:	6838      	ldr	r0, [r7, #0]
 8001e88:	f000 fa0b 	bl	80022a2 <MotorSetPower>

	//done
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	fffffbb4 	.word	0xfffffbb4

08001e98 <CurrentSenseInit>:

//private function forward declarations
static void Ina219WriteRegister(Ina219_t *cSense, Ina219Reg reg, uint16_t data);
static uint16_t Ina219ReadRegister(Ina219_t *cSense, Ina219Reg reg);

void CurrentSenseInit(Ina219_t *cSense, I2C_HandleTypeDef *hi2c) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
	cSense->hi2c = hi2c;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	601a      	str	r2, [r3, #0]

	//uint16_t test = Ina219ReadRegister(cSense, INA219_CONFIG);

	//Soft reset INA219
	Ina219WriteRegister(cSense, INA219_CONFIG, 0b1000000000000000);
 8001ea8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001eac:	2100      	movs	r1, #0
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f840 	bl	8001f34 <Ina219WriteRegister>
	HAL_Delay(5);
 8001eb4:	2005      	movs	r0, #5
 8001eb6:	f000 fae5 	bl	8002484 <HAL_Delay>
	 * PGA: +/- 320mV
	 * BADC: 12-bit
	 * SADC: 2 samples
	 * Operating Mode: Shunt and bus, continuous
	 */
	Ina219WriteRegister(cSense, INA219_CONFIG, 0b0001100111001111);
 8001eba:	f641 12cf 	movw	r2, #6607	; 0x19cf
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f837 	bl	8001f34 <Ina219WriteRegister>

	//Calibration
	Ina219WriteRegister(cSense, INA219_CALIBRATION, 4096);
 8001ec6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eca:	2105      	movs	r1, #5
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f831 	bl	8001f34 <Ina219WriteRegister>

}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <CurrentSenseGetCurrent>:

float CurrentSenseGetCurrent(Ina219_t *cSense) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]

	//Ensure sensor calibration did not reset as recommended by Adafruit
	//Ina219WriteRegister(cSense, INA219_CALIBRATION, 4096);

	//Ina219WriteRegister(cSense, INA219_CONFIG, 0b0001100110011111);
	Ina219WriteRegister(cSense, INA219_CONFIG, 0b0001100111001111);
 8001ee4:	f641 12cf 	movw	r2, #6607	; 0x19cf
 8001ee8:	2100      	movs	r1, #0
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f822 	bl	8001f34 <Ina219WriteRegister>


	//Calibration
	Ina219WriteRegister(cSense, INA219_CALIBRATION, 4096);
 8001ef0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ef4:	2105      	movs	r1, #5
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f81c 	bl	8001f34 <Ina219WriteRegister>

	uint16_t rawData = Ina219ReadRegister(cSense, INA219_CURRENT);
 8001efc:	2104      	movs	r1, #4
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f869 	bl	8001fd6 <Ina219ReadRegister>
 8001f04:	4603      	mov	r3, r0
 8001f06:	81bb      	strh	r3, [r7, #12]
	int16_t data = *(int16_t *)&rawData;
 8001f08:	f107 030c 	add.w	r3, r7, #12
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	81fb      	strh	r3, [r7, #14]
	return data * 0.0001f;
 8001f10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f14:	ee07 3a90 	vmov	s15, r3
 8001f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f1c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8001f30 <CurrentSenseGetCurrent+0x54>
 8001f20:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001f24:	eeb0 0a67 	vmov.f32	s0, s15
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	38d1b717 	.word	0x38d1b717

08001f34 <Ina219WriteRegister>:

static void Ina219WriteRegister(Ina219_t *cSense, Ina219Reg reg,
		uint16_t data) {
 8001f34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f38:	b089      	sub	sp, #36	; 0x24
 8001f3a:	af02      	add	r7, sp, #8
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	70fb      	strb	r3, [r7, #3]
 8001f42:	4613      	mov	r3, r2
 8001f44:	803b      	strh	r3, [r7, #0]
 8001f46:	466b      	mov	r3, sp
 8001f48:	461e      	mov	r6, r3
	//Prepare data for transmit
	const uint8_t TX_DATA_LENGTH = 3;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	74fb      	strb	r3, [r7, #19]
	uint8_t txData[TX_DATA_LENGTH];
 8001f4e:	7cfb      	ldrb	r3, [r7, #19]
 8001f50:	3b01      	subs	r3, #1
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	7cfb      	ldrb	r3, [r7, #19]
 8001f56:	2200      	movs	r2, #0
 8001f58:	4698      	mov	r8, r3
 8001f5a:	4691      	mov	r9, r2
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f70:	7cfb      	ldrb	r3, [r7, #19]
 8001f72:	2200      	movs	r2, #0
 8001f74:	461c      	mov	r4, r3
 8001f76:	4615      	mov	r5, r2
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	f04f 0300 	mov.w	r3, #0
 8001f80:	00eb      	lsls	r3, r5, #3
 8001f82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f86:	00e2      	lsls	r2, r4, #3
 8001f88:	7cfb      	ldrb	r3, [r7, #19]
 8001f8a:	3307      	adds	r3, #7
 8001f8c:	08db      	lsrs	r3, r3, #3
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	ebad 0d03 	sub.w	sp, sp, r3
 8001f94:	ab02      	add	r3, sp, #8
 8001f96:	3300      	adds	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
	txData[0] = (uint8_t)reg;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	78fa      	ldrb	r2, [r7, #3]
 8001f9e:	701a      	strb	r2, [r3, #0]
	txData[1] = (uint8_t)((data >> 8) & 0xFF);
 8001fa0:	883b      	ldrh	r3, [r7, #0]
 8001fa2:	0a1b      	lsrs	r3, r3, #8
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	705a      	strb	r2, [r3, #1]
	txData[2] = (uint8_t)(data & 0xFF);
 8001fac:	883b      	ldrh	r3, [r7, #0]
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	709a      	strb	r2, [r3, #2]

	//Transmit register address with provided data
	HAL_I2C_Master_Transmit(cSense->hi2c, INA219_ADDR, txData, TX_DATA_LENGTH,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	7cfb      	ldrb	r3, [r7, #19]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc0:	9200      	str	r2, [sp, #0]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	2180      	movs	r1, #128	; 0x80
 8001fc6:	f000 fdcd 	bl	8002b64 <HAL_I2C_Master_Transmit>
 8001fca:	46b5      	mov	sp, r6
			HAL_MAX_DELAY);
}
 8001fcc:	bf00      	nop
 8001fce:	371c      	adds	r7, #28
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001fd6 <Ina219ReadRegister>:

static uint16_t Ina219ReadRegister(Ina219_t *cSense, Ina219Reg reg) {
 8001fd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fda:	b089      	sub	sp, #36	; 0x24
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	70fb      	strb	r3, [r7, #3]
 8001fe4:	466b      	mov	r3, sp
 8001fe6:	461e      	mov	r6, r3
	const int RX_DATA_LENGTH = 2;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	613b      	str	r3, [r7, #16]
	uint8_t buffer[RX_DATA_LENGTH];
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	4698      	mov	r8, r3
 8001ff8:	4691      	mov	r9, r2
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002006:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800200a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2200      	movs	r2, #0
 8002012:	461c      	mov	r4, r3
 8002014:	4615      	mov	r5, r2
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	f04f 0300 	mov.w	r3, #0
 800201e:	00eb      	lsls	r3, r5, #3
 8002020:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002024:	00e2      	lsls	r2, r4, #3
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	3307      	adds	r3, #7
 800202a:	08db      	lsrs	r3, r3, #3
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	ebad 0d03 	sub.w	sp, sp, r3
 8002032:	ab02      	add	r3, sp, #8
 8002034:	3300      	adds	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Master_Transmit(cSense->hi2c, INA219_ADDR, (uint8_t *)&reg, 1,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	1cfa      	adds	r2, r7, #3
 800203e:	f04f 33ff 	mov.w	r3, #4294967295
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	2301      	movs	r3, #1
 8002046:	2180      	movs	r1, #128	; 0x80
 8002048:	f000 fd8c 	bl	8002b64 <HAL_I2C_Master_Transmit>
			HAL_MAX_DELAY);
	HAL_I2C_Master_Receive(cSense->hi2c, INA219_ADDR, buffer, RX_DATA_LENGTH,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6818      	ldr	r0, [r3, #0]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	b29b      	uxth	r3, r3
 8002054:	f04f 32ff 	mov.w	r2, #4294967295
 8002058:	9200      	str	r2, [sp, #0]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	2180      	movs	r1, #128	; 0x80
 800205e:	f000 fe75 	bl	8002d4c <HAL_I2C_Master_Receive>
			HAL_MAX_DELAY);

	//Convert 2*8-bit data to 16-bit
	uint16_t data = (((uint16_t)buffer[0])<< 8) | (buffer[1] & 0xFF);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	b21a      	sxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	785b      	ldrb	r3, [r3, #1]
 800206e:	b21b      	sxth	r3, r3
 8002070:	4313      	orrs	r3, r2
 8002072:	b21b      	sxth	r3, r3
 8002074:	817b      	strh	r3, [r7, #10]

	return data;
 8002076:	897b      	ldrh	r3, [r7, #10]
 8002078:	46b5      	mov	sp, r6
}
 800207a:	4618      	mov	r0, r3
 800207c:	371c      	adds	r7, #28
 800207e:	46bd      	mov	sp, r7
 8002080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002084 <MotorInit>:
#include "devices/motor.h"

static int32_t Abs(int32_t x);

void MotorInit(Motor_t *motor, TIM_HandleTypeDef *htim, uint32_t pwmCh,
		GPIO_t reverseGpio, GPIO_t forwardGpio) {
 8002084:	b082      	sub	sp, #8
 8002086:	b580      	push	{r7, lr}
 8002088:	b084      	sub	sp, #16
 800208a:	af00      	add	r7, sp, #0
 800208c:	60f8      	str	r0, [r7, #12]
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	61fb      	str	r3, [r7, #28]
	motor->htim = htim;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	601a      	str	r2, [r3, #0]
	motor->pwmCh = pwmCh;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	605a      	str	r2, [r3, #4]
	motor->reverseGpio = reverseGpio;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	3310      	adds	r3, #16
 80020a4:	f107 021c 	add.w	r2, r7, #28
 80020a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020ac:	e883 0003 	stmia.w	r3, {r0, r1}
	motor->forwardGpio = forwardGpio;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	3308      	adds	r3, #8
 80020b4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80020b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020bc:	e883 0003 	stmia.w	r3, {r0, r1}
	motor->offset = 0;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	839a      	strh	r2, [r3, #28]
	MotorSetDirection(motor, DIR_STOP);
 80020c6:	2101      	movs	r1, #1
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 f81b 	bl	8002104 <MotorSetDirection>
}
 80020ce:	bf00      	nop
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020d8:	b002      	add	sp, #8
 80020da:	4770      	bx	lr

080020dc <MotorStartPWM>:

void MotorStartPWM(Motor_t *motor) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	//make sure motor is stopped
	MotorSetDirection(motor, DIR_STOP);
 80020e4:	2101      	movs	r1, #1
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f80c 	bl	8002104 <MotorSetDirection>

	HAL_TIM_PWM_Start(motor->htim, motor->pwmCh);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	4619      	mov	r1, r3
 80020f6:	4610      	mov	r0, r2
 80020f8:	f004 fcf0 	bl	8006adc <HAL_TIM_PWM_Start>
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <MotorSetDirection>:

uint16_t MotorGetOffset(Motor_t *motor) {
	return motor->offset;
}

void MotorSetDirection(Motor_t *motor, MotorDirection_t dir) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	70fb      	strb	r3, [r7, #3]

	//Set appropriate GPIO based on requested direction
	switch(dir) {
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d012      	beq.n	800213c <MotorSetDirection+0x38>
 8002116:	2b02      	cmp	r3, #2
 8002118:	d121      	bne.n	800215e <MotorSetDirection+0x5a>
	case DIR_FORWARD:
		HAL_GPIO_WritePin(motor->forwardGpio.port, motor->forwardGpio.pin,
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6898      	ldr	r0, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	899b      	ldrh	r3, [r3, #12]
 8002122:	2201      	movs	r2, #1
 8002124:	4619      	mov	r1, r3
 8002126:	f000 fc75 	bl	8002a14 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		HAL_GPIO_WritePin(motor->reverseGpio.port, motor->reverseGpio.pin,
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6918      	ldr	r0, [r3, #16]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	8a9b      	ldrh	r3, [r3, #20]
 8002132:	2200      	movs	r2, #0
 8002134:	4619      	mov	r1, r3
 8002136:	f000 fc6d 	bl	8002a14 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800213a:	e011      	b.n	8002160 <MotorSetDirection+0x5c>
	case DIR_REVERSE:
		HAL_GPIO_WritePin(motor->forwardGpio.port, motor->forwardGpio.pin,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6898      	ldr	r0, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	899b      	ldrh	r3, [r3, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	4619      	mov	r1, r3
 8002148:	f000 fc64 	bl	8002a14 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(motor->reverseGpio.port, motor->reverseGpio.pin,
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6918      	ldr	r0, [r3, #16]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	8a9b      	ldrh	r3, [r3, #20]
 8002154:	2201      	movs	r2, #1
 8002156:	4619      	mov	r1, r3
 8002158:	f000 fc5c 	bl	8002a14 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		break;
 800215c:	e000      	b.n	8002160 <MotorSetDirection+0x5c>
	default:
		break;
 800215e:	bf00      	nop
	}

	motor->direction = dir;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	78fa      	ldrb	r2, [r7, #3]
 8002164:	761a      	strb	r2, [r3, #24]

	MotorSetSpeed(motor, 0);
 8002166:	2100      	movs	r1, #0
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f810 	bl	800218e <MotorSetSpeed>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <MotorGetDirection>:

MotorDirection_t MotorGetDirection(Motor_t *motor) {
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
	return motor->direction;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	7e1b      	ldrb	r3, [r3, #24]
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <MotorSetSpeed>:


void MotorSetSpeed(Motor_t *motor, uint16_t speed) {
 800218e:	b480      	push	{r7}
 8002190:	b085      	sub	sp, #20
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	460b      	mov	r3, r1
 8002198:	807b      	strh	r3, [r7, #2]
	motor->speed = speed;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	887a      	ldrh	r2, [r7, #2]
 800219e:	835a      	strh	r2, [r3, #26]

	if(motor->speed > 0) {
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	8b5b      	ldrh	r3, [r3, #26]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d03e      	beq.n	8002226 <MotorSetSpeed+0x98>
		uint32_t pwmVal = (uint32_t)motor->speed + motor->offset;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	8b5b      	ldrh	r3, [r3, #26]
 80021ac:	461a      	mov	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	8b9b      	ldrh	r3, [r3, #28]
 80021b2:	4413      	add	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, pwmVal);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d105      	bne.n	80021ca <MotorSetSpeed+0x3c>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else {
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
	}
}
 80021c8:	e065      	b.n	8002296 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, pwmVal);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d105      	bne.n	80021de <MotorSetSpeed+0x50>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6393      	str	r3, [r2, #56]	; 0x38
 80021dc:	e05b      	b.n	8002296 <MotorSetSpeed+0x108>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d105      	bne.n	80021f2 <MotorSetSpeed+0x64>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	63d3      	str	r3, [r2, #60]	; 0x3c
 80021f0:	e051      	b.n	8002296 <MotorSetSpeed+0x108>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b0c      	cmp	r3, #12
 80021f8:	d105      	bne.n	8002206 <MotorSetSpeed+0x78>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6413      	str	r3, [r2, #64]	; 0x40
 8002204:	e047      	b.n	8002296 <MotorSetSpeed+0x108>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b10      	cmp	r3, #16
 800220c:	d105      	bne.n	800221a <MotorSetSpeed+0x8c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6593      	str	r3, [r2, #88]	; 0x58
 8002218:	e03d      	b.n	8002296 <MotorSetSpeed+0x108>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8002224:	e037      	b.n	8002296 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d105      	bne.n	800223a <MotorSetSpeed+0xac>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2200      	movs	r2, #0
 8002236:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002238:	e02d      	b.n	8002296 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b04      	cmp	r3, #4
 8002240:	d105      	bne.n	800224e <MotorSetSpeed+0xc0>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	2300      	movs	r3, #0
 800224a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800224c:	e023      	b.n	8002296 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b08      	cmp	r3, #8
 8002254:	d105      	bne.n	8002262 <MotorSetSpeed+0xd4>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	2300      	movs	r3, #0
 800225e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002260:	e019      	b.n	8002296 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b0c      	cmp	r3, #12
 8002268:	d105      	bne.n	8002276 <MotorSetSpeed+0xe8>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	2300      	movs	r3, #0
 8002272:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002274:	e00f      	b.n	8002296 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b10      	cmp	r3, #16
 800227c:	d105      	bne.n	800228a <MotorSetSpeed+0xfc>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	2300      	movs	r3, #0
 8002286:	6593      	str	r3, [r2, #88]	; 0x58
}
 8002288:	e005      	b.n	8002296 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	2300      	movs	r3, #0
 8002292:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8002294:	e7ff      	b.n	8002296 <MotorSetSpeed+0x108>
 8002296:	bf00      	nop
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <MotorSetPower>:

uint16_t MotorGetSpeed(Motor_t *motor) {
	return motor->speed;
}

void MotorSetPower(Motor_t *motor, int32_t power) {
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	6039      	str	r1, [r7, #0]
	//determine direction based on sign of power
	if(power < 0) {
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	da04      	bge.n	80022bc <MotorSetPower+0x1a>
		MotorSetDirection(motor, DIR_REVERSE);
 80022b2:	2100      	movs	r1, #0
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff ff25 	bl	8002104 <MotorSetDirection>
 80022ba:	e006      	b.n	80022ca <MotorSetPower+0x28>
	}
	else if(power > 0) {
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	dd03      	ble.n	80022ca <MotorSetPower+0x28>
		MotorSetDirection(motor, DIR_FORWARD);
 80022c2:	2102      	movs	r1, #2
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff ff1d 	bl	8002104 <MotorSetDirection>
	}

	MotorSetSpeed(motor, (uint16_t)Abs(power));
 80022ca:	6838      	ldr	r0, [r7, #0]
 80022cc:	f000 f80a 	bl	80022e4 <Abs>
 80022d0:	4603      	mov	r3, r0
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	4619      	mov	r1, r3
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff ff59 	bl	800218e <MotorSetSpeed>
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <Abs>:

static int32_t Abs(int32_t x) {
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	if(x < 0) {
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	da02      	bge.n	80022f8 <Abs+0x14>
		return x * -1;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	425b      	negs	r3, r3
 80022f6:	e000      	b.n	80022fa <Abs+0x16>
	}
	else {
		return x;
 80022f8:	687b      	ldr	r3, [r7, #4]
	}
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <GPIOInit>:
 *      Author: Jennyston
 */

#include "peripherals/gpio.h"

void GPIOInit(GPIO_t *gpio, GPIO_TypeDef *port, uint16_t pin) {
 8002306:	b480      	push	{r7}
 8002308:	b085      	sub	sp, #20
 800230a:	af00      	add	r7, sp, #0
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	4613      	mov	r3, r2
 8002312:	80fb      	strh	r3, [r7, #6]
	gpio->port = port;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	601a      	str	r2, [r3, #0]
	gpio->pin = pin;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	88fa      	ldrh	r2, [r7, #6]
 800231e:	809a      	strh	r2, [r3, #4]
//	gpio->hcomp = NULL;
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <GPIOGetState>:
//	gpio->port = NULL;
//	gpio->pin = 0;
//	gpio->hcomp = hcomp;
//}

GPIOState GPIOGetState(GPIO_t *gpio) {
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
	if(gpio->port != NULL) {
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00e      	beq.n	800235a <GPIOGetState+0x2e>
		return HAL_GPIO_ReadPin(gpio->port, gpio->pin) == GPIO_PIN_SET ?
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	889b      	ldrh	r3, [r3, #4]
 8002344:	4619      	mov	r1, r3
 8002346:	4610      	mov	r0, r2
 8002348:	f000 fb4c 	bl	80029e4 <HAL_GPIO_ReadPin>
 800234c:	4603      	mov	r3, r0
				GPIO_HIGH : GPIO_LOW;
 800234e:	2b01      	cmp	r3, #1
 8002350:	bf14      	ite	ne
 8002352:	2301      	movne	r3, #1
 8002354:	2300      	moveq	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	e000      	b.n	800235c <GPIOGetState+0x30>
//	else if (gpio->hcomp != NULL) {
//		return HAL_COMP_GetOutputLevel(gpio->hcomp) == COMP_OUTPUTLEVEL_HIGH ?
//				GPIO_HIGH : GPIO_LOW;
//	}
	else {
		return GPIO_LOW;
 800235a:	2301      	movs	r3, #1
	}
}
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800239c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002368:	f7ff fd28 	bl	8001dbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800236c:	480c      	ldr	r0, [pc, #48]	; (80023a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800236e:	490d      	ldr	r1, [pc, #52]	; (80023a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002370:	4a0d      	ldr	r2, [pc, #52]	; (80023a8 <LoopForever+0xe>)
  movs r3, #0
 8002372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002374:	e002      	b.n	800237c <LoopCopyDataInit>

08002376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800237a:	3304      	adds	r3, #4

0800237c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800237c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800237e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002380:	d3f9      	bcc.n	8002376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002382:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002384:	4c0a      	ldr	r4, [pc, #40]	; (80023b0 <LoopForever+0x16>)
  movs r3, #0
 8002386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002388:	e001      	b.n	800238e <LoopFillZerobss>

0800238a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800238a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800238c:	3204      	adds	r2, #4

0800238e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800238e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002390:	d3fb      	bcc.n	800238a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002392:	f00a fbfb 	bl	800cb8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002396:	f7fe fe13 	bl	8000fc0 <main>

0800239a <LoopForever>:

LoopForever:
    b LoopForever
 800239a:	e7fe      	b.n	800239a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800239c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80023a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023a4:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 80023a8:	0800fadc 	.word	0x0800fadc
  ldr r2, =_sbss
 80023ac:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 80023b0:	20000ea0 	.word	0x20000ea0

080023b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023b4:	e7fe      	b.n	80023b4 <ADC1_2_IRQHandler>
	...

080023b8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <HAL_Init+0x28>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a07      	ldr	r2, [pc, #28]	; (80023e0 <HAL_Init+0x28>)
 80023c2:	f043 0310 	orr.w	r3, r3, #16
 80023c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c8:	2003      	movs	r0, #3
 80023ca:	f000 f94f 	bl	800266c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ce:	2000      	movs	r0, #0
 80023d0:	f000 f808 	bl	80023e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023d4:	f7ff fa18 	bl	8001808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40022000 	.word	0x40022000

080023e4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <HAL_InitTick+0x54>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_InitTick+0x58>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4619      	mov	r1, r3
 80023f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80023fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002402:	4618      	mov	r0, r3
 8002404:	f000 f967 	bl	80026d6 <HAL_SYSTICK_Config>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e00e      	b.n	8002430 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b0f      	cmp	r3, #15
 8002416:	d80a      	bhi.n	800242e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002418:	2200      	movs	r2, #0
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	f04f 30ff 	mov.w	r0, #4294967295
 8002420:	f000 f92f 	bl	8002682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002424:	4a06      	ldr	r2, [pc, #24]	; (8002440 <HAL_InitTick+0x5c>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	e000      	b.n	8002430 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000000 	.word	0x20000000
 800243c:	20000008 	.word	0x20000008
 8002440:	20000004 	.word	0x20000004

08002444 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_IncTick+0x20>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_IncTick+0x24>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4413      	add	r3, r2
 8002454:	4a04      	ldr	r2, [pc, #16]	; (8002468 <HAL_IncTick+0x24>)
 8002456:	6013      	str	r3, [r2, #0]
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000008 	.word	0x20000008
 8002468:	200006bc 	.word	0x200006bc

0800246c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <HAL_GetTick+0x14>)
 8002472:	681b      	ldr	r3, [r3, #0]
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	200006bc 	.word	0x200006bc

08002484 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800248c:	f7ff ffee 	bl	800246c <HAL_GetTick>
 8002490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249c:	d005      	beq.n	80024aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800249e:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <HAL_Delay+0x44>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4413      	add	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80024aa:	bf00      	nop
 80024ac:	f7ff ffde 	bl	800246c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d8f7      	bhi.n	80024ac <HAL_Delay+0x28>
  {
  }
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000008 	.word	0x20000008

080024cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024dc:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <__NVIC_SetPriorityGrouping+0x44>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024e8:	4013      	ands	r3, r2
 80024ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024fe:	4a04      	ldr	r2, [pc, #16]	; (8002510 <__NVIC_SetPriorityGrouping+0x44>)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	60d3      	str	r3, [r2, #12]
}
 8002504:	bf00      	nop
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002518:	4b04      	ldr	r3, [pc, #16]	; (800252c <__NVIC_GetPriorityGrouping+0x18>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	0a1b      	lsrs	r3, r3, #8
 800251e:	f003 0307 	and.w	r3, r3, #7
}
 8002522:	4618      	mov	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	2b00      	cmp	r3, #0
 8002540:	db0b      	blt.n	800255a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	f003 021f 	and.w	r2, r3, #31
 8002548:	4907      	ldr	r1, [pc, #28]	; (8002568 <__NVIC_EnableIRQ+0x38>)
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	2001      	movs	r0, #1
 8002552:	fa00 f202 	lsl.w	r2, r0, r2
 8002556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	e000e100 	.word	0xe000e100

0800256c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	6039      	str	r1, [r7, #0]
 8002576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257c:	2b00      	cmp	r3, #0
 800257e:	db0a      	blt.n	8002596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	b2da      	uxtb	r2, r3
 8002584:	490c      	ldr	r1, [pc, #48]	; (80025b8 <__NVIC_SetPriority+0x4c>)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	0112      	lsls	r2, r2, #4
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	440b      	add	r3, r1
 8002590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002594:	e00a      	b.n	80025ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4908      	ldr	r1, [pc, #32]	; (80025bc <__NVIC_SetPriority+0x50>)
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	3b04      	subs	r3, #4
 80025a4:	0112      	lsls	r2, r2, #4
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	440b      	add	r3, r1
 80025aa:	761a      	strb	r2, [r3, #24]
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	e000e100 	.word	0xe000e100
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b089      	sub	sp, #36	; 0x24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f1c3 0307 	rsb	r3, r3, #7
 80025da:	2b04      	cmp	r3, #4
 80025dc:	bf28      	it	cs
 80025de:	2304      	movcs	r3, #4
 80025e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	3304      	adds	r3, #4
 80025e6:	2b06      	cmp	r3, #6
 80025e8:	d902      	bls.n	80025f0 <NVIC_EncodePriority+0x30>
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	3b03      	subs	r3, #3
 80025ee:	e000      	b.n	80025f2 <NVIC_EncodePriority+0x32>
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f4:	f04f 32ff 	mov.w	r2, #4294967295
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43da      	mvns	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	401a      	ands	r2, r3
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002608:	f04f 31ff 	mov.w	r1, #4294967295
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	fa01 f303 	lsl.w	r3, r1, r3
 8002612:	43d9      	mvns	r1, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002618:	4313      	orrs	r3, r2
         );
}
 800261a:	4618      	mov	r0, r3
 800261c:	3724      	adds	r7, #36	; 0x24
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
	...

08002628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3b01      	subs	r3, #1
 8002634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002638:	d301      	bcc.n	800263e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800263a:	2301      	movs	r3, #1
 800263c:	e00f      	b.n	800265e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800263e:	4a0a      	ldr	r2, [pc, #40]	; (8002668 <SysTick_Config+0x40>)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3b01      	subs	r3, #1
 8002644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002646:	210f      	movs	r1, #15
 8002648:	f04f 30ff 	mov.w	r0, #4294967295
 800264c:	f7ff ff8e 	bl	800256c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <SysTick_Config+0x40>)
 8002652:	2200      	movs	r2, #0
 8002654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002656:	4b04      	ldr	r3, [pc, #16]	; (8002668 <SysTick_Config+0x40>)
 8002658:	2207      	movs	r2, #7
 800265a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	e000e010 	.word	0xe000e010

0800266c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff ff29 	bl	80024cc <__NVIC_SetPriorityGrouping>
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b086      	sub	sp, #24
 8002686:	af00      	add	r7, sp, #0
 8002688:	4603      	mov	r3, r0
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
 800268e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002694:	f7ff ff3e 	bl	8002514 <__NVIC_GetPriorityGrouping>
 8002698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68b9      	ldr	r1, [r7, #8]
 800269e:	6978      	ldr	r0, [r7, #20]
 80026a0:	f7ff ff8e 	bl	80025c0 <NVIC_EncodePriority>
 80026a4:	4602      	mov	r2, r0
 80026a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026aa:	4611      	mov	r1, r2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ff5d 	bl	800256c <__NVIC_SetPriority>
}
 80026b2:	bf00      	nop
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	4603      	mov	r3, r0
 80026c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ff31 	bl	8002530 <__NVIC_EnableIRQ>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff ffa2 	bl	8002628 <SysTick_Config>
 80026e4:	4603      	mov	r3, r0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026fe:	e154      	b.n	80029aa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	2101      	movs	r1, #1
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	fa01 f303 	lsl.w	r3, r1, r3
 800270c:	4013      	ands	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 8146 	beq.w	80029a4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	2b01      	cmp	r3, #1
 8002722:	d005      	beq.n	8002730 <HAL_GPIO_Init+0x40>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d130      	bne.n	8002792 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	2203      	movs	r2, #3
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4013      	ands	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002766:	2201      	movs	r2, #1
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4013      	ands	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	091b      	lsrs	r3, r3, #4
 800277c:	f003 0201 	and.w	r2, r3, #1
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b03      	cmp	r3, #3
 800279c:	d017      	beq.n	80027ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	2203      	movs	r2, #3
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43db      	mvns	r3, r3
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4013      	ands	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d123      	bne.n	8002822 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	08da      	lsrs	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3208      	adds	r2, #8
 80027e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	220f      	movs	r2, #15
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	691a      	ldr	r2, [r3, #16]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	08da      	lsrs	r2, r3, #3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3208      	adds	r2, #8
 800281c:	6939      	ldr	r1, [r7, #16]
 800281e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	2203      	movs	r2, #3
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4013      	ands	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0203 	and.w	r2, r3, #3
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 80a0 	beq.w	80029a4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002864:	4b58      	ldr	r3, [pc, #352]	; (80029c8 <HAL_GPIO_Init+0x2d8>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	4a57      	ldr	r2, [pc, #348]	; (80029c8 <HAL_GPIO_Init+0x2d8>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	6193      	str	r3, [r2, #24]
 8002870:	4b55      	ldr	r3, [pc, #340]	; (80029c8 <HAL_GPIO_Init+0x2d8>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800287c:	4a53      	ldr	r2, [pc, #332]	; (80029cc <HAL_GPIO_Init+0x2dc>)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	089b      	lsrs	r3, r3, #2
 8002882:	3302      	adds	r3, #2
 8002884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002888:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	220f      	movs	r2, #15
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028a6:	d019      	beq.n	80028dc <HAL_GPIO_Init+0x1ec>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a49      	ldr	r2, [pc, #292]	; (80029d0 <HAL_GPIO_Init+0x2e0>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d013      	beq.n	80028d8 <HAL_GPIO_Init+0x1e8>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a48      	ldr	r2, [pc, #288]	; (80029d4 <HAL_GPIO_Init+0x2e4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d00d      	beq.n	80028d4 <HAL_GPIO_Init+0x1e4>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a47      	ldr	r2, [pc, #284]	; (80029d8 <HAL_GPIO_Init+0x2e8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d007      	beq.n	80028d0 <HAL_GPIO_Init+0x1e0>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a46      	ldr	r2, [pc, #280]	; (80029dc <HAL_GPIO_Init+0x2ec>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d101      	bne.n	80028cc <HAL_GPIO_Init+0x1dc>
 80028c8:	2304      	movs	r3, #4
 80028ca:	e008      	b.n	80028de <HAL_GPIO_Init+0x1ee>
 80028cc:	2305      	movs	r3, #5
 80028ce:	e006      	b.n	80028de <HAL_GPIO_Init+0x1ee>
 80028d0:	2303      	movs	r3, #3
 80028d2:	e004      	b.n	80028de <HAL_GPIO_Init+0x1ee>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e002      	b.n	80028de <HAL_GPIO_Init+0x1ee>
 80028d8:	2301      	movs	r3, #1
 80028da:	e000      	b.n	80028de <HAL_GPIO_Init+0x1ee>
 80028dc:	2300      	movs	r3, #0
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	f002 0203 	and.w	r2, r2, #3
 80028e4:	0092      	lsls	r2, r2, #2
 80028e6:	4093      	lsls	r3, r2
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028ee:	4937      	ldr	r1, [pc, #220]	; (80029cc <HAL_GPIO_Init+0x2dc>)
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	089b      	lsrs	r3, r3, #2
 80028f4:	3302      	adds	r3, #2
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028fc:	4b38      	ldr	r3, [pc, #224]	; (80029e0 <HAL_GPIO_Init+0x2f0>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	43db      	mvns	r3, r3
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4013      	ands	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4313      	orrs	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002920:	4a2f      	ldr	r2, [pc, #188]	; (80029e0 <HAL_GPIO_Init+0x2f0>)
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002926:	4b2e      	ldr	r3, [pc, #184]	; (80029e0 <HAL_GPIO_Init+0x2f0>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	43db      	mvns	r3, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4013      	ands	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4313      	orrs	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800294a:	4a25      	ldr	r2, [pc, #148]	; (80029e0 <HAL_GPIO_Init+0x2f0>)
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002950:	4b23      	ldr	r3, [pc, #140]	; (80029e0 <HAL_GPIO_Init+0x2f0>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	43db      	mvns	r3, r3
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4013      	ands	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4313      	orrs	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002974:	4a1a      	ldr	r2, [pc, #104]	; (80029e0 <HAL_GPIO_Init+0x2f0>)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800297a:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <HAL_GPIO_Init+0x2f0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	43db      	mvns	r3, r3
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4013      	ands	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4313      	orrs	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800299e:	4a10      	ldr	r2, [pc, #64]	; (80029e0 <HAL_GPIO_Init+0x2f0>)
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	3301      	adds	r3, #1
 80029a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f47f aea3 	bne.w	8002700 <HAL_GPIO_Init+0x10>
  }
}
 80029ba:	bf00      	nop
 80029bc:	bf00      	nop
 80029be:	371c      	adds	r7, #28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40010000 	.word	0x40010000
 80029d0:	48000400 	.word	0x48000400
 80029d4:	48000800 	.word	0x48000800
 80029d8:	48000c00 	.word	0x48000c00
 80029dc:	48001000 	.word	0x48001000
 80029e0:	40010400 	.word	0x40010400

080029e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691a      	ldr	r2, [r3, #16]
 80029f4:	887b      	ldrh	r3, [r7, #2]
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029fc:	2301      	movs	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
 8002a00:	e001      	b.n	8002a06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a02:	2300      	movs	r3, #0
 8002a04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	807b      	strh	r3, [r7, #2]
 8002a20:	4613      	mov	r3, r2
 8002a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a24:	787b      	ldrb	r3, [r7, #1]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a2a:	887a      	ldrh	r2, [r7, #2]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a30:	e002      	b.n	8002a38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a32:	887a      	ldrh	r2, [r7, #2]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e081      	b.n	8002b5a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fe fef0 	bl	8001850 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2224      	movs	r2, #36	; 0x24
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aa4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d107      	bne.n	8002abe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	e006      	b.n	8002acc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002aca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d104      	bne.n	8002ade <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002adc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002af0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691a      	ldr	r2, [r3, #16]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	69d9      	ldr	r1, [r3, #28]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1a      	ldr	r2, [r3, #32]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2220      	movs	r2, #32
 8002b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af02      	add	r7, sp, #8
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	607a      	str	r2, [r7, #4]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	460b      	mov	r3, r1
 8002b72:	817b      	strh	r3, [r7, #10]
 8002b74:	4613      	mov	r3, r2
 8002b76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	f040 80da 	bne.w	8002d3a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_I2C_Master_Transmit+0x30>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e0d3      	b.n	8002d3c <HAL_I2C_Master_Transmit+0x1d8>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b9c:	f7ff fc66 	bl	800246c <HAL_GetTick>
 8002ba0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	2319      	movs	r3, #25
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 f9e6 	bl	8002f80 <I2C_WaitOnFlagUntilTimeout>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e0be      	b.n	8002d3c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2221      	movs	r2, #33	; 0x21
 8002bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2210      	movs	r2, #16
 8002bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	893a      	ldrh	r2, [r7, #8]
 8002bde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2bff      	cmp	r3, #255	; 0xff
 8002bee:	d90e      	bls.n	8002c0e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	22ff      	movs	r2, #255	; 0xff
 8002bf4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	8979      	ldrh	r1, [r7, #10]
 8002bfe:	4b51      	ldr	r3, [pc, #324]	; (8002d44 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 fbf6 	bl	80033f8 <I2C_TransferConfig>
 8002c0c:	e06c      	b.n	8002ce8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	8979      	ldrh	r1, [r7, #10]
 8002c20:	4b48      	ldr	r3, [pc, #288]	; (8002d44 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 fbe5 	bl	80033f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002c2e:	e05b      	b.n	8002ce8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	6a39      	ldr	r1, [r7, #32]
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 f9f2 	bl	800301e <I2C_WaitOnTXISFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e07b      	b.n	8002d3c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	781a      	ldrb	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d034      	beq.n	8002ce8 <HAL_I2C_Master_Transmit+0x184>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d130      	bne.n	8002ce8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2180      	movs	r1, #128	; 0x80
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f975 	bl	8002f80 <I2C_WaitOnFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e04d      	b.n	8002d3c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2bff      	cmp	r3, #255	; 0xff
 8002ca8:	d90e      	bls.n	8002cc8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	22ff      	movs	r2, #255	; 0xff
 8002cae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	8979      	ldrh	r1, [r7, #10]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 fb99 	bl	80033f8 <I2C_TransferConfig>
 8002cc6:	e00f      	b.n	8002ce8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	8979      	ldrh	r1, [r7, #10]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 fb88 	bl	80033f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d19e      	bne.n	8002c30 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	6a39      	ldr	r1, [r7, #32]
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 f9d8 	bl	80030ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e01a      	b.n	8002d3c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6859      	ldr	r1, [r3, #4]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <HAL_I2C_Master_Transmit+0x1e4>)
 8002d1a:	400b      	ands	r3, r1
 8002d1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	e000      	b.n	8002d3c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002d3a:	2302      	movs	r3, #2
  }
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	80002000 	.word	0x80002000
 8002d48:	fe00e800 	.word	0xfe00e800

08002d4c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af02      	add	r7, sp, #8
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	607a      	str	r2, [r7, #4]
 8002d56:	461a      	mov	r2, r3
 8002d58:	460b      	mov	r3, r1
 8002d5a:	817b      	strh	r3, [r7, #10]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	f040 80db 	bne.w	8002f24 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <HAL_I2C_Master_Receive+0x30>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e0d4      	b.n	8002f26 <HAL_I2C_Master_Receive+0x1da>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d84:	f7ff fb72 	bl	800246c <HAL_GetTick>
 8002d88:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	2319      	movs	r3, #25
 8002d90:	2201      	movs	r2, #1
 8002d92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f8f2 	bl	8002f80 <I2C_WaitOnFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e0bf      	b.n	8002f26 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2222      	movs	r2, #34	; 0x22
 8002daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2210      	movs	r2, #16
 8002db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	893a      	ldrh	r2, [r7, #8]
 8002dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	2bff      	cmp	r3, #255	; 0xff
 8002dd6:	d90e      	bls.n	8002df6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	22ff      	movs	r2, #255	; 0xff
 8002ddc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	8979      	ldrh	r1, [r7, #10]
 8002de6:	4b52      	ldr	r3, [pc, #328]	; (8002f30 <HAL_I2C_Master_Receive+0x1e4>)
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 fb02 	bl	80033f8 <I2C_TransferConfig>
 8002df4:	e06d      	b.n	8002ed2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	8979      	ldrh	r1, [r7, #10]
 8002e08:	4b49      	ldr	r3, [pc, #292]	; (8002f30 <HAL_I2C_Master_Receive+0x1e4>)
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 faf1 	bl	80033f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002e16:	e05c      	b.n	8002ed2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	6a39      	ldr	r1, [r7, #32]
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 f989 	bl	8003134 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e07c      	b.n	8002f26 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d034      	beq.n	8002ed2 <HAL_I2C_Master_Receive+0x186>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d130      	bne.n	8002ed2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	2200      	movs	r2, #0
 8002e78:	2180      	movs	r1, #128	; 0x80
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f880 	bl	8002f80 <I2C_WaitOnFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e04d      	b.n	8002f26 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2bff      	cmp	r3, #255	; 0xff
 8002e92:	d90e      	bls.n	8002eb2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	22ff      	movs	r2, #255	; 0xff
 8002e98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	8979      	ldrh	r1, [r7, #10]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 faa4 	bl	80033f8 <I2C_TransferConfig>
 8002eb0:	e00f      	b.n	8002ed2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	8979      	ldrh	r1, [r7, #10]
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 fa93 	bl	80033f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d19d      	bne.n	8002e18 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	6a39      	ldr	r1, [r7, #32]
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 f8e3 	bl	80030ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e01a      	b.n	8002f26 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6859      	ldr	r1, [r3, #4]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <HAL_I2C_Master_Receive+0x1e8>)
 8002f04:	400b      	ands	r3, r1
 8002f06:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	e000      	b.n	8002f26 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002f24:	2302      	movs	r3, #2
  }
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	80002400 	.word	0x80002400
 8002f34:	fe00e800 	.word	0xfe00e800

08002f38 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d103      	bne.n	8002f56 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2200      	movs	r2, #0
 8002f54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d007      	beq.n	8002f74 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	619a      	str	r2, [r3, #24]
  }
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f90:	e031      	b.n	8002ff6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f98:	d02d      	beq.n	8002ff6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9a:	f7ff fa67 	bl	800246c <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d302      	bcc.n	8002fb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d122      	bne.n	8002ff6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	bf0c      	ite	eq
 8002fc0:	2301      	moveq	r3, #1
 8002fc2:	2300      	movne	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d113      	bne.n	8002ff6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	f043 0220 	orr.w	r2, r3, #32
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e00f      	b.n	8003016 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699a      	ldr	r2, [r3, #24]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4013      	ands	r3, r2
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	429a      	cmp	r2, r3
 8003004:	bf0c      	ite	eq
 8003006:	2301      	moveq	r3, #1
 8003008:	2300      	movne	r3, #0
 800300a:	b2db      	uxtb	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	429a      	cmp	r2, r3
 8003012:	d0be      	beq.n	8002f92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b084      	sub	sp, #16
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800302a:	e033      	b.n	8003094 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	68b9      	ldr	r1, [r7, #8]
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 f901 	bl	8003238 <I2C_IsErrorOccurred>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e031      	b.n	80030a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003046:	d025      	beq.n	8003094 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003048:	f7ff fa10 	bl	800246c <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	429a      	cmp	r2, r3
 8003056:	d302      	bcc.n	800305e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d11a      	bne.n	8003094 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b02      	cmp	r3, #2
 800306a:	d013      	beq.n	8003094 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003070:	f043 0220 	orr.w	r2, r3, #32
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e007      	b.n	80030a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d1c4      	bne.n	800302c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030b8:	e02f      	b.n	800311a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f8ba 	bl	8003238 <I2C_IsErrorOccurred>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e02d      	b.n	800312a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ce:	f7ff f9cd 	bl	800246c <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d302      	bcc.n	80030e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d11a      	bne.n	800311a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	f003 0320 	and.w	r3, r3, #32
 80030ee:	2b20      	cmp	r3, #32
 80030f0:	d013      	beq.n	800311a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	f043 0220 	orr.w	r2, r3, #32
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e007      	b.n	800312a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	f003 0320 	and.w	r3, r3, #32
 8003124:	2b20      	cmp	r3, #32
 8003126:	d1c8      	bne.n	80030ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003140:	e06b      	b.n	800321a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f876 	bl	8003238 <I2C_IsErrorOccurred>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e069      	b.n	800322a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	f003 0320 	and.w	r3, r3, #32
 8003160:	2b20      	cmp	r3, #32
 8003162:	d138      	bne.n	80031d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2b04      	cmp	r3, #4
 8003170:	d105      	bne.n	800317e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	e055      	b.n	800322a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	f003 0310 	and.w	r3, r3, #16
 8003188:	2b10      	cmp	r3, #16
 800318a:	d107      	bne.n	800319c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2210      	movs	r2, #16
 8003192:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2204      	movs	r2, #4
 8003198:	645a      	str	r2, [r3, #68]	; 0x44
 800319a:	e002      	b.n	80031a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2220      	movs	r2, #32
 80031a8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6859      	ldr	r1, [r3, #4]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4b1f      	ldr	r3, [pc, #124]	; (8003234 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80031b6:	400b      	ands	r3, r1
 80031b8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e029      	b.n	800322a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031d6:	f7ff f949 	bl	800246c <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d302      	bcc.n	80031ec <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d116      	bne.n	800321a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d00f      	beq.n	800321a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	f043 0220 	orr.w	r2, r3, #32
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e007      	b.n	800322a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b04      	cmp	r3, #4
 8003226:	d18c      	bne.n	8003142 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	fe00e800 	.word	0xfe00e800

08003238 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08a      	sub	sp, #40	; 0x28
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003252:	2300      	movs	r3, #0
 8003254:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b00      	cmp	r3, #0
 8003262:	d068      	beq.n	8003336 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2210      	movs	r2, #16
 800326a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800326c:	e049      	b.n	8003302 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003274:	d045      	beq.n	8003302 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003276:	f7ff f8f9 	bl	800246c <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	429a      	cmp	r2, r3
 8003284:	d302      	bcc.n	800328c <I2C_IsErrorOccurred+0x54>
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d13a      	bne.n	8003302 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003296:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800329e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ae:	d121      	bne.n	80032f4 <I2C_IsErrorOccurred+0xbc>
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032b6:	d01d      	beq.n	80032f4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80032b8:	7cfb      	ldrb	r3, [r7, #19]
 80032ba:	2b20      	cmp	r3, #32
 80032bc:	d01a      	beq.n	80032f4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032cc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80032ce:	f7ff f8cd 	bl	800246c <HAL_GetTick>
 80032d2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032d4:	e00e      	b.n	80032f4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80032d6:	f7ff f8c9 	bl	800246c <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b19      	cmp	r3, #25
 80032e2:	d907      	bls.n	80032f4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	f043 0320 	orr.w	r3, r3, #32
 80032ea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80032f2:	e006      	b.n	8003302 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b20      	cmp	r3, #32
 8003300:	d1e9      	bne.n	80032d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	f003 0320 	and.w	r3, r3, #32
 800330c:	2b20      	cmp	r3, #32
 800330e:	d003      	beq.n	8003318 <I2C_IsErrorOccurred+0xe0>
 8003310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0aa      	beq.n	800326e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800331c:	2b00      	cmp	r3, #0
 800331e:	d103      	bne.n	8003328 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2220      	movs	r2, #32
 8003326:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	f043 0304 	orr.w	r3, r3, #4
 800332e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00b      	beq.n	8003360 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003358:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00b      	beq.n	8003382 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	f043 0308 	orr.w	r3, r3, #8
 8003370:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800337a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00b      	beq.n	80033a4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	f043 0302 	orr.w	r3, r3, #2
 8003392:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800339c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80033a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01c      	beq.n	80033e6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f7ff fdc3 	bl	8002f38 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6859      	ldr	r1, [r3, #4]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <I2C_IsErrorOccurred+0x1bc>)
 80033be:	400b      	ands	r3, r1
 80033c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	431a      	orrs	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2220      	movs	r2, #32
 80033d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80033e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3728      	adds	r7, #40	; 0x28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	fe00e800 	.word	0xfe00e800

080033f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	607b      	str	r3, [r7, #4]
 8003402:	460b      	mov	r3, r1
 8003404:	817b      	strh	r3, [r7, #10]
 8003406:	4613      	mov	r3, r2
 8003408:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800340a:	897b      	ldrh	r3, [r7, #10]
 800340c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003410:	7a7b      	ldrb	r3, [r7, #9]
 8003412:	041b      	lsls	r3, r3, #16
 8003414:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003418:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	4313      	orrs	r3, r2
 8003422:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003426:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	0d5b      	lsrs	r3, r3, #21
 8003432:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003436:	4b08      	ldr	r3, [pc, #32]	; (8003458 <I2C_TransferConfig+0x60>)
 8003438:	430b      	orrs	r3, r1
 800343a:	43db      	mvns	r3, r3
 800343c:	ea02 0103 	and.w	r1, r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	430a      	orrs	r2, r1
 8003448:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800344a:	bf00      	nop
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	03ff63ff 	.word	0x03ff63ff

0800345c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b20      	cmp	r3, #32
 8003470:	d138      	bne.n	80034e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800347c:	2302      	movs	r3, #2
 800347e:	e032      	b.n	80034e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2224      	movs	r2, #36	; 0x24
 800348c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0201 	bic.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6819      	ldr	r1, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0201 	orr.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	e000      	b.n	80034e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034e4:	2302      	movs	r3, #2
  }
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b085      	sub	sp, #20
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b20      	cmp	r3, #32
 8003506:	d139      	bne.n	800357c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003512:	2302      	movs	r3, #2
 8003514:	e033      	b.n	800357e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2224      	movs	r2, #36	; 0x24
 8003522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0201 	bic.w	r2, r2, #1
 8003534:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003544:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	021b      	lsls	r3, r3, #8
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	4313      	orrs	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	e000      	b.n	800357e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800357c:	2302      	movs	r3, #2
  }
}
 800357e:	4618      	mov	r0, r3
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800358a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800358c:	b08b      	sub	sp, #44	; 0x2c
 800358e:	af06      	add	r7, sp, #24
 8003590:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0c4      	b.n	8003726 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d106      	bne.n	80035b6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f009 f82d 	bl	800c610 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2203      	movs	r2, #3
 80035ba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f005 f89a 	bl	80086fc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035c8:	2300      	movs	r3, #0
 80035ca:	73fb      	strb	r3, [r7, #15]
 80035cc:	e040      	b.n	8003650 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	440b      	add	r3, r1
 80035de:	3301      	adds	r3, #1
 80035e0:	2201      	movs	r2, #1
 80035e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	440b      	add	r3, r1
 80035f4:	7bfa      	ldrb	r2, [r7, #15]
 80035f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	4613      	mov	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	440b      	add	r3, r1
 8003608:	3303      	adds	r3, #3
 800360a:	2200      	movs	r2, #0
 800360c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800360e:	7bfa      	ldrb	r2, [r7, #15]
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	440b      	add	r3, r1
 800361c:	3338      	adds	r3, #56	; 0x38
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003622:	7bfa      	ldrb	r2, [r7, #15]
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	440b      	add	r3, r1
 8003630:	333c      	adds	r3, #60	; 0x3c
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003636:	7bfa      	ldrb	r2, [r7, #15]
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	4613      	mov	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	440b      	add	r3, r1
 8003644:	3340      	adds	r3, #64	; 0x40
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	3301      	adds	r3, #1
 800364e:	73fb      	strb	r3, [r7, #15]
 8003650:	7bfa      	ldrb	r2, [r7, #15]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	429a      	cmp	r2, r3
 8003658:	d3b9      	bcc.n	80035ce <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800365a:	2300      	movs	r3, #0
 800365c:	73fb      	strb	r3, [r7, #15]
 800365e:	e044      	b.n	80036ea <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003660:	7bfa      	ldrb	r2, [r7, #15]
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	440b      	add	r3, r1
 800366e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003672:	2200      	movs	r2, #0
 8003674:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003676:	7bfa      	ldrb	r2, [r7, #15]
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	4613      	mov	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	440b      	add	r3, r1
 8003684:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003688:	7bfa      	ldrb	r2, [r7, #15]
 800368a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800368c:	7bfa      	ldrb	r2, [r7, #15]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	440b      	add	r3, r1
 800369a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800369e:	2200      	movs	r2, #0
 80036a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036a2:	7bfa      	ldrb	r2, [r7, #15]
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	440b      	add	r3, r1
 80036b0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036b8:	7bfa      	ldrb	r2, [r7, #15]
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	440b      	add	r3, r1
 80036c6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036ce:	7bfa      	ldrb	r2, [r7, #15]
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	440b      	add	r3, r1
 80036dc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	3301      	adds	r3, #1
 80036e8:	73fb      	strb	r3, [r7, #15]
 80036ea:	7bfa      	ldrb	r2, [r7, #15]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d3b5      	bcc.n	8003660 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	603b      	str	r3, [r7, #0]
 80036fa:	687e      	ldr	r6, [r7, #4]
 80036fc:	466d      	mov	r5, sp
 80036fe:	f106 0410 	add.w	r4, r6, #16
 8003702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003704:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	602b      	str	r3, [r5, #0]
 800370a:	1d33      	adds	r3, r6, #4
 800370c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800370e:	6838      	ldr	r0, [r7, #0]
 8003710:	f005 f80f 	bl	8008732 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800372e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b082      	sub	sp, #8
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_PCD_Start+0x16>
 8003740:	2302      	movs	r3, #2
 8003742:	e016      	b.n	8003772 <HAL_PCD_Start+0x44>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f004 ffbc 	bl	80086ce <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003756:	2101      	movs	r1, #1
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f009 f9d9 	bl	800cb10 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f007 fa7b 	bl	800ac5e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b084      	sub	sp, #16
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f007 fa74 	bl	800ac74 <USB_ReadInterrupts>
 800378c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 fa9a 	bl	8003cd2 <PCD_EP_ISR_Handler>

    return;
 800379e:	e0bd      	b.n	800391c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d013      	beq.n	80037d2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037bc:	b292      	uxth	r2, r2
 80037be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f008 ffc5 	bl	800c752 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80037c8:	2100      	movs	r1, #0
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f8a9 	bl	8003922 <HAL_PCD_SetAddress>

    return;
 80037d0:	e0a4      	b.n	800391c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00c      	beq.n	80037f6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037ee:	b292      	uxth	r2, r2
 80037f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80037f4:	e092      	b.n	800391c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00c      	beq.n	800381a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003808:	b29a      	uxth	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003812:	b292      	uxth	r2, r2
 8003814:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003818:	e080      	b.n	800391c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d027      	beq.n	8003874 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800382c:	b29a      	uxth	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0204 	bic.w	r2, r2, #4
 8003836:	b292      	uxth	r2, r2
 8003838:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003844:	b29a      	uxth	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0208 	bic.w	r2, r2, #8
 800384e:	b292      	uxth	r2, r2
 8003850:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f008 ffb5 	bl	800c7c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003862:	b29a      	uxth	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800386c:	b292      	uxth	r2, r2
 800386e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003872:	e053      	b.n	800391c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800387a:	2b00      	cmp	r3, #0
 800387c:	d027      	beq.n	80038ce <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003886:	b29a      	uxth	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f042 0208 	orr.w	r2, r2, #8
 8003890:	b292      	uxth	r2, r2
 8003892:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800389e:	b29a      	uxth	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038a8:	b292      	uxth	r2, r2
 80038aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f042 0204 	orr.w	r2, r2, #4
 80038c0:	b292      	uxth	r2, r2
 80038c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f008 ff62 	bl	800c790 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80038cc:	e026      	b.n	800391c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00f      	beq.n	80038f8 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038ea:	b292      	uxth	r2, r2
 80038ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f008 ff20 	bl	800c736 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80038f6:	e011      	b.n	800391c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00c      	beq.n	800391c <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800390a:	b29a      	uxth	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003914:	b292      	uxth	r2, r2
 8003916:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800391a:	bf00      	nop
  }
}
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	460b      	mov	r3, r1
 800392c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003934:	2b01      	cmp	r3, #1
 8003936:	d101      	bne.n	800393c <HAL_PCD_SetAddress+0x1a>
 8003938:	2302      	movs	r3, #2
 800393a:	e013      	b.n	8003964 <HAL_PCD_SetAddress+0x42>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	78fa      	ldrb	r2, [r7, #3]
 8003948:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	78fa      	ldrb	r2, [r7, #3]
 8003952:	4611      	mov	r1, r2
 8003954:	4618      	mov	r0, r3
 8003956:	f007 f96e 	bl	800ac36 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	4608      	mov	r0, r1
 8003976:	4611      	mov	r1, r2
 8003978:	461a      	mov	r2, r3
 800397a:	4603      	mov	r3, r0
 800397c:	70fb      	strb	r3, [r7, #3]
 800397e:	460b      	mov	r3, r1
 8003980:	803b      	strh	r3, [r7, #0]
 8003982:	4613      	mov	r3, r2
 8003984:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800398a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800398e:	2b00      	cmp	r3, #0
 8003990:	da0e      	bge.n	80039b0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003992:	78fb      	ldrb	r3, [r7, #3]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	4413      	add	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2201      	movs	r2, #1
 80039ac:	705a      	strb	r2, [r3, #1]
 80039ae:	e00e      	b.n	80039ce <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	f003 0207 	and.w	r2, r3, #7
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	4413      	add	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80039ce:	78fb      	ldrb	r3, [r7, #3]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80039da:	883a      	ldrh	r2, [r7, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	78ba      	ldrb	r2, [r7, #2]
 80039e4:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039e6:	78bb      	ldrb	r3, [r7, #2]
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d102      	bne.n	80039f2 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <HAL_PCD_EP_Open+0x94>
 80039fc:	2302      	movs	r3, #2
 80039fe:	e00e      	b.n	8003a1e <HAL_PCD_EP_Open+0xb2>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68f9      	ldr	r1, [r7, #12]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f004 feb0 	bl	8008774 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003a1c:	7afb      	ldrb	r3, [r7, #11]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b084      	sub	sp, #16
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	460b      	mov	r3, r1
 8003a30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	da0e      	bge.n	8003a58 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a3a:	78fb      	ldrb	r3, [r7, #3]
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	4613      	mov	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4413      	add	r3, r2
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2201      	movs	r2, #1
 8003a54:	705a      	strb	r2, [r3, #1]
 8003a56:	e00e      	b.n	8003a76 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	f003 0207 	and.w	r2, r3, #7
 8003a5e:	4613      	mov	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_PCD_EP_Close+0x6a>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e00e      	b.n	8003aae <HAL_PCD_EP_Close+0x88>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68f9      	ldr	r1, [r7, #12]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f005 fa2c 	bl	8008efc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b086      	sub	sp, #24
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	603b      	str	r3, [r7, #0]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ac6:	7afb      	ldrb	r3, [r7, #11]
 8003ac8:	f003 0207 	and.w	r2, r3, #7
 8003acc:	4613      	mov	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	4413      	add	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2200      	movs	r2, #0
 8003aee:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	2200      	movs	r2, #0
 8003af4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003af6:	7afb      	ldrb	r3, [r7, #11]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6979      	ldr	r1, [r7, #20]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f005 fbe4 	bl	80092d6 <USB_EPStartXfer>

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	607a      	str	r2, [r7, #4]
 8003b22:	603b      	str	r3, [r7, #0]
 8003b24:	460b      	mov	r3, r1
 8003b26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b28:	7afb      	ldrb	r3, [r7, #11]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	4613      	mov	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	2201      	movs	r2, #1
 8003b62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b64:	7afb      	ldrb	r3, [r7, #11]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6979      	ldr	r1, [r7, #20]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f005 fbad 	bl	80092d6 <USB_EPStartXfer>

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3718      	adds	r7, #24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	460b      	mov	r3, r1
 8003b90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b92:	78fb      	ldrb	r3, [r7, #3]
 8003b94:	f003 0207 	and.w	r2, r3, #7
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d901      	bls.n	8003ba4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e03e      	b.n	8003c22 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ba4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	da0e      	bge.n	8003bca <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	705a      	strb	r2, [r3, #1]
 8003bc8:	e00c      	b.n	8003be4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bca:	78fa      	ldrb	r2, [r7, #3]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	4413      	add	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2201      	movs	r2, #1
 8003be8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bea:	78fb      	ldrb	r3, [r7, #3]
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_PCD_EP_SetStall+0x7e>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e00e      	b.n	8003c22 <HAL_PCD_EP_SetStall+0x9c>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68f9      	ldr	r1, [r7, #12]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f006 ff10 	bl	800aa38 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b084      	sub	sp, #16
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
 8003c32:	460b      	mov	r3, r1
 8003c34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c36:	78fb      	ldrb	r3, [r7, #3]
 8003c38:	f003 020f 	and.w	r2, r3, #15
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d901      	bls.n	8003c48 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e040      	b.n	8003cca <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	da0e      	bge.n	8003c6e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	4613      	mov	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	4413      	add	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	705a      	strb	r2, [r3, #1]
 8003c6c:	e00e      	b.n	8003c8c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c6e:	78fb      	ldrb	r3, [r7, #3]
 8003c70:	f003 0207 	and.w	r2, r3, #7
 8003c74:	4613      	mov	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	4413      	add	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c92:	78fb      	ldrb	r3, [r7, #3]
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_PCD_EP_ClrStall+0x82>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e00e      	b.n	8003cca <HAL_PCD_EP_ClrStall+0xa0>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68f9      	ldr	r1, [r7, #12]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f006 ff0d 	bl	800aada <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b096      	sub	sp, #88	; 0x58
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003cda:	e3bf      	b.n	800445c <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ce4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003ce8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003cf6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f040 8179 	bne.w	8003ff2 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003d00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d04:	f003 0310 	and.w	r3, r3, #16
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d152      	bne.n	8003db2 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d1c:	81fb      	strh	r3, [r7, #14]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	89fb      	ldrh	r3, [r7, #14]
 8003d24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3328      	adds	r3, #40	; 0x28
 8003d34:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	461a      	mov	r2, r3
 8003d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	4413      	add	r3, r2
 8003d4a:	3302      	adds	r3, #2
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6812      	ldr	r2, [r2, #0]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d60:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d64:	695a      	ldr	r2, [r3, #20]
 8003d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	441a      	add	r2, r3
 8003d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d6e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003d70:	2100      	movs	r1, #0
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f008 fcc5 	bl	800c702 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 836b 	beq.w	800445c <PCD_EP_ISR_Handler+0x78a>
 8003d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f040 8366 	bne.w	800445c <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	b292      	uxth	r2, r2
 8003da4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003db0:	e354      	b.n	800445c <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003db8:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003dc4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d034      	beq.n	8003e3a <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	461a      	mov	r2, r3
 8003ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	4413      	add	r3, r2
 8003de4:	3306      	adds	r3, #6
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dfa:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6818      	ldr	r0, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e08:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e0c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	f006 ff86 	bl	800ad20 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003e20:	4013      	ands	r3, r2
 8003e22:	823b      	strh	r3, [r7, #16]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	8a3a      	ldrh	r2, [r7, #16]
 8003e2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e2e:	b292      	uxth	r2, r2
 8003e30:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f008 fc38 	bl	800c6a8 <HAL_PCD_SetupStageCallback>
 8003e38:	e310      	b.n	800445c <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e3a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f280 830c 	bge.w	800445c <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003e50:	4013      	ands	r3, r2
 8003e52:	83fb      	strh	r3, [r7, #30]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	8bfa      	ldrh	r2, [r7, #30]
 8003e5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e5e:	b292      	uxth	r2, r2
 8003e60:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	4413      	add	r3, r2
 8003e76:	3306      	adds	r3, #6
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6812      	ldr	r2, [r2, #0]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e8c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d019      	beq.n	8003eca <PCD_EP_ISR_Handler+0x1f8>
 8003e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d015      	beq.n	8003eca <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6818      	ldr	r0, [r3, #0]
 8003ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ea4:	6959      	ldr	r1, [r3, #20]
 8003ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ea8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eac:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	f006 ff36 	bl	800ad20 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eb6:	695a      	ldr	r2, [r3, #20]
 8003eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eba:	69db      	ldr	r3, [r3, #28]
 8003ebc:	441a      	add	r2, r3
 8003ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ec0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f008 fc01 	bl	800c6cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003ed4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f040 82bd 	bne.w	800445c <PCD_EP_ISR_Handler+0x78a>
 8003ee2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ee6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003eea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003eee:	f000 82b5 	beq.w	800445c <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	61bb      	str	r3, [r7, #24]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	461a      	mov	r2, r3
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	4413      	add	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	801a      	strh	r2, [r3, #0]
 8003f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	2b3e      	cmp	r3, #62	; 0x3e
 8003f28:	d91d      	bls.n	8003f66 <PCD_EP_ISR_Handler+0x294>
 8003f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	647b      	str	r3, [r7, #68]	; 0x44
 8003f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f003 031f 	and.w	r3, r3, #31
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d102      	bne.n	8003f44 <PCD_EP_ISR_Handler+0x272>
 8003f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f40:	3b01      	subs	r3, #1
 8003f42:	647b      	str	r3, [r7, #68]	; 0x44
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	881b      	ldrh	r3, [r3, #0]
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	029b      	lsls	r3, r3, #10
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	4313      	orrs	r3, r2
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	801a      	strh	r2, [r3, #0]
 8003f64:	e026      	b.n	8003fb4 <PCD_EP_ISR_Handler+0x2e2>
 8003f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10a      	bne.n	8003f84 <PCD_EP_ISR_Handler+0x2b2>
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	801a      	strh	r2, [r3, #0]
 8003f82:	e017      	b.n	8003fb4 <PCD_EP_ISR_Handler+0x2e2>
 8003f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	085b      	lsrs	r3, r3, #1
 8003f8a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <PCD_EP_ISR_Handler+0x2cc>
 8003f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	029b      	lsls	r3, r3, #10
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	4313      	orrs	r3, r2
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc4:	827b      	strh	r3, [r7, #18]
 8003fc6:	8a7b      	ldrh	r3, [r7, #18]
 8003fc8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003fcc:	827b      	strh	r3, [r7, #18]
 8003fce:	8a7b      	ldrh	r3, [r7, #18]
 8003fd0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003fd4:	827b      	strh	r3, [r7, #18]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	8a7b      	ldrh	r3, [r7, #18]
 8003fdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	8013      	strh	r3, [r2, #0]
 8003ff0:	e234      	b.n	800445c <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004006:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800400a:	2b00      	cmp	r3, #0
 800400c:	f280 80fc 	bge.w	8004208 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	461a      	mov	r2, r3
 8004016:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	b29a      	uxth	r2, r3
 8004022:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004026:	4013      	ands	r3, r2
 8004028:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	461a      	mov	r2, r3
 8004032:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800403e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004042:	b292      	uxth	r2, r2
 8004044:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004046:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	4413      	add	r3, r2
 800405a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800405c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800405e:	7b1b      	ldrb	r3, [r3, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d125      	bne.n	80040b0 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800406c:	b29b      	uxth	r3, r3
 800406e:	461a      	mov	r2, r3
 8004070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	4413      	add	r3, r2
 8004078:	3306      	adds	r3, #6
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6812      	ldr	r2, [r2, #0]
 8004080:	4413      	add	r3, r2
 8004082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800408c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8004090:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 8092 	beq.w	80041be <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040a0:	6959      	ldr	r1, [r3, #20]
 80040a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040a4:	88da      	ldrh	r2, [r3, #6]
 80040a6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80040aa:	f006 fe39 	bl	800ad20 <USB_ReadPMA>
 80040ae:	e086      	b.n	80041be <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80040b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040b2:	78db      	ldrb	r3, [r3, #3]
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d10a      	bne.n	80040ce <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80040b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80040bc:	461a      	mov	r2, r3
 80040be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f9d9 	bl	8004478 <HAL_PCD_EP_DB_Receive>
 80040c6:	4603      	mov	r3, r0
 80040c8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80040cc:	e077      	b.n	80041be <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	b29b      	uxth	r3, r3
 80040e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	461a      	mov	r2, r3
 80040f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	441a      	add	r2, r3
 80040fa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80040fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800410a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800410e:	b29b      	uxth	r3, r3
 8004110:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	b29b      	uxth	r3, r3
 8004124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d024      	beq.n	8004176 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004134:	b29b      	uxth	r3, r3
 8004136:	461a      	mov	r2, r3
 8004138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	4413      	add	r3, r2
 8004140:	3302      	adds	r3, #2
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6812      	ldr	r2, [r2, #0]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004154:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004158:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800415c:	2b00      	cmp	r3, #0
 800415e:	d02e      	beq.n	80041be <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6818      	ldr	r0, [r3, #0]
 8004164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004166:	6959      	ldr	r1, [r3, #20]
 8004168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800416a:	891a      	ldrh	r2, [r3, #8]
 800416c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004170:	f006 fdd6 	bl	800ad20 <USB_ReadPMA>
 8004174:	e023      	b.n	80041be <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800417e:	b29b      	uxth	r3, r3
 8004180:	461a      	mov	r2, r3
 8004182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	4413      	add	r3, r2
 800418a:	3306      	adds	r3, #6
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6812      	ldr	r2, [r2, #0]
 8004192:	4413      	add	r3, r2
 8004194:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800419e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80041a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d009      	beq.n	80041be <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6818      	ldr	r0, [r3, #0]
 80041ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041b0:	6959      	ldr	r1, [r3, #20]
 80041b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041b4:	895a      	ldrh	r2, [r3, #10]
 80041b6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80041ba:	f006 fdb1 	bl	800ad20 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80041be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c0:	69da      	ldr	r2, [r3, #28]
 80041c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80041c6:	441a      	add	r2, r3
 80041c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80041cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ce:	695a      	ldr	r2, [r3, #20]
 80041d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80041d4:	441a      	add	r2, r3
 80041d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80041da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <PCD_EP_ISR_Handler+0x51c>
 80041e2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80041e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d206      	bcs.n	80041fc <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80041ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	4619      	mov	r1, r3
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f008 fa69 	bl	800c6cc <HAL_PCD_DataOutStageCallback>
 80041fa:	e005      	b.n	8004208 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004202:	4618      	mov	r0, r3
 8004204:	f005 f867 	bl	80092d6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004208:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800420c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 8123 	beq.w	800445c <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8004216:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	4613      	mov	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	4413      	add	r3, r2
 8004228:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	b29b      	uxth	r3, r3
 800423c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004244:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	441a      	add	r2, r3
 8004256:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800425a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800425e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004262:	b29b      	uxth	r3, r3
 8004264:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004268:	78db      	ldrb	r3, [r3, #3]
 800426a:	2b01      	cmp	r3, #1
 800426c:	f040 80a2 	bne.w	80043b4 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8004270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004272:	2200      	movs	r2, #0
 8004274:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004278:	7b1b      	ldrb	r3, [r3, #12]
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 8093 	beq.w	80043a6 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004280:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004288:	2b00      	cmp	r3, #0
 800428a:	d046      	beq.n	800431a <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800428c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800428e:	785b      	ldrb	r3, [r3, #1]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d126      	bne.n	80042e2 <PCD_EP_ISR_Handler+0x610>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	461a      	mov	r2, r3
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	4413      	add	r3, r2
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
 80042ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	011a      	lsls	r2, r3, #4
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	4413      	add	r3, r2
 80042b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042ba:	623b      	str	r3, [r7, #32]
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	801a      	strh	r2, [r3, #0]
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042da:	b29a      	uxth	r2, r3
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	801a      	strh	r2, [r3, #0]
 80042e0:	e061      	b.n	80043a6 <PCD_EP_ISR_Handler+0x6d4>
 80042e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042e4:	785b      	ldrb	r3, [r3, #1]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d15d      	bne.n	80043a6 <PCD_EP_ISR_Handler+0x6d4>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	461a      	mov	r2, r3
 80042fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fe:	4413      	add	r3, r2
 8004300:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	011a      	lsls	r2, r3, #4
 8004308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430a:	4413      	add	r3, r2
 800430c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004310:	62bb      	str	r3, [r7, #40]	; 0x28
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004314:	2200      	movs	r2, #0
 8004316:	801a      	strh	r2, [r3, #0]
 8004318:	e045      	b.n	80043a6 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004322:	785b      	ldrb	r3, [r3, #1]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d126      	bne.n	8004376 <PCD_EP_ISR_Handler+0x6a4>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	637b      	str	r3, [r7, #52]	; 0x34
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004336:	b29b      	uxth	r3, r3
 8004338:	461a      	mov	r2, r3
 800433a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800433c:	4413      	add	r3, r2
 800433e:	637b      	str	r3, [r7, #52]	; 0x34
 8004340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	011a      	lsls	r2, r3, #4
 8004346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004348:	4413      	add	r3, r2
 800434a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800434e:	633b      	str	r3, [r7, #48]	; 0x30
 8004350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	b29b      	uxth	r3, r3
 8004356:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800435a:	b29a      	uxth	r2, r3
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	801a      	strh	r2, [r3, #0]
 8004360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	b29b      	uxth	r3, r3
 8004366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800436a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800436e:	b29a      	uxth	r2, r3
 8004370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004372:	801a      	strh	r2, [r3, #0]
 8004374:	e017      	b.n	80043a6 <PCD_EP_ISR_Handler+0x6d4>
 8004376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004378:	785b      	ldrb	r3, [r3, #1]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d113      	bne.n	80043a6 <PCD_EP_ISR_Handler+0x6d4>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004386:	b29b      	uxth	r3, r3
 8004388:	461a      	mov	r2, r3
 800438a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800438c:	4413      	add	r3, r2
 800438e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	011a      	lsls	r2, r3, #4
 8004396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004398:	4413      	add	r3, r2
 800439a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800439e:	63bb      	str	r3, [r7, #56]	; 0x38
 80043a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a2:	2200      	movs	r2, #0
 80043a4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	4619      	mov	r1, r3
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f008 f9a8 	bl	800c702 <HAL_PCD_DataInStageCallback>
 80043b2:	e053      	b.n	800445c <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80043b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80043b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d146      	bne.n	800444e <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	461a      	mov	r2, r3
 80043cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	4413      	add	r3, r2
 80043d4:	3302      	adds	r3, #2
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6812      	ldr	r2, [r2, #0]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043e8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80043ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ee:	699a      	ldr	r2, [r3, #24]
 80043f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d907      	bls.n	8004408 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80043f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043fa:	699a      	ldr	r2, [r3, #24]
 80043fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004400:	1ad2      	subs	r2, r2, r3
 8004402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004404:	619a      	str	r2, [r3, #24]
 8004406:	e002      	b.n	800440e <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8004408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800440a:	2200      	movs	r2, #0
 800440c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800440e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d106      	bne.n	8004424 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	4619      	mov	r1, r3
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f008 f970 	bl	800c702 <HAL_PCD_DataInStageCallback>
 8004422:	e01b      	b.n	800445c <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004426:	695a      	ldr	r2, [r3, #20]
 8004428:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800442c:	441a      	add	r2, r3
 800442e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004430:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004434:	69da      	ldr	r2, [r3, #28]
 8004436:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800443a:	441a      	add	r2, r3
 800443c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800443e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004446:	4618      	mov	r0, r3
 8004448:	f004 ff45 	bl	80092d6 <USB_EPStartXfer>
 800444c:	e006      	b.n	800445c <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800444e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004452:	461a      	mov	r2, r3
 8004454:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f91b 	bl	8004692 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004464:	b29b      	uxth	r3, r3
 8004466:	b21b      	sxth	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	f6ff ac37 	blt.w	8003cdc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3758      	adds	r7, #88	; 0x58
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	4613      	mov	r3, r2
 8004484:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004486:	88fb      	ldrh	r3, [r7, #6]
 8004488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d07e      	beq.n	800458e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004498:	b29b      	uxth	r3, r3
 800449a:	461a      	mov	r2, r3
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	4413      	add	r3, r2
 80044a4:	3302      	adds	r3, #2
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	6812      	ldr	r2, [r2, #0]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044b8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	8b7b      	ldrh	r3, [r7, #26]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d306      	bcc.n	80044d2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	699a      	ldr	r2, [r3, #24]
 80044c8:	8b7b      	ldrh	r3, [r7, #26]
 80044ca:	1ad2      	subs	r2, r2, r3
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	619a      	str	r2, [r3, #24]
 80044d0:	e002      	b.n	80044d8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2200      	movs	r2, #0
 80044d6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d123      	bne.n	8004528 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	461a      	mov	r2, r3
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	881b      	ldrh	r3, [r3, #0]
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fa:	833b      	strh	r3, [r7, #24]
 80044fc:	8b3b      	ldrh	r3, [r7, #24]
 80044fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004502:	833b      	strh	r3, [r7, #24]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	461a      	mov	r2, r3
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	441a      	add	r2, r3
 8004512:	8b3b      	ldrh	r3, [r7, #24]
 8004514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800451c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004524:	b29b      	uxth	r3, r3
 8004526:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004528:	88fb      	ldrh	r3, [r7, #6]
 800452a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452e:	2b00      	cmp	r3, #0
 8004530:	d01f      	beq.n	8004572 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	b29b      	uxth	r3, r3
 8004544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454c:	82fb      	strh	r3, [r7, #22]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	441a      	add	r2, r3
 800455c:	8afb      	ldrh	r3, [r7, #22]
 800455e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800456a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800456e:	b29b      	uxth	r3, r3
 8004570:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004572:	8b7b      	ldrh	r3, [r7, #26]
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 8087 	beq.w	8004688 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6818      	ldr	r0, [r3, #0]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	6959      	ldr	r1, [r3, #20]
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	891a      	ldrh	r2, [r3, #8]
 8004586:	8b7b      	ldrh	r3, [r7, #26]
 8004588:	f006 fbca 	bl	800ad20 <USB_ReadPMA>
 800458c:	e07c      	b.n	8004688 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004596:	b29b      	uxth	r3, r3
 8004598:	461a      	mov	r2, r3
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	4413      	add	r3, r2
 80045a2:	3306      	adds	r3, #6
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	6812      	ldr	r2, [r2, #0]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045b6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	699a      	ldr	r2, [r3, #24]
 80045bc:	8b7b      	ldrh	r3, [r7, #26]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d306      	bcc.n	80045d0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	699a      	ldr	r2, [r3, #24]
 80045c6:	8b7b      	ldrh	r3, [r7, #26]
 80045c8:	1ad2      	subs	r2, r2, r3
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	619a      	str	r2, [r3, #24]
 80045ce:	e002      	b.n	80045d6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2200      	movs	r2, #0
 80045d4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d123      	bne.n	8004626 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	461a      	mov	r2, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4413      	add	r3, r2
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f8:	83fb      	strh	r3, [r7, #30]
 80045fa:	8bfb      	ldrh	r3, [r7, #30]
 80045fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004600:	83fb      	strh	r3, [r7, #30]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	461a      	mov	r2, r3
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	441a      	add	r2, r3
 8004610:	8bfb      	ldrh	r3, [r7, #30]
 8004612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800461a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800461e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004622:	b29b      	uxth	r3, r3
 8004624:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004626:	88fb      	ldrh	r3, [r7, #6]
 8004628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462c:	2b00      	cmp	r3, #0
 800462e:	d11f      	bne.n	8004670 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	461a      	mov	r2, r3
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	b29b      	uxth	r3, r3
 8004642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464a:	83bb      	strh	r3, [r7, #28]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	461a      	mov	r2, r3
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	441a      	add	r2, r3
 800465a:	8bbb      	ldrh	r3, [r7, #28]
 800465c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004660:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004668:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800466c:	b29b      	uxth	r3, r3
 800466e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004670:	8b7b      	ldrh	r3, [r7, #26]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d008      	beq.n	8004688 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	6959      	ldr	r1, [r3, #20]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	895a      	ldrh	r2, [r3, #10]
 8004682:	8b7b      	ldrh	r3, [r7, #26]
 8004684:	f006 fb4c 	bl	800ad20 <USB_ReadPMA>
    }
  }

  return count;
 8004688:	8b7b      	ldrh	r3, [r7, #26]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3720      	adds	r7, #32
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b0a4      	sub	sp, #144	; 0x90
 8004696:	af00      	add	r7, sp, #0
 8004698:	60f8      	str	r0, [r7, #12]
 800469a:	60b9      	str	r1, [r7, #8]
 800469c:	4613      	mov	r3, r2
 800469e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80046a0:	88fb      	ldrh	r3, [r7, #6]
 80046a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 81dd 	beq.w	8004a66 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	461a      	mov	r2, r3
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	4413      	add	r3, r2
 80046c0:	3302      	adds	r3, #2
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	6812      	ldr	r2, [r2, #0]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046d4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	699a      	ldr	r2, [r3, #24]
 80046dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d907      	bls.n	80046f4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	699a      	ldr	r2, [r3, #24]
 80046e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80046ec:	1ad2      	subs	r2, r2, r3
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	619a      	str	r2, [r3, #24]
 80046f2:	e002      	b.n	80046fa <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2200      	movs	r2, #0
 80046f8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f040 80b9 	bne.w	8004876 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	785b      	ldrb	r3, [r3, #1]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d126      	bne.n	800475a <HAL_PCD_EP_DB_Transmit+0xc8>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800471a:	b29b      	uxth	r3, r3
 800471c:	461a      	mov	r2, r3
 800471e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004720:	4413      	add	r3, r2
 8004722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	011a      	lsls	r2, r3, #4
 800472a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472c:	4413      	add	r3, r2
 800472e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004732:	62bb      	str	r3, [r7, #40]	; 0x28
 8004734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	b29b      	uxth	r3, r3
 800473a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800473e:	b29a      	uxth	r2, r3
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	801a      	strh	r2, [r3, #0]
 8004744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	b29b      	uxth	r3, r3
 800474a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800474e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004752:	b29a      	uxth	r2, r3
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	801a      	strh	r2, [r3, #0]
 8004758:	e01a      	b.n	8004790 <HAL_PCD_EP_DB_Transmit+0xfe>
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	785b      	ldrb	r3, [r3, #1]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d116      	bne.n	8004790 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	637b      	str	r3, [r7, #52]	; 0x34
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004770:	b29b      	uxth	r3, r3
 8004772:	461a      	mov	r2, r3
 8004774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004776:	4413      	add	r3, r2
 8004778:	637b      	str	r3, [r7, #52]	; 0x34
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	011a      	lsls	r2, r3, #4
 8004780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004782:	4413      	add	r3, r2
 8004784:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004788:	633b      	str	r3, [r7, #48]	; 0x30
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	2200      	movs	r2, #0
 800478e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	785b      	ldrb	r3, [r3, #1]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d126      	bne.n	80047ec <HAL_PCD_EP_DB_Transmit+0x15a>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	61fb      	str	r3, [r7, #28]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	461a      	mov	r2, r3
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	4413      	add	r3, r2
 80047b4:	61fb      	str	r3, [r7, #28]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	011a      	lsls	r2, r3, #4
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	4413      	add	r3, r2
 80047c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047c4:	61bb      	str	r3, [r7, #24]
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	801a      	strh	r2, [r3, #0]
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	801a      	strh	r2, [r3, #0]
 80047ea:	e017      	b.n	800481c <HAL_PCD_EP_DB_Transmit+0x18a>
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	785b      	ldrb	r3, [r3, #1]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d113      	bne.n	800481c <HAL_PCD_EP_DB_Transmit+0x18a>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	461a      	mov	r2, r3
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	4413      	add	r3, r2
 8004804:	627b      	str	r3, [r7, #36]	; 0x24
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	011a      	lsls	r2, r3, #4
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	4413      	add	r3, r2
 8004810:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004814:	623b      	str	r3, [r7, #32]
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	2200      	movs	r2, #0
 800481a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	4619      	mov	r1, r3
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f007 ff6d 	bl	800c702 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004828:	88fb      	ldrh	r3, [r7, #6]
 800482a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 82fc 	beq.w	8004e2c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	461a      	mov	r2, r3
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	881b      	ldrh	r3, [r3, #0]
 8004844:	b29b      	uxth	r3, r3
 8004846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800484a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484e:	82fb      	strh	r3, [r7, #22]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	461a      	mov	r2, r3
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	441a      	add	r2, r3
 800485e:	8afb      	ldrh	r3, [r7, #22]
 8004860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004868:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800486c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004870:	b29b      	uxth	r3, r3
 8004872:	8013      	strh	r3, [r2, #0]
 8004874:	e2da      	b.n	8004e2c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d021      	beq.n	80048c4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	461a      	mov	r2, r3
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	b29b      	uxth	r3, r3
 8004892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	461a      	mov	r2, r3
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	441a      	add	r2, r3
 80048ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80048b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	f040 82ae 	bne.w	8004e2c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	695a      	ldr	r2, [r3, #20]
 80048d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80048d8:	441a      	add	r2, r3
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	69da      	ldr	r2, [r3, #28]
 80048e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80048e6:	441a      	add	r2, r3
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	6a1a      	ldr	r2, [r3, #32]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d30b      	bcc.n	8004910 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	6a1a      	ldr	r2, [r3, #32]
 8004904:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004908:	1ad2      	subs	r2, r2, r3
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	621a      	str	r2, [r3, #32]
 800490e:	e017      	b.n	8004940 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d108      	bne.n	800492a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004918:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800491c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004928:	e00a      	b.n	8004940 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2200      	movs	r2, #0
 800493e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	785b      	ldrb	r3, [r3, #1]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d165      	bne.n	8004a14 <HAL_PCD_EP_DB_Transmit+0x382>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004956:	b29b      	uxth	r3, r3
 8004958:	461a      	mov	r2, r3
 800495a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800495c:	4413      	add	r3, r2
 800495e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	011a      	lsls	r2, r3, #4
 8004966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004968:	4413      	add	r3, r2
 800496a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800496e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	b29b      	uxth	r3, r3
 8004976:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800497a:	b29a      	uxth	r2, r3
 800497c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497e:	801a      	strh	r2, [r3, #0]
 8004980:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004984:	2b3e      	cmp	r3, #62	; 0x3e
 8004986:	d91d      	bls.n	80049c4 <HAL_PCD_EP_DB_Transmit+0x332>
 8004988:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800498c:	095b      	lsrs	r3, r3, #5
 800498e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004990:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004994:	f003 031f 	and.w	r3, r3, #31
 8004998:	2b00      	cmp	r3, #0
 800499a:	d102      	bne.n	80049a2 <HAL_PCD_EP_DB_Transmit+0x310>
 800499c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800499e:	3b01      	subs	r3, #1
 80049a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80049a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	029b      	lsls	r3, r3, #10
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	4313      	orrs	r3, r2
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049bc:	b29a      	uxth	r2, r3
 80049be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c0:	801a      	strh	r2, [r3, #0]
 80049c2:	e044      	b.n	8004a4e <HAL_PCD_EP_DB_Transmit+0x3bc>
 80049c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10a      	bne.n	80049e2 <HAL_PCD_EP_DB_Transmit+0x350>
 80049cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049da:	b29a      	uxth	r2, r3
 80049dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049de:	801a      	strh	r2, [r3, #0]
 80049e0:	e035      	b.n	8004a4e <HAL_PCD_EP_DB_Transmit+0x3bc>
 80049e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049e6:	085b      	lsrs	r3, r3, #1
 80049e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80049ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <HAL_PCD_EP_DB_Transmit+0x36a>
 80049f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049f8:	3301      	adds	r3, #1
 80049fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80049fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	029b      	lsls	r3, r3, #10
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a10:	801a      	strh	r2, [r3, #0]
 8004a12:	e01c      	b.n	8004a4e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	785b      	ldrb	r3, [r3, #1]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d118      	bne.n	8004a4e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	647b      	str	r3, [r7, #68]	; 0x44
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a30:	4413      	add	r3, r2
 8004a32:	647b      	str	r3, [r7, #68]	; 0x44
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	011a      	lsls	r2, r3, #4
 8004a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a42:	643b      	str	r3, [r7, #64]	; 0x40
 8004a44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a4c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6818      	ldr	r0, [r3, #0]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	6959      	ldr	r1, [r3, #20]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	891a      	ldrh	r2, [r3, #8]
 8004a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	f006 f918 	bl	800ac94 <USB_WritePMA>
 8004a64:	e1e2      	b.n	8004e2c <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	461a      	mov	r2, r3
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	4413      	add	r3, r2
 8004a7a:	3306      	adds	r3, #6
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	6812      	ldr	r2, [r2, #0]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a8e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	699a      	ldr	r2, [r3, #24]
 8004a96:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d307      	bcc.n	8004aae <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	699a      	ldr	r2, [r3, #24]
 8004aa2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004aa6:	1ad2      	subs	r2, r2, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	619a      	str	r2, [r3, #24]
 8004aac:	e002      	b.n	8004ab4 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f040 80c0 	bne.w	8004c3e <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	785b      	ldrb	r3, [r3, #1]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d126      	bne.n	8004b14 <HAL_PCD_EP_DB_Transmit+0x482>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ada:	4413      	add	r3, r2
 8004adc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	011a      	lsls	r2, r3, #4
 8004ae4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004aec:	67bb      	str	r3, [r7, #120]	; 0x78
 8004aee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004afc:	801a      	strh	r2, [r3, #0]
 8004afe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b10:	801a      	strh	r2, [r3, #0]
 8004b12:	e01a      	b.n	8004b4a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	785b      	ldrb	r3, [r3, #1]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d116      	bne.n	8004b4a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	667b      	str	r3, [r7, #100]	; 0x64
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b30:	4413      	add	r3, r2
 8004b32:	667b      	str	r3, [r7, #100]	; 0x64
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	011a      	lsls	r2, r3, #4
 8004b3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b42:	663b      	str	r3, [r7, #96]	; 0x60
 8004b44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b46:	2200      	movs	r2, #0
 8004b48:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	677b      	str	r3, [r7, #116]	; 0x74
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	785b      	ldrb	r3, [r3, #1]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d12b      	bne.n	8004bb0 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	461a      	mov	r2, r3
 8004b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b6c:	4413      	add	r3, r2
 8004b6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	011a      	lsls	r2, r3, #4
 8004b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b78:	4413      	add	r3, r2
 8004b7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b94:	801a      	strh	r2, [r3, #0]
 8004b96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004bac:	801a      	strh	r2, [r3, #0]
 8004bae:	e017      	b.n	8004be0 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	785b      	ldrb	r3, [r3, #1]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d113      	bne.n	8004be0 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bc6:	4413      	add	r3, r2
 8004bc8:	677b      	str	r3, [r7, #116]	; 0x74
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	011a      	lsls	r2, r3, #4
 8004bd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bd8:	673b      	str	r3, [r7, #112]	; 0x70
 8004bda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bdc:	2200      	movs	r2, #0
 8004bde:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	4619      	mov	r1, r3
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f007 fd8b 	bl	800c702 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004bec:	88fb      	ldrh	r3, [r7, #6]
 8004bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f040 811a 	bne.w	8004e2c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c12:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	441a      	add	r2, r3
 8004c24:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004c28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	8013      	strh	r3, [r2, #0]
 8004c3c:	e0f6      	b.n	8004e2c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c3e:	88fb      	ldrh	r3, [r7, #6]
 8004c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d121      	bne.n	8004c8c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c62:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	441a      	add	r2, r3
 8004c74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	f040 80ca 	bne.w	8004e2c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	695a      	ldr	r2, [r3, #20]
 8004c9c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004ca0:	441a      	add	r2, r3
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	69da      	ldr	r2, [r3, #28]
 8004caa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004cae:	441a      	add	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	6a1a      	ldr	r2, [r3, #32]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d30b      	bcc.n	8004cd8 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	6a1a      	ldr	r2, [r3, #32]
 8004ccc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cd0:	1ad2      	subs	r2, r2, r3
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	621a      	str	r2, [r3, #32]
 8004cd6:	e017      	b.n	8004d08 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d108      	bne.n	8004cf2 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004ce0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004ce4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004cf0:	e00a      	b.n	8004d08 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	657b      	str	r3, [r7, #84]	; 0x54
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	785b      	ldrb	r3, [r3, #1]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d165      	bne.n	8004de2 <HAL_PCD_EP_DB_Transmit+0x750>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	461a      	mov	r2, r3
 8004d28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d2a:	4413      	add	r3, r2
 8004d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	011a      	lsls	r2, r3, #4
 8004d34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d36:	4413      	add	r3, r2
 8004d38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d4c:	801a      	strh	r2, [r3, #0]
 8004d4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d52:	2b3e      	cmp	r3, #62	; 0x3e
 8004d54:	d91d      	bls.n	8004d92 <HAL_PCD_EP_DB_Transmit+0x700>
 8004d56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d62:	f003 031f 	and.w	r3, r3, #31
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d102      	bne.n	8004d70 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004d6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d72:	881b      	ldrh	r3, [r3, #0]
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	029b      	lsls	r3, r3, #10
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d8e:	801a      	strh	r2, [r3, #0]
 8004d90:	e041      	b.n	8004e16 <HAL_PCD_EP_DB_Transmit+0x784>
 8004d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10a      	bne.n	8004db0 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004d9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dac:	801a      	strh	r2, [r3, #0]
 8004dae:	e032      	b.n	8004e16 <HAL_PCD_EP_DB_Transmit+0x784>
 8004db0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004db4:	085b      	lsrs	r3, r3, #1
 8004db6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <HAL_PCD_EP_DB_Transmit+0x738>
 8004dc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	029b      	lsls	r3, r3, #10
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dde:	801a      	strh	r2, [r3, #0]
 8004de0:	e019      	b.n	8004e16 <HAL_PCD_EP_DB_Transmit+0x784>
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	785b      	ldrb	r3, [r3, #1]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d115      	bne.n	8004e16 <HAL_PCD_EP_DB_Transmit+0x784>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	461a      	mov	r2, r3
 8004df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004df8:	4413      	add	r3, r2
 8004dfa:	657b      	str	r3, [r7, #84]	; 0x54
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	011a      	lsls	r2, r3, #4
 8004e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e04:	4413      	add	r3, r2
 8004e06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e0a:	653b      	str	r3, [r7, #80]	; 0x50
 8004e0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e14:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6818      	ldr	r0, [r3, #0]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	6959      	ldr	r1, [r3, #20]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	895a      	ldrh	r2, [r3, #10]
 8004e22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	f005 ff34 	bl	800ac94 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	461a      	mov	r2, r3
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e46:	82bb      	strh	r3, [r7, #20]
 8004e48:	8abb      	ldrh	r3, [r7, #20]
 8004e4a:	f083 0310 	eor.w	r3, r3, #16
 8004e4e:	82bb      	strh	r3, [r7, #20]
 8004e50:	8abb      	ldrh	r3, [r7, #20]
 8004e52:	f083 0320 	eor.w	r3, r3, #32
 8004e56:	82bb      	strh	r3, [r7, #20]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	441a      	add	r2, r3
 8004e66:	8abb      	ldrh	r3, [r7, #20]
 8004e68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3790      	adds	r7, #144	; 0x90
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b087      	sub	sp, #28
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	607b      	str	r3, [r7, #4]
 8004e90:	460b      	mov	r3, r1
 8004e92:	817b      	strh	r3, [r7, #10]
 8004e94:	4613      	mov	r3, r2
 8004e96:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004e98:	897b      	ldrh	r3, [r7, #10]
 8004e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00b      	beq.n	8004ebc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ea4:	897b      	ldrh	r3, [r7, #10]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	e009      	b.n	8004ed0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ebc:	897a      	ldrh	r2, [r7, #10]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	4413      	add	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004ed0:	893b      	ldrh	r3, [r7, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d107      	bne.n	8004ee6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	80da      	strh	r2, [r3, #6]
 8004ee4:	e00b      	b.n	8004efe <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	0c1b      	lsrs	r3, r3, #16
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f1c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d102      	bne.n	8004f32 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	f001 b823 	b.w	8005f78 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 817d 	beq.w	8005242 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004f48:	4bbc      	ldr	r3, [pc, #752]	; (800523c <HAL_RCC_OscConfig+0x330>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f003 030c 	and.w	r3, r3, #12
 8004f50:	2b04      	cmp	r3, #4
 8004f52:	d00c      	beq.n	8004f6e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f54:	4bb9      	ldr	r3, [pc, #740]	; (800523c <HAL_RCC_OscConfig+0x330>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f003 030c 	and.w	r3, r3, #12
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d15c      	bne.n	800501a <HAL_RCC_OscConfig+0x10e>
 8004f60:	4bb6      	ldr	r3, [pc, #728]	; (800523c <HAL_RCC_OscConfig+0x330>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f6c:	d155      	bne.n	800501a <HAL_RCC_OscConfig+0x10e>
 8004f6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f72:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f76:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004f7a:	fa93 f3a3 	rbit	r3, r3
 8004f7e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004f82:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f86:	fab3 f383 	clz	r3, r3
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	095b      	lsrs	r3, r3, #5
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	f043 0301 	orr.w	r3, r3, #1
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d102      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x94>
 8004f9a:	4ba8      	ldr	r3, [pc, #672]	; (800523c <HAL_RCC_OscConfig+0x330>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	e015      	b.n	8004fcc <HAL_RCC_OscConfig+0xc0>
 8004fa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fa4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004fac:	fa93 f3a3 	rbit	r3, r3
 8004fb0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004fb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fb8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004fbc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004fc0:	fa93 f3a3 	rbit	r3, r3
 8004fc4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004fc8:	4b9c      	ldr	r3, [pc, #624]	; (800523c <HAL_RCC_OscConfig+0x330>)
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fd0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004fd4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004fd8:	fa92 f2a2 	rbit	r2, r2
 8004fdc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004fe0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004fe4:	fab2 f282 	clz	r2, r2
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	f042 0220 	orr.w	r2, r2, #32
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	f002 021f 	and.w	r2, r2, #31
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 811f 	beq.w	8005240 <HAL_RCC_OscConfig+0x334>
 8005002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005006:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	f040 8116 	bne.w	8005240 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	f000 bfaf 	b.w	8005f78 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800501a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800501e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800502a:	d106      	bne.n	800503a <HAL_RCC_OscConfig+0x12e>
 800502c:	4b83      	ldr	r3, [pc, #524]	; (800523c <HAL_RCC_OscConfig+0x330>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a82      	ldr	r2, [pc, #520]	; (800523c <HAL_RCC_OscConfig+0x330>)
 8005032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	e036      	b.n	80050a8 <HAL_RCC_OscConfig+0x19c>
 800503a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800503e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10c      	bne.n	8005064 <HAL_RCC_OscConfig+0x158>
 800504a:	4b7c      	ldr	r3, [pc, #496]	; (800523c <HAL_RCC_OscConfig+0x330>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a7b      	ldr	r2, [pc, #492]	; (800523c <HAL_RCC_OscConfig+0x330>)
 8005050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	4b79      	ldr	r3, [pc, #484]	; (800523c <HAL_RCC_OscConfig+0x330>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a78      	ldr	r2, [pc, #480]	; (800523c <HAL_RCC_OscConfig+0x330>)
 800505c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	e021      	b.n	80050a8 <HAL_RCC_OscConfig+0x19c>
 8005064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005068:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005074:	d10c      	bne.n	8005090 <HAL_RCC_OscConfig+0x184>
 8005076:	4b71      	ldr	r3, [pc, #452]	; (800523c <HAL_RCC_OscConfig+0x330>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a70      	ldr	r2, [pc, #448]	; (800523c <HAL_RCC_OscConfig+0x330>)
 800507c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	4b6e      	ldr	r3, [pc, #440]	; (800523c <HAL_RCC_OscConfig+0x330>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a6d      	ldr	r2, [pc, #436]	; (800523c <HAL_RCC_OscConfig+0x330>)
 8005088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	e00b      	b.n	80050a8 <HAL_RCC_OscConfig+0x19c>
 8005090:	4b6a      	ldr	r3, [pc, #424]	; (800523c <HAL_RCC_OscConfig+0x330>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a69      	ldr	r2, [pc, #420]	; (800523c <HAL_RCC_OscConfig+0x330>)
 8005096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	4b67      	ldr	r3, [pc, #412]	; (800523c <HAL_RCC_OscConfig+0x330>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a66      	ldr	r2, [pc, #408]	; (800523c <HAL_RCC_OscConfig+0x330>)
 80050a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050a6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80050a8:	4b64      	ldr	r3, [pc, #400]	; (800523c <HAL_RCC_OscConfig+0x330>)
 80050aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ac:	f023 020f 	bic.w	r2, r3, #15
 80050b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	495f      	ldr	r1, [pc, #380]	; (800523c <HAL_RCC_OscConfig+0x330>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d059      	beq.n	8005186 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d2:	f7fd f9cb 	bl	800246c <HAL_GetTick>
 80050d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050da:	e00a      	b.n	80050f2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050dc:	f7fd f9c6 	bl	800246c <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b64      	cmp	r3, #100	; 0x64
 80050ea:	d902      	bls.n	80050f2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	f000 bf43 	b.w	8005f78 <HAL_RCC_OscConfig+0x106c>
 80050f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050f6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80050fe:	fa93 f3a3 	rbit	r3, r3
 8005102:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005106:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800510a:	fab3 f383 	clz	r3, r3
 800510e:	b2db      	uxtb	r3, r3
 8005110:	095b      	lsrs	r3, r3, #5
 8005112:	b2db      	uxtb	r3, r3
 8005114:	f043 0301 	orr.w	r3, r3, #1
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b01      	cmp	r3, #1
 800511c:	d102      	bne.n	8005124 <HAL_RCC_OscConfig+0x218>
 800511e:	4b47      	ldr	r3, [pc, #284]	; (800523c <HAL_RCC_OscConfig+0x330>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	e015      	b.n	8005150 <HAL_RCC_OscConfig+0x244>
 8005124:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005128:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005130:	fa93 f3a3 	rbit	r3, r3
 8005134:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005138:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800513c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005140:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005144:	fa93 f3a3 	rbit	r3, r3
 8005148:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800514c:	4b3b      	ldr	r3, [pc, #236]	; (800523c <HAL_RCC_OscConfig+0x330>)
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005154:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005158:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800515c:	fa92 f2a2 	rbit	r2, r2
 8005160:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005164:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005168:	fab2 f282 	clz	r2, r2
 800516c:	b2d2      	uxtb	r2, r2
 800516e:	f042 0220 	orr.w	r2, r2, #32
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	f002 021f 	and.w	r2, r2, #31
 8005178:	2101      	movs	r1, #1
 800517a:	fa01 f202 	lsl.w	r2, r1, r2
 800517e:	4013      	ands	r3, r2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0ab      	beq.n	80050dc <HAL_RCC_OscConfig+0x1d0>
 8005184:	e05d      	b.n	8005242 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005186:	f7fd f971 	bl	800246c <HAL_GetTick>
 800518a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800518e:	e00a      	b.n	80051a6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005190:	f7fd f96c 	bl	800246c <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b64      	cmp	r3, #100	; 0x64
 800519e:	d902      	bls.n	80051a6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	f000 bee9 	b.w	8005f78 <HAL_RCC_OscConfig+0x106c>
 80051a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051aa:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80051b2:	fa93 f3a3 	rbit	r3, r3
 80051b6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80051ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051be:	fab3 f383 	clz	r3, r3
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	095b      	lsrs	r3, r3, #5
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	f043 0301 	orr.w	r3, r3, #1
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d102      	bne.n	80051d8 <HAL_RCC_OscConfig+0x2cc>
 80051d2:	4b1a      	ldr	r3, [pc, #104]	; (800523c <HAL_RCC_OscConfig+0x330>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	e015      	b.n	8005204 <HAL_RCC_OscConfig+0x2f8>
 80051d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051dc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80051e4:	fa93 f3a3 	rbit	r3, r3
 80051e8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80051ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051f0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80051f4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80051f8:	fa93 f3a3 	rbit	r3, r3
 80051fc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005200:	4b0e      	ldr	r3, [pc, #56]	; (800523c <HAL_RCC_OscConfig+0x330>)
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005208:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800520c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005210:	fa92 f2a2 	rbit	r2, r2
 8005214:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005218:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800521c:	fab2 f282 	clz	r2, r2
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	f042 0220 	orr.w	r2, r2, #32
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	f002 021f 	and.w	r2, r2, #31
 800522c:	2101      	movs	r1, #1
 800522e:	fa01 f202 	lsl.w	r2, r1, r2
 8005232:	4013      	ands	r3, r2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1ab      	bne.n	8005190 <HAL_RCC_OscConfig+0x284>
 8005238:	e003      	b.n	8005242 <HAL_RCC_OscConfig+0x336>
 800523a:	bf00      	nop
 800523c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005246:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 817d 	beq.w	8005552 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005258:	4ba6      	ldr	r3, [pc, #664]	; (80054f4 <HAL_RCC_OscConfig+0x5e8>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f003 030c 	and.w	r3, r3, #12
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00b      	beq.n	800527c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005264:	4ba3      	ldr	r3, [pc, #652]	; (80054f4 <HAL_RCC_OscConfig+0x5e8>)
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f003 030c 	and.w	r3, r3, #12
 800526c:	2b08      	cmp	r3, #8
 800526e:	d172      	bne.n	8005356 <HAL_RCC_OscConfig+0x44a>
 8005270:	4ba0      	ldr	r3, [pc, #640]	; (80054f4 <HAL_RCC_OscConfig+0x5e8>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d16c      	bne.n	8005356 <HAL_RCC_OscConfig+0x44a>
 800527c:	2302      	movs	r3, #2
 800527e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005282:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005286:	fa93 f3a3 	rbit	r3, r3
 800528a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800528e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005292:	fab3 f383 	clz	r3, r3
 8005296:	b2db      	uxtb	r3, r3
 8005298:	095b      	lsrs	r3, r3, #5
 800529a:	b2db      	uxtb	r3, r3
 800529c:	f043 0301 	orr.w	r3, r3, #1
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d102      	bne.n	80052ac <HAL_RCC_OscConfig+0x3a0>
 80052a6:	4b93      	ldr	r3, [pc, #588]	; (80054f4 <HAL_RCC_OscConfig+0x5e8>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	e013      	b.n	80052d4 <HAL_RCC_OscConfig+0x3c8>
 80052ac:	2302      	movs	r3, #2
 80052ae:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052b2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80052b6:	fa93 f3a3 	rbit	r3, r3
 80052ba:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80052be:	2302      	movs	r3, #2
 80052c0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80052c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80052c8:	fa93 f3a3 	rbit	r3, r3
 80052cc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80052d0:	4b88      	ldr	r3, [pc, #544]	; (80054f4 <HAL_RCC_OscConfig+0x5e8>)
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	2202      	movs	r2, #2
 80052d6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80052da:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80052de:	fa92 f2a2 	rbit	r2, r2
 80052e2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80052e6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80052ea:	fab2 f282 	clz	r2, r2
 80052ee:	b2d2      	uxtb	r2, r2
 80052f0:	f042 0220 	orr.w	r2, r2, #32
 80052f4:	b2d2      	uxtb	r2, r2
 80052f6:	f002 021f 	and.w	r2, r2, #31
 80052fa:	2101      	movs	r1, #1
 80052fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005300:	4013      	ands	r3, r2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <HAL_RCC_OscConfig+0x410>
 8005306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800530a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d002      	beq.n	800531c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	f000 be2e 	b.w	8005f78 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800531c:	4b75      	ldr	r3, [pc, #468]	; (80054f4 <HAL_RCC_OscConfig+0x5e8>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005328:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	21f8      	movs	r1, #248	; 0xf8
 8005332:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005336:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800533a:	fa91 f1a1 	rbit	r1, r1
 800533e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005342:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005346:	fab1 f181 	clz	r1, r1
 800534a:	b2c9      	uxtb	r1, r1
 800534c:	408b      	lsls	r3, r1
 800534e:	4969      	ldr	r1, [pc, #420]	; (80054f4 <HAL_RCC_OscConfig+0x5e8>)
 8005350:	4313      	orrs	r3, r2
 8005352:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005354:	e0fd      	b.n	8005552 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800535a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 8088 	beq.w	8005478 <HAL_RCC_OscConfig+0x56c>
 8005368:	2301      	movs	r3, #1
 800536a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800536e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005372:	fa93 f3a3 	rbit	r3, r3
 8005376:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800537a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800537e:	fab3 f383 	clz	r3, r3
 8005382:	b2db      	uxtb	r3, r3
 8005384:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005388:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	461a      	mov	r2, r3
 8005390:	2301      	movs	r3, #1
 8005392:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005394:	f7fd f86a 	bl	800246c <HAL_GetTick>
 8005398:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800539c:	e00a      	b.n	80053b4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800539e:	f7fd f865 	bl	800246c <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d902      	bls.n	80053b4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	f000 bde2 	b.w	8005f78 <HAL_RCC_OscConfig+0x106c>
 80053b4:	2302      	movs	r3, #2
 80053b6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ba:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80053be:	fa93 f3a3 	rbit	r3, r3
 80053c2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80053c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ca:	fab3 f383 	clz	r3, r3
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	095b      	lsrs	r3, r3, #5
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	f043 0301 	orr.w	r3, r3, #1
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d102      	bne.n	80053e4 <HAL_RCC_OscConfig+0x4d8>
 80053de:	4b45      	ldr	r3, [pc, #276]	; (80054f4 <HAL_RCC_OscConfig+0x5e8>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	e013      	b.n	800540c <HAL_RCC_OscConfig+0x500>
 80053e4:	2302      	movs	r3, #2
 80053e6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80053ee:	fa93 f3a3 	rbit	r3, r3
 80053f2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80053f6:	2302      	movs	r3, #2
 80053f8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80053fc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005400:	fa93 f3a3 	rbit	r3, r3
 8005404:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005408:	4b3a      	ldr	r3, [pc, #232]	; (80054f4 <HAL_RCC_OscConfig+0x5e8>)
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	2202      	movs	r2, #2
 800540e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005412:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005416:	fa92 f2a2 	rbit	r2, r2
 800541a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800541e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005422:	fab2 f282 	clz	r2, r2
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	f042 0220 	orr.w	r2, r2, #32
 800542c:	b2d2      	uxtb	r2, r2
 800542e:	f002 021f 	and.w	r2, r2, #31
 8005432:	2101      	movs	r1, #1
 8005434:	fa01 f202 	lsl.w	r2, r1, r2
 8005438:	4013      	ands	r3, r2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d0af      	beq.n	800539e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800543e:	4b2d      	ldr	r3, [pc, #180]	; (80054f4 <HAL_RCC_OscConfig+0x5e8>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800544a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	21f8      	movs	r1, #248	; 0xf8
 8005454:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005458:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800545c:	fa91 f1a1 	rbit	r1, r1
 8005460:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005464:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005468:	fab1 f181 	clz	r1, r1
 800546c:	b2c9      	uxtb	r1, r1
 800546e:	408b      	lsls	r3, r1
 8005470:	4920      	ldr	r1, [pc, #128]	; (80054f4 <HAL_RCC_OscConfig+0x5e8>)
 8005472:	4313      	orrs	r3, r2
 8005474:	600b      	str	r3, [r1, #0]
 8005476:	e06c      	b.n	8005552 <HAL_RCC_OscConfig+0x646>
 8005478:	2301      	movs	r3, #1
 800547a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005482:	fa93 f3a3 	rbit	r3, r3
 8005486:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800548a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800548e:	fab3 f383 	clz	r3, r3
 8005492:	b2db      	uxtb	r3, r3
 8005494:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005498:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	461a      	mov	r2, r3
 80054a0:	2300      	movs	r3, #0
 80054a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a4:	f7fc ffe2 	bl	800246c <HAL_GetTick>
 80054a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ac:	e00a      	b.n	80054c4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054ae:	f7fc ffdd 	bl	800246c <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d902      	bls.n	80054c4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	f000 bd5a 	b.w	8005f78 <HAL_RCC_OscConfig+0x106c>
 80054c4:	2302      	movs	r3, #2
 80054c6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80054ce:	fa93 f3a3 	rbit	r3, r3
 80054d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80054d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054da:	fab3 f383 	clz	r3, r3
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	095b      	lsrs	r3, r3, #5
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	f043 0301 	orr.w	r3, r3, #1
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d104      	bne.n	80054f8 <HAL_RCC_OscConfig+0x5ec>
 80054ee:	4b01      	ldr	r3, [pc, #4]	; (80054f4 <HAL_RCC_OscConfig+0x5e8>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	e015      	b.n	8005520 <HAL_RCC_OscConfig+0x614>
 80054f4:	40021000 	.word	0x40021000
 80054f8:	2302      	movs	r3, #2
 80054fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005502:	fa93 f3a3 	rbit	r3, r3
 8005506:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800550a:	2302      	movs	r3, #2
 800550c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005510:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005514:	fa93 f3a3 	rbit	r3, r3
 8005518:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800551c:	4bc8      	ldr	r3, [pc, #800]	; (8005840 <HAL_RCC_OscConfig+0x934>)
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	2202      	movs	r2, #2
 8005522:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005526:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800552a:	fa92 f2a2 	rbit	r2, r2
 800552e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005532:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005536:	fab2 f282 	clz	r2, r2
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	f042 0220 	orr.w	r2, r2, #32
 8005540:	b2d2      	uxtb	r2, r2
 8005542:	f002 021f 	and.w	r2, r2, #31
 8005546:	2101      	movs	r1, #1
 8005548:	fa01 f202 	lsl.w	r2, r1, r2
 800554c:	4013      	ands	r3, r2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1ad      	bne.n	80054ae <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005556:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0308 	and.w	r3, r3, #8
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 8110 	beq.w	8005788 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800556c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d079      	beq.n	800566c <HAL_RCC_OscConfig+0x760>
 8005578:	2301      	movs	r3, #1
 800557a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800557e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005582:	fa93 f3a3 	rbit	r3, r3
 8005586:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800558a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800558e:	fab3 f383 	clz	r3, r3
 8005592:	b2db      	uxtb	r3, r3
 8005594:	461a      	mov	r2, r3
 8005596:	4bab      	ldr	r3, [pc, #684]	; (8005844 <HAL_RCC_OscConfig+0x938>)
 8005598:	4413      	add	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	461a      	mov	r2, r3
 800559e:	2301      	movs	r3, #1
 80055a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055a2:	f7fc ff63 	bl	800246c <HAL_GetTick>
 80055a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055aa:	e00a      	b.n	80055c2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055ac:	f7fc ff5e 	bl	800246c <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d902      	bls.n	80055c2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	f000 bcdb 	b.w	8005f78 <HAL_RCC_OscConfig+0x106c>
 80055c2:	2302      	movs	r3, #2
 80055c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80055cc:	fa93 f3a3 	rbit	r3, r3
 80055d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80055d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80055dc:	2202      	movs	r2, #2
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	fa93 f2a3 	rbit	r2, r3
 80055ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005600:	2202      	movs	r2, #2
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	fa93 f2a3 	rbit	r2, r3
 8005612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005616:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800561a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800561c:	4b88      	ldr	r3, [pc, #544]	; (8005840 <HAL_RCC_OscConfig+0x934>)
 800561e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005624:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005628:	2102      	movs	r1, #2
 800562a:	6019      	str	r1, [r3, #0]
 800562c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005630:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	fa93 f1a3 	rbit	r1, r3
 800563a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800563e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005642:	6019      	str	r1, [r3, #0]
  return result;
 8005644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005648:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	fab3 f383 	clz	r3, r3
 8005652:	b2db      	uxtb	r3, r3
 8005654:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005658:	b2db      	uxtb	r3, r3
 800565a:	f003 031f 	and.w	r3, r3, #31
 800565e:	2101      	movs	r1, #1
 8005660:	fa01 f303 	lsl.w	r3, r1, r3
 8005664:	4013      	ands	r3, r2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d0a0      	beq.n	80055ac <HAL_RCC_OscConfig+0x6a0>
 800566a:	e08d      	b.n	8005788 <HAL_RCC_OscConfig+0x87c>
 800566c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005670:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005674:	2201      	movs	r2, #1
 8005676:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800567c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	fa93 f2a3 	rbit	r2, r3
 8005686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800568a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800568e:	601a      	str	r2, [r3, #0]
  return result;
 8005690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005694:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005698:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800569a:	fab3 f383 	clz	r3, r3
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	461a      	mov	r2, r3
 80056a2:	4b68      	ldr	r3, [pc, #416]	; (8005844 <HAL_RCC_OscConfig+0x938>)
 80056a4:	4413      	add	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	461a      	mov	r2, r3
 80056aa:	2300      	movs	r3, #0
 80056ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ae:	f7fc fedd 	bl	800246c <HAL_GetTick>
 80056b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056b6:	e00a      	b.n	80056ce <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056b8:	f7fc fed8 	bl	800246c <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d902      	bls.n	80056ce <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	f000 bc55 	b.w	8005f78 <HAL_RCC_OscConfig+0x106c>
 80056ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80056d6:	2202      	movs	r2, #2
 80056d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056de:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	fa93 f2a3 	rbit	r2, r3
 80056e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056ec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80056fa:	2202      	movs	r2, #2
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005702:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	fa93 f2a3 	rbit	r2, r3
 800570c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005710:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800571a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800571e:	2202      	movs	r2, #2
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005726:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	fa93 f2a3 	rbit	r2, r3
 8005730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005734:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005738:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800573a:	4b41      	ldr	r3, [pc, #260]	; (8005840 <HAL_RCC_OscConfig+0x934>)
 800573c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800573e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005742:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005746:	2102      	movs	r1, #2
 8005748:	6019      	str	r1, [r3, #0]
 800574a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800574e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	fa93 f1a3 	rbit	r1, r3
 8005758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800575c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005760:	6019      	str	r1, [r3, #0]
  return result;
 8005762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005766:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	fab3 f383 	clz	r3, r3
 8005770:	b2db      	uxtb	r3, r3
 8005772:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005776:	b2db      	uxtb	r3, r3
 8005778:	f003 031f 	and.w	r3, r3, #31
 800577c:	2101      	movs	r1, #1
 800577e:	fa01 f303 	lsl.w	r3, r1, r3
 8005782:	4013      	ands	r3, r2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d197      	bne.n	80056b8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800578c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0304 	and.w	r3, r3, #4
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 81a1 	beq.w	8005ae0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800579e:	2300      	movs	r3, #0
 80057a0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057a4:	4b26      	ldr	r3, [pc, #152]	; (8005840 <HAL_RCC_OscConfig+0x934>)
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d116      	bne.n	80057de <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057b0:	4b23      	ldr	r3, [pc, #140]	; (8005840 <HAL_RCC_OscConfig+0x934>)
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	4a22      	ldr	r2, [pc, #136]	; (8005840 <HAL_RCC_OscConfig+0x934>)
 80057b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ba:	61d3      	str	r3, [r2, #28]
 80057bc:	4b20      	ldr	r3, [pc, #128]	; (8005840 <HAL_RCC_OscConfig+0x934>)
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80057c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057c8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057d2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80057d6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80057d8:	2301      	movs	r3, #1
 80057da:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057de:	4b1a      	ldr	r3, [pc, #104]	; (8005848 <HAL_RCC_OscConfig+0x93c>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d11a      	bne.n	8005820 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057ea:	4b17      	ldr	r3, [pc, #92]	; (8005848 <HAL_RCC_OscConfig+0x93c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a16      	ldr	r2, [pc, #88]	; (8005848 <HAL_RCC_OscConfig+0x93c>)
 80057f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057f6:	f7fc fe39 	bl	800246c <HAL_GetTick>
 80057fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057fe:	e009      	b.n	8005814 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005800:	f7fc fe34 	bl	800246c <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	2b64      	cmp	r3, #100	; 0x64
 800580e:	d901      	bls.n	8005814 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e3b1      	b.n	8005f78 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005814:	4b0c      	ldr	r3, [pc, #48]	; (8005848 <HAL_RCC_OscConfig+0x93c>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581c:	2b00      	cmp	r3, #0
 800581e:	d0ef      	beq.n	8005800 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005824:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d10d      	bne.n	800584c <HAL_RCC_OscConfig+0x940>
 8005830:	4b03      	ldr	r3, [pc, #12]	; (8005840 <HAL_RCC_OscConfig+0x934>)
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	4a02      	ldr	r2, [pc, #8]	; (8005840 <HAL_RCC_OscConfig+0x934>)
 8005836:	f043 0301 	orr.w	r3, r3, #1
 800583a:	6213      	str	r3, [r2, #32]
 800583c:	e03c      	b.n	80058b8 <HAL_RCC_OscConfig+0x9ac>
 800583e:	bf00      	nop
 8005840:	40021000 	.word	0x40021000
 8005844:	10908120 	.word	0x10908120
 8005848:	40007000 	.word	0x40007000
 800584c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005850:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10c      	bne.n	8005876 <HAL_RCC_OscConfig+0x96a>
 800585c:	4bc1      	ldr	r3, [pc, #772]	; (8005b64 <HAL_RCC_OscConfig+0xc58>)
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	4ac0      	ldr	r2, [pc, #768]	; (8005b64 <HAL_RCC_OscConfig+0xc58>)
 8005862:	f023 0301 	bic.w	r3, r3, #1
 8005866:	6213      	str	r3, [r2, #32]
 8005868:	4bbe      	ldr	r3, [pc, #760]	; (8005b64 <HAL_RCC_OscConfig+0xc58>)
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	4abd      	ldr	r2, [pc, #756]	; (8005b64 <HAL_RCC_OscConfig+0xc58>)
 800586e:	f023 0304 	bic.w	r3, r3, #4
 8005872:	6213      	str	r3, [r2, #32]
 8005874:	e020      	b.n	80058b8 <HAL_RCC_OscConfig+0x9ac>
 8005876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800587a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	2b05      	cmp	r3, #5
 8005884:	d10c      	bne.n	80058a0 <HAL_RCC_OscConfig+0x994>
 8005886:	4bb7      	ldr	r3, [pc, #732]	; (8005b64 <HAL_RCC_OscConfig+0xc58>)
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	4ab6      	ldr	r2, [pc, #728]	; (8005b64 <HAL_RCC_OscConfig+0xc58>)
 800588c:	f043 0304 	orr.w	r3, r3, #4
 8005890:	6213      	str	r3, [r2, #32]
 8005892:	4bb4      	ldr	r3, [pc, #720]	; (8005b64 <HAL_RCC_OscConfig+0xc58>)
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	4ab3      	ldr	r2, [pc, #716]	; (8005b64 <HAL_RCC_OscConfig+0xc58>)
 8005898:	f043 0301 	orr.w	r3, r3, #1
 800589c:	6213      	str	r3, [r2, #32]
 800589e:	e00b      	b.n	80058b8 <HAL_RCC_OscConfig+0x9ac>
 80058a0:	4bb0      	ldr	r3, [pc, #704]	; (8005b64 <HAL_RCC_OscConfig+0xc58>)
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	4aaf      	ldr	r2, [pc, #700]	; (8005b64 <HAL_RCC_OscConfig+0xc58>)
 80058a6:	f023 0301 	bic.w	r3, r3, #1
 80058aa:	6213      	str	r3, [r2, #32]
 80058ac:	4bad      	ldr	r3, [pc, #692]	; (8005b64 <HAL_RCC_OscConfig+0xc58>)
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	4aac      	ldr	r2, [pc, #688]	; (8005b64 <HAL_RCC_OscConfig+0xc58>)
 80058b2:	f023 0304 	bic.w	r3, r3, #4
 80058b6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 8081 	beq.w	80059cc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058ca:	f7fc fdcf 	bl	800246c <HAL_GetTick>
 80058ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058d2:	e00b      	b.n	80058ec <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058d4:	f7fc fdca 	bl	800246c <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d901      	bls.n	80058ec <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e345      	b.n	8005f78 <HAL_RCC_OscConfig+0x106c>
 80058ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058f0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80058f4:	2202      	movs	r2, #2
 80058f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058fc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	fa93 f2a3 	rbit	r2, r3
 8005906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800590a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005914:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005918:	2202      	movs	r2, #2
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005920:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	fa93 f2a3 	rbit	r2, r3
 800592a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800592e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005932:	601a      	str	r2, [r3, #0]
  return result;
 8005934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005938:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800593c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800593e:	fab3 f383 	clz	r3, r3
 8005942:	b2db      	uxtb	r3, r3
 8005944:	095b      	lsrs	r3, r3, #5
 8005946:	b2db      	uxtb	r3, r3
 8005948:	f043 0302 	orr.w	r3, r3, #2
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d102      	bne.n	8005958 <HAL_RCC_OscConfig+0xa4c>
 8005952:	4b84      	ldr	r3, [pc, #528]	; (8005b64 <HAL_RCC_OscConfig+0xc58>)
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	e013      	b.n	8005980 <HAL_RCC_OscConfig+0xa74>
 8005958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800595c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005960:	2202      	movs	r2, #2
 8005962:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005968:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	fa93 f2a3 	rbit	r2, r3
 8005972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005976:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	4b79      	ldr	r3, [pc, #484]	; (8005b64 <HAL_RCC_OscConfig+0xc58>)
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005984:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005988:	2102      	movs	r1, #2
 800598a:	6011      	str	r1, [r2, #0]
 800598c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005990:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005994:	6812      	ldr	r2, [r2, #0]
 8005996:	fa92 f1a2 	rbit	r1, r2
 800599a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800599e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80059a2:	6011      	str	r1, [r2, #0]
  return result;
 80059a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80059a8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80059ac:	6812      	ldr	r2, [r2, #0]
 80059ae:	fab2 f282 	clz	r2, r2
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059b8:	b2d2      	uxtb	r2, r2
 80059ba:	f002 021f 	and.w	r2, r2, #31
 80059be:	2101      	movs	r1, #1
 80059c0:	fa01 f202 	lsl.w	r2, r1, r2
 80059c4:	4013      	ands	r3, r2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d084      	beq.n	80058d4 <HAL_RCC_OscConfig+0x9c8>
 80059ca:	e07f      	b.n	8005acc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059cc:	f7fc fd4e 	bl	800246c <HAL_GetTick>
 80059d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059d4:	e00b      	b.n	80059ee <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059d6:	f7fc fd49 	bl	800246c <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e2c4      	b.n	8005f78 <HAL_RCC_OscConfig+0x106c>
 80059ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059f2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80059f6:	2202      	movs	r2, #2
 80059f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059fe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	fa93 f2a3 	rbit	r2, r3
 8005a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a0c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a16:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a22:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	fa93 f2a3 	rbit	r2, r3
 8005a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a30:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005a34:	601a      	str	r2, [r3, #0]
  return result;
 8005a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a3a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005a3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a40:	fab3 f383 	clz	r3, r3
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	095b      	lsrs	r3, r3, #5
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	f043 0302 	orr.w	r3, r3, #2
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d102      	bne.n	8005a5a <HAL_RCC_OscConfig+0xb4e>
 8005a54:	4b43      	ldr	r3, [pc, #268]	; (8005b64 <HAL_RCC_OscConfig+0xc58>)
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	e013      	b.n	8005a82 <HAL_RCC_OscConfig+0xb76>
 8005a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a5e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005a62:	2202      	movs	r2, #2
 8005a64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a6a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	fa93 f2a3 	rbit	r2, r3
 8005a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a78:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	4b39      	ldr	r3, [pc, #228]	; (8005b64 <HAL_RCC_OscConfig+0xc58>)
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a86:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005a8a:	2102      	movs	r1, #2
 8005a8c:	6011      	str	r1, [r2, #0]
 8005a8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a92:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005a96:	6812      	ldr	r2, [r2, #0]
 8005a98:	fa92 f1a2 	rbit	r1, r2
 8005a9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005aa0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005aa4:	6011      	str	r1, [r2, #0]
  return result;
 8005aa6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005aaa:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005aae:	6812      	ldr	r2, [r2, #0]
 8005ab0:	fab2 f282 	clz	r2, r2
 8005ab4:	b2d2      	uxtb	r2, r2
 8005ab6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aba:	b2d2      	uxtb	r2, r2
 8005abc:	f002 021f 	and.w	r2, r2, #31
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d184      	bne.n	80059d6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005acc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d105      	bne.n	8005ae0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ad4:	4b23      	ldr	r3, [pc, #140]	; (8005b64 <HAL_RCC_OscConfig+0xc58>)
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	4a22      	ldr	r2, [pc, #136]	; (8005b64 <HAL_RCC_OscConfig+0xc58>)
 8005ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ade:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ae4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 8242 	beq.w	8005f76 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005af2:	4b1c      	ldr	r3, [pc, #112]	; (8005b64 <HAL_RCC_OscConfig+0xc58>)
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f003 030c 	and.w	r3, r3, #12
 8005afa:	2b08      	cmp	r3, #8
 8005afc:	f000 8213 	beq.w	8005f26 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	f040 8162 	bne.w	8005dd6 <HAL_RCC_OscConfig+0xeca>
 8005b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b16:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005b1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b24:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	fa93 f2a3 	rbit	r2, r3
 8005b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b32:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005b36:	601a      	str	r2, [r3, #0]
  return result;
 8005b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b3c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005b40:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b42:	fab3 f383 	clz	r3, r3
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005b4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	461a      	mov	r2, r3
 8005b54:	2300      	movs	r3, #0
 8005b56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b58:	f7fc fc88 	bl	800246c <HAL_GetTick>
 8005b5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b60:	e00c      	b.n	8005b7c <HAL_RCC_OscConfig+0xc70>
 8005b62:	bf00      	nop
 8005b64:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b68:	f7fc fc80 	bl	800246c <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d901      	bls.n	8005b7c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e1fd      	b.n	8005f78 <HAL_RCC_OscConfig+0x106c>
 8005b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b80:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005b84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b8e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	fa93 f2a3 	rbit	r2, r3
 8005b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b9c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005ba0:	601a      	str	r2, [r3, #0]
  return result;
 8005ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ba6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005baa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bac:	fab3 f383 	clz	r3, r3
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	095b      	lsrs	r3, r3, #5
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	f043 0301 	orr.w	r3, r3, #1
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d102      	bne.n	8005bc6 <HAL_RCC_OscConfig+0xcba>
 8005bc0:	4bb0      	ldr	r3, [pc, #704]	; (8005e84 <HAL_RCC_OscConfig+0xf78>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	e027      	b.n	8005c16 <HAL_RCC_OscConfig+0xd0a>
 8005bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bca:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005bce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bd8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	fa93 f2a3 	rbit	r2, r3
 8005be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005be6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005bea:	601a      	str	r2, [r3, #0]
 8005bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bf0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005bf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bfe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	fa93 f2a3 	rbit	r2, r3
 8005c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c0c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	4b9c      	ldr	r3, [pc, #624]	; (8005e84 <HAL_RCC_OscConfig+0xf78>)
 8005c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c1a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005c1e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005c22:	6011      	str	r1, [r2, #0]
 8005c24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c28:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005c2c:	6812      	ldr	r2, [r2, #0]
 8005c2e:	fa92 f1a2 	rbit	r1, r2
 8005c32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c36:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005c3a:	6011      	str	r1, [r2, #0]
  return result;
 8005c3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c40:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005c44:	6812      	ldr	r2, [r2, #0]
 8005c46:	fab2 f282 	clz	r2, r2
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	f042 0220 	orr.w	r2, r2, #32
 8005c50:	b2d2      	uxtb	r2, r2
 8005c52:	f002 021f 	and.w	r2, r2, #31
 8005c56:	2101      	movs	r1, #1
 8005c58:	fa01 f202 	lsl.w	r2, r1, r2
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d182      	bne.n	8005b68 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c62:	4b88      	ldr	r3, [pc, #544]	; (8005e84 <HAL_RCC_OscConfig+0xf78>)
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	430b      	orrs	r3, r1
 8005c84:	497f      	ldr	r1, [pc, #508]	; (8005e84 <HAL_RCC_OscConfig+0xf78>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	604b      	str	r3, [r1, #4]
 8005c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c8e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005c92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c9c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	fa93 f2a3 	rbit	r2, r3
 8005ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005caa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005cae:	601a      	str	r2, [r3, #0]
  return result;
 8005cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cb4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005cb8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cba:	fab3 f383 	clz	r3, r3
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005cc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	461a      	mov	r2, r3
 8005ccc:	2301      	movs	r3, #1
 8005cce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd0:	f7fc fbcc 	bl	800246c <HAL_GetTick>
 8005cd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005cd8:	e009      	b.n	8005cee <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cda:	f7fc fbc7 	bl	800246c <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e144      	b.n	8005f78 <HAL_RCC_OscConfig+0x106c>
 8005cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cf2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005cf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005cfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d00:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	fa93 f2a3 	rbit	r2, r3
 8005d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d0e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005d12:	601a      	str	r2, [r3, #0]
  return result;
 8005d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d18:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005d1c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d1e:	fab3 f383 	clz	r3, r3
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	095b      	lsrs	r3, r3, #5
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	f043 0301 	orr.w	r3, r3, #1
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d102      	bne.n	8005d38 <HAL_RCC_OscConfig+0xe2c>
 8005d32:	4b54      	ldr	r3, [pc, #336]	; (8005e84 <HAL_RCC_OscConfig+0xf78>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	e027      	b.n	8005d88 <HAL_RCC_OscConfig+0xe7c>
 8005d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d3c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005d40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d4a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	fa93 f2a3 	rbit	r2, r3
 8005d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d58:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d62:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005d66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d70:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	fa93 f2a3 	rbit	r2, r3
 8005d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d7e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	4b3f      	ldr	r3, [pc, #252]	; (8005e84 <HAL_RCC_OscConfig+0xf78>)
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d8c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005d90:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005d94:	6011      	str	r1, [r2, #0]
 8005d96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d9a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005d9e:	6812      	ldr	r2, [r2, #0]
 8005da0:	fa92 f1a2 	rbit	r1, r2
 8005da4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005da8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005dac:	6011      	str	r1, [r2, #0]
  return result;
 8005dae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005db2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005db6:	6812      	ldr	r2, [r2, #0]
 8005db8:	fab2 f282 	clz	r2, r2
 8005dbc:	b2d2      	uxtb	r2, r2
 8005dbe:	f042 0220 	orr.w	r2, r2, #32
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	f002 021f 	and.w	r2, r2, #31
 8005dc8:	2101      	movs	r1, #1
 8005dca:	fa01 f202 	lsl.w	r2, r1, r2
 8005dce:	4013      	ands	r3, r2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d082      	beq.n	8005cda <HAL_RCC_OscConfig+0xdce>
 8005dd4:	e0cf      	b.n	8005f76 <HAL_RCC_OscConfig+0x106a>
 8005dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dda:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005dde:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005de2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005de8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	fa93 f2a3 	rbit	r2, r3
 8005df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005df6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005dfa:	601a      	str	r2, [r3, #0]
  return result;
 8005dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e00:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005e04:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e06:	fab3 f383 	clz	r3, r3
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005e10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	461a      	mov	r2, r3
 8005e18:	2300      	movs	r3, #0
 8005e1a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e1c:	f7fc fb26 	bl	800246c <HAL_GetTick>
 8005e20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e24:	e009      	b.n	8005e3a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e26:	f7fc fb21 	bl	800246c <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e09e      	b.n	8005f78 <HAL_RCC_OscConfig+0x106c>
 8005e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e3e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005e42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e4c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	fa93 f2a3 	rbit	r2, r3
 8005e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e5a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005e5e:	601a      	str	r2, [r3, #0]
  return result;
 8005e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e64:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005e68:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e6a:	fab3 f383 	clz	r3, r3
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	095b      	lsrs	r3, r3, #5
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	f043 0301 	orr.w	r3, r3, #1
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d104      	bne.n	8005e88 <HAL_RCC_OscConfig+0xf7c>
 8005e7e:	4b01      	ldr	r3, [pc, #4]	; (8005e84 <HAL_RCC_OscConfig+0xf78>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	e029      	b.n	8005ed8 <HAL_RCC_OscConfig+0xfcc>
 8005e84:	40021000 	.word	0x40021000
 8005e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e8c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005e90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e9a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	fa93 f2a3 	rbit	r2, r3
 8005ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ea8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eb2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005eb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005eba:	601a      	str	r2, [r3, #0]
 8005ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ec0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	fa93 f2a3 	rbit	r2, r3
 8005eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ece:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	4b2b      	ldr	r3, [pc, #172]	; (8005f84 <HAL_RCC_OscConfig+0x1078>)
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005edc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005ee0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005ee4:	6011      	str	r1, [r2, #0]
 8005ee6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005eea:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005eee:	6812      	ldr	r2, [r2, #0]
 8005ef0:	fa92 f1a2 	rbit	r1, r2
 8005ef4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ef8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005efc:	6011      	str	r1, [r2, #0]
  return result;
 8005efe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005f02:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005f06:	6812      	ldr	r2, [r2, #0]
 8005f08:	fab2 f282 	clz	r2, r2
 8005f0c:	b2d2      	uxtb	r2, r2
 8005f0e:	f042 0220 	orr.w	r2, r2, #32
 8005f12:	b2d2      	uxtb	r2, r2
 8005f14:	f002 021f 	and.w	r2, r2, #31
 8005f18:	2101      	movs	r1, #1
 8005f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8005f1e:	4013      	ands	r3, r2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d180      	bne.n	8005e26 <HAL_RCC_OscConfig+0xf1a>
 8005f24:	e027      	b.n	8005f76 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	69db      	ldr	r3, [r3, #28]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e01e      	b.n	8005f78 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005f3a:	4b12      	ldr	r3, [pc, #72]	; (8005f84 <HAL_RCC_OscConfig+0x1078>)
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005f42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005f46:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d10b      	bne.n	8005f72 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005f5a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005f5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d001      	beq.n	8005f76 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e000      	b.n	8005f78 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	40021000 	.word	0x40021000

08005f88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b09e      	sub	sp, #120	; 0x78
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e162      	b.n	8006266 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fa0:	4b90      	ldr	r3, [pc, #576]	; (80061e4 <HAL_RCC_ClockConfig+0x25c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0307 	and.w	r3, r3, #7
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d910      	bls.n	8005fd0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fae:	4b8d      	ldr	r3, [pc, #564]	; (80061e4 <HAL_RCC_ClockConfig+0x25c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f023 0207 	bic.w	r2, r3, #7
 8005fb6:	498b      	ldr	r1, [pc, #556]	; (80061e4 <HAL_RCC_ClockConfig+0x25c>)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fbe:	4b89      	ldr	r3, [pc, #548]	; (80061e4 <HAL_RCC_ClockConfig+0x25c>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0307 	and.w	r3, r3, #7
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d001      	beq.n	8005fd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e14a      	b.n	8006266 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0302 	and.w	r3, r3, #2
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d008      	beq.n	8005fee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fdc:	4b82      	ldr	r3, [pc, #520]	; (80061e8 <HAL_RCC_ClockConfig+0x260>)
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	497f      	ldr	r1, [pc, #508]	; (80061e8 <HAL_RCC_ClockConfig+0x260>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f000 80dc 	beq.w	80061b4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d13c      	bne.n	800607e <HAL_RCC_ClockConfig+0xf6>
 8006004:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006008:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800600a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800600c:	fa93 f3a3 	rbit	r3, r3
 8006010:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006014:	fab3 f383 	clz	r3, r3
 8006018:	b2db      	uxtb	r3, r3
 800601a:	095b      	lsrs	r3, r3, #5
 800601c:	b2db      	uxtb	r3, r3
 800601e:	f043 0301 	orr.w	r3, r3, #1
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b01      	cmp	r3, #1
 8006026:	d102      	bne.n	800602e <HAL_RCC_ClockConfig+0xa6>
 8006028:	4b6f      	ldr	r3, [pc, #444]	; (80061e8 <HAL_RCC_ClockConfig+0x260>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	e00f      	b.n	800604e <HAL_RCC_ClockConfig+0xc6>
 800602e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006032:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006034:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006036:	fa93 f3a3 	rbit	r3, r3
 800603a:	667b      	str	r3, [r7, #100]	; 0x64
 800603c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006040:	663b      	str	r3, [r7, #96]	; 0x60
 8006042:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006044:	fa93 f3a3 	rbit	r3, r3
 8006048:	65fb      	str	r3, [r7, #92]	; 0x5c
 800604a:	4b67      	ldr	r3, [pc, #412]	; (80061e8 <HAL_RCC_ClockConfig+0x260>)
 800604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006052:	65ba      	str	r2, [r7, #88]	; 0x58
 8006054:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006056:	fa92 f2a2 	rbit	r2, r2
 800605a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800605c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800605e:	fab2 f282 	clz	r2, r2
 8006062:	b2d2      	uxtb	r2, r2
 8006064:	f042 0220 	orr.w	r2, r2, #32
 8006068:	b2d2      	uxtb	r2, r2
 800606a:	f002 021f 	and.w	r2, r2, #31
 800606e:	2101      	movs	r1, #1
 8006070:	fa01 f202 	lsl.w	r2, r1, r2
 8006074:	4013      	ands	r3, r2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d17b      	bne.n	8006172 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e0f3      	b.n	8006266 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2b02      	cmp	r3, #2
 8006084:	d13c      	bne.n	8006100 <HAL_RCC_ClockConfig+0x178>
 8006086:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800608a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800608c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800608e:	fa93 f3a3 	rbit	r3, r3
 8006092:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006096:	fab3 f383 	clz	r3, r3
 800609a:	b2db      	uxtb	r3, r3
 800609c:	095b      	lsrs	r3, r3, #5
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	f043 0301 	orr.w	r3, r3, #1
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d102      	bne.n	80060b0 <HAL_RCC_ClockConfig+0x128>
 80060aa:	4b4f      	ldr	r3, [pc, #316]	; (80061e8 <HAL_RCC_ClockConfig+0x260>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	e00f      	b.n	80060d0 <HAL_RCC_ClockConfig+0x148>
 80060b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060b8:	fa93 f3a3 	rbit	r3, r3
 80060bc:	647b      	str	r3, [r7, #68]	; 0x44
 80060be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060c2:	643b      	str	r3, [r7, #64]	; 0x40
 80060c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060c6:	fa93 f3a3 	rbit	r3, r3
 80060ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060cc:	4b46      	ldr	r3, [pc, #280]	; (80061e8 <HAL_RCC_ClockConfig+0x260>)
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80060d4:	63ba      	str	r2, [r7, #56]	; 0x38
 80060d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060d8:	fa92 f2a2 	rbit	r2, r2
 80060dc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80060de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060e0:	fab2 f282 	clz	r2, r2
 80060e4:	b2d2      	uxtb	r2, r2
 80060e6:	f042 0220 	orr.w	r2, r2, #32
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	f002 021f 	and.w	r2, r2, #31
 80060f0:	2101      	movs	r1, #1
 80060f2:	fa01 f202 	lsl.w	r2, r1, r2
 80060f6:	4013      	ands	r3, r2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d13a      	bne.n	8006172 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e0b2      	b.n	8006266 <HAL_RCC_ClockConfig+0x2de>
 8006100:	2302      	movs	r3, #2
 8006102:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006106:	fa93 f3a3 	rbit	r3, r3
 800610a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800610c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800610e:	fab3 f383 	clz	r3, r3
 8006112:	b2db      	uxtb	r3, r3
 8006114:	095b      	lsrs	r3, r3, #5
 8006116:	b2db      	uxtb	r3, r3
 8006118:	f043 0301 	orr.w	r3, r3, #1
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b01      	cmp	r3, #1
 8006120:	d102      	bne.n	8006128 <HAL_RCC_ClockConfig+0x1a0>
 8006122:	4b31      	ldr	r3, [pc, #196]	; (80061e8 <HAL_RCC_ClockConfig+0x260>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	e00d      	b.n	8006144 <HAL_RCC_ClockConfig+0x1bc>
 8006128:	2302      	movs	r3, #2
 800612a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800612c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612e:	fa93 f3a3 	rbit	r3, r3
 8006132:	627b      	str	r3, [r7, #36]	; 0x24
 8006134:	2302      	movs	r3, #2
 8006136:	623b      	str	r3, [r7, #32]
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	fa93 f3a3 	rbit	r3, r3
 800613e:	61fb      	str	r3, [r7, #28]
 8006140:	4b29      	ldr	r3, [pc, #164]	; (80061e8 <HAL_RCC_ClockConfig+0x260>)
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	2202      	movs	r2, #2
 8006146:	61ba      	str	r2, [r7, #24]
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	fa92 f2a2 	rbit	r2, r2
 800614e:	617a      	str	r2, [r7, #20]
  return result;
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	fab2 f282 	clz	r2, r2
 8006156:	b2d2      	uxtb	r2, r2
 8006158:	f042 0220 	orr.w	r2, r2, #32
 800615c:	b2d2      	uxtb	r2, r2
 800615e:	f002 021f 	and.w	r2, r2, #31
 8006162:	2101      	movs	r1, #1
 8006164:	fa01 f202 	lsl.w	r2, r1, r2
 8006168:	4013      	ands	r3, r2
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e079      	b.n	8006266 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006172:	4b1d      	ldr	r3, [pc, #116]	; (80061e8 <HAL_RCC_ClockConfig+0x260>)
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f023 0203 	bic.w	r2, r3, #3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	491a      	ldr	r1, [pc, #104]	; (80061e8 <HAL_RCC_ClockConfig+0x260>)
 8006180:	4313      	orrs	r3, r2
 8006182:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006184:	f7fc f972 	bl	800246c <HAL_GetTick>
 8006188:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800618a:	e00a      	b.n	80061a2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800618c:	f7fc f96e 	bl	800246c <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	f241 3288 	movw	r2, #5000	; 0x1388
 800619a:	4293      	cmp	r3, r2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e061      	b.n	8006266 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061a2:	4b11      	ldr	r3, [pc, #68]	; (80061e8 <HAL_RCC_ClockConfig+0x260>)
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f003 020c 	and.w	r2, r3, #12
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d1eb      	bne.n	800618c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061b4:	4b0b      	ldr	r3, [pc, #44]	; (80061e4 <HAL_RCC_ClockConfig+0x25c>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0307 	and.w	r3, r3, #7
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d214      	bcs.n	80061ec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061c2:	4b08      	ldr	r3, [pc, #32]	; (80061e4 <HAL_RCC_ClockConfig+0x25c>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f023 0207 	bic.w	r2, r3, #7
 80061ca:	4906      	ldr	r1, [pc, #24]	; (80061e4 <HAL_RCC_ClockConfig+0x25c>)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061d2:	4b04      	ldr	r3, [pc, #16]	; (80061e4 <HAL_RCC_ClockConfig+0x25c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0307 	and.w	r3, r3, #7
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d005      	beq.n	80061ec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e040      	b.n	8006266 <HAL_RCC_ClockConfig+0x2de>
 80061e4:	40022000 	.word	0x40022000
 80061e8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0304 	and.w	r3, r3, #4
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d008      	beq.n	800620a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061f8:	4b1d      	ldr	r3, [pc, #116]	; (8006270 <HAL_RCC_ClockConfig+0x2e8>)
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	491a      	ldr	r1, [pc, #104]	; (8006270 <HAL_RCC_ClockConfig+0x2e8>)
 8006206:	4313      	orrs	r3, r2
 8006208:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0308 	and.w	r3, r3, #8
 8006212:	2b00      	cmp	r3, #0
 8006214:	d009      	beq.n	800622a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006216:	4b16      	ldr	r3, [pc, #88]	; (8006270 <HAL_RCC_ClockConfig+0x2e8>)
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	4912      	ldr	r1, [pc, #72]	; (8006270 <HAL_RCC_ClockConfig+0x2e8>)
 8006226:	4313      	orrs	r3, r2
 8006228:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800622a:	f000 f829 	bl	8006280 <HAL_RCC_GetSysClockFreq>
 800622e:	4601      	mov	r1, r0
 8006230:	4b0f      	ldr	r3, [pc, #60]	; (8006270 <HAL_RCC_ClockConfig+0x2e8>)
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006238:	22f0      	movs	r2, #240	; 0xf0
 800623a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	fa92 f2a2 	rbit	r2, r2
 8006242:	60fa      	str	r2, [r7, #12]
  return result;
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	fab2 f282 	clz	r2, r2
 800624a:	b2d2      	uxtb	r2, r2
 800624c:	40d3      	lsrs	r3, r2
 800624e:	4a09      	ldr	r2, [pc, #36]	; (8006274 <HAL_RCC_ClockConfig+0x2ec>)
 8006250:	5cd3      	ldrb	r3, [r2, r3]
 8006252:	fa21 f303 	lsr.w	r3, r1, r3
 8006256:	4a08      	ldr	r2, [pc, #32]	; (8006278 <HAL_RCC_ClockConfig+0x2f0>)
 8006258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800625a:	4b08      	ldr	r3, [pc, #32]	; (800627c <HAL_RCC_ClockConfig+0x2f4>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4618      	mov	r0, r3
 8006260:	f7fc f8c0 	bl	80023e4 <HAL_InitTick>
  
  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3778      	adds	r7, #120	; 0x78
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	40021000 	.word	0x40021000
 8006274:	0800f6c0 	.word	0x0800f6c0
 8006278:	20000000 	.word	0x20000000
 800627c:	20000004 	.word	0x20000004

08006280 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006280:	b480      	push	{r7}
 8006282:	b08b      	sub	sp, #44	; 0x2c
 8006284:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	61fb      	str	r3, [r7, #28]
 800628a:	2300      	movs	r3, #0
 800628c:	61bb      	str	r3, [r7, #24]
 800628e:	2300      	movs	r3, #0
 8006290:	627b      	str	r3, [r7, #36]	; 0x24
 8006292:	2300      	movs	r3, #0
 8006294:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800629a:	4b29      	ldr	r3, [pc, #164]	; (8006340 <HAL_RCC_GetSysClockFreq+0xc0>)
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	f003 030c 	and.w	r3, r3, #12
 80062a6:	2b04      	cmp	r3, #4
 80062a8:	d002      	beq.n	80062b0 <HAL_RCC_GetSysClockFreq+0x30>
 80062aa:	2b08      	cmp	r3, #8
 80062ac:	d003      	beq.n	80062b6 <HAL_RCC_GetSysClockFreq+0x36>
 80062ae:	e03c      	b.n	800632a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80062b0:	4b24      	ldr	r3, [pc, #144]	; (8006344 <HAL_RCC_GetSysClockFreq+0xc4>)
 80062b2:	623b      	str	r3, [r7, #32]
      break;
 80062b4:	e03c      	b.n	8006330 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80062bc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80062c0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	fa92 f2a2 	rbit	r2, r2
 80062c8:	607a      	str	r2, [r7, #4]
  return result;
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	fab2 f282 	clz	r2, r2
 80062d0:	b2d2      	uxtb	r2, r2
 80062d2:	40d3      	lsrs	r3, r2
 80062d4:	4a1c      	ldr	r2, [pc, #112]	; (8006348 <HAL_RCC_GetSysClockFreq+0xc8>)
 80062d6:	5cd3      	ldrb	r3, [r2, r3]
 80062d8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80062da:	4b19      	ldr	r3, [pc, #100]	; (8006340 <HAL_RCC_GetSysClockFreq+0xc0>)
 80062dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062de:	f003 030f 	and.w	r3, r3, #15
 80062e2:	220f      	movs	r2, #15
 80062e4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	fa92 f2a2 	rbit	r2, r2
 80062ec:	60fa      	str	r2, [r7, #12]
  return result;
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	fab2 f282 	clz	r2, r2
 80062f4:	b2d2      	uxtb	r2, r2
 80062f6:	40d3      	lsrs	r3, r2
 80062f8:	4a14      	ldr	r2, [pc, #80]	; (800634c <HAL_RCC_GetSysClockFreq+0xcc>)
 80062fa:	5cd3      	ldrb	r3, [r2, r3]
 80062fc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d008      	beq.n	800631a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006308:	4a0e      	ldr	r2, [pc, #56]	; (8006344 <HAL_RCC_GetSysClockFreq+0xc4>)
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	fb02 f303 	mul.w	r3, r2, r3
 8006316:	627b      	str	r3, [r7, #36]	; 0x24
 8006318:	e004      	b.n	8006324 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	4a0c      	ldr	r2, [pc, #48]	; (8006350 <HAL_RCC_GetSysClockFreq+0xd0>)
 800631e:	fb02 f303 	mul.w	r3, r2, r3
 8006322:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	623b      	str	r3, [r7, #32]
      break;
 8006328:	e002      	b.n	8006330 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800632a:	4b06      	ldr	r3, [pc, #24]	; (8006344 <HAL_RCC_GetSysClockFreq+0xc4>)
 800632c:	623b      	str	r3, [r7, #32]
      break;
 800632e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006330:	6a3b      	ldr	r3, [r7, #32]
}
 8006332:	4618      	mov	r0, r3
 8006334:	372c      	adds	r7, #44	; 0x2c
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	40021000 	.word	0x40021000
 8006344:	007a1200 	.word	0x007a1200
 8006348:	0800f6d8 	.word	0x0800f6d8
 800634c:	0800f6e8 	.word	0x0800f6e8
 8006350:	003d0900 	.word	0x003d0900

08006354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006358:	4b03      	ldr	r3, [pc, #12]	; (8006368 <HAL_RCC_GetHCLKFreq+0x14>)
 800635a:	681b      	ldr	r3, [r3, #0]
}
 800635c:	4618      	mov	r0, r3
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	20000000 	.word	0x20000000

0800636c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006372:	f7ff ffef 	bl	8006354 <HAL_RCC_GetHCLKFreq>
 8006376:	4601      	mov	r1, r0
 8006378:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006380:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006384:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	fa92 f2a2 	rbit	r2, r2
 800638c:	603a      	str	r2, [r7, #0]
  return result;
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	fab2 f282 	clz	r2, r2
 8006394:	b2d2      	uxtb	r2, r2
 8006396:	40d3      	lsrs	r3, r2
 8006398:	4a04      	ldr	r2, [pc, #16]	; (80063ac <HAL_RCC_GetPCLK1Freq+0x40>)
 800639a:	5cd3      	ldrb	r3, [r2, r3]
 800639c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80063a0:	4618      	mov	r0, r3
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	40021000 	.word	0x40021000
 80063ac:	0800f6d0 	.word	0x0800f6d0

080063b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80063b6:	f7ff ffcd 	bl	8006354 <HAL_RCC_GetHCLKFreq>
 80063ba:	4601      	mov	r1, r0
 80063bc:	4b0b      	ldr	r3, [pc, #44]	; (80063ec <HAL_RCC_GetPCLK2Freq+0x3c>)
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80063c4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80063c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	fa92 f2a2 	rbit	r2, r2
 80063d0:	603a      	str	r2, [r7, #0]
  return result;
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	fab2 f282 	clz	r2, r2
 80063d8:	b2d2      	uxtb	r2, r2
 80063da:	40d3      	lsrs	r3, r2
 80063dc:	4a04      	ldr	r2, [pc, #16]	; (80063f0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80063de:	5cd3      	ldrb	r3, [r2, r3]
 80063e0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80063e4:	4618      	mov	r0, r3
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	40021000 	.word	0x40021000
 80063f0:	0800f6d0 	.word	0x0800f6d0

080063f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b092      	sub	sp, #72	; 0x48
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063fc:	2300      	movs	r3, #0
 80063fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006400:	2300      	movs	r3, #0
 8006402:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006404:	2300      	movs	r3, #0
 8006406:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 80d4 	beq.w	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006418:	4b4e      	ldr	r3, [pc, #312]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800641a:	69db      	ldr	r3, [r3, #28]
 800641c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10e      	bne.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006424:	4b4b      	ldr	r3, [pc, #300]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	4a4a      	ldr	r2, [pc, #296]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800642a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800642e:	61d3      	str	r3, [r2, #28]
 8006430:	4b48      	ldr	r3, [pc, #288]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006438:	60bb      	str	r3, [r7, #8]
 800643a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800643c:	2301      	movs	r3, #1
 800643e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006442:	4b45      	ldr	r3, [pc, #276]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644a:	2b00      	cmp	r3, #0
 800644c:	d118      	bne.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800644e:	4b42      	ldr	r3, [pc, #264]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a41      	ldr	r2, [pc, #260]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006458:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800645a:	f7fc f807 	bl	800246c <HAL_GetTick>
 800645e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006460:	e008      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006462:	f7fc f803 	bl	800246c <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	2b64      	cmp	r3, #100	; 0x64
 800646e:	d901      	bls.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e169      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006474:	4b38      	ldr	r3, [pc, #224]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647c:	2b00      	cmp	r3, #0
 800647e:	d0f0      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006480:	4b34      	ldr	r3, [pc, #208]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006482:	6a1b      	ldr	r3, [r3, #32]
 8006484:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006488:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800648a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 8084 	beq.w	800659a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800649a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800649c:	429a      	cmp	r2, r3
 800649e:	d07c      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064a0:	4b2c      	ldr	r3, [pc, #176]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80064ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b2:	fa93 f3a3 	rbit	r3, r3
 80064b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80064b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80064ba:	fab3 f383 	clz	r3, r3
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	461a      	mov	r2, r3
 80064c2:	4b26      	ldr	r3, [pc, #152]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80064c4:	4413      	add	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	461a      	mov	r2, r3
 80064ca:	2301      	movs	r3, #1
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80064d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d6:	fa93 f3a3 	rbit	r3, r3
 80064da:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80064dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80064de:	fab3 f383 	clz	r3, r3
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	461a      	mov	r2, r3
 80064e6:	4b1d      	ldr	r3, [pc, #116]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80064e8:	4413      	add	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	461a      	mov	r2, r3
 80064ee:	2300      	movs	r3, #0
 80064f0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80064f2:	4a18      	ldr	r2, [pc, #96]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064f6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80064f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d04b      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006502:	f7fb ffb3 	bl	800246c <HAL_GetTick>
 8006506:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006508:	e00a      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800650a:	f7fb ffaf 	bl	800246c <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	f241 3288 	movw	r2, #5000	; 0x1388
 8006518:	4293      	cmp	r3, r2
 800651a:	d901      	bls.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e113      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8006520:	2302      	movs	r3, #2
 8006522:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006526:	fa93 f3a3 	rbit	r3, r3
 800652a:	627b      	str	r3, [r7, #36]	; 0x24
 800652c:	2302      	movs	r3, #2
 800652e:	623b      	str	r3, [r7, #32]
 8006530:	6a3b      	ldr	r3, [r7, #32]
 8006532:	fa93 f3a3 	rbit	r3, r3
 8006536:	61fb      	str	r3, [r7, #28]
  return result;
 8006538:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800653a:	fab3 f383 	clz	r3, r3
 800653e:	b2db      	uxtb	r3, r3
 8006540:	095b      	lsrs	r3, r3, #5
 8006542:	b2db      	uxtb	r3, r3
 8006544:	f043 0302 	orr.w	r3, r3, #2
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b02      	cmp	r3, #2
 800654c:	d108      	bne.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800654e:	4b01      	ldr	r3, [pc, #4]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	e00d      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006554:	40021000 	.word	0x40021000
 8006558:	40007000 	.word	0x40007000
 800655c:	10908100 	.word	0x10908100
 8006560:	2302      	movs	r3, #2
 8006562:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	fa93 f3a3 	rbit	r3, r3
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	4b78      	ldr	r3, [pc, #480]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800656e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006570:	2202      	movs	r2, #2
 8006572:	613a      	str	r2, [r7, #16]
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	fa92 f2a2 	rbit	r2, r2
 800657a:	60fa      	str	r2, [r7, #12]
  return result;
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	fab2 f282 	clz	r2, r2
 8006582:	b2d2      	uxtb	r2, r2
 8006584:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006588:	b2d2      	uxtb	r2, r2
 800658a:	f002 021f 	and.w	r2, r2, #31
 800658e:	2101      	movs	r1, #1
 8006590:	fa01 f202 	lsl.w	r2, r1, r2
 8006594:	4013      	ands	r3, r2
 8006596:	2b00      	cmp	r3, #0
 8006598:	d0b7      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800659a:	4b6d      	ldr	r3, [pc, #436]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	496a      	ldr	r1, [pc, #424]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80065ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d105      	bne.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065b4:	4b66      	ldr	r3, [pc, #408]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065b6:	69db      	ldr	r3, [r3, #28]
 80065b8:	4a65      	ldr	r2, [pc, #404]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d008      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80065cc:	4b60      	ldr	r3, [pc, #384]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d0:	f023 0203 	bic.w	r2, r3, #3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	495d      	ldr	r1, [pc, #372]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d008      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80065ea:	4b59      	ldr	r3, [pc, #356]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	4956      	ldr	r1, [pc, #344]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0304 	and.w	r3, r3, #4
 8006604:	2b00      	cmp	r3, #0
 8006606:	d008      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006608:	4b51      	ldr	r3, [pc, #324]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800660a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	494e      	ldr	r1, [pc, #312]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006616:	4313      	orrs	r3, r2
 8006618:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0320 	and.w	r3, r3, #32
 8006622:	2b00      	cmp	r3, #0
 8006624:	d008      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006626:	4b4a      	ldr	r3, [pc, #296]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662a:	f023 0210 	bic.w	r2, r3, #16
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	4947      	ldr	r1, [pc, #284]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006634:	4313      	orrs	r3, r2
 8006636:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d008      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006644:	4b42      	ldr	r3, [pc, #264]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006650:	493f      	ldr	r1, [pc, #252]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006652:	4313      	orrs	r3, r2
 8006654:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665e:	2b00      	cmp	r3, #0
 8006660:	d008      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006662:	4b3b      	ldr	r3, [pc, #236]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006666:	f023 0220 	bic.w	r2, r3, #32
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	4938      	ldr	r1, [pc, #224]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006670:	4313      	orrs	r3, r2
 8006672:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0308 	and.w	r3, r3, #8
 800667c:	2b00      	cmp	r3, #0
 800667e:	d008      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006680:	4b33      	ldr	r3, [pc, #204]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006684:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	4930      	ldr	r1, [pc, #192]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800668e:	4313      	orrs	r3, r2
 8006690:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0310 	and.w	r3, r3, #16
 800669a:	2b00      	cmp	r3, #0
 800669c:	d008      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800669e:	4b2c      	ldr	r3, [pc, #176]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	4929      	ldr	r1, [pc, #164]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d008      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80066bc:	4b24      	ldr	r3, [pc, #144]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c8:	4921      	ldr	r1, [pc, #132]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d008      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80066da:	4b1d      	ldr	r3, [pc, #116]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066de:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	491a      	ldr	r1, [pc, #104]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d008      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80066f8:	4b15      	ldr	r3, [pc, #84]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fc:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006704:	4912      	ldr	r1, [pc, #72]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006706:	4313      	orrs	r3, r2
 8006708:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d008      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006716:	4b0e      	ldr	r3, [pc, #56]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006722:	490b      	ldr	r1, [pc, #44]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006724:	4313      	orrs	r3, r2
 8006726:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d008      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006734:	4b06      	ldr	r3, [pc, #24]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006738:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006740:	4903      	ldr	r1, [pc, #12]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006742:	4313      	orrs	r3, r2
 8006744:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3748      	adds	r7, #72	; 0x48
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	40021000 	.word	0x40021000

08006754 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e09d      	b.n	80068a2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676a:	2b00      	cmp	r3, #0
 800676c:	d108      	bne.n	8006780 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006776:	d009      	beq.n	800678c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	61da      	str	r2, [r3, #28]
 800677e:	e005      	b.n	800678c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d106      	bne.n	80067ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7fb f896 	bl	80018d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2202      	movs	r2, #2
 80067b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067cc:	d902      	bls.n	80067d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80067ce:	2300      	movs	r3, #0
 80067d0:	60fb      	str	r3, [r7, #12]
 80067d2:	e002      	b.n	80067da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80067d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80067e2:	d007      	beq.n	80067f4 <HAL_SPI_Init+0xa0>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067ec:	d002      	beq.n	80067f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006804:	431a      	orrs	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	431a      	orrs	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	431a      	orrs	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006822:	431a      	orrs	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800682c:	431a      	orrs	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006836:	ea42 0103 	orr.w	r1, r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	0c1b      	lsrs	r3, r3, #16
 8006850:	f003 0204 	and.w	r2, r3, #4
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	f003 0310 	and.w	r3, r3, #16
 800685c:	431a      	orrs	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006862:	f003 0308 	and.w	r3, r3, #8
 8006866:	431a      	orrs	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006870:	ea42 0103 	orr.w	r1, r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	69da      	ldr	r2, [r3, #28]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006890:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b082      	sub	sp, #8
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e049      	b.n	8006950 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d106      	bne.n	80068d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7fb f8a7 	bl	8001a24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2202      	movs	r2, #2
 80068da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	3304      	adds	r3, #4
 80068e6:	4619      	mov	r1, r3
 80068e8:	4610      	mov	r0, r2
 80068ea:	f000 fd87 	bl	80073fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b01      	cmp	r3, #1
 800696a:	d001      	beq.n	8006970 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e04a      	b.n	8006a06 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2202      	movs	r2, #2
 8006974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68da      	ldr	r2, [r3, #12]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f042 0201 	orr.w	r2, r2, #1
 8006986:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a21      	ldr	r2, [pc, #132]	; (8006a14 <HAL_TIM_Base_Start_IT+0xbc>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d018      	beq.n	80069c4 <HAL_TIM_Base_Start_IT+0x6c>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800699a:	d013      	beq.n	80069c4 <HAL_TIM_Base_Start_IT+0x6c>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a1d      	ldr	r2, [pc, #116]	; (8006a18 <HAL_TIM_Base_Start_IT+0xc0>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d00e      	beq.n	80069c4 <HAL_TIM_Base_Start_IT+0x6c>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a1c      	ldr	r2, [pc, #112]	; (8006a1c <HAL_TIM_Base_Start_IT+0xc4>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d009      	beq.n	80069c4 <HAL_TIM_Base_Start_IT+0x6c>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a1a      	ldr	r2, [pc, #104]	; (8006a20 <HAL_TIM_Base_Start_IT+0xc8>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d004      	beq.n	80069c4 <HAL_TIM_Base_Start_IT+0x6c>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a19      	ldr	r2, [pc, #100]	; (8006a24 <HAL_TIM_Base_Start_IT+0xcc>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d115      	bne.n	80069f0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689a      	ldr	r2, [r3, #8]
 80069ca:	4b17      	ldr	r3, [pc, #92]	; (8006a28 <HAL_TIM_Base_Start_IT+0xd0>)
 80069cc:	4013      	ands	r3, r2
 80069ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2b06      	cmp	r3, #6
 80069d4:	d015      	beq.n	8006a02 <HAL_TIM_Base_Start_IT+0xaa>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069dc:	d011      	beq.n	8006a02 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f042 0201 	orr.w	r2, r2, #1
 80069ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ee:	e008      	b.n	8006a02 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f042 0201 	orr.w	r2, r2, #1
 80069fe:	601a      	str	r2, [r3, #0]
 8006a00:	e000      	b.n	8006a04 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	40012c00 	.word	0x40012c00
 8006a18:	40000400 	.word	0x40000400
 8006a1c:	40000800 	.word	0x40000800
 8006a20:	40013400 	.word	0x40013400
 8006a24:	40014000 	.word	0x40014000
 8006a28:	00010007 	.word	0x00010007

08006a2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e049      	b.n	8006ad2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d106      	bne.n	8006a58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7fa ff82 	bl	800195c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	3304      	adds	r3, #4
 8006a68:	4619      	mov	r1, r3
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	f000 fcc6 	bl	80073fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
	...

08006adc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d109      	bne.n	8006b00 <HAL_TIM_PWM_Start+0x24>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	bf14      	ite	ne
 8006af8:	2301      	movne	r3, #1
 8006afa:	2300      	moveq	r3, #0
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	e03c      	b.n	8006b7a <HAL_TIM_PWM_Start+0x9e>
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d109      	bne.n	8006b1a <HAL_TIM_PWM_Start+0x3e>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	bf14      	ite	ne
 8006b12:	2301      	movne	r3, #1
 8006b14:	2300      	moveq	r3, #0
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	e02f      	b.n	8006b7a <HAL_TIM_PWM_Start+0x9e>
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b08      	cmp	r3, #8
 8006b1e:	d109      	bne.n	8006b34 <HAL_TIM_PWM_Start+0x58>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	bf14      	ite	ne
 8006b2c:	2301      	movne	r3, #1
 8006b2e:	2300      	moveq	r3, #0
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	e022      	b.n	8006b7a <HAL_TIM_PWM_Start+0x9e>
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	2b0c      	cmp	r3, #12
 8006b38:	d109      	bne.n	8006b4e <HAL_TIM_PWM_Start+0x72>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	bf14      	ite	ne
 8006b46:	2301      	movne	r3, #1
 8006b48:	2300      	moveq	r3, #0
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	e015      	b.n	8006b7a <HAL_TIM_PWM_Start+0x9e>
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	2b10      	cmp	r3, #16
 8006b52:	d109      	bne.n	8006b68 <HAL_TIM_PWM_Start+0x8c>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	bf14      	ite	ne
 8006b60:	2301      	movne	r3, #1
 8006b62:	2300      	moveq	r3, #0
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	e008      	b.n	8006b7a <HAL_TIM_PWM_Start+0x9e>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	bf14      	ite	ne
 8006b74:	2301      	movne	r3, #1
 8006b76:	2300      	moveq	r3, #0
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e097      	b.n	8006cb2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d104      	bne.n	8006b92 <HAL_TIM_PWM_Start+0xb6>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b90:	e023      	b.n	8006bda <HAL_TIM_PWM_Start+0xfe>
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b04      	cmp	r3, #4
 8006b96:	d104      	bne.n	8006ba2 <HAL_TIM_PWM_Start+0xc6>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ba0:	e01b      	b.n	8006bda <HAL_TIM_PWM_Start+0xfe>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b08      	cmp	r3, #8
 8006ba6:	d104      	bne.n	8006bb2 <HAL_TIM_PWM_Start+0xd6>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2202      	movs	r2, #2
 8006bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bb0:	e013      	b.n	8006bda <HAL_TIM_PWM_Start+0xfe>
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b0c      	cmp	r3, #12
 8006bb6:	d104      	bne.n	8006bc2 <HAL_TIM_PWM_Start+0xe6>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bc0:	e00b      	b.n	8006bda <HAL_TIM_PWM_Start+0xfe>
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	2b10      	cmp	r3, #16
 8006bc6:	d104      	bne.n	8006bd2 <HAL_TIM_PWM_Start+0xf6>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bd0:	e003      	b.n	8006bda <HAL_TIM_PWM_Start+0xfe>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2202      	movs	r2, #2
 8006bd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2201      	movs	r2, #1
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 ff70 	bl	8007ac8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a33      	ldr	r2, [pc, #204]	; (8006cbc <HAL_TIM_PWM_Start+0x1e0>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d013      	beq.n	8006c1a <HAL_TIM_PWM_Start+0x13e>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a32      	ldr	r2, [pc, #200]	; (8006cc0 <HAL_TIM_PWM_Start+0x1e4>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d00e      	beq.n	8006c1a <HAL_TIM_PWM_Start+0x13e>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a30      	ldr	r2, [pc, #192]	; (8006cc4 <HAL_TIM_PWM_Start+0x1e8>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d009      	beq.n	8006c1a <HAL_TIM_PWM_Start+0x13e>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a2f      	ldr	r2, [pc, #188]	; (8006cc8 <HAL_TIM_PWM_Start+0x1ec>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d004      	beq.n	8006c1a <HAL_TIM_PWM_Start+0x13e>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a2d      	ldr	r2, [pc, #180]	; (8006ccc <HAL_TIM_PWM_Start+0x1f0>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d101      	bne.n	8006c1e <HAL_TIM_PWM_Start+0x142>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e000      	b.n	8006c20 <HAL_TIM_PWM_Start+0x144>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d007      	beq.n	8006c34 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c32:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a20      	ldr	r2, [pc, #128]	; (8006cbc <HAL_TIM_PWM_Start+0x1e0>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d018      	beq.n	8006c70 <HAL_TIM_PWM_Start+0x194>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c46:	d013      	beq.n	8006c70 <HAL_TIM_PWM_Start+0x194>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a20      	ldr	r2, [pc, #128]	; (8006cd0 <HAL_TIM_PWM_Start+0x1f4>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d00e      	beq.n	8006c70 <HAL_TIM_PWM_Start+0x194>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a1f      	ldr	r2, [pc, #124]	; (8006cd4 <HAL_TIM_PWM_Start+0x1f8>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d009      	beq.n	8006c70 <HAL_TIM_PWM_Start+0x194>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a17      	ldr	r2, [pc, #92]	; (8006cc0 <HAL_TIM_PWM_Start+0x1e4>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d004      	beq.n	8006c70 <HAL_TIM_PWM_Start+0x194>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a16      	ldr	r2, [pc, #88]	; (8006cc4 <HAL_TIM_PWM_Start+0x1e8>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d115      	bne.n	8006c9c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689a      	ldr	r2, [r3, #8]
 8006c76:	4b18      	ldr	r3, [pc, #96]	; (8006cd8 <HAL_TIM_PWM_Start+0x1fc>)
 8006c78:	4013      	ands	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2b06      	cmp	r3, #6
 8006c80:	d015      	beq.n	8006cae <HAL_TIM_PWM_Start+0x1d2>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c88:	d011      	beq.n	8006cae <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f042 0201 	orr.w	r2, r2, #1
 8006c98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c9a:	e008      	b.n	8006cae <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0201 	orr.w	r2, r2, #1
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	e000      	b.n	8006cb0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	40012c00 	.word	0x40012c00
 8006cc0:	40013400 	.word	0x40013400
 8006cc4:	40014000 	.word	0x40014000
 8006cc8:	40014400 	.word	0x40014400
 8006ccc:	40014800 	.word	0x40014800
 8006cd0:	40000400 	.word	0x40000400
 8006cd4:	40000800 	.word	0x40000800
 8006cd8:	00010007 	.word	0x00010007

08006cdc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d101      	bne.n	8006cf0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e097      	b.n	8006e20 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d106      	bne.n	8006d0a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f7fa fe49 	bl	800199c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2202      	movs	r2, #2
 8006d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	6812      	ldr	r2, [r2, #0]
 8006d1c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006d20:	f023 0307 	bic.w	r3, r3, #7
 8006d24:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	3304      	adds	r3, #4
 8006d2e:	4619      	mov	r1, r3
 8006d30:	4610      	mov	r0, r2
 8006d32:	f000 fb63 	bl	80073fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d5e:	f023 0303 	bic.w	r3, r3, #3
 8006d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	689a      	ldr	r2, [r3, #8]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	021b      	lsls	r3, r3, #8
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006d7c:	f023 030c 	bic.w	r3, r3, #12
 8006d80:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	68da      	ldr	r2, [r3, #12]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	021b      	lsls	r3, r3, #8
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	011a      	lsls	r2, r3, #4
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	031b      	lsls	r3, r3, #12
 8006dac:	4313      	orrs	r3, r2
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006dba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006dc2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685a      	ldr	r2, [r3, #4]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	695b      	ldr	r3, [r3, #20]
 8006dcc:	011b      	lsls	r3, r3, #4
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3718      	adds	r7, #24
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e38:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e40:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e48:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e50:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d110      	bne.n	8006e7a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d102      	bne.n	8006e64 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e5e:	7b7b      	ldrb	r3, [r7, #13]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d001      	beq.n	8006e68 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e069      	b.n	8006f3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2202      	movs	r2, #2
 8006e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e78:	e031      	b.n	8006ede <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d110      	bne.n	8006ea2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e80:	7bbb      	ldrb	r3, [r7, #14]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d102      	bne.n	8006e8c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e86:	7b3b      	ldrb	r3, [r7, #12]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d001      	beq.n	8006e90 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e055      	b.n	8006f3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2202      	movs	r2, #2
 8006e94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ea0:	e01d      	b.n	8006ede <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ea2:	7bfb      	ldrb	r3, [r7, #15]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d108      	bne.n	8006eba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ea8:	7bbb      	ldrb	r3, [r7, #14]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d105      	bne.n	8006eba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006eae:	7b7b      	ldrb	r3, [r7, #13]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d102      	bne.n	8006eba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006eb4:	7b3b      	ldrb	r3, [r7, #12]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d001      	beq.n	8006ebe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e03e      	b.n	8006f3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2202      	movs	r2, #2
 8006eca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2202      	movs	r2, #2
 8006ed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2202      	movs	r2, #2
 8006eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d003      	beq.n	8006eec <HAL_TIM_Encoder_Start+0xc4>
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	2b04      	cmp	r3, #4
 8006ee8:	d008      	beq.n	8006efc <HAL_TIM_Encoder_Start+0xd4>
 8006eea:	e00f      	b.n	8006f0c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f000 fde7 	bl	8007ac8 <TIM_CCxChannelCmd>
      break;
 8006efa:	e016      	b.n	8006f2a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2201      	movs	r2, #1
 8006f02:	2104      	movs	r1, #4
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 fddf 	bl	8007ac8 <TIM_CCxChannelCmd>
      break;
 8006f0a:	e00e      	b.n	8006f2a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2201      	movs	r2, #1
 8006f12:	2100      	movs	r1, #0
 8006f14:	4618      	mov	r0, r3
 8006f16:	f000 fdd7 	bl	8007ac8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	2104      	movs	r1, #4
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 fdd0 	bl	8007ac8 <TIM_CCxChannelCmd>
      break;
 8006f28:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f042 0201 	orr.w	r2, r2, #1
 8006f38:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	f003 0302 	and.w	r3, r3, #2
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d122      	bne.n	8006fa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f003 0302 	and.w	r3, r3, #2
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d11b      	bne.n	8006fa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f06f 0202 	mvn.w	r2, #2
 8006f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	f003 0303 	and.w	r3, r3, #3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d003      	beq.n	8006f8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fa1a 	bl	80073c0 <HAL_TIM_IC_CaptureCallback>
 8006f8c:	e005      	b.n	8006f9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fa0c 	bl	80073ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fa1d 	bl	80073d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	f003 0304 	and.w	r3, r3, #4
 8006faa:	2b04      	cmp	r3, #4
 8006fac:	d122      	bne.n	8006ff4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f003 0304 	and.w	r3, r3, #4
 8006fb8:	2b04      	cmp	r3, #4
 8006fba:	d11b      	bne.n	8006ff4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f06f 0204 	mvn.w	r2, #4
 8006fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2202      	movs	r2, #2
 8006fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f9f0 	bl	80073c0 <HAL_TIM_IC_CaptureCallback>
 8006fe0:	e005      	b.n	8006fee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f9e2 	bl	80073ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f9f3 	bl	80073d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	f003 0308 	and.w	r3, r3, #8
 8006ffe:	2b08      	cmp	r3, #8
 8007000:	d122      	bne.n	8007048 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f003 0308 	and.w	r3, r3, #8
 800700c:	2b08      	cmp	r3, #8
 800700e:	d11b      	bne.n	8007048 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f06f 0208 	mvn.w	r2, #8
 8007018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2204      	movs	r2, #4
 800701e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	f003 0303 	and.w	r3, r3, #3
 800702a:	2b00      	cmp	r3, #0
 800702c:	d003      	beq.n	8007036 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f9c6 	bl	80073c0 <HAL_TIM_IC_CaptureCallback>
 8007034:	e005      	b.n	8007042 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f9b8 	bl	80073ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f9c9 	bl	80073d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	f003 0310 	and.w	r3, r3, #16
 8007052:	2b10      	cmp	r3, #16
 8007054:	d122      	bne.n	800709c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	f003 0310 	and.w	r3, r3, #16
 8007060:	2b10      	cmp	r3, #16
 8007062:	d11b      	bne.n	800709c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f06f 0210 	mvn.w	r2, #16
 800706c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2208      	movs	r2, #8
 8007072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800707e:	2b00      	cmp	r3, #0
 8007080:	d003      	beq.n	800708a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f99c 	bl	80073c0 <HAL_TIM_IC_CaptureCallback>
 8007088:	e005      	b.n	8007096 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f98e 	bl	80073ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 f99f 	bl	80073d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d10e      	bne.n	80070c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d107      	bne.n	80070c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f06f 0201 	mvn.w	r2, #1
 80070c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7f9 ff52 	bl	8000f6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d2:	2b80      	cmp	r3, #128	; 0x80
 80070d4:	d10e      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070e0:	2b80      	cmp	r3, #128	; 0x80
 80070e2:	d107      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80070ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fe18 	bl	8007d24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007102:	d10e      	bne.n	8007122 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800710e:	2b80      	cmp	r3, #128	; 0x80
 8007110:	d107      	bne.n	8007122 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800711a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fe0b 	bl	8007d38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712c:	2b40      	cmp	r3, #64	; 0x40
 800712e:	d10e      	bne.n	800714e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713a:	2b40      	cmp	r3, #64	; 0x40
 800713c:	d107      	bne.n	800714e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f94d 	bl	80073e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	f003 0320 	and.w	r3, r3, #32
 8007158:	2b20      	cmp	r3, #32
 800715a:	d10e      	bne.n	800717a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	f003 0320 	and.w	r3, r3, #32
 8007166:	2b20      	cmp	r3, #32
 8007168:	d107      	bne.n	800717a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f06f 0220 	mvn.w	r2, #32
 8007172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fdcb 	bl	8007d10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800717a:	bf00      	nop
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007190:	2300      	movs	r3, #0
 8007192:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800719a:	2b01      	cmp	r3, #1
 800719c:	d101      	bne.n	80071a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800719e:	2302      	movs	r3, #2
 80071a0:	e0ff      	b.n	80073a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2b14      	cmp	r3, #20
 80071ae:	f200 80f0 	bhi.w	8007392 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80071b2:	a201      	add	r2, pc, #4	; (adr r2, 80071b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b8:	0800720d 	.word	0x0800720d
 80071bc:	08007393 	.word	0x08007393
 80071c0:	08007393 	.word	0x08007393
 80071c4:	08007393 	.word	0x08007393
 80071c8:	0800724d 	.word	0x0800724d
 80071cc:	08007393 	.word	0x08007393
 80071d0:	08007393 	.word	0x08007393
 80071d4:	08007393 	.word	0x08007393
 80071d8:	0800728f 	.word	0x0800728f
 80071dc:	08007393 	.word	0x08007393
 80071e0:	08007393 	.word	0x08007393
 80071e4:	08007393 	.word	0x08007393
 80071e8:	080072cf 	.word	0x080072cf
 80071ec:	08007393 	.word	0x08007393
 80071f0:	08007393 	.word	0x08007393
 80071f4:	08007393 	.word	0x08007393
 80071f8:	08007311 	.word	0x08007311
 80071fc:	08007393 	.word	0x08007393
 8007200:	08007393 	.word	0x08007393
 8007204:	08007393 	.word	0x08007393
 8007208:	08007351 	.word	0x08007351
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68b9      	ldr	r1, [r7, #8]
 8007212:	4618      	mov	r0, r3
 8007214:	f000 f982 	bl	800751c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	699a      	ldr	r2, [r3, #24]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f042 0208 	orr.w	r2, r2, #8
 8007226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	699a      	ldr	r2, [r3, #24]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f022 0204 	bic.w	r2, r2, #4
 8007236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6999      	ldr	r1, [r3, #24]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	691a      	ldr	r2, [r3, #16]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	430a      	orrs	r2, r1
 8007248:	619a      	str	r2, [r3, #24]
      break;
 800724a:	e0a5      	b.n	8007398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68b9      	ldr	r1, [r7, #8]
 8007252:	4618      	mov	r0, r3
 8007254:	f000 f9f2 	bl	800763c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	699a      	ldr	r2, [r3, #24]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	699a      	ldr	r2, [r3, #24]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6999      	ldr	r1, [r3, #24]
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	021a      	lsls	r2, r3, #8
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	430a      	orrs	r2, r1
 800728a:	619a      	str	r2, [r3, #24]
      break;
 800728c:	e084      	b.n	8007398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68b9      	ldr	r1, [r7, #8]
 8007294:	4618      	mov	r0, r3
 8007296:	f000 fa5b 	bl	8007750 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	69da      	ldr	r2, [r3, #28]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f042 0208 	orr.w	r2, r2, #8
 80072a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	69da      	ldr	r2, [r3, #28]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f022 0204 	bic.w	r2, r2, #4
 80072b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	69d9      	ldr	r1, [r3, #28]
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	691a      	ldr	r2, [r3, #16]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	430a      	orrs	r2, r1
 80072ca:	61da      	str	r2, [r3, #28]
      break;
 80072cc:	e064      	b.n	8007398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	68b9      	ldr	r1, [r7, #8]
 80072d4:	4618      	mov	r0, r3
 80072d6:	f000 fac3 	bl	8007860 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	69da      	ldr	r2, [r3, #28]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	69da      	ldr	r2, [r3, #28]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	69d9      	ldr	r1, [r3, #28]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	021a      	lsls	r2, r3, #8
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	430a      	orrs	r2, r1
 800730c:	61da      	str	r2, [r3, #28]
      break;
 800730e:	e043      	b.n	8007398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68b9      	ldr	r1, [r7, #8]
 8007316:	4618      	mov	r0, r3
 8007318:	f000 fb0c 	bl	8007934 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f042 0208 	orr.w	r2, r2, #8
 800732a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f022 0204 	bic.w	r2, r2, #4
 800733a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	691a      	ldr	r2, [r3, #16]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	430a      	orrs	r2, r1
 800734c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800734e:	e023      	b.n	8007398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68b9      	ldr	r1, [r7, #8]
 8007356:	4618      	mov	r0, r3
 8007358:	f000 fb50 	bl	80079fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800736a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800737a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	021a      	lsls	r2, r3, #8
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	430a      	orrs	r2, r1
 800738e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007390:	e002      	b.n	8007398 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	75fb      	strb	r3, [r7, #23]
      break;
 8007396:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3718      	adds	r7, #24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop

080073ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a3c      	ldr	r2, [pc, #240]	; (8007500 <TIM_Base_SetConfig+0x104>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d00f      	beq.n	8007434 <TIM_Base_SetConfig+0x38>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800741a:	d00b      	beq.n	8007434 <TIM_Base_SetConfig+0x38>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a39      	ldr	r2, [pc, #228]	; (8007504 <TIM_Base_SetConfig+0x108>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d007      	beq.n	8007434 <TIM_Base_SetConfig+0x38>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a38      	ldr	r2, [pc, #224]	; (8007508 <TIM_Base_SetConfig+0x10c>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d003      	beq.n	8007434 <TIM_Base_SetConfig+0x38>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a37      	ldr	r2, [pc, #220]	; (800750c <TIM_Base_SetConfig+0x110>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d108      	bne.n	8007446 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800743a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	4313      	orrs	r3, r2
 8007444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a2d      	ldr	r2, [pc, #180]	; (8007500 <TIM_Base_SetConfig+0x104>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d01b      	beq.n	8007486 <TIM_Base_SetConfig+0x8a>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007454:	d017      	beq.n	8007486 <TIM_Base_SetConfig+0x8a>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a2a      	ldr	r2, [pc, #168]	; (8007504 <TIM_Base_SetConfig+0x108>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d013      	beq.n	8007486 <TIM_Base_SetConfig+0x8a>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a29      	ldr	r2, [pc, #164]	; (8007508 <TIM_Base_SetConfig+0x10c>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d00f      	beq.n	8007486 <TIM_Base_SetConfig+0x8a>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a28      	ldr	r2, [pc, #160]	; (800750c <TIM_Base_SetConfig+0x110>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d00b      	beq.n	8007486 <TIM_Base_SetConfig+0x8a>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a27      	ldr	r2, [pc, #156]	; (8007510 <TIM_Base_SetConfig+0x114>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d007      	beq.n	8007486 <TIM_Base_SetConfig+0x8a>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a26      	ldr	r2, [pc, #152]	; (8007514 <TIM_Base_SetConfig+0x118>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d003      	beq.n	8007486 <TIM_Base_SetConfig+0x8a>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a25      	ldr	r2, [pc, #148]	; (8007518 <TIM_Base_SetConfig+0x11c>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d108      	bne.n	8007498 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800748c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	4313      	orrs	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a10      	ldr	r2, [pc, #64]	; (8007500 <TIM_Base_SetConfig+0x104>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d00f      	beq.n	80074e4 <TIM_Base_SetConfig+0xe8>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a11      	ldr	r2, [pc, #68]	; (800750c <TIM_Base_SetConfig+0x110>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d00b      	beq.n	80074e4 <TIM_Base_SetConfig+0xe8>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a10      	ldr	r2, [pc, #64]	; (8007510 <TIM_Base_SetConfig+0x114>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d007      	beq.n	80074e4 <TIM_Base_SetConfig+0xe8>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a0f      	ldr	r2, [pc, #60]	; (8007514 <TIM_Base_SetConfig+0x118>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d003      	beq.n	80074e4 <TIM_Base_SetConfig+0xe8>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a0e      	ldr	r2, [pc, #56]	; (8007518 <TIM_Base_SetConfig+0x11c>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d103      	bne.n	80074ec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	691a      	ldr	r2, [r3, #16]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	615a      	str	r2, [r3, #20]
}
 80074f2:	bf00      	nop
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	40012c00 	.word	0x40012c00
 8007504:	40000400 	.word	0x40000400
 8007508:	40000800 	.word	0x40000800
 800750c:	40013400 	.word	0x40013400
 8007510:	40014000 	.word	0x40014000
 8007514:	40014400 	.word	0x40014400
 8007518:	40014800 	.word	0x40014800

0800751c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800751c:	b480      	push	{r7}
 800751e:	b087      	sub	sp, #28
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	f023 0201 	bic.w	r2, r3, #1
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800754a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800754e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f023 0303 	bic.w	r3, r3, #3
 8007556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	4313      	orrs	r3, r2
 8007560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	f023 0302 	bic.w	r3, r3, #2
 8007568:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	4313      	orrs	r3, r2
 8007572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a2c      	ldr	r2, [pc, #176]	; (8007628 <TIM_OC1_SetConfig+0x10c>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d00f      	beq.n	800759c <TIM_OC1_SetConfig+0x80>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a2b      	ldr	r2, [pc, #172]	; (800762c <TIM_OC1_SetConfig+0x110>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d00b      	beq.n	800759c <TIM_OC1_SetConfig+0x80>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a2a      	ldr	r2, [pc, #168]	; (8007630 <TIM_OC1_SetConfig+0x114>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d007      	beq.n	800759c <TIM_OC1_SetConfig+0x80>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a29      	ldr	r2, [pc, #164]	; (8007634 <TIM_OC1_SetConfig+0x118>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d003      	beq.n	800759c <TIM_OC1_SetConfig+0x80>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a28      	ldr	r2, [pc, #160]	; (8007638 <TIM_OC1_SetConfig+0x11c>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d10c      	bne.n	80075b6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	f023 0308 	bic.w	r3, r3, #8
 80075a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	f023 0304 	bic.w	r3, r3, #4
 80075b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a1b      	ldr	r2, [pc, #108]	; (8007628 <TIM_OC1_SetConfig+0x10c>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d00f      	beq.n	80075de <TIM_OC1_SetConfig+0xc2>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a1a      	ldr	r2, [pc, #104]	; (800762c <TIM_OC1_SetConfig+0x110>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d00b      	beq.n	80075de <TIM_OC1_SetConfig+0xc2>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a19      	ldr	r2, [pc, #100]	; (8007630 <TIM_OC1_SetConfig+0x114>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d007      	beq.n	80075de <TIM_OC1_SetConfig+0xc2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a18      	ldr	r2, [pc, #96]	; (8007634 <TIM_OC1_SetConfig+0x118>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d003      	beq.n	80075de <TIM_OC1_SetConfig+0xc2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a17      	ldr	r2, [pc, #92]	; (8007638 <TIM_OC1_SetConfig+0x11c>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d111      	bne.n	8007602 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	695b      	ldr	r3, [r3, #20]
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	4313      	orrs	r3, r2
 8007600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	621a      	str	r2, [r3, #32]
}
 800761c:	bf00      	nop
 800761e:	371c      	adds	r7, #28
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	40012c00 	.word	0x40012c00
 800762c:	40013400 	.word	0x40013400
 8007630:	40014000 	.word	0x40014000
 8007634:	40014400 	.word	0x40014400
 8007638:	40014800 	.word	0x40014800

0800763c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800763c:	b480      	push	{r7}
 800763e:	b087      	sub	sp, #28
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	f023 0210 	bic.w	r2, r3, #16
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800766a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800766e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	021b      	lsls	r3, r3, #8
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	4313      	orrs	r3, r2
 8007682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f023 0320 	bic.w	r3, r3, #32
 800768a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	011b      	lsls	r3, r3, #4
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	4313      	orrs	r3, r2
 8007696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a28      	ldr	r2, [pc, #160]	; (800773c <TIM_OC2_SetConfig+0x100>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d003      	beq.n	80076a8 <TIM_OC2_SetConfig+0x6c>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a27      	ldr	r2, [pc, #156]	; (8007740 <TIM_OC2_SetConfig+0x104>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d10d      	bne.n	80076c4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	011b      	lsls	r3, r3, #4
 80076b6:	697a      	ldr	r2, [r7, #20]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a1d      	ldr	r2, [pc, #116]	; (800773c <TIM_OC2_SetConfig+0x100>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d00f      	beq.n	80076ec <TIM_OC2_SetConfig+0xb0>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a1c      	ldr	r2, [pc, #112]	; (8007740 <TIM_OC2_SetConfig+0x104>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d00b      	beq.n	80076ec <TIM_OC2_SetConfig+0xb0>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a1b      	ldr	r2, [pc, #108]	; (8007744 <TIM_OC2_SetConfig+0x108>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d007      	beq.n	80076ec <TIM_OC2_SetConfig+0xb0>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a1a      	ldr	r2, [pc, #104]	; (8007748 <TIM_OC2_SetConfig+0x10c>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d003      	beq.n	80076ec <TIM_OC2_SetConfig+0xb0>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a19      	ldr	r2, [pc, #100]	; (800774c <TIM_OC2_SetConfig+0x110>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d113      	bne.n	8007714 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076f2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076fa:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	4313      	orrs	r3, r2
 8007706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	4313      	orrs	r3, r2
 8007712:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	621a      	str	r2, [r3, #32]
}
 800772e:	bf00      	nop
 8007730:	371c      	adds	r7, #28
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	40012c00 	.word	0x40012c00
 8007740:	40013400 	.word	0x40013400
 8007744:	40014000 	.word	0x40014000
 8007748:	40014400 	.word	0x40014400
 800774c:	40014800 	.word	0x40014800

08007750 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007750:	b480      	push	{r7}
 8007752:	b087      	sub	sp, #28
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a1b      	ldr	r3, [r3, #32]
 800775e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a1b      	ldr	r3, [r3, #32]
 800776a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	69db      	ldr	r3, [r3, #28]
 8007776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800777e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f023 0303 	bic.w	r3, r3, #3
 800778a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	4313      	orrs	r3, r2
 8007794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800779c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	021b      	lsls	r3, r3, #8
 80077a4:	697a      	ldr	r2, [r7, #20]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a27      	ldr	r2, [pc, #156]	; (800784c <TIM_OC3_SetConfig+0xfc>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d003      	beq.n	80077ba <TIM_OC3_SetConfig+0x6a>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a26      	ldr	r2, [pc, #152]	; (8007850 <TIM_OC3_SetConfig+0x100>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d10d      	bne.n	80077d6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	021b      	lsls	r3, r3, #8
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077d4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a1c      	ldr	r2, [pc, #112]	; (800784c <TIM_OC3_SetConfig+0xfc>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d00f      	beq.n	80077fe <TIM_OC3_SetConfig+0xae>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a1b      	ldr	r2, [pc, #108]	; (8007850 <TIM_OC3_SetConfig+0x100>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d00b      	beq.n	80077fe <TIM_OC3_SetConfig+0xae>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a1a      	ldr	r2, [pc, #104]	; (8007854 <TIM_OC3_SetConfig+0x104>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d007      	beq.n	80077fe <TIM_OC3_SetConfig+0xae>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a19      	ldr	r2, [pc, #100]	; (8007858 <TIM_OC3_SetConfig+0x108>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d003      	beq.n	80077fe <TIM_OC3_SetConfig+0xae>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a18      	ldr	r2, [pc, #96]	; (800785c <TIM_OC3_SetConfig+0x10c>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d113      	bne.n	8007826 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800780c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	011b      	lsls	r3, r3, #4
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	4313      	orrs	r3, r2
 8007818:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	011b      	lsls	r3, r3, #4
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	4313      	orrs	r3, r2
 8007824:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	697a      	ldr	r2, [r7, #20]
 800783e:	621a      	str	r2, [r3, #32]
}
 8007840:	bf00      	nop
 8007842:	371c      	adds	r7, #28
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	40012c00 	.word	0x40012c00
 8007850:	40013400 	.word	0x40013400
 8007854:	40014000 	.word	0x40014000
 8007858:	40014400 	.word	0x40014400
 800785c:	40014800 	.word	0x40014800

08007860 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007860:	b480      	push	{r7}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800788e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800789a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	021b      	lsls	r3, r3, #8
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	031b      	lsls	r3, r3, #12
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a18      	ldr	r2, [pc, #96]	; (8007920 <TIM_OC4_SetConfig+0xc0>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d00f      	beq.n	80078e4 <TIM_OC4_SetConfig+0x84>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a17      	ldr	r2, [pc, #92]	; (8007924 <TIM_OC4_SetConfig+0xc4>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d00b      	beq.n	80078e4 <TIM_OC4_SetConfig+0x84>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a16      	ldr	r2, [pc, #88]	; (8007928 <TIM_OC4_SetConfig+0xc8>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d007      	beq.n	80078e4 <TIM_OC4_SetConfig+0x84>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a15      	ldr	r2, [pc, #84]	; (800792c <TIM_OC4_SetConfig+0xcc>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d003      	beq.n	80078e4 <TIM_OC4_SetConfig+0x84>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a14      	ldr	r2, [pc, #80]	; (8007930 <TIM_OC4_SetConfig+0xd0>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d109      	bne.n	80078f8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	019b      	lsls	r3, r3, #6
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	621a      	str	r2, [r3, #32]
}
 8007912:	bf00      	nop
 8007914:	371c      	adds	r7, #28
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	40012c00 	.word	0x40012c00
 8007924:	40013400 	.word	0x40013400
 8007928:	40014000 	.word	0x40014000
 800792c:	40014400 	.word	0x40014400
 8007930:	40014800 	.word	0x40014800

08007934 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007934:	b480      	push	{r7}
 8007936:	b087      	sub	sp, #28
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800795a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	4313      	orrs	r3, r2
 8007970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007978:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	041b      	lsls	r3, r3, #16
 8007980:	693a      	ldr	r2, [r7, #16]
 8007982:	4313      	orrs	r3, r2
 8007984:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a17      	ldr	r2, [pc, #92]	; (80079e8 <TIM_OC5_SetConfig+0xb4>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d00f      	beq.n	80079ae <TIM_OC5_SetConfig+0x7a>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a16      	ldr	r2, [pc, #88]	; (80079ec <TIM_OC5_SetConfig+0xb8>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d00b      	beq.n	80079ae <TIM_OC5_SetConfig+0x7a>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a15      	ldr	r2, [pc, #84]	; (80079f0 <TIM_OC5_SetConfig+0xbc>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d007      	beq.n	80079ae <TIM_OC5_SetConfig+0x7a>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a14      	ldr	r2, [pc, #80]	; (80079f4 <TIM_OC5_SetConfig+0xc0>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d003      	beq.n	80079ae <TIM_OC5_SetConfig+0x7a>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a13      	ldr	r2, [pc, #76]	; (80079f8 <TIM_OC5_SetConfig+0xc4>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d109      	bne.n	80079c2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	021b      	lsls	r3, r3, #8
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	4313      	orrs	r3, r2
 80079c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	685a      	ldr	r2, [r3, #4]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	621a      	str	r2, [r3, #32]
}
 80079dc:	bf00      	nop
 80079de:	371c      	adds	r7, #28
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr
 80079e8:	40012c00 	.word	0x40012c00
 80079ec:	40013400 	.word	0x40013400
 80079f0:	40014000 	.word	0x40014000
 80079f4:	40014400 	.word	0x40014400
 80079f8:	40014800 	.word	0x40014800

080079fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b087      	sub	sp, #28
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	021b      	lsls	r3, r3, #8
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	051b      	lsls	r3, r3, #20
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a18      	ldr	r2, [pc, #96]	; (8007ab4 <TIM_OC6_SetConfig+0xb8>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d00f      	beq.n	8007a78 <TIM_OC6_SetConfig+0x7c>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a17      	ldr	r2, [pc, #92]	; (8007ab8 <TIM_OC6_SetConfig+0xbc>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d00b      	beq.n	8007a78 <TIM_OC6_SetConfig+0x7c>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a16      	ldr	r2, [pc, #88]	; (8007abc <TIM_OC6_SetConfig+0xc0>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d007      	beq.n	8007a78 <TIM_OC6_SetConfig+0x7c>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a15      	ldr	r2, [pc, #84]	; (8007ac0 <TIM_OC6_SetConfig+0xc4>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d003      	beq.n	8007a78 <TIM_OC6_SetConfig+0x7c>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a14      	ldr	r2, [pc, #80]	; (8007ac4 <TIM_OC6_SetConfig+0xc8>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d109      	bne.n	8007a8c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	695b      	ldr	r3, [r3, #20]
 8007a84:	029b      	lsls	r3, r3, #10
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	685a      	ldr	r2, [r3, #4]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	693a      	ldr	r2, [r7, #16]
 8007aa4:	621a      	str	r2, [r3, #32]
}
 8007aa6:	bf00      	nop
 8007aa8:	371c      	adds	r7, #28
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	40012c00 	.word	0x40012c00
 8007ab8:	40013400 	.word	0x40013400
 8007abc:	40014000 	.word	0x40014000
 8007ac0:	40014400 	.word	0x40014400
 8007ac4:	40014800 	.word	0x40014800

08007ac8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b087      	sub	sp, #28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	f003 031f 	and.w	r3, r3, #31
 8007ada:	2201      	movs	r2, #1
 8007adc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6a1a      	ldr	r2, [r3, #32]
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	43db      	mvns	r3, r3
 8007aea:	401a      	ands	r2, r3
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6a1a      	ldr	r2, [r3, #32]
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	f003 031f 	and.w	r3, r3, #31
 8007afa:	6879      	ldr	r1, [r7, #4]
 8007afc:	fa01 f303 	lsl.w	r3, r1, r3
 8007b00:	431a      	orrs	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	621a      	str	r2, [r3, #32]
}
 8007b06:	bf00      	nop
 8007b08:	371c      	adds	r7, #28
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
	...

08007b14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d101      	bne.n	8007b2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b28:	2302      	movs	r3, #2
 8007b2a:	e063      	b.n	8007bf4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2202      	movs	r2, #2
 8007b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a2b      	ldr	r2, [pc, #172]	; (8007c00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d004      	beq.n	8007b60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a2a      	ldr	r2, [pc, #168]	; (8007c04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d108      	bne.n	8007b72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a1b      	ldr	r2, [pc, #108]	; (8007c00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d018      	beq.n	8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b9e:	d013      	beq.n	8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a18      	ldr	r2, [pc, #96]	; (8007c08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d00e      	beq.n	8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a17      	ldr	r2, [pc, #92]	; (8007c0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d009      	beq.n	8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a12      	ldr	r2, [pc, #72]	; (8007c04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d004      	beq.n	8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a13      	ldr	r2, [pc, #76]	; (8007c10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d10c      	bne.n	8007be2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2201      	movs	r2, #1
 8007be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr
 8007c00:	40012c00 	.word	0x40012c00
 8007c04:	40013400 	.word	0x40013400
 8007c08:	40000400 	.word	0x40000400
 8007c0c:	40000800 	.word	0x40000800
 8007c10:	40014000 	.word	0x40014000

08007c14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d101      	bne.n	8007c30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	e065      	b.n	8007cfc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	695b      	ldr	r3, [r3, #20]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c96:	4313      	orrs	r3, r2
 8007c98:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	041b      	lsls	r3, r3, #16
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a16      	ldr	r2, [pc, #88]	; (8007d08 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d004      	beq.n	8007cbe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a14      	ldr	r2, [pc, #80]	; (8007d0c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d115      	bne.n	8007cea <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc8:	051b      	lsls	r3, r3, #20
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	69db      	ldr	r3, [r3, #28]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3714      	adds	r7, #20
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr
 8007d08:	40012c00 	.word	0x40012c00
 8007d0c:	40013400 	.word	0x40013400

08007d10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d18:	bf00      	nop
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d2c:	bf00      	nop
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d40:	bf00      	nop
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d101      	bne.n	8007d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e040      	b.n	8007de0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d106      	bne.n	8007d74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f7f9 fed2 	bl	8001b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2224      	movs	r2, #36	; 0x24
 8007d78:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f022 0201 	bic.w	r2, r2, #1
 8007d88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f8b6 	bl	8007efc <UART_SetConfig>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d101      	bne.n	8007d9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e022      	b.n	8007de0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d002      	beq.n	8007da8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fa7e 	bl	80082a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	685a      	ldr	r2, [r3, #4]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007db6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	689a      	ldr	r2, [r3, #8]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007dc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f042 0201 	orr.w	r2, r2, #1
 8007dd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 fb05 	bl	80083e8 <UART_CheckIdleState>
 8007dde:	4603      	mov	r3, r0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b08a      	sub	sp, #40	; 0x28
 8007dec:	af02      	add	r7, sp, #8
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	603b      	str	r3, [r7, #0]
 8007df4:	4613      	mov	r3, r2
 8007df6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dfc:	2b20      	cmp	r3, #32
 8007dfe:	d178      	bne.n	8007ef2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d002      	beq.n	8007e0c <HAL_UART_Transmit+0x24>
 8007e06:	88fb      	ldrh	r3, [r7, #6]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d101      	bne.n	8007e10 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e071      	b.n	8007ef4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2221      	movs	r2, #33	; 0x21
 8007e1c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e1e:	f7fa fb25 	bl	800246c <HAL_GetTick>
 8007e22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	88fa      	ldrh	r2, [r7, #6]
 8007e28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	88fa      	ldrh	r2, [r7, #6]
 8007e30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e3c:	d108      	bne.n	8007e50 <HAL_UART_Transmit+0x68>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d104      	bne.n	8007e50 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007e46:	2300      	movs	r3, #0
 8007e48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	61bb      	str	r3, [r7, #24]
 8007e4e:	e003      	b.n	8007e58 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e54:	2300      	movs	r3, #0
 8007e56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e58:	e030      	b.n	8007ebc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	2200      	movs	r2, #0
 8007e62:	2180      	movs	r1, #128	; 0x80
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f000 fb67 	bl	8008538 <UART_WaitOnFlagUntilTimeout>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d004      	beq.n	8007e7a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2220      	movs	r2, #32
 8007e74:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e03c      	b.n	8007ef4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10b      	bne.n	8007e98 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	881a      	ldrh	r2, [r3, #0]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e8c:	b292      	uxth	r2, r2
 8007e8e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	3302      	adds	r3, #2
 8007e94:	61bb      	str	r3, [r7, #24]
 8007e96:	e008      	b.n	8007eaa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	781a      	ldrb	r2, [r3, #0]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	b292      	uxth	r2, r2
 8007ea2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1c8      	bne.n	8007e5a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	9300      	str	r3, [sp, #0]
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	2140      	movs	r1, #64	; 0x40
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f000 fb30 	bl	8008538 <UART_WaitOnFlagUntilTimeout>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d004      	beq.n	8007ee8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2220      	movs	r2, #32
 8007ee2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e005      	b.n	8007ef4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2220      	movs	r2, #32
 8007eec:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	e000      	b.n	8007ef4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007ef2:	2302      	movs	r3, #2
  }
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3720      	adds	r7, #32
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b088      	sub	sp, #32
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	689a      	ldr	r2, [r3, #8]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	431a      	orrs	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	695b      	ldr	r3, [r3, #20]
 8007f16:	431a      	orrs	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	69db      	ldr	r3, [r3, #28]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007f2a:	f023 030c 	bic.w	r3, r3, #12
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	6812      	ldr	r2, [r2, #0]
 8007f32:	6979      	ldr	r1, [r7, #20]
 8007f34:	430b      	orrs	r3, r1
 8007f36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	68da      	ldr	r2, [r3, #12]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a1b      	ldr	r3, [r3, #32]
 8007f58:	697a      	ldr	r2, [r7, #20]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	430a      	orrs	r2, r1
 8007f70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4aa7      	ldr	r2, [pc, #668]	; (8008214 <UART_SetConfig+0x318>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d120      	bne.n	8007fbe <UART_SetConfig+0xc2>
 8007f7c:	4ba6      	ldr	r3, [pc, #664]	; (8008218 <UART_SetConfig+0x31c>)
 8007f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f80:	f003 0303 	and.w	r3, r3, #3
 8007f84:	2b03      	cmp	r3, #3
 8007f86:	d817      	bhi.n	8007fb8 <UART_SetConfig+0xbc>
 8007f88:	a201      	add	r2, pc, #4	; (adr r2, 8007f90 <UART_SetConfig+0x94>)
 8007f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8e:	bf00      	nop
 8007f90:	08007fa1 	.word	0x08007fa1
 8007f94:	08007fad 	.word	0x08007fad
 8007f98:	08007fb3 	.word	0x08007fb3
 8007f9c:	08007fa7 	.word	0x08007fa7
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	77fb      	strb	r3, [r7, #31]
 8007fa4:	e0b5      	b.n	8008112 <UART_SetConfig+0x216>
 8007fa6:	2302      	movs	r3, #2
 8007fa8:	77fb      	strb	r3, [r7, #31]
 8007faa:	e0b2      	b.n	8008112 <UART_SetConfig+0x216>
 8007fac:	2304      	movs	r3, #4
 8007fae:	77fb      	strb	r3, [r7, #31]
 8007fb0:	e0af      	b.n	8008112 <UART_SetConfig+0x216>
 8007fb2:	2308      	movs	r3, #8
 8007fb4:	77fb      	strb	r3, [r7, #31]
 8007fb6:	e0ac      	b.n	8008112 <UART_SetConfig+0x216>
 8007fb8:	2310      	movs	r3, #16
 8007fba:	77fb      	strb	r3, [r7, #31]
 8007fbc:	e0a9      	b.n	8008112 <UART_SetConfig+0x216>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a96      	ldr	r2, [pc, #600]	; (800821c <UART_SetConfig+0x320>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d124      	bne.n	8008012 <UART_SetConfig+0x116>
 8007fc8:	4b93      	ldr	r3, [pc, #588]	; (8008218 <UART_SetConfig+0x31c>)
 8007fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007fd0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007fd4:	d011      	beq.n	8007ffa <UART_SetConfig+0xfe>
 8007fd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007fda:	d817      	bhi.n	800800c <UART_SetConfig+0x110>
 8007fdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fe0:	d011      	beq.n	8008006 <UART_SetConfig+0x10a>
 8007fe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fe6:	d811      	bhi.n	800800c <UART_SetConfig+0x110>
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d003      	beq.n	8007ff4 <UART_SetConfig+0xf8>
 8007fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ff0:	d006      	beq.n	8008000 <UART_SetConfig+0x104>
 8007ff2:	e00b      	b.n	800800c <UART_SetConfig+0x110>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	77fb      	strb	r3, [r7, #31]
 8007ff8:	e08b      	b.n	8008112 <UART_SetConfig+0x216>
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	77fb      	strb	r3, [r7, #31]
 8007ffe:	e088      	b.n	8008112 <UART_SetConfig+0x216>
 8008000:	2304      	movs	r3, #4
 8008002:	77fb      	strb	r3, [r7, #31]
 8008004:	e085      	b.n	8008112 <UART_SetConfig+0x216>
 8008006:	2308      	movs	r3, #8
 8008008:	77fb      	strb	r3, [r7, #31]
 800800a:	e082      	b.n	8008112 <UART_SetConfig+0x216>
 800800c:	2310      	movs	r3, #16
 800800e:	77fb      	strb	r3, [r7, #31]
 8008010:	e07f      	b.n	8008112 <UART_SetConfig+0x216>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a82      	ldr	r2, [pc, #520]	; (8008220 <UART_SetConfig+0x324>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d124      	bne.n	8008066 <UART_SetConfig+0x16a>
 800801c:	4b7e      	ldr	r3, [pc, #504]	; (8008218 <UART_SetConfig+0x31c>)
 800801e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008020:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008024:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008028:	d011      	beq.n	800804e <UART_SetConfig+0x152>
 800802a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800802e:	d817      	bhi.n	8008060 <UART_SetConfig+0x164>
 8008030:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008034:	d011      	beq.n	800805a <UART_SetConfig+0x15e>
 8008036:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800803a:	d811      	bhi.n	8008060 <UART_SetConfig+0x164>
 800803c:	2b00      	cmp	r3, #0
 800803e:	d003      	beq.n	8008048 <UART_SetConfig+0x14c>
 8008040:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008044:	d006      	beq.n	8008054 <UART_SetConfig+0x158>
 8008046:	e00b      	b.n	8008060 <UART_SetConfig+0x164>
 8008048:	2300      	movs	r3, #0
 800804a:	77fb      	strb	r3, [r7, #31]
 800804c:	e061      	b.n	8008112 <UART_SetConfig+0x216>
 800804e:	2302      	movs	r3, #2
 8008050:	77fb      	strb	r3, [r7, #31]
 8008052:	e05e      	b.n	8008112 <UART_SetConfig+0x216>
 8008054:	2304      	movs	r3, #4
 8008056:	77fb      	strb	r3, [r7, #31]
 8008058:	e05b      	b.n	8008112 <UART_SetConfig+0x216>
 800805a:	2308      	movs	r3, #8
 800805c:	77fb      	strb	r3, [r7, #31]
 800805e:	e058      	b.n	8008112 <UART_SetConfig+0x216>
 8008060:	2310      	movs	r3, #16
 8008062:	77fb      	strb	r3, [r7, #31]
 8008064:	e055      	b.n	8008112 <UART_SetConfig+0x216>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a6e      	ldr	r2, [pc, #440]	; (8008224 <UART_SetConfig+0x328>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d124      	bne.n	80080ba <UART_SetConfig+0x1be>
 8008070:	4b69      	ldr	r3, [pc, #420]	; (8008218 <UART_SetConfig+0x31c>)
 8008072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008074:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008078:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800807c:	d011      	beq.n	80080a2 <UART_SetConfig+0x1a6>
 800807e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008082:	d817      	bhi.n	80080b4 <UART_SetConfig+0x1b8>
 8008084:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008088:	d011      	beq.n	80080ae <UART_SetConfig+0x1b2>
 800808a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800808e:	d811      	bhi.n	80080b4 <UART_SetConfig+0x1b8>
 8008090:	2b00      	cmp	r3, #0
 8008092:	d003      	beq.n	800809c <UART_SetConfig+0x1a0>
 8008094:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008098:	d006      	beq.n	80080a8 <UART_SetConfig+0x1ac>
 800809a:	e00b      	b.n	80080b4 <UART_SetConfig+0x1b8>
 800809c:	2300      	movs	r3, #0
 800809e:	77fb      	strb	r3, [r7, #31]
 80080a0:	e037      	b.n	8008112 <UART_SetConfig+0x216>
 80080a2:	2302      	movs	r3, #2
 80080a4:	77fb      	strb	r3, [r7, #31]
 80080a6:	e034      	b.n	8008112 <UART_SetConfig+0x216>
 80080a8:	2304      	movs	r3, #4
 80080aa:	77fb      	strb	r3, [r7, #31]
 80080ac:	e031      	b.n	8008112 <UART_SetConfig+0x216>
 80080ae:	2308      	movs	r3, #8
 80080b0:	77fb      	strb	r3, [r7, #31]
 80080b2:	e02e      	b.n	8008112 <UART_SetConfig+0x216>
 80080b4:	2310      	movs	r3, #16
 80080b6:	77fb      	strb	r3, [r7, #31]
 80080b8:	e02b      	b.n	8008112 <UART_SetConfig+0x216>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a5a      	ldr	r2, [pc, #360]	; (8008228 <UART_SetConfig+0x32c>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d124      	bne.n	800810e <UART_SetConfig+0x212>
 80080c4:	4b54      	ldr	r3, [pc, #336]	; (8008218 <UART_SetConfig+0x31c>)
 80080c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80080cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80080d0:	d011      	beq.n	80080f6 <UART_SetConfig+0x1fa>
 80080d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80080d6:	d817      	bhi.n	8008108 <UART_SetConfig+0x20c>
 80080d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080dc:	d011      	beq.n	8008102 <UART_SetConfig+0x206>
 80080de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080e2:	d811      	bhi.n	8008108 <UART_SetConfig+0x20c>
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d003      	beq.n	80080f0 <UART_SetConfig+0x1f4>
 80080e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080ec:	d006      	beq.n	80080fc <UART_SetConfig+0x200>
 80080ee:	e00b      	b.n	8008108 <UART_SetConfig+0x20c>
 80080f0:	2300      	movs	r3, #0
 80080f2:	77fb      	strb	r3, [r7, #31]
 80080f4:	e00d      	b.n	8008112 <UART_SetConfig+0x216>
 80080f6:	2302      	movs	r3, #2
 80080f8:	77fb      	strb	r3, [r7, #31]
 80080fa:	e00a      	b.n	8008112 <UART_SetConfig+0x216>
 80080fc:	2304      	movs	r3, #4
 80080fe:	77fb      	strb	r3, [r7, #31]
 8008100:	e007      	b.n	8008112 <UART_SetConfig+0x216>
 8008102:	2308      	movs	r3, #8
 8008104:	77fb      	strb	r3, [r7, #31]
 8008106:	e004      	b.n	8008112 <UART_SetConfig+0x216>
 8008108:	2310      	movs	r3, #16
 800810a:	77fb      	strb	r3, [r7, #31]
 800810c:	e001      	b.n	8008112 <UART_SetConfig+0x216>
 800810e:	2310      	movs	r3, #16
 8008110:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	69db      	ldr	r3, [r3, #28]
 8008116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800811a:	d15b      	bne.n	80081d4 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800811c:	7ffb      	ldrb	r3, [r7, #31]
 800811e:	2b08      	cmp	r3, #8
 8008120:	d827      	bhi.n	8008172 <UART_SetConfig+0x276>
 8008122:	a201      	add	r2, pc, #4	; (adr r2, 8008128 <UART_SetConfig+0x22c>)
 8008124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008128:	0800814d 	.word	0x0800814d
 800812c:	08008155 	.word	0x08008155
 8008130:	0800815d 	.word	0x0800815d
 8008134:	08008173 	.word	0x08008173
 8008138:	08008163 	.word	0x08008163
 800813c:	08008173 	.word	0x08008173
 8008140:	08008173 	.word	0x08008173
 8008144:	08008173 	.word	0x08008173
 8008148:	0800816b 	.word	0x0800816b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800814c:	f7fe f90e 	bl	800636c <HAL_RCC_GetPCLK1Freq>
 8008150:	61b8      	str	r0, [r7, #24]
        break;
 8008152:	e013      	b.n	800817c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008154:	f7fe f92c 	bl	80063b0 <HAL_RCC_GetPCLK2Freq>
 8008158:	61b8      	str	r0, [r7, #24]
        break;
 800815a:	e00f      	b.n	800817c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800815c:	4b33      	ldr	r3, [pc, #204]	; (800822c <UART_SetConfig+0x330>)
 800815e:	61bb      	str	r3, [r7, #24]
        break;
 8008160:	e00c      	b.n	800817c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008162:	f7fe f88d 	bl	8006280 <HAL_RCC_GetSysClockFreq>
 8008166:	61b8      	str	r0, [r7, #24]
        break;
 8008168:	e008      	b.n	800817c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800816a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800816e:	61bb      	str	r3, [r7, #24]
        break;
 8008170:	e004      	b.n	800817c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8008172:	2300      	movs	r3, #0
 8008174:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	77bb      	strb	r3, [r7, #30]
        break;
 800817a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	2b00      	cmp	r3, #0
 8008180:	f000 8082 	beq.w	8008288 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	005a      	lsls	r2, r3, #1
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	085b      	lsrs	r3, r3, #1
 800818e:	441a      	add	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	fbb2 f3f3 	udiv	r3, r2, r3
 8008198:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	2b0f      	cmp	r3, #15
 800819e:	d916      	bls.n	80081ce <UART_SetConfig+0x2d2>
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081a6:	d212      	bcs.n	80081ce <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	f023 030f 	bic.w	r3, r3, #15
 80081b0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	085b      	lsrs	r3, r3, #1
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	f003 0307 	and.w	r3, r3, #7
 80081bc:	b29a      	uxth	r2, r3
 80081be:	89fb      	ldrh	r3, [r7, #14]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	89fa      	ldrh	r2, [r7, #14]
 80081ca:	60da      	str	r2, [r3, #12]
 80081cc:	e05c      	b.n	8008288 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	77bb      	strb	r3, [r7, #30]
 80081d2:	e059      	b.n	8008288 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80081d4:	7ffb      	ldrb	r3, [r7, #31]
 80081d6:	2b08      	cmp	r3, #8
 80081d8:	d835      	bhi.n	8008246 <UART_SetConfig+0x34a>
 80081da:	a201      	add	r2, pc, #4	; (adr r2, 80081e0 <UART_SetConfig+0x2e4>)
 80081dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e0:	08008205 	.word	0x08008205
 80081e4:	0800820d 	.word	0x0800820d
 80081e8:	08008231 	.word	0x08008231
 80081ec:	08008247 	.word	0x08008247
 80081f0:	08008237 	.word	0x08008237
 80081f4:	08008247 	.word	0x08008247
 80081f8:	08008247 	.word	0x08008247
 80081fc:	08008247 	.word	0x08008247
 8008200:	0800823f 	.word	0x0800823f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008204:	f7fe f8b2 	bl	800636c <HAL_RCC_GetPCLK1Freq>
 8008208:	61b8      	str	r0, [r7, #24]
        break;
 800820a:	e021      	b.n	8008250 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800820c:	f7fe f8d0 	bl	80063b0 <HAL_RCC_GetPCLK2Freq>
 8008210:	61b8      	str	r0, [r7, #24]
        break;
 8008212:	e01d      	b.n	8008250 <UART_SetConfig+0x354>
 8008214:	40013800 	.word	0x40013800
 8008218:	40021000 	.word	0x40021000
 800821c:	40004400 	.word	0x40004400
 8008220:	40004800 	.word	0x40004800
 8008224:	40004c00 	.word	0x40004c00
 8008228:	40005000 	.word	0x40005000
 800822c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008230:	4b1b      	ldr	r3, [pc, #108]	; (80082a0 <UART_SetConfig+0x3a4>)
 8008232:	61bb      	str	r3, [r7, #24]
        break;
 8008234:	e00c      	b.n	8008250 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008236:	f7fe f823 	bl	8006280 <HAL_RCC_GetSysClockFreq>
 800823a:	61b8      	str	r0, [r7, #24]
        break;
 800823c:	e008      	b.n	8008250 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800823e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008242:	61bb      	str	r3, [r7, #24]
        break;
 8008244:	e004      	b.n	8008250 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8008246:	2300      	movs	r3, #0
 8008248:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	77bb      	strb	r3, [r7, #30]
        break;
 800824e:	bf00      	nop
    }

    if (pclk != 0U)
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d018      	beq.n	8008288 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	085a      	lsrs	r2, r3, #1
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	441a      	add	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	fbb2 f3f3 	udiv	r3, r2, r3
 8008268:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	2b0f      	cmp	r3, #15
 800826e:	d909      	bls.n	8008284 <UART_SetConfig+0x388>
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008276:	d205      	bcs.n	8008284 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	b29a      	uxth	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	60da      	str	r2, [r3, #12]
 8008282:	e001      	b.n	8008288 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008294:	7fbb      	ldrb	r3, [r7, #30]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3720      	adds	r7, #32
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	007a1200 	.word	0x007a1200

080082a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b0:	f003 0301 	and.w	r3, r3, #1
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00a      	beq.n	80082ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	430a      	orrs	r2, r1
 80082cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d2:	f003 0302 	and.w	r3, r3, #2
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00a      	beq.n	80082f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	430a      	orrs	r2, r1
 80082ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f4:	f003 0304 	and.w	r3, r3, #4
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00a      	beq.n	8008312 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	430a      	orrs	r2, r1
 8008310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008316:	f003 0308 	and.w	r3, r3, #8
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00a      	beq.n	8008334 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	430a      	orrs	r2, r1
 8008332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008338:	f003 0310 	and.w	r3, r3, #16
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00a      	beq.n	8008356 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	430a      	orrs	r2, r1
 8008354:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835a:	f003 0320 	and.w	r3, r3, #32
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00a      	beq.n	8008378 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	430a      	orrs	r2, r1
 8008376:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008380:	2b00      	cmp	r3, #0
 8008382:	d01a      	beq.n	80083ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	430a      	orrs	r2, r1
 8008398:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800839e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083a2:	d10a      	bne.n	80083ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	430a      	orrs	r2, r1
 80083b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00a      	beq.n	80083dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	430a      	orrs	r2, r1
 80083da:	605a      	str	r2, [r3, #4]
  }
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b098      	sub	sp, #96	; 0x60
 80083ec:	af02      	add	r7, sp, #8
 80083ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083f8:	f7fa f838 	bl	800246c <HAL_GetTick>
 80083fc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0308 	and.w	r3, r3, #8
 8008408:	2b08      	cmp	r3, #8
 800840a:	d12e      	bne.n	800846a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800840c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008414:	2200      	movs	r2, #0
 8008416:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f88c 	bl	8008538 <UART_WaitOnFlagUntilTimeout>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d021      	beq.n	800846a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842e:	e853 3f00 	ldrex	r3, [r3]
 8008432:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800843a:	653b      	str	r3, [r7, #80]	; 0x50
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	461a      	mov	r2, r3
 8008442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008444:	647b      	str	r3, [r7, #68]	; 0x44
 8008446:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008448:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800844a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800844c:	e841 2300 	strex	r3, r2, [r1]
 8008450:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1e6      	bne.n	8008426 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2220      	movs	r2, #32
 800845c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008466:	2303      	movs	r3, #3
 8008468:	e062      	b.n	8008530 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 0304 	and.w	r3, r3, #4
 8008474:	2b04      	cmp	r3, #4
 8008476:	d149      	bne.n	800850c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008478:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008480:	2200      	movs	r2, #0
 8008482:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f856 	bl	8008538 <UART_WaitOnFlagUntilTimeout>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d03c      	beq.n	800850c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849a:	e853 3f00 	ldrex	r3, [r3]
 800849e:	623b      	str	r3, [r7, #32]
   return(result);
 80084a0:	6a3b      	ldr	r3, [r7, #32]
 80084a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	461a      	mov	r2, r3
 80084ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084b0:	633b      	str	r3, [r7, #48]	; 0x30
 80084b2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084b8:	e841 2300 	strex	r3, r2, [r1]
 80084bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1e6      	bne.n	8008492 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3308      	adds	r3, #8
 80084ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	e853 3f00 	ldrex	r3, [r3]
 80084d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f023 0301 	bic.w	r3, r3, #1
 80084da:	64bb      	str	r3, [r7, #72]	; 0x48
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3308      	adds	r3, #8
 80084e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084e4:	61fa      	str	r2, [r7, #28]
 80084e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e8:	69b9      	ldr	r1, [r7, #24]
 80084ea:	69fa      	ldr	r2, [r7, #28]
 80084ec:	e841 2300 	strex	r3, r2, [r1]
 80084f0:	617b      	str	r3, [r7, #20]
   return(result);
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1e5      	bne.n	80084c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2220      	movs	r2, #32
 80084fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008508:	2303      	movs	r3, #3
 800850a:	e011      	b.n	8008530 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2220      	movs	r2, #32
 8008510:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2220      	movs	r2, #32
 8008516:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3758      	adds	r7, #88	; 0x58
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	603b      	str	r3, [r7, #0]
 8008544:	4613      	mov	r3, r2
 8008546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008548:	e049      	b.n	80085de <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008550:	d045      	beq.n	80085de <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008552:	f7f9 ff8b 	bl	800246c <HAL_GetTick>
 8008556:	4602      	mov	r2, r0
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	69ba      	ldr	r2, [r7, #24]
 800855e:	429a      	cmp	r2, r3
 8008560:	d302      	bcc.n	8008568 <UART_WaitOnFlagUntilTimeout+0x30>
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008568:	2303      	movs	r3, #3
 800856a:	e048      	b.n	80085fe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0304 	and.w	r3, r3, #4
 8008576:	2b00      	cmp	r3, #0
 8008578:	d031      	beq.n	80085de <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	69db      	ldr	r3, [r3, #28]
 8008580:	f003 0308 	and.w	r3, r3, #8
 8008584:	2b08      	cmp	r3, #8
 8008586:	d110      	bne.n	80085aa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2208      	movs	r2, #8
 800858e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f000 f838 	bl	8008606 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2208      	movs	r2, #8
 800859a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e029      	b.n	80085fe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	69db      	ldr	r3, [r3, #28]
 80085b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085b8:	d111      	bne.n	80085de <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f000 f81e 	bl	8008606 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2220      	movs	r2, #32
 80085ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e00f      	b.n	80085fe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	69da      	ldr	r2, [r3, #28]
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	4013      	ands	r3, r2
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	bf0c      	ite	eq
 80085ee:	2301      	moveq	r3, #1
 80085f0:	2300      	movne	r3, #0
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	461a      	mov	r2, r3
 80085f6:	79fb      	ldrb	r3, [r7, #7]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d0a6      	beq.n	800854a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008606:	b480      	push	{r7}
 8008608:	b095      	sub	sp, #84	; 0x54
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008616:	e853 3f00 	ldrex	r3, [r3]
 800861a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800861c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	461a      	mov	r2, r3
 800862a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800862c:	643b      	str	r3, [r7, #64]	; 0x40
 800862e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008630:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008632:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008634:	e841 2300 	strex	r3, r2, [r1]
 8008638:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800863a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1e6      	bne.n	800860e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	3308      	adds	r3, #8
 8008646:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008648:	6a3b      	ldr	r3, [r7, #32]
 800864a:	e853 3f00 	ldrex	r3, [r3]
 800864e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	f023 0301 	bic.w	r3, r3, #1
 8008656:	64bb      	str	r3, [r7, #72]	; 0x48
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3308      	adds	r3, #8
 800865e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008660:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008662:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008668:	e841 2300 	strex	r3, r2, [r1]
 800866c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800866e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1e5      	bne.n	8008640 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008678:	2b01      	cmp	r3, #1
 800867a:	d118      	bne.n	80086ae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	e853 3f00 	ldrex	r3, [r3]
 8008688:	60bb      	str	r3, [r7, #8]
   return(result);
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	f023 0310 	bic.w	r3, r3, #16
 8008690:	647b      	str	r3, [r7, #68]	; 0x44
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	461a      	mov	r2, r3
 8008698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800869a:	61bb      	str	r3, [r7, #24]
 800869c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869e:	6979      	ldr	r1, [r7, #20]
 80086a0:	69ba      	ldr	r2, [r7, #24]
 80086a2:	e841 2300 	strex	r3, r2, [r1]
 80086a6:	613b      	str	r3, [r7, #16]
   return(result);
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1e6      	bne.n	800867c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2220      	movs	r2, #32
 80086b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80086c2:	bf00      	nop
 80086c4:	3754      	adds	r7, #84	; 0x54
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b085      	sub	sp, #20
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80086de:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80086e2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3714      	adds	r7, #20
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008704:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008708:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008710:	b29a      	uxth	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	b29b      	uxth	r3, r3
 8008716:	43db      	mvns	r3, r3
 8008718:	b29b      	uxth	r3, r3
 800871a:	4013      	ands	r3, r2
 800871c:	b29a      	uxth	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3714      	adds	r7, #20
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008732:	b084      	sub	sp, #16
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	f107 0014 	add.w	r0, r7, #20
 8008740:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	370c      	adds	r7, #12
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	b004      	add	sp, #16
 8008772:	4770      	bx	lr

08008774 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008774:	b480      	push	{r7}
 8008776:	b09d      	sub	sp, #116	; 0x74
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800877e:	2300      	movs	r3, #0
 8008780:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4413      	add	r3, r2
 800878e:	881b      	ldrh	r3, [r3, #0]
 8008790:	b29b      	uxth	r3, r3
 8008792:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800879a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	78db      	ldrb	r3, [r3, #3]
 80087a2:	2b03      	cmp	r3, #3
 80087a4:	d81f      	bhi.n	80087e6 <USB_ActivateEndpoint+0x72>
 80087a6:	a201      	add	r2, pc, #4	; (adr r2, 80087ac <USB_ActivateEndpoint+0x38>)
 80087a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ac:	080087bd 	.word	0x080087bd
 80087b0:	080087d9 	.word	0x080087d9
 80087b4:	080087ef 	.word	0x080087ef
 80087b8:	080087cb 	.word	0x080087cb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80087bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80087c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80087c4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80087c8:	e012      	b.n	80087f0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80087ca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80087ce:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80087d2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80087d6:	e00b      	b.n	80087f0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80087d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80087dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80087e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80087e4:	e004      	b.n	80087f0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80087ec:	e000      	b.n	80087f0 <USB_ActivateEndpoint+0x7c>
      break;
 80087ee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	441a      	add	r2, r3
 80087fa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80087fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008802:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800880a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800880e:	b29b      	uxth	r3, r3
 8008810:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	4413      	add	r3, r2
 800881c:	881b      	ldrh	r3, [r3, #0]
 800881e:	b29b      	uxth	r3, r3
 8008820:	b21b      	sxth	r3, r3
 8008822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800882a:	b21a      	sxth	r2, r3
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	b21b      	sxth	r3, r3
 8008832:	4313      	orrs	r3, r2
 8008834:	b21b      	sxth	r3, r3
 8008836:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	441a      	add	r2, r3
 8008844:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008848:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800884c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008858:	b29b      	uxth	r3, r3
 800885a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	7b1b      	ldrb	r3, [r3, #12]
 8008860:	2b00      	cmp	r3, #0
 8008862:	f040 8178 	bne.w	8008b56 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	785b      	ldrb	r3, [r3, #1]
 800886a:	2b00      	cmp	r3, #0
 800886c:	f000 8084 	beq.w	8008978 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	61bb      	str	r3, [r7, #24]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800887a:	b29b      	uxth	r3, r3
 800887c:	461a      	mov	r2, r3
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	4413      	add	r3, r2
 8008882:	61bb      	str	r3, [r7, #24]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	011a      	lsls	r2, r3, #4
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	4413      	add	r3, r2
 800888e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008892:	617b      	str	r3, [r7, #20]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	88db      	ldrh	r3, [r3, #6]
 8008898:	085b      	lsrs	r3, r3, #1
 800889a:	b29b      	uxth	r3, r3
 800889c:	005b      	lsls	r3, r3, #1
 800889e:	b29a      	uxth	r2, r3
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	881b      	ldrh	r3, [r3, #0]
 80088b0:	827b      	strh	r3, [r7, #18]
 80088b2:	8a7b      	ldrh	r3, [r7, #18]
 80088b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d01b      	beq.n	80088f4 <USB_ActivateEndpoint+0x180>
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	4413      	add	r3, r2
 80088c6:	881b      	ldrh	r3, [r3, #0]
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088d2:	823b      	strh	r3, [r7, #16]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	441a      	add	r2, r3
 80088de:	8a3b      	ldrh	r3, [r7, #16]
 80088e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	78db      	ldrb	r3, [r3, #3]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d020      	beq.n	800893e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	4413      	add	r3, r2
 8008906:	881b      	ldrh	r3, [r3, #0]
 8008908:	b29b      	uxth	r3, r3
 800890a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800890e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008912:	81bb      	strh	r3, [r7, #12]
 8008914:	89bb      	ldrh	r3, [r7, #12]
 8008916:	f083 0320 	eor.w	r3, r3, #32
 800891a:	81bb      	strh	r3, [r7, #12]
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	441a      	add	r2, r3
 8008926:	89bb      	ldrh	r3, [r7, #12]
 8008928:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800892c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008930:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008938:	b29b      	uxth	r3, r3
 800893a:	8013      	strh	r3, [r2, #0]
 800893c:	e2d5      	b.n	8008eea <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4413      	add	r3, r2
 8008948:	881b      	ldrh	r3, [r3, #0]
 800894a:	b29b      	uxth	r3, r3
 800894c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008954:	81fb      	strh	r3, [r7, #14]
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	441a      	add	r2, r3
 8008960:	89fb      	ldrh	r3, [r7, #14]
 8008962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800896a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800896e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008972:	b29b      	uxth	r3, r3
 8008974:	8013      	strh	r3, [r2, #0]
 8008976:	e2b8      	b.n	8008eea <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	633b      	str	r3, [r7, #48]	; 0x30
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008982:	b29b      	uxth	r3, r3
 8008984:	461a      	mov	r2, r3
 8008986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008988:	4413      	add	r3, r2
 800898a:	633b      	str	r3, [r7, #48]	; 0x30
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	011a      	lsls	r2, r3, #4
 8008992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008994:	4413      	add	r3, r2
 8008996:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800899a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	88db      	ldrh	r3, [r3, #6]
 80089a0:	085b      	lsrs	r3, r3, #1
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	005b      	lsls	r3, r3, #1
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089aa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	461a      	mov	r2, r3
 80089ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089bc:	4413      	add	r3, r2
 80089be:	62bb      	str	r3, [r7, #40]	; 0x28
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	011a      	lsls	r2, r3, #4
 80089c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c8:	4413      	add	r3, r2
 80089ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089ce:	627b      	str	r3, [r7, #36]	; 0x24
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d2:	881b      	ldrh	r3, [r3, #0]
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089da:	b29a      	uxth	r2, r3
 80089dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089de:	801a      	strh	r2, [r3, #0]
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	2b3e      	cmp	r3, #62	; 0x3e
 80089e6:	d91d      	bls.n	8008a24 <USB_ActivateEndpoint+0x2b0>
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	095b      	lsrs	r3, r3, #5
 80089ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	f003 031f 	and.w	r3, r3, #31
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d102      	bne.n	8008a02 <USB_ActivateEndpoint+0x28e>
 80089fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089fe:	3b01      	subs	r3, #1
 8008a00:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a04:	881b      	ldrh	r3, [r3, #0]
 8008a06:	b29a      	uxth	r2, r3
 8008a08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	029b      	lsls	r3, r3, #10
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	4313      	orrs	r3, r2
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a20:	801a      	strh	r2, [r3, #0]
 8008a22:	e026      	b.n	8008a72 <USB_ActivateEndpoint+0x2fe>
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10a      	bne.n	8008a42 <USB_ActivateEndpoint+0x2ce>
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	881b      	ldrh	r3, [r3, #0]
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	801a      	strh	r2, [r3, #0]
 8008a40:	e017      	b.n	8008a72 <USB_ActivateEndpoint+0x2fe>
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	085b      	lsrs	r3, r3, #1
 8008a48:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	f003 0301 	and.w	r3, r3, #1
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d002      	beq.n	8008a5c <USB_ActivateEndpoint+0x2e8>
 8008a56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a58:	3301      	adds	r3, #1
 8008a5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5e:	881b      	ldrh	r3, [r3, #0]
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	029b      	lsls	r3, r3, #10
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4413      	add	r3, r2
 8008a7c:	881b      	ldrh	r3, [r3, #0]
 8008a7e:	847b      	strh	r3, [r7, #34]	; 0x22
 8008a80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d01b      	beq.n	8008ac2 <USB_ActivateEndpoint+0x34e>
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	4413      	add	r3, r2
 8008a94:	881b      	ldrh	r3, [r3, #0]
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aa0:	843b      	strh	r3, [r7, #32]
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	441a      	add	r2, r3
 8008aac:	8c3b      	ldrh	r3, [r7, #32]
 8008aae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ab6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d124      	bne.n	8008b14 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	881b      	ldrh	r3, [r3, #0]
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae0:	83bb      	strh	r3, [r7, #28]
 8008ae2:	8bbb      	ldrh	r3, [r7, #28]
 8008ae4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ae8:	83bb      	strh	r3, [r7, #28]
 8008aea:	8bbb      	ldrh	r3, [r7, #28]
 8008aec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008af0:	83bb      	strh	r3, [r7, #28]
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	441a      	add	r2, r3
 8008afc:	8bbb      	ldrh	r3, [r7, #28]
 8008afe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	8013      	strh	r3, [r2, #0]
 8008b12:	e1ea      	b.n	8008eea <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	4413      	add	r3, r2
 8008b1e:	881b      	ldrh	r3, [r3, #0]
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b2a:	83fb      	strh	r3, [r7, #30]
 8008b2c:	8bfb      	ldrh	r3, [r7, #30]
 8008b2e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008b32:	83fb      	strh	r3, [r7, #30]
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	441a      	add	r2, r3
 8008b3e:	8bfb      	ldrh	r3, [r7, #30]
 8008b40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	8013      	strh	r3, [r2, #0]
 8008b54:	e1c9      	b.n	8008eea <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	78db      	ldrb	r3, [r3, #3]
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d11e      	bne.n	8008b9c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4413      	add	r3, r2
 8008b68:	881b      	ldrh	r3, [r3, #0]
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b74:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	441a      	add	r2, r3
 8008b82:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008b86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b8e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	8013      	strh	r3, [r2, #0]
 8008b9a:	e01d      	b.n	8008bd8 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	4413      	add	r3, r2
 8008ba6:	881b      	ldrh	r3, [r3, #0]
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	441a      	add	r2, r3
 8008bc0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	461a      	mov	r2, r3
 8008be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008be8:	4413      	add	r3, r2
 8008bea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	011a      	lsls	r2, r3, #4
 8008bf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	891b      	ldrh	r3, [r3, #8]
 8008c00:	085b      	lsrs	r3, r3, #1
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	005b      	lsls	r3, r3, #1
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c0a:	801a      	strh	r2, [r3, #0]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	657b      	str	r3, [r7, #84]	; 0x54
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	461a      	mov	r2, r3
 8008c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c1c:	4413      	add	r3, r2
 8008c1e:	657b      	str	r3, [r7, #84]	; 0x54
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	011a      	lsls	r2, r3, #4
 8008c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c28:	4413      	add	r3, r2
 8008c2a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008c2e:	653b      	str	r3, [r7, #80]	; 0x50
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	895b      	ldrh	r3, [r3, #10]
 8008c34:	085b      	lsrs	r3, r3, #1
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	005b      	lsls	r3, r3, #1
 8008c3a:	b29a      	uxth	r2, r3
 8008c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c3e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	785b      	ldrb	r3, [r3, #1]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f040 8093 	bne.w	8008d70 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	4413      	add	r3, r2
 8008c54:	881b      	ldrh	r3, [r3, #0]
 8008c56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008c5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d01b      	beq.n	8008c9e <USB_ActivateEndpoint+0x52a>
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	4413      	add	r3, r2
 8008c70:	881b      	ldrh	r3, [r3, #0]
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c7c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	441a      	add	r2, r3
 8008c88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	4413      	add	r3, r2
 8008ca8:	881b      	ldrh	r3, [r3, #0]
 8008caa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008cac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d01b      	beq.n	8008cee <USB_ActivateEndpoint+0x57a>
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	4413      	add	r3, r2
 8008cc0:	881b      	ldrh	r3, [r3, #0]
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ccc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	441a      	add	r2, r3
 8008cd8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ce6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4413      	add	r3, r2
 8008cf8:	881b      	ldrh	r3, [r3, #0]
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d04:	873b      	strh	r3, [r7, #56]	; 0x38
 8008d06:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008d08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d0c:	873b      	strh	r3, [r7, #56]	; 0x38
 8008d0e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008d10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008d14:	873b      	strh	r3, [r7, #56]	; 0x38
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	441a      	add	r2, r3
 8008d20:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	4413      	add	r3, r2
 8008d40:	881b      	ldrh	r3, [r3, #0]
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d4c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	441a      	add	r2, r3
 8008d58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	8013      	strh	r3, [r2, #0]
 8008d6e:	e0bc      	b.n	8008eea <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	4413      	add	r3, r2
 8008d7a:	881b      	ldrh	r3, [r3, #0]
 8008d7c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008d80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d01d      	beq.n	8008dc8 <USB_ActivateEndpoint+0x654>
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	881b      	ldrh	r3, [r3, #0]
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008da2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	441a      	add	r2, r3
 8008db0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008db8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	4413      	add	r3, r2
 8008dd2:	881b      	ldrh	r3, [r3, #0]
 8008dd4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008dd8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d01d      	beq.n	8008e20 <USB_ActivateEndpoint+0x6ac>
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	4413      	add	r3, r2
 8008dee:	881b      	ldrh	r3, [r3, #0]
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dfa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	441a      	add	r2, r3
 8008e08:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008e0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	78db      	ldrb	r3, [r3, #3]
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d024      	beq.n	8008e72 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	4413      	add	r3, r2
 8008e32:	881b      	ldrh	r3, [r3, #0]
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e3e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008e42:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008e46:	f083 0320 	eor.w	r3, r3, #32
 8008e4a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	441a      	add	r2, r3
 8008e58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	8013      	strh	r3, [r2, #0]
 8008e70:	e01d      	b.n	8008eae <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	4413      	add	r3, r2
 8008e7c:	881b      	ldrh	r3, [r3, #0]
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e88:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	441a      	add	r2, r3
 8008e96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008e9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4413      	add	r3, r2
 8008eb8:	881b      	ldrh	r3, [r3, #0]
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ec4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	441a      	add	r2, r3
 8008ed2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008eea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3774      	adds	r7, #116	; 0x74
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop

08008efc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b08d      	sub	sp, #52	; 0x34
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	7b1b      	ldrb	r3, [r3, #12]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f040 808e 	bne.w	800902c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	785b      	ldrb	r3, [r3, #1]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d044      	beq.n	8008fa2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	4413      	add	r3, r2
 8008f22:	881b      	ldrh	r3, [r3, #0]
 8008f24:	81bb      	strh	r3, [r7, #12]
 8008f26:	89bb      	ldrh	r3, [r7, #12]
 8008f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d01b      	beq.n	8008f68 <USB_DeactivateEndpoint+0x6c>
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	4413      	add	r3, r2
 8008f3a:	881b      	ldrh	r3, [r3, #0]
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f46:	817b      	strh	r3, [r7, #10]
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	441a      	add	r2, r3
 8008f52:	897b      	ldrh	r3, [r7, #10]
 8008f54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	4413      	add	r3, r2
 8008f72:	881b      	ldrh	r3, [r3, #0]
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f7e:	813b      	strh	r3, [r7, #8]
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	441a      	add	r2, r3
 8008f8a:	893b      	ldrh	r3, [r7, #8]
 8008f8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	8013      	strh	r3, [r2, #0]
 8008fa0:	e192      	b.n	80092c8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	4413      	add	r3, r2
 8008fac:	881b      	ldrh	r3, [r3, #0]
 8008fae:	827b      	strh	r3, [r7, #18]
 8008fb0:	8a7b      	ldrh	r3, [r7, #18]
 8008fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d01b      	beq.n	8008ff2 <USB_DeactivateEndpoint+0xf6>
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	4413      	add	r3, r2
 8008fc4:	881b      	ldrh	r3, [r3, #0]
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fd0:	823b      	strh	r3, [r7, #16]
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	441a      	add	r2, r3
 8008fdc:	8a3b      	ldrh	r3, [r7, #16]
 8008fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fe6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	4413      	add	r3, r2
 8008ffc:	881b      	ldrh	r3, [r3, #0]
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009008:	81fb      	strh	r3, [r7, #14]
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	441a      	add	r2, r3
 8009014:	89fb      	ldrh	r3, [r7, #14]
 8009016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800901a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800901e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009026:	b29b      	uxth	r3, r3
 8009028:	8013      	strh	r3, [r2, #0]
 800902a:	e14d      	b.n	80092c8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	785b      	ldrb	r3, [r3, #1]
 8009030:	2b00      	cmp	r3, #0
 8009032:	f040 80a5 	bne.w	8009180 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	4413      	add	r3, r2
 8009040:	881b      	ldrh	r3, [r3, #0]
 8009042:	843b      	strh	r3, [r7, #32]
 8009044:	8c3b      	ldrh	r3, [r7, #32]
 8009046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800904a:	2b00      	cmp	r3, #0
 800904c:	d01b      	beq.n	8009086 <USB_DeactivateEndpoint+0x18a>
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	4413      	add	r3, r2
 8009058:	881b      	ldrh	r3, [r3, #0]
 800905a:	b29b      	uxth	r3, r3
 800905c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009064:	83fb      	strh	r3, [r7, #30]
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	441a      	add	r2, r3
 8009070:	8bfb      	ldrh	r3, [r7, #30]
 8009072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800907a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800907e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009082:	b29b      	uxth	r3, r3
 8009084:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	4413      	add	r3, r2
 8009090:	881b      	ldrh	r3, [r3, #0]
 8009092:	83bb      	strh	r3, [r7, #28]
 8009094:	8bbb      	ldrh	r3, [r7, #28]
 8009096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800909a:	2b00      	cmp	r3, #0
 800909c:	d01b      	beq.n	80090d6 <USB_DeactivateEndpoint+0x1da>
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	4413      	add	r3, r2
 80090a8:	881b      	ldrh	r3, [r3, #0]
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090b4:	837b      	strh	r3, [r7, #26]
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	441a      	add	r2, r3
 80090c0:	8b7b      	ldrh	r3, [r7, #26]
 80090c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	4413      	add	r3, r2
 80090e0:	881b      	ldrh	r3, [r3, #0]
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ec:	833b      	strh	r3, [r7, #24]
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	441a      	add	r2, r3
 80090f8:	8b3b      	ldrh	r3, [r7, #24]
 80090fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009106:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800910a:	b29b      	uxth	r3, r3
 800910c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	4413      	add	r3, r2
 8009118:	881b      	ldrh	r3, [r3, #0]
 800911a:	b29b      	uxth	r3, r3
 800911c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009124:	82fb      	strh	r3, [r7, #22]
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	441a      	add	r2, r3
 8009130:	8afb      	ldrh	r3, [r7, #22]
 8009132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800913a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800913e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009142:	b29b      	uxth	r3, r3
 8009144:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	4413      	add	r3, r2
 8009150:	881b      	ldrh	r3, [r3, #0]
 8009152:	b29b      	uxth	r3, r3
 8009154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800915c:	82bb      	strh	r3, [r7, #20]
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	441a      	add	r2, r3
 8009168:	8abb      	ldrh	r3, [r7, #20]
 800916a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800916e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800917a:	b29b      	uxth	r3, r3
 800917c:	8013      	strh	r3, [r2, #0]
 800917e:	e0a3      	b.n	80092c8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4413      	add	r3, r2
 800918a:	881b      	ldrh	r3, [r3, #0]
 800918c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800918e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009194:	2b00      	cmp	r3, #0
 8009196:	d01b      	beq.n	80091d0 <USB_DeactivateEndpoint+0x2d4>
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	4413      	add	r3, r2
 80091a2:	881b      	ldrh	r3, [r3, #0]
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	441a      	add	r2, r3
 80091ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80091bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80091c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	4413      	add	r3, r2
 80091da:	881b      	ldrh	r3, [r3, #0]
 80091dc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80091de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80091e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d01b      	beq.n	8009220 <USB_DeactivateEndpoint+0x324>
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	4413      	add	r3, r2
 80091f2:	881b      	ldrh	r3, [r3, #0]
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091fe:	853b      	strh	r3, [r7, #40]	; 0x28
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	441a      	add	r2, r3
 800920a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800920c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009218:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800921c:	b29b      	uxth	r3, r3
 800921e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4413      	add	r3, r2
 800922a:	881b      	ldrh	r3, [r3, #0]
 800922c:	b29b      	uxth	r3, r3
 800922e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009236:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	441a      	add	r2, r3
 8009242:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800924c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009254:	b29b      	uxth	r3, r3
 8009256:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	4413      	add	r3, r2
 8009262:	881b      	ldrh	r3, [r3, #0]
 8009264:	b29b      	uxth	r3, r3
 8009266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800926a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800926e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	441a      	add	r2, r3
 800927a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800927c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800928c:	b29b      	uxth	r3, r3
 800928e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	4413      	add	r3, r2
 800929a:	881b      	ldrh	r3, [r3, #0]
 800929c:	b29b      	uxth	r3, r3
 800929e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	441a      	add	r2, r3
 80092b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80092b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3734      	adds	r7, #52	; 0x34
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr

080092d6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b0c2      	sub	sp, #264	; 0x108
 80092da:	af00      	add	r7, sp, #0
 80092dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092e4:	6018      	str	r0, [r3, #0]
 80092e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ee:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80092f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	785b      	ldrb	r3, [r3, #1]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	f040 86b7 	bne.w	800a070 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	699a      	ldr	r2, [r3, #24]
 800930e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	429a      	cmp	r2, r3
 800931c:	d908      	bls.n	8009330 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800931e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800932e:	e007      	b.n	8009340 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	7b1b      	ldrb	r3, [r3, #12]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d13a      	bne.n	80093c6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	6959      	ldr	r1, [r3, #20]
 800935c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	88da      	ldrh	r2, [r3, #6]
 8009368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800936c:	b29b      	uxth	r3, r3
 800936e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009372:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009376:	6800      	ldr	r0, [r0, #0]
 8009378:	f001 fc8c 	bl	800ac94 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800937c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009380:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	613b      	str	r3, [r7, #16]
 8009388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800938c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009396:	b29b      	uxth	r3, r3
 8009398:	461a      	mov	r2, r3
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	4413      	add	r3, r2
 800939e:	613b      	str	r3, [r7, #16]
 80093a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	011a      	lsls	r2, r3, #4
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	4413      	add	r3, r2
 80093b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80093b6:	60fb      	str	r3, [r7, #12]
 80093b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093bc:	b29a      	uxth	r2, r3
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	801a      	strh	r2, [r3, #0]
 80093c2:	f000 be1f 	b.w	800a004 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80093c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	78db      	ldrb	r3, [r3, #3]
 80093d2:	2b02      	cmp	r3, #2
 80093d4:	f040 8462 	bne.w	8009c9c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80093d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	6a1a      	ldr	r2, [r3, #32]
 80093e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	f240 83df 	bls.w	8009bb4 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80093f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	4413      	add	r3, r2
 8009410:	881b      	ldrh	r3, [r3, #0]
 8009412:	b29b      	uxth	r3, r3
 8009414:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800941c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009424:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800942e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	441a      	add	r2, r3
 800943a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800943e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009446:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800944a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800944e:	b29b      	uxth	r3, r3
 8009450:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	6a1a      	ldr	r2, [r3, #32]
 800945e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009462:	1ad2      	subs	r2, r2, r3
 8009464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009468:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009474:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800947e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	4413      	add	r3, r2
 800948a:	881b      	ldrh	r3, [r3, #0]
 800948c:	b29b      	uxth	r3, r3
 800948e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009492:	2b00      	cmp	r3, #0
 8009494:	f000 81c7 	beq.w	8009826 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800949c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	633b      	str	r3, [r7, #48]	; 0x30
 80094a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	785b      	ldrb	r3, [r3, #1]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d177      	bne.n	80095a4 <USB_EPStartXfer+0x2ce>
 80094b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	62bb      	str	r3, [r7, #40]	; 0x28
 80094c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	461a      	mov	r2, r3
 80094d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d4:	4413      	add	r3, r2
 80094d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80094d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	011a      	lsls	r2, r3, #4
 80094e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e8:	4413      	add	r3, r2
 80094ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80094ee:	627b      	str	r3, [r7, #36]	; 0x24
 80094f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f2:	881b      	ldrh	r3, [r3, #0]
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094fa:	b29a      	uxth	r2, r3
 80094fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fe:	801a      	strh	r2, [r3, #0]
 8009500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009504:	2b3e      	cmp	r3, #62	; 0x3e
 8009506:	d921      	bls.n	800954c <USB_EPStartXfer+0x276>
 8009508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800950c:	095b      	lsrs	r3, r3, #5
 800950e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009516:	f003 031f 	and.w	r3, r3, #31
 800951a:	2b00      	cmp	r3, #0
 800951c:	d104      	bne.n	8009528 <USB_EPStartXfer+0x252>
 800951e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009522:	3b01      	subs	r3, #1
 8009524:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952a:	881b      	ldrh	r3, [r3, #0]
 800952c:	b29a      	uxth	r2, r3
 800952e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009532:	b29b      	uxth	r3, r3
 8009534:	029b      	lsls	r3, r3, #10
 8009536:	b29b      	uxth	r3, r3
 8009538:	4313      	orrs	r3, r2
 800953a:	b29b      	uxth	r3, r3
 800953c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009544:	b29a      	uxth	r2, r3
 8009546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009548:	801a      	strh	r2, [r3, #0]
 800954a:	e050      	b.n	80095ee <USB_EPStartXfer+0x318>
 800954c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009550:	2b00      	cmp	r3, #0
 8009552:	d10a      	bne.n	800956a <USB_EPStartXfer+0x294>
 8009554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009556:	881b      	ldrh	r3, [r3, #0]
 8009558:	b29b      	uxth	r3, r3
 800955a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800955e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009562:	b29a      	uxth	r2, r3
 8009564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009566:	801a      	strh	r2, [r3, #0]
 8009568:	e041      	b.n	80095ee <USB_EPStartXfer+0x318>
 800956a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800956e:	085b      	lsrs	r3, r3, #1
 8009570:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009578:	f003 0301 	and.w	r3, r3, #1
 800957c:	2b00      	cmp	r3, #0
 800957e:	d004      	beq.n	800958a <USB_EPStartXfer+0x2b4>
 8009580:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009584:	3301      	adds	r3, #1
 8009586:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800958a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958c:	881b      	ldrh	r3, [r3, #0]
 800958e:	b29a      	uxth	r2, r3
 8009590:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009594:	b29b      	uxth	r3, r3
 8009596:	029b      	lsls	r3, r3, #10
 8009598:	b29b      	uxth	r3, r3
 800959a:	4313      	orrs	r3, r2
 800959c:	b29a      	uxth	r2, r3
 800959e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a0:	801a      	strh	r2, [r3, #0]
 80095a2:	e024      	b.n	80095ee <USB_EPStartXfer+0x318>
 80095a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	785b      	ldrb	r3, [r3, #1]
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d11c      	bne.n	80095ee <USB_EPStartXfer+0x318>
 80095b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	461a      	mov	r2, r3
 80095c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c8:	4413      	add	r3, r2
 80095ca:	633b      	str	r3, [r7, #48]	; 0x30
 80095cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	011a      	lsls	r2, r3, #4
 80095da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095dc:	4413      	add	r3, r2
 80095de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80095e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80095ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	895b      	ldrh	r3, [r3, #10]
 80095fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009602:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	6959      	ldr	r1, [r3, #20]
 800960a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800960e:	b29b      	uxth	r3, r3
 8009610:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009614:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009618:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800961c:	6800      	ldr	r0, [r0, #0]
 800961e:	f001 fb39 	bl	800ac94 <USB_WritePMA>
            ep->xfer_buff += len;
 8009622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009626:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	695a      	ldr	r2, [r3, #20]
 800962e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009632:	441a      	add	r2, r3
 8009634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009644:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	6a1a      	ldr	r2, [r3, #32]
 800964c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	429a      	cmp	r2, r3
 800965a:	d90f      	bls.n	800967c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800965c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	6a1a      	ldr	r2, [r3, #32]
 8009668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800966c:	1ad2      	subs	r2, r2, r3
 800966e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	621a      	str	r2, [r3, #32]
 800967a:	e00e      	b.n	800969a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800967c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	6a1b      	ldr	r3, [r3, #32]
 8009688:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800968c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2200      	movs	r2, #0
 8009698:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800969a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800969e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	785b      	ldrb	r3, [r3, #1]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d177      	bne.n	800979a <USB_EPStartXfer+0x4c4>
 80096aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	61bb      	str	r3, [r7, #24]
 80096b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	461a      	mov	r2, r3
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	4413      	add	r3, r2
 80096cc:	61bb      	str	r3, [r7, #24]
 80096ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	011a      	lsls	r2, r3, #4
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	4413      	add	r3, r2
 80096e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80096e4:	617b      	str	r3, [r7, #20]
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	881b      	ldrh	r3, [r3, #0]
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096f0:	b29a      	uxth	r2, r3
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	801a      	strh	r2, [r3, #0]
 80096f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096fa:	2b3e      	cmp	r3, #62	; 0x3e
 80096fc:	d921      	bls.n	8009742 <USB_EPStartXfer+0x46c>
 80096fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009702:	095b      	lsrs	r3, r3, #5
 8009704:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800970c:	f003 031f 	and.w	r3, r3, #31
 8009710:	2b00      	cmp	r3, #0
 8009712:	d104      	bne.n	800971e <USB_EPStartXfer+0x448>
 8009714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009718:	3b01      	subs	r3, #1
 800971a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	881b      	ldrh	r3, [r3, #0]
 8009722:	b29a      	uxth	r2, r3
 8009724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009728:	b29b      	uxth	r3, r3
 800972a:	029b      	lsls	r3, r3, #10
 800972c:	b29b      	uxth	r3, r3
 800972e:	4313      	orrs	r3, r2
 8009730:	b29b      	uxth	r3, r3
 8009732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800973a:	b29a      	uxth	r2, r3
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	801a      	strh	r2, [r3, #0]
 8009740:	e056      	b.n	80097f0 <USB_EPStartXfer+0x51a>
 8009742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10a      	bne.n	8009760 <USB_EPStartXfer+0x48a>
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	881b      	ldrh	r3, [r3, #0]
 800974e:	b29b      	uxth	r3, r3
 8009750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009758:	b29a      	uxth	r2, r3
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	801a      	strh	r2, [r3, #0]
 800975e:	e047      	b.n	80097f0 <USB_EPStartXfer+0x51a>
 8009760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009764:	085b      	lsrs	r3, r3, #1
 8009766:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800976a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800976e:	f003 0301 	and.w	r3, r3, #1
 8009772:	2b00      	cmp	r3, #0
 8009774:	d004      	beq.n	8009780 <USB_EPStartXfer+0x4aa>
 8009776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800977a:	3301      	adds	r3, #1
 800977c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	881b      	ldrh	r3, [r3, #0]
 8009784:	b29a      	uxth	r2, r3
 8009786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800978a:	b29b      	uxth	r3, r3
 800978c:	029b      	lsls	r3, r3, #10
 800978e:	b29b      	uxth	r3, r3
 8009790:	4313      	orrs	r3, r2
 8009792:	b29a      	uxth	r2, r3
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	801a      	strh	r2, [r3, #0]
 8009798:	e02a      	b.n	80097f0 <USB_EPStartXfer+0x51a>
 800979a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800979e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	785b      	ldrb	r3, [r3, #1]
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d122      	bne.n	80097f0 <USB_EPStartXfer+0x51a>
 80097aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	623b      	str	r3, [r7, #32]
 80097b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	461a      	mov	r2, r3
 80097c8:	6a3b      	ldr	r3, [r7, #32]
 80097ca:	4413      	add	r3, r2
 80097cc:	623b      	str	r3, [r7, #32]
 80097ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	011a      	lsls	r2, r3, #4
 80097dc:	6a3b      	ldr	r3, [r7, #32]
 80097de:	4413      	add	r3, r2
 80097e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80097e4:	61fb      	str	r3, [r7, #28]
 80097e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097ea:	b29a      	uxth	r2, r3
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80097f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	891b      	ldrh	r3, [r3, #8]
 80097fc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	6959      	ldr	r1, [r3, #20]
 800980c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009810:	b29b      	uxth	r3, r3
 8009812:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009816:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800981a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800981e:	6800      	ldr	r0, [r0, #0]
 8009820:	f001 fa38 	bl	800ac94 <USB_WritePMA>
 8009824:	e3ee      	b.n	800a004 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800982a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	785b      	ldrb	r3, [r3, #1]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d177      	bne.n	8009926 <USB_EPStartXfer+0x650>
 8009836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800983a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	64bb      	str	r3, [r7, #72]	; 0x48
 8009842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009846:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009850:	b29b      	uxth	r3, r3
 8009852:	461a      	mov	r2, r3
 8009854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009856:	4413      	add	r3, r2
 8009858:	64bb      	str	r3, [r7, #72]	; 0x48
 800985a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800985e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	011a      	lsls	r2, r3, #4
 8009868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800986a:	4413      	add	r3, r2
 800986c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009870:	647b      	str	r3, [r7, #68]	; 0x44
 8009872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009874:	881b      	ldrh	r3, [r3, #0]
 8009876:	b29b      	uxth	r3, r3
 8009878:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800987c:	b29a      	uxth	r2, r3
 800987e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009880:	801a      	strh	r2, [r3, #0]
 8009882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009886:	2b3e      	cmp	r3, #62	; 0x3e
 8009888:	d921      	bls.n	80098ce <USB_EPStartXfer+0x5f8>
 800988a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800988e:	095b      	lsrs	r3, r3, #5
 8009890:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009898:	f003 031f 	and.w	r3, r3, #31
 800989c:	2b00      	cmp	r3, #0
 800989e:	d104      	bne.n	80098aa <USB_EPStartXfer+0x5d4>
 80098a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80098a4:	3b01      	subs	r3, #1
 80098a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80098aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098ac:	881b      	ldrh	r3, [r3, #0]
 80098ae:	b29a      	uxth	r2, r3
 80098b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	029b      	lsls	r3, r3, #10
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	4313      	orrs	r3, r2
 80098bc:	b29b      	uxth	r3, r3
 80098be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098ca:	801a      	strh	r2, [r3, #0]
 80098cc:	e056      	b.n	800997c <USB_EPStartXfer+0x6a6>
 80098ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d10a      	bne.n	80098ec <USB_EPStartXfer+0x616>
 80098d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098d8:	881b      	ldrh	r3, [r3, #0]
 80098da:	b29b      	uxth	r3, r3
 80098dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098e4:	b29a      	uxth	r2, r3
 80098e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098e8:	801a      	strh	r2, [r3, #0]
 80098ea:	e047      	b.n	800997c <USB_EPStartXfer+0x6a6>
 80098ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098f0:	085b      	lsrs	r3, r3, #1
 80098f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80098f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098fa:	f003 0301 	and.w	r3, r3, #1
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d004      	beq.n	800990c <USB_EPStartXfer+0x636>
 8009902:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009906:	3301      	adds	r3, #1
 8009908:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800990c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800990e:	881b      	ldrh	r3, [r3, #0]
 8009910:	b29a      	uxth	r2, r3
 8009912:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009916:	b29b      	uxth	r3, r3
 8009918:	029b      	lsls	r3, r3, #10
 800991a:	b29b      	uxth	r3, r3
 800991c:	4313      	orrs	r3, r2
 800991e:	b29a      	uxth	r2, r3
 8009920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009922:	801a      	strh	r2, [r3, #0]
 8009924:	e02a      	b.n	800997c <USB_EPStartXfer+0x6a6>
 8009926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800992a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	785b      	ldrb	r3, [r3, #1]
 8009932:	2b01      	cmp	r3, #1
 8009934:	d122      	bne.n	800997c <USB_EPStartXfer+0x6a6>
 8009936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800993a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	653b      	str	r3, [r7, #80]	; 0x50
 8009942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009946:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009950:	b29b      	uxth	r3, r3
 8009952:	461a      	mov	r2, r3
 8009954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009956:	4413      	add	r3, r2
 8009958:	653b      	str	r3, [r7, #80]	; 0x50
 800995a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800995e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	011a      	lsls	r2, r3, #4
 8009968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800996a:	4413      	add	r3, r2
 800996c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009970:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009976:	b29a      	uxth	r2, r3
 8009978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800997a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800997c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	891b      	ldrh	r3, [r3, #8]
 8009988:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800998c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	6959      	ldr	r1, [r3, #20]
 8009998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800999c:	b29b      	uxth	r3, r3
 800999e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80099a2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80099a6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80099aa:	6800      	ldr	r0, [r0, #0]
 80099ac:	f001 f972 	bl	800ac94 <USB_WritePMA>
            ep->xfer_buff += len;
 80099b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	695a      	ldr	r2, [r3, #20]
 80099bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099c0:	441a      	add	r2, r3
 80099c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80099ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	6a1a      	ldr	r2, [r3, #32]
 80099da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d90f      	bls.n	8009a0a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80099ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	6a1a      	ldr	r2, [r3, #32]
 80099f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099fa:	1ad2      	subs	r2, r2, r3
 80099fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	621a      	str	r2, [r3, #32]
 8009a08:	e00e      	b.n	8009a28 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	6a1b      	ldr	r3, [r3, #32]
 8009a16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2200      	movs	r2, #0
 8009a26:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	643b      	str	r3, [r7, #64]	; 0x40
 8009a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	785b      	ldrb	r3, [r3, #1]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d177      	bne.n	8009b34 <USB_EPStartXfer+0x85e>
 8009a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	461a      	mov	r2, r3
 8009a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a64:	4413      	add	r3, r2
 8009a66:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	011a      	lsls	r2, r3, #4
 8009a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a78:	4413      	add	r3, r2
 8009a7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8009a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a82:	881b      	ldrh	r3, [r3, #0]
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a8a:	b29a      	uxth	r2, r3
 8009a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a8e:	801a      	strh	r2, [r3, #0]
 8009a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a94:	2b3e      	cmp	r3, #62	; 0x3e
 8009a96:	d921      	bls.n	8009adc <USB_EPStartXfer+0x806>
 8009a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a9c:	095b      	lsrs	r3, r3, #5
 8009a9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aa6:	f003 031f 	and.w	r3, r3, #31
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d104      	bne.n	8009ab8 <USB_EPStartXfer+0x7e2>
 8009aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ab2:	3b01      	subs	r3, #1
 8009ab4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aba:	881b      	ldrh	r3, [r3, #0]
 8009abc:	b29a      	uxth	r2, r3
 8009abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	029b      	lsls	r3, r3, #10
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ad0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ad4:	b29a      	uxth	r2, r3
 8009ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad8:	801a      	strh	r2, [r3, #0]
 8009ada:	e050      	b.n	8009b7e <USB_EPStartXfer+0x8a8>
 8009adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d10a      	bne.n	8009afa <USB_EPStartXfer+0x824>
 8009ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ae6:	881b      	ldrh	r3, [r3, #0]
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009aee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af6:	801a      	strh	r2, [r3, #0]
 8009af8:	e041      	b.n	8009b7e <USB_EPStartXfer+0x8a8>
 8009afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009afe:	085b      	lsrs	r3, r3, #1
 8009b00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b08:	f003 0301 	and.w	r3, r3, #1
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d004      	beq.n	8009b1a <USB_EPStartXfer+0x844>
 8009b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b14:	3301      	adds	r3, #1
 8009b16:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b1c:	881b      	ldrh	r3, [r3, #0]
 8009b1e:	b29a      	uxth	r2, r3
 8009b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	029b      	lsls	r3, r3, #10
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b30:	801a      	strh	r2, [r3, #0]
 8009b32:	e024      	b.n	8009b7e <USB_EPStartXfer+0x8a8>
 8009b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	785b      	ldrb	r3, [r3, #1]
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d11c      	bne.n	8009b7e <USB_EPStartXfer+0x8a8>
 8009b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	461a      	mov	r2, r3
 8009b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b58:	4413      	add	r3, r2
 8009b5a:	643b      	str	r3, [r7, #64]	; 0x40
 8009b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	011a      	lsls	r2, r3, #4
 8009b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b6c:	4413      	add	r3, r2
 8009b6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b78:	b29a      	uxth	r2, r3
 8009b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b7c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	895b      	ldrh	r3, [r3, #10]
 8009b8a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	6959      	ldr	r1, [r3, #20]
 8009b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009ba4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009ba8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009bac:	6800      	ldr	r0, [r0, #0]
 8009bae:	f001 f871 	bl	800ac94 <USB_WritePMA>
 8009bb2:	e227      	b.n	800a004 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	6a1b      	ldr	r3, [r3, #32]
 8009bc0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	4413      	add	r3, r2
 8009bde:	881b      	ldrh	r3, [r3, #0]
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bea:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	441a      	add	r2, r3
 8009c08:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c40:	4413      	add	r3, r2
 8009c42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	011a      	lsls	r2, r3, #4
 8009c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c54:	4413      	add	r3, r2
 8009c56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009c5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c60:	b29a      	uxth	r2, r3
 8009c62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c64:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	891b      	ldrh	r3, [r3, #8]
 8009c72:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	6959      	ldr	r1, [r3, #20]
 8009c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009c8c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009c90:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009c94:	6800      	ldr	r0, [r0, #0]
 8009c96:	f000 fffd 	bl	800ac94 <USB_WritePMA>
 8009c9a:	e1b3      	b.n	800a004 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009c9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ca0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	6a1a      	ldr	r2, [r3, #32]
 8009ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cac:	1ad2      	subs	r2, r2, r3
 8009cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	4413      	add	r3, r2
 8009cd4:	881b      	ldrh	r3, [r3, #0]
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	f000 80c6 	beq.w	8009e6e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ce6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	673b      	str	r3, [r7, #112]	; 0x70
 8009cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	785b      	ldrb	r3, [r3, #1]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d177      	bne.n	8009dee <USB_EPStartXfer+0xb18>
 8009cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d1e:	4413      	add	r3, r2
 8009d20:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	011a      	lsls	r2, r3, #4
 8009d30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d32:	4413      	add	r3, r2
 8009d34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009d38:	667b      	str	r3, [r7, #100]	; 0x64
 8009d3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d3c:	881b      	ldrh	r3, [r3, #0]
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d48:	801a      	strh	r2, [r3, #0]
 8009d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d4e:	2b3e      	cmp	r3, #62	; 0x3e
 8009d50:	d921      	bls.n	8009d96 <USB_EPStartXfer+0xac0>
 8009d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d56:	095b      	lsrs	r3, r3, #5
 8009d58:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d60:	f003 031f 	and.w	r3, r3, #31
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d104      	bne.n	8009d72 <USB_EPStartXfer+0xa9c>
 8009d68:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009d72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d74:	881b      	ldrh	r3, [r3, #0]
 8009d76:	b29a      	uxth	r2, r3
 8009d78:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	029b      	lsls	r3, r3, #10
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	4313      	orrs	r3, r2
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d92:	801a      	strh	r2, [r3, #0]
 8009d94:	e050      	b.n	8009e38 <USB_EPStartXfer+0xb62>
 8009d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d10a      	bne.n	8009db4 <USB_EPStartXfer+0xade>
 8009d9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009da0:	881b      	ldrh	r3, [r3, #0]
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dac:	b29a      	uxth	r2, r3
 8009dae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009db0:	801a      	strh	r2, [r3, #0]
 8009db2:	e041      	b.n	8009e38 <USB_EPStartXfer+0xb62>
 8009db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009db8:	085b      	lsrs	r3, r3, #1
 8009dba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dc2:	f003 0301 	and.w	r3, r3, #1
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d004      	beq.n	8009dd4 <USB_EPStartXfer+0xafe>
 8009dca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009dce:	3301      	adds	r3, #1
 8009dd0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dd6:	881b      	ldrh	r3, [r3, #0]
 8009dd8:	b29a      	uxth	r2, r3
 8009dda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	029b      	lsls	r3, r3, #10
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	4313      	orrs	r3, r2
 8009de6:	b29a      	uxth	r2, r3
 8009de8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dea:	801a      	strh	r2, [r3, #0]
 8009dec:	e024      	b.n	8009e38 <USB_EPStartXfer+0xb62>
 8009dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	785b      	ldrb	r3, [r3, #1]
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d11c      	bne.n	8009e38 <USB_EPStartXfer+0xb62>
 8009dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	461a      	mov	r2, r3
 8009e10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e12:	4413      	add	r3, r2
 8009e14:	673b      	str	r3, [r7, #112]	; 0x70
 8009e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	011a      	lsls	r2, r3, #4
 8009e24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e26:	4413      	add	r3, r2
 8009e28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009e2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e32:	b29a      	uxth	r2, r3
 8009e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e36:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	895b      	ldrh	r3, [r3, #10]
 8009e44:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	6959      	ldr	r1, [r3, #20]
 8009e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009e5e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009e62:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009e66:	6800      	ldr	r0, [r0, #0]
 8009e68:	f000 ff14 	bl	800ac94 <USB_WritePMA>
 8009e6c:	e0ca      	b.n	800a004 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	785b      	ldrb	r3, [r3, #1]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d177      	bne.n	8009f6e <USB_EPStartXfer+0xc98>
 8009e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009e9e:	4413      	add	r3, r2
 8009ea0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	011a      	lsls	r2, r3, #4
 8009eb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009eb2:	4413      	add	r3, r2
 8009eb4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009eb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8009eba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ebc:	881b      	ldrh	r3, [r3, #0]
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ec4:	b29a      	uxth	r2, r3
 8009ec6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ec8:	801a      	strh	r2, [r3, #0]
 8009eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ece:	2b3e      	cmp	r3, #62	; 0x3e
 8009ed0:	d921      	bls.n	8009f16 <USB_EPStartXfer+0xc40>
 8009ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ed6:	095b      	lsrs	r3, r3, #5
 8009ed8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ee0:	f003 031f 	and.w	r3, r3, #31
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d104      	bne.n	8009ef2 <USB_EPStartXfer+0xc1c>
 8009ee8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009eec:	3b01      	subs	r3, #1
 8009eee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ef4:	881b      	ldrh	r3, [r3, #0]
 8009ef6:	b29a      	uxth	r2, r3
 8009ef8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	029b      	lsls	r3, r3, #10
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	4313      	orrs	r3, r2
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f0e:	b29a      	uxth	r2, r3
 8009f10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f12:	801a      	strh	r2, [r3, #0]
 8009f14:	e05c      	b.n	8009fd0 <USB_EPStartXfer+0xcfa>
 8009f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d10a      	bne.n	8009f34 <USB_EPStartXfer+0xc5e>
 8009f1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f20:	881b      	ldrh	r3, [r3, #0]
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f30:	801a      	strh	r2, [r3, #0]
 8009f32:	e04d      	b.n	8009fd0 <USB_EPStartXfer+0xcfa>
 8009f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f38:	085b      	lsrs	r3, r3, #1
 8009f3a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f42:	f003 0301 	and.w	r3, r3, #1
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d004      	beq.n	8009f54 <USB_EPStartXfer+0xc7e>
 8009f4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009f4e:	3301      	adds	r3, #1
 8009f50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009f54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f56:	881b      	ldrh	r3, [r3, #0]
 8009f58:	b29a      	uxth	r2, r3
 8009f5a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	029b      	lsls	r3, r3, #10
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	4313      	orrs	r3, r2
 8009f66:	b29a      	uxth	r2, r3
 8009f68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f6a:	801a      	strh	r2, [r3, #0]
 8009f6c:	e030      	b.n	8009fd0 <USB_EPStartXfer+0xcfa>
 8009f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	785b      	ldrb	r3, [r3, #1]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d128      	bne.n	8009fd0 <USB_EPStartXfer+0xcfa>
 8009f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	011a      	lsls	r2, r3, #4
 8009fb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fba:	4413      	add	r3, r2
 8009fbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009fc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009fce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	891b      	ldrh	r3, [r3, #8]
 8009fdc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009fe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	6959      	ldr	r1, [r3, #20]
 8009fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009ff6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009ffa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009ffe:	6800      	ldr	r0, [r0, #0]
 800a000:	f000 fe48 	bl	800ac94 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a008:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a012:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	4413      	add	r3, r2
 800a01e:	881b      	ldrh	r3, [r3, #0]
 800a020:	b29b      	uxth	r3, r3
 800a022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a02a:	817b      	strh	r3, [r7, #10]
 800a02c:	897b      	ldrh	r3, [r7, #10]
 800a02e:	f083 0310 	eor.w	r3, r3, #16
 800a032:	817b      	strh	r3, [r7, #10]
 800a034:	897b      	ldrh	r3, [r7, #10]
 800a036:	f083 0320 	eor.w	r3, r3, #32
 800a03a:	817b      	strh	r3, [r7, #10]
 800a03c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a040:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a04a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	441a      	add	r2, r3
 800a056:	897b      	ldrh	r3, [r7, #10]
 800a058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a05c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a068:	b29b      	uxth	r3, r3
 800a06a:	8013      	strh	r3, [r2, #0]
 800a06c:	f000 bcde 	b.w	800aa2c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	7b1b      	ldrb	r3, [r3, #12]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f040 80bb 	bne.w	800a1f8 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a086:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	699a      	ldr	r2, [r3, #24]
 800a08e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	691b      	ldr	r3, [r3, #16]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d917      	bls.n	800a0ce <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a09e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800a0ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	699a      	ldr	r2, [r3, #24]
 800a0ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0be:	1ad2      	subs	r2, r2, r3
 800a0c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	619a      	str	r2, [r3, #24]
 800a0cc:	e00e      	b.n	800a0ec <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a0ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	699b      	ldr	r3, [r3, #24]
 800a0da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800a0de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a0ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a0fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a108:	b29b      	uxth	r3, r3
 800a10a:	461a      	mov	r2, r3
 800a10c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a110:	4413      	add	r3, r2
 800a112:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a11a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	011a      	lsls	r2, r3, #4
 800a124:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a128:	4413      	add	r3, r2
 800a12a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a12e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a132:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a136:	881b      	ldrh	r3, [r3, #0]
 800a138:	b29b      	uxth	r3, r3
 800a13a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a13e:	b29a      	uxth	r2, r3
 800a140:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a144:	801a      	strh	r2, [r3, #0]
 800a146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a14a:	2b3e      	cmp	r3, #62	; 0x3e
 800a14c:	d924      	bls.n	800a198 <USB_EPStartXfer+0xec2>
 800a14e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a152:	095b      	lsrs	r3, r3, #5
 800a154:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a15c:	f003 031f 	and.w	r3, r3, #31
 800a160:	2b00      	cmp	r3, #0
 800a162:	d104      	bne.n	800a16e <USB_EPStartXfer+0xe98>
 800a164:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a168:	3b01      	subs	r3, #1
 800a16a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a16e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a172:	881b      	ldrh	r3, [r3, #0]
 800a174:	b29a      	uxth	r2, r3
 800a176:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	029b      	lsls	r3, r3, #10
 800a17e:	b29b      	uxth	r3, r3
 800a180:	4313      	orrs	r3, r2
 800a182:	b29b      	uxth	r3, r3
 800a184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a18c:	b29a      	uxth	r2, r3
 800a18e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a192:	801a      	strh	r2, [r3, #0]
 800a194:	f000 bc10 	b.w	800a9b8 <USB_EPStartXfer+0x16e2>
 800a198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d10c      	bne.n	800a1ba <USB_EPStartXfer+0xee4>
 800a1a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1a4:	881b      	ldrh	r3, [r3, #0]
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1b6:	801a      	strh	r2, [r3, #0]
 800a1b8:	e3fe      	b.n	800a9b8 <USB_EPStartXfer+0x16e2>
 800a1ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1be:	085b      	lsrs	r3, r3, #1
 800a1c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a1c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1c8:	f003 0301 	and.w	r3, r3, #1
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d004      	beq.n	800a1da <USB_EPStartXfer+0xf04>
 800a1d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a1da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1de:	881b      	ldrh	r3, [r3, #0]
 800a1e0:	b29a      	uxth	r2, r3
 800a1e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	029b      	lsls	r3, r3, #10
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	b29a      	uxth	r2, r3
 800a1f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1f4:	801a      	strh	r2, [r3, #0]
 800a1f6:	e3df      	b.n	800a9b8 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a1f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	78db      	ldrb	r3, [r3, #3]
 800a204:	2b02      	cmp	r3, #2
 800a206:	f040 8218 	bne.w	800a63a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a20a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a20e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	785b      	ldrb	r3, [r3, #1]
 800a216:	2b00      	cmp	r3, #0
 800a218:	f040 809d 	bne.w	800a356 <USB_EPStartXfer+0x1080>
 800a21c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a220:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a22a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a22e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a238:	b29b      	uxth	r3, r3
 800a23a:	461a      	mov	r2, r3
 800a23c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a240:	4413      	add	r3, r2
 800a242:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a24a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	011a      	lsls	r2, r3, #4
 800a254:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a258:	4413      	add	r3, r2
 800a25a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a25e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a262:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a266:	881b      	ldrh	r3, [r3, #0]
 800a268:	b29b      	uxth	r3, r3
 800a26a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a26e:	b29a      	uxth	r2, r3
 800a270:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a274:	801a      	strh	r2, [r3, #0]
 800a276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a27a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	691b      	ldr	r3, [r3, #16]
 800a282:	2b3e      	cmp	r3, #62	; 0x3e
 800a284:	d92b      	bls.n	800a2de <USB_EPStartXfer+0x1008>
 800a286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a28a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	691b      	ldr	r3, [r3, #16]
 800a292:	095b      	lsrs	r3, r3, #5
 800a294:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a29c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	691b      	ldr	r3, [r3, #16]
 800a2a4:	f003 031f 	and.w	r3, r3, #31
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d104      	bne.n	800a2b6 <USB_EPStartXfer+0xfe0>
 800a2ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a2b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a2ba:	881b      	ldrh	r3, [r3, #0]
 800a2bc:	b29a      	uxth	r2, r3
 800a2be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	029b      	lsls	r3, r3, #10
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2d4:	b29a      	uxth	r2, r3
 800a2d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a2da:	801a      	strh	r2, [r3, #0]
 800a2dc:	e070      	b.n	800a3c0 <USB_EPStartXfer+0x10ea>
 800a2de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d10c      	bne.n	800a308 <USB_EPStartXfer+0x1032>
 800a2ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a2f2:	881b      	ldrh	r3, [r3, #0]
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2fe:	b29a      	uxth	r2, r3
 800a300:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a304:	801a      	strh	r2, [r3, #0]
 800a306:	e05b      	b.n	800a3c0 <USB_EPStartXfer+0x10ea>
 800a308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a30c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	085b      	lsrs	r3, r3, #1
 800a316:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a31a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a31e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	f003 0301 	and.w	r3, r3, #1
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d004      	beq.n	800a338 <USB_EPStartXfer+0x1062>
 800a32e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a332:	3301      	adds	r3, #1
 800a334:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a338:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a33c:	881b      	ldrh	r3, [r3, #0]
 800a33e:	b29a      	uxth	r2, r3
 800a340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a344:	b29b      	uxth	r3, r3
 800a346:	029b      	lsls	r3, r3, #10
 800a348:	b29b      	uxth	r3, r3
 800a34a:	4313      	orrs	r3, r2
 800a34c:	b29a      	uxth	r2, r3
 800a34e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a352:	801a      	strh	r2, [r3, #0]
 800a354:	e034      	b.n	800a3c0 <USB_EPStartXfer+0x10ea>
 800a356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a35a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	785b      	ldrb	r3, [r3, #1]
 800a362:	2b01      	cmp	r3, #1
 800a364:	d12c      	bne.n	800a3c0 <USB_EPStartXfer+0x10ea>
 800a366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a36a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a378:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a382:	b29b      	uxth	r3, r3
 800a384:	461a      	mov	r2, r3
 800a386:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a38a:	4413      	add	r3, r2
 800a38c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	011a      	lsls	r2, r3, #4
 800a39e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a3a2:	4413      	add	r3, r2
 800a3a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a3a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a3ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	b29a      	uxth	r2, r3
 800a3ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a3be:	801a      	strh	r2, [r3, #0]
 800a3c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a3ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	785b      	ldrb	r3, [r3, #1]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f040 809d 	bne.w	800a51a <USB_EPStartXfer+0x1244>
 800a3e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a3ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	461a      	mov	r2, r3
 800a400:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a404:	4413      	add	r3, r2
 800a406:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a40a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a40e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	011a      	lsls	r2, r3, #4
 800a418:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a41c:	4413      	add	r3, r2
 800a41e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a422:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a426:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a42a:	881b      	ldrh	r3, [r3, #0]
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a432:	b29a      	uxth	r2, r3
 800a434:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a438:	801a      	strh	r2, [r3, #0]
 800a43a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a43e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	2b3e      	cmp	r3, #62	; 0x3e
 800a448:	d92b      	bls.n	800a4a2 <USB_EPStartXfer+0x11cc>
 800a44a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a44e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	095b      	lsrs	r3, r3, #5
 800a458:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a45c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	691b      	ldr	r3, [r3, #16]
 800a468:	f003 031f 	and.w	r3, r3, #31
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d104      	bne.n	800a47a <USB_EPStartXfer+0x11a4>
 800a470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a474:	3b01      	subs	r3, #1
 800a476:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a47a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a47e:	881b      	ldrh	r3, [r3, #0]
 800a480:	b29a      	uxth	r2, r3
 800a482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a486:	b29b      	uxth	r3, r3
 800a488:	029b      	lsls	r3, r3, #10
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	4313      	orrs	r3, r2
 800a48e:	b29b      	uxth	r3, r3
 800a490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a498:	b29a      	uxth	r2, r3
 800a49a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a49e:	801a      	strh	r2, [r3, #0]
 800a4a0:	e069      	b.n	800a576 <USB_EPStartXfer+0x12a0>
 800a4a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	691b      	ldr	r3, [r3, #16]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d10c      	bne.n	800a4cc <USB_EPStartXfer+0x11f6>
 800a4b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a4b6:	881b      	ldrh	r3, [r3, #0]
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a4c8:	801a      	strh	r2, [r3, #0]
 800a4ca:	e054      	b.n	800a576 <USB_EPStartXfer+0x12a0>
 800a4cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	691b      	ldr	r3, [r3, #16]
 800a4d8:	085b      	lsrs	r3, r3, #1
 800a4da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a4de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	691b      	ldr	r3, [r3, #16]
 800a4ea:	f003 0301 	and.w	r3, r3, #1
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d004      	beq.n	800a4fc <USB_EPStartXfer+0x1226>
 800a4f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a4fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a500:	881b      	ldrh	r3, [r3, #0]
 800a502:	b29a      	uxth	r2, r3
 800a504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a508:	b29b      	uxth	r3, r3
 800a50a:	029b      	lsls	r3, r3, #10
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	4313      	orrs	r3, r2
 800a510:	b29a      	uxth	r2, r3
 800a512:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a516:	801a      	strh	r2, [r3, #0]
 800a518:	e02d      	b.n	800a576 <USB_EPStartXfer+0x12a0>
 800a51a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a51e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	785b      	ldrb	r3, [r3, #1]
 800a526:	2b01      	cmp	r3, #1
 800a528:	d125      	bne.n	800a576 <USB_EPStartXfer+0x12a0>
 800a52a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a52e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a538:	b29b      	uxth	r3, r3
 800a53a:	461a      	mov	r2, r3
 800a53c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a540:	4413      	add	r3, r2
 800a542:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a54a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	011a      	lsls	r2, r3, #4
 800a554:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a558:	4413      	add	r3, r2
 800a55a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a55e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	691b      	ldr	r3, [r3, #16]
 800a56e:	b29a      	uxth	r2, r3
 800a570:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a574:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a57a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	69db      	ldr	r3, [r3, #28]
 800a582:	2b00      	cmp	r3, #0
 800a584:	f000 8218 	beq.w	800a9b8 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a58c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a596:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	4413      	add	r3, r2
 800a5a2:	881b      	ldrh	r3, [r3, #0]
 800a5a4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a5a8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a5ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d005      	beq.n	800a5c0 <USB_EPStartXfer+0x12ea>
 800a5b4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a5b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d10d      	bne.n	800a5dc <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a5c0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a5c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f040 81f5 	bne.w	800a9b8 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a5ce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a5d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	f040 81ee 	bne.w	800a9b8 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a5dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	4413      	add	r3, r2
 800a5f6:	881b      	ldrh	r3, [r3, #0]
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a602:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800a606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a60a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	441a      	add	r2, r3
 800a620:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800a624:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a628:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a62c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a630:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a634:	b29b      	uxth	r3, r3
 800a636:	8013      	strh	r3, [r2, #0]
 800a638:	e1be      	b.n	800a9b8 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a63a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a63e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	78db      	ldrb	r3, [r3, #3]
 800a646:	2b01      	cmp	r3, #1
 800a648:	f040 81b4 	bne.w	800a9b4 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a64c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	699a      	ldr	r2, [r3, #24]
 800a658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a65c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	691b      	ldr	r3, [r3, #16]
 800a664:	429a      	cmp	r2, r3
 800a666:	d917      	bls.n	800a698 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800a668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a66c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	691b      	ldr	r3, [r3, #16]
 800a674:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800a678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a67c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	699a      	ldr	r2, [r3, #24]
 800a684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a688:	1ad2      	subs	r2, r2, r3
 800a68a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a68e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	619a      	str	r2, [r3, #24]
 800a696:	e00e      	b.n	800a6b6 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800a698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a69c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	699b      	ldr	r3, [r3, #24]
 800a6a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800a6a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a6b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	785b      	ldrb	r3, [r3, #1]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	f040 8085 	bne.w	800a7d2 <USB_EPStartXfer+0x14fc>
 800a6c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a6d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a6ec:	4413      	add	r3, r2
 800a6ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a6f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	011a      	lsls	r2, r3, #4
 800a700:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a704:	4413      	add	r3, r2
 800a706:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a70a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a70e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a712:	881b      	ldrh	r3, [r3, #0]
 800a714:	b29b      	uxth	r3, r3
 800a716:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a720:	801a      	strh	r2, [r3, #0]
 800a722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a726:	2b3e      	cmp	r3, #62	; 0x3e
 800a728:	d923      	bls.n	800a772 <USB_EPStartXfer+0x149c>
 800a72a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a72e:	095b      	lsrs	r3, r3, #5
 800a730:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a738:	f003 031f 	and.w	r3, r3, #31
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d104      	bne.n	800a74a <USB_EPStartXfer+0x1474>
 800a740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a744:	3b01      	subs	r3, #1
 800a746:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a74a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a74e:	881b      	ldrh	r3, [r3, #0]
 800a750:	b29a      	uxth	r2, r3
 800a752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a756:	b29b      	uxth	r3, r3
 800a758:	029b      	lsls	r3, r3, #10
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	4313      	orrs	r3, r2
 800a75e:	b29b      	uxth	r3, r3
 800a760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a768:	b29a      	uxth	r2, r3
 800a76a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a76e:	801a      	strh	r2, [r3, #0]
 800a770:	e060      	b.n	800a834 <USB_EPStartXfer+0x155e>
 800a772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a776:	2b00      	cmp	r3, #0
 800a778:	d10c      	bne.n	800a794 <USB_EPStartXfer+0x14be>
 800a77a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a77e:	881b      	ldrh	r3, [r3, #0]
 800a780:	b29b      	uxth	r3, r3
 800a782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a78a:	b29a      	uxth	r2, r3
 800a78c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a790:	801a      	strh	r2, [r3, #0]
 800a792:	e04f      	b.n	800a834 <USB_EPStartXfer+0x155e>
 800a794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a798:	085b      	lsrs	r3, r3, #1
 800a79a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a79e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7a2:	f003 0301 	and.w	r3, r3, #1
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d004      	beq.n	800a7b4 <USB_EPStartXfer+0x14de>
 800a7aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a7b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a7b8:	881b      	ldrh	r3, [r3, #0]
 800a7ba:	b29a      	uxth	r2, r3
 800a7bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	029b      	lsls	r3, r3, #10
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	b29a      	uxth	r2, r3
 800a7ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a7ce:	801a      	strh	r2, [r3, #0]
 800a7d0:	e030      	b.n	800a834 <USB_EPStartXfer+0x155e>
 800a7d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	785b      	ldrb	r3, [r3, #1]
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d128      	bne.n	800a834 <USB_EPStartXfer+0x155e>
 800a7e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a7f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	461a      	mov	r2, r3
 800a802:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a806:	4413      	add	r3, r2
 800a808:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a80c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	011a      	lsls	r2, r3, #4
 800a81a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a81e:	4413      	add	r3, r2
 800a820:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a824:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a832:	801a      	strh	r2, [r3, #0]
 800a834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a838:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	785b      	ldrb	r3, [r3, #1]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f040 8085 	bne.w	800a95e <USB_EPStartXfer+0x1688>
 800a854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a858:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a866:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a870:	b29b      	uxth	r3, r3
 800a872:	461a      	mov	r2, r3
 800a874:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a878:	4413      	add	r3, r2
 800a87a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a87e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a882:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	011a      	lsls	r2, r3, #4
 800a88c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a890:	4413      	add	r3, r2
 800a892:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a896:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a89a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a89e:	881b      	ldrh	r3, [r3, #0]
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a8a6:	b29a      	uxth	r2, r3
 800a8a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a8ac:	801a      	strh	r2, [r3, #0]
 800a8ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b2:	2b3e      	cmp	r3, #62	; 0x3e
 800a8b4:	d923      	bls.n	800a8fe <USB_EPStartXfer+0x1628>
 800a8b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ba:	095b      	lsrs	r3, r3, #5
 800a8bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a8c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8c4:	f003 031f 	and.w	r3, r3, #31
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d104      	bne.n	800a8d6 <USB_EPStartXfer+0x1600>
 800a8cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8d0:	3b01      	subs	r3, #1
 800a8d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a8d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a8da:	881b      	ldrh	r3, [r3, #0]
 800a8dc:	b29a      	uxth	r2, r3
 800a8de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	029b      	lsls	r3, r3, #10
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8f4:	b29a      	uxth	r2, r3
 800a8f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a8fa:	801a      	strh	r2, [r3, #0]
 800a8fc:	e05c      	b.n	800a9b8 <USB_EPStartXfer+0x16e2>
 800a8fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a902:	2b00      	cmp	r3, #0
 800a904:	d10c      	bne.n	800a920 <USB_EPStartXfer+0x164a>
 800a906:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a90a:	881b      	ldrh	r3, [r3, #0]
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a916:	b29a      	uxth	r2, r3
 800a918:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a91c:	801a      	strh	r2, [r3, #0]
 800a91e:	e04b      	b.n	800a9b8 <USB_EPStartXfer+0x16e2>
 800a920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a924:	085b      	lsrs	r3, r3, #1
 800a926:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a92a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a92e:	f003 0301 	and.w	r3, r3, #1
 800a932:	2b00      	cmp	r3, #0
 800a934:	d004      	beq.n	800a940 <USB_EPStartXfer+0x166a>
 800a936:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a93a:	3301      	adds	r3, #1
 800a93c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a940:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a944:	881b      	ldrh	r3, [r3, #0]
 800a946:	b29a      	uxth	r2, r3
 800a948:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	029b      	lsls	r3, r3, #10
 800a950:	b29b      	uxth	r3, r3
 800a952:	4313      	orrs	r3, r2
 800a954:	b29a      	uxth	r2, r3
 800a956:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a95a:	801a      	strh	r2, [r3, #0]
 800a95c:	e02c      	b.n	800a9b8 <USB_EPStartXfer+0x16e2>
 800a95e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	785b      	ldrb	r3, [r3, #1]
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d124      	bne.n	800a9b8 <USB_EPStartXfer+0x16e2>
 800a96e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a972:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	461a      	mov	r2, r3
 800a980:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a984:	4413      	add	r3, r2
 800a986:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a98a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a98e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	011a      	lsls	r2, r3, #4
 800a998:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a99c:	4413      	add	r3, r2
 800a99e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a9a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a9a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9aa:	b29a      	uxth	r2, r3
 800a9ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a9b0:	801a      	strh	r2, [r3, #0]
 800a9b2:	e001      	b.n	800a9b8 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	e03a      	b.n	800aa2e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a9b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	4413      	add	r3, r2
 800a9d2:	881b      	ldrh	r3, [r3, #0]
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a9da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9de:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a9e2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a9e6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a9ea:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a9ee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a9f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a9f6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a9fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa02:	681a      	ldr	r2, [r3, #0]
 800aa04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	009b      	lsls	r3, r3, #2
 800aa12:	441a      	add	r2, r3
 800aa14:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800aa18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aa2c:	2300      	movs	r3, #0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b085      	sub	sp, #20
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	785b      	ldrb	r3, [r3, #1]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d020      	beq.n	800aa8c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	4413      	add	r3, r2
 800aa54:	881b      	ldrh	r3, [r3, #0]
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa60:	81bb      	strh	r3, [r7, #12]
 800aa62:	89bb      	ldrh	r3, [r7, #12]
 800aa64:	f083 0310 	eor.w	r3, r3, #16
 800aa68:	81bb      	strh	r3, [r7, #12]
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	441a      	add	r2, r3
 800aa74:	89bb      	ldrh	r3, [r7, #12]
 800aa76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	8013      	strh	r3, [r2, #0]
 800aa8a:	e01f      	b.n	800aacc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	4413      	add	r3, r2
 800aa96:	881b      	ldrh	r3, [r3, #0]
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aaa2:	81fb      	strh	r3, [r7, #14]
 800aaa4:	89fb      	ldrh	r3, [r7, #14]
 800aaa6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aaaa:	81fb      	strh	r3, [r7, #14]
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	441a      	add	r2, r3
 800aab6:	89fb      	ldrh	r3, [r7, #14]
 800aab8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aabc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aacc:	2300      	movs	r3, #0
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3714      	adds	r7, #20
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr

0800aada <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aada:	b480      	push	{r7}
 800aadc:	b087      	sub	sp, #28
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
 800aae2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	7b1b      	ldrb	r3, [r3, #12]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f040 809d 	bne.w	800ac28 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	785b      	ldrb	r3, [r3, #1]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d04c      	beq.n	800ab90 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	4413      	add	r3, r2
 800ab00:	881b      	ldrh	r3, [r3, #0]
 800ab02:	823b      	strh	r3, [r7, #16]
 800ab04:	8a3b      	ldrh	r3, [r7, #16]
 800ab06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d01b      	beq.n	800ab46 <USB_EPClearStall+0x6c>
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	4413      	add	r3, r2
 800ab18:	881b      	ldrh	r3, [r3, #0]
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab24:	81fb      	strh	r3, [r7, #14]
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	441a      	add	r2, r3
 800ab30:	89fb      	ldrh	r3, [r7, #14]
 800ab32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	78db      	ldrb	r3, [r3, #3]
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d06c      	beq.n	800ac28 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	4413      	add	r3, r2
 800ab58:	881b      	ldrh	r3, [r3, #0]
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab64:	81bb      	strh	r3, [r7, #12]
 800ab66:	89bb      	ldrh	r3, [r7, #12]
 800ab68:	f083 0320 	eor.w	r3, r3, #32
 800ab6c:	81bb      	strh	r3, [r7, #12]
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	009b      	lsls	r3, r3, #2
 800ab76:	441a      	add	r2, r3
 800ab78:	89bb      	ldrh	r3, [r7, #12]
 800ab7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	8013      	strh	r3, [r2, #0]
 800ab8e:	e04b      	b.n	800ac28 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	4413      	add	r3, r2
 800ab9a:	881b      	ldrh	r3, [r3, #0]
 800ab9c:	82fb      	strh	r3, [r7, #22]
 800ab9e:	8afb      	ldrh	r3, [r7, #22]
 800aba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d01b      	beq.n	800abe0 <USB_EPClearStall+0x106>
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	009b      	lsls	r3, r3, #2
 800abb0:	4413      	add	r3, r2
 800abb2:	881b      	ldrh	r3, [r3, #0]
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abbe:	82bb      	strh	r3, [r7, #20]
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	441a      	add	r2, r3
 800abca:	8abb      	ldrh	r3, [r7, #20]
 800abcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800abd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abdc:	b29b      	uxth	r3, r3
 800abde:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	4413      	add	r3, r2
 800abea:	881b      	ldrh	r3, [r3, #0]
 800abec:	b29b      	uxth	r3, r3
 800abee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800abf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abf6:	827b      	strh	r3, [r7, #18]
 800abf8:	8a7b      	ldrh	r3, [r7, #18]
 800abfa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800abfe:	827b      	strh	r3, [r7, #18]
 800ac00:	8a7b      	ldrh	r3, [r7, #18]
 800ac02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ac06:	827b      	strh	r3, [r7, #18]
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	441a      	add	r2, r3
 800ac12:	8a7b      	ldrh	r3, [r7, #18]
 800ac14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ac28:	2300      	movs	r3, #0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	371c      	adds	r7, #28
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ac36:	b480      	push	{r7}
 800ac38:	b083      	sub	sp, #12
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
 800ac3e:	460b      	mov	r3, r1
 800ac40:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ac42:	78fb      	ldrb	r3, [r7, #3]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d103      	bne.n	800ac50 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2280      	movs	r2, #128	; 0x80
 800ac4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800ac50:	2300      	movs	r3, #0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	370c      	adds	r7, #12
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr

0800ac5e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ac5e:	b480      	push	{r7}
 800ac60:	b083      	sub	sp, #12
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ac66:	2300      	movs	r3, #0
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	370c      	adds	r7, #12
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr

0800ac74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b085      	sub	sp, #20
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ac86:	68fb      	ldr	r3, [r7, #12]
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3714      	adds	r7, #20
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b08b      	sub	sp, #44	; 0x2c
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	60f8      	str	r0, [r7, #12]
 800ac9c:	60b9      	str	r1, [r7, #8]
 800ac9e:	4611      	mov	r1, r2
 800aca0:	461a      	mov	r2, r3
 800aca2:	460b      	mov	r3, r1
 800aca4:	80fb      	strh	r3, [r7, #6]
 800aca6:	4613      	mov	r3, r2
 800aca8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800acaa:	88bb      	ldrh	r3, [r7, #4]
 800acac:	3301      	adds	r3, #1
 800acae:	085b      	lsrs	r3, r3, #1
 800acb0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800acba:	88fb      	ldrh	r3, [r7, #6]
 800acbc:	005a      	lsls	r2, r3, #1
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	4413      	add	r3, r2
 800acc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800acc6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	627b      	str	r3, [r7, #36]	; 0x24
 800accc:	e01e      	b.n	800ad0c <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800acce:	69fb      	ldr	r3, [r7, #28]
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800acd4:	69fb      	ldr	r3, [r7, #28]
 800acd6:	3301      	adds	r3, #1
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	021b      	lsls	r3, r3, #8
 800acdc:	b21a      	sxth	r2, r3
 800acde:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ace2:	4313      	orrs	r3, r2
 800ace4:	b21b      	sxth	r3, r3
 800ace6:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ace8:	6a3b      	ldr	r3, [r7, #32]
 800acea:	8a7a      	ldrh	r2, [r7, #18]
 800acec:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800acee:	6a3b      	ldr	r3, [r7, #32]
 800acf0:	3302      	adds	r3, #2
 800acf2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800acf4:	6a3b      	ldr	r3, [r7, #32]
 800acf6:	3302      	adds	r3, #2
 800acf8:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	3301      	adds	r3, #1
 800acfe:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ad00:	69fb      	ldr	r3, [r7, #28]
 800ad02:	3301      	adds	r3, #1
 800ad04:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ad06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad08:	3b01      	subs	r3, #1
 800ad0a:	627b      	str	r3, [r7, #36]	; 0x24
 800ad0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d1dd      	bne.n	800acce <USB_WritePMA+0x3a>
  }
}
 800ad12:	bf00      	nop
 800ad14:	bf00      	nop
 800ad16:	372c      	adds	r7, #44	; 0x2c
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b08b      	sub	sp, #44	; 0x2c
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	60b9      	str	r1, [r7, #8]
 800ad2a:	4611      	mov	r1, r2
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	460b      	mov	r3, r1
 800ad30:	80fb      	strh	r3, [r7, #6]
 800ad32:	4613      	mov	r3, r2
 800ad34:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ad36:	88bb      	ldrh	r3, [r7, #4]
 800ad38:	085b      	lsrs	r3, r3, #1
 800ad3a:	b29b      	uxth	r3, r3
 800ad3c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ad46:	88fb      	ldrh	r3, [r7, #6]
 800ad48:	005a      	lsls	r2, r3, #1
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	4413      	add	r3, r2
 800ad4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad52:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	627b      	str	r3, [r7, #36]	; 0x24
 800ad58:	e01b      	b.n	800ad92 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ad5a:	6a3b      	ldr	r3, [r7, #32]
 800ad5c:	881b      	ldrh	r3, [r3, #0]
 800ad5e:	b29b      	uxth	r3, r3
 800ad60:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ad62:	6a3b      	ldr	r3, [r7, #32]
 800ad64:	3302      	adds	r3, #2
 800ad66:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	b2da      	uxtb	r2, r3
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	3301      	adds	r3, #1
 800ad74:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	0a1b      	lsrs	r3, r3, #8
 800ad7a:	b2da      	uxtb	r2, r3
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	3301      	adds	r3, #1
 800ad84:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800ad86:	6a3b      	ldr	r3, [r7, #32]
 800ad88:	3302      	adds	r3, #2
 800ad8a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800ad8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8e:	3b01      	subs	r3, #1
 800ad90:	627b      	str	r3, [r7, #36]	; 0x24
 800ad92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d1e0      	bne.n	800ad5a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ad98:	88bb      	ldrh	r3, [r7, #4]
 800ad9a:	f003 0301 	and.w	r3, r3, #1
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d007      	beq.n	800adb4 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800ada4:	6a3b      	ldr	r3, [r7, #32]
 800ada6:	881b      	ldrh	r3, [r3, #0]
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	b2da      	uxtb	r2, r3
 800adb0:	69fb      	ldr	r3, [r7, #28]
 800adb2:	701a      	strb	r2, [r3, #0]
  }
}
 800adb4:	bf00      	nop
 800adb6:	372c      	adds	r7, #44	; 0x2c
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr

0800adc0 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b084      	sub	sp, #16
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	460b      	mov	r3, r1
 800adca:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800adcc:	2300      	movs	r3, #0
 800adce:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 800add0:	2302      	movs	r3, #2
 800add2:	2203      	movs	r2, #3
 800add4:	2181      	movs	r1, #129	; 0x81
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f001 fd6d 	bl	800c8b6 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2201      	movs	r2, #1
 800ade0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800ade2:	2304      	movs	r3, #4
 800ade4:	2203      	movs	r2, #3
 800ade6:	2101      	movs	r1, #1
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f001 fd64 	bl	800c8b6 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2201      	movs	r2, #1
 800adf2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800adf6:	2018      	movs	r0, #24
 800adf8:	f001 fe72 	bl	800cae0 <USBD_static_malloc>
 800adfc:	4602      	mov	r2, r0
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d102      	bne.n	800ae14 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	73fb      	strb	r3, [r7, #15]
 800ae12:	e011      	b.n	800ae38 <USBD_CUSTOM_HID_Init+0x78>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae1a:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800ae2c:	68ba      	ldr	r2, [r7, #8]
 800ae2e:	2304      	movs	r3, #4
 800ae30:	2101      	movs	r1, #1
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f001 fe31 	bl	800ca9a <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 800ae38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3710      	adds	r7, #16
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}

0800ae42 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b082      	sub	sp, #8
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800ae4e:	2181      	movs	r1, #129	; 0x81
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f001 fd56 	bl	800c902 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800ae5c:	2101      	movs	r1, #1
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f001 fd4f 	bl	800c902 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d00e      	beq.n	800ae94 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae7c:	689b      	ldr	r3, [r3, #8]
 800ae7e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae86:	4618      	mov	r0, r3
 800ae88:	f001 fe38 	bl	800cafc <USBD_static_free>
    pdev->pClassData = NULL;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 800ae94:	2300      	movs	r3, #0
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3708      	adds	r7, #8
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
	...

0800aea0 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b088      	sub	sp, #32
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeb0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800aeba:	2300      	movs	r3, #0
 800aebc:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 800aebe:	2300      	movs	r3, #0
 800aec0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d051      	beq.n	800af72 <USBD_CUSTOM_HID_Setup+0xd2>
 800aece:	2b20      	cmp	r3, #32
 800aed0:	f040 80d8 	bne.w	800b084 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	785b      	ldrb	r3, [r3, #1]
 800aed8:	3b02      	subs	r3, #2
 800aeda:	2b09      	cmp	r3, #9
 800aedc:	d841      	bhi.n	800af62 <USBD_CUSTOM_HID_Setup+0xc2>
 800aede:	a201      	add	r2, pc, #4	; (adr r2, 800aee4 <USBD_CUSTOM_HID_Setup+0x44>)
 800aee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee4:	0800af3d 	.word	0x0800af3d
 800aee8:	0800af1b 	.word	0x0800af1b
 800aeec:	0800af63 	.word	0x0800af63
 800aef0:	0800af63 	.word	0x0800af63
 800aef4:	0800af63 	.word	0x0800af63
 800aef8:	0800af63 	.word	0x0800af63
 800aefc:	0800af63 	.word	0x0800af63
 800af00:	0800af4d 	.word	0x0800af4d
 800af04:	0800af2b 	.word	0x0800af2b
 800af08:	0800af0d 	.word	0x0800af0d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	885b      	ldrh	r3, [r3, #2]
 800af10:	b2db      	uxtb	r3, r3
 800af12:	461a      	mov	r2, r3
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	605a      	str	r2, [r3, #4]
          break;
 800af18:	e02a      	b.n	800af70 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	3304      	adds	r3, #4
 800af1e:	2201      	movs	r2, #1
 800af20:	4619      	mov	r1, r3
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f001 f979 	bl	800c21a <USBD_CtlSendData>
          break;
 800af28:	e022      	b.n	800af70 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	885b      	ldrh	r3, [r3, #2]
 800af2e:	0a1b      	lsrs	r3, r3, #8
 800af30:	b29b      	uxth	r3, r3
 800af32:	b2db      	uxtb	r3, r3
 800af34:	461a      	mov	r2, r3
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	609a      	str	r2, [r3, #8]
          break;
 800af3a:	e019      	b.n	800af70 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	3308      	adds	r3, #8
 800af40:	2201      	movs	r2, #1
 800af42:	4619      	mov	r1, r3
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f001 f968 	bl	800c21a <USBD_CtlSendData>
          break;
 800af4a:	e011      	b.n	800af70 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	2201      	movs	r2, #1
 800af50:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800af52:	6939      	ldr	r1, [r7, #16]
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	88db      	ldrh	r3, [r3, #6]
 800af58:	461a      	mov	r2, r3
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f001 f98b 	bl	800c276 <USBD_CtlPrepareRx>
          break;
 800af60:	e006      	b.n	800af70 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 800af62:	6839      	ldr	r1, [r7, #0]
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f001 f8ed 	bl	800c144 <USBD_CtlError>
          ret = USBD_FAIL;
 800af6a:	2302      	movs	r3, #2
 800af6c:	75fb      	strb	r3, [r7, #23]
          break;
 800af6e:	bf00      	nop
      }
      break;
 800af70:	e08f      	b.n	800b092 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	785b      	ldrb	r3, [r3, #1]
 800af76:	2b0b      	cmp	r3, #11
 800af78:	d87c      	bhi.n	800b074 <USBD_CUSTOM_HID_Setup+0x1d4>
 800af7a:	a201      	add	r2, pc, #4	; (adr r2, 800af80 <USBD_CUSTOM_HID_Setup+0xe0>)
 800af7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af80:	0800afb1 	.word	0x0800afb1
 800af84:	0800b075 	.word	0x0800b075
 800af88:	0800b075 	.word	0x0800b075
 800af8c:	0800b075 	.word	0x0800b075
 800af90:	0800b075 	.word	0x0800b075
 800af94:	0800b075 	.word	0x0800b075
 800af98:	0800afd9 	.word	0x0800afd9
 800af9c:	0800b075 	.word	0x0800b075
 800afa0:	0800b075 	.word	0x0800b075
 800afa4:	0800b075 	.word	0x0800b075
 800afa8:	0800b027 	.word	0x0800b027
 800afac:	0800b04f 	.word	0x0800b04f
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afb6:	2b03      	cmp	r3, #3
 800afb8:	d107      	bne.n	800afca <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800afba:	f107 030e 	add.w	r3, r7, #14
 800afbe:	2202      	movs	r2, #2
 800afc0:	4619      	mov	r1, r3
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f001 f929 	bl	800c21a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800afc8:	e05b      	b.n	800b082 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800afca:	6839      	ldr	r1, [r7, #0]
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f001 f8b9 	bl	800c144 <USBD_CtlError>
            ret = USBD_FAIL;
 800afd2:	2302      	movs	r3, #2
 800afd4:	75fb      	strb	r3, [r7, #23]
          break;
 800afd6:	e054      	b.n	800b082 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	885b      	ldrh	r3, [r3, #2]
 800afdc:	0a1b      	lsrs	r3, r3, #8
 800afde:	b29b      	uxth	r3, r3
 800afe0:	2b22      	cmp	r3, #34	; 0x22
 800afe2:	d10b      	bne.n	800affc <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	88db      	ldrh	r3, [r3, #6]
 800afe8:	2b23      	cmp	r3, #35	; 0x23
 800afea:	bf28      	it	cs
 800afec:	2323      	movcs	r3, #35	; 0x23
 800afee:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	61bb      	str	r3, [r7, #24]
 800affa:	e00d      	b.n	800b018 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	885b      	ldrh	r3, [r3, #2]
 800b000:	0a1b      	lsrs	r3, r3, #8
 800b002:	b29b      	uxth	r3, r3
 800b004:	2b21      	cmp	r3, #33	; 0x21
 800b006:	d107      	bne.n	800b018 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800b008:	4b24      	ldr	r3, [pc, #144]	; (800b09c <USBD_CUSTOM_HID_Setup+0x1fc>)
 800b00a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	88db      	ldrh	r3, [r3, #6]
 800b010:	2b09      	cmp	r3, #9
 800b012:	bf28      	it	cs
 800b014:	2309      	movcs	r3, #9
 800b016:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 800b018:	8bfb      	ldrh	r3, [r7, #30]
 800b01a:	461a      	mov	r2, r3
 800b01c:	69b9      	ldr	r1, [r7, #24]
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f001 f8fb 	bl	800c21a <USBD_CtlSendData>
          break;
 800b024:	e02d      	b.n	800b082 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b02c:	2b03      	cmp	r3, #3
 800b02e:	d107      	bne.n	800b040 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	330c      	adds	r3, #12
 800b034:	2201      	movs	r2, #1
 800b036:	4619      	mov	r1, r3
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f001 f8ee 	bl	800c21a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b03e:	e020      	b.n	800b082 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800b040:	6839      	ldr	r1, [r7, #0]
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f001 f87e 	bl	800c144 <USBD_CtlError>
            ret = USBD_FAIL;
 800b048:	2302      	movs	r3, #2
 800b04a:	75fb      	strb	r3, [r7, #23]
          break;
 800b04c:	e019      	b.n	800b082 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b054:	2b03      	cmp	r3, #3
 800b056:	d106      	bne.n	800b066 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	885b      	ldrh	r3, [r3, #2]
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	461a      	mov	r2, r3
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b064:	e00d      	b.n	800b082 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800b066:	6839      	ldr	r1, [r7, #0]
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f001 f86b 	bl	800c144 <USBD_CtlError>
            ret = USBD_FAIL;
 800b06e:	2302      	movs	r3, #2
 800b070:	75fb      	strb	r3, [r7, #23]
          break;
 800b072:	e006      	b.n	800b082 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 800b074:	6839      	ldr	r1, [r7, #0]
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f001 f864 	bl	800c144 <USBD_CtlError>
          ret = USBD_FAIL;
 800b07c:	2302      	movs	r3, #2
 800b07e:	75fb      	strb	r3, [r7, #23]
          break;
 800b080:	bf00      	nop
      }
      break;
 800b082:	e006      	b.n	800b092 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 800b084:	6839      	ldr	r1, [r7, #0]
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f001 f85c 	bl	800c144 <USBD_CtlError>
      ret = USBD_FAIL;
 800b08c:	2302      	movs	r3, #2
 800b08e:	75fb      	strb	r3, [r7, #23]
      break;
 800b090:	bf00      	nop
  }
  return ret;
 800b092:	7dfb      	ldrb	r3, [r7, #23]
}
 800b094:	4618      	mov	r0, r3
 800b096:	3720      	adds	r7, #32
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}
 800b09c:	200000c8 	.word	0x200000c8

0800b0a0 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2229      	movs	r2, #41	; 0x29
 800b0ac:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800b0ae:	4b03      	ldr	r3, [pc, #12]	; (800b0bc <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	370c      	adds	r7, #12
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr
 800b0bc:	20000044 	.word	0x20000044

0800b0c0 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2229      	movs	r2, #41	; 0x29
 800b0cc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800b0ce:	4b03      	ldr	r3, [pc, #12]	; (800b0dc <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	370c      	adds	r7, #12
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr
 800b0dc:	20000070 	.word	0x20000070

0800b0e0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2229      	movs	r2, #41	; 0x29
 800b0ec:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800b0ee:	4b03      	ldr	r3, [pc, #12]	; (800b0fc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	370c      	adds	r7, #12
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr
 800b0fc:	2000009c 	.word	0x2000009c

0800b100 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 800b100:	b480      	push	{r7}
 800b102:	b083      	sub	sp, #12
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	460b      	mov	r3, r1
 800b10a:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b112:	2200      	movs	r2, #0
 800b114:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 800b116:	2300      	movs	r3, #0
}
 800b118:	4618      	mov	r0, r3
 800b11a:	370c      	adds	r7, #12
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr

0800b124 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	460b      	mov	r3, r1
 800b12e:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b136:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	68fa      	ldr	r2, [r7, #12]
 800b142:	4610      	mov	r0, r2
 800b144:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800b146:	68fa      	ldr	r2, [r7, #12]
 800b148:	2304      	movs	r3, #4
 800b14a:	2101      	movs	r1, #1
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f001 fca4 	bl	800ca9a <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 800b152:	2300      	movs	r3, #0
}
 800b154:	4618      	mov	r0, r3
 800b156:	3710      	adds	r7, #16
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b16a:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	691b      	ldr	r3, [r3, #16]
 800b170:	2b01      	cmp	r3, #1
 800b172:	d109      	bne.n	800b188 <USBD_CUSTOM_HID_EP0_RxReady+0x2c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	4610      	mov	r0, r2
 800b180:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2200      	movs	r2, #0
 800b186:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3710      	adds	r7, #16
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
	...

0800b194 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	220a      	movs	r2, #10
 800b1a0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800b1a2:	4b03      	ldr	r3, [pc, #12]	; (800b1b0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr
 800b1b0:	200000d4 	.word	0x200000d4

0800b1b4 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b1be:	2302      	movs	r3, #2
 800b1c0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d005      	beq.n	800b1d4 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	683a      	ldr	r2, [r7, #0]
 800b1cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3714      	adds	r7, #20
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr

0800b1e2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b1e2:	b580      	push	{r7, lr}
 800b1e4:	b084      	sub	sp, #16
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	60f8      	str	r0, [r7, #12]
 800b1ea:	60b9      	str	r1, [r7, #8]
 800b1ec:	4613      	mov	r3, r2
 800b1ee:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d101      	bne.n	800b1fa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b1f6:	2302      	movs	r3, #2
 800b1f8:	e01a      	b.n	800b230 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b200:	2b00      	cmp	r3, #0
 800b202:	d003      	beq.n	800b20c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2200      	movs	r2, #0
 800b208:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d003      	beq.n	800b21a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	68ba      	ldr	r2, [r7, #8]
 800b216:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2201      	movs	r2, #1
 800b21e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	79fa      	ldrb	r2, [r7, #7]
 800b226:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b228:	68f8      	ldr	r0, [r7, #12]
 800b22a:	f001 fad9 	bl	800c7e0 <USBD_LL_Init>

  return USBD_OK;
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	3710      	adds	r7, #16
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b238:	b480      	push	{r7}
 800b23a:	b085      	sub	sp, #20
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b242:	2300      	movs	r3, #0
 800b244:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d006      	beq.n	800b25a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	683a      	ldr	r2, [r7, #0]
 800b250:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800b254:	2300      	movs	r3, #0
 800b256:	73fb      	strb	r3, [r7, #15]
 800b258:	e001      	b.n	800b25e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b25a:	2302      	movs	r3, #2
 800b25c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b25e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b260:	4618      	mov	r0, r3
 800b262:	3714      	adds	r7, #20
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f001 fb03 	bl	800c880 <USBD_LL_Start>

  return USBD_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3708      	adds	r7, #8
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b284:	b480      	push	{r7}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b28c:	2300      	movs	r3, #0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	370c      	adds	r7, #12
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr

0800b29a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b084      	sub	sp, #16
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b2a6:	2302      	movs	r3, #2
 800b2a8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d00c      	beq.n	800b2ce <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	78fa      	ldrb	r2, [r7, #3]
 800b2be:	4611      	mov	r1, r2
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	4798      	blx	r3
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d101      	bne.n	800b2ce <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b2ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3710      	adds	r7, #16
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	78fa      	ldrb	r2, [r7, #3]
 800b2ee:	4611      	mov	r1, r2
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	4798      	blx	r3

  return USBD_OK;
 800b2f4:	2300      	movs	r3, #0
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3708      	adds	r7, #8
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}

0800b2fe <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b082      	sub	sp, #8
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
 800b306:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b30e:	6839      	ldr	r1, [r7, #0]
 800b310:	4618      	mov	r0, r3
 800b312:	f000 feda 	bl	800c0ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2201      	movs	r2, #1
 800b31a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b324:	461a      	mov	r2, r3
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b332:	f003 031f 	and.w	r3, r3, #31
 800b336:	2b02      	cmp	r3, #2
 800b338:	d016      	beq.n	800b368 <USBD_LL_SetupStage+0x6a>
 800b33a:	2b02      	cmp	r3, #2
 800b33c:	d81c      	bhi.n	800b378 <USBD_LL_SetupStage+0x7a>
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d002      	beq.n	800b348 <USBD_LL_SetupStage+0x4a>
 800b342:	2b01      	cmp	r3, #1
 800b344:	d008      	beq.n	800b358 <USBD_LL_SetupStage+0x5a>
 800b346:	e017      	b.n	800b378 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b34e:	4619      	mov	r1, r3
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 f9cd 	bl	800b6f0 <USBD_StdDevReq>
      break;
 800b356:	e01a      	b.n	800b38e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b35e:	4619      	mov	r1, r3
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 fa2f 	bl	800b7c4 <USBD_StdItfReq>
      break;
 800b366:	e012      	b.n	800b38e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b36e:	4619      	mov	r1, r3
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f000 fa6f 	bl	800b854 <USBD_StdEPReq>
      break;
 800b376:	e00a      	b.n	800b38e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b37e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b382:	b2db      	uxtb	r3, r3
 800b384:	4619      	mov	r1, r3
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f001 fada 	bl	800c940 <USBD_LL_StallEP>
      break;
 800b38c:	bf00      	nop
  }

  return USBD_OK;
 800b38e:	2300      	movs	r3, #0
}
 800b390:	4618      	mov	r0, r3
 800b392:	3708      	adds	r7, #8
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}

0800b398 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b086      	sub	sp, #24
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	60f8      	str	r0, [r7, #12]
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	607a      	str	r2, [r7, #4]
 800b3a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b3a6:	7afb      	ldrb	r3, [r7, #11]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d14b      	bne.n	800b444 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b3b2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b3ba:	2b03      	cmp	r3, #3
 800b3bc:	d134      	bne.n	800b428 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	68da      	ldr	r2, [r3, #12]
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	691b      	ldr	r3, [r3, #16]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d919      	bls.n	800b3fe <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	68da      	ldr	r2, [r3, #12]
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	691b      	ldr	r3, [r3, #16]
 800b3d2:	1ad2      	subs	r2, r2, r3
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	68da      	ldr	r2, [r3, #12]
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d203      	bcs.n	800b3ec <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	e002      	b.n	800b3f2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	6879      	ldr	r1, [r7, #4]
 800b3f6:	68f8      	ldr	r0, [r7, #12]
 800b3f8:	f000 ff5b 	bl	800c2b2 <USBD_CtlContinueRx>
 800b3fc:	e038      	b.n	800b470 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b404:	691b      	ldr	r3, [r3, #16]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d00a      	beq.n	800b420 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b410:	2b03      	cmp	r3, #3
 800b412:	d105      	bne.n	800b420 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b41a:	691b      	ldr	r3, [r3, #16]
 800b41c:	68f8      	ldr	r0, [r7, #12]
 800b41e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b420:	68f8      	ldr	r0, [r7, #12]
 800b422:	f000 ff58 	bl	800c2d6 <USBD_CtlSendStatus>
 800b426:	e023      	b.n	800b470 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b42e:	2b05      	cmp	r3, #5
 800b430:	d11e      	bne.n	800b470 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2200      	movs	r2, #0
 800b436:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b43a:	2100      	movs	r1, #0
 800b43c:	68f8      	ldr	r0, [r7, #12]
 800b43e:	f001 fa7f 	bl	800c940 <USBD_LL_StallEP>
 800b442:	e015      	b.n	800b470 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b44a:	699b      	ldr	r3, [r3, #24]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d00d      	beq.n	800b46c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b456:	2b03      	cmp	r3, #3
 800b458:	d108      	bne.n	800b46c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b460:	699b      	ldr	r3, [r3, #24]
 800b462:	7afa      	ldrb	r2, [r7, #11]
 800b464:	4611      	mov	r1, r2
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	4798      	blx	r3
 800b46a:	e001      	b.n	800b470 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b46c:	2302      	movs	r3, #2
 800b46e:	e000      	b.n	800b472 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b470:	2300      	movs	r3, #0
}
 800b472:	4618      	mov	r0, r3
 800b474:	3718      	adds	r7, #24
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}

0800b47a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b086      	sub	sp, #24
 800b47e:	af00      	add	r7, sp, #0
 800b480:	60f8      	str	r0, [r7, #12]
 800b482:	460b      	mov	r3, r1
 800b484:	607a      	str	r2, [r7, #4]
 800b486:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b488:	7afb      	ldrb	r3, [r7, #11]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d17f      	bne.n	800b58e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	3314      	adds	r3, #20
 800b492:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b49a:	2b02      	cmp	r3, #2
 800b49c:	d15c      	bne.n	800b558 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	68da      	ldr	r2, [r3, #12]
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	691b      	ldr	r3, [r3, #16]
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d915      	bls.n	800b4d6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	68da      	ldr	r2, [r3, #12]
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	691b      	ldr	r3, [r3, #16]
 800b4b2:	1ad2      	subs	r2, r2, r3
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	461a      	mov	r2, r3
 800b4c0:	6879      	ldr	r1, [r7, #4]
 800b4c2:	68f8      	ldr	r0, [r7, #12]
 800b4c4:	f000 fec5 	bl	800c252 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	2100      	movs	r1, #0
 800b4ce:	68f8      	ldr	r0, [r7, #12]
 800b4d0:	f001 fae3 	bl	800ca9a <USBD_LL_PrepareReceive>
 800b4d4:	e04e      	b.n	800b574 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	689b      	ldr	r3, [r3, #8]
 800b4da:	697a      	ldr	r2, [r7, #20]
 800b4dc:	6912      	ldr	r2, [r2, #16]
 800b4de:	fbb3 f1f2 	udiv	r1, r3, r2
 800b4e2:	fb01 f202 	mul.w	r2, r1, r2
 800b4e6:	1a9b      	subs	r3, r3, r2
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d11c      	bne.n	800b526 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	689a      	ldr	r2, [r3, #8]
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d316      	bcc.n	800b526 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	689a      	ldr	r2, [r3, #8]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b502:	429a      	cmp	r2, r3
 800b504:	d20f      	bcs.n	800b526 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b506:	2200      	movs	r2, #0
 800b508:	2100      	movs	r1, #0
 800b50a:	68f8      	ldr	r0, [r7, #12]
 800b50c:	f000 fea1 	bl	800c252 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2200      	movs	r2, #0
 800b514:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b518:	2300      	movs	r3, #0
 800b51a:	2200      	movs	r2, #0
 800b51c:	2100      	movs	r1, #0
 800b51e:	68f8      	ldr	r0, [r7, #12]
 800b520:	f001 fabb 	bl	800ca9a <USBD_LL_PrepareReceive>
 800b524:	e026      	b.n	800b574 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b52c:	68db      	ldr	r3, [r3, #12]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d00a      	beq.n	800b548 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b538:	2b03      	cmp	r3, #3
 800b53a:	d105      	bne.n	800b548 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b548:	2180      	movs	r1, #128	; 0x80
 800b54a:	68f8      	ldr	r0, [r7, #12]
 800b54c:	f001 f9f8 	bl	800c940 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b550:	68f8      	ldr	r0, [r7, #12]
 800b552:	f000 fed3 	bl	800c2fc <USBD_CtlReceiveStatus>
 800b556:	e00d      	b.n	800b574 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b55e:	2b04      	cmp	r3, #4
 800b560:	d004      	beq.n	800b56c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d103      	bne.n	800b574 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b56c:	2180      	movs	r1, #128	; 0x80
 800b56e:	68f8      	ldr	r0, [r7, #12]
 800b570:	f001 f9e6 	bl	800c940 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d11d      	bne.n	800b5ba <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b57e:	68f8      	ldr	r0, [r7, #12]
 800b580:	f7ff fe80 	bl	800b284 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2200      	movs	r2, #0
 800b588:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b58c:	e015      	b.n	800b5ba <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b594:	695b      	ldr	r3, [r3, #20]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d00d      	beq.n	800b5b6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b5a0:	2b03      	cmp	r3, #3
 800b5a2:	d108      	bne.n	800b5b6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5aa:	695b      	ldr	r3, [r3, #20]
 800b5ac:	7afa      	ldrb	r2, [r7, #11]
 800b5ae:	4611      	mov	r1, r2
 800b5b0:	68f8      	ldr	r0, [r7, #12]
 800b5b2:	4798      	blx	r3
 800b5b4:	e001      	b.n	800b5ba <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b5b6:	2302      	movs	r3, #2
 800b5b8:	e000      	b.n	800b5bc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b5ba:	2300      	movs	r3, #0
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3718      	adds	r7, #24
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}

0800b5c4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b082      	sub	sp, #8
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b5cc:	2340      	movs	r3, #64	; 0x40
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f001 f96f 	bl	800c8b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2201      	movs	r2, #1
 800b5dc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2240      	movs	r2, #64	; 0x40
 800b5e4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b5e8:	2340      	movs	r3, #64	; 0x40
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	2180      	movs	r1, #128	; 0x80
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f001 f961 	bl	800c8b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2240      	movs	r2, #64	; 0x40
 800b5fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2201      	movs	r2, #1
 800b604:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2200      	movs	r2, #0
 800b60c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2200      	movs	r2, #0
 800b614:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b624:	2b00      	cmp	r3, #0
 800b626:	d009      	beq.n	800b63c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	6852      	ldr	r2, [r2, #4]
 800b634:	b2d2      	uxtb	r2, r2
 800b636:	4611      	mov	r1, r2
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	4798      	blx	r3
  }

  return USBD_OK;
 800b63c:	2300      	movs	r3, #0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3708      	adds	r7, #8
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b646:	b480      	push	{r7}
 800b648:	b083      	sub	sp, #12
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
 800b64e:	460b      	mov	r3, r1
 800b650:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	78fa      	ldrb	r2, [r7, #3]
 800b656:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	370c      	adds	r7, #12
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr

0800b666 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b666:	b480      	push	{r7}
 800b668:	b083      	sub	sp, #12
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2204      	movs	r2, #4
 800b67e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b682:	2300      	movs	r3, #0
}
 800b684:	4618      	mov	r0, r3
 800b686:	370c      	adds	r7, #12
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr

0800b690 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b690:	b480      	push	{r7}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b69e:	2b04      	cmp	r3, #4
 800b6a0:	d105      	bne.n	800b6ae <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b6ae:	2300      	movs	r3, #0
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	370c      	adds	r7, #12
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6ca:	2b03      	cmp	r3, #3
 800b6cc:	d10b      	bne.n	800b6e6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6d4:	69db      	ldr	r3, [r3, #28]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d005      	beq.n	800b6e6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6e0:	69db      	ldr	r3, [r3, #28]
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b6e6:	2300      	movs	r3, #0
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3708      	adds	r7, #8
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b706:	2b40      	cmp	r3, #64	; 0x40
 800b708:	d005      	beq.n	800b716 <USBD_StdDevReq+0x26>
 800b70a:	2b40      	cmp	r3, #64	; 0x40
 800b70c:	d84f      	bhi.n	800b7ae <USBD_StdDevReq+0xbe>
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d009      	beq.n	800b726 <USBD_StdDevReq+0x36>
 800b712:	2b20      	cmp	r3, #32
 800b714:	d14b      	bne.n	800b7ae <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b71c:	689b      	ldr	r3, [r3, #8]
 800b71e:	6839      	ldr	r1, [r7, #0]
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	4798      	blx	r3
      break;
 800b724:	e048      	b.n	800b7b8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	785b      	ldrb	r3, [r3, #1]
 800b72a:	2b09      	cmp	r3, #9
 800b72c:	d839      	bhi.n	800b7a2 <USBD_StdDevReq+0xb2>
 800b72e:	a201      	add	r2, pc, #4	; (adr r2, 800b734 <USBD_StdDevReq+0x44>)
 800b730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b734:	0800b785 	.word	0x0800b785
 800b738:	0800b799 	.word	0x0800b799
 800b73c:	0800b7a3 	.word	0x0800b7a3
 800b740:	0800b78f 	.word	0x0800b78f
 800b744:	0800b7a3 	.word	0x0800b7a3
 800b748:	0800b767 	.word	0x0800b767
 800b74c:	0800b75d 	.word	0x0800b75d
 800b750:	0800b7a3 	.word	0x0800b7a3
 800b754:	0800b77b 	.word	0x0800b77b
 800b758:	0800b771 	.word	0x0800b771
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b75c:	6839      	ldr	r1, [r7, #0]
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 f9dc 	bl	800bb1c <USBD_GetDescriptor>
          break;
 800b764:	e022      	b.n	800b7ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b766:	6839      	ldr	r1, [r7, #0]
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 fb3f 	bl	800bdec <USBD_SetAddress>
          break;
 800b76e:	e01d      	b.n	800b7ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b770:	6839      	ldr	r1, [r7, #0]
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f000 fb7e 	bl	800be74 <USBD_SetConfig>
          break;
 800b778:	e018      	b.n	800b7ac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b77a:	6839      	ldr	r1, [r7, #0]
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f000 fc07 	bl	800bf90 <USBD_GetConfig>
          break;
 800b782:	e013      	b.n	800b7ac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b784:	6839      	ldr	r1, [r7, #0]
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 fc37 	bl	800bffa <USBD_GetStatus>
          break;
 800b78c:	e00e      	b.n	800b7ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b78e:	6839      	ldr	r1, [r7, #0]
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 fc65 	bl	800c060 <USBD_SetFeature>
          break;
 800b796:	e009      	b.n	800b7ac <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b798:	6839      	ldr	r1, [r7, #0]
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 fc74 	bl	800c088 <USBD_ClrFeature>
          break;
 800b7a0:	e004      	b.n	800b7ac <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b7a2:	6839      	ldr	r1, [r7, #0]
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 fccd 	bl	800c144 <USBD_CtlError>
          break;
 800b7aa:	bf00      	nop
      }
      break;
 800b7ac:	e004      	b.n	800b7b8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b7ae:	6839      	ldr	r1, [r7, #0]
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 fcc7 	bl	800c144 <USBD_CtlError>
      break;
 800b7b6:	bf00      	nop
  }

  return ret;
 800b7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3710      	adds	r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop

0800b7c4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b084      	sub	sp, #16
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b7da:	2b40      	cmp	r3, #64	; 0x40
 800b7dc:	d005      	beq.n	800b7ea <USBD_StdItfReq+0x26>
 800b7de:	2b40      	cmp	r3, #64	; 0x40
 800b7e0:	d82e      	bhi.n	800b840 <USBD_StdItfReq+0x7c>
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d001      	beq.n	800b7ea <USBD_StdItfReq+0x26>
 800b7e6:	2b20      	cmp	r3, #32
 800b7e8:	d12a      	bne.n	800b840 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7f0:	3b01      	subs	r3, #1
 800b7f2:	2b02      	cmp	r3, #2
 800b7f4:	d81d      	bhi.n	800b832 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	889b      	ldrh	r3, [r3, #4]
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d813      	bhi.n	800b828 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b806:	689b      	ldr	r3, [r3, #8]
 800b808:	6839      	ldr	r1, [r7, #0]
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	4798      	blx	r3
 800b80e:	4603      	mov	r3, r0
 800b810:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	88db      	ldrh	r3, [r3, #6]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d110      	bne.n	800b83c <USBD_StdItfReq+0x78>
 800b81a:	7bfb      	ldrb	r3, [r7, #15]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d10d      	bne.n	800b83c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 fd58 	bl	800c2d6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b826:	e009      	b.n	800b83c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b828:	6839      	ldr	r1, [r7, #0]
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 fc8a 	bl	800c144 <USBD_CtlError>
          break;
 800b830:	e004      	b.n	800b83c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b832:	6839      	ldr	r1, [r7, #0]
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 fc85 	bl	800c144 <USBD_CtlError>
          break;
 800b83a:	e000      	b.n	800b83e <USBD_StdItfReq+0x7a>
          break;
 800b83c:	bf00      	nop
      }
      break;
 800b83e:	e004      	b.n	800b84a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b840:	6839      	ldr	r1, [r7, #0]
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 fc7e 	bl	800c144 <USBD_CtlError>
      break;
 800b848:	bf00      	nop
  }

  return USBD_OK;
 800b84a:	2300      	movs	r3, #0
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3710      	adds	r7, #16
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b084      	sub	sp, #16
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b85e:	2300      	movs	r3, #0
 800b860:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	889b      	ldrh	r3, [r3, #4]
 800b866:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b870:	2b40      	cmp	r3, #64	; 0x40
 800b872:	d007      	beq.n	800b884 <USBD_StdEPReq+0x30>
 800b874:	2b40      	cmp	r3, #64	; 0x40
 800b876:	f200 8146 	bhi.w	800bb06 <USBD_StdEPReq+0x2b2>
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00a      	beq.n	800b894 <USBD_StdEPReq+0x40>
 800b87e:	2b20      	cmp	r3, #32
 800b880:	f040 8141 	bne.w	800bb06 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b88a:	689b      	ldr	r3, [r3, #8]
 800b88c:	6839      	ldr	r1, [r7, #0]
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	4798      	blx	r3
      break;
 800b892:	e13d      	b.n	800bb10 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b89c:	2b20      	cmp	r3, #32
 800b89e:	d10a      	bne.n	800b8b6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	6839      	ldr	r1, [r7, #0]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	4798      	blx	r3
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b8b2:	7bfb      	ldrb	r3, [r7, #15]
 800b8b4:	e12d      	b.n	800bb12 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	785b      	ldrb	r3, [r3, #1]
 800b8ba:	2b03      	cmp	r3, #3
 800b8bc:	d007      	beq.n	800b8ce <USBD_StdEPReq+0x7a>
 800b8be:	2b03      	cmp	r3, #3
 800b8c0:	f300 811b 	bgt.w	800bafa <USBD_StdEPReq+0x2a6>
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d072      	beq.n	800b9ae <USBD_StdEPReq+0x15a>
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d03a      	beq.n	800b942 <USBD_StdEPReq+0xee>
 800b8cc:	e115      	b.n	800bafa <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8d4:	2b02      	cmp	r3, #2
 800b8d6:	d002      	beq.n	800b8de <USBD_StdEPReq+0x8a>
 800b8d8:	2b03      	cmp	r3, #3
 800b8da:	d015      	beq.n	800b908 <USBD_StdEPReq+0xb4>
 800b8dc:	e02b      	b.n	800b936 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8de:	7bbb      	ldrb	r3, [r7, #14]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d00c      	beq.n	800b8fe <USBD_StdEPReq+0xaa>
 800b8e4:	7bbb      	ldrb	r3, [r7, #14]
 800b8e6:	2b80      	cmp	r3, #128	; 0x80
 800b8e8:	d009      	beq.n	800b8fe <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b8ea:	7bbb      	ldrb	r3, [r7, #14]
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f001 f826 	bl	800c940 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b8f4:	2180      	movs	r1, #128	; 0x80
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f001 f822 	bl	800c940 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b8fc:	e020      	b.n	800b940 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b8fe:	6839      	ldr	r1, [r7, #0]
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 fc1f 	bl	800c144 <USBD_CtlError>
              break;
 800b906:	e01b      	b.n	800b940 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	885b      	ldrh	r3, [r3, #2]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d10e      	bne.n	800b92e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b910:	7bbb      	ldrb	r3, [r7, #14]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d00b      	beq.n	800b92e <USBD_StdEPReq+0xda>
 800b916:	7bbb      	ldrb	r3, [r7, #14]
 800b918:	2b80      	cmp	r3, #128	; 0x80
 800b91a:	d008      	beq.n	800b92e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	88db      	ldrh	r3, [r3, #6]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d104      	bne.n	800b92e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b924:	7bbb      	ldrb	r3, [r7, #14]
 800b926:	4619      	mov	r1, r3
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f001 f809 	bl	800c940 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 fcd1 	bl	800c2d6 <USBD_CtlSendStatus>

              break;
 800b934:	e004      	b.n	800b940 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b936:	6839      	ldr	r1, [r7, #0]
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 fc03 	bl	800c144 <USBD_CtlError>
              break;
 800b93e:	bf00      	nop
          }
          break;
 800b940:	e0e0      	b.n	800bb04 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b948:	2b02      	cmp	r3, #2
 800b94a:	d002      	beq.n	800b952 <USBD_StdEPReq+0xfe>
 800b94c:	2b03      	cmp	r3, #3
 800b94e:	d015      	beq.n	800b97c <USBD_StdEPReq+0x128>
 800b950:	e026      	b.n	800b9a0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b952:	7bbb      	ldrb	r3, [r7, #14]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d00c      	beq.n	800b972 <USBD_StdEPReq+0x11e>
 800b958:	7bbb      	ldrb	r3, [r7, #14]
 800b95a:	2b80      	cmp	r3, #128	; 0x80
 800b95c:	d009      	beq.n	800b972 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b95e:	7bbb      	ldrb	r3, [r7, #14]
 800b960:	4619      	mov	r1, r3
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 ffec 	bl	800c940 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b968:	2180      	movs	r1, #128	; 0x80
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 ffe8 	bl	800c940 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b970:	e01c      	b.n	800b9ac <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b972:	6839      	ldr	r1, [r7, #0]
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 fbe5 	bl	800c144 <USBD_CtlError>
              break;
 800b97a:	e017      	b.n	800b9ac <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	885b      	ldrh	r3, [r3, #2]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d112      	bne.n	800b9aa <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b984:	7bbb      	ldrb	r3, [r7, #14]
 800b986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d004      	beq.n	800b998 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b98e:	7bbb      	ldrb	r3, [r7, #14]
 800b990:	4619      	mov	r1, r3
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 fff3 	bl	800c97e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f000 fc9c 	bl	800c2d6 <USBD_CtlSendStatus>
              }
              break;
 800b99e:	e004      	b.n	800b9aa <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b9a0:	6839      	ldr	r1, [r7, #0]
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 fbce 	bl	800c144 <USBD_CtlError>
              break;
 800b9a8:	e000      	b.n	800b9ac <USBD_StdEPReq+0x158>
              break;
 800b9aa:	bf00      	nop
          }
          break;
 800b9ac:	e0aa      	b.n	800bb04 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9b4:	2b02      	cmp	r3, #2
 800b9b6:	d002      	beq.n	800b9be <USBD_StdEPReq+0x16a>
 800b9b8:	2b03      	cmp	r3, #3
 800b9ba:	d032      	beq.n	800ba22 <USBD_StdEPReq+0x1ce>
 800b9bc:	e097      	b.n	800baee <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9be:	7bbb      	ldrb	r3, [r7, #14]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d007      	beq.n	800b9d4 <USBD_StdEPReq+0x180>
 800b9c4:	7bbb      	ldrb	r3, [r7, #14]
 800b9c6:	2b80      	cmp	r3, #128	; 0x80
 800b9c8:	d004      	beq.n	800b9d4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b9ca:	6839      	ldr	r1, [r7, #0]
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 fbb9 	bl	800c144 <USBD_CtlError>
                break;
 800b9d2:	e091      	b.n	800baf8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	da0b      	bge.n	800b9f4 <USBD_StdEPReq+0x1a0>
 800b9dc:	7bbb      	ldrb	r3, [r7, #14]
 800b9de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	4413      	add	r3, r2
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	3310      	adds	r3, #16
 800b9ec:	687a      	ldr	r2, [r7, #4]
 800b9ee:	4413      	add	r3, r2
 800b9f0:	3304      	adds	r3, #4
 800b9f2:	e00b      	b.n	800ba0c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b9f4:	7bbb      	ldrb	r3, [r7, #14]
 800b9f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9fa:	4613      	mov	r3, r2
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	4413      	add	r3, r2
 800ba00:	009b      	lsls	r3, r3, #2
 800ba02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	4413      	add	r3, r2
 800ba0a:	3304      	adds	r3, #4
 800ba0c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	2200      	movs	r2, #0
 800ba12:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	2202      	movs	r2, #2
 800ba18:	4619      	mov	r1, r3
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f000 fbfd 	bl	800c21a <USBD_CtlSendData>
              break;
 800ba20:	e06a      	b.n	800baf8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ba22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	da11      	bge.n	800ba4e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ba2a:	7bbb      	ldrb	r3, [r7, #14]
 800ba2c:	f003 020f 	and.w	r2, r3, #15
 800ba30:	6879      	ldr	r1, [r7, #4]
 800ba32:	4613      	mov	r3, r2
 800ba34:	009b      	lsls	r3, r3, #2
 800ba36:	4413      	add	r3, r2
 800ba38:	009b      	lsls	r3, r3, #2
 800ba3a:	440b      	add	r3, r1
 800ba3c:	3318      	adds	r3, #24
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d117      	bne.n	800ba74 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ba44:	6839      	ldr	r1, [r7, #0]
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 fb7c 	bl	800c144 <USBD_CtlError>
                  break;
 800ba4c:	e054      	b.n	800baf8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ba4e:	7bbb      	ldrb	r3, [r7, #14]
 800ba50:	f003 020f 	and.w	r2, r3, #15
 800ba54:	6879      	ldr	r1, [r7, #4]
 800ba56:	4613      	mov	r3, r2
 800ba58:	009b      	lsls	r3, r3, #2
 800ba5a:	4413      	add	r3, r2
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	440b      	add	r3, r1
 800ba60:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d104      	bne.n	800ba74 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ba6a:	6839      	ldr	r1, [r7, #0]
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f000 fb69 	bl	800c144 <USBD_CtlError>
                  break;
 800ba72:	e041      	b.n	800baf8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	da0b      	bge.n	800ba94 <USBD_StdEPReq+0x240>
 800ba7c:	7bbb      	ldrb	r3, [r7, #14]
 800ba7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba82:	4613      	mov	r3, r2
 800ba84:	009b      	lsls	r3, r3, #2
 800ba86:	4413      	add	r3, r2
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	3310      	adds	r3, #16
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	4413      	add	r3, r2
 800ba90:	3304      	adds	r3, #4
 800ba92:	e00b      	b.n	800baac <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba94:	7bbb      	ldrb	r3, [r7, #14]
 800ba96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba9a:	4613      	mov	r3, r2
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	4413      	add	r3, r2
 800baa0:	009b      	lsls	r3, r3, #2
 800baa2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	4413      	add	r3, r2
 800baaa:	3304      	adds	r3, #4
 800baac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800baae:	7bbb      	ldrb	r3, [r7, #14]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d002      	beq.n	800baba <USBD_StdEPReq+0x266>
 800bab4:	7bbb      	ldrb	r3, [r7, #14]
 800bab6:	2b80      	cmp	r3, #128	; 0x80
 800bab8:	d103      	bne.n	800bac2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	2200      	movs	r2, #0
 800babe:	601a      	str	r2, [r3, #0]
 800bac0:	e00e      	b.n	800bae0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800bac2:	7bbb      	ldrb	r3, [r7, #14]
 800bac4:	4619      	mov	r1, r3
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f000 ff78 	bl	800c9bc <USBD_LL_IsStallEP>
 800bacc:	4603      	mov	r3, r0
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d003      	beq.n	800bada <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	2201      	movs	r2, #1
 800bad6:	601a      	str	r2, [r3, #0]
 800bad8:	e002      	b.n	800bae0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	2200      	movs	r2, #0
 800bade:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	2202      	movs	r2, #2
 800bae4:	4619      	mov	r1, r3
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 fb97 	bl	800c21a <USBD_CtlSendData>
              break;
 800baec:	e004      	b.n	800baf8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800baee:	6839      	ldr	r1, [r7, #0]
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f000 fb27 	bl	800c144 <USBD_CtlError>
              break;
 800baf6:	bf00      	nop
          }
          break;
 800baf8:	e004      	b.n	800bb04 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800bafa:	6839      	ldr	r1, [r7, #0]
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 fb21 	bl	800c144 <USBD_CtlError>
          break;
 800bb02:	bf00      	nop
      }
      break;
 800bb04:	e004      	b.n	800bb10 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800bb06:	6839      	ldr	r1, [r7, #0]
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 fb1b 	bl	800c144 <USBD_CtlError>
      break;
 800bb0e:	bf00      	nop
  }

  return ret;
 800bb10:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3710      	adds	r7, #16
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
	...

0800bb1c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb26:	2300      	movs	r3, #0
 800bb28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	885b      	ldrh	r3, [r3, #2]
 800bb36:	0a1b      	lsrs	r3, r3, #8
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	3b01      	subs	r3, #1
 800bb3c:	2b06      	cmp	r3, #6
 800bb3e:	f200 8128 	bhi.w	800bd92 <USBD_GetDescriptor+0x276>
 800bb42:	a201      	add	r2, pc, #4	; (adr r2, 800bb48 <USBD_GetDescriptor+0x2c>)
 800bb44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb48:	0800bb65 	.word	0x0800bb65
 800bb4c:	0800bb7d 	.word	0x0800bb7d
 800bb50:	0800bbbd 	.word	0x0800bbbd
 800bb54:	0800bd93 	.word	0x0800bd93
 800bb58:	0800bd93 	.word	0x0800bd93
 800bb5c:	0800bd33 	.word	0x0800bd33
 800bb60:	0800bd5f 	.word	0x0800bd5f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	7c12      	ldrb	r2, [r2, #16]
 800bb70:	f107 0108 	add.w	r1, r7, #8
 800bb74:	4610      	mov	r0, r2
 800bb76:	4798      	blx	r3
 800bb78:	60f8      	str	r0, [r7, #12]
      break;
 800bb7a:	e112      	b.n	800bda2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	7c1b      	ldrb	r3, [r3, #16]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d10d      	bne.n	800bba0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb8c:	f107 0208 	add.w	r2, r7, #8
 800bb90:	4610      	mov	r0, r2
 800bb92:	4798      	blx	r3
 800bb94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	2202      	movs	r2, #2
 800bb9c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bb9e:	e100      	b.n	800bda2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba8:	f107 0208 	add.w	r2, r7, #8
 800bbac:	4610      	mov	r0, r2
 800bbae:	4798      	blx	r3
 800bbb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	2202      	movs	r2, #2
 800bbb8:	701a      	strb	r2, [r3, #0]
      break;
 800bbba:	e0f2      	b.n	800bda2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	885b      	ldrh	r3, [r3, #2]
 800bbc0:	b2db      	uxtb	r3, r3
 800bbc2:	2b05      	cmp	r3, #5
 800bbc4:	f200 80ac 	bhi.w	800bd20 <USBD_GetDescriptor+0x204>
 800bbc8:	a201      	add	r2, pc, #4	; (adr r2, 800bbd0 <USBD_GetDescriptor+0xb4>)
 800bbca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbce:	bf00      	nop
 800bbd0:	0800bbe9 	.word	0x0800bbe9
 800bbd4:	0800bc1d 	.word	0x0800bc1d
 800bbd8:	0800bc51 	.word	0x0800bc51
 800bbdc:	0800bc85 	.word	0x0800bc85
 800bbe0:	0800bcb9 	.word	0x0800bcb9
 800bbe4:	0800bced 	.word	0x0800bced
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d00b      	beq.n	800bc0c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bbfa:	685b      	ldr	r3, [r3, #4]
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	7c12      	ldrb	r2, [r2, #16]
 800bc00:	f107 0108 	add.w	r1, r7, #8
 800bc04:	4610      	mov	r0, r2
 800bc06:	4798      	blx	r3
 800bc08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc0a:	e091      	b.n	800bd30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc0c:	6839      	ldr	r1, [r7, #0]
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 fa98 	bl	800c144 <USBD_CtlError>
            err++;
 800bc14:	7afb      	ldrb	r3, [r7, #11]
 800bc16:	3301      	adds	r3, #1
 800bc18:	72fb      	strb	r3, [r7, #11]
          break;
 800bc1a:	e089      	b.n	800bd30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc22:	689b      	ldr	r3, [r3, #8]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d00b      	beq.n	800bc40 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	7c12      	ldrb	r2, [r2, #16]
 800bc34:	f107 0108 	add.w	r1, r7, #8
 800bc38:	4610      	mov	r0, r2
 800bc3a:	4798      	blx	r3
 800bc3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc3e:	e077      	b.n	800bd30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc40:	6839      	ldr	r1, [r7, #0]
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 fa7e 	bl	800c144 <USBD_CtlError>
            err++;
 800bc48:	7afb      	ldrb	r3, [r7, #11]
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	72fb      	strb	r3, [r7, #11]
          break;
 800bc4e:	e06f      	b.n	800bd30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d00b      	beq.n	800bc74 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc62:	68db      	ldr	r3, [r3, #12]
 800bc64:	687a      	ldr	r2, [r7, #4]
 800bc66:	7c12      	ldrb	r2, [r2, #16]
 800bc68:	f107 0108 	add.w	r1, r7, #8
 800bc6c:	4610      	mov	r0, r2
 800bc6e:	4798      	blx	r3
 800bc70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc72:	e05d      	b.n	800bd30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc74:	6839      	ldr	r1, [r7, #0]
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 fa64 	bl	800c144 <USBD_CtlError>
            err++;
 800bc7c:	7afb      	ldrb	r3, [r7, #11]
 800bc7e:	3301      	adds	r3, #1
 800bc80:	72fb      	strb	r3, [r7, #11]
          break;
 800bc82:	e055      	b.n	800bd30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc8a:	691b      	ldr	r3, [r3, #16]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00b      	beq.n	800bca8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc96:	691b      	ldr	r3, [r3, #16]
 800bc98:	687a      	ldr	r2, [r7, #4]
 800bc9a:	7c12      	ldrb	r2, [r2, #16]
 800bc9c:	f107 0108 	add.w	r1, r7, #8
 800bca0:	4610      	mov	r0, r2
 800bca2:	4798      	blx	r3
 800bca4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bca6:	e043      	b.n	800bd30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bca8:	6839      	ldr	r1, [r7, #0]
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 fa4a 	bl	800c144 <USBD_CtlError>
            err++;
 800bcb0:	7afb      	ldrb	r3, [r7, #11]
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	72fb      	strb	r3, [r7, #11]
          break;
 800bcb6:	e03b      	b.n	800bd30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bcbe:	695b      	ldr	r3, [r3, #20]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d00b      	beq.n	800bcdc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bcca:	695b      	ldr	r3, [r3, #20]
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	7c12      	ldrb	r2, [r2, #16]
 800bcd0:	f107 0108 	add.w	r1, r7, #8
 800bcd4:	4610      	mov	r0, r2
 800bcd6:	4798      	blx	r3
 800bcd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcda:	e029      	b.n	800bd30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bcdc:	6839      	ldr	r1, [r7, #0]
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 fa30 	bl	800c144 <USBD_CtlError>
            err++;
 800bce4:	7afb      	ldrb	r3, [r7, #11]
 800bce6:	3301      	adds	r3, #1
 800bce8:	72fb      	strb	r3, [r7, #11]
          break;
 800bcea:	e021      	b.n	800bd30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bcf2:	699b      	ldr	r3, [r3, #24]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d00b      	beq.n	800bd10 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bcfe:	699b      	ldr	r3, [r3, #24]
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	7c12      	ldrb	r2, [r2, #16]
 800bd04:	f107 0108 	add.w	r1, r7, #8
 800bd08:	4610      	mov	r0, r2
 800bd0a:	4798      	blx	r3
 800bd0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd0e:	e00f      	b.n	800bd30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd10:	6839      	ldr	r1, [r7, #0]
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 fa16 	bl	800c144 <USBD_CtlError>
            err++;
 800bd18:	7afb      	ldrb	r3, [r7, #11]
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	72fb      	strb	r3, [r7, #11]
          break;
 800bd1e:	e007      	b.n	800bd30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800bd20:	6839      	ldr	r1, [r7, #0]
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 fa0e 	bl	800c144 <USBD_CtlError>
          err++;
 800bd28:	7afb      	ldrb	r3, [r7, #11]
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800bd2e:	e038      	b.n	800bda2 <USBD_GetDescriptor+0x286>
 800bd30:	e037      	b.n	800bda2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	7c1b      	ldrb	r3, [r3, #16]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d109      	bne.n	800bd4e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd42:	f107 0208 	add.w	r2, r7, #8
 800bd46:	4610      	mov	r0, r2
 800bd48:	4798      	blx	r3
 800bd4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd4c:	e029      	b.n	800bda2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bd4e:	6839      	ldr	r1, [r7, #0]
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f000 f9f7 	bl	800c144 <USBD_CtlError>
        err++;
 800bd56:	7afb      	ldrb	r3, [r7, #11]
 800bd58:	3301      	adds	r3, #1
 800bd5a:	72fb      	strb	r3, [r7, #11]
      break;
 800bd5c:	e021      	b.n	800bda2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	7c1b      	ldrb	r3, [r3, #16]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d10d      	bne.n	800bd82 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd6e:	f107 0208 	add.w	r2, r7, #8
 800bd72:	4610      	mov	r0, r2
 800bd74:	4798      	blx	r3
 800bd76:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	2207      	movs	r2, #7
 800bd7e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd80:	e00f      	b.n	800bda2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bd82:	6839      	ldr	r1, [r7, #0]
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 f9dd 	bl	800c144 <USBD_CtlError>
        err++;
 800bd8a:	7afb      	ldrb	r3, [r7, #11]
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	72fb      	strb	r3, [r7, #11]
      break;
 800bd90:	e007      	b.n	800bda2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bd92:	6839      	ldr	r1, [r7, #0]
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f000 f9d5 	bl	800c144 <USBD_CtlError>
      err++;
 800bd9a:	7afb      	ldrb	r3, [r7, #11]
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	72fb      	strb	r3, [r7, #11]
      break;
 800bda0:	bf00      	nop
  }

  if (err != 0U)
 800bda2:	7afb      	ldrb	r3, [r7, #11]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d11c      	bne.n	800bde2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800bda8:	893b      	ldrh	r3, [r7, #8]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d011      	beq.n	800bdd2 <USBD_GetDescriptor+0x2b6>
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	88db      	ldrh	r3, [r3, #6]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d00d      	beq.n	800bdd2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	88da      	ldrh	r2, [r3, #6]
 800bdba:	893b      	ldrh	r3, [r7, #8]
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	bf28      	it	cs
 800bdc0:	4613      	movcs	r3, r2
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bdc6:	893b      	ldrh	r3, [r7, #8]
 800bdc8:	461a      	mov	r2, r3
 800bdca:	68f9      	ldr	r1, [r7, #12]
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 fa24 	bl	800c21a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	88db      	ldrh	r3, [r3, #6]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d104      	bne.n	800bde4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 fa7b 	bl	800c2d6 <USBD_CtlSendStatus>
 800bde0:	e000      	b.n	800bde4 <USBD_GetDescriptor+0x2c8>
    return;
 800bde2:	bf00      	nop
    }
  }
}
 800bde4:	3710      	adds	r7, #16
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop

0800bdec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	889b      	ldrh	r3, [r3, #4]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d130      	bne.n	800be60 <USBD_SetAddress+0x74>
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	88db      	ldrh	r3, [r3, #6]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d12c      	bne.n	800be60 <USBD_SetAddress+0x74>
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	885b      	ldrh	r3, [r3, #2]
 800be0a:	2b7f      	cmp	r3, #127	; 0x7f
 800be0c:	d828      	bhi.n	800be60 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	885b      	ldrh	r3, [r3, #2]
 800be12:	b2db      	uxtb	r3, r3
 800be14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be20:	2b03      	cmp	r3, #3
 800be22:	d104      	bne.n	800be2e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800be24:	6839      	ldr	r1, [r7, #0]
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 f98c 	bl	800c144 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be2c:	e01d      	b.n	800be6a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	7bfa      	ldrb	r2, [r7, #15]
 800be32:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800be36:	7bfb      	ldrb	r3, [r7, #15]
 800be38:	4619      	mov	r1, r3
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 fdeb 	bl	800ca16 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 fa48 	bl	800c2d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800be46:	7bfb      	ldrb	r3, [r7, #15]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d004      	beq.n	800be56 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2202      	movs	r2, #2
 800be50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be54:	e009      	b.n	800be6a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2201      	movs	r2, #1
 800be5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be5e:	e004      	b.n	800be6a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800be60:	6839      	ldr	r1, [r7, #0]
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 f96e 	bl	800c144 <USBD_CtlError>
  }
}
 800be68:	bf00      	nop
 800be6a:	bf00      	nop
 800be6c:	3710      	adds	r7, #16
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
	...

0800be74 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	885b      	ldrh	r3, [r3, #2]
 800be82:	b2da      	uxtb	r2, r3
 800be84:	4b41      	ldr	r3, [pc, #260]	; (800bf8c <USBD_SetConfig+0x118>)
 800be86:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800be88:	4b40      	ldr	r3, [pc, #256]	; (800bf8c <USBD_SetConfig+0x118>)
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	2b01      	cmp	r3, #1
 800be8e:	d904      	bls.n	800be9a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800be90:	6839      	ldr	r1, [r7, #0]
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 f956 	bl	800c144 <USBD_CtlError>
 800be98:	e075      	b.n	800bf86 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bea0:	2b02      	cmp	r3, #2
 800bea2:	d002      	beq.n	800beaa <USBD_SetConfig+0x36>
 800bea4:	2b03      	cmp	r3, #3
 800bea6:	d023      	beq.n	800bef0 <USBD_SetConfig+0x7c>
 800bea8:	e062      	b.n	800bf70 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800beaa:	4b38      	ldr	r3, [pc, #224]	; (800bf8c <USBD_SetConfig+0x118>)
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d01a      	beq.n	800bee8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800beb2:	4b36      	ldr	r3, [pc, #216]	; (800bf8c <USBD_SetConfig+0x118>)
 800beb4:	781b      	ldrb	r3, [r3, #0]
 800beb6:	461a      	mov	r2, r3
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2203      	movs	r2, #3
 800bec0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bec4:	4b31      	ldr	r3, [pc, #196]	; (800bf8c <USBD_SetConfig+0x118>)
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	4619      	mov	r1, r3
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f7ff f9e5 	bl	800b29a <USBD_SetClassConfig>
 800bed0:	4603      	mov	r3, r0
 800bed2:	2b02      	cmp	r3, #2
 800bed4:	d104      	bne.n	800bee0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800bed6:	6839      	ldr	r1, [r7, #0]
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 f933 	bl	800c144 <USBD_CtlError>
            return;
 800bede:	e052      	b.n	800bf86 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f000 f9f8 	bl	800c2d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bee6:	e04e      	b.n	800bf86 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 f9f4 	bl	800c2d6 <USBD_CtlSendStatus>
        break;
 800beee:	e04a      	b.n	800bf86 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800bef0:	4b26      	ldr	r3, [pc, #152]	; (800bf8c <USBD_SetConfig+0x118>)
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d112      	bne.n	800bf1e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2202      	movs	r2, #2
 800befc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800bf00:	4b22      	ldr	r3, [pc, #136]	; (800bf8c <USBD_SetConfig+0x118>)
 800bf02:	781b      	ldrb	r3, [r3, #0]
 800bf04:	461a      	mov	r2, r3
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800bf0a:	4b20      	ldr	r3, [pc, #128]	; (800bf8c <USBD_SetConfig+0x118>)
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	4619      	mov	r1, r3
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f7ff f9e1 	bl	800b2d8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f000 f9dd 	bl	800c2d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bf1c:	e033      	b.n	800bf86 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800bf1e:	4b1b      	ldr	r3, [pc, #108]	; (800bf8c <USBD_SetConfig+0x118>)
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	461a      	mov	r2, r3
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	685b      	ldr	r3, [r3, #4]
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d01d      	beq.n	800bf68 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	4619      	mov	r1, r3
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f7ff f9cf 	bl	800b2d8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800bf3a:	4b14      	ldr	r3, [pc, #80]	; (800bf8c <USBD_SetConfig+0x118>)
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	461a      	mov	r2, r3
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bf44:	4b11      	ldr	r3, [pc, #68]	; (800bf8c <USBD_SetConfig+0x118>)
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	4619      	mov	r1, r3
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f7ff f9a5 	bl	800b29a <USBD_SetClassConfig>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b02      	cmp	r3, #2
 800bf54:	d104      	bne.n	800bf60 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800bf56:	6839      	ldr	r1, [r7, #0]
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 f8f3 	bl	800c144 <USBD_CtlError>
            return;
 800bf5e:	e012      	b.n	800bf86 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f000 f9b8 	bl	800c2d6 <USBD_CtlSendStatus>
        break;
 800bf66:	e00e      	b.n	800bf86 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 f9b4 	bl	800c2d6 <USBD_CtlSendStatus>
        break;
 800bf6e:	e00a      	b.n	800bf86 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800bf70:	6839      	ldr	r1, [r7, #0]
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 f8e6 	bl	800c144 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800bf78:	4b04      	ldr	r3, [pc, #16]	; (800bf8c <USBD_SetConfig+0x118>)
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f7ff f9aa 	bl	800b2d8 <USBD_ClrClassConfig>
        break;
 800bf84:	bf00      	nop
    }
  }
}
 800bf86:	3708      	adds	r7, #8
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	200006c0 	.word	0x200006c0

0800bf90 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	88db      	ldrh	r3, [r3, #6]
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d004      	beq.n	800bfac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bfa2:	6839      	ldr	r1, [r7, #0]
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 f8cd 	bl	800c144 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bfaa:	e022      	b.n	800bff2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfb2:	2b02      	cmp	r3, #2
 800bfb4:	dc02      	bgt.n	800bfbc <USBD_GetConfig+0x2c>
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	dc03      	bgt.n	800bfc2 <USBD_GetConfig+0x32>
 800bfba:	e015      	b.n	800bfe8 <USBD_GetConfig+0x58>
 800bfbc:	2b03      	cmp	r3, #3
 800bfbe:	d00b      	beq.n	800bfd8 <USBD_GetConfig+0x48>
 800bfc0:	e012      	b.n	800bfe8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	3308      	adds	r3, #8
 800bfcc:	2201      	movs	r2, #1
 800bfce:	4619      	mov	r1, r3
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 f922 	bl	800c21a <USBD_CtlSendData>
        break;
 800bfd6:	e00c      	b.n	800bff2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	3304      	adds	r3, #4
 800bfdc:	2201      	movs	r2, #1
 800bfde:	4619      	mov	r1, r3
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f000 f91a 	bl	800c21a <USBD_CtlSendData>
        break;
 800bfe6:	e004      	b.n	800bff2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800bfe8:	6839      	ldr	r1, [r7, #0]
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f000 f8aa 	bl	800c144 <USBD_CtlError>
        break;
 800bff0:	bf00      	nop
}
 800bff2:	bf00      	nop
 800bff4:	3708      	adds	r7, #8
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}

0800bffa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bffa:	b580      	push	{r7, lr}
 800bffc:	b082      	sub	sp, #8
 800bffe:	af00      	add	r7, sp, #0
 800c000:	6078      	str	r0, [r7, #4]
 800c002:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c00a:	3b01      	subs	r3, #1
 800c00c:	2b02      	cmp	r3, #2
 800c00e:	d81e      	bhi.n	800c04e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	88db      	ldrh	r3, [r3, #6]
 800c014:	2b02      	cmp	r3, #2
 800c016:	d004      	beq.n	800c022 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c018:	6839      	ldr	r1, [r7, #0]
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 f892 	bl	800c144 <USBD_CtlError>
        break;
 800c020:	e01a      	b.n	800c058 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2201      	movs	r2, #1
 800c026:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d005      	beq.n	800c03e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	68db      	ldr	r3, [r3, #12]
 800c036:	f043 0202 	orr.w	r2, r3, #2
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	330c      	adds	r3, #12
 800c042:	2202      	movs	r2, #2
 800c044:	4619      	mov	r1, r3
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 f8e7 	bl	800c21a <USBD_CtlSendData>
      break;
 800c04c:	e004      	b.n	800c058 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c04e:	6839      	ldr	r1, [r7, #0]
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f000 f877 	bl	800c144 <USBD_CtlError>
      break;
 800c056:	bf00      	nop
  }
}
 800c058:	bf00      	nop
 800c05a:	3708      	adds	r7, #8
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b082      	sub	sp, #8
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	885b      	ldrh	r3, [r3, #2]
 800c06e:	2b01      	cmp	r3, #1
 800c070:	d106      	bne.n	800c080 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2201      	movs	r2, #1
 800c076:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f000 f92b 	bl	800c2d6 <USBD_CtlSendStatus>
  }
}
 800c080:	bf00      	nop
 800c082:	3708      	adds	r7, #8
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c098:	3b01      	subs	r3, #1
 800c09a:	2b02      	cmp	r3, #2
 800c09c:	d80b      	bhi.n	800c0b6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	885b      	ldrh	r3, [r3, #2]
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d10c      	bne.n	800c0c0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f000 f911 	bl	800c2d6 <USBD_CtlSendStatus>
      }
      break;
 800c0b4:	e004      	b.n	800c0c0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c0b6:	6839      	ldr	r1, [r7, #0]
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f000 f843 	bl	800c144 <USBD_CtlError>
      break;
 800c0be:	e000      	b.n	800c0c2 <USBD_ClrFeature+0x3a>
      break;
 800c0c0:	bf00      	nop
  }
}
 800c0c2:	bf00      	nop
 800c0c4:	3708      	adds	r7, #8
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}

0800c0ca <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c0ca:	b480      	push	{r7}
 800c0cc:	b083      	sub	sp, #12
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	6078      	str	r0, [r7, #4]
 800c0d2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	781a      	ldrb	r2, [r3, #0]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	785a      	ldrb	r2, [r3, #1]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	3302      	adds	r3, #2
 800c0e8:	781b      	ldrb	r3, [r3, #0]
 800c0ea:	b29a      	uxth	r2, r3
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	3303      	adds	r3, #3
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	b29b      	uxth	r3, r3
 800c0f4:	021b      	lsls	r3, r3, #8
 800c0f6:	b29b      	uxth	r3, r3
 800c0f8:	4413      	add	r3, r2
 800c0fa:	b29a      	uxth	r2, r3
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	3304      	adds	r3, #4
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	b29a      	uxth	r2, r3
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	3305      	adds	r3, #5
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	b29b      	uxth	r3, r3
 800c110:	021b      	lsls	r3, r3, #8
 800c112:	b29b      	uxth	r3, r3
 800c114:	4413      	add	r3, r2
 800c116:	b29a      	uxth	r2, r3
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	3306      	adds	r3, #6
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	b29a      	uxth	r2, r3
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	3307      	adds	r3, #7
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	b29b      	uxth	r3, r3
 800c12c:	021b      	lsls	r3, r3, #8
 800c12e:	b29b      	uxth	r3, r3
 800c130:	4413      	add	r3, r2
 800c132:	b29a      	uxth	r2, r3
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	80da      	strh	r2, [r3, #6]

}
 800c138:	bf00      	nop
 800c13a:	370c      	adds	r7, #12
 800c13c:	46bd      	mov	sp, r7
 800c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c142:	4770      	bx	lr

0800c144 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c14e:	2180      	movs	r1, #128	; 0x80
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f000 fbf5 	bl	800c940 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c156:	2100      	movs	r1, #0
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 fbf1 	bl	800c940 <USBD_LL_StallEP>
}
 800c15e:	bf00      	nop
 800c160:	3708      	adds	r7, #8
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c166:	b580      	push	{r7, lr}
 800c168:	b086      	sub	sp, #24
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	60f8      	str	r0, [r7, #12]
 800c16e:	60b9      	str	r1, [r7, #8]
 800c170:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c172:	2300      	movs	r3, #0
 800c174:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d032      	beq.n	800c1e2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c17c:	68f8      	ldr	r0, [r7, #12]
 800c17e:	f000 f834 	bl	800c1ea <USBD_GetLen>
 800c182:	4603      	mov	r3, r0
 800c184:	3301      	adds	r3, #1
 800c186:	b29b      	uxth	r3, r3
 800c188:	005b      	lsls	r3, r3, #1
 800c18a:	b29a      	uxth	r2, r3
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c190:	7dfb      	ldrb	r3, [r7, #23]
 800c192:	1c5a      	adds	r2, r3, #1
 800c194:	75fa      	strb	r2, [r7, #23]
 800c196:	461a      	mov	r2, r3
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	4413      	add	r3, r2
 800c19c:	687a      	ldr	r2, [r7, #4]
 800c19e:	7812      	ldrb	r2, [r2, #0]
 800c1a0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c1a2:	7dfb      	ldrb	r3, [r7, #23]
 800c1a4:	1c5a      	adds	r2, r3, #1
 800c1a6:	75fa      	strb	r2, [r7, #23]
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	2203      	movs	r2, #3
 800c1b0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c1b2:	e012      	b.n	800c1da <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	1c5a      	adds	r2, r3, #1
 800c1b8:	60fa      	str	r2, [r7, #12]
 800c1ba:	7dfa      	ldrb	r2, [r7, #23]
 800c1bc:	1c51      	adds	r1, r2, #1
 800c1be:	75f9      	strb	r1, [r7, #23]
 800c1c0:	4611      	mov	r1, r2
 800c1c2:	68ba      	ldr	r2, [r7, #8]
 800c1c4:	440a      	add	r2, r1
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c1ca:	7dfb      	ldrb	r3, [r7, #23]
 800c1cc:	1c5a      	adds	r2, r3, #1
 800c1ce:	75fa      	strb	r2, [r7, #23]
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	4413      	add	r3, r2
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d1e8      	bne.n	800c1b4 <USBD_GetString+0x4e>
    }
  }
}
 800c1e2:	bf00      	nop
 800c1e4:	3718      	adds	r7, #24
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c1ea:	b480      	push	{r7}
 800c1ec:	b085      	sub	sp, #20
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c1f6:	e005      	b.n	800c204 <USBD_GetLen+0x1a>
  {
    len++;
 800c1f8:	7bfb      	ldrb	r3, [r7, #15]
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	3301      	adds	r3, #1
 800c202:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d1f5      	bne.n	800c1f8 <USBD_GetLen+0xe>
  }

  return len;
 800c20c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3714      	adds	r7, #20
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr

0800c21a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c21a:	b580      	push	{r7, lr}
 800c21c:	b084      	sub	sp, #16
 800c21e:	af00      	add	r7, sp, #0
 800c220:	60f8      	str	r0, [r7, #12]
 800c222:	60b9      	str	r1, [r7, #8]
 800c224:	4613      	mov	r3, r2
 800c226:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2202      	movs	r2, #2
 800c22c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c230:	88fa      	ldrh	r2, [r7, #6]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c236:	88fa      	ldrh	r2, [r7, #6]
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c23c:	88fb      	ldrh	r3, [r7, #6]
 800c23e:	68ba      	ldr	r2, [r7, #8]
 800c240:	2100      	movs	r1, #0
 800c242:	68f8      	ldr	r0, [r7, #12]
 800c244:	f000 fc06 	bl	800ca54 <USBD_LL_Transmit>

  return USBD_OK;
 800c248:	2300      	movs	r3, #0
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3710      	adds	r7, #16
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}

0800c252 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c252:	b580      	push	{r7, lr}
 800c254:	b084      	sub	sp, #16
 800c256:	af00      	add	r7, sp, #0
 800c258:	60f8      	str	r0, [r7, #12]
 800c25a:	60b9      	str	r1, [r7, #8]
 800c25c:	4613      	mov	r3, r2
 800c25e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c260:	88fb      	ldrh	r3, [r7, #6]
 800c262:	68ba      	ldr	r2, [r7, #8]
 800c264:	2100      	movs	r1, #0
 800c266:	68f8      	ldr	r0, [r7, #12]
 800c268:	f000 fbf4 	bl	800ca54 <USBD_LL_Transmit>

  return USBD_OK;
 800c26c:	2300      	movs	r3, #0
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3710      	adds	r7, #16
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}

0800c276 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c276:	b580      	push	{r7, lr}
 800c278:	b084      	sub	sp, #16
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	60f8      	str	r0, [r7, #12]
 800c27e:	60b9      	str	r1, [r7, #8]
 800c280:	4613      	mov	r3, r2
 800c282:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2203      	movs	r2, #3
 800c288:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c28c:	88fa      	ldrh	r2, [r7, #6]
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c294:	88fa      	ldrh	r2, [r7, #6]
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c29c:	88fb      	ldrh	r3, [r7, #6]
 800c29e:	68ba      	ldr	r2, [r7, #8]
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	68f8      	ldr	r0, [r7, #12]
 800c2a4:	f000 fbf9 	bl	800ca9a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c2a8:	2300      	movs	r3, #0
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}

0800c2b2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c2b2:	b580      	push	{r7, lr}
 800c2b4:	b084      	sub	sp, #16
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	60f8      	str	r0, [r7, #12]
 800c2ba:	60b9      	str	r1, [r7, #8]
 800c2bc:	4613      	mov	r3, r2
 800c2be:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c2c0:	88fb      	ldrh	r3, [r7, #6]
 800c2c2:	68ba      	ldr	r2, [r7, #8]
 800c2c4:	2100      	movs	r1, #0
 800c2c6:	68f8      	ldr	r0, [r7, #12]
 800c2c8:	f000 fbe7 	bl	800ca9a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c2cc:	2300      	movs	r3, #0
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3710      	adds	r7, #16
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c2d6:	b580      	push	{r7, lr}
 800c2d8:	b082      	sub	sp, #8
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2204      	movs	r2, #4
 800c2e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	2100      	movs	r1, #0
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 fbb1 	bl	800ca54 <USBD_LL_Transmit>

  return USBD_OK;
 800c2f2:	2300      	movs	r3, #0
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3708      	adds	r7, #8
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2205      	movs	r2, #5
 800c308:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c30c:	2300      	movs	r3, #0
 800c30e:	2200      	movs	r2, #0
 800c310:	2100      	movs	r1, #0
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 fbc1 	bl	800ca9a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c318:	2300      	movs	r3, #0
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3708      	adds	r7, #8
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
	...

0800c324 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c328:	2200      	movs	r2, #0
 800c32a:	4912      	ldr	r1, [pc, #72]	; (800c374 <MX_USB_DEVICE_Init+0x50>)
 800c32c:	4812      	ldr	r0, [pc, #72]	; (800c378 <MX_USB_DEVICE_Init+0x54>)
 800c32e:	f7fe ff58 	bl	800b1e2 <USBD_Init>
 800c332:	4603      	mov	r3, r0
 800c334:	2b00      	cmp	r3, #0
 800c336:	d001      	beq.n	800c33c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c338:	f7f5 f9f0 	bl	800171c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800c33c:	490f      	ldr	r1, [pc, #60]	; (800c37c <MX_USB_DEVICE_Init+0x58>)
 800c33e:	480e      	ldr	r0, [pc, #56]	; (800c378 <MX_USB_DEVICE_Init+0x54>)
 800c340:	f7fe ff7a 	bl	800b238 <USBD_RegisterClass>
 800c344:	4603      	mov	r3, r0
 800c346:	2b00      	cmp	r3, #0
 800c348:	d001      	beq.n	800c34e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c34a:	f7f5 f9e7 	bl	800171c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800c34e:	490c      	ldr	r1, [pc, #48]	; (800c380 <MX_USB_DEVICE_Init+0x5c>)
 800c350:	4809      	ldr	r0, [pc, #36]	; (800c378 <MX_USB_DEVICE_Init+0x54>)
 800c352:	f7fe ff2f 	bl	800b1b4 <USBD_CUSTOM_HID_RegisterInterface>
 800c356:	4603      	mov	r3, r0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d001      	beq.n	800c360 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c35c:	f7f5 f9de 	bl	800171c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c360:	4805      	ldr	r0, [pc, #20]	; (800c378 <MX_USB_DEVICE_Init+0x54>)
 800c362:	f7fe ff83 	bl	800b26c <USBD_Start>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d001      	beq.n	800c370 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c36c:	f7f5 f9d6 	bl	800171c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c370:	bf00      	nop
 800c372:	bd80      	pop	{r7, pc}
 800c374:	20000114 	.word	0x20000114
 800c378:	200006c4 	.word	0x200006c4
 800c37c:	2000000c 	.word	0x2000000c
 800c380:	20000104 	.word	0x20000104

0800c384 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800c384:	b480      	push	{r7}
 800c386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c388:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800c394:	b480      	push	{r7}
 800c396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c398:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t *state)
{
 800c3a4:	b4f0      	push	{r4, r5, r6, r7}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */

	memcpy(report_buffer, state, 64);
 800c3ac:	4a0e      	ldr	r2, [pc, #56]	; (800c3e8 <CUSTOM_HID_OutEvent_FS+0x44>)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	4610      	mov	r0, r2
 800c3b2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800c3b6:	4602      	mov	r2, r0
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	f8d1 c000 	ldr.w	ip, [r1]
 800c3be:	684e      	ldr	r6, [r1, #4]
 800c3c0:	688d      	ldr	r5, [r1, #8]
 800c3c2:	68c9      	ldr	r1, [r1, #12]
 800c3c4:	f8c2 c000 	str.w	ip, [r2]
 800c3c8:	6056      	str	r6, [r2, #4]
 800c3ca:	6095      	str	r5, [r2, #8]
 800c3cc:	60d1      	str	r1, [r2, #12]
 800c3ce:	3310      	adds	r3, #16
 800c3d0:	3010      	adds	r0, #16
 800c3d2:	42a3      	cmp	r3, r4
 800c3d4:	d1ef      	bne.n	800c3b6 <CUSTOM_HID_OutEvent_FS+0x12>

	flag_rx = 1;
 800c3d6:	4b05      	ldr	r3, [pc, #20]	; (800c3ec <CUSTOM_HID_OutEvent_FS+0x48>)
 800c3d8:	2201      	movs	r2, #1
 800c3da:	701a      	strb	r2, [r3, #0]

	return (USBD_OK);
 800c3dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3708      	adds	r7, #8
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bcf0      	pop	{r4, r5, r6, r7}
 800c3e6:	4770      	bx	lr
 800c3e8:	20000670 	.word	0x20000670
 800c3ec:	200006b0 	.word	0x200006b0

0800c3f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b083      	sub	sp, #12
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	6039      	str	r1, [r7, #0]
 800c3fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	2212      	movs	r2, #18
 800c400:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c402:	4b03      	ldr	r3, [pc, #12]	; (800c410 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c404:	4618      	mov	r0, r3
 800c406:	370c      	adds	r7, #12
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr
 800c410:	20000130 	.word	0x20000130

0800c414 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c414:	b480      	push	{r7}
 800c416:	b083      	sub	sp, #12
 800c418:	af00      	add	r7, sp, #0
 800c41a:	4603      	mov	r3, r0
 800c41c:	6039      	str	r1, [r7, #0]
 800c41e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	2204      	movs	r2, #4
 800c424:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c426:	4b03      	ldr	r3, [pc, #12]	; (800c434 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c428:	4618      	mov	r0, r3
 800c42a:	370c      	adds	r7, #12
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr
 800c434:	20000144 	.word	0x20000144

0800c438 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	4603      	mov	r3, r0
 800c440:	6039      	str	r1, [r7, #0]
 800c442:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c444:	79fb      	ldrb	r3, [r7, #7]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d105      	bne.n	800c456 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c44a:	683a      	ldr	r2, [r7, #0]
 800c44c:	4907      	ldr	r1, [pc, #28]	; (800c46c <USBD_FS_ProductStrDescriptor+0x34>)
 800c44e:	4808      	ldr	r0, [pc, #32]	; (800c470 <USBD_FS_ProductStrDescriptor+0x38>)
 800c450:	f7ff fe89 	bl	800c166 <USBD_GetString>
 800c454:	e004      	b.n	800c460 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c456:	683a      	ldr	r2, [r7, #0]
 800c458:	4904      	ldr	r1, [pc, #16]	; (800c46c <USBD_FS_ProductStrDescriptor+0x34>)
 800c45a:	4805      	ldr	r0, [pc, #20]	; (800c470 <USBD_FS_ProductStrDescriptor+0x38>)
 800c45c:	f7ff fe83 	bl	800c166 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c460:	4b02      	ldr	r3, [pc, #8]	; (800c46c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c462:	4618      	mov	r0, r3
 800c464:	3708      	adds	r7, #8
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	20000988 	.word	0x20000988
 800c470:	0800f660 	.word	0x0800f660

0800c474 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
 800c47a:	4603      	mov	r3, r0
 800c47c:	6039      	str	r1, [r7, #0]
 800c47e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c480:	683a      	ldr	r2, [r7, #0]
 800c482:	4904      	ldr	r1, [pc, #16]	; (800c494 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c484:	4804      	ldr	r0, [pc, #16]	; (800c498 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c486:	f7ff fe6e 	bl	800c166 <USBD_GetString>
  return USBD_StrDesc;
 800c48a:	4b02      	ldr	r3, [pc, #8]	; (800c494 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3708      	adds	r7, #8
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}
 800c494:	20000988 	.word	0x20000988
 800c498:	0800f680 	.word	0x0800f680

0800c49c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	6039      	str	r1, [r7, #0]
 800c4a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	221a      	movs	r2, #26
 800c4ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c4ae:	f000 f843 	bl	800c538 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c4b2:	4b02      	ldr	r3, [pc, #8]	; (800c4bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3708      	adds	r7, #8
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}
 800c4bc:	20000148 	.word	0x20000148

0800c4c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	6039      	str	r1, [r7, #0]
 800c4ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c4cc:	79fb      	ldrb	r3, [r7, #7]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d105      	bne.n	800c4de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c4d2:	683a      	ldr	r2, [r7, #0]
 800c4d4:	4907      	ldr	r1, [pc, #28]	; (800c4f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c4d6:	4808      	ldr	r0, [pc, #32]	; (800c4f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c4d8:	f7ff fe45 	bl	800c166 <USBD_GetString>
 800c4dc:	e004      	b.n	800c4e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c4de:	683a      	ldr	r2, [r7, #0]
 800c4e0:	4904      	ldr	r1, [pc, #16]	; (800c4f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c4e2:	4805      	ldr	r0, [pc, #20]	; (800c4f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c4e4:	f7ff fe3f 	bl	800c166 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4e8:	4b02      	ldr	r3, [pc, #8]	; (800c4f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3708      	adds	r7, #8
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	20000988 	.word	0x20000988
 800c4f8:	0800f694 	.word	0x0800f694

0800c4fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
 800c502:	4603      	mov	r3, r0
 800c504:	6039      	str	r1, [r7, #0]
 800c506:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c508:	79fb      	ldrb	r3, [r7, #7]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d105      	bne.n	800c51a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c50e:	683a      	ldr	r2, [r7, #0]
 800c510:	4907      	ldr	r1, [pc, #28]	; (800c530 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c512:	4808      	ldr	r0, [pc, #32]	; (800c534 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c514:	f7ff fe27 	bl	800c166 <USBD_GetString>
 800c518:	e004      	b.n	800c524 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c51a:	683a      	ldr	r2, [r7, #0]
 800c51c:	4904      	ldr	r1, [pc, #16]	; (800c530 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c51e:	4805      	ldr	r0, [pc, #20]	; (800c534 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c520:	f7ff fe21 	bl	800c166 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c524:	4b02      	ldr	r3, [pc, #8]	; (800c530 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c526:	4618      	mov	r0, r3
 800c528:	3708      	adds	r7, #8
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	20000988 	.word	0x20000988
 800c534:	0800f6a8 	.word	0x0800f6a8

0800c538 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b084      	sub	sp, #16
 800c53c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c53e:	4b0f      	ldr	r3, [pc, #60]	; (800c57c <Get_SerialNum+0x44>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c544:	4b0e      	ldr	r3, [pc, #56]	; (800c580 <Get_SerialNum+0x48>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c54a:	4b0e      	ldr	r3, [pc, #56]	; (800c584 <Get_SerialNum+0x4c>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c550:	68fa      	ldr	r2, [r7, #12]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	4413      	add	r3, r2
 800c556:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d009      	beq.n	800c572 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c55e:	2208      	movs	r2, #8
 800c560:	4909      	ldr	r1, [pc, #36]	; (800c588 <Get_SerialNum+0x50>)
 800c562:	68f8      	ldr	r0, [r7, #12]
 800c564:	f000 f814 	bl	800c590 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c568:	2204      	movs	r2, #4
 800c56a:	4908      	ldr	r1, [pc, #32]	; (800c58c <Get_SerialNum+0x54>)
 800c56c:	68b8      	ldr	r0, [r7, #8]
 800c56e:	f000 f80f 	bl	800c590 <IntToUnicode>
  }
}
 800c572:	bf00      	nop
 800c574:	3710      	adds	r7, #16
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	1ffff7ac 	.word	0x1ffff7ac
 800c580:	1ffff7b0 	.word	0x1ffff7b0
 800c584:	1ffff7b4 	.word	0x1ffff7b4
 800c588:	2000014a 	.word	0x2000014a
 800c58c:	2000015a 	.word	0x2000015a

0800c590 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c590:	b480      	push	{r7}
 800c592:	b087      	sub	sp, #28
 800c594:	af00      	add	r7, sp, #0
 800c596:	60f8      	str	r0, [r7, #12]
 800c598:	60b9      	str	r1, [r7, #8]
 800c59a:	4613      	mov	r3, r2
 800c59c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	75fb      	strb	r3, [r7, #23]
 800c5a6:	e027      	b.n	800c5f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	0f1b      	lsrs	r3, r3, #28
 800c5ac:	2b09      	cmp	r3, #9
 800c5ae:	d80b      	bhi.n	800c5c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	0f1b      	lsrs	r3, r3, #28
 800c5b4:	b2da      	uxtb	r2, r3
 800c5b6:	7dfb      	ldrb	r3, [r7, #23]
 800c5b8:	005b      	lsls	r3, r3, #1
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	440b      	add	r3, r1
 800c5c0:	3230      	adds	r2, #48	; 0x30
 800c5c2:	b2d2      	uxtb	r2, r2
 800c5c4:	701a      	strb	r2, [r3, #0]
 800c5c6:	e00a      	b.n	800c5de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	0f1b      	lsrs	r3, r3, #28
 800c5cc:	b2da      	uxtb	r2, r3
 800c5ce:	7dfb      	ldrb	r3, [r7, #23]
 800c5d0:	005b      	lsls	r3, r3, #1
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	440b      	add	r3, r1
 800c5d8:	3237      	adds	r2, #55	; 0x37
 800c5da:	b2d2      	uxtb	r2, r2
 800c5dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	011b      	lsls	r3, r3, #4
 800c5e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c5e4:	7dfb      	ldrb	r3, [r7, #23]
 800c5e6:	005b      	lsls	r3, r3, #1
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	68ba      	ldr	r2, [r7, #8]
 800c5ec:	4413      	add	r3, r2
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c5f2:	7dfb      	ldrb	r3, [r7, #23]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	75fb      	strb	r3, [r7, #23]
 800c5f8:	7dfa      	ldrb	r2, [r7, #23]
 800c5fa:	79fb      	ldrb	r3, [r7, #7]
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	d3d3      	bcc.n	800c5a8 <IntToUnicode+0x18>
  }
}
 800c600:	bf00      	nop
 800c602:	bf00      	nop
 800c604:	371c      	adds	r7, #28
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr
	...

0800c610 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b08a      	sub	sp, #40	; 0x28
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c618:	f107 0314 	add.w	r3, r7, #20
 800c61c:	2200      	movs	r2, #0
 800c61e:	601a      	str	r2, [r3, #0]
 800c620:	605a      	str	r2, [r3, #4]
 800c622:	609a      	str	r2, [r3, #8]
 800c624:	60da      	str	r2, [r3, #12]
 800c626:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4a1c      	ldr	r2, [pc, #112]	; (800c6a0 <HAL_PCD_MspInit+0x90>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d131      	bne.n	800c696 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c632:	4b1c      	ldr	r3, [pc, #112]	; (800c6a4 <HAL_PCD_MspInit+0x94>)
 800c634:	695b      	ldr	r3, [r3, #20]
 800c636:	4a1b      	ldr	r2, [pc, #108]	; (800c6a4 <HAL_PCD_MspInit+0x94>)
 800c638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c63c:	6153      	str	r3, [r2, #20]
 800c63e:	4b19      	ldr	r3, [pc, #100]	; (800c6a4 <HAL_PCD_MspInit+0x94>)
 800c640:	695b      	ldr	r3, [r3, #20]
 800c642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c646:	613b      	str	r3, [r7, #16]
 800c648:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800c64a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c64e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c650:	2302      	movs	r3, #2
 800c652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c654:	2300      	movs	r3, #0
 800c656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c658:	2303      	movs	r3, #3
 800c65a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800c65c:	230e      	movs	r3, #14
 800c65e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c660:	f107 0314 	add.w	r3, r7, #20
 800c664:	4619      	mov	r1, r3
 800c666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c66a:	f7f6 f841 	bl	80026f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c66e:	4b0d      	ldr	r3, [pc, #52]	; (800c6a4 <HAL_PCD_MspInit+0x94>)
 800c670:	69db      	ldr	r3, [r3, #28]
 800c672:	4a0c      	ldr	r2, [pc, #48]	; (800c6a4 <HAL_PCD_MspInit+0x94>)
 800c674:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c678:	61d3      	str	r3, [r2, #28]
 800c67a:	4b0a      	ldr	r3, [pc, #40]	; (800c6a4 <HAL_PCD_MspInit+0x94>)
 800c67c:	69db      	ldr	r3, [r3, #28]
 800c67e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c682:	60fb      	str	r3, [r7, #12]
 800c684:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800c686:	2200      	movs	r2, #0
 800c688:	2100      	movs	r1, #0
 800c68a:	2014      	movs	r0, #20
 800c68c:	f7f5 fff9 	bl	8002682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800c690:	2014      	movs	r0, #20
 800c692:	f7f6 f812 	bl	80026ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c696:	bf00      	nop
 800c698:	3728      	adds	r7, #40	; 0x28
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	40005c00 	.word	0x40005c00
 800c6a4:	40021000 	.word	0x40021000

0800c6a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c6bc:	4619      	mov	r1, r3
 800c6be:	4610      	mov	r0, r2
 800c6c0:	f7fe fe1d 	bl	800b2fe <USBD_LL_SetupStage>
}
 800c6c4:	bf00      	nop
 800c6c6:	3708      	adds	r7, #8
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	460b      	mov	r3, r1
 800c6d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c6de:	78fa      	ldrb	r2, [r7, #3]
 800c6e0:	6879      	ldr	r1, [r7, #4]
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	4413      	add	r3, r2
 800c6e8:	00db      	lsls	r3, r3, #3
 800c6ea:	440b      	add	r3, r1
 800c6ec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c6f0:	681a      	ldr	r2, [r3, #0]
 800c6f2:	78fb      	ldrb	r3, [r7, #3]
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	f7fe fe4f 	bl	800b398 <USBD_LL_DataOutStage>
}
 800c6fa:	bf00      	nop
 800c6fc:	3708      	adds	r7, #8
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}

0800c702 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c702:	b580      	push	{r7, lr}
 800c704:	b082      	sub	sp, #8
 800c706:	af00      	add	r7, sp, #0
 800c708:	6078      	str	r0, [r7, #4]
 800c70a:	460b      	mov	r3, r1
 800c70c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c714:	78fa      	ldrb	r2, [r7, #3]
 800c716:	6879      	ldr	r1, [r7, #4]
 800c718:	4613      	mov	r3, r2
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	4413      	add	r3, r2
 800c71e:	00db      	lsls	r3, r3, #3
 800c720:	440b      	add	r3, r1
 800c722:	333c      	adds	r3, #60	; 0x3c
 800c724:	681a      	ldr	r2, [r3, #0]
 800c726:	78fb      	ldrb	r3, [r7, #3]
 800c728:	4619      	mov	r1, r3
 800c72a:	f7fe fea6 	bl	800b47a <USBD_LL_DataInStage>
}
 800c72e:	bf00      	nop
 800c730:	3708      	adds	r7, #8
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}

0800c736 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c736:	b580      	push	{r7, lr}
 800c738:	b082      	sub	sp, #8
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c744:	4618      	mov	r0, r3
 800c746:	f7fe ffb9 	bl	800b6bc <USBD_LL_SOF>
}
 800c74a:	bf00      	nop
 800c74c:	3708      	adds	r7, #8
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}

0800c752 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c752:	b580      	push	{r7, lr}
 800c754:	b084      	sub	sp, #16
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c75a:	2301      	movs	r3, #1
 800c75c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	689b      	ldr	r3, [r3, #8]
 800c762:	2b02      	cmp	r3, #2
 800c764:	d001      	beq.n	800c76a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c766:	f7f4 ffd9 	bl	800171c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c770:	7bfa      	ldrb	r2, [r7, #15]
 800c772:	4611      	mov	r1, r2
 800c774:	4618      	mov	r0, r3
 800c776:	f7fe ff66 	bl	800b646 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c780:	4618      	mov	r0, r3
 800c782:	f7fe ff1f 	bl	800b5c4 <USBD_LL_Reset>
}
 800c786:	bf00      	nop
 800c788:	3710      	adds	r7, #16
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
	...

0800c790 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f7fe ff61 	bl	800b666 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	699b      	ldr	r3, [r3, #24]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d005      	beq.n	800c7b8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c7ac:	4b04      	ldr	r3, [pc, #16]	; (800c7c0 <HAL_PCD_SuspendCallback+0x30>)
 800c7ae:	691b      	ldr	r3, [r3, #16]
 800c7b0:	4a03      	ldr	r2, [pc, #12]	; (800c7c0 <HAL_PCD_SuspendCallback+0x30>)
 800c7b2:	f043 0306 	orr.w	r3, r3, #6
 800c7b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c7b8:	bf00      	nop
 800c7ba:	3708      	adds	r7, #8
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}
 800c7c0:	e000ed00 	.word	0xe000ed00

0800c7c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7fe ff5c 	bl	800b690 <USBD_LL_Resume>
}
 800c7d8:	bf00      	nop
 800c7da:	3708      	adds	r7, #8
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}

0800c7e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c7e8:	4a23      	ldr	r2, [pc, #140]	; (800c878 <USBD_LL_Init+0x98>)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	4a21      	ldr	r2, [pc, #132]	; (800c878 <USBD_LL_Init+0x98>)
 800c7f4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c7f8:	4b1f      	ldr	r3, [pc, #124]	; (800c878 <USBD_LL_Init+0x98>)
 800c7fa:	4a20      	ldr	r2, [pc, #128]	; (800c87c <USBD_LL_Init+0x9c>)
 800c7fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c7fe:	4b1e      	ldr	r3, [pc, #120]	; (800c878 <USBD_LL_Init+0x98>)
 800c800:	2208      	movs	r2, #8
 800c802:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c804:	4b1c      	ldr	r3, [pc, #112]	; (800c878 <USBD_LL_Init+0x98>)
 800c806:	2202      	movs	r2, #2
 800c808:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c80a:	4b1b      	ldr	r3, [pc, #108]	; (800c878 <USBD_LL_Init+0x98>)
 800c80c:	2202      	movs	r2, #2
 800c80e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c810:	4b19      	ldr	r3, [pc, #100]	; (800c878 <USBD_LL_Init+0x98>)
 800c812:	2200      	movs	r2, #0
 800c814:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c816:	4b18      	ldr	r3, [pc, #96]	; (800c878 <USBD_LL_Init+0x98>)
 800c818:	2200      	movs	r2, #0
 800c81a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c81c:	4816      	ldr	r0, [pc, #88]	; (800c878 <USBD_LL_Init+0x98>)
 800c81e:	f7f6 feb4 	bl	800358a <HAL_PCD_Init>
 800c822:	4603      	mov	r3, r0
 800c824:	2b00      	cmp	r3, #0
 800c826:	d001      	beq.n	800c82c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c828:	f7f4 ff78 	bl	800171c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c832:	2318      	movs	r3, #24
 800c834:	2200      	movs	r2, #0
 800c836:	2100      	movs	r1, #0
 800c838:	f7f8 fb25 	bl	8004e86 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c842:	2358      	movs	r3, #88	; 0x58
 800c844:	2200      	movs	r2, #0
 800c846:	2180      	movs	r1, #128	; 0x80
 800c848:	f7f8 fb1d 	bl	8004e86 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c852:	2398      	movs	r3, #152	; 0x98
 800c854:	2200      	movs	r2, #0
 800c856:	2181      	movs	r1, #129	; 0x81
 800c858:	f7f8 fb15 	bl	8004e86 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c862:	23d8      	movs	r3, #216	; 0xd8
 800c864:	2200      	movs	r2, #0
 800c866:	2101      	movs	r1, #1
 800c868:	f7f8 fb0d 	bl	8004e86 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800c86c:	2300      	movs	r3, #0
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3708      	adds	r7, #8
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	bf00      	nop
 800c878:	20000b88 	.word	0x20000b88
 800c87c:	40005c00 	.word	0x40005c00

0800c880 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c888:	2300      	movs	r3, #0
 800c88a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c88c:	2300      	movs	r3, #0
 800c88e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c896:	4618      	mov	r0, r3
 800c898:	f7f6 ff49 	bl	800372e <HAL_PCD_Start>
 800c89c:	4603      	mov	r3, r0
 800c89e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8a0:	7bfb      	ldrb	r3, [r7, #15]
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f000 f940 	bl	800cb28 <USBD_Get_USB_Status>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3710      	adds	r7, #16
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}

0800c8b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c8b6:	b580      	push	{r7, lr}
 800c8b8:	b084      	sub	sp, #16
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
 800c8be:	4608      	mov	r0, r1
 800c8c0:	4611      	mov	r1, r2
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	70fb      	strb	r3, [r7, #3]
 800c8c8:	460b      	mov	r3, r1
 800c8ca:	70bb      	strb	r3, [r7, #2]
 800c8cc:	4613      	mov	r3, r2
 800c8ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c8de:	78bb      	ldrb	r3, [r7, #2]
 800c8e0:	883a      	ldrh	r2, [r7, #0]
 800c8e2:	78f9      	ldrb	r1, [r7, #3]
 800c8e4:	f7f7 f842 	bl	800396c <HAL_PCD_EP_Open>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8ec:	7bfb      	ldrb	r3, [r7, #15]
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f000 f91a 	bl	800cb28 <USBD_Get_USB_Status>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3710      	adds	r7, #16
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}

0800c902 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c902:	b580      	push	{r7, lr}
 800c904:	b084      	sub	sp, #16
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]
 800c90a:	460b      	mov	r3, r1
 800c90c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c90e:	2300      	movs	r3, #0
 800c910:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c912:	2300      	movs	r3, #0
 800c914:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c91c:	78fa      	ldrb	r2, [r7, #3]
 800c91e:	4611      	mov	r1, r2
 800c920:	4618      	mov	r0, r3
 800c922:	f7f7 f880 	bl	8003a26 <HAL_PCD_EP_Close>
 800c926:	4603      	mov	r3, r0
 800c928:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c92a:	7bfb      	ldrb	r3, [r7, #15]
 800c92c:	4618      	mov	r0, r3
 800c92e:	f000 f8fb 	bl	800cb28 <USBD_Get_USB_Status>
 800c932:	4603      	mov	r3, r0
 800c934:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c936:	7bbb      	ldrb	r3, [r7, #14]
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3710      	adds	r7, #16
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b084      	sub	sp, #16
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	460b      	mov	r3, r1
 800c94a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c94c:	2300      	movs	r3, #0
 800c94e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c950:	2300      	movs	r3, #0
 800c952:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c95a:	78fa      	ldrb	r2, [r7, #3]
 800c95c:	4611      	mov	r1, r2
 800c95e:	4618      	mov	r0, r3
 800c960:	f7f7 f911 	bl	8003b86 <HAL_PCD_EP_SetStall>
 800c964:	4603      	mov	r3, r0
 800c966:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c968:	7bfb      	ldrb	r3, [r7, #15]
 800c96a:	4618      	mov	r0, r3
 800c96c:	f000 f8dc 	bl	800cb28 <USBD_Get_USB_Status>
 800c970:	4603      	mov	r3, r0
 800c972:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c974:	7bbb      	ldrb	r3, [r7, #14]
}
 800c976:	4618      	mov	r0, r3
 800c978:	3710      	adds	r7, #16
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}

0800c97e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c97e:	b580      	push	{r7, lr}
 800c980:	b084      	sub	sp, #16
 800c982:	af00      	add	r7, sp, #0
 800c984:	6078      	str	r0, [r7, #4]
 800c986:	460b      	mov	r3, r1
 800c988:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c98a:	2300      	movs	r3, #0
 800c98c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c98e:	2300      	movs	r3, #0
 800c990:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c998:	78fa      	ldrb	r2, [r7, #3]
 800c99a:	4611      	mov	r1, r2
 800c99c:	4618      	mov	r0, r3
 800c99e:	f7f7 f944 	bl	8003c2a <HAL_PCD_EP_ClrStall>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9a6:	7bfb      	ldrb	r3, [r7, #15]
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f000 f8bd 	bl	800cb28 <USBD_Get_USB_Status>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3710      	adds	r7, #16
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b085      	sub	sp, #20
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	460b      	mov	r3, r1
 800c9c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c9ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c9d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	da0c      	bge.n	800c9f2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c9d8:	78fb      	ldrb	r3, [r7, #3]
 800c9da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9de:	68f9      	ldr	r1, [r7, #12]
 800c9e0:	1c5a      	adds	r2, r3, #1
 800c9e2:	4613      	mov	r3, r2
 800c9e4:	009b      	lsls	r3, r3, #2
 800c9e6:	4413      	add	r3, r2
 800c9e8:	00db      	lsls	r3, r3, #3
 800c9ea:	440b      	add	r3, r1
 800c9ec:	3302      	adds	r3, #2
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	e00b      	b.n	800ca0a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c9f2:	78fb      	ldrb	r3, [r7, #3]
 800c9f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c9f8:	68f9      	ldr	r1, [r7, #12]
 800c9fa:	4613      	mov	r3, r2
 800c9fc:	009b      	lsls	r3, r3, #2
 800c9fe:	4413      	add	r3, r2
 800ca00:	00db      	lsls	r3, r3, #3
 800ca02:	440b      	add	r3, r1
 800ca04:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ca08:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3714      	adds	r7, #20
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr

0800ca16 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b084      	sub	sp, #16
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
 800ca1e:	460b      	mov	r3, r1
 800ca20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca22:	2300      	movs	r3, #0
 800ca24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca26:	2300      	movs	r3, #0
 800ca28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca30:	78fa      	ldrb	r2, [r7, #3]
 800ca32:	4611      	mov	r1, r2
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7f6 ff74 	bl	8003922 <HAL_PCD_SetAddress>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca3e:	7bfb      	ldrb	r3, [r7, #15]
 800ca40:	4618      	mov	r0, r3
 800ca42:	f000 f871 	bl	800cb28 <USBD_Get_USB_Status>
 800ca46:	4603      	mov	r3, r0
 800ca48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3710      	adds	r7, #16
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b086      	sub	sp, #24
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	60f8      	str	r0, [r7, #12]
 800ca5c:	607a      	str	r2, [r7, #4]
 800ca5e:	461a      	mov	r2, r3
 800ca60:	460b      	mov	r3, r1
 800ca62:	72fb      	strb	r3, [r7, #11]
 800ca64:	4613      	mov	r3, r2
 800ca66:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ca76:	893b      	ldrh	r3, [r7, #8]
 800ca78:	7af9      	ldrb	r1, [r7, #11]
 800ca7a:	687a      	ldr	r2, [r7, #4]
 800ca7c:	f7f7 f84c 	bl	8003b18 <HAL_PCD_EP_Transmit>
 800ca80:	4603      	mov	r3, r0
 800ca82:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca84:	7dfb      	ldrb	r3, [r7, #23]
 800ca86:	4618      	mov	r0, r3
 800ca88:	f000 f84e 	bl	800cb28 <USBD_Get_USB_Status>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ca90:	7dbb      	ldrb	r3, [r7, #22]
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3718      	adds	r7, #24
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}

0800ca9a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ca9a:	b580      	push	{r7, lr}
 800ca9c:	b086      	sub	sp, #24
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	60f8      	str	r0, [r7, #12]
 800caa2:	607a      	str	r2, [r7, #4]
 800caa4:	461a      	mov	r2, r3
 800caa6:	460b      	mov	r3, r1
 800caa8:	72fb      	strb	r3, [r7, #11]
 800caaa:	4613      	mov	r3, r2
 800caac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800caae:	2300      	movs	r3, #0
 800cab0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cab2:	2300      	movs	r3, #0
 800cab4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cabc:	893b      	ldrh	r3, [r7, #8]
 800cabe:	7af9      	ldrb	r1, [r7, #11]
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	f7f6 fff8 	bl	8003ab6 <HAL_PCD_EP_Receive>
 800cac6:	4603      	mov	r3, r0
 800cac8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800caca:	7dfb      	ldrb	r3, [r7, #23]
 800cacc:	4618      	mov	r0, r3
 800cace:	f000 f82b 	bl	800cb28 <USBD_Get_USB_Status>
 800cad2:	4603      	mov	r3, r0
 800cad4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cad6:	7dbb      	ldrb	r3, [r7, #22]
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3718      	adds	r7, #24
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b083      	sub	sp, #12
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800cae8:	4b03      	ldr	r3, [pc, #12]	; (800caf8 <USBD_static_malloc+0x18>)
}
 800caea:	4618      	mov	r0, r3
 800caec:	370c      	adds	r7, #12
 800caee:	46bd      	mov	sp, r7
 800caf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf4:	4770      	bx	lr
 800caf6:	bf00      	nop
 800caf8:	20000e74 	.word	0x20000e74

0800cafc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b083      	sub	sp, #12
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]

}
 800cb04:	bf00      	nop
 800cb06:	370c      	adds	r7, #12
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr

0800cb10 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	460b      	mov	r3, r1
 800cb1a:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800cb1c:	bf00      	nop
 800cb1e:	370c      	adds	r7, #12
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr

0800cb28 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b085      	sub	sp, #20
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	4603      	mov	r3, r0
 800cb30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb32:	2300      	movs	r3, #0
 800cb34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cb36:	79fb      	ldrb	r3, [r7, #7]
 800cb38:	2b03      	cmp	r3, #3
 800cb3a:	d817      	bhi.n	800cb6c <USBD_Get_USB_Status+0x44>
 800cb3c:	a201      	add	r2, pc, #4	; (adr r2, 800cb44 <USBD_Get_USB_Status+0x1c>)
 800cb3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb42:	bf00      	nop
 800cb44:	0800cb55 	.word	0x0800cb55
 800cb48:	0800cb5b 	.word	0x0800cb5b
 800cb4c:	0800cb61 	.word	0x0800cb61
 800cb50:	0800cb67 	.word	0x0800cb67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cb54:	2300      	movs	r3, #0
 800cb56:	73fb      	strb	r3, [r7, #15]
    break;
 800cb58:	e00b      	b.n	800cb72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb5a:	2302      	movs	r3, #2
 800cb5c:	73fb      	strb	r3, [r7, #15]
    break;
 800cb5e:	e008      	b.n	800cb72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb60:	2301      	movs	r3, #1
 800cb62:	73fb      	strb	r3, [r7, #15]
    break;
 800cb64:	e005      	b.n	800cb72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cb66:	2302      	movs	r3, #2
 800cb68:	73fb      	strb	r3, [r7, #15]
    break;
 800cb6a:	e002      	b.n	800cb72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cb6c:	2302      	movs	r3, #2
 800cb6e:	73fb      	strb	r3, [r7, #15]
    break;
 800cb70:	bf00      	nop
  }
  return usb_status;
 800cb72:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3714      	adds	r7, #20
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr

0800cb80 <__errno>:
 800cb80:	4b01      	ldr	r3, [pc, #4]	; (800cb88 <__errno+0x8>)
 800cb82:	6818      	ldr	r0, [r3, #0]
 800cb84:	4770      	bx	lr
 800cb86:	bf00      	nop
 800cb88:	20000164 	.word	0x20000164

0800cb8c <__libc_init_array>:
 800cb8c:	b570      	push	{r4, r5, r6, lr}
 800cb8e:	4d0d      	ldr	r5, [pc, #52]	; (800cbc4 <__libc_init_array+0x38>)
 800cb90:	4c0d      	ldr	r4, [pc, #52]	; (800cbc8 <__libc_init_array+0x3c>)
 800cb92:	1b64      	subs	r4, r4, r5
 800cb94:	10a4      	asrs	r4, r4, #2
 800cb96:	2600      	movs	r6, #0
 800cb98:	42a6      	cmp	r6, r4
 800cb9a:	d109      	bne.n	800cbb0 <__libc_init_array+0x24>
 800cb9c:	4d0b      	ldr	r5, [pc, #44]	; (800cbcc <__libc_init_array+0x40>)
 800cb9e:	4c0c      	ldr	r4, [pc, #48]	; (800cbd0 <__libc_init_array+0x44>)
 800cba0:	f002 fd4c 	bl	800f63c <_init>
 800cba4:	1b64      	subs	r4, r4, r5
 800cba6:	10a4      	asrs	r4, r4, #2
 800cba8:	2600      	movs	r6, #0
 800cbaa:	42a6      	cmp	r6, r4
 800cbac:	d105      	bne.n	800cbba <__libc_init_array+0x2e>
 800cbae:	bd70      	pop	{r4, r5, r6, pc}
 800cbb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbb4:	4798      	blx	r3
 800cbb6:	3601      	adds	r6, #1
 800cbb8:	e7ee      	b.n	800cb98 <__libc_init_array+0xc>
 800cbba:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbbe:	4798      	blx	r3
 800cbc0:	3601      	adds	r6, #1
 800cbc2:	e7f2      	b.n	800cbaa <__libc_init_array+0x1e>
 800cbc4:	0800fad4 	.word	0x0800fad4
 800cbc8:	0800fad4 	.word	0x0800fad4
 800cbcc:	0800fad4 	.word	0x0800fad4
 800cbd0:	0800fad8 	.word	0x0800fad8

0800cbd4 <memset>:
 800cbd4:	4402      	add	r2, r0
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d100      	bne.n	800cbde <memset+0xa>
 800cbdc:	4770      	bx	lr
 800cbde:	f803 1b01 	strb.w	r1, [r3], #1
 800cbe2:	e7f9      	b.n	800cbd8 <memset+0x4>

0800cbe4 <__cvt>:
 800cbe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cbe8:	ec55 4b10 	vmov	r4, r5, d0
 800cbec:	2d00      	cmp	r5, #0
 800cbee:	460e      	mov	r6, r1
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	462b      	mov	r3, r5
 800cbf4:	bfbb      	ittet	lt
 800cbf6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cbfa:	461d      	movlt	r5, r3
 800cbfc:	2300      	movge	r3, #0
 800cbfe:	232d      	movlt	r3, #45	; 0x2d
 800cc00:	700b      	strb	r3, [r1, #0]
 800cc02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc04:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cc08:	4691      	mov	r9, r2
 800cc0a:	f023 0820 	bic.w	r8, r3, #32
 800cc0e:	bfbc      	itt	lt
 800cc10:	4622      	movlt	r2, r4
 800cc12:	4614      	movlt	r4, r2
 800cc14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cc18:	d005      	beq.n	800cc26 <__cvt+0x42>
 800cc1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cc1e:	d100      	bne.n	800cc22 <__cvt+0x3e>
 800cc20:	3601      	adds	r6, #1
 800cc22:	2102      	movs	r1, #2
 800cc24:	e000      	b.n	800cc28 <__cvt+0x44>
 800cc26:	2103      	movs	r1, #3
 800cc28:	ab03      	add	r3, sp, #12
 800cc2a:	9301      	str	r3, [sp, #4]
 800cc2c:	ab02      	add	r3, sp, #8
 800cc2e:	9300      	str	r3, [sp, #0]
 800cc30:	ec45 4b10 	vmov	d0, r4, r5
 800cc34:	4653      	mov	r3, sl
 800cc36:	4632      	mov	r2, r6
 800cc38:	f000 fda2 	bl	800d780 <_dtoa_r>
 800cc3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cc40:	4607      	mov	r7, r0
 800cc42:	d102      	bne.n	800cc4a <__cvt+0x66>
 800cc44:	f019 0f01 	tst.w	r9, #1
 800cc48:	d022      	beq.n	800cc90 <__cvt+0xac>
 800cc4a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cc4e:	eb07 0906 	add.w	r9, r7, r6
 800cc52:	d110      	bne.n	800cc76 <__cvt+0x92>
 800cc54:	783b      	ldrb	r3, [r7, #0]
 800cc56:	2b30      	cmp	r3, #48	; 0x30
 800cc58:	d10a      	bne.n	800cc70 <__cvt+0x8c>
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	4620      	mov	r0, r4
 800cc60:	4629      	mov	r1, r5
 800cc62:	f7f3 ff31 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc66:	b918      	cbnz	r0, 800cc70 <__cvt+0x8c>
 800cc68:	f1c6 0601 	rsb	r6, r6, #1
 800cc6c:	f8ca 6000 	str.w	r6, [sl]
 800cc70:	f8da 3000 	ldr.w	r3, [sl]
 800cc74:	4499      	add	r9, r3
 800cc76:	2200      	movs	r2, #0
 800cc78:	2300      	movs	r3, #0
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	4629      	mov	r1, r5
 800cc7e:	f7f3 ff23 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc82:	b108      	cbz	r0, 800cc88 <__cvt+0xa4>
 800cc84:	f8cd 900c 	str.w	r9, [sp, #12]
 800cc88:	2230      	movs	r2, #48	; 0x30
 800cc8a:	9b03      	ldr	r3, [sp, #12]
 800cc8c:	454b      	cmp	r3, r9
 800cc8e:	d307      	bcc.n	800cca0 <__cvt+0xbc>
 800cc90:	9b03      	ldr	r3, [sp, #12]
 800cc92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc94:	1bdb      	subs	r3, r3, r7
 800cc96:	4638      	mov	r0, r7
 800cc98:	6013      	str	r3, [r2, #0]
 800cc9a:	b004      	add	sp, #16
 800cc9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cca0:	1c59      	adds	r1, r3, #1
 800cca2:	9103      	str	r1, [sp, #12]
 800cca4:	701a      	strb	r2, [r3, #0]
 800cca6:	e7f0      	b.n	800cc8a <__cvt+0xa6>

0800cca8 <__exponent>:
 800cca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccaa:	4603      	mov	r3, r0
 800ccac:	2900      	cmp	r1, #0
 800ccae:	bfb8      	it	lt
 800ccb0:	4249      	neglt	r1, r1
 800ccb2:	f803 2b02 	strb.w	r2, [r3], #2
 800ccb6:	bfb4      	ite	lt
 800ccb8:	222d      	movlt	r2, #45	; 0x2d
 800ccba:	222b      	movge	r2, #43	; 0x2b
 800ccbc:	2909      	cmp	r1, #9
 800ccbe:	7042      	strb	r2, [r0, #1]
 800ccc0:	dd2a      	ble.n	800cd18 <__exponent+0x70>
 800ccc2:	f10d 0407 	add.w	r4, sp, #7
 800ccc6:	46a4      	mov	ip, r4
 800ccc8:	270a      	movs	r7, #10
 800ccca:	46a6      	mov	lr, r4
 800cccc:	460a      	mov	r2, r1
 800ccce:	fb91 f6f7 	sdiv	r6, r1, r7
 800ccd2:	fb07 1516 	mls	r5, r7, r6, r1
 800ccd6:	3530      	adds	r5, #48	; 0x30
 800ccd8:	2a63      	cmp	r2, #99	; 0x63
 800ccda:	f104 34ff 	add.w	r4, r4, #4294967295
 800ccde:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cce2:	4631      	mov	r1, r6
 800cce4:	dcf1      	bgt.n	800ccca <__exponent+0x22>
 800cce6:	3130      	adds	r1, #48	; 0x30
 800cce8:	f1ae 0502 	sub.w	r5, lr, #2
 800ccec:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ccf0:	1c44      	adds	r4, r0, #1
 800ccf2:	4629      	mov	r1, r5
 800ccf4:	4561      	cmp	r1, ip
 800ccf6:	d30a      	bcc.n	800cd0e <__exponent+0x66>
 800ccf8:	f10d 0209 	add.w	r2, sp, #9
 800ccfc:	eba2 020e 	sub.w	r2, r2, lr
 800cd00:	4565      	cmp	r5, ip
 800cd02:	bf88      	it	hi
 800cd04:	2200      	movhi	r2, #0
 800cd06:	4413      	add	r3, r2
 800cd08:	1a18      	subs	r0, r3, r0
 800cd0a:	b003      	add	sp, #12
 800cd0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd12:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cd16:	e7ed      	b.n	800ccf4 <__exponent+0x4c>
 800cd18:	2330      	movs	r3, #48	; 0x30
 800cd1a:	3130      	adds	r1, #48	; 0x30
 800cd1c:	7083      	strb	r3, [r0, #2]
 800cd1e:	70c1      	strb	r1, [r0, #3]
 800cd20:	1d03      	adds	r3, r0, #4
 800cd22:	e7f1      	b.n	800cd08 <__exponent+0x60>

0800cd24 <_printf_float>:
 800cd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd28:	ed2d 8b02 	vpush	{d8}
 800cd2c:	b08d      	sub	sp, #52	; 0x34
 800cd2e:	460c      	mov	r4, r1
 800cd30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cd34:	4616      	mov	r6, r2
 800cd36:	461f      	mov	r7, r3
 800cd38:	4605      	mov	r5, r0
 800cd3a:	f001 fcc7 	bl	800e6cc <_localeconv_r>
 800cd3e:	f8d0 a000 	ldr.w	sl, [r0]
 800cd42:	4650      	mov	r0, sl
 800cd44:	f7f3 fa44 	bl	80001d0 <strlen>
 800cd48:	2300      	movs	r3, #0
 800cd4a:	930a      	str	r3, [sp, #40]	; 0x28
 800cd4c:	6823      	ldr	r3, [r4, #0]
 800cd4e:	9305      	str	r3, [sp, #20]
 800cd50:	f8d8 3000 	ldr.w	r3, [r8]
 800cd54:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cd58:	3307      	adds	r3, #7
 800cd5a:	f023 0307 	bic.w	r3, r3, #7
 800cd5e:	f103 0208 	add.w	r2, r3, #8
 800cd62:	f8c8 2000 	str.w	r2, [r8]
 800cd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cd6e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cd72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cd76:	9307      	str	r3, [sp, #28]
 800cd78:	f8cd 8018 	str.w	r8, [sp, #24]
 800cd7c:	ee08 0a10 	vmov	s16, r0
 800cd80:	4b9f      	ldr	r3, [pc, #636]	; (800d000 <_printf_float+0x2dc>)
 800cd82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd86:	f04f 32ff 	mov.w	r2, #4294967295
 800cd8a:	f7f3 fecf 	bl	8000b2c <__aeabi_dcmpun>
 800cd8e:	bb88      	cbnz	r0, 800cdf4 <_printf_float+0xd0>
 800cd90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd94:	4b9a      	ldr	r3, [pc, #616]	; (800d000 <_printf_float+0x2dc>)
 800cd96:	f04f 32ff 	mov.w	r2, #4294967295
 800cd9a:	f7f3 fea9 	bl	8000af0 <__aeabi_dcmple>
 800cd9e:	bb48      	cbnz	r0, 800cdf4 <_printf_float+0xd0>
 800cda0:	2200      	movs	r2, #0
 800cda2:	2300      	movs	r3, #0
 800cda4:	4640      	mov	r0, r8
 800cda6:	4649      	mov	r1, r9
 800cda8:	f7f3 fe98 	bl	8000adc <__aeabi_dcmplt>
 800cdac:	b110      	cbz	r0, 800cdb4 <_printf_float+0x90>
 800cdae:	232d      	movs	r3, #45	; 0x2d
 800cdb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdb4:	4b93      	ldr	r3, [pc, #588]	; (800d004 <_printf_float+0x2e0>)
 800cdb6:	4894      	ldr	r0, [pc, #592]	; (800d008 <_printf_float+0x2e4>)
 800cdb8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cdbc:	bf94      	ite	ls
 800cdbe:	4698      	movls	r8, r3
 800cdc0:	4680      	movhi	r8, r0
 800cdc2:	2303      	movs	r3, #3
 800cdc4:	6123      	str	r3, [r4, #16]
 800cdc6:	9b05      	ldr	r3, [sp, #20]
 800cdc8:	f023 0204 	bic.w	r2, r3, #4
 800cdcc:	6022      	str	r2, [r4, #0]
 800cdce:	f04f 0900 	mov.w	r9, #0
 800cdd2:	9700      	str	r7, [sp, #0]
 800cdd4:	4633      	mov	r3, r6
 800cdd6:	aa0b      	add	r2, sp, #44	; 0x2c
 800cdd8:	4621      	mov	r1, r4
 800cdda:	4628      	mov	r0, r5
 800cddc:	f000 f9d8 	bl	800d190 <_printf_common>
 800cde0:	3001      	adds	r0, #1
 800cde2:	f040 8090 	bne.w	800cf06 <_printf_float+0x1e2>
 800cde6:	f04f 30ff 	mov.w	r0, #4294967295
 800cdea:	b00d      	add	sp, #52	; 0x34
 800cdec:	ecbd 8b02 	vpop	{d8}
 800cdf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdf4:	4642      	mov	r2, r8
 800cdf6:	464b      	mov	r3, r9
 800cdf8:	4640      	mov	r0, r8
 800cdfa:	4649      	mov	r1, r9
 800cdfc:	f7f3 fe96 	bl	8000b2c <__aeabi_dcmpun>
 800ce00:	b140      	cbz	r0, 800ce14 <_printf_float+0xf0>
 800ce02:	464b      	mov	r3, r9
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	bfbc      	itt	lt
 800ce08:	232d      	movlt	r3, #45	; 0x2d
 800ce0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ce0e:	487f      	ldr	r0, [pc, #508]	; (800d00c <_printf_float+0x2e8>)
 800ce10:	4b7f      	ldr	r3, [pc, #508]	; (800d010 <_printf_float+0x2ec>)
 800ce12:	e7d1      	b.n	800cdb8 <_printf_float+0x94>
 800ce14:	6863      	ldr	r3, [r4, #4]
 800ce16:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ce1a:	9206      	str	r2, [sp, #24]
 800ce1c:	1c5a      	adds	r2, r3, #1
 800ce1e:	d13f      	bne.n	800cea0 <_printf_float+0x17c>
 800ce20:	2306      	movs	r3, #6
 800ce22:	6063      	str	r3, [r4, #4]
 800ce24:	9b05      	ldr	r3, [sp, #20]
 800ce26:	6861      	ldr	r1, [r4, #4]
 800ce28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	9303      	str	r3, [sp, #12]
 800ce30:	ab0a      	add	r3, sp, #40	; 0x28
 800ce32:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ce36:	ab09      	add	r3, sp, #36	; 0x24
 800ce38:	ec49 8b10 	vmov	d0, r8, r9
 800ce3c:	9300      	str	r3, [sp, #0]
 800ce3e:	6022      	str	r2, [r4, #0]
 800ce40:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ce44:	4628      	mov	r0, r5
 800ce46:	f7ff fecd 	bl	800cbe4 <__cvt>
 800ce4a:	9b06      	ldr	r3, [sp, #24]
 800ce4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce4e:	2b47      	cmp	r3, #71	; 0x47
 800ce50:	4680      	mov	r8, r0
 800ce52:	d108      	bne.n	800ce66 <_printf_float+0x142>
 800ce54:	1cc8      	adds	r0, r1, #3
 800ce56:	db02      	blt.n	800ce5e <_printf_float+0x13a>
 800ce58:	6863      	ldr	r3, [r4, #4]
 800ce5a:	4299      	cmp	r1, r3
 800ce5c:	dd41      	ble.n	800cee2 <_printf_float+0x1be>
 800ce5e:	f1ab 0b02 	sub.w	fp, fp, #2
 800ce62:	fa5f fb8b 	uxtb.w	fp, fp
 800ce66:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ce6a:	d820      	bhi.n	800ceae <_printf_float+0x18a>
 800ce6c:	3901      	subs	r1, #1
 800ce6e:	465a      	mov	r2, fp
 800ce70:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ce74:	9109      	str	r1, [sp, #36]	; 0x24
 800ce76:	f7ff ff17 	bl	800cca8 <__exponent>
 800ce7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce7c:	1813      	adds	r3, r2, r0
 800ce7e:	2a01      	cmp	r2, #1
 800ce80:	4681      	mov	r9, r0
 800ce82:	6123      	str	r3, [r4, #16]
 800ce84:	dc02      	bgt.n	800ce8c <_printf_float+0x168>
 800ce86:	6822      	ldr	r2, [r4, #0]
 800ce88:	07d2      	lsls	r2, r2, #31
 800ce8a:	d501      	bpl.n	800ce90 <_printf_float+0x16c>
 800ce8c:	3301      	adds	r3, #1
 800ce8e:	6123      	str	r3, [r4, #16]
 800ce90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d09c      	beq.n	800cdd2 <_printf_float+0xae>
 800ce98:	232d      	movs	r3, #45	; 0x2d
 800ce9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce9e:	e798      	b.n	800cdd2 <_printf_float+0xae>
 800cea0:	9a06      	ldr	r2, [sp, #24]
 800cea2:	2a47      	cmp	r2, #71	; 0x47
 800cea4:	d1be      	bne.n	800ce24 <_printf_float+0x100>
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d1bc      	bne.n	800ce24 <_printf_float+0x100>
 800ceaa:	2301      	movs	r3, #1
 800ceac:	e7b9      	b.n	800ce22 <_printf_float+0xfe>
 800ceae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ceb2:	d118      	bne.n	800cee6 <_printf_float+0x1c2>
 800ceb4:	2900      	cmp	r1, #0
 800ceb6:	6863      	ldr	r3, [r4, #4]
 800ceb8:	dd0b      	ble.n	800ced2 <_printf_float+0x1ae>
 800ceba:	6121      	str	r1, [r4, #16]
 800cebc:	b913      	cbnz	r3, 800cec4 <_printf_float+0x1a0>
 800cebe:	6822      	ldr	r2, [r4, #0]
 800cec0:	07d0      	lsls	r0, r2, #31
 800cec2:	d502      	bpl.n	800ceca <_printf_float+0x1a6>
 800cec4:	3301      	adds	r3, #1
 800cec6:	440b      	add	r3, r1
 800cec8:	6123      	str	r3, [r4, #16]
 800ceca:	65a1      	str	r1, [r4, #88]	; 0x58
 800cecc:	f04f 0900 	mov.w	r9, #0
 800ced0:	e7de      	b.n	800ce90 <_printf_float+0x16c>
 800ced2:	b913      	cbnz	r3, 800ceda <_printf_float+0x1b6>
 800ced4:	6822      	ldr	r2, [r4, #0]
 800ced6:	07d2      	lsls	r2, r2, #31
 800ced8:	d501      	bpl.n	800cede <_printf_float+0x1ba>
 800ceda:	3302      	adds	r3, #2
 800cedc:	e7f4      	b.n	800cec8 <_printf_float+0x1a4>
 800cede:	2301      	movs	r3, #1
 800cee0:	e7f2      	b.n	800cec8 <_printf_float+0x1a4>
 800cee2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cee8:	4299      	cmp	r1, r3
 800ceea:	db05      	blt.n	800cef8 <_printf_float+0x1d4>
 800ceec:	6823      	ldr	r3, [r4, #0]
 800ceee:	6121      	str	r1, [r4, #16]
 800cef0:	07d8      	lsls	r0, r3, #31
 800cef2:	d5ea      	bpl.n	800ceca <_printf_float+0x1a6>
 800cef4:	1c4b      	adds	r3, r1, #1
 800cef6:	e7e7      	b.n	800cec8 <_printf_float+0x1a4>
 800cef8:	2900      	cmp	r1, #0
 800cefa:	bfd4      	ite	le
 800cefc:	f1c1 0202 	rsble	r2, r1, #2
 800cf00:	2201      	movgt	r2, #1
 800cf02:	4413      	add	r3, r2
 800cf04:	e7e0      	b.n	800cec8 <_printf_float+0x1a4>
 800cf06:	6823      	ldr	r3, [r4, #0]
 800cf08:	055a      	lsls	r2, r3, #21
 800cf0a:	d407      	bmi.n	800cf1c <_printf_float+0x1f8>
 800cf0c:	6923      	ldr	r3, [r4, #16]
 800cf0e:	4642      	mov	r2, r8
 800cf10:	4631      	mov	r1, r6
 800cf12:	4628      	mov	r0, r5
 800cf14:	47b8      	blx	r7
 800cf16:	3001      	adds	r0, #1
 800cf18:	d12c      	bne.n	800cf74 <_printf_float+0x250>
 800cf1a:	e764      	b.n	800cde6 <_printf_float+0xc2>
 800cf1c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cf20:	f240 80e0 	bls.w	800d0e4 <_printf_float+0x3c0>
 800cf24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cf28:	2200      	movs	r2, #0
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	f7f3 fdcc 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf30:	2800      	cmp	r0, #0
 800cf32:	d034      	beq.n	800cf9e <_printf_float+0x27a>
 800cf34:	4a37      	ldr	r2, [pc, #220]	; (800d014 <_printf_float+0x2f0>)
 800cf36:	2301      	movs	r3, #1
 800cf38:	4631      	mov	r1, r6
 800cf3a:	4628      	mov	r0, r5
 800cf3c:	47b8      	blx	r7
 800cf3e:	3001      	adds	r0, #1
 800cf40:	f43f af51 	beq.w	800cde6 <_printf_float+0xc2>
 800cf44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	db02      	blt.n	800cf52 <_printf_float+0x22e>
 800cf4c:	6823      	ldr	r3, [r4, #0]
 800cf4e:	07d8      	lsls	r0, r3, #31
 800cf50:	d510      	bpl.n	800cf74 <_printf_float+0x250>
 800cf52:	ee18 3a10 	vmov	r3, s16
 800cf56:	4652      	mov	r2, sl
 800cf58:	4631      	mov	r1, r6
 800cf5a:	4628      	mov	r0, r5
 800cf5c:	47b8      	blx	r7
 800cf5e:	3001      	adds	r0, #1
 800cf60:	f43f af41 	beq.w	800cde6 <_printf_float+0xc2>
 800cf64:	f04f 0800 	mov.w	r8, #0
 800cf68:	f104 091a 	add.w	r9, r4, #26
 800cf6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf6e:	3b01      	subs	r3, #1
 800cf70:	4543      	cmp	r3, r8
 800cf72:	dc09      	bgt.n	800cf88 <_printf_float+0x264>
 800cf74:	6823      	ldr	r3, [r4, #0]
 800cf76:	079b      	lsls	r3, r3, #30
 800cf78:	f100 8105 	bmi.w	800d186 <_printf_float+0x462>
 800cf7c:	68e0      	ldr	r0, [r4, #12]
 800cf7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf80:	4298      	cmp	r0, r3
 800cf82:	bfb8      	it	lt
 800cf84:	4618      	movlt	r0, r3
 800cf86:	e730      	b.n	800cdea <_printf_float+0xc6>
 800cf88:	2301      	movs	r3, #1
 800cf8a:	464a      	mov	r2, r9
 800cf8c:	4631      	mov	r1, r6
 800cf8e:	4628      	mov	r0, r5
 800cf90:	47b8      	blx	r7
 800cf92:	3001      	adds	r0, #1
 800cf94:	f43f af27 	beq.w	800cde6 <_printf_float+0xc2>
 800cf98:	f108 0801 	add.w	r8, r8, #1
 800cf9c:	e7e6      	b.n	800cf6c <_printf_float+0x248>
 800cf9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	dc39      	bgt.n	800d018 <_printf_float+0x2f4>
 800cfa4:	4a1b      	ldr	r2, [pc, #108]	; (800d014 <_printf_float+0x2f0>)
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	4631      	mov	r1, r6
 800cfaa:	4628      	mov	r0, r5
 800cfac:	47b8      	blx	r7
 800cfae:	3001      	adds	r0, #1
 800cfb0:	f43f af19 	beq.w	800cde6 <_printf_float+0xc2>
 800cfb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cfb8:	4313      	orrs	r3, r2
 800cfba:	d102      	bne.n	800cfc2 <_printf_float+0x29e>
 800cfbc:	6823      	ldr	r3, [r4, #0]
 800cfbe:	07d9      	lsls	r1, r3, #31
 800cfc0:	d5d8      	bpl.n	800cf74 <_printf_float+0x250>
 800cfc2:	ee18 3a10 	vmov	r3, s16
 800cfc6:	4652      	mov	r2, sl
 800cfc8:	4631      	mov	r1, r6
 800cfca:	4628      	mov	r0, r5
 800cfcc:	47b8      	blx	r7
 800cfce:	3001      	adds	r0, #1
 800cfd0:	f43f af09 	beq.w	800cde6 <_printf_float+0xc2>
 800cfd4:	f04f 0900 	mov.w	r9, #0
 800cfd8:	f104 0a1a 	add.w	sl, r4, #26
 800cfdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfde:	425b      	negs	r3, r3
 800cfe0:	454b      	cmp	r3, r9
 800cfe2:	dc01      	bgt.n	800cfe8 <_printf_float+0x2c4>
 800cfe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfe6:	e792      	b.n	800cf0e <_printf_float+0x1ea>
 800cfe8:	2301      	movs	r3, #1
 800cfea:	4652      	mov	r2, sl
 800cfec:	4631      	mov	r1, r6
 800cfee:	4628      	mov	r0, r5
 800cff0:	47b8      	blx	r7
 800cff2:	3001      	adds	r0, #1
 800cff4:	f43f aef7 	beq.w	800cde6 <_printf_float+0xc2>
 800cff8:	f109 0901 	add.w	r9, r9, #1
 800cffc:	e7ee      	b.n	800cfdc <_printf_float+0x2b8>
 800cffe:	bf00      	nop
 800d000:	7fefffff 	.word	0x7fefffff
 800d004:	0800f6fc 	.word	0x0800f6fc
 800d008:	0800f700 	.word	0x0800f700
 800d00c:	0800f708 	.word	0x0800f708
 800d010:	0800f704 	.word	0x0800f704
 800d014:	0800f70c 	.word	0x0800f70c
 800d018:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d01a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d01c:	429a      	cmp	r2, r3
 800d01e:	bfa8      	it	ge
 800d020:	461a      	movge	r2, r3
 800d022:	2a00      	cmp	r2, #0
 800d024:	4691      	mov	r9, r2
 800d026:	dc37      	bgt.n	800d098 <_printf_float+0x374>
 800d028:	f04f 0b00 	mov.w	fp, #0
 800d02c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d030:	f104 021a 	add.w	r2, r4, #26
 800d034:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d036:	9305      	str	r3, [sp, #20]
 800d038:	eba3 0309 	sub.w	r3, r3, r9
 800d03c:	455b      	cmp	r3, fp
 800d03e:	dc33      	bgt.n	800d0a8 <_printf_float+0x384>
 800d040:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d044:	429a      	cmp	r2, r3
 800d046:	db3b      	blt.n	800d0c0 <_printf_float+0x39c>
 800d048:	6823      	ldr	r3, [r4, #0]
 800d04a:	07da      	lsls	r2, r3, #31
 800d04c:	d438      	bmi.n	800d0c0 <_printf_float+0x39c>
 800d04e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d050:	9a05      	ldr	r2, [sp, #20]
 800d052:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d054:	1a9a      	subs	r2, r3, r2
 800d056:	eba3 0901 	sub.w	r9, r3, r1
 800d05a:	4591      	cmp	r9, r2
 800d05c:	bfa8      	it	ge
 800d05e:	4691      	movge	r9, r2
 800d060:	f1b9 0f00 	cmp.w	r9, #0
 800d064:	dc35      	bgt.n	800d0d2 <_printf_float+0x3ae>
 800d066:	f04f 0800 	mov.w	r8, #0
 800d06a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d06e:	f104 0a1a 	add.w	sl, r4, #26
 800d072:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d076:	1a9b      	subs	r3, r3, r2
 800d078:	eba3 0309 	sub.w	r3, r3, r9
 800d07c:	4543      	cmp	r3, r8
 800d07e:	f77f af79 	ble.w	800cf74 <_printf_float+0x250>
 800d082:	2301      	movs	r3, #1
 800d084:	4652      	mov	r2, sl
 800d086:	4631      	mov	r1, r6
 800d088:	4628      	mov	r0, r5
 800d08a:	47b8      	blx	r7
 800d08c:	3001      	adds	r0, #1
 800d08e:	f43f aeaa 	beq.w	800cde6 <_printf_float+0xc2>
 800d092:	f108 0801 	add.w	r8, r8, #1
 800d096:	e7ec      	b.n	800d072 <_printf_float+0x34e>
 800d098:	4613      	mov	r3, r2
 800d09a:	4631      	mov	r1, r6
 800d09c:	4642      	mov	r2, r8
 800d09e:	4628      	mov	r0, r5
 800d0a0:	47b8      	blx	r7
 800d0a2:	3001      	adds	r0, #1
 800d0a4:	d1c0      	bne.n	800d028 <_printf_float+0x304>
 800d0a6:	e69e      	b.n	800cde6 <_printf_float+0xc2>
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	4631      	mov	r1, r6
 800d0ac:	4628      	mov	r0, r5
 800d0ae:	9205      	str	r2, [sp, #20]
 800d0b0:	47b8      	blx	r7
 800d0b2:	3001      	adds	r0, #1
 800d0b4:	f43f ae97 	beq.w	800cde6 <_printf_float+0xc2>
 800d0b8:	9a05      	ldr	r2, [sp, #20]
 800d0ba:	f10b 0b01 	add.w	fp, fp, #1
 800d0be:	e7b9      	b.n	800d034 <_printf_float+0x310>
 800d0c0:	ee18 3a10 	vmov	r3, s16
 800d0c4:	4652      	mov	r2, sl
 800d0c6:	4631      	mov	r1, r6
 800d0c8:	4628      	mov	r0, r5
 800d0ca:	47b8      	blx	r7
 800d0cc:	3001      	adds	r0, #1
 800d0ce:	d1be      	bne.n	800d04e <_printf_float+0x32a>
 800d0d0:	e689      	b.n	800cde6 <_printf_float+0xc2>
 800d0d2:	9a05      	ldr	r2, [sp, #20]
 800d0d4:	464b      	mov	r3, r9
 800d0d6:	4442      	add	r2, r8
 800d0d8:	4631      	mov	r1, r6
 800d0da:	4628      	mov	r0, r5
 800d0dc:	47b8      	blx	r7
 800d0de:	3001      	adds	r0, #1
 800d0e0:	d1c1      	bne.n	800d066 <_printf_float+0x342>
 800d0e2:	e680      	b.n	800cde6 <_printf_float+0xc2>
 800d0e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0e6:	2a01      	cmp	r2, #1
 800d0e8:	dc01      	bgt.n	800d0ee <_printf_float+0x3ca>
 800d0ea:	07db      	lsls	r3, r3, #31
 800d0ec:	d538      	bpl.n	800d160 <_printf_float+0x43c>
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	4642      	mov	r2, r8
 800d0f2:	4631      	mov	r1, r6
 800d0f4:	4628      	mov	r0, r5
 800d0f6:	47b8      	blx	r7
 800d0f8:	3001      	adds	r0, #1
 800d0fa:	f43f ae74 	beq.w	800cde6 <_printf_float+0xc2>
 800d0fe:	ee18 3a10 	vmov	r3, s16
 800d102:	4652      	mov	r2, sl
 800d104:	4631      	mov	r1, r6
 800d106:	4628      	mov	r0, r5
 800d108:	47b8      	blx	r7
 800d10a:	3001      	adds	r0, #1
 800d10c:	f43f ae6b 	beq.w	800cde6 <_printf_float+0xc2>
 800d110:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d114:	2200      	movs	r2, #0
 800d116:	2300      	movs	r3, #0
 800d118:	f7f3 fcd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800d11c:	b9d8      	cbnz	r0, 800d156 <_printf_float+0x432>
 800d11e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d120:	f108 0201 	add.w	r2, r8, #1
 800d124:	3b01      	subs	r3, #1
 800d126:	4631      	mov	r1, r6
 800d128:	4628      	mov	r0, r5
 800d12a:	47b8      	blx	r7
 800d12c:	3001      	adds	r0, #1
 800d12e:	d10e      	bne.n	800d14e <_printf_float+0x42a>
 800d130:	e659      	b.n	800cde6 <_printf_float+0xc2>
 800d132:	2301      	movs	r3, #1
 800d134:	4652      	mov	r2, sl
 800d136:	4631      	mov	r1, r6
 800d138:	4628      	mov	r0, r5
 800d13a:	47b8      	blx	r7
 800d13c:	3001      	adds	r0, #1
 800d13e:	f43f ae52 	beq.w	800cde6 <_printf_float+0xc2>
 800d142:	f108 0801 	add.w	r8, r8, #1
 800d146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d148:	3b01      	subs	r3, #1
 800d14a:	4543      	cmp	r3, r8
 800d14c:	dcf1      	bgt.n	800d132 <_printf_float+0x40e>
 800d14e:	464b      	mov	r3, r9
 800d150:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d154:	e6dc      	b.n	800cf10 <_printf_float+0x1ec>
 800d156:	f04f 0800 	mov.w	r8, #0
 800d15a:	f104 0a1a 	add.w	sl, r4, #26
 800d15e:	e7f2      	b.n	800d146 <_printf_float+0x422>
 800d160:	2301      	movs	r3, #1
 800d162:	4642      	mov	r2, r8
 800d164:	e7df      	b.n	800d126 <_printf_float+0x402>
 800d166:	2301      	movs	r3, #1
 800d168:	464a      	mov	r2, r9
 800d16a:	4631      	mov	r1, r6
 800d16c:	4628      	mov	r0, r5
 800d16e:	47b8      	blx	r7
 800d170:	3001      	adds	r0, #1
 800d172:	f43f ae38 	beq.w	800cde6 <_printf_float+0xc2>
 800d176:	f108 0801 	add.w	r8, r8, #1
 800d17a:	68e3      	ldr	r3, [r4, #12]
 800d17c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d17e:	1a5b      	subs	r3, r3, r1
 800d180:	4543      	cmp	r3, r8
 800d182:	dcf0      	bgt.n	800d166 <_printf_float+0x442>
 800d184:	e6fa      	b.n	800cf7c <_printf_float+0x258>
 800d186:	f04f 0800 	mov.w	r8, #0
 800d18a:	f104 0919 	add.w	r9, r4, #25
 800d18e:	e7f4      	b.n	800d17a <_printf_float+0x456>

0800d190 <_printf_common>:
 800d190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d194:	4616      	mov	r6, r2
 800d196:	4699      	mov	r9, r3
 800d198:	688a      	ldr	r2, [r1, #8]
 800d19a:	690b      	ldr	r3, [r1, #16]
 800d19c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	bfb8      	it	lt
 800d1a4:	4613      	movlt	r3, r2
 800d1a6:	6033      	str	r3, [r6, #0]
 800d1a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d1ac:	4607      	mov	r7, r0
 800d1ae:	460c      	mov	r4, r1
 800d1b0:	b10a      	cbz	r2, 800d1b6 <_printf_common+0x26>
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	6033      	str	r3, [r6, #0]
 800d1b6:	6823      	ldr	r3, [r4, #0]
 800d1b8:	0699      	lsls	r1, r3, #26
 800d1ba:	bf42      	ittt	mi
 800d1bc:	6833      	ldrmi	r3, [r6, #0]
 800d1be:	3302      	addmi	r3, #2
 800d1c0:	6033      	strmi	r3, [r6, #0]
 800d1c2:	6825      	ldr	r5, [r4, #0]
 800d1c4:	f015 0506 	ands.w	r5, r5, #6
 800d1c8:	d106      	bne.n	800d1d8 <_printf_common+0x48>
 800d1ca:	f104 0a19 	add.w	sl, r4, #25
 800d1ce:	68e3      	ldr	r3, [r4, #12]
 800d1d0:	6832      	ldr	r2, [r6, #0]
 800d1d2:	1a9b      	subs	r3, r3, r2
 800d1d4:	42ab      	cmp	r3, r5
 800d1d6:	dc26      	bgt.n	800d226 <_printf_common+0x96>
 800d1d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d1dc:	1e13      	subs	r3, r2, #0
 800d1de:	6822      	ldr	r2, [r4, #0]
 800d1e0:	bf18      	it	ne
 800d1e2:	2301      	movne	r3, #1
 800d1e4:	0692      	lsls	r2, r2, #26
 800d1e6:	d42b      	bmi.n	800d240 <_printf_common+0xb0>
 800d1e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d1ec:	4649      	mov	r1, r9
 800d1ee:	4638      	mov	r0, r7
 800d1f0:	47c0      	blx	r8
 800d1f2:	3001      	adds	r0, #1
 800d1f4:	d01e      	beq.n	800d234 <_printf_common+0xa4>
 800d1f6:	6823      	ldr	r3, [r4, #0]
 800d1f8:	68e5      	ldr	r5, [r4, #12]
 800d1fa:	6832      	ldr	r2, [r6, #0]
 800d1fc:	f003 0306 	and.w	r3, r3, #6
 800d200:	2b04      	cmp	r3, #4
 800d202:	bf08      	it	eq
 800d204:	1aad      	subeq	r5, r5, r2
 800d206:	68a3      	ldr	r3, [r4, #8]
 800d208:	6922      	ldr	r2, [r4, #16]
 800d20a:	bf0c      	ite	eq
 800d20c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d210:	2500      	movne	r5, #0
 800d212:	4293      	cmp	r3, r2
 800d214:	bfc4      	itt	gt
 800d216:	1a9b      	subgt	r3, r3, r2
 800d218:	18ed      	addgt	r5, r5, r3
 800d21a:	2600      	movs	r6, #0
 800d21c:	341a      	adds	r4, #26
 800d21e:	42b5      	cmp	r5, r6
 800d220:	d11a      	bne.n	800d258 <_printf_common+0xc8>
 800d222:	2000      	movs	r0, #0
 800d224:	e008      	b.n	800d238 <_printf_common+0xa8>
 800d226:	2301      	movs	r3, #1
 800d228:	4652      	mov	r2, sl
 800d22a:	4649      	mov	r1, r9
 800d22c:	4638      	mov	r0, r7
 800d22e:	47c0      	blx	r8
 800d230:	3001      	adds	r0, #1
 800d232:	d103      	bne.n	800d23c <_printf_common+0xac>
 800d234:	f04f 30ff 	mov.w	r0, #4294967295
 800d238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d23c:	3501      	adds	r5, #1
 800d23e:	e7c6      	b.n	800d1ce <_printf_common+0x3e>
 800d240:	18e1      	adds	r1, r4, r3
 800d242:	1c5a      	adds	r2, r3, #1
 800d244:	2030      	movs	r0, #48	; 0x30
 800d246:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d24a:	4422      	add	r2, r4
 800d24c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d250:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d254:	3302      	adds	r3, #2
 800d256:	e7c7      	b.n	800d1e8 <_printf_common+0x58>
 800d258:	2301      	movs	r3, #1
 800d25a:	4622      	mov	r2, r4
 800d25c:	4649      	mov	r1, r9
 800d25e:	4638      	mov	r0, r7
 800d260:	47c0      	blx	r8
 800d262:	3001      	adds	r0, #1
 800d264:	d0e6      	beq.n	800d234 <_printf_common+0xa4>
 800d266:	3601      	adds	r6, #1
 800d268:	e7d9      	b.n	800d21e <_printf_common+0x8e>
	...

0800d26c <_printf_i>:
 800d26c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d270:	7e0f      	ldrb	r7, [r1, #24]
 800d272:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d274:	2f78      	cmp	r7, #120	; 0x78
 800d276:	4691      	mov	r9, r2
 800d278:	4680      	mov	r8, r0
 800d27a:	460c      	mov	r4, r1
 800d27c:	469a      	mov	sl, r3
 800d27e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d282:	d807      	bhi.n	800d294 <_printf_i+0x28>
 800d284:	2f62      	cmp	r7, #98	; 0x62
 800d286:	d80a      	bhi.n	800d29e <_printf_i+0x32>
 800d288:	2f00      	cmp	r7, #0
 800d28a:	f000 80d8 	beq.w	800d43e <_printf_i+0x1d2>
 800d28e:	2f58      	cmp	r7, #88	; 0x58
 800d290:	f000 80a3 	beq.w	800d3da <_printf_i+0x16e>
 800d294:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d298:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d29c:	e03a      	b.n	800d314 <_printf_i+0xa8>
 800d29e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d2a2:	2b15      	cmp	r3, #21
 800d2a4:	d8f6      	bhi.n	800d294 <_printf_i+0x28>
 800d2a6:	a101      	add	r1, pc, #4	; (adr r1, 800d2ac <_printf_i+0x40>)
 800d2a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2ac:	0800d305 	.word	0x0800d305
 800d2b0:	0800d319 	.word	0x0800d319
 800d2b4:	0800d295 	.word	0x0800d295
 800d2b8:	0800d295 	.word	0x0800d295
 800d2bc:	0800d295 	.word	0x0800d295
 800d2c0:	0800d295 	.word	0x0800d295
 800d2c4:	0800d319 	.word	0x0800d319
 800d2c8:	0800d295 	.word	0x0800d295
 800d2cc:	0800d295 	.word	0x0800d295
 800d2d0:	0800d295 	.word	0x0800d295
 800d2d4:	0800d295 	.word	0x0800d295
 800d2d8:	0800d425 	.word	0x0800d425
 800d2dc:	0800d349 	.word	0x0800d349
 800d2e0:	0800d407 	.word	0x0800d407
 800d2e4:	0800d295 	.word	0x0800d295
 800d2e8:	0800d295 	.word	0x0800d295
 800d2ec:	0800d447 	.word	0x0800d447
 800d2f0:	0800d295 	.word	0x0800d295
 800d2f4:	0800d349 	.word	0x0800d349
 800d2f8:	0800d295 	.word	0x0800d295
 800d2fc:	0800d295 	.word	0x0800d295
 800d300:	0800d40f 	.word	0x0800d40f
 800d304:	682b      	ldr	r3, [r5, #0]
 800d306:	1d1a      	adds	r2, r3, #4
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	602a      	str	r2, [r5, #0]
 800d30c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d310:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d314:	2301      	movs	r3, #1
 800d316:	e0a3      	b.n	800d460 <_printf_i+0x1f4>
 800d318:	6820      	ldr	r0, [r4, #0]
 800d31a:	6829      	ldr	r1, [r5, #0]
 800d31c:	0606      	lsls	r6, r0, #24
 800d31e:	f101 0304 	add.w	r3, r1, #4
 800d322:	d50a      	bpl.n	800d33a <_printf_i+0xce>
 800d324:	680e      	ldr	r6, [r1, #0]
 800d326:	602b      	str	r3, [r5, #0]
 800d328:	2e00      	cmp	r6, #0
 800d32a:	da03      	bge.n	800d334 <_printf_i+0xc8>
 800d32c:	232d      	movs	r3, #45	; 0x2d
 800d32e:	4276      	negs	r6, r6
 800d330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d334:	485e      	ldr	r0, [pc, #376]	; (800d4b0 <_printf_i+0x244>)
 800d336:	230a      	movs	r3, #10
 800d338:	e019      	b.n	800d36e <_printf_i+0x102>
 800d33a:	680e      	ldr	r6, [r1, #0]
 800d33c:	602b      	str	r3, [r5, #0]
 800d33e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d342:	bf18      	it	ne
 800d344:	b236      	sxthne	r6, r6
 800d346:	e7ef      	b.n	800d328 <_printf_i+0xbc>
 800d348:	682b      	ldr	r3, [r5, #0]
 800d34a:	6820      	ldr	r0, [r4, #0]
 800d34c:	1d19      	adds	r1, r3, #4
 800d34e:	6029      	str	r1, [r5, #0]
 800d350:	0601      	lsls	r1, r0, #24
 800d352:	d501      	bpl.n	800d358 <_printf_i+0xec>
 800d354:	681e      	ldr	r6, [r3, #0]
 800d356:	e002      	b.n	800d35e <_printf_i+0xf2>
 800d358:	0646      	lsls	r6, r0, #25
 800d35a:	d5fb      	bpl.n	800d354 <_printf_i+0xe8>
 800d35c:	881e      	ldrh	r6, [r3, #0]
 800d35e:	4854      	ldr	r0, [pc, #336]	; (800d4b0 <_printf_i+0x244>)
 800d360:	2f6f      	cmp	r7, #111	; 0x6f
 800d362:	bf0c      	ite	eq
 800d364:	2308      	moveq	r3, #8
 800d366:	230a      	movne	r3, #10
 800d368:	2100      	movs	r1, #0
 800d36a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d36e:	6865      	ldr	r5, [r4, #4]
 800d370:	60a5      	str	r5, [r4, #8]
 800d372:	2d00      	cmp	r5, #0
 800d374:	bfa2      	ittt	ge
 800d376:	6821      	ldrge	r1, [r4, #0]
 800d378:	f021 0104 	bicge.w	r1, r1, #4
 800d37c:	6021      	strge	r1, [r4, #0]
 800d37e:	b90e      	cbnz	r6, 800d384 <_printf_i+0x118>
 800d380:	2d00      	cmp	r5, #0
 800d382:	d04d      	beq.n	800d420 <_printf_i+0x1b4>
 800d384:	4615      	mov	r5, r2
 800d386:	fbb6 f1f3 	udiv	r1, r6, r3
 800d38a:	fb03 6711 	mls	r7, r3, r1, r6
 800d38e:	5dc7      	ldrb	r7, [r0, r7]
 800d390:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d394:	4637      	mov	r7, r6
 800d396:	42bb      	cmp	r3, r7
 800d398:	460e      	mov	r6, r1
 800d39a:	d9f4      	bls.n	800d386 <_printf_i+0x11a>
 800d39c:	2b08      	cmp	r3, #8
 800d39e:	d10b      	bne.n	800d3b8 <_printf_i+0x14c>
 800d3a0:	6823      	ldr	r3, [r4, #0]
 800d3a2:	07de      	lsls	r6, r3, #31
 800d3a4:	d508      	bpl.n	800d3b8 <_printf_i+0x14c>
 800d3a6:	6923      	ldr	r3, [r4, #16]
 800d3a8:	6861      	ldr	r1, [r4, #4]
 800d3aa:	4299      	cmp	r1, r3
 800d3ac:	bfde      	ittt	le
 800d3ae:	2330      	movle	r3, #48	; 0x30
 800d3b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d3b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d3b8:	1b52      	subs	r2, r2, r5
 800d3ba:	6122      	str	r2, [r4, #16]
 800d3bc:	f8cd a000 	str.w	sl, [sp]
 800d3c0:	464b      	mov	r3, r9
 800d3c2:	aa03      	add	r2, sp, #12
 800d3c4:	4621      	mov	r1, r4
 800d3c6:	4640      	mov	r0, r8
 800d3c8:	f7ff fee2 	bl	800d190 <_printf_common>
 800d3cc:	3001      	adds	r0, #1
 800d3ce:	d14c      	bne.n	800d46a <_printf_i+0x1fe>
 800d3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d3d4:	b004      	add	sp, #16
 800d3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3da:	4835      	ldr	r0, [pc, #212]	; (800d4b0 <_printf_i+0x244>)
 800d3dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d3e0:	6829      	ldr	r1, [r5, #0]
 800d3e2:	6823      	ldr	r3, [r4, #0]
 800d3e4:	f851 6b04 	ldr.w	r6, [r1], #4
 800d3e8:	6029      	str	r1, [r5, #0]
 800d3ea:	061d      	lsls	r5, r3, #24
 800d3ec:	d514      	bpl.n	800d418 <_printf_i+0x1ac>
 800d3ee:	07df      	lsls	r7, r3, #31
 800d3f0:	bf44      	itt	mi
 800d3f2:	f043 0320 	orrmi.w	r3, r3, #32
 800d3f6:	6023      	strmi	r3, [r4, #0]
 800d3f8:	b91e      	cbnz	r6, 800d402 <_printf_i+0x196>
 800d3fa:	6823      	ldr	r3, [r4, #0]
 800d3fc:	f023 0320 	bic.w	r3, r3, #32
 800d400:	6023      	str	r3, [r4, #0]
 800d402:	2310      	movs	r3, #16
 800d404:	e7b0      	b.n	800d368 <_printf_i+0xfc>
 800d406:	6823      	ldr	r3, [r4, #0]
 800d408:	f043 0320 	orr.w	r3, r3, #32
 800d40c:	6023      	str	r3, [r4, #0]
 800d40e:	2378      	movs	r3, #120	; 0x78
 800d410:	4828      	ldr	r0, [pc, #160]	; (800d4b4 <_printf_i+0x248>)
 800d412:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d416:	e7e3      	b.n	800d3e0 <_printf_i+0x174>
 800d418:	0659      	lsls	r1, r3, #25
 800d41a:	bf48      	it	mi
 800d41c:	b2b6      	uxthmi	r6, r6
 800d41e:	e7e6      	b.n	800d3ee <_printf_i+0x182>
 800d420:	4615      	mov	r5, r2
 800d422:	e7bb      	b.n	800d39c <_printf_i+0x130>
 800d424:	682b      	ldr	r3, [r5, #0]
 800d426:	6826      	ldr	r6, [r4, #0]
 800d428:	6961      	ldr	r1, [r4, #20]
 800d42a:	1d18      	adds	r0, r3, #4
 800d42c:	6028      	str	r0, [r5, #0]
 800d42e:	0635      	lsls	r5, r6, #24
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	d501      	bpl.n	800d438 <_printf_i+0x1cc>
 800d434:	6019      	str	r1, [r3, #0]
 800d436:	e002      	b.n	800d43e <_printf_i+0x1d2>
 800d438:	0670      	lsls	r0, r6, #25
 800d43a:	d5fb      	bpl.n	800d434 <_printf_i+0x1c8>
 800d43c:	8019      	strh	r1, [r3, #0]
 800d43e:	2300      	movs	r3, #0
 800d440:	6123      	str	r3, [r4, #16]
 800d442:	4615      	mov	r5, r2
 800d444:	e7ba      	b.n	800d3bc <_printf_i+0x150>
 800d446:	682b      	ldr	r3, [r5, #0]
 800d448:	1d1a      	adds	r2, r3, #4
 800d44a:	602a      	str	r2, [r5, #0]
 800d44c:	681d      	ldr	r5, [r3, #0]
 800d44e:	6862      	ldr	r2, [r4, #4]
 800d450:	2100      	movs	r1, #0
 800d452:	4628      	mov	r0, r5
 800d454:	f7f2 fec4 	bl	80001e0 <memchr>
 800d458:	b108      	cbz	r0, 800d45e <_printf_i+0x1f2>
 800d45a:	1b40      	subs	r0, r0, r5
 800d45c:	6060      	str	r0, [r4, #4]
 800d45e:	6863      	ldr	r3, [r4, #4]
 800d460:	6123      	str	r3, [r4, #16]
 800d462:	2300      	movs	r3, #0
 800d464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d468:	e7a8      	b.n	800d3bc <_printf_i+0x150>
 800d46a:	6923      	ldr	r3, [r4, #16]
 800d46c:	462a      	mov	r2, r5
 800d46e:	4649      	mov	r1, r9
 800d470:	4640      	mov	r0, r8
 800d472:	47d0      	blx	sl
 800d474:	3001      	adds	r0, #1
 800d476:	d0ab      	beq.n	800d3d0 <_printf_i+0x164>
 800d478:	6823      	ldr	r3, [r4, #0]
 800d47a:	079b      	lsls	r3, r3, #30
 800d47c:	d413      	bmi.n	800d4a6 <_printf_i+0x23a>
 800d47e:	68e0      	ldr	r0, [r4, #12]
 800d480:	9b03      	ldr	r3, [sp, #12]
 800d482:	4298      	cmp	r0, r3
 800d484:	bfb8      	it	lt
 800d486:	4618      	movlt	r0, r3
 800d488:	e7a4      	b.n	800d3d4 <_printf_i+0x168>
 800d48a:	2301      	movs	r3, #1
 800d48c:	4632      	mov	r2, r6
 800d48e:	4649      	mov	r1, r9
 800d490:	4640      	mov	r0, r8
 800d492:	47d0      	blx	sl
 800d494:	3001      	adds	r0, #1
 800d496:	d09b      	beq.n	800d3d0 <_printf_i+0x164>
 800d498:	3501      	adds	r5, #1
 800d49a:	68e3      	ldr	r3, [r4, #12]
 800d49c:	9903      	ldr	r1, [sp, #12]
 800d49e:	1a5b      	subs	r3, r3, r1
 800d4a0:	42ab      	cmp	r3, r5
 800d4a2:	dcf2      	bgt.n	800d48a <_printf_i+0x21e>
 800d4a4:	e7eb      	b.n	800d47e <_printf_i+0x212>
 800d4a6:	2500      	movs	r5, #0
 800d4a8:	f104 0619 	add.w	r6, r4, #25
 800d4ac:	e7f5      	b.n	800d49a <_printf_i+0x22e>
 800d4ae:	bf00      	nop
 800d4b0:	0800f70e 	.word	0x0800f70e
 800d4b4:	0800f71f 	.word	0x0800f71f

0800d4b8 <iprintf>:
 800d4b8:	b40f      	push	{r0, r1, r2, r3}
 800d4ba:	4b0a      	ldr	r3, [pc, #40]	; (800d4e4 <iprintf+0x2c>)
 800d4bc:	b513      	push	{r0, r1, r4, lr}
 800d4be:	681c      	ldr	r4, [r3, #0]
 800d4c0:	b124      	cbz	r4, 800d4cc <iprintf+0x14>
 800d4c2:	69a3      	ldr	r3, [r4, #24]
 800d4c4:	b913      	cbnz	r3, 800d4cc <iprintf+0x14>
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	f001 f862 	bl	800e590 <__sinit>
 800d4cc:	ab05      	add	r3, sp, #20
 800d4ce:	9a04      	ldr	r2, [sp, #16]
 800d4d0:	68a1      	ldr	r1, [r4, #8]
 800d4d2:	9301      	str	r3, [sp, #4]
 800d4d4:	4620      	mov	r0, r4
 800d4d6:	f001 fe1f 	bl	800f118 <_vfiprintf_r>
 800d4da:	b002      	add	sp, #8
 800d4dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4e0:	b004      	add	sp, #16
 800d4e2:	4770      	bx	lr
 800d4e4:	20000164 	.word	0x20000164

0800d4e8 <__swbuf_r>:
 800d4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ea:	460e      	mov	r6, r1
 800d4ec:	4614      	mov	r4, r2
 800d4ee:	4605      	mov	r5, r0
 800d4f0:	b118      	cbz	r0, 800d4fa <__swbuf_r+0x12>
 800d4f2:	6983      	ldr	r3, [r0, #24]
 800d4f4:	b90b      	cbnz	r3, 800d4fa <__swbuf_r+0x12>
 800d4f6:	f001 f84b 	bl	800e590 <__sinit>
 800d4fa:	4b21      	ldr	r3, [pc, #132]	; (800d580 <__swbuf_r+0x98>)
 800d4fc:	429c      	cmp	r4, r3
 800d4fe:	d12b      	bne.n	800d558 <__swbuf_r+0x70>
 800d500:	686c      	ldr	r4, [r5, #4]
 800d502:	69a3      	ldr	r3, [r4, #24]
 800d504:	60a3      	str	r3, [r4, #8]
 800d506:	89a3      	ldrh	r3, [r4, #12]
 800d508:	071a      	lsls	r2, r3, #28
 800d50a:	d52f      	bpl.n	800d56c <__swbuf_r+0x84>
 800d50c:	6923      	ldr	r3, [r4, #16]
 800d50e:	b36b      	cbz	r3, 800d56c <__swbuf_r+0x84>
 800d510:	6923      	ldr	r3, [r4, #16]
 800d512:	6820      	ldr	r0, [r4, #0]
 800d514:	1ac0      	subs	r0, r0, r3
 800d516:	6963      	ldr	r3, [r4, #20]
 800d518:	b2f6      	uxtb	r6, r6
 800d51a:	4283      	cmp	r3, r0
 800d51c:	4637      	mov	r7, r6
 800d51e:	dc04      	bgt.n	800d52a <__swbuf_r+0x42>
 800d520:	4621      	mov	r1, r4
 800d522:	4628      	mov	r0, r5
 800d524:	f000 ffa0 	bl	800e468 <_fflush_r>
 800d528:	bb30      	cbnz	r0, 800d578 <__swbuf_r+0x90>
 800d52a:	68a3      	ldr	r3, [r4, #8]
 800d52c:	3b01      	subs	r3, #1
 800d52e:	60a3      	str	r3, [r4, #8]
 800d530:	6823      	ldr	r3, [r4, #0]
 800d532:	1c5a      	adds	r2, r3, #1
 800d534:	6022      	str	r2, [r4, #0]
 800d536:	701e      	strb	r6, [r3, #0]
 800d538:	6963      	ldr	r3, [r4, #20]
 800d53a:	3001      	adds	r0, #1
 800d53c:	4283      	cmp	r3, r0
 800d53e:	d004      	beq.n	800d54a <__swbuf_r+0x62>
 800d540:	89a3      	ldrh	r3, [r4, #12]
 800d542:	07db      	lsls	r3, r3, #31
 800d544:	d506      	bpl.n	800d554 <__swbuf_r+0x6c>
 800d546:	2e0a      	cmp	r6, #10
 800d548:	d104      	bne.n	800d554 <__swbuf_r+0x6c>
 800d54a:	4621      	mov	r1, r4
 800d54c:	4628      	mov	r0, r5
 800d54e:	f000 ff8b 	bl	800e468 <_fflush_r>
 800d552:	b988      	cbnz	r0, 800d578 <__swbuf_r+0x90>
 800d554:	4638      	mov	r0, r7
 800d556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d558:	4b0a      	ldr	r3, [pc, #40]	; (800d584 <__swbuf_r+0x9c>)
 800d55a:	429c      	cmp	r4, r3
 800d55c:	d101      	bne.n	800d562 <__swbuf_r+0x7a>
 800d55e:	68ac      	ldr	r4, [r5, #8]
 800d560:	e7cf      	b.n	800d502 <__swbuf_r+0x1a>
 800d562:	4b09      	ldr	r3, [pc, #36]	; (800d588 <__swbuf_r+0xa0>)
 800d564:	429c      	cmp	r4, r3
 800d566:	bf08      	it	eq
 800d568:	68ec      	ldreq	r4, [r5, #12]
 800d56a:	e7ca      	b.n	800d502 <__swbuf_r+0x1a>
 800d56c:	4621      	mov	r1, r4
 800d56e:	4628      	mov	r0, r5
 800d570:	f000 f80c 	bl	800d58c <__swsetup_r>
 800d574:	2800      	cmp	r0, #0
 800d576:	d0cb      	beq.n	800d510 <__swbuf_r+0x28>
 800d578:	f04f 37ff 	mov.w	r7, #4294967295
 800d57c:	e7ea      	b.n	800d554 <__swbuf_r+0x6c>
 800d57e:	bf00      	nop
 800d580:	0800f7e0 	.word	0x0800f7e0
 800d584:	0800f800 	.word	0x0800f800
 800d588:	0800f7c0 	.word	0x0800f7c0

0800d58c <__swsetup_r>:
 800d58c:	4b32      	ldr	r3, [pc, #200]	; (800d658 <__swsetup_r+0xcc>)
 800d58e:	b570      	push	{r4, r5, r6, lr}
 800d590:	681d      	ldr	r5, [r3, #0]
 800d592:	4606      	mov	r6, r0
 800d594:	460c      	mov	r4, r1
 800d596:	b125      	cbz	r5, 800d5a2 <__swsetup_r+0x16>
 800d598:	69ab      	ldr	r3, [r5, #24]
 800d59a:	b913      	cbnz	r3, 800d5a2 <__swsetup_r+0x16>
 800d59c:	4628      	mov	r0, r5
 800d59e:	f000 fff7 	bl	800e590 <__sinit>
 800d5a2:	4b2e      	ldr	r3, [pc, #184]	; (800d65c <__swsetup_r+0xd0>)
 800d5a4:	429c      	cmp	r4, r3
 800d5a6:	d10f      	bne.n	800d5c8 <__swsetup_r+0x3c>
 800d5a8:	686c      	ldr	r4, [r5, #4]
 800d5aa:	89a3      	ldrh	r3, [r4, #12]
 800d5ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5b0:	0719      	lsls	r1, r3, #28
 800d5b2:	d42c      	bmi.n	800d60e <__swsetup_r+0x82>
 800d5b4:	06dd      	lsls	r5, r3, #27
 800d5b6:	d411      	bmi.n	800d5dc <__swsetup_r+0x50>
 800d5b8:	2309      	movs	r3, #9
 800d5ba:	6033      	str	r3, [r6, #0]
 800d5bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d5c0:	81a3      	strh	r3, [r4, #12]
 800d5c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5c6:	e03e      	b.n	800d646 <__swsetup_r+0xba>
 800d5c8:	4b25      	ldr	r3, [pc, #148]	; (800d660 <__swsetup_r+0xd4>)
 800d5ca:	429c      	cmp	r4, r3
 800d5cc:	d101      	bne.n	800d5d2 <__swsetup_r+0x46>
 800d5ce:	68ac      	ldr	r4, [r5, #8]
 800d5d0:	e7eb      	b.n	800d5aa <__swsetup_r+0x1e>
 800d5d2:	4b24      	ldr	r3, [pc, #144]	; (800d664 <__swsetup_r+0xd8>)
 800d5d4:	429c      	cmp	r4, r3
 800d5d6:	bf08      	it	eq
 800d5d8:	68ec      	ldreq	r4, [r5, #12]
 800d5da:	e7e6      	b.n	800d5aa <__swsetup_r+0x1e>
 800d5dc:	0758      	lsls	r0, r3, #29
 800d5de:	d512      	bpl.n	800d606 <__swsetup_r+0x7a>
 800d5e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5e2:	b141      	cbz	r1, 800d5f6 <__swsetup_r+0x6a>
 800d5e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5e8:	4299      	cmp	r1, r3
 800d5ea:	d002      	beq.n	800d5f2 <__swsetup_r+0x66>
 800d5ec:	4630      	mov	r0, r6
 800d5ee:	f001 fc89 	bl	800ef04 <_free_r>
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	6363      	str	r3, [r4, #52]	; 0x34
 800d5f6:	89a3      	ldrh	r3, [r4, #12]
 800d5f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d5fc:	81a3      	strh	r3, [r4, #12]
 800d5fe:	2300      	movs	r3, #0
 800d600:	6063      	str	r3, [r4, #4]
 800d602:	6923      	ldr	r3, [r4, #16]
 800d604:	6023      	str	r3, [r4, #0]
 800d606:	89a3      	ldrh	r3, [r4, #12]
 800d608:	f043 0308 	orr.w	r3, r3, #8
 800d60c:	81a3      	strh	r3, [r4, #12]
 800d60e:	6923      	ldr	r3, [r4, #16]
 800d610:	b94b      	cbnz	r3, 800d626 <__swsetup_r+0x9a>
 800d612:	89a3      	ldrh	r3, [r4, #12]
 800d614:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d61c:	d003      	beq.n	800d626 <__swsetup_r+0x9a>
 800d61e:	4621      	mov	r1, r4
 800d620:	4630      	mov	r0, r6
 800d622:	f001 f87f 	bl	800e724 <__smakebuf_r>
 800d626:	89a0      	ldrh	r0, [r4, #12]
 800d628:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d62c:	f010 0301 	ands.w	r3, r0, #1
 800d630:	d00a      	beq.n	800d648 <__swsetup_r+0xbc>
 800d632:	2300      	movs	r3, #0
 800d634:	60a3      	str	r3, [r4, #8]
 800d636:	6963      	ldr	r3, [r4, #20]
 800d638:	425b      	negs	r3, r3
 800d63a:	61a3      	str	r3, [r4, #24]
 800d63c:	6923      	ldr	r3, [r4, #16]
 800d63e:	b943      	cbnz	r3, 800d652 <__swsetup_r+0xc6>
 800d640:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d644:	d1ba      	bne.n	800d5bc <__swsetup_r+0x30>
 800d646:	bd70      	pop	{r4, r5, r6, pc}
 800d648:	0781      	lsls	r1, r0, #30
 800d64a:	bf58      	it	pl
 800d64c:	6963      	ldrpl	r3, [r4, #20]
 800d64e:	60a3      	str	r3, [r4, #8]
 800d650:	e7f4      	b.n	800d63c <__swsetup_r+0xb0>
 800d652:	2000      	movs	r0, #0
 800d654:	e7f7      	b.n	800d646 <__swsetup_r+0xba>
 800d656:	bf00      	nop
 800d658:	20000164 	.word	0x20000164
 800d65c:	0800f7e0 	.word	0x0800f7e0
 800d660:	0800f800 	.word	0x0800f800
 800d664:	0800f7c0 	.word	0x0800f7c0

0800d668 <quorem>:
 800d668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d66c:	6903      	ldr	r3, [r0, #16]
 800d66e:	690c      	ldr	r4, [r1, #16]
 800d670:	42a3      	cmp	r3, r4
 800d672:	4607      	mov	r7, r0
 800d674:	f2c0 8081 	blt.w	800d77a <quorem+0x112>
 800d678:	3c01      	subs	r4, #1
 800d67a:	f101 0814 	add.w	r8, r1, #20
 800d67e:	f100 0514 	add.w	r5, r0, #20
 800d682:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d686:	9301      	str	r3, [sp, #4]
 800d688:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d68c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d690:	3301      	adds	r3, #1
 800d692:	429a      	cmp	r2, r3
 800d694:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d698:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d69c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d6a0:	d331      	bcc.n	800d706 <quorem+0x9e>
 800d6a2:	f04f 0e00 	mov.w	lr, #0
 800d6a6:	4640      	mov	r0, r8
 800d6a8:	46ac      	mov	ip, r5
 800d6aa:	46f2      	mov	sl, lr
 800d6ac:	f850 2b04 	ldr.w	r2, [r0], #4
 800d6b0:	b293      	uxth	r3, r2
 800d6b2:	fb06 e303 	mla	r3, r6, r3, lr
 800d6b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d6ba:	b29b      	uxth	r3, r3
 800d6bc:	ebaa 0303 	sub.w	r3, sl, r3
 800d6c0:	f8dc a000 	ldr.w	sl, [ip]
 800d6c4:	0c12      	lsrs	r2, r2, #16
 800d6c6:	fa13 f38a 	uxtah	r3, r3, sl
 800d6ca:	fb06 e202 	mla	r2, r6, r2, lr
 800d6ce:	9300      	str	r3, [sp, #0]
 800d6d0:	9b00      	ldr	r3, [sp, #0]
 800d6d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d6d6:	b292      	uxth	r2, r2
 800d6d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d6dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d6e0:	f8bd 3000 	ldrh.w	r3, [sp]
 800d6e4:	4581      	cmp	r9, r0
 800d6e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6ea:	f84c 3b04 	str.w	r3, [ip], #4
 800d6ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d6f2:	d2db      	bcs.n	800d6ac <quorem+0x44>
 800d6f4:	f855 300b 	ldr.w	r3, [r5, fp]
 800d6f8:	b92b      	cbnz	r3, 800d706 <quorem+0x9e>
 800d6fa:	9b01      	ldr	r3, [sp, #4]
 800d6fc:	3b04      	subs	r3, #4
 800d6fe:	429d      	cmp	r5, r3
 800d700:	461a      	mov	r2, r3
 800d702:	d32e      	bcc.n	800d762 <quorem+0xfa>
 800d704:	613c      	str	r4, [r7, #16]
 800d706:	4638      	mov	r0, r7
 800d708:	f001 fae4 	bl	800ecd4 <__mcmp>
 800d70c:	2800      	cmp	r0, #0
 800d70e:	db24      	blt.n	800d75a <quorem+0xf2>
 800d710:	3601      	adds	r6, #1
 800d712:	4628      	mov	r0, r5
 800d714:	f04f 0c00 	mov.w	ip, #0
 800d718:	f858 2b04 	ldr.w	r2, [r8], #4
 800d71c:	f8d0 e000 	ldr.w	lr, [r0]
 800d720:	b293      	uxth	r3, r2
 800d722:	ebac 0303 	sub.w	r3, ip, r3
 800d726:	0c12      	lsrs	r2, r2, #16
 800d728:	fa13 f38e 	uxtah	r3, r3, lr
 800d72c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d730:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d734:	b29b      	uxth	r3, r3
 800d736:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d73a:	45c1      	cmp	r9, r8
 800d73c:	f840 3b04 	str.w	r3, [r0], #4
 800d740:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d744:	d2e8      	bcs.n	800d718 <quorem+0xb0>
 800d746:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d74a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d74e:	b922      	cbnz	r2, 800d75a <quorem+0xf2>
 800d750:	3b04      	subs	r3, #4
 800d752:	429d      	cmp	r5, r3
 800d754:	461a      	mov	r2, r3
 800d756:	d30a      	bcc.n	800d76e <quorem+0x106>
 800d758:	613c      	str	r4, [r7, #16]
 800d75a:	4630      	mov	r0, r6
 800d75c:	b003      	add	sp, #12
 800d75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d762:	6812      	ldr	r2, [r2, #0]
 800d764:	3b04      	subs	r3, #4
 800d766:	2a00      	cmp	r2, #0
 800d768:	d1cc      	bne.n	800d704 <quorem+0x9c>
 800d76a:	3c01      	subs	r4, #1
 800d76c:	e7c7      	b.n	800d6fe <quorem+0x96>
 800d76e:	6812      	ldr	r2, [r2, #0]
 800d770:	3b04      	subs	r3, #4
 800d772:	2a00      	cmp	r2, #0
 800d774:	d1f0      	bne.n	800d758 <quorem+0xf0>
 800d776:	3c01      	subs	r4, #1
 800d778:	e7eb      	b.n	800d752 <quorem+0xea>
 800d77a:	2000      	movs	r0, #0
 800d77c:	e7ee      	b.n	800d75c <quorem+0xf4>
	...

0800d780 <_dtoa_r>:
 800d780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d784:	ed2d 8b04 	vpush	{d8-d9}
 800d788:	ec57 6b10 	vmov	r6, r7, d0
 800d78c:	b093      	sub	sp, #76	; 0x4c
 800d78e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d790:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d794:	9106      	str	r1, [sp, #24]
 800d796:	ee10 aa10 	vmov	sl, s0
 800d79a:	4604      	mov	r4, r0
 800d79c:	9209      	str	r2, [sp, #36]	; 0x24
 800d79e:	930c      	str	r3, [sp, #48]	; 0x30
 800d7a0:	46bb      	mov	fp, r7
 800d7a2:	b975      	cbnz	r5, 800d7c2 <_dtoa_r+0x42>
 800d7a4:	2010      	movs	r0, #16
 800d7a6:	f000 fffd 	bl	800e7a4 <malloc>
 800d7aa:	4602      	mov	r2, r0
 800d7ac:	6260      	str	r0, [r4, #36]	; 0x24
 800d7ae:	b920      	cbnz	r0, 800d7ba <_dtoa_r+0x3a>
 800d7b0:	4ba7      	ldr	r3, [pc, #668]	; (800da50 <_dtoa_r+0x2d0>)
 800d7b2:	21ea      	movs	r1, #234	; 0xea
 800d7b4:	48a7      	ldr	r0, [pc, #668]	; (800da54 <_dtoa_r+0x2d4>)
 800d7b6:	f001 fe45 	bl	800f444 <__assert_func>
 800d7ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d7be:	6005      	str	r5, [r0, #0]
 800d7c0:	60c5      	str	r5, [r0, #12]
 800d7c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7c4:	6819      	ldr	r1, [r3, #0]
 800d7c6:	b151      	cbz	r1, 800d7de <_dtoa_r+0x5e>
 800d7c8:	685a      	ldr	r2, [r3, #4]
 800d7ca:	604a      	str	r2, [r1, #4]
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	4093      	lsls	r3, r2
 800d7d0:	608b      	str	r3, [r1, #8]
 800d7d2:	4620      	mov	r0, r4
 800d7d4:	f001 f83c 	bl	800e850 <_Bfree>
 800d7d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7da:	2200      	movs	r2, #0
 800d7dc:	601a      	str	r2, [r3, #0]
 800d7de:	1e3b      	subs	r3, r7, #0
 800d7e0:	bfaa      	itet	ge
 800d7e2:	2300      	movge	r3, #0
 800d7e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d7e8:	f8c8 3000 	strge.w	r3, [r8]
 800d7ec:	4b9a      	ldr	r3, [pc, #616]	; (800da58 <_dtoa_r+0x2d8>)
 800d7ee:	bfbc      	itt	lt
 800d7f0:	2201      	movlt	r2, #1
 800d7f2:	f8c8 2000 	strlt.w	r2, [r8]
 800d7f6:	ea33 030b 	bics.w	r3, r3, fp
 800d7fa:	d11b      	bne.n	800d834 <_dtoa_r+0xb4>
 800d7fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d7fe:	f242 730f 	movw	r3, #9999	; 0x270f
 800d802:	6013      	str	r3, [r2, #0]
 800d804:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d808:	4333      	orrs	r3, r6
 800d80a:	f000 8592 	beq.w	800e332 <_dtoa_r+0xbb2>
 800d80e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d810:	b963      	cbnz	r3, 800d82c <_dtoa_r+0xac>
 800d812:	4b92      	ldr	r3, [pc, #584]	; (800da5c <_dtoa_r+0x2dc>)
 800d814:	e022      	b.n	800d85c <_dtoa_r+0xdc>
 800d816:	4b92      	ldr	r3, [pc, #584]	; (800da60 <_dtoa_r+0x2e0>)
 800d818:	9301      	str	r3, [sp, #4]
 800d81a:	3308      	adds	r3, #8
 800d81c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d81e:	6013      	str	r3, [r2, #0]
 800d820:	9801      	ldr	r0, [sp, #4]
 800d822:	b013      	add	sp, #76	; 0x4c
 800d824:	ecbd 8b04 	vpop	{d8-d9}
 800d828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d82c:	4b8b      	ldr	r3, [pc, #556]	; (800da5c <_dtoa_r+0x2dc>)
 800d82e:	9301      	str	r3, [sp, #4]
 800d830:	3303      	adds	r3, #3
 800d832:	e7f3      	b.n	800d81c <_dtoa_r+0x9c>
 800d834:	2200      	movs	r2, #0
 800d836:	2300      	movs	r3, #0
 800d838:	4650      	mov	r0, sl
 800d83a:	4659      	mov	r1, fp
 800d83c:	f7f3 f944 	bl	8000ac8 <__aeabi_dcmpeq>
 800d840:	ec4b ab19 	vmov	d9, sl, fp
 800d844:	4680      	mov	r8, r0
 800d846:	b158      	cbz	r0, 800d860 <_dtoa_r+0xe0>
 800d848:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d84a:	2301      	movs	r3, #1
 800d84c:	6013      	str	r3, [r2, #0]
 800d84e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d850:	2b00      	cmp	r3, #0
 800d852:	f000 856b 	beq.w	800e32c <_dtoa_r+0xbac>
 800d856:	4883      	ldr	r0, [pc, #524]	; (800da64 <_dtoa_r+0x2e4>)
 800d858:	6018      	str	r0, [r3, #0]
 800d85a:	1e43      	subs	r3, r0, #1
 800d85c:	9301      	str	r3, [sp, #4]
 800d85e:	e7df      	b.n	800d820 <_dtoa_r+0xa0>
 800d860:	ec4b ab10 	vmov	d0, sl, fp
 800d864:	aa10      	add	r2, sp, #64	; 0x40
 800d866:	a911      	add	r1, sp, #68	; 0x44
 800d868:	4620      	mov	r0, r4
 800d86a:	f001 fad9 	bl	800ee20 <__d2b>
 800d86e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d872:	ee08 0a10 	vmov	s16, r0
 800d876:	2d00      	cmp	r5, #0
 800d878:	f000 8084 	beq.w	800d984 <_dtoa_r+0x204>
 800d87c:	ee19 3a90 	vmov	r3, s19
 800d880:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d884:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d888:	4656      	mov	r6, sl
 800d88a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d88e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d892:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d896:	4b74      	ldr	r3, [pc, #464]	; (800da68 <_dtoa_r+0x2e8>)
 800d898:	2200      	movs	r2, #0
 800d89a:	4630      	mov	r0, r6
 800d89c:	4639      	mov	r1, r7
 800d89e:	f7f2 fcf3 	bl	8000288 <__aeabi_dsub>
 800d8a2:	a365      	add	r3, pc, #404	; (adr r3, 800da38 <_dtoa_r+0x2b8>)
 800d8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a8:	f7f2 fea6 	bl	80005f8 <__aeabi_dmul>
 800d8ac:	a364      	add	r3, pc, #400	; (adr r3, 800da40 <_dtoa_r+0x2c0>)
 800d8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b2:	f7f2 fceb 	bl	800028c <__adddf3>
 800d8b6:	4606      	mov	r6, r0
 800d8b8:	4628      	mov	r0, r5
 800d8ba:	460f      	mov	r7, r1
 800d8bc:	f7f2 fe32 	bl	8000524 <__aeabi_i2d>
 800d8c0:	a361      	add	r3, pc, #388	; (adr r3, 800da48 <_dtoa_r+0x2c8>)
 800d8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c6:	f7f2 fe97 	bl	80005f8 <__aeabi_dmul>
 800d8ca:	4602      	mov	r2, r0
 800d8cc:	460b      	mov	r3, r1
 800d8ce:	4630      	mov	r0, r6
 800d8d0:	4639      	mov	r1, r7
 800d8d2:	f7f2 fcdb 	bl	800028c <__adddf3>
 800d8d6:	4606      	mov	r6, r0
 800d8d8:	460f      	mov	r7, r1
 800d8da:	f7f3 f93d 	bl	8000b58 <__aeabi_d2iz>
 800d8de:	2200      	movs	r2, #0
 800d8e0:	9000      	str	r0, [sp, #0]
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	4630      	mov	r0, r6
 800d8e6:	4639      	mov	r1, r7
 800d8e8:	f7f3 f8f8 	bl	8000adc <__aeabi_dcmplt>
 800d8ec:	b150      	cbz	r0, 800d904 <_dtoa_r+0x184>
 800d8ee:	9800      	ldr	r0, [sp, #0]
 800d8f0:	f7f2 fe18 	bl	8000524 <__aeabi_i2d>
 800d8f4:	4632      	mov	r2, r6
 800d8f6:	463b      	mov	r3, r7
 800d8f8:	f7f3 f8e6 	bl	8000ac8 <__aeabi_dcmpeq>
 800d8fc:	b910      	cbnz	r0, 800d904 <_dtoa_r+0x184>
 800d8fe:	9b00      	ldr	r3, [sp, #0]
 800d900:	3b01      	subs	r3, #1
 800d902:	9300      	str	r3, [sp, #0]
 800d904:	9b00      	ldr	r3, [sp, #0]
 800d906:	2b16      	cmp	r3, #22
 800d908:	d85a      	bhi.n	800d9c0 <_dtoa_r+0x240>
 800d90a:	9a00      	ldr	r2, [sp, #0]
 800d90c:	4b57      	ldr	r3, [pc, #348]	; (800da6c <_dtoa_r+0x2ec>)
 800d90e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d916:	ec51 0b19 	vmov	r0, r1, d9
 800d91a:	f7f3 f8df 	bl	8000adc <__aeabi_dcmplt>
 800d91e:	2800      	cmp	r0, #0
 800d920:	d050      	beq.n	800d9c4 <_dtoa_r+0x244>
 800d922:	9b00      	ldr	r3, [sp, #0]
 800d924:	3b01      	subs	r3, #1
 800d926:	9300      	str	r3, [sp, #0]
 800d928:	2300      	movs	r3, #0
 800d92a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d92c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d92e:	1b5d      	subs	r5, r3, r5
 800d930:	1e6b      	subs	r3, r5, #1
 800d932:	9305      	str	r3, [sp, #20]
 800d934:	bf45      	ittet	mi
 800d936:	f1c5 0301 	rsbmi	r3, r5, #1
 800d93a:	9304      	strmi	r3, [sp, #16]
 800d93c:	2300      	movpl	r3, #0
 800d93e:	2300      	movmi	r3, #0
 800d940:	bf4c      	ite	mi
 800d942:	9305      	strmi	r3, [sp, #20]
 800d944:	9304      	strpl	r3, [sp, #16]
 800d946:	9b00      	ldr	r3, [sp, #0]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	db3d      	blt.n	800d9c8 <_dtoa_r+0x248>
 800d94c:	9b05      	ldr	r3, [sp, #20]
 800d94e:	9a00      	ldr	r2, [sp, #0]
 800d950:	920a      	str	r2, [sp, #40]	; 0x28
 800d952:	4413      	add	r3, r2
 800d954:	9305      	str	r3, [sp, #20]
 800d956:	2300      	movs	r3, #0
 800d958:	9307      	str	r3, [sp, #28]
 800d95a:	9b06      	ldr	r3, [sp, #24]
 800d95c:	2b09      	cmp	r3, #9
 800d95e:	f200 8089 	bhi.w	800da74 <_dtoa_r+0x2f4>
 800d962:	2b05      	cmp	r3, #5
 800d964:	bfc4      	itt	gt
 800d966:	3b04      	subgt	r3, #4
 800d968:	9306      	strgt	r3, [sp, #24]
 800d96a:	9b06      	ldr	r3, [sp, #24]
 800d96c:	f1a3 0302 	sub.w	r3, r3, #2
 800d970:	bfcc      	ite	gt
 800d972:	2500      	movgt	r5, #0
 800d974:	2501      	movle	r5, #1
 800d976:	2b03      	cmp	r3, #3
 800d978:	f200 8087 	bhi.w	800da8a <_dtoa_r+0x30a>
 800d97c:	e8df f003 	tbb	[pc, r3]
 800d980:	59383a2d 	.word	0x59383a2d
 800d984:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d988:	441d      	add	r5, r3
 800d98a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d98e:	2b20      	cmp	r3, #32
 800d990:	bfc1      	itttt	gt
 800d992:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d996:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d99a:	fa0b f303 	lslgt.w	r3, fp, r3
 800d99e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d9a2:	bfda      	itte	le
 800d9a4:	f1c3 0320 	rsble	r3, r3, #32
 800d9a8:	fa06 f003 	lslle.w	r0, r6, r3
 800d9ac:	4318      	orrgt	r0, r3
 800d9ae:	f7f2 fda9 	bl	8000504 <__aeabi_ui2d>
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	4606      	mov	r6, r0
 800d9b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d9ba:	3d01      	subs	r5, #1
 800d9bc:	930e      	str	r3, [sp, #56]	; 0x38
 800d9be:	e76a      	b.n	800d896 <_dtoa_r+0x116>
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	e7b2      	b.n	800d92a <_dtoa_r+0x1aa>
 800d9c4:	900b      	str	r0, [sp, #44]	; 0x2c
 800d9c6:	e7b1      	b.n	800d92c <_dtoa_r+0x1ac>
 800d9c8:	9b04      	ldr	r3, [sp, #16]
 800d9ca:	9a00      	ldr	r2, [sp, #0]
 800d9cc:	1a9b      	subs	r3, r3, r2
 800d9ce:	9304      	str	r3, [sp, #16]
 800d9d0:	4253      	negs	r3, r2
 800d9d2:	9307      	str	r3, [sp, #28]
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	930a      	str	r3, [sp, #40]	; 0x28
 800d9d8:	e7bf      	b.n	800d95a <_dtoa_r+0x1da>
 800d9da:	2300      	movs	r3, #0
 800d9dc:	9308      	str	r3, [sp, #32]
 800d9de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	dc55      	bgt.n	800da90 <_dtoa_r+0x310>
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d9ea:	461a      	mov	r2, r3
 800d9ec:	9209      	str	r2, [sp, #36]	; 0x24
 800d9ee:	e00c      	b.n	800da0a <_dtoa_r+0x28a>
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	e7f3      	b.n	800d9dc <_dtoa_r+0x25c>
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9f8:	9308      	str	r3, [sp, #32]
 800d9fa:	9b00      	ldr	r3, [sp, #0]
 800d9fc:	4413      	add	r3, r2
 800d9fe:	9302      	str	r3, [sp, #8]
 800da00:	3301      	adds	r3, #1
 800da02:	2b01      	cmp	r3, #1
 800da04:	9303      	str	r3, [sp, #12]
 800da06:	bfb8      	it	lt
 800da08:	2301      	movlt	r3, #1
 800da0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800da0c:	2200      	movs	r2, #0
 800da0e:	6042      	str	r2, [r0, #4]
 800da10:	2204      	movs	r2, #4
 800da12:	f102 0614 	add.w	r6, r2, #20
 800da16:	429e      	cmp	r6, r3
 800da18:	6841      	ldr	r1, [r0, #4]
 800da1a:	d93d      	bls.n	800da98 <_dtoa_r+0x318>
 800da1c:	4620      	mov	r0, r4
 800da1e:	f000 fed7 	bl	800e7d0 <_Balloc>
 800da22:	9001      	str	r0, [sp, #4]
 800da24:	2800      	cmp	r0, #0
 800da26:	d13b      	bne.n	800daa0 <_dtoa_r+0x320>
 800da28:	4b11      	ldr	r3, [pc, #68]	; (800da70 <_dtoa_r+0x2f0>)
 800da2a:	4602      	mov	r2, r0
 800da2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800da30:	e6c0      	b.n	800d7b4 <_dtoa_r+0x34>
 800da32:	2301      	movs	r3, #1
 800da34:	e7df      	b.n	800d9f6 <_dtoa_r+0x276>
 800da36:	bf00      	nop
 800da38:	636f4361 	.word	0x636f4361
 800da3c:	3fd287a7 	.word	0x3fd287a7
 800da40:	8b60c8b3 	.word	0x8b60c8b3
 800da44:	3fc68a28 	.word	0x3fc68a28
 800da48:	509f79fb 	.word	0x509f79fb
 800da4c:	3fd34413 	.word	0x3fd34413
 800da50:	0800f73d 	.word	0x0800f73d
 800da54:	0800f754 	.word	0x0800f754
 800da58:	7ff00000 	.word	0x7ff00000
 800da5c:	0800f739 	.word	0x0800f739
 800da60:	0800f730 	.word	0x0800f730
 800da64:	0800f70d 	.word	0x0800f70d
 800da68:	3ff80000 	.word	0x3ff80000
 800da6c:	0800f8a8 	.word	0x0800f8a8
 800da70:	0800f7af 	.word	0x0800f7af
 800da74:	2501      	movs	r5, #1
 800da76:	2300      	movs	r3, #0
 800da78:	9306      	str	r3, [sp, #24]
 800da7a:	9508      	str	r5, [sp, #32]
 800da7c:	f04f 33ff 	mov.w	r3, #4294967295
 800da80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800da84:	2200      	movs	r2, #0
 800da86:	2312      	movs	r3, #18
 800da88:	e7b0      	b.n	800d9ec <_dtoa_r+0x26c>
 800da8a:	2301      	movs	r3, #1
 800da8c:	9308      	str	r3, [sp, #32]
 800da8e:	e7f5      	b.n	800da7c <_dtoa_r+0x2fc>
 800da90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800da96:	e7b8      	b.n	800da0a <_dtoa_r+0x28a>
 800da98:	3101      	adds	r1, #1
 800da9a:	6041      	str	r1, [r0, #4]
 800da9c:	0052      	lsls	r2, r2, #1
 800da9e:	e7b8      	b.n	800da12 <_dtoa_r+0x292>
 800daa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800daa2:	9a01      	ldr	r2, [sp, #4]
 800daa4:	601a      	str	r2, [r3, #0]
 800daa6:	9b03      	ldr	r3, [sp, #12]
 800daa8:	2b0e      	cmp	r3, #14
 800daaa:	f200 809d 	bhi.w	800dbe8 <_dtoa_r+0x468>
 800daae:	2d00      	cmp	r5, #0
 800dab0:	f000 809a 	beq.w	800dbe8 <_dtoa_r+0x468>
 800dab4:	9b00      	ldr	r3, [sp, #0]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	dd32      	ble.n	800db20 <_dtoa_r+0x3a0>
 800daba:	4ab7      	ldr	r2, [pc, #732]	; (800dd98 <_dtoa_r+0x618>)
 800dabc:	f003 030f 	and.w	r3, r3, #15
 800dac0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dac4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dac8:	9b00      	ldr	r3, [sp, #0]
 800daca:	05d8      	lsls	r0, r3, #23
 800dacc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800dad0:	d516      	bpl.n	800db00 <_dtoa_r+0x380>
 800dad2:	4bb2      	ldr	r3, [pc, #712]	; (800dd9c <_dtoa_r+0x61c>)
 800dad4:	ec51 0b19 	vmov	r0, r1, d9
 800dad8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dadc:	f7f2 feb6 	bl	800084c <__aeabi_ddiv>
 800dae0:	f007 070f 	and.w	r7, r7, #15
 800dae4:	4682      	mov	sl, r0
 800dae6:	468b      	mov	fp, r1
 800dae8:	2503      	movs	r5, #3
 800daea:	4eac      	ldr	r6, [pc, #688]	; (800dd9c <_dtoa_r+0x61c>)
 800daec:	b957      	cbnz	r7, 800db04 <_dtoa_r+0x384>
 800daee:	4642      	mov	r2, r8
 800daf0:	464b      	mov	r3, r9
 800daf2:	4650      	mov	r0, sl
 800daf4:	4659      	mov	r1, fp
 800daf6:	f7f2 fea9 	bl	800084c <__aeabi_ddiv>
 800dafa:	4682      	mov	sl, r0
 800dafc:	468b      	mov	fp, r1
 800dafe:	e028      	b.n	800db52 <_dtoa_r+0x3d2>
 800db00:	2502      	movs	r5, #2
 800db02:	e7f2      	b.n	800daea <_dtoa_r+0x36a>
 800db04:	07f9      	lsls	r1, r7, #31
 800db06:	d508      	bpl.n	800db1a <_dtoa_r+0x39a>
 800db08:	4640      	mov	r0, r8
 800db0a:	4649      	mov	r1, r9
 800db0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800db10:	f7f2 fd72 	bl	80005f8 <__aeabi_dmul>
 800db14:	3501      	adds	r5, #1
 800db16:	4680      	mov	r8, r0
 800db18:	4689      	mov	r9, r1
 800db1a:	107f      	asrs	r7, r7, #1
 800db1c:	3608      	adds	r6, #8
 800db1e:	e7e5      	b.n	800daec <_dtoa_r+0x36c>
 800db20:	f000 809b 	beq.w	800dc5a <_dtoa_r+0x4da>
 800db24:	9b00      	ldr	r3, [sp, #0]
 800db26:	4f9d      	ldr	r7, [pc, #628]	; (800dd9c <_dtoa_r+0x61c>)
 800db28:	425e      	negs	r6, r3
 800db2a:	4b9b      	ldr	r3, [pc, #620]	; (800dd98 <_dtoa_r+0x618>)
 800db2c:	f006 020f 	and.w	r2, r6, #15
 800db30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db38:	ec51 0b19 	vmov	r0, r1, d9
 800db3c:	f7f2 fd5c 	bl	80005f8 <__aeabi_dmul>
 800db40:	1136      	asrs	r6, r6, #4
 800db42:	4682      	mov	sl, r0
 800db44:	468b      	mov	fp, r1
 800db46:	2300      	movs	r3, #0
 800db48:	2502      	movs	r5, #2
 800db4a:	2e00      	cmp	r6, #0
 800db4c:	d17a      	bne.n	800dc44 <_dtoa_r+0x4c4>
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d1d3      	bne.n	800dafa <_dtoa_r+0x37a>
 800db52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db54:	2b00      	cmp	r3, #0
 800db56:	f000 8082 	beq.w	800dc5e <_dtoa_r+0x4de>
 800db5a:	4b91      	ldr	r3, [pc, #580]	; (800dda0 <_dtoa_r+0x620>)
 800db5c:	2200      	movs	r2, #0
 800db5e:	4650      	mov	r0, sl
 800db60:	4659      	mov	r1, fp
 800db62:	f7f2 ffbb 	bl	8000adc <__aeabi_dcmplt>
 800db66:	2800      	cmp	r0, #0
 800db68:	d079      	beq.n	800dc5e <_dtoa_r+0x4de>
 800db6a:	9b03      	ldr	r3, [sp, #12]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d076      	beq.n	800dc5e <_dtoa_r+0x4de>
 800db70:	9b02      	ldr	r3, [sp, #8]
 800db72:	2b00      	cmp	r3, #0
 800db74:	dd36      	ble.n	800dbe4 <_dtoa_r+0x464>
 800db76:	9b00      	ldr	r3, [sp, #0]
 800db78:	4650      	mov	r0, sl
 800db7a:	4659      	mov	r1, fp
 800db7c:	1e5f      	subs	r7, r3, #1
 800db7e:	2200      	movs	r2, #0
 800db80:	4b88      	ldr	r3, [pc, #544]	; (800dda4 <_dtoa_r+0x624>)
 800db82:	f7f2 fd39 	bl	80005f8 <__aeabi_dmul>
 800db86:	9e02      	ldr	r6, [sp, #8]
 800db88:	4682      	mov	sl, r0
 800db8a:	468b      	mov	fp, r1
 800db8c:	3501      	adds	r5, #1
 800db8e:	4628      	mov	r0, r5
 800db90:	f7f2 fcc8 	bl	8000524 <__aeabi_i2d>
 800db94:	4652      	mov	r2, sl
 800db96:	465b      	mov	r3, fp
 800db98:	f7f2 fd2e 	bl	80005f8 <__aeabi_dmul>
 800db9c:	4b82      	ldr	r3, [pc, #520]	; (800dda8 <_dtoa_r+0x628>)
 800db9e:	2200      	movs	r2, #0
 800dba0:	f7f2 fb74 	bl	800028c <__adddf3>
 800dba4:	46d0      	mov	r8, sl
 800dba6:	46d9      	mov	r9, fp
 800dba8:	4682      	mov	sl, r0
 800dbaa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800dbae:	2e00      	cmp	r6, #0
 800dbb0:	d158      	bne.n	800dc64 <_dtoa_r+0x4e4>
 800dbb2:	4b7e      	ldr	r3, [pc, #504]	; (800ddac <_dtoa_r+0x62c>)
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	4640      	mov	r0, r8
 800dbb8:	4649      	mov	r1, r9
 800dbba:	f7f2 fb65 	bl	8000288 <__aeabi_dsub>
 800dbbe:	4652      	mov	r2, sl
 800dbc0:	465b      	mov	r3, fp
 800dbc2:	4680      	mov	r8, r0
 800dbc4:	4689      	mov	r9, r1
 800dbc6:	f7f2 ffa7 	bl	8000b18 <__aeabi_dcmpgt>
 800dbca:	2800      	cmp	r0, #0
 800dbcc:	f040 8295 	bne.w	800e0fa <_dtoa_r+0x97a>
 800dbd0:	4652      	mov	r2, sl
 800dbd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800dbd6:	4640      	mov	r0, r8
 800dbd8:	4649      	mov	r1, r9
 800dbda:	f7f2 ff7f 	bl	8000adc <__aeabi_dcmplt>
 800dbde:	2800      	cmp	r0, #0
 800dbe0:	f040 8289 	bne.w	800e0f6 <_dtoa_r+0x976>
 800dbe4:	ec5b ab19 	vmov	sl, fp, d9
 800dbe8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	f2c0 8148 	blt.w	800de80 <_dtoa_r+0x700>
 800dbf0:	9a00      	ldr	r2, [sp, #0]
 800dbf2:	2a0e      	cmp	r2, #14
 800dbf4:	f300 8144 	bgt.w	800de80 <_dtoa_r+0x700>
 800dbf8:	4b67      	ldr	r3, [pc, #412]	; (800dd98 <_dtoa_r+0x618>)
 800dbfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dbfe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dc02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	f280 80d5 	bge.w	800ddb4 <_dtoa_r+0x634>
 800dc0a:	9b03      	ldr	r3, [sp, #12]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	f300 80d1 	bgt.w	800ddb4 <_dtoa_r+0x634>
 800dc12:	f040 826f 	bne.w	800e0f4 <_dtoa_r+0x974>
 800dc16:	4b65      	ldr	r3, [pc, #404]	; (800ddac <_dtoa_r+0x62c>)
 800dc18:	2200      	movs	r2, #0
 800dc1a:	4640      	mov	r0, r8
 800dc1c:	4649      	mov	r1, r9
 800dc1e:	f7f2 fceb 	bl	80005f8 <__aeabi_dmul>
 800dc22:	4652      	mov	r2, sl
 800dc24:	465b      	mov	r3, fp
 800dc26:	f7f2 ff6d 	bl	8000b04 <__aeabi_dcmpge>
 800dc2a:	9e03      	ldr	r6, [sp, #12]
 800dc2c:	4637      	mov	r7, r6
 800dc2e:	2800      	cmp	r0, #0
 800dc30:	f040 8245 	bne.w	800e0be <_dtoa_r+0x93e>
 800dc34:	9d01      	ldr	r5, [sp, #4]
 800dc36:	2331      	movs	r3, #49	; 0x31
 800dc38:	f805 3b01 	strb.w	r3, [r5], #1
 800dc3c:	9b00      	ldr	r3, [sp, #0]
 800dc3e:	3301      	adds	r3, #1
 800dc40:	9300      	str	r3, [sp, #0]
 800dc42:	e240      	b.n	800e0c6 <_dtoa_r+0x946>
 800dc44:	07f2      	lsls	r2, r6, #31
 800dc46:	d505      	bpl.n	800dc54 <_dtoa_r+0x4d4>
 800dc48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc4c:	f7f2 fcd4 	bl	80005f8 <__aeabi_dmul>
 800dc50:	3501      	adds	r5, #1
 800dc52:	2301      	movs	r3, #1
 800dc54:	1076      	asrs	r6, r6, #1
 800dc56:	3708      	adds	r7, #8
 800dc58:	e777      	b.n	800db4a <_dtoa_r+0x3ca>
 800dc5a:	2502      	movs	r5, #2
 800dc5c:	e779      	b.n	800db52 <_dtoa_r+0x3d2>
 800dc5e:	9f00      	ldr	r7, [sp, #0]
 800dc60:	9e03      	ldr	r6, [sp, #12]
 800dc62:	e794      	b.n	800db8e <_dtoa_r+0x40e>
 800dc64:	9901      	ldr	r1, [sp, #4]
 800dc66:	4b4c      	ldr	r3, [pc, #304]	; (800dd98 <_dtoa_r+0x618>)
 800dc68:	4431      	add	r1, r6
 800dc6a:	910d      	str	r1, [sp, #52]	; 0x34
 800dc6c:	9908      	ldr	r1, [sp, #32]
 800dc6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dc72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dc76:	2900      	cmp	r1, #0
 800dc78:	d043      	beq.n	800dd02 <_dtoa_r+0x582>
 800dc7a:	494d      	ldr	r1, [pc, #308]	; (800ddb0 <_dtoa_r+0x630>)
 800dc7c:	2000      	movs	r0, #0
 800dc7e:	f7f2 fde5 	bl	800084c <__aeabi_ddiv>
 800dc82:	4652      	mov	r2, sl
 800dc84:	465b      	mov	r3, fp
 800dc86:	f7f2 faff 	bl	8000288 <__aeabi_dsub>
 800dc8a:	9d01      	ldr	r5, [sp, #4]
 800dc8c:	4682      	mov	sl, r0
 800dc8e:	468b      	mov	fp, r1
 800dc90:	4649      	mov	r1, r9
 800dc92:	4640      	mov	r0, r8
 800dc94:	f7f2 ff60 	bl	8000b58 <__aeabi_d2iz>
 800dc98:	4606      	mov	r6, r0
 800dc9a:	f7f2 fc43 	bl	8000524 <__aeabi_i2d>
 800dc9e:	4602      	mov	r2, r0
 800dca0:	460b      	mov	r3, r1
 800dca2:	4640      	mov	r0, r8
 800dca4:	4649      	mov	r1, r9
 800dca6:	f7f2 faef 	bl	8000288 <__aeabi_dsub>
 800dcaa:	3630      	adds	r6, #48	; 0x30
 800dcac:	f805 6b01 	strb.w	r6, [r5], #1
 800dcb0:	4652      	mov	r2, sl
 800dcb2:	465b      	mov	r3, fp
 800dcb4:	4680      	mov	r8, r0
 800dcb6:	4689      	mov	r9, r1
 800dcb8:	f7f2 ff10 	bl	8000adc <__aeabi_dcmplt>
 800dcbc:	2800      	cmp	r0, #0
 800dcbe:	d163      	bne.n	800dd88 <_dtoa_r+0x608>
 800dcc0:	4642      	mov	r2, r8
 800dcc2:	464b      	mov	r3, r9
 800dcc4:	4936      	ldr	r1, [pc, #216]	; (800dda0 <_dtoa_r+0x620>)
 800dcc6:	2000      	movs	r0, #0
 800dcc8:	f7f2 fade 	bl	8000288 <__aeabi_dsub>
 800dccc:	4652      	mov	r2, sl
 800dcce:	465b      	mov	r3, fp
 800dcd0:	f7f2 ff04 	bl	8000adc <__aeabi_dcmplt>
 800dcd4:	2800      	cmp	r0, #0
 800dcd6:	f040 80b5 	bne.w	800de44 <_dtoa_r+0x6c4>
 800dcda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dcdc:	429d      	cmp	r5, r3
 800dcde:	d081      	beq.n	800dbe4 <_dtoa_r+0x464>
 800dce0:	4b30      	ldr	r3, [pc, #192]	; (800dda4 <_dtoa_r+0x624>)
 800dce2:	2200      	movs	r2, #0
 800dce4:	4650      	mov	r0, sl
 800dce6:	4659      	mov	r1, fp
 800dce8:	f7f2 fc86 	bl	80005f8 <__aeabi_dmul>
 800dcec:	4b2d      	ldr	r3, [pc, #180]	; (800dda4 <_dtoa_r+0x624>)
 800dcee:	4682      	mov	sl, r0
 800dcf0:	468b      	mov	fp, r1
 800dcf2:	4640      	mov	r0, r8
 800dcf4:	4649      	mov	r1, r9
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	f7f2 fc7e 	bl	80005f8 <__aeabi_dmul>
 800dcfc:	4680      	mov	r8, r0
 800dcfe:	4689      	mov	r9, r1
 800dd00:	e7c6      	b.n	800dc90 <_dtoa_r+0x510>
 800dd02:	4650      	mov	r0, sl
 800dd04:	4659      	mov	r1, fp
 800dd06:	f7f2 fc77 	bl	80005f8 <__aeabi_dmul>
 800dd0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd0c:	9d01      	ldr	r5, [sp, #4]
 800dd0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd10:	4682      	mov	sl, r0
 800dd12:	468b      	mov	fp, r1
 800dd14:	4649      	mov	r1, r9
 800dd16:	4640      	mov	r0, r8
 800dd18:	f7f2 ff1e 	bl	8000b58 <__aeabi_d2iz>
 800dd1c:	4606      	mov	r6, r0
 800dd1e:	f7f2 fc01 	bl	8000524 <__aeabi_i2d>
 800dd22:	3630      	adds	r6, #48	; 0x30
 800dd24:	4602      	mov	r2, r0
 800dd26:	460b      	mov	r3, r1
 800dd28:	4640      	mov	r0, r8
 800dd2a:	4649      	mov	r1, r9
 800dd2c:	f7f2 faac 	bl	8000288 <__aeabi_dsub>
 800dd30:	f805 6b01 	strb.w	r6, [r5], #1
 800dd34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd36:	429d      	cmp	r5, r3
 800dd38:	4680      	mov	r8, r0
 800dd3a:	4689      	mov	r9, r1
 800dd3c:	f04f 0200 	mov.w	r2, #0
 800dd40:	d124      	bne.n	800dd8c <_dtoa_r+0x60c>
 800dd42:	4b1b      	ldr	r3, [pc, #108]	; (800ddb0 <_dtoa_r+0x630>)
 800dd44:	4650      	mov	r0, sl
 800dd46:	4659      	mov	r1, fp
 800dd48:	f7f2 faa0 	bl	800028c <__adddf3>
 800dd4c:	4602      	mov	r2, r0
 800dd4e:	460b      	mov	r3, r1
 800dd50:	4640      	mov	r0, r8
 800dd52:	4649      	mov	r1, r9
 800dd54:	f7f2 fee0 	bl	8000b18 <__aeabi_dcmpgt>
 800dd58:	2800      	cmp	r0, #0
 800dd5a:	d173      	bne.n	800de44 <_dtoa_r+0x6c4>
 800dd5c:	4652      	mov	r2, sl
 800dd5e:	465b      	mov	r3, fp
 800dd60:	4913      	ldr	r1, [pc, #76]	; (800ddb0 <_dtoa_r+0x630>)
 800dd62:	2000      	movs	r0, #0
 800dd64:	f7f2 fa90 	bl	8000288 <__aeabi_dsub>
 800dd68:	4602      	mov	r2, r0
 800dd6a:	460b      	mov	r3, r1
 800dd6c:	4640      	mov	r0, r8
 800dd6e:	4649      	mov	r1, r9
 800dd70:	f7f2 feb4 	bl	8000adc <__aeabi_dcmplt>
 800dd74:	2800      	cmp	r0, #0
 800dd76:	f43f af35 	beq.w	800dbe4 <_dtoa_r+0x464>
 800dd7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dd7c:	1e6b      	subs	r3, r5, #1
 800dd7e:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd80:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dd84:	2b30      	cmp	r3, #48	; 0x30
 800dd86:	d0f8      	beq.n	800dd7a <_dtoa_r+0x5fa>
 800dd88:	9700      	str	r7, [sp, #0]
 800dd8a:	e049      	b.n	800de20 <_dtoa_r+0x6a0>
 800dd8c:	4b05      	ldr	r3, [pc, #20]	; (800dda4 <_dtoa_r+0x624>)
 800dd8e:	f7f2 fc33 	bl	80005f8 <__aeabi_dmul>
 800dd92:	4680      	mov	r8, r0
 800dd94:	4689      	mov	r9, r1
 800dd96:	e7bd      	b.n	800dd14 <_dtoa_r+0x594>
 800dd98:	0800f8a8 	.word	0x0800f8a8
 800dd9c:	0800f880 	.word	0x0800f880
 800dda0:	3ff00000 	.word	0x3ff00000
 800dda4:	40240000 	.word	0x40240000
 800dda8:	401c0000 	.word	0x401c0000
 800ddac:	40140000 	.word	0x40140000
 800ddb0:	3fe00000 	.word	0x3fe00000
 800ddb4:	9d01      	ldr	r5, [sp, #4]
 800ddb6:	4656      	mov	r6, sl
 800ddb8:	465f      	mov	r7, fp
 800ddba:	4642      	mov	r2, r8
 800ddbc:	464b      	mov	r3, r9
 800ddbe:	4630      	mov	r0, r6
 800ddc0:	4639      	mov	r1, r7
 800ddc2:	f7f2 fd43 	bl	800084c <__aeabi_ddiv>
 800ddc6:	f7f2 fec7 	bl	8000b58 <__aeabi_d2iz>
 800ddca:	4682      	mov	sl, r0
 800ddcc:	f7f2 fbaa 	bl	8000524 <__aeabi_i2d>
 800ddd0:	4642      	mov	r2, r8
 800ddd2:	464b      	mov	r3, r9
 800ddd4:	f7f2 fc10 	bl	80005f8 <__aeabi_dmul>
 800ddd8:	4602      	mov	r2, r0
 800ddda:	460b      	mov	r3, r1
 800dddc:	4630      	mov	r0, r6
 800ddde:	4639      	mov	r1, r7
 800dde0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800dde4:	f7f2 fa50 	bl	8000288 <__aeabi_dsub>
 800dde8:	f805 6b01 	strb.w	r6, [r5], #1
 800ddec:	9e01      	ldr	r6, [sp, #4]
 800ddee:	9f03      	ldr	r7, [sp, #12]
 800ddf0:	1bae      	subs	r6, r5, r6
 800ddf2:	42b7      	cmp	r7, r6
 800ddf4:	4602      	mov	r2, r0
 800ddf6:	460b      	mov	r3, r1
 800ddf8:	d135      	bne.n	800de66 <_dtoa_r+0x6e6>
 800ddfa:	f7f2 fa47 	bl	800028c <__adddf3>
 800ddfe:	4642      	mov	r2, r8
 800de00:	464b      	mov	r3, r9
 800de02:	4606      	mov	r6, r0
 800de04:	460f      	mov	r7, r1
 800de06:	f7f2 fe87 	bl	8000b18 <__aeabi_dcmpgt>
 800de0a:	b9d0      	cbnz	r0, 800de42 <_dtoa_r+0x6c2>
 800de0c:	4642      	mov	r2, r8
 800de0e:	464b      	mov	r3, r9
 800de10:	4630      	mov	r0, r6
 800de12:	4639      	mov	r1, r7
 800de14:	f7f2 fe58 	bl	8000ac8 <__aeabi_dcmpeq>
 800de18:	b110      	cbz	r0, 800de20 <_dtoa_r+0x6a0>
 800de1a:	f01a 0f01 	tst.w	sl, #1
 800de1e:	d110      	bne.n	800de42 <_dtoa_r+0x6c2>
 800de20:	4620      	mov	r0, r4
 800de22:	ee18 1a10 	vmov	r1, s16
 800de26:	f000 fd13 	bl	800e850 <_Bfree>
 800de2a:	2300      	movs	r3, #0
 800de2c:	9800      	ldr	r0, [sp, #0]
 800de2e:	702b      	strb	r3, [r5, #0]
 800de30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de32:	3001      	adds	r0, #1
 800de34:	6018      	str	r0, [r3, #0]
 800de36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de38:	2b00      	cmp	r3, #0
 800de3a:	f43f acf1 	beq.w	800d820 <_dtoa_r+0xa0>
 800de3e:	601d      	str	r5, [r3, #0]
 800de40:	e4ee      	b.n	800d820 <_dtoa_r+0xa0>
 800de42:	9f00      	ldr	r7, [sp, #0]
 800de44:	462b      	mov	r3, r5
 800de46:	461d      	mov	r5, r3
 800de48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de4c:	2a39      	cmp	r2, #57	; 0x39
 800de4e:	d106      	bne.n	800de5e <_dtoa_r+0x6de>
 800de50:	9a01      	ldr	r2, [sp, #4]
 800de52:	429a      	cmp	r2, r3
 800de54:	d1f7      	bne.n	800de46 <_dtoa_r+0x6c6>
 800de56:	9901      	ldr	r1, [sp, #4]
 800de58:	2230      	movs	r2, #48	; 0x30
 800de5a:	3701      	adds	r7, #1
 800de5c:	700a      	strb	r2, [r1, #0]
 800de5e:	781a      	ldrb	r2, [r3, #0]
 800de60:	3201      	adds	r2, #1
 800de62:	701a      	strb	r2, [r3, #0]
 800de64:	e790      	b.n	800dd88 <_dtoa_r+0x608>
 800de66:	4ba6      	ldr	r3, [pc, #664]	; (800e100 <_dtoa_r+0x980>)
 800de68:	2200      	movs	r2, #0
 800de6a:	f7f2 fbc5 	bl	80005f8 <__aeabi_dmul>
 800de6e:	2200      	movs	r2, #0
 800de70:	2300      	movs	r3, #0
 800de72:	4606      	mov	r6, r0
 800de74:	460f      	mov	r7, r1
 800de76:	f7f2 fe27 	bl	8000ac8 <__aeabi_dcmpeq>
 800de7a:	2800      	cmp	r0, #0
 800de7c:	d09d      	beq.n	800ddba <_dtoa_r+0x63a>
 800de7e:	e7cf      	b.n	800de20 <_dtoa_r+0x6a0>
 800de80:	9a08      	ldr	r2, [sp, #32]
 800de82:	2a00      	cmp	r2, #0
 800de84:	f000 80d7 	beq.w	800e036 <_dtoa_r+0x8b6>
 800de88:	9a06      	ldr	r2, [sp, #24]
 800de8a:	2a01      	cmp	r2, #1
 800de8c:	f300 80ba 	bgt.w	800e004 <_dtoa_r+0x884>
 800de90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de92:	2a00      	cmp	r2, #0
 800de94:	f000 80b2 	beq.w	800dffc <_dtoa_r+0x87c>
 800de98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800de9c:	9e07      	ldr	r6, [sp, #28]
 800de9e:	9d04      	ldr	r5, [sp, #16]
 800dea0:	9a04      	ldr	r2, [sp, #16]
 800dea2:	441a      	add	r2, r3
 800dea4:	9204      	str	r2, [sp, #16]
 800dea6:	9a05      	ldr	r2, [sp, #20]
 800dea8:	2101      	movs	r1, #1
 800deaa:	441a      	add	r2, r3
 800deac:	4620      	mov	r0, r4
 800deae:	9205      	str	r2, [sp, #20]
 800deb0:	f000 fd86 	bl	800e9c0 <__i2b>
 800deb4:	4607      	mov	r7, r0
 800deb6:	2d00      	cmp	r5, #0
 800deb8:	dd0c      	ble.n	800ded4 <_dtoa_r+0x754>
 800deba:	9b05      	ldr	r3, [sp, #20]
 800debc:	2b00      	cmp	r3, #0
 800debe:	dd09      	ble.n	800ded4 <_dtoa_r+0x754>
 800dec0:	42ab      	cmp	r3, r5
 800dec2:	9a04      	ldr	r2, [sp, #16]
 800dec4:	bfa8      	it	ge
 800dec6:	462b      	movge	r3, r5
 800dec8:	1ad2      	subs	r2, r2, r3
 800deca:	9204      	str	r2, [sp, #16]
 800decc:	9a05      	ldr	r2, [sp, #20]
 800dece:	1aed      	subs	r5, r5, r3
 800ded0:	1ad3      	subs	r3, r2, r3
 800ded2:	9305      	str	r3, [sp, #20]
 800ded4:	9b07      	ldr	r3, [sp, #28]
 800ded6:	b31b      	cbz	r3, 800df20 <_dtoa_r+0x7a0>
 800ded8:	9b08      	ldr	r3, [sp, #32]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	f000 80af 	beq.w	800e03e <_dtoa_r+0x8be>
 800dee0:	2e00      	cmp	r6, #0
 800dee2:	dd13      	ble.n	800df0c <_dtoa_r+0x78c>
 800dee4:	4639      	mov	r1, r7
 800dee6:	4632      	mov	r2, r6
 800dee8:	4620      	mov	r0, r4
 800deea:	f000 fe29 	bl	800eb40 <__pow5mult>
 800deee:	ee18 2a10 	vmov	r2, s16
 800def2:	4601      	mov	r1, r0
 800def4:	4607      	mov	r7, r0
 800def6:	4620      	mov	r0, r4
 800def8:	f000 fd78 	bl	800e9ec <__multiply>
 800defc:	ee18 1a10 	vmov	r1, s16
 800df00:	4680      	mov	r8, r0
 800df02:	4620      	mov	r0, r4
 800df04:	f000 fca4 	bl	800e850 <_Bfree>
 800df08:	ee08 8a10 	vmov	s16, r8
 800df0c:	9b07      	ldr	r3, [sp, #28]
 800df0e:	1b9a      	subs	r2, r3, r6
 800df10:	d006      	beq.n	800df20 <_dtoa_r+0x7a0>
 800df12:	ee18 1a10 	vmov	r1, s16
 800df16:	4620      	mov	r0, r4
 800df18:	f000 fe12 	bl	800eb40 <__pow5mult>
 800df1c:	ee08 0a10 	vmov	s16, r0
 800df20:	2101      	movs	r1, #1
 800df22:	4620      	mov	r0, r4
 800df24:	f000 fd4c 	bl	800e9c0 <__i2b>
 800df28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	4606      	mov	r6, r0
 800df2e:	f340 8088 	ble.w	800e042 <_dtoa_r+0x8c2>
 800df32:	461a      	mov	r2, r3
 800df34:	4601      	mov	r1, r0
 800df36:	4620      	mov	r0, r4
 800df38:	f000 fe02 	bl	800eb40 <__pow5mult>
 800df3c:	9b06      	ldr	r3, [sp, #24]
 800df3e:	2b01      	cmp	r3, #1
 800df40:	4606      	mov	r6, r0
 800df42:	f340 8081 	ble.w	800e048 <_dtoa_r+0x8c8>
 800df46:	f04f 0800 	mov.w	r8, #0
 800df4a:	6933      	ldr	r3, [r6, #16]
 800df4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800df50:	6918      	ldr	r0, [r3, #16]
 800df52:	f000 fce5 	bl	800e920 <__hi0bits>
 800df56:	f1c0 0020 	rsb	r0, r0, #32
 800df5a:	9b05      	ldr	r3, [sp, #20]
 800df5c:	4418      	add	r0, r3
 800df5e:	f010 001f 	ands.w	r0, r0, #31
 800df62:	f000 8092 	beq.w	800e08a <_dtoa_r+0x90a>
 800df66:	f1c0 0320 	rsb	r3, r0, #32
 800df6a:	2b04      	cmp	r3, #4
 800df6c:	f340 808a 	ble.w	800e084 <_dtoa_r+0x904>
 800df70:	f1c0 001c 	rsb	r0, r0, #28
 800df74:	9b04      	ldr	r3, [sp, #16]
 800df76:	4403      	add	r3, r0
 800df78:	9304      	str	r3, [sp, #16]
 800df7a:	9b05      	ldr	r3, [sp, #20]
 800df7c:	4403      	add	r3, r0
 800df7e:	4405      	add	r5, r0
 800df80:	9305      	str	r3, [sp, #20]
 800df82:	9b04      	ldr	r3, [sp, #16]
 800df84:	2b00      	cmp	r3, #0
 800df86:	dd07      	ble.n	800df98 <_dtoa_r+0x818>
 800df88:	ee18 1a10 	vmov	r1, s16
 800df8c:	461a      	mov	r2, r3
 800df8e:	4620      	mov	r0, r4
 800df90:	f000 fe30 	bl	800ebf4 <__lshift>
 800df94:	ee08 0a10 	vmov	s16, r0
 800df98:	9b05      	ldr	r3, [sp, #20]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	dd05      	ble.n	800dfaa <_dtoa_r+0x82a>
 800df9e:	4631      	mov	r1, r6
 800dfa0:	461a      	mov	r2, r3
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	f000 fe26 	bl	800ebf4 <__lshift>
 800dfa8:	4606      	mov	r6, r0
 800dfaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d06e      	beq.n	800e08e <_dtoa_r+0x90e>
 800dfb0:	ee18 0a10 	vmov	r0, s16
 800dfb4:	4631      	mov	r1, r6
 800dfb6:	f000 fe8d 	bl	800ecd4 <__mcmp>
 800dfba:	2800      	cmp	r0, #0
 800dfbc:	da67      	bge.n	800e08e <_dtoa_r+0x90e>
 800dfbe:	9b00      	ldr	r3, [sp, #0]
 800dfc0:	3b01      	subs	r3, #1
 800dfc2:	ee18 1a10 	vmov	r1, s16
 800dfc6:	9300      	str	r3, [sp, #0]
 800dfc8:	220a      	movs	r2, #10
 800dfca:	2300      	movs	r3, #0
 800dfcc:	4620      	mov	r0, r4
 800dfce:	f000 fc61 	bl	800e894 <__multadd>
 800dfd2:	9b08      	ldr	r3, [sp, #32]
 800dfd4:	ee08 0a10 	vmov	s16, r0
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	f000 81b1 	beq.w	800e340 <_dtoa_r+0xbc0>
 800dfde:	2300      	movs	r3, #0
 800dfe0:	4639      	mov	r1, r7
 800dfe2:	220a      	movs	r2, #10
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	f000 fc55 	bl	800e894 <__multadd>
 800dfea:	9b02      	ldr	r3, [sp, #8]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	4607      	mov	r7, r0
 800dff0:	f300 808e 	bgt.w	800e110 <_dtoa_r+0x990>
 800dff4:	9b06      	ldr	r3, [sp, #24]
 800dff6:	2b02      	cmp	r3, #2
 800dff8:	dc51      	bgt.n	800e09e <_dtoa_r+0x91e>
 800dffa:	e089      	b.n	800e110 <_dtoa_r+0x990>
 800dffc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dffe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e002:	e74b      	b.n	800de9c <_dtoa_r+0x71c>
 800e004:	9b03      	ldr	r3, [sp, #12]
 800e006:	1e5e      	subs	r6, r3, #1
 800e008:	9b07      	ldr	r3, [sp, #28]
 800e00a:	42b3      	cmp	r3, r6
 800e00c:	bfbf      	itttt	lt
 800e00e:	9b07      	ldrlt	r3, [sp, #28]
 800e010:	9607      	strlt	r6, [sp, #28]
 800e012:	1af2      	sublt	r2, r6, r3
 800e014:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e016:	bfb6      	itet	lt
 800e018:	189b      	addlt	r3, r3, r2
 800e01a:	1b9e      	subge	r6, r3, r6
 800e01c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e01e:	9b03      	ldr	r3, [sp, #12]
 800e020:	bfb8      	it	lt
 800e022:	2600      	movlt	r6, #0
 800e024:	2b00      	cmp	r3, #0
 800e026:	bfb7      	itett	lt
 800e028:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e02c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e030:	1a9d      	sublt	r5, r3, r2
 800e032:	2300      	movlt	r3, #0
 800e034:	e734      	b.n	800dea0 <_dtoa_r+0x720>
 800e036:	9e07      	ldr	r6, [sp, #28]
 800e038:	9d04      	ldr	r5, [sp, #16]
 800e03a:	9f08      	ldr	r7, [sp, #32]
 800e03c:	e73b      	b.n	800deb6 <_dtoa_r+0x736>
 800e03e:	9a07      	ldr	r2, [sp, #28]
 800e040:	e767      	b.n	800df12 <_dtoa_r+0x792>
 800e042:	9b06      	ldr	r3, [sp, #24]
 800e044:	2b01      	cmp	r3, #1
 800e046:	dc18      	bgt.n	800e07a <_dtoa_r+0x8fa>
 800e048:	f1ba 0f00 	cmp.w	sl, #0
 800e04c:	d115      	bne.n	800e07a <_dtoa_r+0x8fa>
 800e04e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e052:	b993      	cbnz	r3, 800e07a <_dtoa_r+0x8fa>
 800e054:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e058:	0d1b      	lsrs	r3, r3, #20
 800e05a:	051b      	lsls	r3, r3, #20
 800e05c:	b183      	cbz	r3, 800e080 <_dtoa_r+0x900>
 800e05e:	9b04      	ldr	r3, [sp, #16]
 800e060:	3301      	adds	r3, #1
 800e062:	9304      	str	r3, [sp, #16]
 800e064:	9b05      	ldr	r3, [sp, #20]
 800e066:	3301      	adds	r3, #1
 800e068:	9305      	str	r3, [sp, #20]
 800e06a:	f04f 0801 	mov.w	r8, #1
 800e06e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e070:	2b00      	cmp	r3, #0
 800e072:	f47f af6a 	bne.w	800df4a <_dtoa_r+0x7ca>
 800e076:	2001      	movs	r0, #1
 800e078:	e76f      	b.n	800df5a <_dtoa_r+0x7da>
 800e07a:	f04f 0800 	mov.w	r8, #0
 800e07e:	e7f6      	b.n	800e06e <_dtoa_r+0x8ee>
 800e080:	4698      	mov	r8, r3
 800e082:	e7f4      	b.n	800e06e <_dtoa_r+0x8ee>
 800e084:	f43f af7d 	beq.w	800df82 <_dtoa_r+0x802>
 800e088:	4618      	mov	r0, r3
 800e08a:	301c      	adds	r0, #28
 800e08c:	e772      	b.n	800df74 <_dtoa_r+0x7f4>
 800e08e:	9b03      	ldr	r3, [sp, #12]
 800e090:	2b00      	cmp	r3, #0
 800e092:	dc37      	bgt.n	800e104 <_dtoa_r+0x984>
 800e094:	9b06      	ldr	r3, [sp, #24]
 800e096:	2b02      	cmp	r3, #2
 800e098:	dd34      	ble.n	800e104 <_dtoa_r+0x984>
 800e09a:	9b03      	ldr	r3, [sp, #12]
 800e09c:	9302      	str	r3, [sp, #8]
 800e09e:	9b02      	ldr	r3, [sp, #8]
 800e0a0:	b96b      	cbnz	r3, 800e0be <_dtoa_r+0x93e>
 800e0a2:	4631      	mov	r1, r6
 800e0a4:	2205      	movs	r2, #5
 800e0a6:	4620      	mov	r0, r4
 800e0a8:	f000 fbf4 	bl	800e894 <__multadd>
 800e0ac:	4601      	mov	r1, r0
 800e0ae:	4606      	mov	r6, r0
 800e0b0:	ee18 0a10 	vmov	r0, s16
 800e0b4:	f000 fe0e 	bl	800ecd4 <__mcmp>
 800e0b8:	2800      	cmp	r0, #0
 800e0ba:	f73f adbb 	bgt.w	800dc34 <_dtoa_r+0x4b4>
 800e0be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0c0:	9d01      	ldr	r5, [sp, #4]
 800e0c2:	43db      	mvns	r3, r3
 800e0c4:	9300      	str	r3, [sp, #0]
 800e0c6:	f04f 0800 	mov.w	r8, #0
 800e0ca:	4631      	mov	r1, r6
 800e0cc:	4620      	mov	r0, r4
 800e0ce:	f000 fbbf 	bl	800e850 <_Bfree>
 800e0d2:	2f00      	cmp	r7, #0
 800e0d4:	f43f aea4 	beq.w	800de20 <_dtoa_r+0x6a0>
 800e0d8:	f1b8 0f00 	cmp.w	r8, #0
 800e0dc:	d005      	beq.n	800e0ea <_dtoa_r+0x96a>
 800e0de:	45b8      	cmp	r8, r7
 800e0e0:	d003      	beq.n	800e0ea <_dtoa_r+0x96a>
 800e0e2:	4641      	mov	r1, r8
 800e0e4:	4620      	mov	r0, r4
 800e0e6:	f000 fbb3 	bl	800e850 <_Bfree>
 800e0ea:	4639      	mov	r1, r7
 800e0ec:	4620      	mov	r0, r4
 800e0ee:	f000 fbaf 	bl	800e850 <_Bfree>
 800e0f2:	e695      	b.n	800de20 <_dtoa_r+0x6a0>
 800e0f4:	2600      	movs	r6, #0
 800e0f6:	4637      	mov	r7, r6
 800e0f8:	e7e1      	b.n	800e0be <_dtoa_r+0x93e>
 800e0fa:	9700      	str	r7, [sp, #0]
 800e0fc:	4637      	mov	r7, r6
 800e0fe:	e599      	b.n	800dc34 <_dtoa_r+0x4b4>
 800e100:	40240000 	.word	0x40240000
 800e104:	9b08      	ldr	r3, [sp, #32]
 800e106:	2b00      	cmp	r3, #0
 800e108:	f000 80ca 	beq.w	800e2a0 <_dtoa_r+0xb20>
 800e10c:	9b03      	ldr	r3, [sp, #12]
 800e10e:	9302      	str	r3, [sp, #8]
 800e110:	2d00      	cmp	r5, #0
 800e112:	dd05      	ble.n	800e120 <_dtoa_r+0x9a0>
 800e114:	4639      	mov	r1, r7
 800e116:	462a      	mov	r2, r5
 800e118:	4620      	mov	r0, r4
 800e11a:	f000 fd6b 	bl	800ebf4 <__lshift>
 800e11e:	4607      	mov	r7, r0
 800e120:	f1b8 0f00 	cmp.w	r8, #0
 800e124:	d05b      	beq.n	800e1de <_dtoa_r+0xa5e>
 800e126:	6879      	ldr	r1, [r7, #4]
 800e128:	4620      	mov	r0, r4
 800e12a:	f000 fb51 	bl	800e7d0 <_Balloc>
 800e12e:	4605      	mov	r5, r0
 800e130:	b928      	cbnz	r0, 800e13e <_dtoa_r+0x9be>
 800e132:	4b87      	ldr	r3, [pc, #540]	; (800e350 <_dtoa_r+0xbd0>)
 800e134:	4602      	mov	r2, r0
 800e136:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e13a:	f7ff bb3b 	b.w	800d7b4 <_dtoa_r+0x34>
 800e13e:	693a      	ldr	r2, [r7, #16]
 800e140:	3202      	adds	r2, #2
 800e142:	0092      	lsls	r2, r2, #2
 800e144:	f107 010c 	add.w	r1, r7, #12
 800e148:	300c      	adds	r0, #12
 800e14a:	f000 fb33 	bl	800e7b4 <memcpy>
 800e14e:	2201      	movs	r2, #1
 800e150:	4629      	mov	r1, r5
 800e152:	4620      	mov	r0, r4
 800e154:	f000 fd4e 	bl	800ebf4 <__lshift>
 800e158:	9b01      	ldr	r3, [sp, #4]
 800e15a:	f103 0901 	add.w	r9, r3, #1
 800e15e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e162:	4413      	add	r3, r2
 800e164:	9305      	str	r3, [sp, #20]
 800e166:	f00a 0301 	and.w	r3, sl, #1
 800e16a:	46b8      	mov	r8, r7
 800e16c:	9304      	str	r3, [sp, #16]
 800e16e:	4607      	mov	r7, r0
 800e170:	4631      	mov	r1, r6
 800e172:	ee18 0a10 	vmov	r0, s16
 800e176:	f7ff fa77 	bl	800d668 <quorem>
 800e17a:	4641      	mov	r1, r8
 800e17c:	9002      	str	r0, [sp, #8]
 800e17e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e182:	ee18 0a10 	vmov	r0, s16
 800e186:	f000 fda5 	bl	800ecd4 <__mcmp>
 800e18a:	463a      	mov	r2, r7
 800e18c:	9003      	str	r0, [sp, #12]
 800e18e:	4631      	mov	r1, r6
 800e190:	4620      	mov	r0, r4
 800e192:	f000 fdbb 	bl	800ed0c <__mdiff>
 800e196:	68c2      	ldr	r2, [r0, #12]
 800e198:	f109 3bff 	add.w	fp, r9, #4294967295
 800e19c:	4605      	mov	r5, r0
 800e19e:	bb02      	cbnz	r2, 800e1e2 <_dtoa_r+0xa62>
 800e1a0:	4601      	mov	r1, r0
 800e1a2:	ee18 0a10 	vmov	r0, s16
 800e1a6:	f000 fd95 	bl	800ecd4 <__mcmp>
 800e1aa:	4602      	mov	r2, r0
 800e1ac:	4629      	mov	r1, r5
 800e1ae:	4620      	mov	r0, r4
 800e1b0:	9207      	str	r2, [sp, #28]
 800e1b2:	f000 fb4d 	bl	800e850 <_Bfree>
 800e1b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e1ba:	ea43 0102 	orr.w	r1, r3, r2
 800e1be:	9b04      	ldr	r3, [sp, #16]
 800e1c0:	430b      	orrs	r3, r1
 800e1c2:	464d      	mov	r5, r9
 800e1c4:	d10f      	bne.n	800e1e6 <_dtoa_r+0xa66>
 800e1c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e1ca:	d02a      	beq.n	800e222 <_dtoa_r+0xaa2>
 800e1cc:	9b03      	ldr	r3, [sp, #12]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	dd02      	ble.n	800e1d8 <_dtoa_r+0xa58>
 800e1d2:	9b02      	ldr	r3, [sp, #8]
 800e1d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e1d8:	f88b a000 	strb.w	sl, [fp]
 800e1dc:	e775      	b.n	800e0ca <_dtoa_r+0x94a>
 800e1de:	4638      	mov	r0, r7
 800e1e0:	e7ba      	b.n	800e158 <_dtoa_r+0x9d8>
 800e1e2:	2201      	movs	r2, #1
 800e1e4:	e7e2      	b.n	800e1ac <_dtoa_r+0xa2c>
 800e1e6:	9b03      	ldr	r3, [sp, #12]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	db04      	blt.n	800e1f6 <_dtoa_r+0xa76>
 800e1ec:	9906      	ldr	r1, [sp, #24]
 800e1ee:	430b      	orrs	r3, r1
 800e1f0:	9904      	ldr	r1, [sp, #16]
 800e1f2:	430b      	orrs	r3, r1
 800e1f4:	d122      	bne.n	800e23c <_dtoa_r+0xabc>
 800e1f6:	2a00      	cmp	r2, #0
 800e1f8:	ddee      	ble.n	800e1d8 <_dtoa_r+0xa58>
 800e1fa:	ee18 1a10 	vmov	r1, s16
 800e1fe:	2201      	movs	r2, #1
 800e200:	4620      	mov	r0, r4
 800e202:	f000 fcf7 	bl	800ebf4 <__lshift>
 800e206:	4631      	mov	r1, r6
 800e208:	ee08 0a10 	vmov	s16, r0
 800e20c:	f000 fd62 	bl	800ecd4 <__mcmp>
 800e210:	2800      	cmp	r0, #0
 800e212:	dc03      	bgt.n	800e21c <_dtoa_r+0xa9c>
 800e214:	d1e0      	bne.n	800e1d8 <_dtoa_r+0xa58>
 800e216:	f01a 0f01 	tst.w	sl, #1
 800e21a:	d0dd      	beq.n	800e1d8 <_dtoa_r+0xa58>
 800e21c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e220:	d1d7      	bne.n	800e1d2 <_dtoa_r+0xa52>
 800e222:	2339      	movs	r3, #57	; 0x39
 800e224:	f88b 3000 	strb.w	r3, [fp]
 800e228:	462b      	mov	r3, r5
 800e22a:	461d      	mov	r5, r3
 800e22c:	3b01      	subs	r3, #1
 800e22e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e232:	2a39      	cmp	r2, #57	; 0x39
 800e234:	d071      	beq.n	800e31a <_dtoa_r+0xb9a>
 800e236:	3201      	adds	r2, #1
 800e238:	701a      	strb	r2, [r3, #0]
 800e23a:	e746      	b.n	800e0ca <_dtoa_r+0x94a>
 800e23c:	2a00      	cmp	r2, #0
 800e23e:	dd07      	ble.n	800e250 <_dtoa_r+0xad0>
 800e240:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e244:	d0ed      	beq.n	800e222 <_dtoa_r+0xaa2>
 800e246:	f10a 0301 	add.w	r3, sl, #1
 800e24a:	f88b 3000 	strb.w	r3, [fp]
 800e24e:	e73c      	b.n	800e0ca <_dtoa_r+0x94a>
 800e250:	9b05      	ldr	r3, [sp, #20]
 800e252:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e256:	4599      	cmp	r9, r3
 800e258:	d047      	beq.n	800e2ea <_dtoa_r+0xb6a>
 800e25a:	ee18 1a10 	vmov	r1, s16
 800e25e:	2300      	movs	r3, #0
 800e260:	220a      	movs	r2, #10
 800e262:	4620      	mov	r0, r4
 800e264:	f000 fb16 	bl	800e894 <__multadd>
 800e268:	45b8      	cmp	r8, r7
 800e26a:	ee08 0a10 	vmov	s16, r0
 800e26e:	f04f 0300 	mov.w	r3, #0
 800e272:	f04f 020a 	mov.w	r2, #10
 800e276:	4641      	mov	r1, r8
 800e278:	4620      	mov	r0, r4
 800e27a:	d106      	bne.n	800e28a <_dtoa_r+0xb0a>
 800e27c:	f000 fb0a 	bl	800e894 <__multadd>
 800e280:	4680      	mov	r8, r0
 800e282:	4607      	mov	r7, r0
 800e284:	f109 0901 	add.w	r9, r9, #1
 800e288:	e772      	b.n	800e170 <_dtoa_r+0x9f0>
 800e28a:	f000 fb03 	bl	800e894 <__multadd>
 800e28e:	4639      	mov	r1, r7
 800e290:	4680      	mov	r8, r0
 800e292:	2300      	movs	r3, #0
 800e294:	220a      	movs	r2, #10
 800e296:	4620      	mov	r0, r4
 800e298:	f000 fafc 	bl	800e894 <__multadd>
 800e29c:	4607      	mov	r7, r0
 800e29e:	e7f1      	b.n	800e284 <_dtoa_r+0xb04>
 800e2a0:	9b03      	ldr	r3, [sp, #12]
 800e2a2:	9302      	str	r3, [sp, #8]
 800e2a4:	9d01      	ldr	r5, [sp, #4]
 800e2a6:	ee18 0a10 	vmov	r0, s16
 800e2aa:	4631      	mov	r1, r6
 800e2ac:	f7ff f9dc 	bl	800d668 <quorem>
 800e2b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e2b4:	9b01      	ldr	r3, [sp, #4]
 800e2b6:	f805 ab01 	strb.w	sl, [r5], #1
 800e2ba:	1aea      	subs	r2, r5, r3
 800e2bc:	9b02      	ldr	r3, [sp, #8]
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	dd09      	ble.n	800e2d6 <_dtoa_r+0xb56>
 800e2c2:	ee18 1a10 	vmov	r1, s16
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	220a      	movs	r2, #10
 800e2ca:	4620      	mov	r0, r4
 800e2cc:	f000 fae2 	bl	800e894 <__multadd>
 800e2d0:	ee08 0a10 	vmov	s16, r0
 800e2d4:	e7e7      	b.n	800e2a6 <_dtoa_r+0xb26>
 800e2d6:	9b02      	ldr	r3, [sp, #8]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	bfc8      	it	gt
 800e2dc:	461d      	movgt	r5, r3
 800e2de:	9b01      	ldr	r3, [sp, #4]
 800e2e0:	bfd8      	it	le
 800e2e2:	2501      	movle	r5, #1
 800e2e4:	441d      	add	r5, r3
 800e2e6:	f04f 0800 	mov.w	r8, #0
 800e2ea:	ee18 1a10 	vmov	r1, s16
 800e2ee:	2201      	movs	r2, #1
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	f000 fc7f 	bl	800ebf4 <__lshift>
 800e2f6:	4631      	mov	r1, r6
 800e2f8:	ee08 0a10 	vmov	s16, r0
 800e2fc:	f000 fcea 	bl	800ecd4 <__mcmp>
 800e300:	2800      	cmp	r0, #0
 800e302:	dc91      	bgt.n	800e228 <_dtoa_r+0xaa8>
 800e304:	d102      	bne.n	800e30c <_dtoa_r+0xb8c>
 800e306:	f01a 0f01 	tst.w	sl, #1
 800e30a:	d18d      	bne.n	800e228 <_dtoa_r+0xaa8>
 800e30c:	462b      	mov	r3, r5
 800e30e:	461d      	mov	r5, r3
 800e310:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e314:	2a30      	cmp	r2, #48	; 0x30
 800e316:	d0fa      	beq.n	800e30e <_dtoa_r+0xb8e>
 800e318:	e6d7      	b.n	800e0ca <_dtoa_r+0x94a>
 800e31a:	9a01      	ldr	r2, [sp, #4]
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d184      	bne.n	800e22a <_dtoa_r+0xaaa>
 800e320:	9b00      	ldr	r3, [sp, #0]
 800e322:	3301      	adds	r3, #1
 800e324:	9300      	str	r3, [sp, #0]
 800e326:	2331      	movs	r3, #49	; 0x31
 800e328:	7013      	strb	r3, [r2, #0]
 800e32a:	e6ce      	b.n	800e0ca <_dtoa_r+0x94a>
 800e32c:	4b09      	ldr	r3, [pc, #36]	; (800e354 <_dtoa_r+0xbd4>)
 800e32e:	f7ff ba95 	b.w	800d85c <_dtoa_r+0xdc>
 800e332:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e334:	2b00      	cmp	r3, #0
 800e336:	f47f aa6e 	bne.w	800d816 <_dtoa_r+0x96>
 800e33a:	4b07      	ldr	r3, [pc, #28]	; (800e358 <_dtoa_r+0xbd8>)
 800e33c:	f7ff ba8e 	b.w	800d85c <_dtoa_r+0xdc>
 800e340:	9b02      	ldr	r3, [sp, #8]
 800e342:	2b00      	cmp	r3, #0
 800e344:	dcae      	bgt.n	800e2a4 <_dtoa_r+0xb24>
 800e346:	9b06      	ldr	r3, [sp, #24]
 800e348:	2b02      	cmp	r3, #2
 800e34a:	f73f aea8 	bgt.w	800e09e <_dtoa_r+0x91e>
 800e34e:	e7a9      	b.n	800e2a4 <_dtoa_r+0xb24>
 800e350:	0800f7af 	.word	0x0800f7af
 800e354:	0800f70c 	.word	0x0800f70c
 800e358:	0800f730 	.word	0x0800f730

0800e35c <__sflush_r>:
 800e35c:	898a      	ldrh	r2, [r1, #12]
 800e35e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e362:	4605      	mov	r5, r0
 800e364:	0710      	lsls	r0, r2, #28
 800e366:	460c      	mov	r4, r1
 800e368:	d458      	bmi.n	800e41c <__sflush_r+0xc0>
 800e36a:	684b      	ldr	r3, [r1, #4]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	dc05      	bgt.n	800e37c <__sflush_r+0x20>
 800e370:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e372:	2b00      	cmp	r3, #0
 800e374:	dc02      	bgt.n	800e37c <__sflush_r+0x20>
 800e376:	2000      	movs	r0, #0
 800e378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e37c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e37e:	2e00      	cmp	r6, #0
 800e380:	d0f9      	beq.n	800e376 <__sflush_r+0x1a>
 800e382:	2300      	movs	r3, #0
 800e384:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e388:	682f      	ldr	r7, [r5, #0]
 800e38a:	602b      	str	r3, [r5, #0]
 800e38c:	d032      	beq.n	800e3f4 <__sflush_r+0x98>
 800e38e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e390:	89a3      	ldrh	r3, [r4, #12]
 800e392:	075a      	lsls	r2, r3, #29
 800e394:	d505      	bpl.n	800e3a2 <__sflush_r+0x46>
 800e396:	6863      	ldr	r3, [r4, #4]
 800e398:	1ac0      	subs	r0, r0, r3
 800e39a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e39c:	b10b      	cbz	r3, 800e3a2 <__sflush_r+0x46>
 800e39e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e3a0:	1ac0      	subs	r0, r0, r3
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e3a8:	6a21      	ldr	r1, [r4, #32]
 800e3aa:	4628      	mov	r0, r5
 800e3ac:	47b0      	blx	r6
 800e3ae:	1c43      	adds	r3, r0, #1
 800e3b0:	89a3      	ldrh	r3, [r4, #12]
 800e3b2:	d106      	bne.n	800e3c2 <__sflush_r+0x66>
 800e3b4:	6829      	ldr	r1, [r5, #0]
 800e3b6:	291d      	cmp	r1, #29
 800e3b8:	d82c      	bhi.n	800e414 <__sflush_r+0xb8>
 800e3ba:	4a2a      	ldr	r2, [pc, #168]	; (800e464 <__sflush_r+0x108>)
 800e3bc:	40ca      	lsrs	r2, r1
 800e3be:	07d6      	lsls	r6, r2, #31
 800e3c0:	d528      	bpl.n	800e414 <__sflush_r+0xb8>
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	6062      	str	r2, [r4, #4]
 800e3c6:	04d9      	lsls	r1, r3, #19
 800e3c8:	6922      	ldr	r2, [r4, #16]
 800e3ca:	6022      	str	r2, [r4, #0]
 800e3cc:	d504      	bpl.n	800e3d8 <__sflush_r+0x7c>
 800e3ce:	1c42      	adds	r2, r0, #1
 800e3d0:	d101      	bne.n	800e3d6 <__sflush_r+0x7a>
 800e3d2:	682b      	ldr	r3, [r5, #0]
 800e3d4:	b903      	cbnz	r3, 800e3d8 <__sflush_r+0x7c>
 800e3d6:	6560      	str	r0, [r4, #84]	; 0x54
 800e3d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3da:	602f      	str	r7, [r5, #0]
 800e3dc:	2900      	cmp	r1, #0
 800e3de:	d0ca      	beq.n	800e376 <__sflush_r+0x1a>
 800e3e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3e4:	4299      	cmp	r1, r3
 800e3e6:	d002      	beq.n	800e3ee <__sflush_r+0x92>
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	f000 fd8b 	bl	800ef04 <_free_r>
 800e3ee:	2000      	movs	r0, #0
 800e3f0:	6360      	str	r0, [r4, #52]	; 0x34
 800e3f2:	e7c1      	b.n	800e378 <__sflush_r+0x1c>
 800e3f4:	6a21      	ldr	r1, [r4, #32]
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	4628      	mov	r0, r5
 800e3fa:	47b0      	blx	r6
 800e3fc:	1c41      	adds	r1, r0, #1
 800e3fe:	d1c7      	bne.n	800e390 <__sflush_r+0x34>
 800e400:	682b      	ldr	r3, [r5, #0]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d0c4      	beq.n	800e390 <__sflush_r+0x34>
 800e406:	2b1d      	cmp	r3, #29
 800e408:	d001      	beq.n	800e40e <__sflush_r+0xb2>
 800e40a:	2b16      	cmp	r3, #22
 800e40c:	d101      	bne.n	800e412 <__sflush_r+0xb6>
 800e40e:	602f      	str	r7, [r5, #0]
 800e410:	e7b1      	b.n	800e376 <__sflush_r+0x1a>
 800e412:	89a3      	ldrh	r3, [r4, #12]
 800e414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e418:	81a3      	strh	r3, [r4, #12]
 800e41a:	e7ad      	b.n	800e378 <__sflush_r+0x1c>
 800e41c:	690f      	ldr	r7, [r1, #16]
 800e41e:	2f00      	cmp	r7, #0
 800e420:	d0a9      	beq.n	800e376 <__sflush_r+0x1a>
 800e422:	0793      	lsls	r3, r2, #30
 800e424:	680e      	ldr	r6, [r1, #0]
 800e426:	bf08      	it	eq
 800e428:	694b      	ldreq	r3, [r1, #20]
 800e42a:	600f      	str	r7, [r1, #0]
 800e42c:	bf18      	it	ne
 800e42e:	2300      	movne	r3, #0
 800e430:	eba6 0807 	sub.w	r8, r6, r7
 800e434:	608b      	str	r3, [r1, #8]
 800e436:	f1b8 0f00 	cmp.w	r8, #0
 800e43a:	dd9c      	ble.n	800e376 <__sflush_r+0x1a>
 800e43c:	6a21      	ldr	r1, [r4, #32]
 800e43e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e440:	4643      	mov	r3, r8
 800e442:	463a      	mov	r2, r7
 800e444:	4628      	mov	r0, r5
 800e446:	47b0      	blx	r6
 800e448:	2800      	cmp	r0, #0
 800e44a:	dc06      	bgt.n	800e45a <__sflush_r+0xfe>
 800e44c:	89a3      	ldrh	r3, [r4, #12]
 800e44e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e452:	81a3      	strh	r3, [r4, #12]
 800e454:	f04f 30ff 	mov.w	r0, #4294967295
 800e458:	e78e      	b.n	800e378 <__sflush_r+0x1c>
 800e45a:	4407      	add	r7, r0
 800e45c:	eba8 0800 	sub.w	r8, r8, r0
 800e460:	e7e9      	b.n	800e436 <__sflush_r+0xda>
 800e462:	bf00      	nop
 800e464:	20400001 	.word	0x20400001

0800e468 <_fflush_r>:
 800e468:	b538      	push	{r3, r4, r5, lr}
 800e46a:	690b      	ldr	r3, [r1, #16]
 800e46c:	4605      	mov	r5, r0
 800e46e:	460c      	mov	r4, r1
 800e470:	b913      	cbnz	r3, 800e478 <_fflush_r+0x10>
 800e472:	2500      	movs	r5, #0
 800e474:	4628      	mov	r0, r5
 800e476:	bd38      	pop	{r3, r4, r5, pc}
 800e478:	b118      	cbz	r0, 800e482 <_fflush_r+0x1a>
 800e47a:	6983      	ldr	r3, [r0, #24]
 800e47c:	b90b      	cbnz	r3, 800e482 <_fflush_r+0x1a>
 800e47e:	f000 f887 	bl	800e590 <__sinit>
 800e482:	4b14      	ldr	r3, [pc, #80]	; (800e4d4 <_fflush_r+0x6c>)
 800e484:	429c      	cmp	r4, r3
 800e486:	d11b      	bne.n	800e4c0 <_fflush_r+0x58>
 800e488:	686c      	ldr	r4, [r5, #4]
 800e48a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d0ef      	beq.n	800e472 <_fflush_r+0xa>
 800e492:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e494:	07d0      	lsls	r0, r2, #31
 800e496:	d404      	bmi.n	800e4a2 <_fflush_r+0x3a>
 800e498:	0599      	lsls	r1, r3, #22
 800e49a:	d402      	bmi.n	800e4a2 <_fflush_r+0x3a>
 800e49c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e49e:	f000 f91a 	bl	800e6d6 <__retarget_lock_acquire_recursive>
 800e4a2:	4628      	mov	r0, r5
 800e4a4:	4621      	mov	r1, r4
 800e4a6:	f7ff ff59 	bl	800e35c <__sflush_r>
 800e4aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e4ac:	07da      	lsls	r2, r3, #31
 800e4ae:	4605      	mov	r5, r0
 800e4b0:	d4e0      	bmi.n	800e474 <_fflush_r+0xc>
 800e4b2:	89a3      	ldrh	r3, [r4, #12]
 800e4b4:	059b      	lsls	r3, r3, #22
 800e4b6:	d4dd      	bmi.n	800e474 <_fflush_r+0xc>
 800e4b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e4ba:	f000 f90d 	bl	800e6d8 <__retarget_lock_release_recursive>
 800e4be:	e7d9      	b.n	800e474 <_fflush_r+0xc>
 800e4c0:	4b05      	ldr	r3, [pc, #20]	; (800e4d8 <_fflush_r+0x70>)
 800e4c2:	429c      	cmp	r4, r3
 800e4c4:	d101      	bne.n	800e4ca <_fflush_r+0x62>
 800e4c6:	68ac      	ldr	r4, [r5, #8]
 800e4c8:	e7df      	b.n	800e48a <_fflush_r+0x22>
 800e4ca:	4b04      	ldr	r3, [pc, #16]	; (800e4dc <_fflush_r+0x74>)
 800e4cc:	429c      	cmp	r4, r3
 800e4ce:	bf08      	it	eq
 800e4d0:	68ec      	ldreq	r4, [r5, #12]
 800e4d2:	e7da      	b.n	800e48a <_fflush_r+0x22>
 800e4d4:	0800f7e0 	.word	0x0800f7e0
 800e4d8:	0800f800 	.word	0x0800f800
 800e4dc:	0800f7c0 	.word	0x0800f7c0

0800e4e0 <std>:
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	b510      	push	{r4, lr}
 800e4e4:	4604      	mov	r4, r0
 800e4e6:	e9c0 3300 	strd	r3, r3, [r0]
 800e4ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e4ee:	6083      	str	r3, [r0, #8]
 800e4f0:	8181      	strh	r1, [r0, #12]
 800e4f2:	6643      	str	r3, [r0, #100]	; 0x64
 800e4f4:	81c2      	strh	r2, [r0, #14]
 800e4f6:	6183      	str	r3, [r0, #24]
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	2208      	movs	r2, #8
 800e4fc:	305c      	adds	r0, #92	; 0x5c
 800e4fe:	f7fe fb69 	bl	800cbd4 <memset>
 800e502:	4b05      	ldr	r3, [pc, #20]	; (800e518 <std+0x38>)
 800e504:	6263      	str	r3, [r4, #36]	; 0x24
 800e506:	4b05      	ldr	r3, [pc, #20]	; (800e51c <std+0x3c>)
 800e508:	62a3      	str	r3, [r4, #40]	; 0x28
 800e50a:	4b05      	ldr	r3, [pc, #20]	; (800e520 <std+0x40>)
 800e50c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e50e:	4b05      	ldr	r3, [pc, #20]	; (800e524 <std+0x44>)
 800e510:	6224      	str	r4, [r4, #32]
 800e512:	6323      	str	r3, [r4, #48]	; 0x30
 800e514:	bd10      	pop	{r4, pc}
 800e516:	bf00      	nop
 800e518:	0800f399 	.word	0x0800f399
 800e51c:	0800f3bb 	.word	0x0800f3bb
 800e520:	0800f3f3 	.word	0x0800f3f3
 800e524:	0800f417 	.word	0x0800f417

0800e528 <_cleanup_r>:
 800e528:	4901      	ldr	r1, [pc, #4]	; (800e530 <_cleanup_r+0x8>)
 800e52a:	f000 b8af 	b.w	800e68c <_fwalk_reent>
 800e52e:	bf00      	nop
 800e530:	0800e469 	.word	0x0800e469

0800e534 <__sfmoreglue>:
 800e534:	b570      	push	{r4, r5, r6, lr}
 800e536:	2268      	movs	r2, #104	; 0x68
 800e538:	1e4d      	subs	r5, r1, #1
 800e53a:	4355      	muls	r5, r2
 800e53c:	460e      	mov	r6, r1
 800e53e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e542:	f000 fd4b 	bl	800efdc <_malloc_r>
 800e546:	4604      	mov	r4, r0
 800e548:	b140      	cbz	r0, 800e55c <__sfmoreglue+0x28>
 800e54a:	2100      	movs	r1, #0
 800e54c:	e9c0 1600 	strd	r1, r6, [r0]
 800e550:	300c      	adds	r0, #12
 800e552:	60a0      	str	r0, [r4, #8]
 800e554:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e558:	f7fe fb3c 	bl	800cbd4 <memset>
 800e55c:	4620      	mov	r0, r4
 800e55e:	bd70      	pop	{r4, r5, r6, pc}

0800e560 <__sfp_lock_acquire>:
 800e560:	4801      	ldr	r0, [pc, #4]	; (800e568 <__sfp_lock_acquire+0x8>)
 800e562:	f000 b8b8 	b.w	800e6d6 <__retarget_lock_acquire_recursive>
 800e566:	bf00      	nop
 800e568:	20000e91 	.word	0x20000e91

0800e56c <__sfp_lock_release>:
 800e56c:	4801      	ldr	r0, [pc, #4]	; (800e574 <__sfp_lock_release+0x8>)
 800e56e:	f000 b8b3 	b.w	800e6d8 <__retarget_lock_release_recursive>
 800e572:	bf00      	nop
 800e574:	20000e91 	.word	0x20000e91

0800e578 <__sinit_lock_acquire>:
 800e578:	4801      	ldr	r0, [pc, #4]	; (800e580 <__sinit_lock_acquire+0x8>)
 800e57a:	f000 b8ac 	b.w	800e6d6 <__retarget_lock_acquire_recursive>
 800e57e:	bf00      	nop
 800e580:	20000e92 	.word	0x20000e92

0800e584 <__sinit_lock_release>:
 800e584:	4801      	ldr	r0, [pc, #4]	; (800e58c <__sinit_lock_release+0x8>)
 800e586:	f000 b8a7 	b.w	800e6d8 <__retarget_lock_release_recursive>
 800e58a:	bf00      	nop
 800e58c:	20000e92 	.word	0x20000e92

0800e590 <__sinit>:
 800e590:	b510      	push	{r4, lr}
 800e592:	4604      	mov	r4, r0
 800e594:	f7ff fff0 	bl	800e578 <__sinit_lock_acquire>
 800e598:	69a3      	ldr	r3, [r4, #24]
 800e59a:	b11b      	cbz	r3, 800e5a4 <__sinit+0x14>
 800e59c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5a0:	f7ff bff0 	b.w	800e584 <__sinit_lock_release>
 800e5a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e5a8:	6523      	str	r3, [r4, #80]	; 0x50
 800e5aa:	4b13      	ldr	r3, [pc, #76]	; (800e5f8 <__sinit+0x68>)
 800e5ac:	4a13      	ldr	r2, [pc, #76]	; (800e5fc <__sinit+0x6c>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	62a2      	str	r2, [r4, #40]	; 0x28
 800e5b2:	42a3      	cmp	r3, r4
 800e5b4:	bf04      	itt	eq
 800e5b6:	2301      	moveq	r3, #1
 800e5b8:	61a3      	streq	r3, [r4, #24]
 800e5ba:	4620      	mov	r0, r4
 800e5bc:	f000 f820 	bl	800e600 <__sfp>
 800e5c0:	6060      	str	r0, [r4, #4]
 800e5c2:	4620      	mov	r0, r4
 800e5c4:	f000 f81c 	bl	800e600 <__sfp>
 800e5c8:	60a0      	str	r0, [r4, #8]
 800e5ca:	4620      	mov	r0, r4
 800e5cc:	f000 f818 	bl	800e600 <__sfp>
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	60e0      	str	r0, [r4, #12]
 800e5d4:	2104      	movs	r1, #4
 800e5d6:	6860      	ldr	r0, [r4, #4]
 800e5d8:	f7ff ff82 	bl	800e4e0 <std>
 800e5dc:	68a0      	ldr	r0, [r4, #8]
 800e5de:	2201      	movs	r2, #1
 800e5e0:	2109      	movs	r1, #9
 800e5e2:	f7ff ff7d 	bl	800e4e0 <std>
 800e5e6:	68e0      	ldr	r0, [r4, #12]
 800e5e8:	2202      	movs	r2, #2
 800e5ea:	2112      	movs	r1, #18
 800e5ec:	f7ff ff78 	bl	800e4e0 <std>
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	61a3      	str	r3, [r4, #24]
 800e5f4:	e7d2      	b.n	800e59c <__sinit+0xc>
 800e5f6:	bf00      	nop
 800e5f8:	0800f6f8 	.word	0x0800f6f8
 800e5fc:	0800e529 	.word	0x0800e529

0800e600 <__sfp>:
 800e600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e602:	4607      	mov	r7, r0
 800e604:	f7ff ffac 	bl	800e560 <__sfp_lock_acquire>
 800e608:	4b1e      	ldr	r3, [pc, #120]	; (800e684 <__sfp+0x84>)
 800e60a:	681e      	ldr	r6, [r3, #0]
 800e60c:	69b3      	ldr	r3, [r6, #24]
 800e60e:	b913      	cbnz	r3, 800e616 <__sfp+0x16>
 800e610:	4630      	mov	r0, r6
 800e612:	f7ff ffbd 	bl	800e590 <__sinit>
 800e616:	3648      	adds	r6, #72	; 0x48
 800e618:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e61c:	3b01      	subs	r3, #1
 800e61e:	d503      	bpl.n	800e628 <__sfp+0x28>
 800e620:	6833      	ldr	r3, [r6, #0]
 800e622:	b30b      	cbz	r3, 800e668 <__sfp+0x68>
 800e624:	6836      	ldr	r6, [r6, #0]
 800e626:	e7f7      	b.n	800e618 <__sfp+0x18>
 800e628:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e62c:	b9d5      	cbnz	r5, 800e664 <__sfp+0x64>
 800e62e:	4b16      	ldr	r3, [pc, #88]	; (800e688 <__sfp+0x88>)
 800e630:	60e3      	str	r3, [r4, #12]
 800e632:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e636:	6665      	str	r5, [r4, #100]	; 0x64
 800e638:	f000 f84c 	bl	800e6d4 <__retarget_lock_init_recursive>
 800e63c:	f7ff ff96 	bl	800e56c <__sfp_lock_release>
 800e640:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e644:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e648:	6025      	str	r5, [r4, #0]
 800e64a:	61a5      	str	r5, [r4, #24]
 800e64c:	2208      	movs	r2, #8
 800e64e:	4629      	mov	r1, r5
 800e650:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e654:	f7fe fabe 	bl	800cbd4 <memset>
 800e658:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e65c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e660:	4620      	mov	r0, r4
 800e662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e664:	3468      	adds	r4, #104	; 0x68
 800e666:	e7d9      	b.n	800e61c <__sfp+0x1c>
 800e668:	2104      	movs	r1, #4
 800e66a:	4638      	mov	r0, r7
 800e66c:	f7ff ff62 	bl	800e534 <__sfmoreglue>
 800e670:	4604      	mov	r4, r0
 800e672:	6030      	str	r0, [r6, #0]
 800e674:	2800      	cmp	r0, #0
 800e676:	d1d5      	bne.n	800e624 <__sfp+0x24>
 800e678:	f7ff ff78 	bl	800e56c <__sfp_lock_release>
 800e67c:	230c      	movs	r3, #12
 800e67e:	603b      	str	r3, [r7, #0]
 800e680:	e7ee      	b.n	800e660 <__sfp+0x60>
 800e682:	bf00      	nop
 800e684:	0800f6f8 	.word	0x0800f6f8
 800e688:	ffff0001 	.word	0xffff0001

0800e68c <_fwalk_reent>:
 800e68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e690:	4606      	mov	r6, r0
 800e692:	4688      	mov	r8, r1
 800e694:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e698:	2700      	movs	r7, #0
 800e69a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e69e:	f1b9 0901 	subs.w	r9, r9, #1
 800e6a2:	d505      	bpl.n	800e6b0 <_fwalk_reent+0x24>
 800e6a4:	6824      	ldr	r4, [r4, #0]
 800e6a6:	2c00      	cmp	r4, #0
 800e6a8:	d1f7      	bne.n	800e69a <_fwalk_reent+0xe>
 800e6aa:	4638      	mov	r0, r7
 800e6ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6b0:	89ab      	ldrh	r3, [r5, #12]
 800e6b2:	2b01      	cmp	r3, #1
 800e6b4:	d907      	bls.n	800e6c6 <_fwalk_reent+0x3a>
 800e6b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e6ba:	3301      	adds	r3, #1
 800e6bc:	d003      	beq.n	800e6c6 <_fwalk_reent+0x3a>
 800e6be:	4629      	mov	r1, r5
 800e6c0:	4630      	mov	r0, r6
 800e6c2:	47c0      	blx	r8
 800e6c4:	4307      	orrs	r7, r0
 800e6c6:	3568      	adds	r5, #104	; 0x68
 800e6c8:	e7e9      	b.n	800e69e <_fwalk_reent+0x12>
	...

0800e6cc <_localeconv_r>:
 800e6cc:	4800      	ldr	r0, [pc, #0]	; (800e6d0 <_localeconv_r+0x4>)
 800e6ce:	4770      	bx	lr
 800e6d0:	200002b8 	.word	0x200002b8

0800e6d4 <__retarget_lock_init_recursive>:
 800e6d4:	4770      	bx	lr

0800e6d6 <__retarget_lock_acquire_recursive>:
 800e6d6:	4770      	bx	lr

0800e6d8 <__retarget_lock_release_recursive>:
 800e6d8:	4770      	bx	lr

0800e6da <__swhatbuf_r>:
 800e6da:	b570      	push	{r4, r5, r6, lr}
 800e6dc:	460e      	mov	r6, r1
 800e6de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6e2:	2900      	cmp	r1, #0
 800e6e4:	b096      	sub	sp, #88	; 0x58
 800e6e6:	4614      	mov	r4, r2
 800e6e8:	461d      	mov	r5, r3
 800e6ea:	da08      	bge.n	800e6fe <__swhatbuf_r+0x24>
 800e6ec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	602a      	str	r2, [r5, #0]
 800e6f4:	061a      	lsls	r2, r3, #24
 800e6f6:	d410      	bmi.n	800e71a <__swhatbuf_r+0x40>
 800e6f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6fc:	e00e      	b.n	800e71c <__swhatbuf_r+0x42>
 800e6fe:	466a      	mov	r2, sp
 800e700:	f000 fee0 	bl	800f4c4 <_fstat_r>
 800e704:	2800      	cmp	r0, #0
 800e706:	dbf1      	blt.n	800e6ec <__swhatbuf_r+0x12>
 800e708:	9a01      	ldr	r2, [sp, #4]
 800e70a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e70e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e712:	425a      	negs	r2, r3
 800e714:	415a      	adcs	r2, r3
 800e716:	602a      	str	r2, [r5, #0]
 800e718:	e7ee      	b.n	800e6f8 <__swhatbuf_r+0x1e>
 800e71a:	2340      	movs	r3, #64	; 0x40
 800e71c:	2000      	movs	r0, #0
 800e71e:	6023      	str	r3, [r4, #0]
 800e720:	b016      	add	sp, #88	; 0x58
 800e722:	bd70      	pop	{r4, r5, r6, pc}

0800e724 <__smakebuf_r>:
 800e724:	898b      	ldrh	r3, [r1, #12]
 800e726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e728:	079d      	lsls	r5, r3, #30
 800e72a:	4606      	mov	r6, r0
 800e72c:	460c      	mov	r4, r1
 800e72e:	d507      	bpl.n	800e740 <__smakebuf_r+0x1c>
 800e730:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e734:	6023      	str	r3, [r4, #0]
 800e736:	6123      	str	r3, [r4, #16]
 800e738:	2301      	movs	r3, #1
 800e73a:	6163      	str	r3, [r4, #20]
 800e73c:	b002      	add	sp, #8
 800e73e:	bd70      	pop	{r4, r5, r6, pc}
 800e740:	ab01      	add	r3, sp, #4
 800e742:	466a      	mov	r2, sp
 800e744:	f7ff ffc9 	bl	800e6da <__swhatbuf_r>
 800e748:	9900      	ldr	r1, [sp, #0]
 800e74a:	4605      	mov	r5, r0
 800e74c:	4630      	mov	r0, r6
 800e74e:	f000 fc45 	bl	800efdc <_malloc_r>
 800e752:	b948      	cbnz	r0, 800e768 <__smakebuf_r+0x44>
 800e754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e758:	059a      	lsls	r2, r3, #22
 800e75a:	d4ef      	bmi.n	800e73c <__smakebuf_r+0x18>
 800e75c:	f023 0303 	bic.w	r3, r3, #3
 800e760:	f043 0302 	orr.w	r3, r3, #2
 800e764:	81a3      	strh	r3, [r4, #12]
 800e766:	e7e3      	b.n	800e730 <__smakebuf_r+0xc>
 800e768:	4b0d      	ldr	r3, [pc, #52]	; (800e7a0 <__smakebuf_r+0x7c>)
 800e76a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e76c:	89a3      	ldrh	r3, [r4, #12]
 800e76e:	6020      	str	r0, [r4, #0]
 800e770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e774:	81a3      	strh	r3, [r4, #12]
 800e776:	9b00      	ldr	r3, [sp, #0]
 800e778:	6163      	str	r3, [r4, #20]
 800e77a:	9b01      	ldr	r3, [sp, #4]
 800e77c:	6120      	str	r0, [r4, #16]
 800e77e:	b15b      	cbz	r3, 800e798 <__smakebuf_r+0x74>
 800e780:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e784:	4630      	mov	r0, r6
 800e786:	f000 feaf 	bl	800f4e8 <_isatty_r>
 800e78a:	b128      	cbz	r0, 800e798 <__smakebuf_r+0x74>
 800e78c:	89a3      	ldrh	r3, [r4, #12]
 800e78e:	f023 0303 	bic.w	r3, r3, #3
 800e792:	f043 0301 	orr.w	r3, r3, #1
 800e796:	81a3      	strh	r3, [r4, #12]
 800e798:	89a0      	ldrh	r0, [r4, #12]
 800e79a:	4305      	orrs	r5, r0
 800e79c:	81a5      	strh	r5, [r4, #12]
 800e79e:	e7cd      	b.n	800e73c <__smakebuf_r+0x18>
 800e7a0:	0800e529 	.word	0x0800e529

0800e7a4 <malloc>:
 800e7a4:	4b02      	ldr	r3, [pc, #8]	; (800e7b0 <malloc+0xc>)
 800e7a6:	4601      	mov	r1, r0
 800e7a8:	6818      	ldr	r0, [r3, #0]
 800e7aa:	f000 bc17 	b.w	800efdc <_malloc_r>
 800e7ae:	bf00      	nop
 800e7b0:	20000164 	.word	0x20000164

0800e7b4 <memcpy>:
 800e7b4:	440a      	add	r2, r1
 800e7b6:	4291      	cmp	r1, r2
 800e7b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e7bc:	d100      	bne.n	800e7c0 <memcpy+0xc>
 800e7be:	4770      	bx	lr
 800e7c0:	b510      	push	{r4, lr}
 800e7c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e7ca:	4291      	cmp	r1, r2
 800e7cc:	d1f9      	bne.n	800e7c2 <memcpy+0xe>
 800e7ce:	bd10      	pop	{r4, pc}

0800e7d0 <_Balloc>:
 800e7d0:	b570      	push	{r4, r5, r6, lr}
 800e7d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e7d4:	4604      	mov	r4, r0
 800e7d6:	460d      	mov	r5, r1
 800e7d8:	b976      	cbnz	r6, 800e7f8 <_Balloc+0x28>
 800e7da:	2010      	movs	r0, #16
 800e7dc:	f7ff ffe2 	bl	800e7a4 <malloc>
 800e7e0:	4602      	mov	r2, r0
 800e7e2:	6260      	str	r0, [r4, #36]	; 0x24
 800e7e4:	b920      	cbnz	r0, 800e7f0 <_Balloc+0x20>
 800e7e6:	4b18      	ldr	r3, [pc, #96]	; (800e848 <_Balloc+0x78>)
 800e7e8:	4818      	ldr	r0, [pc, #96]	; (800e84c <_Balloc+0x7c>)
 800e7ea:	2166      	movs	r1, #102	; 0x66
 800e7ec:	f000 fe2a 	bl	800f444 <__assert_func>
 800e7f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e7f4:	6006      	str	r6, [r0, #0]
 800e7f6:	60c6      	str	r6, [r0, #12]
 800e7f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e7fa:	68f3      	ldr	r3, [r6, #12]
 800e7fc:	b183      	cbz	r3, 800e820 <_Balloc+0x50>
 800e7fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e800:	68db      	ldr	r3, [r3, #12]
 800e802:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e806:	b9b8      	cbnz	r0, 800e838 <_Balloc+0x68>
 800e808:	2101      	movs	r1, #1
 800e80a:	fa01 f605 	lsl.w	r6, r1, r5
 800e80e:	1d72      	adds	r2, r6, #5
 800e810:	0092      	lsls	r2, r2, #2
 800e812:	4620      	mov	r0, r4
 800e814:	f000 fb60 	bl	800eed8 <_calloc_r>
 800e818:	b160      	cbz	r0, 800e834 <_Balloc+0x64>
 800e81a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e81e:	e00e      	b.n	800e83e <_Balloc+0x6e>
 800e820:	2221      	movs	r2, #33	; 0x21
 800e822:	2104      	movs	r1, #4
 800e824:	4620      	mov	r0, r4
 800e826:	f000 fb57 	bl	800eed8 <_calloc_r>
 800e82a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e82c:	60f0      	str	r0, [r6, #12]
 800e82e:	68db      	ldr	r3, [r3, #12]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d1e4      	bne.n	800e7fe <_Balloc+0x2e>
 800e834:	2000      	movs	r0, #0
 800e836:	bd70      	pop	{r4, r5, r6, pc}
 800e838:	6802      	ldr	r2, [r0, #0]
 800e83a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e83e:	2300      	movs	r3, #0
 800e840:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e844:	e7f7      	b.n	800e836 <_Balloc+0x66>
 800e846:	bf00      	nop
 800e848:	0800f73d 	.word	0x0800f73d
 800e84c:	0800f820 	.word	0x0800f820

0800e850 <_Bfree>:
 800e850:	b570      	push	{r4, r5, r6, lr}
 800e852:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e854:	4605      	mov	r5, r0
 800e856:	460c      	mov	r4, r1
 800e858:	b976      	cbnz	r6, 800e878 <_Bfree+0x28>
 800e85a:	2010      	movs	r0, #16
 800e85c:	f7ff ffa2 	bl	800e7a4 <malloc>
 800e860:	4602      	mov	r2, r0
 800e862:	6268      	str	r0, [r5, #36]	; 0x24
 800e864:	b920      	cbnz	r0, 800e870 <_Bfree+0x20>
 800e866:	4b09      	ldr	r3, [pc, #36]	; (800e88c <_Bfree+0x3c>)
 800e868:	4809      	ldr	r0, [pc, #36]	; (800e890 <_Bfree+0x40>)
 800e86a:	218a      	movs	r1, #138	; 0x8a
 800e86c:	f000 fdea 	bl	800f444 <__assert_func>
 800e870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e874:	6006      	str	r6, [r0, #0]
 800e876:	60c6      	str	r6, [r0, #12]
 800e878:	b13c      	cbz	r4, 800e88a <_Bfree+0x3a>
 800e87a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e87c:	6862      	ldr	r2, [r4, #4]
 800e87e:	68db      	ldr	r3, [r3, #12]
 800e880:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e884:	6021      	str	r1, [r4, #0]
 800e886:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e88a:	bd70      	pop	{r4, r5, r6, pc}
 800e88c:	0800f73d 	.word	0x0800f73d
 800e890:	0800f820 	.word	0x0800f820

0800e894 <__multadd>:
 800e894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e898:	690d      	ldr	r5, [r1, #16]
 800e89a:	4607      	mov	r7, r0
 800e89c:	460c      	mov	r4, r1
 800e89e:	461e      	mov	r6, r3
 800e8a0:	f101 0c14 	add.w	ip, r1, #20
 800e8a4:	2000      	movs	r0, #0
 800e8a6:	f8dc 3000 	ldr.w	r3, [ip]
 800e8aa:	b299      	uxth	r1, r3
 800e8ac:	fb02 6101 	mla	r1, r2, r1, r6
 800e8b0:	0c1e      	lsrs	r6, r3, #16
 800e8b2:	0c0b      	lsrs	r3, r1, #16
 800e8b4:	fb02 3306 	mla	r3, r2, r6, r3
 800e8b8:	b289      	uxth	r1, r1
 800e8ba:	3001      	adds	r0, #1
 800e8bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e8c0:	4285      	cmp	r5, r0
 800e8c2:	f84c 1b04 	str.w	r1, [ip], #4
 800e8c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e8ca:	dcec      	bgt.n	800e8a6 <__multadd+0x12>
 800e8cc:	b30e      	cbz	r6, 800e912 <__multadd+0x7e>
 800e8ce:	68a3      	ldr	r3, [r4, #8]
 800e8d0:	42ab      	cmp	r3, r5
 800e8d2:	dc19      	bgt.n	800e908 <__multadd+0x74>
 800e8d4:	6861      	ldr	r1, [r4, #4]
 800e8d6:	4638      	mov	r0, r7
 800e8d8:	3101      	adds	r1, #1
 800e8da:	f7ff ff79 	bl	800e7d0 <_Balloc>
 800e8de:	4680      	mov	r8, r0
 800e8e0:	b928      	cbnz	r0, 800e8ee <__multadd+0x5a>
 800e8e2:	4602      	mov	r2, r0
 800e8e4:	4b0c      	ldr	r3, [pc, #48]	; (800e918 <__multadd+0x84>)
 800e8e6:	480d      	ldr	r0, [pc, #52]	; (800e91c <__multadd+0x88>)
 800e8e8:	21b5      	movs	r1, #181	; 0xb5
 800e8ea:	f000 fdab 	bl	800f444 <__assert_func>
 800e8ee:	6922      	ldr	r2, [r4, #16]
 800e8f0:	3202      	adds	r2, #2
 800e8f2:	f104 010c 	add.w	r1, r4, #12
 800e8f6:	0092      	lsls	r2, r2, #2
 800e8f8:	300c      	adds	r0, #12
 800e8fa:	f7ff ff5b 	bl	800e7b4 <memcpy>
 800e8fe:	4621      	mov	r1, r4
 800e900:	4638      	mov	r0, r7
 800e902:	f7ff ffa5 	bl	800e850 <_Bfree>
 800e906:	4644      	mov	r4, r8
 800e908:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e90c:	3501      	adds	r5, #1
 800e90e:	615e      	str	r6, [r3, #20]
 800e910:	6125      	str	r5, [r4, #16]
 800e912:	4620      	mov	r0, r4
 800e914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e918:	0800f7af 	.word	0x0800f7af
 800e91c:	0800f820 	.word	0x0800f820

0800e920 <__hi0bits>:
 800e920:	0c03      	lsrs	r3, r0, #16
 800e922:	041b      	lsls	r3, r3, #16
 800e924:	b9d3      	cbnz	r3, 800e95c <__hi0bits+0x3c>
 800e926:	0400      	lsls	r0, r0, #16
 800e928:	2310      	movs	r3, #16
 800e92a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e92e:	bf04      	itt	eq
 800e930:	0200      	lsleq	r0, r0, #8
 800e932:	3308      	addeq	r3, #8
 800e934:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e938:	bf04      	itt	eq
 800e93a:	0100      	lsleq	r0, r0, #4
 800e93c:	3304      	addeq	r3, #4
 800e93e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e942:	bf04      	itt	eq
 800e944:	0080      	lsleq	r0, r0, #2
 800e946:	3302      	addeq	r3, #2
 800e948:	2800      	cmp	r0, #0
 800e94a:	db05      	blt.n	800e958 <__hi0bits+0x38>
 800e94c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e950:	f103 0301 	add.w	r3, r3, #1
 800e954:	bf08      	it	eq
 800e956:	2320      	moveq	r3, #32
 800e958:	4618      	mov	r0, r3
 800e95a:	4770      	bx	lr
 800e95c:	2300      	movs	r3, #0
 800e95e:	e7e4      	b.n	800e92a <__hi0bits+0xa>

0800e960 <__lo0bits>:
 800e960:	6803      	ldr	r3, [r0, #0]
 800e962:	f013 0207 	ands.w	r2, r3, #7
 800e966:	4601      	mov	r1, r0
 800e968:	d00b      	beq.n	800e982 <__lo0bits+0x22>
 800e96a:	07da      	lsls	r2, r3, #31
 800e96c:	d423      	bmi.n	800e9b6 <__lo0bits+0x56>
 800e96e:	0798      	lsls	r0, r3, #30
 800e970:	bf49      	itett	mi
 800e972:	085b      	lsrmi	r3, r3, #1
 800e974:	089b      	lsrpl	r3, r3, #2
 800e976:	2001      	movmi	r0, #1
 800e978:	600b      	strmi	r3, [r1, #0]
 800e97a:	bf5c      	itt	pl
 800e97c:	600b      	strpl	r3, [r1, #0]
 800e97e:	2002      	movpl	r0, #2
 800e980:	4770      	bx	lr
 800e982:	b298      	uxth	r0, r3
 800e984:	b9a8      	cbnz	r0, 800e9b2 <__lo0bits+0x52>
 800e986:	0c1b      	lsrs	r3, r3, #16
 800e988:	2010      	movs	r0, #16
 800e98a:	b2da      	uxtb	r2, r3
 800e98c:	b90a      	cbnz	r2, 800e992 <__lo0bits+0x32>
 800e98e:	3008      	adds	r0, #8
 800e990:	0a1b      	lsrs	r3, r3, #8
 800e992:	071a      	lsls	r2, r3, #28
 800e994:	bf04      	itt	eq
 800e996:	091b      	lsreq	r3, r3, #4
 800e998:	3004      	addeq	r0, #4
 800e99a:	079a      	lsls	r2, r3, #30
 800e99c:	bf04      	itt	eq
 800e99e:	089b      	lsreq	r3, r3, #2
 800e9a0:	3002      	addeq	r0, #2
 800e9a2:	07da      	lsls	r2, r3, #31
 800e9a4:	d403      	bmi.n	800e9ae <__lo0bits+0x4e>
 800e9a6:	085b      	lsrs	r3, r3, #1
 800e9a8:	f100 0001 	add.w	r0, r0, #1
 800e9ac:	d005      	beq.n	800e9ba <__lo0bits+0x5a>
 800e9ae:	600b      	str	r3, [r1, #0]
 800e9b0:	4770      	bx	lr
 800e9b2:	4610      	mov	r0, r2
 800e9b4:	e7e9      	b.n	800e98a <__lo0bits+0x2a>
 800e9b6:	2000      	movs	r0, #0
 800e9b8:	4770      	bx	lr
 800e9ba:	2020      	movs	r0, #32
 800e9bc:	4770      	bx	lr
	...

0800e9c0 <__i2b>:
 800e9c0:	b510      	push	{r4, lr}
 800e9c2:	460c      	mov	r4, r1
 800e9c4:	2101      	movs	r1, #1
 800e9c6:	f7ff ff03 	bl	800e7d0 <_Balloc>
 800e9ca:	4602      	mov	r2, r0
 800e9cc:	b928      	cbnz	r0, 800e9da <__i2b+0x1a>
 800e9ce:	4b05      	ldr	r3, [pc, #20]	; (800e9e4 <__i2b+0x24>)
 800e9d0:	4805      	ldr	r0, [pc, #20]	; (800e9e8 <__i2b+0x28>)
 800e9d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e9d6:	f000 fd35 	bl	800f444 <__assert_func>
 800e9da:	2301      	movs	r3, #1
 800e9dc:	6144      	str	r4, [r0, #20]
 800e9de:	6103      	str	r3, [r0, #16]
 800e9e0:	bd10      	pop	{r4, pc}
 800e9e2:	bf00      	nop
 800e9e4:	0800f7af 	.word	0x0800f7af
 800e9e8:	0800f820 	.word	0x0800f820

0800e9ec <__multiply>:
 800e9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9f0:	4691      	mov	r9, r2
 800e9f2:	690a      	ldr	r2, [r1, #16]
 800e9f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	bfb8      	it	lt
 800e9fc:	460b      	movlt	r3, r1
 800e9fe:	460c      	mov	r4, r1
 800ea00:	bfbc      	itt	lt
 800ea02:	464c      	movlt	r4, r9
 800ea04:	4699      	movlt	r9, r3
 800ea06:	6927      	ldr	r7, [r4, #16]
 800ea08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ea0c:	68a3      	ldr	r3, [r4, #8]
 800ea0e:	6861      	ldr	r1, [r4, #4]
 800ea10:	eb07 060a 	add.w	r6, r7, sl
 800ea14:	42b3      	cmp	r3, r6
 800ea16:	b085      	sub	sp, #20
 800ea18:	bfb8      	it	lt
 800ea1a:	3101      	addlt	r1, #1
 800ea1c:	f7ff fed8 	bl	800e7d0 <_Balloc>
 800ea20:	b930      	cbnz	r0, 800ea30 <__multiply+0x44>
 800ea22:	4602      	mov	r2, r0
 800ea24:	4b44      	ldr	r3, [pc, #272]	; (800eb38 <__multiply+0x14c>)
 800ea26:	4845      	ldr	r0, [pc, #276]	; (800eb3c <__multiply+0x150>)
 800ea28:	f240 115d 	movw	r1, #349	; 0x15d
 800ea2c:	f000 fd0a 	bl	800f444 <__assert_func>
 800ea30:	f100 0514 	add.w	r5, r0, #20
 800ea34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ea38:	462b      	mov	r3, r5
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	4543      	cmp	r3, r8
 800ea3e:	d321      	bcc.n	800ea84 <__multiply+0x98>
 800ea40:	f104 0314 	add.w	r3, r4, #20
 800ea44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ea48:	f109 0314 	add.w	r3, r9, #20
 800ea4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ea50:	9202      	str	r2, [sp, #8]
 800ea52:	1b3a      	subs	r2, r7, r4
 800ea54:	3a15      	subs	r2, #21
 800ea56:	f022 0203 	bic.w	r2, r2, #3
 800ea5a:	3204      	adds	r2, #4
 800ea5c:	f104 0115 	add.w	r1, r4, #21
 800ea60:	428f      	cmp	r7, r1
 800ea62:	bf38      	it	cc
 800ea64:	2204      	movcc	r2, #4
 800ea66:	9201      	str	r2, [sp, #4]
 800ea68:	9a02      	ldr	r2, [sp, #8]
 800ea6a:	9303      	str	r3, [sp, #12]
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d80c      	bhi.n	800ea8a <__multiply+0x9e>
 800ea70:	2e00      	cmp	r6, #0
 800ea72:	dd03      	ble.n	800ea7c <__multiply+0x90>
 800ea74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d05a      	beq.n	800eb32 <__multiply+0x146>
 800ea7c:	6106      	str	r6, [r0, #16]
 800ea7e:	b005      	add	sp, #20
 800ea80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea84:	f843 2b04 	str.w	r2, [r3], #4
 800ea88:	e7d8      	b.n	800ea3c <__multiply+0x50>
 800ea8a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ea8e:	f1ba 0f00 	cmp.w	sl, #0
 800ea92:	d024      	beq.n	800eade <__multiply+0xf2>
 800ea94:	f104 0e14 	add.w	lr, r4, #20
 800ea98:	46a9      	mov	r9, r5
 800ea9a:	f04f 0c00 	mov.w	ip, #0
 800ea9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800eaa2:	f8d9 1000 	ldr.w	r1, [r9]
 800eaa6:	fa1f fb82 	uxth.w	fp, r2
 800eaaa:	b289      	uxth	r1, r1
 800eaac:	fb0a 110b 	mla	r1, sl, fp, r1
 800eab0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800eab4:	f8d9 2000 	ldr.w	r2, [r9]
 800eab8:	4461      	add	r1, ip
 800eaba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eabe:	fb0a c20b 	mla	r2, sl, fp, ip
 800eac2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800eac6:	b289      	uxth	r1, r1
 800eac8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800eacc:	4577      	cmp	r7, lr
 800eace:	f849 1b04 	str.w	r1, [r9], #4
 800ead2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ead6:	d8e2      	bhi.n	800ea9e <__multiply+0xb2>
 800ead8:	9a01      	ldr	r2, [sp, #4]
 800eada:	f845 c002 	str.w	ip, [r5, r2]
 800eade:	9a03      	ldr	r2, [sp, #12]
 800eae0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eae4:	3304      	adds	r3, #4
 800eae6:	f1b9 0f00 	cmp.w	r9, #0
 800eaea:	d020      	beq.n	800eb2e <__multiply+0x142>
 800eaec:	6829      	ldr	r1, [r5, #0]
 800eaee:	f104 0c14 	add.w	ip, r4, #20
 800eaf2:	46ae      	mov	lr, r5
 800eaf4:	f04f 0a00 	mov.w	sl, #0
 800eaf8:	f8bc b000 	ldrh.w	fp, [ip]
 800eafc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800eb00:	fb09 220b 	mla	r2, r9, fp, r2
 800eb04:	4492      	add	sl, r2
 800eb06:	b289      	uxth	r1, r1
 800eb08:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800eb0c:	f84e 1b04 	str.w	r1, [lr], #4
 800eb10:	f85c 2b04 	ldr.w	r2, [ip], #4
 800eb14:	f8be 1000 	ldrh.w	r1, [lr]
 800eb18:	0c12      	lsrs	r2, r2, #16
 800eb1a:	fb09 1102 	mla	r1, r9, r2, r1
 800eb1e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800eb22:	4567      	cmp	r7, ip
 800eb24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eb28:	d8e6      	bhi.n	800eaf8 <__multiply+0x10c>
 800eb2a:	9a01      	ldr	r2, [sp, #4]
 800eb2c:	50a9      	str	r1, [r5, r2]
 800eb2e:	3504      	adds	r5, #4
 800eb30:	e79a      	b.n	800ea68 <__multiply+0x7c>
 800eb32:	3e01      	subs	r6, #1
 800eb34:	e79c      	b.n	800ea70 <__multiply+0x84>
 800eb36:	bf00      	nop
 800eb38:	0800f7af 	.word	0x0800f7af
 800eb3c:	0800f820 	.word	0x0800f820

0800eb40 <__pow5mult>:
 800eb40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb44:	4615      	mov	r5, r2
 800eb46:	f012 0203 	ands.w	r2, r2, #3
 800eb4a:	4606      	mov	r6, r0
 800eb4c:	460f      	mov	r7, r1
 800eb4e:	d007      	beq.n	800eb60 <__pow5mult+0x20>
 800eb50:	4c25      	ldr	r4, [pc, #148]	; (800ebe8 <__pow5mult+0xa8>)
 800eb52:	3a01      	subs	r2, #1
 800eb54:	2300      	movs	r3, #0
 800eb56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eb5a:	f7ff fe9b 	bl	800e894 <__multadd>
 800eb5e:	4607      	mov	r7, r0
 800eb60:	10ad      	asrs	r5, r5, #2
 800eb62:	d03d      	beq.n	800ebe0 <__pow5mult+0xa0>
 800eb64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800eb66:	b97c      	cbnz	r4, 800eb88 <__pow5mult+0x48>
 800eb68:	2010      	movs	r0, #16
 800eb6a:	f7ff fe1b 	bl	800e7a4 <malloc>
 800eb6e:	4602      	mov	r2, r0
 800eb70:	6270      	str	r0, [r6, #36]	; 0x24
 800eb72:	b928      	cbnz	r0, 800eb80 <__pow5mult+0x40>
 800eb74:	4b1d      	ldr	r3, [pc, #116]	; (800ebec <__pow5mult+0xac>)
 800eb76:	481e      	ldr	r0, [pc, #120]	; (800ebf0 <__pow5mult+0xb0>)
 800eb78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800eb7c:	f000 fc62 	bl	800f444 <__assert_func>
 800eb80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eb84:	6004      	str	r4, [r0, #0]
 800eb86:	60c4      	str	r4, [r0, #12]
 800eb88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800eb8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eb90:	b94c      	cbnz	r4, 800eba6 <__pow5mult+0x66>
 800eb92:	f240 2171 	movw	r1, #625	; 0x271
 800eb96:	4630      	mov	r0, r6
 800eb98:	f7ff ff12 	bl	800e9c0 <__i2b>
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	f8c8 0008 	str.w	r0, [r8, #8]
 800eba2:	4604      	mov	r4, r0
 800eba4:	6003      	str	r3, [r0, #0]
 800eba6:	f04f 0900 	mov.w	r9, #0
 800ebaa:	07eb      	lsls	r3, r5, #31
 800ebac:	d50a      	bpl.n	800ebc4 <__pow5mult+0x84>
 800ebae:	4639      	mov	r1, r7
 800ebb0:	4622      	mov	r2, r4
 800ebb2:	4630      	mov	r0, r6
 800ebb4:	f7ff ff1a 	bl	800e9ec <__multiply>
 800ebb8:	4639      	mov	r1, r7
 800ebba:	4680      	mov	r8, r0
 800ebbc:	4630      	mov	r0, r6
 800ebbe:	f7ff fe47 	bl	800e850 <_Bfree>
 800ebc2:	4647      	mov	r7, r8
 800ebc4:	106d      	asrs	r5, r5, #1
 800ebc6:	d00b      	beq.n	800ebe0 <__pow5mult+0xa0>
 800ebc8:	6820      	ldr	r0, [r4, #0]
 800ebca:	b938      	cbnz	r0, 800ebdc <__pow5mult+0x9c>
 800ebcc:	4622      	mov	r2, r4
 800ebce:	4621      	mov	r1, r4
 800ebd0:	4630      	mov	r0, r6
 800ebd2:	f7ff ff0b 	bl	800e9ec <__multiply>
 800ebd6:	6020      	str	r0, [r4, #0]
 800ebd8:	f8c0 9000 	str.w	r9, [r0]
 800ebdc:	4604      	mov	r4, r0
 800ebde:	e7e4      	b.n	800ebaa <__pow5mult+0x6a>
 800ebe0:	4638      	mov	r0, r7
 800ebe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebe6:	bf00      	nop
 800ebe8:	0800f970 	.word	0x0800f970
 800ebec:	0800f73d 	.word	0x0800f73d
 800ebf0:	0800f820 	.word	0x0800f820

0800ebf4 <__lshift>:
 800ebf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebf8:	460c      	mov	r4, r1
 800ebfa:	6849      	ldr	r1, [r1, #4]
 800ebfc:	6923      	ldr	r3, [r4, #16]
 800ebfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ec02:	68a3      	ldr	r3, [r4, #8]
 800ec04:	4607      	mov	r7, r0
 800ec06:	4691      	mov	r9, r2
 800ec08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ec0c:	f108 0601 	add.w	r6, r8, #1
 800ec10:	42b3      	cmp	r3, r6
 800ec12:	db0b      	blt.n	800ec2c <__lshift+0x38>
 800ec14:	4638      	mov	r0, r7
 800ec16:	f7ff fddb 	bl	800e7d0 <_Balloc>
 800ec1a:	4605      	mov	r5, r0
 800ec1c:	b948      	cbnz	r0, 800ec32 <__lshift+0x3e>
 800ec1e:	4602      	mov	r2, r0
 800ec20:	4b2a      	ldr	r3, [pc, #168]	; (800eccc <__lshift+0xd8>)
 800ec22:	482b      	ldr	r0, [pc, #172]	; (800ecd0 <__lshift+0xdc>)
 800ec24:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ec28:	f000 fc0c 	bl	800f444 <__assert_func>
 800ec2c:	3101      	adds	r1, #1
 800ec2e:	005b      	lsls	r3, r3, #1
 800ec30:	e7ee      	b.n	800ec10 <__lshift+0x1c>
 800ec32:	2300      	movs	r3, #0
 800ec34:	f100 0114 	add.w	r1, r0, #20
 800ec38:	f100 0210 	add.w	r2, r0, #16
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	4553      	cmp	r3, sl
 800ec40:	db37      	blt.n	800ecb2 <__lshift+0xbe>
 800ec42:	6920      	ldr	r0, [r4, #16]
 800ec44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ec48:	f104 0314 	add.w	r3, r4, #20
 800ec4c:	f019 091f 	ands.w	r9, r9, #31
 800ec50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ec54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ec58:	d02f      	beq.n	800ecba <__lshift+0xc6>
 800ec5a:	f1c9 0e20 	rsb	lr, r9, #32
 800ec5e:	468a      	mov	sl, r1
 800ec60:	f04f 0c00 	mov.w	ip, #0
 800ec64:	681a      	ldr	r2, [r3, #0]
 800ec66:	fa02 f209 	lsl.w	r2, r2, r9
 800ec6a:	ea42 020c 	orr.w	r2, r2, ip
 800ec6e:	f84a 2b04 	str.w	r2, [sl], #4
 800ec72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec76:	4298      	cmp	r0, r3
 800ec78:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ec7c:	d8f2      	bhi.n	800ec64 <__lshift+0x70>
 800ec7e:	1b03      	subs	r3, r0, r4
 800ec80:	3b15      	subs	r3, #21
 800ec82:	f023 0303 	bic.w	r3, r3, #3
 800ec86:	3304      	adds	r3, #4
 800ec88:	f104 0215 	add.w	r2, r4, #21
 800ec8c:	4290      	cmp	r0, r2
 800ec8e:	bf38      	it	cc
 800ec90:	2304      	movcc	r3, #4
 800ec92:	f841 c003 	str.w	ip, [r1, r3]
 800ec96:	f1bc 0f00 	cmp.w	ip, #0
 800ec9a:	d001      	beq.n	800eca0 <__lshift+0xac>
 800ec9c:	f108 0602 	add.w	r6, r8, #2
 800eca0:	3e01      	subs	r6, #1
 800eca2:	4638      	mov	r0, r7
 800eca4:	612e      	str	r6, [r5, #16]
 800eca6:	4621      	mov	r1, r4
 800eca8:	f7ff fdd2 	bl	800e850 <_Bfree>
 800ecac:	4628      	mov	r0, r5
 800ecae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecb2:	f842 0f04 	str.w	r0, [r2, #4]!
 800ecb6:	3301      	adds	r3, #1
 800ecb8:	e7c1      	b.n	800ec3e <__lshift+0x4a>
 800ecba:	3904      	subs	r1, #4
 800ecbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecc0:	f841 2f04 	str.w	r2, [r1, #4]!
 800ecc4:	4298      	cmp	r0, r3
 800ecc6:	d8f9      	bhi.n	800ecbc <__lshift+0xc8>
 800ecc8:	e7ea      	b.n	800eca0 <__lshift+0xac>
 800ecca:	bf00      	nop
 800eccc:	0800f7af 	.word	0x0800f7af
 800ecd0:	0800f820 	.word	0x0800f820

0800ecd4 <__mcmp>:
 800ecd4:	b530      	push	{r4, r5, lr}
 800ecd6:	6902      	ldr	r2, [r0, #16]
 800ecd8:	690c      	ldr	r4, [r1, #16]
 800ecda:	1b12      	subs	r2, r2, r4
 800ecdc:	d10e      	bne.n	800ecfc <__mcmp+0x28>
 800ecde:	f100 0314 	add.w	r3, r0, #20
 800ece2:	3114      	adds	r1, #20
 800ece4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ece8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ecec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ecf0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ecf4:	42a5      	cmp	r5, r4
 800ecf6:	d003      	beq.n	800ed00 <__mcmp+0x2c>
 800ecf8:	d305      	bcc.n	800ed06 <__mcmp+0x32>
 800ecfa:	2201      	movs	r2, #1
 800ecfc:	4610      	mov	r0, r2
 800ecfe:	bd30      	pop	{r4, r5, pc}
 800ed00:	4283      	cmp	r3, r0
 800ed02:	d3f3      	bcc.n	800ecec <__mcmp+0x18>
 800ed04:	e7fa      	b.n	800ecfc <__mcmp+0x28>
 800ed06:	f04f 32ff 	mov.w	r2, #4294967295
 800ed0a:	e7f7      	b.n	800ecfc <__mcmp+0x28>

0800ed0c <__mdiff>:
 800ed0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed10:	460c      	mov	r4, r1
 800ed12:	4606      	mov	r6, r0
 800ed14:	4611      	mov	r1, r2
 800ed16:	4620      	mov	r0, r4
 800ed18:	4690      	mov	r8, r2
 800ed1a:	f7ff ffdb 	bl	800ecd4 <__mcmp>
 800ed1e:	1e05      	subs	r5, r0, #0
 800ed20:	d110      	bne.n	800ed44 <__mdiff+0x38>
 800ed22:	4629      	mov	r1, r5
 800ed24:	4630      	mov	r0, r6
 800ed26:	f7ff fd53 	bl	800e7d0 <_Balloc>
 800ed2a:	b930      	cbnz	r0, 800ed3a <__mdiff+0x2e>
 800ed2c:	4b3a      	ldr	r3, [pc, #232]	; (800ee18 <__mdiff+0x10c>)
 800ed2e:	4602      	mov	r2, r0
 800ed30:	f240 2132 	movw	r1, #562	; 0x232
 800ed34:	4839      	ldr	r0, [pc, #228]	; (800ee1c <__mdiff+0x110>)
 800ed36:	f000 fb85 	bl	800f444 <__assert_func>
 800ed3a:	2301      	movs	r3, #1
 800ed3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ed40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed44:	bfa4      	itt	ge
 800ed46:	4643      	movge	r3, r8
 800ed48:	46a0      	movge	r8, r4
 800ed4a:	4630      	mov	r0, r6
 800ed4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ed50:	bfa6      	itte	ge
 800ed52:	461c      	movge	r4, r3
 800ed54:	2500      	movge	r5, #0
 800ed56:	2501      	movlt	r5, #1
 800ed58:	f7ff fd3a 	bl	800e7d0 <_Balloc>
 800ed5c:	b920      	cbnz	r0, 800ed68 <__mdiff+0x5c>
 800ed5e:	4b2e      	ldr	r3, [pc, #184]	; (800ee18 <__mdiff+0x10c>)
 800ed60:	4602      	mov	r2, r0
 800ed62:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ed66:	e7e5      	b.n	800ed34 <__mdiff+0x28>
 800ed68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ed6c:	6926      	ldr	r6, [r4, #16]
 800ed6e:	60c5      	str	r5, [r0, #12]
 800ed70:	f104 0914 	add.w	r9, r4, #20
 800ed74:	f108 0514 	add.w	r5, r8, #20
 800ed78:	f100 0e14 	add.w	lr, r0, #20
 800ed7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ed80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ed84:	f108 0210 	add.w	r2, r8, #16
 800ed88:	46f2      	mov	sl, lr
 800ed8a:	2100      	movs	r1, #0
 800ed8c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ed90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ed94:	fa1f f883 	uxth.w	r8, r3
 800ed98:	fa11 f18b 	uxtah	r1, r1, fp
 800ed9c:	0c1b      	lsrs	r3, r3, #16
 800ed9e:	eba1 0808 	sub.w	r8, r1, r8
 800eda2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800eda6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800edaa:	fa1f f888 	uxth.w	r8, r8
 800edae:	1419      	asrs	r1, r3, #16
 800edb0:	454e      	cmp	r6, r9
 800edb2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800edb6:	f84a 3b04 	str.w	r3, [sl], #4
 800edba:	d8e7      	bhi.n	800ed8c <__mdiff+0x80>
 800edbc:	1b33      	subs	r3, r6, r4
 800edbe:	3b15      	subs	r3, #21
 800edc0:	f023 0303 	bic.w	r3, r3, #3
 800edc4:	3304      	adds	r3, #4
 800edc6:	3415      	adds	r4, #21
 800edc8:	42a6      	cmp	r6, r4
 800edca:	bf38      	it	cc
 800edcc:	2304      	movcc	r3, #4
 800edce:	441d      	add	r5, r3
 800edd0:	4473      	add	r3, lr
 800edd2:	469e      	mov	lr, r3
 800edd4:	462e      	mov	r6, r5
 800edd6:	4566      	cmp	r6, ip
 800edd8:	d30e      	bcc.n	800edf8 <__mdiff+0xec>
 800edda:	f10c 0203 	add.w	r2, ip, #3
 800edde:	1b52      	subs	r2, r2, r5
 800ede0:	f022 0203 	bic.w	r2, r2, #3
 800ede4:	3d03      	subs	r5, #3
 800ede6:	45ac      	cmp	ip, r5
 800ede8:	bf38      	it	cc
 800edea:	2200      	movcc	r2, #0
 800edec:	441a      	add	r2, r3
 800edee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800edf2:	b17b      	cbz	r3, 800ee14 <__mdiff+0x108>
 800edf4:	6107      	str	r7, [r0, #16]
 800edf6:	e7a3      	b.n	800ed40 <__mdiff+0x34>
 800edf8:	f856 8b04 	ldr.w	r8, [r6], #4
 800edfc:	fa11 f288 	uxtah	r2, r1, r8
 800ee00:	1414      	asrs	r4, r2, #16
 800ee02:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ee06:	b292      	uxth	r2, r2
 800ee08:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ee0c:	f84e 2b04 	str.w	r2, [lr], #4
 800ee10:	1421      	asrs	r1, r4, #16
 800ee12:	e7e0      	b.n	800edd6 <__mdiff+0xca>
 800ee14:	3f01      	subs	r7, #1
 800ee16:	e7ea      	b.n	800edee <__mdiff+0xe2>
 800ee18:	0800f7af 	.word	0x0800f7af
 800ee1c:	0800f820 	.word	0x0800f820

0800ee20 <__d2b>:
 800ee20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ee24:	4689      	mov	r9, r1
 800ee26:	2101      	movs	r1, #1
 800ee28:	ec57 6b10 	vmov	r6, r7, d0
 800ee2c:	4690      	mov	r8, r2
 800ee2e:	f7ff fccf 	bl	800e7d0 <_Balloc>
 800ee32:	4604      	mov	r4, r0
 800ee34:	b930      	cbnz	r0, 800ee44 <__d2b+0x24>
 800ee36:	4602      	mov	r2, r0
 800ee38:	4b25      	ldr	r3, [pc, #148]	; (800eed0 <__d2b+0xb0>)
 800ee3a:	4826      	ldr	r0, [pc, #152]	; (800eed4 <__d2b+0xb4>)
 800ee3c:	f240 310a 	movw	r1, #778	; 0x30a
 800ee40:	f000 fb00 	bl	800f444 <__assert_func>
 800ee44:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ee48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ee4c:	bb35      	cbnz	r5, 800ee9c <__d2b+0x7c>
 800ee4e:	2e00      	cmp	r6, #0
 800ee50:	9301      	str	r3, [sp, #4]
 800ee52:	d028      	beq.n	800eea6 <__d2b+0x86>
 800ee54:	4668      	mov	r0, sp
 800ee56:	9600      	str	r6, [sp, #0]
 800ee58:	f7ff fd82 	bl	800e960 <__lo0bits>
 800ee5c:	9900      	ldr	r1, [sp, #0]
 800ee5e:	b300      	cbz	r0, 800eea2 <__d2b+0x82>
 800ee60:	9a01      	ldr	r2, [sp, #4]
 800ee62:	f1c0 0320 	rsb	r3, r0, #32
 800ee66:	fa02 f303 	lsl.w	r3, r2, r3
 800ee6a:	430b      	orrs	r3, r1
 800ee6c:	40c2      	lsrs	r2, r0
 800ee6e:	6163      	str	r3, [r4, #20]
 800ee70:	9201      	str	r2, [sp, #4]
 800ee72:	9b01      	ldr	r3, [sp, #4]
 800ee74:	61a3      	str	r3, [r4, #24]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	bf14      	ite	ne
 800ee7a:	2202      	movne	r2, #2
 800ee7c:	2201      	moveq	r2, #1
 800ee7e:	6122      	str	r2, [r4, #16]
 800ee80:	b1d5      	cbz	r5, 800eeb8 <__d2b+0x98>
 800ee82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ee86:	4405      	add	r5, r0
 800ee88:	f8c9 5000 	str.w	r5, [r9]
 800ee8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ee90:	f8c8 0000 	str.w	r0, [r8]
 800ee94:	4620      	mov	r0, r4
 800ee96:	b003      	add	sp, #12
 800ee98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eea0:	e7d5      	b.n	800ee4e <__d2b+0x2e>
 800eea2:	6161      	str	r1, [r4, #20]
 800eea4:	e7e5      	b.n	800ee72 <__d2b+0x52>
 800eea6:	a801      	add	r0, sp, #4
 800eea8:	f7ff fd5a 	bl	800e960 <__lo0bits>
 800eeac:	9b01      	ldr	r3, [sp, #4]
 800eeae:	6163      	str	r3, [r4, #20]
 800eeb0:	2201      	movs	r2, #1
 800eeb2:	6122      	str	r2, [r4, #16]
 800eeb4:	3020      	adds	r0, #32
 800eeb6:	e7e3      	b.n	800ee80 <__d2b+0x60>
 800eeb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eebc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eec0:	f8c9 0000 	str.w	r0, [r9]
 800eec4:	6918      	ldr	r0, [r3, #16]
 800eec6:	f7ff fd2b 	bl	800e920 <__hi0bits>
 800eeca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eece:	e7df      	b.n	800ee90 <__d2b+0x70>
 800eed0:	0800f7af 	.word	0x0800f7af
 800eed4:	0800f820 	.word	0x0800f820

0800eed8 <_calloc_r>:
 800eed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eeda:	fba1 2402 	umull	r2, r4, r1, r2
 800eede:	b94c      	cbnz	r4, 800eef4 <_calloc_r+0x1c>
 800eee0:	4611      	mov	r1, r2
 800eee2:	9201      	str	r2, [sp, #4]
 800eee4:	f000 f87a 	bl	800efdc <_malloc_r>
 800eee8:	9a01      	ldr	r2, [sp, #4]
 800eeea:	4605      	mov	r5, r0
 800eeec:	b930      	cbnz	r0, 800eefc <_calloc_r+0x24>
 800eeee:	4628      	mov	r0, r5
 800eef0:	b003      	add	sp, #12
 800eef2:	bd30      	pop	{r4, r5, pc}
 800eef4:	220c      	movs	r2, #12
 800eef6:	6002      	str	r2, [r0, #0]
 800eef8:	2500      	movs	r5, #0
 800eefa:	e7f8      	b.n	800eeee <_calloc_r+0x16>
 800eefc:	4621      	mov	r1, r4
 800eefe:	f7fd fe69 	bl	800cbd4 <memset>
 800ef02:	e7f4      	b.n	800eeee <_calloc_r+0x16>

0800ef04 <_free_r>:
 800ef04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef06:	2900      	cmp	r1, #0
 800ef08:	d044      	beq.n	800ef94 <_free_r+0x90>
 800ef0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef0e:	9001      	str	r0, [sp, #4]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	f1a1 0404 	sub.w	r4, r1, #4
 800ef16:	bfb8      	it	lt
 800ef18:	18e4      	addlt	r4, r4, r3
 800ef1a:	f000 fb19 	bl	800f550 <__malloc_lock>
 800ef1e:	4a1e      	ldr	r2, [pc, #120]	; (800ef98 <_free_r+0x94>)
 800ef20:	9801      	ldr	r0, [sp, #4]
 800ef22:	6813      	ldr	r3, [r2, #0]
 800ef24:	b933      	cbnz	r3, 800ef34 <_free_r+0x30>
 800ef26:	6063      	str	r3, [r4, #4]
 800ef28:	6014      	str	r4, [r2, #0]
 800ef2a:	b003      	add	sp, #12
 800ef2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef30:	f000 bb14 	b.w	800f55c <__malloc_unlock>
 800ef34:	42a3      	cmp	r3, r4
 800ef36:	d908      	bls.n	800ef4a <_free_r+0x46>
 800ef38:	6825      	ldr	r5, [r4, #0]
 800ef3a:	1961      	adds	r1, r4, r5
 800ef3c:	428b      	cmp	r3, r1
 800ef3e:	bf01      	itttt	eq
 800ef40:	6819      	ldreq	r1, [r3, #0]
 800ef42:	685b      	ldreq	r3, [r3, #4]
 800ef44:	1949      	addeq	r1, r1, r5
 800ef46:	6021      	streq	r1, [r4, #0]
 800ef48:	e7ed      	b.n	800ef26 <_free_r+0x22>
 800ef4a:	461a      	mov	r2, r3
 800ef4c:	685b      	ldr	r3, [r3, #4]
 800ef4e:	b10b      	cbz	r3, 800ef54 <_free_r+0x50>
 800ef50:	42a3      	cmp	r3, r4
 800ef52:	d9fa      	bls.n	800ef4a <_free_r+0x46>
 800ef54:	6811      	ldr	r1, [r2, #0]
 800ef56:	1855      	adds	r5, r2, r1
 800ef58:	42a5      	cmp	r5, r4
 800ef5a:	d10b      	bne.n	800ef74 <_free_r+0x70>
 800ef5c:	6824      	ldr	r4, [r4, #0]
 800ef5e:	4421      	add	r1, r4
 800ef60:	1854      	adds	r4, r2, r1
 800ef62:	42a3      	cmp	r3, r4
 800ef64:	6011      	str	r1, [r2, #0]
 800ef66:	d1e0      	bne.n	800ef2a <_free_r+0x26>
 800ef68:	681c      	ldr	r4, [r3, #0]
 800ef6a:	685b      	ldr	r3, [r3, #4]
 800ef6c:	6053      	str	r3, [r2, #4]
 800ef6e:	4421      	add	r1, r4
 800ef70:	6011      	str	r1, [r2, #0]
 800ef72:	e7da      	b.n	800ef2a <_free_r+0x26>
 800ef74:	d902      	bls.n	800ef7c <_free_r+0x78>
 800ef76:	230c      	movs	r3, #12
 800ef78:	6003      	str	r3, [r0, #0]
 800ef7a:	e7d6      	b.n	800ef2a <_free_r+0x26>
 800ef7c:	6825      	ldr	r5, [r4, #0]
 800ef7e:	1961      	adds	r1, r4, r5
 800ef80:	428b      	cmp	r3, r1
 800ef82:	bf04      	itt	eq
 800ef84:	6819      	ldreq	r1, [r3, #0]
 800ef86:	685b      	ldreq	r3, [r3, #4]
 800ef88:	6063      	str	r3, [r4, #4]
 800ef8a:	bf04      	itt	eq
 800ef8c:	1949      	addeq	r1, r1, r5
 800ef8e:	6021      	streq	r1, [r4, #0]
 800ef90:	6054      	str	r4, [r2, #4]
 800ef92:	e7ca      	b.n	800ef2a <_free_r+0x26>
 800ef94:	b003      	add	sp, #12
 800ef96:	bd30      	pop	{r4, r5, pc}
 800ef98:	20000e94 	.word	0x20000e94

0800ef9c <sbrk_aligned>:
 800ef9c:	b570      	push	{r4, r5, r6, lr}
 800ef9e:	4e0e      	ldr	r6, [pc, #56]	; (800efd8 <sbrk_aligned+0x3c>)
 800efa0:	460c      	mov	r4, r1
 800efa2:	6831      	ldr	r1, [r6, #0]
 800efa4:	4605      	mov	r5, r0
 800efa6:	b911      	cbnz	r1, 800efae <sbrk_aligned+0x12>
 800efa8:	f000 f9e6 	bl	800f378 <_sbrk_r>
 800efac:	6030      	str	r0, [r6, #0]
 800efae:	4621      	mov	r1, r4
 800efb0:	4628      	mov	r0, r5
 800efb2:	f000 f9e1 	bl	800f378 <_sbrk_r>
 800efb6:	1c43      	adds	r3, r0, #1
 800efb8:	d00a      	beq.n	800efd0 <sbrk_aligned+0x34>
 800efba:	1cc4      	adds	r4, r0, #3
 800efbc:	f024 0403 	bic.w	r4, r4, #3
 800efc0:	42a0      	cmp	r0, r4
 800efc2:	d007      	beq.n	800efd4 <sbrk_aligned+0x38>
 800efc4:	1a21      	subs	r1, r4, r0
 800efc6:	4628      	mov	r0, r5
 800efc8:	f000 f9d6 	bl	800f378 <_sbrk_r>
 800efcc:	3001      	adds	r0, #1
 800efce:	d101      	bne.n	800efd4 <sbrk_aligned+0x38>
 800efd0:	f04f 34ff 	mov.w	r4, #4294967295
 800efd4:	4620      	mov	r0, r4
 800efd6:	bd70      	pop	{r4, r5, r6, pc}
 800efd8:	20000e98 	.word	0x20000e98

0800efdc <_malloc_r>:
 800efdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efe0:	1ccd      	adds	r5, r1, #3
 800efe2:	f025 0503 	bic.w	r5, r5, #3
 800efe6:	3508      	adds	r5, #8
 800efe8:	2d0c      	cmp	r5, #12
 800efea:	bf38      	it	cc
 800efec:	250c      	movcc	r5, #12
 800efee:	2d00      	cmp	r5, #0
 800eff0:	4607      	mov	r7, r0
 800eff2:	db01      	blt.n	800eff8 <_malloc_r+0x1c>
 800eff4:	42a9      	cmp	r1, r5
 800eff6:	d905      	bls.n	800f004 <_malloc_r+0x28>
 800eff8:	230c      	movs	r3, #12
 800effa:	603b      	str	r3, [r7, #0]
 800effc:	2600      	movs	r6, #0
 800effe:	4630      	mov	r0, r6
 800f000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f004:	4e2e      	ldr	r6, [pc, #184]	; (800f0c0 <_malloc_r+0xe4>)
 800f006:	f000 faa3 	bl	800f550 <__malloc_lock>
 800f00a:	6833      	ldr	r3, [r6, #0]
 800f00c:	461c      	mov	r4, r3
 800f00e:	bb34      	cbnz	r4, 800f05e <_malloc_r+0x82>
 800f010:	4629      	mov	r1, r5
 800f012:	4638      	mov	r0, r7
 800f014:	f7ff ffc2 	bl	800ef9c <sbrk_aligned>
 800f018:	1c43      	adds	r3, r0, #1
 800f01a:	4604      	mov	r4, r0
 800f01c:	d14d      	bne.n	800f0ba <_malloc_r+0xde>
 800f01e:	6834      	ldr	r4, [r6, #0]
 800f020:	4626      	mov	r6, r4
 800f022:	2e00      	cmp	r6, #0
 800f024:	d140      	bne.n	800f0a8 <_malloc_r+0xcc>
 800f026:	6823      	ldr	r3, [r4, #0]
 800f028:	4631      	mov	r1, r6
 800f02a:	4638      	mov	r0, r7
 800f02c:	eb04 0803 	add.w	r8, r4, r3
 800f030:	f000 f9a2 	bl	800f378 <_sbrk_r>
 800f034:	4580      	cmp	r8, r0
 800f036:	d13a      	bne.n	800f0ae <_malloc_r+0xd2>
 800f038:	6821      	ldr	r1, [r4, #0]
 800f03a:	3503      	adds	r5, #3
 800f03c:	1a6d      	subs	r5, r5, r1
 800f03e:	f025 0503 	bic.w	r5, r5, #3
 800f042:	3508      	adds	r5, #8
 800f044:	2d0c      	cmp	r5, #12
 800f046:	bf38      	it	cc
 800f048:	250c      	movcc	r5, #12
 800f04a:	4629      	mov	r1, r5
 800f04c:	4638      	mov	r0, r7
 800f04e:	f7ff ffa5 	bl	800ef9c <sbrk_aligned>
 800f052:	3001      	adds	r0, #1
 800f054:	d02b      	beq.n	800f0ae <_malloc_r+0xd2>
 800f056:	6823      	ldr	r3, [r4, #0]
 800f058:	442b      	add	r3, r5
 800f05a:	6023      	str	r3, [r4, #0]
 800f05c:	e00e      	b.n	800f07c <_malloc_r+0xa0>
 800f05e:	6822      	ldr	r2, [r4, #0]
 800f060:	1b52      	subs	r2, r2, r5
 800f062:	d41e      	bmi.n	800f0a2 <_malloc_r+0xc6>
 800f064:	2a0b      	cmp	r2, #11
 800f066:	d916      	bls.n	800f096 <_malloc_r+0xba>
 800f068:	1961      	adds	r1, r4, r5
 800f06a:	42a3      	cmp	r3, r4
 800f06c:	6025      	str	r5, [r4, #0]
 800f06e:	bf18      	it	ne
 800f070:	6059      	strne	r1, [r3, #4]
 800f072:	6863      	ldr	r3, [r4, #4]
 800f074:	bf08      	it	eq
 800f076:	6031      	streq	r1, [r6, #0]
 800f078:	5162      	str	r2, [r4, r5]
 800f07a:	604b      	str	r3, [r1, #4]
 800f07c:	4638      	mov	r0, r7
 800f07e:	f104 060b 	add.w	r6, r4, #11
 800f082:	f000 fa6b 	bl	800f55c <__malloc_unlock>
 800f086:	f026 0607 	bic.w	r6, r6, #7
 800f08a:	1d23      	adds	r3, r4, #4
 800f08c:	1af2      	subs	r2, r6, r3
 800f08e:	d0b6      	beq.n	800effe <_malloc_r+0x22>
 800f090:	1b9b      	subs	r3, r3, r6
 800f092:	50a3      	str	r3, [r4, r2]
 800f094:	e7b3      	b.n	800effe <_malloc_r+0x22>
 800f096:	6862      	ldr	r2, [r4, #4]
 800f098:	42a3      	cmp	r3, r4
 800f09a:	bf0c      	ite	eq
 800f09c:	6032      	streq	r2, [r6, #0]
 800f09e:	605a      	strne	r2, [r3, #4]
 800f0a0:	e7ec      	b.n	800f07c <_malloc_r+0xa0>
 800f0a2:	4623      	mov	r3, r4
 800f0a4:	6864      	ldr	r4, [r4, #4]
 800f0a6:	e7b2      	b.n	800f00e <_malloc_r+0x32>
 800f0a8:	4634      	mov	r4, r6
 800f0aa:	6876      	ldr	r6, [r6, #4]
 800f0ac:	e7b9      	b.n	800f022 <_malloc_r+0x46>
 800f0ae:	230c      	movs	r3, #12
 800f0b0:	603b      	str	r3, [r7, #0]
 800f0b2:	4638      	mov	r0, r7
 800f0b4:	f000 fa52 	bl	800f55c <__malloc_unlock>
 800f0b8:	e7a1      	b.n	800effe <_malloc_r+0x22>
 800f0ba:	6025      	str	r5, [r4, #0]
 800f0bc:	e7de      	b.n	800f07c <_malloc_r+0xa0>
 800f0be:	bf00      	nop
 800f0c0:	20000e94 	.word	0x20000e94

0800f0c4 <__sfputc_r>:
 800f0c4:	6893      	ldr	r3, [r2, #8]
 800f0c6:	3b01      	subs	r3, #1
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	b410      	push	{r4}
 800f0cc:	6093      	str	r3, [r2, #8]
 800f0ce:	da08      	bge.n	800f0e2 <__sfputc_r+0x1e>
 800f0d0:	6994      	ldr	r4, [r2, #24]
 800f0d2:	42a3      	cmp	r3, r4
 800f0d4:	db01      	blt.n	800f0da <__sfputc_r+0x16>
 800f0d6:	290a      	cmp	r1, #10
 800f0d8:	d103      	bne.n	800f0e2 <__sfputc_r+0x1e>
 800f0da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0de:	f7fe ba03 	b.w	800d4e8 <__swbuf_r>
 800f0e2:	6813      	ldr	r3, [r2, #0]
 800f0e4:	1c58      	adds	r0, r3, #1
 800f0e6:	6010      	str	r0, [r2, #0]
 800f0e8:	7019      	strb	r1, [r3, #0]
 800f0ea:	4608      	mov	r0, r1
 800f0ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0f0:	4770      	bx	lr

0800f0f2 <__sfputs_r>:
 800f0f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0f4:	4606      	mov	r6, r0
 800f0f6:	460f      	mov	r7, r1
 800f0f8:	4614      	mov	r4, r2
 800f0fa:	18d5      	adds	r5, r2, r3
 800f0fc:	42ac      	cmp	r4, r5
 800f0fe:	d101      	bne.n	800f104 <__sfputs_r+0x12>
 800f100:	2000      	movs	r0, #0
 800f102:	e007      	b.n	800f114 <__sfputs_r+0x22>
 800f104:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f108:	463a      	mov	r2, r7
 800f10a:	4630      	mov	r0, r6
 800f10c:	f7ff ffda 	bl	800f0c4 <__sfputc_r>
 800f110:	1c43      	adds	r3, r0, #1
 800f112:	d1f3      	bne.n	800f0fc <__sfputs_r+0xa>
 800f114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f118 <_vfiprintf_r>:
 800f118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f11c:	460d      	mov	r5, r1
 800f11e:	b09d      	sub	sp, #116	; 0x74
 800f120:	4614      	mov	r4, r2
 800f122:	4698      	mov	r8, r3
 800f124:	4606      	mov	r6, r0
 800f126:	b118      	cbz	r0, 800f130 <_vfiprintf_r+0x18>
 800f128:	6983      	ldr	r3, [r0, #24]
 800f12a:	b90b      	cbnz	r3, 800f130 <_vfiprintf_r+0x18>
 800f12c:	f7ff fa30 	bl	800e590 <__sinit>
 800f130:	4b89      	ldr	r3, [pc, #548]	; (800f358 <_vfiprintf_r+0x240>)
 800f132:	429d      	cmp	r5, r3
 800f134:	d11b      	bne.n	800f16e <_vfiprintf_r+0x56>
 800f136:	6875      	ldr	r5, [r6, #4]
 800f138:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f13a:	07d9      	lsls	r1, r3, #31
 800f13c:	d405      	bmi.n	800f14a <_vfiprintf_r+0x32>
 800f13e:	89ab      	ldrh	r3, [r5, #12]
 800f140:	059a      	lsls	r2, r3, #22
 800f142:	d402      	bmi.n	800f14a <_vfiprintf_r+0x32>
 800f144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f146:	f7ff fac6 	bl	800e6d6 <__retarget_lock_acquire_recursive>
 800f14a:	89ab      	ldrh	r3, [r5, #12]
 800f14c:	071b      	lsls	r3, r3, #28
 800f14e:	d501      	bpl.n	800f154 <_vfiprintf_r+0x3c>
 800f150:	692b      	ldr	r3, [r5, #16]
 800f152:	b9eb      	cbnz	r3, 800f190 <_vfiprintf_r+0x78>
 800f154:	4629      	mov	r1, r5
 800f156:	4630      	mov	r0, r6
 800f158:	f7fe fa18 	bl	800d58c <__swsetup_r>
 800f15c:	b1c0      	cbz	r0, 800f190 <_vfiprintf_r+0x78>
 800f15e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f160:	07dc      	lsls	r4, r3, #31
 800f162:	d50e      	bpl.n	800f182 <_vfiprintf_r+0x6a>
 800f164:	f04f 30ff 	mov.w	r0, #4294967295
 800f168:	b01d      	add	sp, #116	; 0x74
 800f16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f16e:	4b7b      	ldr	r3, [pc, #492]	; (800f35c <_vfiprintf_r+0x244>)
 800f170:	429d      	cmp	r5, r3
 800f172:	d101      	bne.n	800f178 <_vfiprintf_r+0x60>
 800f174:	68b5      	ldr	r5, [r6, #8]
 800f176:	e7df      	b.n	800f138 <_vfiprintf_r+0x20>
 800f178:	4b79      	ldr	r3, [pc, #484]	; (800f360 <_vfiprintf_r+0x248>)
 800f17a:	429d      	cmp	r5, r3
 800f17c:	bf08      	it	eq
 800f17e:	68f5      	ldreq	r5, [r6, #12]
 800f180:	e7da      	b.n	800f138 <_vfiprintf_r+0x20>
 800f182:	89ab      	ldrh	r3, [r5, #12]
 800f184:	0598      	lsls	r0, r3, #22
 800f186:	d4ed      	bmi.n	800f164 <_vfiprintf_r+0x4c>
 800f188:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f18a:	f7ff faa5 	bl	800e6d8 <__retarget_lock_release_recursive>
 800f18e:	e7e9      	b.n	800f164 <_vfiprintf_r+0x4c>
 800f190:	2300      	movs	r3, #0
 800f192:	9309      	str	r3, [sp, #36]	; 0x24
 800f194:	2320      	movs	r3, #32
 800f196:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f19a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f19e:	2330      	movs	r3, #48	; 0x30
 800f1a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f364 <_vfiprintf_r+0x24c>
 800f1a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f1a8:	f04f 0901 	mov.w	r9, #1
 800f1ac:	4623      	mov	r3, r4
 800f1ae:	469a      	mov	sl, r3
 800f1b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1b4:	b10a      	cbz	r2, 800f1ba <_vfiprintf_r+0xa2>
 800f1b6:	2a25      	cmp	r2, #37	; 0x25
 800f1b8:	d1f9      	bne.n	800f1ae <_vfiprintf_r+0x96>
 800f1ba:	ebba 0b04 	subs.w	fp, sl, r4
 800f1be:	d00b      	beq.n	800f1d8 <_vfiprintf_r+0xc0>
 800f1c0:	465b      	mov	r3, fp
 800f1c2:	4622      	mov	r2, r4
 800f1c4:	4629      	mov	r1, r5
 800f1c6:	4630      	mov	r0, r6
 800f1c8:	f7ff ff93 	bl	800f0f2 <__sfputs_r>
 800f1cc:	3001      	adds	r0, #1
 800f1ce:	f000 80aa 	beq.w	800f326 <_vfiprintf_r+0x20e>
 800f1d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1d4:	445a      	add	r2, fp
 800f1d6:	9209      	str	r2, [sp, #36]	; 0x24
 800f1d8:	f89a 3000 	ldrb.w	r3, [sl]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	f000 80a2 	beq.w	800f326 <_vfiprintf_r+0x20e>
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	f04f 32ff 	mov.w	r2, #4294967295
 800f1e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1ec:	f10a 0a01 	add.w	sl, sl, #1
 800f1f0:	9304      	str	r3, [sp, #16]
 800f1f2:	9307      	str	r3, [sp, #28]
 800f1f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f1f8:	931a      	str	r3, [sp, #104]	; 0x68
 800f1fa:	4654      	mov	r4, sl
 800f1fc:	2205      	movs	r2, #5
 800f1fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f202:	4858      	ldr	r0, [pc, #352]	; (800f364 <_vfiprintf_r+0x24c>)
 800f204:	f7f0 ffec 	bl	80001e0 <memchr>
 800f208:	9a04      	ldr	r2, [sp, #16]
 800f20a:	b9d8      	cbnz	r0, 800f244 <_vfiprintf_r+0x12c>
 800f20c:	06d1      	lsls	r1, r2, #27
 800f20e:	bf44      	itt	mi
 800f210:	2320      	movmi	r3, #32
 800f212:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f216:	0713      	lsls	r3, r2, #28
 800f218:	bf44      	itt	mi
 800f21a:	232b      	movmi	r3, #43	; 0x2b
 800f21c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f220:	f89a 3000 	ldrb.w	r3, [sl]
 800f224:	2b2a      	cmp	r3, #42	; 0x2a
 800f226:	d015      	beq.n	800f254 <_vfiprintf_r+0x13c>
 800f228:	9a07      	ldr	r2, [sp, #28]
 800f22a:	4654      	mov	r4, sl
 800f22c:	2000      	movs	r0, #0
 800f22e:	f04f 0c0a 	mov.w	ip, #10
 800f232:	4621      	mov	r1, r4
 800f234:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f238:	3b30      	subs	r3, #48	; 0x30
 800f23a:	2b09      	cmp	r3, #9
 800f23c:	d94e      	bls.n	800f2dc <_vfiprintf_r+0x1c4>
 800f23e:	b1b0      	cbz	r0, 800f26e <_vfiprintf_r+0x156>
 800f240:	9207      	str	r2, [sp, #28]
 800f242:	e014      	b.n	800f26e <_vfiprintf_r+0x156>
 800f244:	eba0 0308 	sub.w	r3, r0, r8
 800f248:	fa09 f303 	lsl.w	r3, r9, r3
 800f24c:	4313      	orrs	r3, r2
 800f24e:	9304      	str	r3, [sp, #16]
 800f250:	46a2      	mov	sl, r4
 800f252:	e7d2      	b.n	800f1fa <_vfiprintf_r+0xe2>
 800f254:	9b03      	ldr	r3, [sp, #12]
 800f256:	1d19      	adds	r1, r3, #4
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	9103      	str	r1, [sp, #12]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	bfbb      	ittet	lt
 800f260:	425b      	neglt	r3, r3
 800f262:	f042 0202 	orrlt.w	r2, r2, #2
 800f266:	9307      	strge	r3, [sp, #28]
 800f268:	9307      	strlt	r3, [sp, #28]
 800f26a:	bfb8      	it	lt
 800f26c:	9204      	strlt	r2, [sp, #16]
 800f26e:	7823      	ldrb	r3, [r4, #0]
 800f270:	2b2e      	cmp	r3, #46	; 0x2e
 800f272:	d10c      	bne.n	800f28e <_vfiprintf_r+0x176>
 800f274:	7863      	ldrb	r3, [r4, #1]
 800f276:	2b2a      	cmp	r3, #42	; 0x2a
 800f278:	d135      	bne.n	800f2e6 <_vfiprintf_r+0x1ce>
 800f27a:	9b03      	ldr	r3, [sp, #12]
 800f27c:	1d1a      	adds	r2, r3, #4
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	9203      	str	r2, [sp, #12]
 800f282:	2b00      	cmp	r3, #0
 800f284:	bfb8      	it	lt
 800f286:	f04f 33ff 	movlt.w	r3, #4294967295
 800f28a:	3402      	adds	r4, #2
 800f28c:	9305      	str	r3, [sp, #20]
 800f28e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f374 <_vfiprintf_r+0x25c>
 800f292:	7821      	ldrb	r1, [r4, #0]
 800f294:	2203      	movs	r2, #3
 800f296:	4650      	mov	r0, sl
 800f298:	f7f0 ffa2 	bl	80001e0 <memchr>
 800f29c:	b140      	cbz	r0, 800f2b0 <_vfiprintf_r+0x198>
 800f29e:	2340      	movs	r3, #64	; 0x40
 800f2a0:	eba0 000a 	sub.w	r0, r0, sl
 800f2a4:	fa03 f000 	lsl.w	r0, r3, r0
 800f2a8:	9b04      	ldr	r3, [sp, #16]
 800f2aa:	4303      	orrs	r3, r0
 800f2ac:	3401      	adds	r4, #1
 800f2ae:	9304      	str	r3, [sp, #16]
 800f2b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2b4:	482c      	ldr	r0, [pc, #176]	; (800f368 <_vfiprintf_r+0x250>)
 800f2b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f2ba:	2206      	movs	r2, #6
 800f2bc:	f7f0 ff90 	bl	80001e0 <memchr>
 800f2c0:	2800      	cmp	r0, #0
 800f2c2:	d03f      	beq.n	800f344 <_vfiprintf_r+0x22c>
 800f2c4:	4b29      	ldr	r3, [pc, #164]	; (800f36c <_vfiprintf_r+0x254>)
 800f2c6:	bb1b      	cbnz	r3, 800f310 <_vfiprintf_r+0x1f8>
 800f2c8:	9b03      	ldr	r3, [sp, #12]
 800f2ca:	3307      	adds	r3, #7
 800f2cc:	f023 0307 	bic.w	r3, r3, #7
 800f2d0:	3308      	adds	r3, #8
 800f2d2:	9303      	str	r3, [sp, #12]
 800f2d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2d6:	443b      	add	r3, r7
 800f2d8:	9309      	str	r3, [sp, #36]	; 0x24
 800f2da:	e767      	b.n	800f1ac <_vfiprintf_r+0x94>
 800f2dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2e0:	460c      	mov	r4, r1
 800f2e2:	2001      	movs	r0, #1
 800f2e4:	e7a5      	b.n	800f232 <_vfiprintf_r+0x11a>
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	3401      	adds	r4, #1
 800f2ea:	9305      	str	r3, [sp, #20]
 800f2ec:	4619      	mov	r1, r3
 800f2ee:	f04f 0c0a 	mov.w	ip, #10
 800f2f2:	4620      	mov	r0, r4
 800f2f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2f8:	3a30      	subs	r2, #48	; 0x30
 800f2fa:	2a09      	cmp	r2, #9
 800f2fc:	d903      	bls.n	800f306 <_vfiprintf_r+0x1ee>
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d0c5      	beq.n	800f28e <_vfiprintf_r+0x176>
 800f302:	9105      	str	r1, [sp, #20]
 800f304:	e7c3      	b.n	800f28e <_vfiprintf_r+0x176>
 800f306:	fb0c 2101 	mla	r1, ip, r1, r2
 800f30a:	4604      	mov	r4, r0
 800f30c:	2301      	movs	r3, #1
 800f30e:	e7f0      	b.n	800f2f2 <_vfiprintf_r+0x1da>
 800f310:	ab03      	add	r3, sp, #12
 800f312:	9300      	str	r3, [sp, #0]
 800f314:	462a      	mov	r2, r5
 800f316:	4b16      	ldr	r3, [pc, #88]	; (800f370 <_vfiprintf_r+0x258>)
 800f318:	a904      	add	r1, sp, #16
 800f31a:	4630      	mov	r0, r6
 800f31c:	f7fd fd02 	bl	800cd24 <_printf_float>
 800f320:	4607      	mov	r7, r0
 800f322:	1c78      	adds	r0, r7, #1
 800f324:	d1d6      	bne.n	800f2d4 <_vfiprintf_r+0x1bc>
 800f326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f328:	07d9      	lsls	r1, r3, #31
 800f32a:	d405      	bmi.n	800f338 <_vfiprintf_r+0x220>
 800f32c:	89ab      	ldrh	r3, [r5, #12]
 800f32e:	059a      	lsls	r2, r3, #22
 800f330:	d402      	bmi.n	800f338 <_vfiprintf_r+0x220>
 800f332:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f334:	f7ff f9d0 	bl	800e6d8 <__retarget_lock_release_recursive>
 800f338:	89ab      	ldrh	r3, [r5, #12]
 800f33a:	065b      	lsls	r3, r3, #25
 800f33c:	f53f af12 	bmi.w	800f164 <_vfiprintf_r+0x4c>
 800f340:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f342:	e711      	b.n	800f168 <_vfiprintf_r+0x50>
 800f344:	ab03      	add	r3, sp, #12
 800f346:	9300      	str	r3, [sp, #0]
 800f348:	462a      	mov	r2, r5
 800f34a:	4b09      	ldr	r3, [pc, #36]	; (800f370 <_vfiprintf_r+0x258>)
 800f34c:	a904      	add	r1, sp, #16
 800f34e:	4630      	mov	r0, r6
 800f350:	f7fd ff8c 	bl	800d26c <_printf_i>
 800f354:	e7e4      	b.n	800f320 <_vfiprintf_r+0x208>
 800f356:	bf00      	nop
 800f358:	0800f7e0 	.word	0x0800f7e0
 800f35c:	0800f800 	.word	0x0800f800
 800f360:	0800f7c0 	.word	0x0800f7c0
 800f364:	0800f97c 	.word	0x0800f97c
 800f368:	0800f986 	.word	0x0800f986
 800f36c:	0800cd25 	.word	0x0800cd25
 800f370:	0800f0f3 	.word	0x0800f0f3
 800f374:	0800f982 	.word	0x0800f982

0800f378 <_sbrk_r>:
 800f378:	b538      	push	{r3, r4, r5, lr}
 800f37a:	4d06      	ldr	r5, [pc, #24]	; (800f394 <_sbrk_r+0x1c>)
 800f37c:	2300      	movs	r3, #0
 800f37e:	4604      	mov	r4, r0
 800f380:	4608      	mov	r0, r1
 800f382:	602b      	str	r3, [r5, #0]
 800f384:	f7f2 fce4 	bl	8001d50 <_sbrk>
 800f388:	1c43      	adds	r3, r0, #1
 800f38a:	d102      	bne.n	800f392 <_sbrk_r+0x1a>
 800f38c:	682b      	ldr	r3, [r5, #0]
 800f38e:	b103      	cbz	r3, 800f392 <_sbrk_r+0x1a>
 800f390:	6023      	str	r3, [r4, #0]
 800f392:	bd38      	pop	{r3, r4, r5, pc}
 800f394:	20000e9c 	.word	0x20000e9c

0800f398 <__sread>:
 800f398:	b510      	push	{r4, lr}
 800f39a:	460c      	mov	r4, r1
 800f39c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3a0:	f000 f8e2 	bl	800f568 <_read_r>
 800f3a4:	2800      	cmp	r0, #0
 800f3a6:	bfab      	itete	ge
 800f3a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f3aa:	89a3      	ldrhlt	r3, [r4, #12]
 800f3ac:	181b      	addge	r3, r3, r0
 800f3ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f3b2:	bfac      	ite	ge
 800f3b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f3b6:	81a3      	strhlt	r3, [r4, #12]
 800f3b8:	bd10      	pop	{r4, pc}

0800f3ba <__swrite>:
 800f3ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3be:	461f      	mov	r7, r3
 800f3c0:	898b      	ldrh	r3, [r1, #12]
 800f3c2:	05db      	lsls	r3, r3, #23
 800f3c4:	4605      	mov	r5, r0
 800f3c6:	460c      	mov	r4, r1
 800f3c8:	4616      	mov	r6, r2
 800f3ca:	d505      	bpl.n	800f3d8 <__swrite+0x1e>
 800f3cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3d0:	2302      	movs	r3, #2
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	f000 f898 	bl	800f508 <_lseek_r>
 800f3d8:	89a3      	ldrh	r3, [r4, #12]
 800f3da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f3e2:	81a3      	strh	r3, [r4, #12]
 800f3e4:	4632      	mov	r2, r6
 800f3e6:	463b      	mov	r3, r7
 800f3e8:	4628      	mov	r0, r5
 800f3ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3ee:	f000 b817 	b.w	800f420 <_write_r>

0800f3f2 <__sseek>:
 800f3f2:	b510      	push	{r4, lr}
 800f3f4:	460c      	mov	r4, r1
 800f3f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3fa:	f000 f885 	bl	800f508 <_lseek_r>
 800f3fe:	1c43      	adds	r3, r0, #1
 800f400:	89a3      	ldrh	r3, [r4, #12]
 800f402:	bf15      	itete	ne
 800f404:	6560      	strne	r0, [r4, #84]	; 0x54
 800f406:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f40a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f40e:	81a3      	strheq	r3, [r4, #12]
 800f410:	bf18      	it	ne
 800f412:	81a3      	strhne	r3, [r4, #12]
 800f414:	bd10      	pop	{r4, pc}

0800f416 <__sclose>:
 800f416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f41a:	f000 b831 	b.w	800f480 <_close_r>
	...

0800f420 <_write_r>:
 800f420:	b538      	push	{r3, r4, r5, lr}
 800f422:	4d07      	ldr	r5, [pc, #28]	; (800f440 <_write_r+0x20>)
 800f424:	4604      	mov	r4, r0
 800f426:	4608      	mov	r0, r1
 800f428:	4611      	mov	r1, r2
 800f42a:	2200      	movs	r2, #0
 800f42c:	602a      	str	r2, [r5, #0]
 800f42e:	461a      	mov	r2, r3
 800f430:	f7f2 fc3d 	bl	8001cae <_write>
 800f434:	1c43      	adds	r3, r0, #1
 800f436:	d102      	bne.n	800f43e <_write_r+0x1e>
 800f438:	682b      	ldr	r3, [r5, #0]
 800f43a:	b103      	cbz	r3, 800f43e <_write_r+0x1e>
 800f43c:	6023      	str	r3, [r4, #0]
 800f43e:	bd38      	pop	{r3, r4, r5, pc}
 800f440:	20000e9c 	.word	0x20000e9c

0800f444 <__assert_func>:
 800f444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f446:	4614      	mov	r4, r2
 800f448:	461a      	mov	r2, r3
 800f44a:	4b09      	ldr	r3, [pc, #36]	; (800f470 <__assert_func+0x2c>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	4605      	mov	r5, r0
 800f450:	68d8      	ldr	r0, [r3, #12]
 800f452:	b14c      	cbz	r4, 800f468 <__assert_func+0x24>
 800f454:	4b07      	ldr	r3, [pc, #28]	; (800f474 <__assert_func+0x30>)
 800f456:	9100      	str	r1, [sp, #0]
 800f458:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f45c:	4906      	ldr	r1, [pc, #24]	; (800f478 <__assert_func+0x34>)
 800f45e:	462b      	mov	r3, r5
 800f460:	f000 f81e 	bl	800f4a0 <fiprintf>
 800f464:	f000 f89f 	bl	800f5a6 <abort>
 800f468:	4b04      	ldr	r3, [pc, #16]	; (800f47c <__assert_func+0x38>)
 800f46a:	461c      	mov	r4, r3
 800f46c:	e7f3      	b.n	800f456 <__assert_func+0x12>
 800f46e:	bf00      	nop
 800f470:	20000164 	.word	0x20000164
 800f474:	0800f98d 	.word	0x0800f98d
 800f478:	0800f99a 	.word	0x0800f99a
 800f47c:	0800f9c8 	.word	0x0800f9c8

0800f480 <_close_r>:
 800f480:	b538      	push	{r3, r4, r5, lr}
 800f482:	4d06      	ldr	r5, [pc, #24]	; (800f49c <_close_r+0x1c>)
 800f484:	2300      	movs	r3, #0
 800f486:	4604      	mov	r4, r0
 800f488:	4608      	mov	r0, r1
 800f48a:	602b      	str	r3, [r5, #0]
 800f48c:	f7f2 fc2b 	bl	8001ce6 <_close>
 800f490:	1c43      	adds	r3, r0, #1
 800f492:	d102      	bne.n	800f49a <_close_r+0x1a>
 800f494:	682b      	ldr	r3, [r5, #0]
 800f496:	b103      	cbz	r3, 800f49a <_close_r+0x1a>
 800f498:	6023      	str	r3, [r4, #0]
 800f49a:	bd38      	pop	{r3, r4, r5, pc}
 800f49c:	20000e9c 	.word	0x20000e9c

0800f4a0 <fiprintf>:
 800f4a0:	b40e      	push	{r1, r2, r3}
 800f4a2:	b503      	push	{r0, r1, lr}
 800f4a4:	4601      	mov	r1, r0
 800f4a6:	ab03      	add	r3, sp, #12
 800f4a8:	4805      	ldr	r0, [pc, #20]	; (800f4c0 <fiprintf+0x20>)
 800f4aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4ae:	6800      	ldr	r0, [r0, #0]
 800f4b0:	9301      	str	r3, [sp, #4]
 800f4b2:	f7ff fe31 	bl	800f118 <_vfiprintf_r>
 800f4b6:	b002      	add	sp, #8
 800f4b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4bc:	b003      	add	sp, #12
 800f4be:	4770      	bx	lr
 800f4c0:	20000164 	.word	0x20000164

0800f4c4 <_fstat_r>:
 800f4c4:	b538      	push	{r3, r4, r5, lr}
 800f4c6:	4d07      	ldr	r5, [pc, #28]	; (800f4e4 <_fstat_r+0x20>)
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	4604      	mov	r4, r0
 800f4cc:	4608      	mov	r0, r1
 800f4ce:	4611      	mov	r1, r2
 800f4d0:	602b      	str	r3, [r5, #0]
 800f4d2:	f7f2 fc14 	bl	8001cfe <_fstat>
 800f4d6:	1c43      	adds	r3, r0, #1
 800f4d8:	d102      	bne.n	800f4e0 <_fstat_r+0x1c>
 800f4da:	682b      	ldr	r3, [r5, #0]
 800f4dc:	b103      	cbz	r3, 800f4e0 <_fstat_r+0x1c>
 800f4de:	6023      	str	r3, [r4, #0]
 800f4e0:	bd38      	pop	{r3, r4, r5, pc}
 800f4e2:	bf00      	nop
 800f4e4:	20000e9c 	.word	0x20000e9c

0800f4e8 <_isatty_r>:
 800f4e8:	b538      	push	{r3, r4, r5, lr}
 800f4ea:	4d06      	ldr	r5, [pc, #24]	; (800f504 <_isatty_r+0x1c>)
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	4604      	mov	r4, r0
 800f4f0:	4608      	mov	r0, r1
 800f4f2:	602b      	str	r3, [r5, #0]
 800f4f4:	f7f2 fc13 	bl	8001d1e <_isatty>
 800f4f8:	1c43      	adds	r3, r0, #1
 800f4fa:	d102      	bne.n	800f502 <_isatty_r+0x1a>
 800f4fc:	682b      	ldr	r3, [r5, #0]
 800f4fe:	b103      	cbz	r3, 800f502 <_isatty_r+0x1a>
 800f500:	6023      	str	r3, [r4, #0]
 800f502:	bd38      	pop	{r3, r4, r5, pc}
 800f504:	20000e9c 	.word	0x20000e9c

0800f508 <_lseek_r>:
 800f508:	b538      	push	{r3, r4, r5, lr}
 800f50a:	4d07      	ldr	r5, [pc, #28]	; (800f528 <_lseek_r+0x20>)
 800f50c:	4604      	mov	r4, r0
 800f50e:	4608      	mov	r0, r1
 800f510:	4611      	mov	r1, r2
 800f512:	2200      	movs	r2, #0
 800f514:	602a      	str	r2, [r5, #0]
 800f516:	461a      	mov	r2, r3
 800f518:	f7f2 fc0c 	bl	8001d34 <_lseek>
 800f51c:	1c43      	adds	r3, r0, #1
 800f51e:	d102      	bne.n	800f526 <_lseek_r+0x1e>
 800f520:	682b      	ldr	r3, [r5, #0]
 800f522:	b103      	cbz	r3, 800f526 <_lseek_r+0x1e>
 800f524:	6023      	str	r3, [r4, #0]
 800f526:	bd38      	pop	{r3, r4, r5, pc}
 800f528:	20000e9c 	.word	0x20000e9c

0800f52c <__ascii_mbtowc>:
 800f52c:	b082      	sub	sp, #8
 800f52e:	b901      	cbnz	r1, 800f532 <__ascii_mbtowc+0x6>
 800f530:	a901      	add	r1, sp, #4
 800f532:	b142      	cbz	r2, 800f546 <__ascii_mbtowc+0x1a>
 800f534:	b14b      	cbz	r3, 800f54a <__ascii_mbtowc+0x1e>
 800f536:	7813      	ldrb	r3, [r2, #0]
 800f538:	600b      	str	r3, [r1, #0]
 800f53a:	7812      	ldrb	r2, [r2, #0]
 800f53c:	1e10      	subs	r0, r2, #0
 800f53e:	bf18      	it	ne
 800f540:	2001      	movne	r0, #1
 800f542:	b002      	add	sp, #8
 800f544:	4770      	bx	lr
 800f546:	4610      	mov	r0, r2
 800f548:	e7fb      	b.n	800f542 <__ascii_mbtowc+0x16>
 800f54a:	f06f 0001 	mvn.w	r0, #1
 800f54e:	e7f8      	b.n	800f542 <__ascii_mbtowc+0x16>

0800f550 <__malloc_lock>:
 800f550:	4801      	ldr	r0, [pc, #4]	; (800f558 <__malloc_lock+0x8>)
 800f552:	f7ff b8c0 	b.w	800e6d6 <__retarget_lock_acquire_recursive>
 800f556:	bf00      	nop
 800f558:	20000e90 	.word	0x20000e90

0800f55c <__malloc_unlock>:
 800f55c:	4801      	ldr	r0, [pc, #4]	; (800f564 <__malloc_unlock+0x8>)
 800f55e:	f7ff b8bb 	b.w	800e6d8 <__retarget_lock_release_recursive>
 800f562:	bf00      	nop
 800f564:	20000e90 	.word	0x20000e90

0800f568 <_read_r>:
 800f568:	b538      	push	{r3, r4, r5, lr}
 800f56a:	4d07      	ldr	r5, [pc, #28]	; (800f588 <_read_r+0x20>)
 800f56c:	4604      	mov	r4, r0
 800f56e:	4608      	mov	r0, r1
 800f570:	4611      	mov	r1, r2
 800f572:	2200      	movs	r2, #0
 800f574:	602a      	str	r2, [r5, #0]
 800f576:	461a      	mov	r2, r3
 800f578:	f7f2 fb7c 	bl	8001c74 <_read>
 800f57c:	1c43      	adds	r3, r0, #1
 800f57e:	d102      	bne.n	800f586 <_read_r+0x1e>
 800f580:	682b      	ldr	r3, [r5, #0]
 800f582:	b103      	cbz	r3, 800f586 <_read_r+0x1e>
 800f584:	6023      	str	r3, [r4, #0]
 800f586:	bd38      	pop	{r3, r4, r5, pc}
 800f588:	20000e9c 	.word	0x20000e9c

0800f58c <__ascii_wctomb>:
 800f58c:	b149      	cbz	r1, 800f5a2 <__ascii_wctomb+0x16>
 800f58e:	2aff      	cmp	r2, #255	; 0xff
 800f590:	bf85      	ittet	hi
 800f592:	238a      	movhi	r3, #138	; 0x8a
 800f594:	6003      	strhi	r3, [r0, #0]
 800f596:	700a      	strbls	r2, [r1, #0]
 800f598:	f04f 30ff 	movhi.w	r0, #4294967295
 800f59c:	bf98      	it	ls
 800f59e:	2001      	movls	r0, #1
 800f5a0:	4770      	bx	lr
 800f5a2:	4608      	mov	r0, r1
 800f5a4:	4770      	bx	lr

0800f5a6 <abort>:
 800f5a6:	b508      	push	{r3, lr}
 800f5a8:	2006      	movs	r0, #6
 800f5aa:	f000 f82b 	bl	800f604 <raise>
 800f5ae:	2001      	movs	r0, #1
 800f5b0:	f7f2 fb56 	bl	8001c60 <_exit>

0800f5b4 <_raise_r>:
 800f5b4:	291f      	cmp	r1, #31
 800f5b6:	b538      	push	{r3, r4, r5, lr}
 800f5b8:	4604      	mov	r4, r0
 800f5ba:	460d      	mov	r5, r1
 800f5bc:	d904      	bls.n	800f5c8 <_raise_r+0x14>
 800f5be:	2316      	movs	r3, #22
 800f5c0:	6003      	str	r3, [r0, #0]
 800f5c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f5c6:	bd38      	pop	{r3, r4, r5, pc}
 800f5c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f5ca:	b112      	cbz	r2, 800f5d2 <_raise_r+0x1e>
 800f5cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f5d0:	b94b      	cbnz	r3, 800f5e6 <_raise_r+0x32>
 800f5d2:	4620      	mov	r0, r4
 800f5d4:	f000 f830 	bl	800f638 <_getpid_r>
 800f5d8:	462a      	mov	r2, r5
 800f5da:	4601      	mov	r1, r0
 800f5dc:	4620      	mov	r0, r4
 800f5de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f5e2:	f000 b817 	b.w	800f614 <_kill_r>
 800f5e6:	2b01      	cmp	r3, #1
 800f5e8:	d00a      	beq.n	800f600 <_raise_r+0x4c>
 800f5ea:	1c59      	adds	r1, r3, #1
 800f5ec:	d103      	bne.n	800f5f6 <_raise_r+0x42>
 800f5ee:	2316      	movs	r3, #22
 800f5f0:	6003      	str	r3, [r0, #0]
 800f5f2:	2001      	movs	r0, #1
 800f5f4:	e7e7      	b.n	800f5c6 <_raise_r+0x12>
 800f5f6:	2400      	movs	r4, #0
 800f5f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f5fc:	4628      	mov	r0, r5
 800f5fe:	4798      	blx	r3
 800f600:	2000      	movs	r0, #0
 800f602:	e7e0      	b.n	800f5c6 <_raise_r+0x12>

0800f604 <raise>:
 800f604:	4b02      	ldr	r3, [pc, #8]	; (800f610 <raise+0xc>)
 800f606:	4601      	mov	r1, r0
 800f608:	6818      	ldr	r0, [r3, #0]
 800f60a:	f7ff bfd3 	b.w	800f5b4 <_raise_r>
 800f60e:	bf00      	nop
 800f610:	20000164 	.word	0x20000164

0800f614 <_kill_r>:
 800f614:	b538      	push	{r3, r4, r5, lr}
 800f616:	4d07      	ldr	r5, [pc, #28]	; (800f634 <_kill_r+0x20>)
 800f618:	2300      	movs	r3, #0
 800f61a:	4604      	mov	r4, r0
 800f61c:	4608      	mov	r0, r1
 800f61e:	4611      	mov	r1, r2
 800f620:	602b      	str	r3, [r5, #0]
 800f622:	f7f2 fb0d 	bl	8001c40 <_kill>
 800f626:	1c43      	adds	r3, r0, #1
 800f628:	d102      	bne.n	800f630 <_kill_r+0x1c>
 800f62a:	682b      	ldr	r3, [r5, #0]
 800f62c:	b103      	cbz	r3, 800f630 <_kill_r+0x1c>
 800f62e:	6023      	str	r3, [r4, #0]
 800f630:	bd38      	pop	{r3, r4, r5, pc}
 800f632:	bf00      	nop
 800f634:	20000e9c 	.word	0x20000e9c

0800f638 <_getpid_r>:
 800f638:	f7f2 bafa 	b.w	8001c30 <_getpid>

0800f63c <_init>:
 800f63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f63e:	bf00      	nop
 800f640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f642:	bc08      	pop	{r3}
 800f644:	469e      	mov	lr, r3
 800f646:	4770      	bx	lr

0800f648 <_fini>:
 800f648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f64a:	bf00      	nop
 800f64c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f64e:	bc08      	pop	{r3}
 800f650:	469e      	mov	lr, r3
 800f652:	4770      	bx	lr
