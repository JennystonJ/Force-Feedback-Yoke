
Force Feedback Yoke.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000109d0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f0  08010b60  08010b60  00011b60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011350  08011350  00013334  2**0
                  CONTENTS
  4 .ARM          00000008  08011350  08011350  00012350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011358  08011358  00013334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011358  08011358  00012358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801135c  0801135c  0001235c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  08011360  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00013334  2**0
                  CONTENTS
 10 .bss          00000dc8  20000338  20000338  00013338  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001100  20001100  00013338  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00013334  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020fa6  00000000  00000000  00013364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f4f  00000000  00000000  0003430a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b08  00000000  00000000  00039260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014be  00000000  00000000  0003ad68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000082a9  00000000  00000000  0003c226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002615d  00000000  00000000  000444cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2eaf  00000000  00000000  0006a62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012d4db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008130  00000000  00000000  0012d520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000089  00000000  00000000  00135650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000338 	.word	0x20000338
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010b48 	.word	0x08010b48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000033c 	.word	0x2000033c
 80001cc:	08010b48 	.word	0x08010b48

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_frsub>:
 8000ba8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bac:	e002      	b.n	8000bb4 <__addsf3>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fsub>:
 8000bb0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bb4 <__addsf3>:
 8000bb4:	0042      	lsls	r2, r0, #1
 8000bb6:	bf1f      	itttt	ne
 8000bb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bbc:	ea92 0f03 	teqne	r2, r3
 8000bc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc8:	d06a      	beq.n	8000ca0 <__addsf3+0xec>
 8000bca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd2:	bfc1      	itttt	gt
 8000bd4:	18d2      	addgt	r2, r2, r3
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	4048      	eorgt	r0, r1
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	bfb8      	it	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	2b19      	cmp	r3, #25
 8000be2:	bf88      	it	hi
 8000be4:	4770      	bxhi	lr
 8000be6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bee:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bfa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bfe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4249      	negne	r1, r1
 8000c06:	ea92 0f03 	teq	r2, r3
 8000c0a:	d03f      	beq.n	8000c8c <__addsf3+0xd8>
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	fa41 fc03 	asr.w	ip, r1, r3
 8000c14:	eb10 000c 	adds.w	r0, r0, ip
 8000c18:	f1c3 0320 	rsb	r3, r3, #32
 8000c1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c20:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__addsf3+0x78>
 8000c26:	4249      	negs	r1, r1
 8000c28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c2c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c30:	d313      	bcc.n	8000c5a <__addsf3+0xa6>
 8000c32:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c36:	d306      	bcc.n	8000c46 <__addsf3+0x92>
 8000c38:	0840      	lsrs	r0, r0, #1
 8000c3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3e:	f102 0201 	add.w	r2, r2, #1
 8000c42:	2afe      	cmp	r2, #254	@ 0xfe
 8000c44:	d251      	bcs.n	8000cea <__addsf3+0x136>
 8000c46:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4e:	bf08      	it	eq
 8000c50:	f020 0001 	biceq.w	r0, r0, #1
 8000c54:	ea40 0003 	orr.w	r0, r0, r3
 8000c58:	4770      	bx	lr
 8000c5a:	0049      	lsls	r1, r1, #1
 8000c5c:	eb40 0000 	adc.w	r0, r0, r0
 8000c60:	3a01      	subs	r2, #1
 8000c62:	bf28      	it	cs
 8000c64:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c68:	d2ed      	bcs.n	8000c46 <__addsf3+0x92>
 8000c6a:	fab0 fc80 	clz	ip, r0
 8000c6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c72:	ebb2 020c 	subs.w	r2, r2, ip
 8000c76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7a:	bfaa      	itet	ge
 8000c7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c80:	4252      	neglt	r2, r2
 8000c82:	4318      	orrge	r0, r3
 8000c84:	bfbc      	itt	lt
 8000c86:	40d0      	lsrlt	r0, r2
 8000c88:	4318      	orrlt	r0, r3
 8000c8a:	4770      	bx	lr
 8000c8c:	f092 0f00 	teq	r2, #0
 8000c90:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c94:	bf06      	itte	eq
 8000c96:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c9a:	3201      	addeq	r2, #1
 8000c9c:	3b01      	subne	r3, #1
 8000c9e:	e7b5      	b.n	8000c0c <__addsf3+0x58>
 8000ca0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca8:	bf18      	it	ne
 8000caa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cae:	d021      	beq.n	8000cf4 <__addsf3+0x140>
 8000cb0:	ea92 0f03 	teq	r2, r3
 8000cb4:	d004      	beq.n	8000cc0 <__addsf3+0x10c>
 8000cb6:	f092 0f00 	teq	r2, #0
 8000cba:	bf08      	it	eq
 8000cbc:	4608      	moveq	r0, r1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea90 0f01 	teq	r0, r1
 8000cc4:	bf1c      	itt	ne
 8000cc6:	2000      	movne	r0, #0
 8000cc8:	4770      	bxne	lr
 8000cca:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cce:	d104      	bne.n	8000cda <__addsf3+0x126>
 8000cd0:	0040      	lsls	r0, r0, #1
 8000cd2:	bf28      	it	cs
 8000cd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd8:	4770      	bx	lr
 8000cda:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cde:	bf3c      	itt	cc
 8000ce0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bxcc	lr
 8000ce6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cea:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf8:	bf16      	itet	ne
 8000cfa:	4608      	movne	r0, r1
 8000cfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d00:	4601      	movne	r1, r0
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	bf06      	itte	eq
 8000d06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0a:	ea90 0f01 	teqeq	r0, r1
 8000d0e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d12:	4770      	bx	lr

08000d14 <__aeabi_ui2f>:
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e004      	b.n	8000d24 <__aeabi_i2f+0x8>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_i2f>:
 8000d1c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d20:	bf48      	it	mi
 8000d22:	4240      	negmi	r0, r0
 8000d24:	ea5f 0c00 	movs.w	ip, r0
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d30:	4601      	mov	r1, r0
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	e01c      	b.n	8000d72 <__aeabi_l2f+0x2a>

08000d38 <__aeabi_ul2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e00a      	b.n	8000d5c <__aeabi_l2f+0x14>
 8000d46:	bf00      	nop

08000d48 <__aeabi_l2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__aeabi_l2f+0x14>
 8000d56:	4240      	negs	r0, r0
 8000d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5c:	ea5f 0c01 	movs.w	ip, r1
 8000d60:	bf02      	ittt	eq
 8000d62:	4684      	moveq	ip, r0
 8000d64:	4601      	moveq	r1, r0
 8000d66:	2000      	moveq	r0, #0
 8000d68:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d6c:	bf08      	it	eq
 8000d6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d72:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d76:	fabc f28c 	clz	r2, ip
 8000d7a:	3a08      	subs	r2, #8
 8000d7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d80:	db10      	blt.n	8000da4 <__aeabi_l2f+0x5c>
 8000d82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d86:	4463      	add	r3, ip
 8000d88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d94:	fa20 f202 	lsr.w	r2, r0, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f102 0220 	add.w	r2, r2, #32
 8000da8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db4:	fa21 f202 	lsr.w	r2, r1, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc2:	4770      	bx	lr

08000dc4 <FFBInit>:
 */

#include "utilities/utilities.h"
#include "force_feedback_controller.h"

void FFBInit(FFBController_t *ffb) {
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	ffb->constantGain = 0;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f04f 0200 	mov.w	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
	ffb->periodicGain = 0;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f04f 0200 	mov.w	r2, #0
 8000dda:	60da      	str	r2, [r3, #12]
	ffb->springGain = 165;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a0c      	ldr	r2, [pc, #48]	@ (8000e10 <FFBInit+0x4c>)
 8000de0:	611a      	str	r2, [r3, #16]
	ffb->damperGain = 2;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000de8:	615a      	str	r2, [r3, #20]

	ffb->gain = 1;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000df0:	605a      	str	r2, [r3, #4]
	ffb->motorKtConstant = 0.0265;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a07      	ldr	r2, [pc, #28]	@ (8000e14 <FFBInit+0x50>)
 8000df6:	601a      	str	r2, [r3, #0]
	ffb->minimumSpringForce = 0.01;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a07      	ldr	r2, [pc, #28]	@ (8000e18 <FFBInit+0x54>)
 8000dfc:	619a      	str	r2, [r3, #24]
	ffb->lockAngle = 90;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a06      	ldr	r2, [pc, #24]	@ (8000e1c <FFBInit+0x58>)
 8000e02:	61da      	str	r2, [r3, #28]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	43250000 	.word	0x43250000
 8000e14:	3cd91687 	.word	0x3cd91687
 8000e18:	3c23d70a 	.word	0x3c23d70a
 8000e1c:	42b40000 	.word	0x42b40000

08000e20 <FFBComputeSpringForce>:
float FFBComputeConstantForce(FFBController_t *ffb, float amount) {
	return ffb->constantGain * amount;
}

float FFBComputeSpringForce(FFBController_t *ffb, float measuredAngle,
		float setPointAngle, float strength) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	ed87 0a02 	vstr	s0, [r7, #8]
 8000e2c:	edc7 0a01 	vstr	s1, [r7, #4]
 8000e30:	ed87 1a00 	vstr	s2, [r7]

	float constrainedStrength = ConstrainFloat(strength, -1.0f, 1.0f);
 8000e34:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8000e38:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8000e3c:	ed97 0a00 	vldr	s0, [r7]
 8000e40:	f000 faed 	bl	800141e <ConstrainFloat>
 8000e44:	ed87 0a04 	vstr	s0, [r7, #16]

	float force = ffb->springGain * (setPointAngle - measuredAngle) *
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	ed93 7a04 	vldr	s14, [r3, #16]
 8000e4e:	edd7 6a01 	vldr	s13, [r7, #4]
 8000e52:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e56:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000e5a:	ee27 7a27 	vmul.f32	s14, s14, s15
			ffb->gain * constrainedStrength;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	edd3 7a01 	vldr	s15, [r3, #4]
	float force = ffb->springGain * (setPointAngle - measuredAngle) *
 8000e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e68:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e70:	edc7 7a05 	vstr	s15, [r7, #20]

	//add/subtract minimum spring force based on force direction
	if(force < 0) {
 8000e74:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e80:	d509      	bpl.n	8000e96 <FFBComputeSpringForce+0x76>
		force -= ffb->minimumSpringForce;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e88:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e90:	edc7 7a05 	vstr	s15, [r7, #20]
 8000e94:	e00f      	b.n	8000eb6 <FFBComputeSpringForce+0x96>
	}
	else if (force > 0) {
 8000e96:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea2:	dd08      	ble.n	8000eb6 <FFBComputeSpringForce+0x96>
		force += ffb->minimumSpringForce;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	edd3 7a06 	vldr	s15, [r3, #24]
 8000eaa:	ed97 7a05 	vldr	s14, [r7, #20]
 8000eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eb2:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	return force;
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	ee07 3a90 	vmov	s15, r3
}
 8000ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <FFBPeriodicInit>:
#include <math.h>

#define PI 3.141592653589793f

void FFBPeriodicInit(FFBPeriodic_t *peri, float amplitude, float frequency,
		float offset) {
 8000ec6:	b480      	push	{r7}
 8000ec8:	b085      	sub	sp, #20
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	60f8      	str	r0, [r7, #12]
 8000ece:	ed87 0a02 	vstr	s0, [r7, #8]
 8000ed2:	edc7 0a01 	vstr	s1, [r7, #4]
 8000ed6:	ed87 1a00 	vstr	s2, [r7]
	// Initialize FFB periodic parameters
	peri->amplitude = amplitude;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	68ba      	ldr	r2, [r7, #8]
 8000ede:	601a      	str	r2, [r3, #0]
	peri->frequency = frequency;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	605a      	str	r2, [r3, #4]
	peri->offset = offset;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	609a      	str	r2, [r3, #8]
	peri->gain = 1.0f;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000ef2:	60da      	str	r2, [r3, #12]

	// Reset time to 0
	peri->time = 0;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <CalcFFBPeriodic>:

float CalcFFBPeriodic(FFBPeriodic_t *peri, int dt) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]

	float force = sinf(peri->frequency * (2*PI) * (peri->time/1000.0f)) *
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f18:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000f84 <CalcFFBPeriodic+0x7c>
 8000f1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	691b      	ldr	r3, [r3, #16]
 8000f24:	ee07 3a90 	vmov	s15, r3
 8000f28:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f2c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8000f88 <CalcFFBPeriodic+0x80>
 8000f30:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f38:	eeb0 0a67 	vmov.f32	s0, s15
 8000f3c:	f00c fbea 	bl	800d714 <sinf>
 8000f40:	eeb0 7a40 	vmov.f32	s14, s0
			peri->amplitude * peri->gain + peri->offset;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	edd3 7a00 	vldr	s15, [r3]
	float force = sinf(peri->frequency * (2*PI) * (peri->time/1000.0f)) *
 8000f4a:	ee27 7a27 	vmul.f32	s14, s14, s15
			peri->amplitude * peri->gain + peri->offset;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	edd3 7a02 	vldr	s15, [r3, #8]
	float force = sinf(peri->frequency * (2*PI) * (peri->time/1000.0f)) *
 8000f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f62:	edc7 7a03 	vstr	s15, [r7, #12]
	peri->time += dt;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	691a      	ldr	r2, [r3, #16]
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	441a      	add	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	611a      	str	r2, [r3, #16]

	return force;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	ee07 3a90 	vmov	s15, r3
}
 8000f78:	eeb0 0a67 	vmov.f32	s0, s15
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40c90fdb 	.word	0x40c90fdb
 8000f88:	447a0000 	.word	0x447a0000

08000f8c <PIDInit>:
 */

#include "pid.h"
#include "utilities/utilities.h"

void PIDInit(PID_t *pid) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

	pid->kP = 200;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc4 <PIDInit+0x38>)
 8000f98:	601a      	str	r2, [r3, #0]
	pid->kI = 400;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc8 <PIDInit+0x3c>)
 8000f9e:	605a      	str	r2, [r3, #4]
	pid->kD = 0.8;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fcc <PIDInit+0x40>)
 8000fa4:	609a      	str	r2, [r3, #8]

	pid->integral = 0;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
	pid->preError = 0;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f04f 0200 	mov.w	r2, #0
 8000fb4:	611a      	str	r2, [r3, #16]
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	43480000 	.word	0x43480000
 8000fc8:	43c80000 	.word	0x43c80000
 8000fcc:	3f4ccccd 	.word	0x3f4ccccd

08000fd0 <CalcPID>:

float CalcPID(PID_t *pid, float setPoint, float actual) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fdc:	edc7 0a01 	vstr	s1, [r7, #4]
	float error = setPoint - actual;
 8000fe0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fe4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fe8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fec:	edc7 7a07 	vstr	s15, [r7, #28]

	//integrate only if error is large enough
	if(AbsFloat(error) > PID_EPSILON) {
 8000ff0:	ed97 0a07 	vldr	s0, [r7, #28]
 8000ff4:	f000 fa4a 	bl	800148c <AbsFloat>
 8000ff8:	eef0 7a40 	vmov.f32	s15, s0
 8000ffc:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80010c4 <CalcPID+0xf4>
 8001000:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001008:	dd0d      	ble.n	8001026 <CalcPID+0x56>
		pid->integral += error*PID_DT;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001010:	edd7 7a07 	vldr	s15, [r7, #28]
 8001014:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 80010c8 <CalcPID+0xf8>
 8001018:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800101c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	edc3 7a03 	vstr	s15, [r3, #12]
	}

	//constrain integral
	pid->integral = ConstrainFloat(pid->integral, PID_I_MIN, PID_I_MAX);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	edd3 7a03 	vldr	s15, [r3, #12]
 800102c:	ed9f 1a27 	vldr	s2, [pc, #156]	@ 80010cc <CalcPID+0xfc>
 8001030:	eddf 0a27 	vldr	s1, [pc, #156]	@ 80010d0 <CalcPID+0x100>
 8001034:	eeb0 0a67 	vmov.f32	s0, s15
 8001038:	f000 f9f1 	bl	800141e <ConstrainFloat>
 800103c:	eef0 7a40 	vmov.f32	s15, s0
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	edc3 7a03 	vstr	s15, [r3, #12]

	float derivative = (error - pid->preError)/PID_DT;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	edd3 7a04 	vldr	s15, [r3, #16]
 800104c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001050:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001054:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80010c8 <CalcPID+0xf8>
 8001058:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800105c:	edc7 7a06 	vstr	s15, [r7, #24]

	float output = pid->kP*error + pid->kI*pid->integral + pid->kD*derivative;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	ed93 7a00 	vldr	s14, [r3]
 8001066:	edd7 7a07 	vldr	s15, [r7, #28]
 800106a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	edd3 6a01 	vldr	s13, [r3, #4]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	edd3 7a03 	vldr	s15, [r3, #12]
 800107a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800107e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	edd3 6a02 	vldr	s13, [r3, #8]
 8001088:	edd7 7a06 	vldr	s15, [r7, #24]
 800108c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001094:	edc7 7a05 	vstr	s15, [r7, #20]

	//constrain PID output
	output = ConstrainFloat(output, PID_MIN, PID_MAX);
 8001098:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 80010d4 <CalcPID+0x104>
 800109c:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 80010d8 <CalcPID+0x108>
 80010a0:	ed97 0a05 	vldr	s0, [r7, #20]
 80010a4:	f000 f9bb 	bl	800141e <ConstrainFloat>
 80010a8:	ed87 0a05 	vstr	s0, [r7, #20]

	//update previous error for derivative calculation
	pid->preError = error;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	611a      	str	r2, [r3, #16]

	return output;
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	ee07 3a90 	vmov	s15, r3
}
 80010b8:	eeb0 0a67 	vmov.f32	s0, s15
 80010bc:	3720      	adds	r7, #32
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	3f19999a 	.word	0x3f19999a
 80010c8:	3c23d70a 	.word	0x3c23d70a
 80010cc:	447a0000 	.word	0x447a0000
 80010d0:	c47a0000 	.word	0xc47a0000
 80010d4:	4515f000 	.word	0x4515f000
 80010d8:	c515f000 	.word	0xc515f000

080010dc <RotaryEncInit>:
#include "utilities/utilities.h"
#include "rotary_encoder.h"

static float RotaryEncCalcSpeed(RotaryEncoder_t *encoder, float deltaTimeMs);

void RotaryEncInit(RotaryEncoder_t *encoder) {
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	encoder->prevHardCount = 0;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	809a      	strh	r2, [r3, #4]
	encoder->count32 = 0;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
	encoder->speed = 0;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
	encoder->prevSpeedCount = 0;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
	encoder->dtCounter = 0;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
	encoder->prevDt = 0;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <RotaryEncSetCount>:

void RotaryEncSetCount(RotaryEncoder_t *encoder, int32_t count) {
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	6039      	str	r1, [r7, #0]
	encoder->count32 = count;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	601a      	str	r2, [r3, #0]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <RotaryEncGetCount>:

int32_t RotaryEncGetCount(RotaryEncoder_t *encoder) {
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
	return encoder->count32;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <RotaryEncGetSpeed>:

float RotaryEncGetSpeed(RotaryEncoder_t *encoder) {
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
	return encoder->speed;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	ee07 3a90 	vmov	s15, r3
}
 800115a:	eeb0 0a67 	vmov.f32	s0, s15
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <RotaryEncUpdate>:


void RotaryEncUpdate(RotaryEncoder_t *encoder, uint16_t newCount,
		float deltaTimeMs) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	460b      	mov	r3, r1
 8001172:	ed87 0a01 	vstr	s0, [r7, #4]
 8001176:	817b      	strh	r3, [r7, #10]

	//for speed calculation
	int32_t prevCount32 = encoder->count32;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	61fb      	str	r3, [r7, #28]

	//find change in count
	int32_t deltaCount = (int32_t)newCount - encoder->prevHardCount;
 800117e:	897b      	ldrh	r3, [r7, #10]
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	8892      	ldrh	r2, [r2, #4]
 8001184:	1a9b      	subs	r3, r3, r2
 8001186:	61bb      	str	r3, [r7, #24]

	//newCount did not wrap around
	if(Abs(deltaCount) < ENC_COUNT_WRAP_THRESHOLD) {
 8001188:	69b8      	ldr	r0, [r7, #24]
 800118a:	f000 f971 	bl	8001470 <Abs>
 800118e:	4603      	mov	r3, r0
 8001190:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8001194:	4293      	cmp	r3, r2
 8001196:	dc06      	bgt.n	80011a6 <RotaryEncUpdate+0x3e>
		encoder->count32 += deltaCount;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	441a      	add	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	e01d      	b.n	80011e2 <RotaryEncUpdate+0x7a>
	}
	//newCount wrapped around
	else {
		//newCount underflow
		if(encoder->prevHardCount < newCount){
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	889b      	ldrh	r3, [r3, #4]
 80011aa:	897a      	ldrh	r2, [r7, #10]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d90d      	bls.n	80011cc <RotaryEncUpdate+0x64>
			encoder->count32 -= (int32_t)0xFFFF + encoder->prevHardCount -
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	889b      	ldrh	r3, [r3, #4]
 80011b8:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80011bc:	33ff      	adds	r3, #255	@ 0xff
 80011be:	8979      	ldrh	r1, [r7, #10]
 80011c0:	1a5b      	subs	r3, r3, r1
					newCount + 1;
 80011c2:	3301      	adds	r3, #1
			encoder->count32 -= (int32_t)0xFFFF + encoder->prevHardCount -
 80011c4:	1ad2      	subs	r2, r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	e00a      	b.n	80011e2 <RotaryEncUpdate+0x7a>
		}
		//newCount overflow
		else {
			encoder->count32 += (int32_t)0xFFFF - encoder->prevHardCount + 1 +
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	889b      	ldrh	r3, [r3, #4]
 80011d4:	f5c3 3180 	rsb	r1, r3, #65536	@ 0x10000
 80011d8:	897b      	ldrh	r3, [r7, #10]
 80011da:	440b      	add	r3, r1
 80011dc:	441a      	add	r2, r3
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	601a      	str	r2, [r3, #0]

	//TODO: switch to UnwrapAtThreshold16 function
//	encoder->count32 += UnwrapAtThreshold16(newCount, encoder->prevHardCount,
//			ENC_COUNT_WRAP_THRESHOLD);

	int32_t speedDeltaCount = encoder->count32 - encoder->prevSpeedCount;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	617b      	str	r3, [r7, #20]
	encoder->dtCounter += ENC_UPDATE_TIME_STEP;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	1d5a      	adds	r2, r3, #5
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	611a      	str	r2, [r3, #16]
	if(Abs(speedDeltaCount) >= ENC_UPDATE_SPEED_MIN_COUNT_DELTA &&
 80011f8:	6978      	ldr	r0, [r7, #20]
 80011fa:	f000 f939 	bl	8001470 <Abs>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	dd23      	ble.n	800124c <RotaryEncUpdate+0xe4>
			encoder->dtCounter >=
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	691b      	ldr	r3, [r3, #16]
	if(Abs(speedDeltaCount) >= ENC_UPDATE_SPEED_MIN_COUNT_DELTA &&
 8001208:	2b4f      	cmp	r3, #79	@ 0x4f
 800120a:	d91f      	bls.n	800124c <RotaryEncUpdate+0xe4>
			ENC_UPDATE_TIME_STEP*ENC_UPDATE_SPEED_SAMPLES) {

		//calculate and update speed
		encoder->speed = speedDeltaCount /
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	ee07 3a90 	vmov	s15, r3
 8001212:	eef8 6ae7 	vcvt.f32.s32	s13, s15
				(encoder->dtCounter * ENC_UPDATE_MS_SCALE);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	ee07 3a90 	vmov	s15, r3
 800121e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001222:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800127c <RotaryEncUpdate+0x114>
 8001226:	ee27 7a87 	vmul.f32	s14, s15, s14
		encoder->speed = speedDeltaCount /
 800122a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	edc3 7a03 	vstr	s15, [r3, #12]
		encoder->prevDt = encoder->dtCounter;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	691a      	ldr	r2, [r3, #16]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	615a      	str	r2, [r3, #20]
		encoder->dtCounter = 0;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
		encoder->prevSpeedCount = encoder->count32;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	e00f      	b.n	800126c <RotaryEncUpdate+0x104>
	}
	else if(encoder->dtCounter >= 500) {
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001254:	d30a      	bcc.n	800126c <RotaryEncUpdate+0x104>
		encoder->speed = 0;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
		encoder->prevSpeedCount = encoder->count32;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	609a      	str	r2, [r3, #8]
		encoder->dtCounter = 0;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
//	}



	//update previous hardware count
	encoder->prevHardCount = newCount;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	897a      	ldrh	r2, [r7, #10]
 8001270:	809a      	strh	r2, [r3, #4]
}
 8001272:	bf00      	nop
 8001274:	3720      	adds	r7, #32
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	3dcccccd 	.word	0x3dcccccd

08001280 <UsbReportInit>:

#include "usb_report.h"
#include <string.h>


void UsbReportInit(UsbReport_t *report, PacketParser_t *parser) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
	report->reportId = 0;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]

	// Clear report data
	memset(report->data, 0, USB_REPORT_MAX_SIZE);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3301      	adds	r3, #1
 8001294:	2240      	movs	r2, #64	@ 0x40
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f00d fdc5 	bl	800ee28 <memset>

	report->currentParseIndex = 0;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	//report->endianness = inEndian;
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <UsbReportLoad>:

void UsbReportLoad(UsbReport_t *report, uint8_t *buffer, uint16_t size) {
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b084      	sub	sp, #16
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	60f8      	str	r0, [r7, #12]
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	4613      	mov	r3, r2
 80012ba:	80fb      	strh	r3, [r7, #6]
	// First index contains report id
	report->reportId = *buffer;
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	781a      	ldrb	r2, [r3, #0]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	701a      	strb	r2, [r3, #0]

	// Following indices store data
	// Copy to report data
	memcpy(report->data, buffer+1, size-1);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	1c58      	adds	r0, r3, #1
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	1c59      	adds	r1, r3, #1
 80012cc:	88fb      	ldrh	r3, [r7, #6]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	461a      	mov	r2, r3
 80012d2:	f00d fe28 	bl	800ef26 <memcpy>

	report->currentParseIndex = 0;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2200      	movs	r2, #0
 80012da:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
}
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <UsbReportParseNextInt>:

uint8_t UsbReportGetReportId(UsbReport_t *report) {
	return report->reportId;
}

int32_t UsbReportParseNextInt(UsbReport_t *report) {
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b084      	sub	sp, #16
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
	uint8_t *data = report->data + report->currentParseIndex;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3301      	adds	r3, #1
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	f8b2 2042 	ldrh.w	r2, [r2, #66]	@ 0x42
 80012f8:	4413      	add	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]
	int32_t value;
	ParseBytesEndian(&value, data, sizeof(int32_t), report->endianness);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001302:	f107 0008 	add.w	r0, r7, #8
 8001306:	2204      	movs	r2, #4
 8001308:	68f9      	ldr	r1, [r7, #12]
 800130a:	f000 f831 	bl	8001370 <ParseBytesEndian>

	// Increment parse index for next parse
	report->currentParseIndex += sizeof(uint32_t);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001314:	3304      	adds	r3, #4
 8001316:	b29a      	uxth	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

	return value;
 800131e:	68bb      	ldr	r3, [r7, #8]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <UsbReportParseNextFloat>:

float UsbReportParseNextFloat(UsbReport_t *report) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	uint8_t *data = report->data + report->currentParseIndex;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3301      	adds	r3, #1
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	f8b2 2042 	ldrh.w	r2, [r2, #66]	@ 0x42
 800133a:	4413      	add	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
	float value;
	ParseBytesEndian(&value, data, sizeof(float), report->endianness);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001344:	f107 0008 	add.w	r0, r7, #8
 8001348:	2204      	movs	r2, #4
 800134a:	68f9      	ldr	r1, [r7, #12]
 800134c:	f000 f810 	bl	8001370 <ParseBytesEndian>

	// Increment parse index for next parse
	report->currentParseIndex += sizeof(float);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001356:	3304      	adds	r3, #4
 8001358:	b29a      	uxth	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

	return value;
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	ee07 3a90 	vmov	s15, r3
}
 8001366:	eeb0 0a67 	vmov.f32	s0, s15
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <ParseBytesEndian>:

void ParseBytesEndian(void *dest, uint8_t *source, uint8_t length,
		int endianess) {
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	4613      	mov	r3, r2
 800137e:	71fb      	strb	r3, [r7, #7]
	// Parse based on endianess
	switch(endianess) {
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d018      	beq.n	80013b8 <ParseBytesEndian+0x48>
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d128      	bne.n	80013de <ParseBytesEndian+0x6e>
		case USB_REPORT_IN_BIG_ENDIAN:
			for(int i = 0; i < length; i++) {
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	e00d      	b.n	80013ae <ParseBytesEndian+0x3e>
				*((uint8_t *)dest+i) = *(source + length-i-1);
 8001392:	79fa      	ldrb	r2, [r7, #7]
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	3b01      	subs	r3, #1
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	441a      	add	r2, r3
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	68f9      	ldr	r1, [r7, #12]
 80013a2:	440b      	add	r3, r1
 80013a4:	7812      	ldrb	r2, [r2, #0]
 80013a6:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < length; i++) {
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	3301      	adds	r3, #1
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	dbed      	blt.n	8001392 <ParseBytesEndian+0x22>
			}
			break;
 80013b6:	e013      	b.n	80013e0 <ParseBytesEndian+0x70>
		case USB_REPORT_IN_LITTLE_ENDIAN:
			for(int i = 0; i < length; i++) {
 80013b8:	2300      	movs	r3, #0
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	e00a      	b.n	80013d4 <ParseBytesEndian+0x64>
				*((uint8_t *)dest+i) = *(source+i);
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	441a      	add	r2, r3
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	68f9      	ldr	r1, [r7, #12]
 80013c8:	440b      	add	r3, r1
 80013ca:	7812      	ldrb	r2, [r2, #0]
 80013cc:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < length; i++) {
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	3301      	adds	r3, #1
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	429a      	cmp	r2, r3
 80013da:	dbf0      	blt.n	80013be <ParseBytesEndian+0x4e>
			}
			break;
 80013dc:	e000      	b.n	80013e0 <ParseBytesEndian+0x70>
		default:
			// Invalid condition
			break;
 80013de:	bf00      	nop
	}
}
 80013e0:	bf00      	nop
 80013e2:	371c      	adds	r7, #28
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <Constrain>:
int32_t Map(int32_t in, int32_t inMin, int32_t inMax, int32_t outMin,
		int32_t outMax) {
	return (((int64_t)(in - inMin)*(outMax - outMin))/(inMax - inMin)) + outMin;
}

int32_t Constrain(int32_t value, int32_t min, int32_t max) {
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
	if(value < min) {
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	da01      	bge.n	8001404 <Constrain+0x18>
		return min;
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	e006      	b.n	8001412 <Constrain+0x26>
	}
	else if(value > max) {
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	429a      	cmp	r2, r3
 800140a:	dd01      	ble.n	8001410 <Constrain+0x24>
		return max;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	e000      	b.n	8001412 <Constrain+0x26>
	}
	else {
		return value;
 8001410:	68fb      	ldr	r3, [r7, #12]
	}
}
 8001412:	4618      	mov	r0, r3
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <ConstrainFloat>:

float ConstrainFloat(float value, float min, float max) {
 800141e:	b480      	push	{r7}
 8001420:	b085      	sub	sp, #20
 8001422:	af00      	add	r7, sp, #0
 8001424:	ed87 0a03 	vstr	s0, [r7, #12]
 8001428:	edc7 0a02 	vstr	s1, [r7, #8]
 800142c:	ed87 1a01 	vstr	s2, [r7, #4]
	if(value < min) {
 8001430:	ed97 7a03 	vldr	s14, [r7, #12]
 8001434:	edd7 7a02 	vldr	s15, [r7, #8]
 8001438:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800143c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001440:	d501      	bpl.n	8001446 <ConstrainFloat+0x28>
		return min;
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	e00b      	b.n	800145e <ConstrainFloat+0x40>
	}
	else if(value > max) {
 8001446:	ed97 7a03 	vldr	s14, [r7, #12]
 800144a:	edd7 7a01 	vldr	s15, [r7, #4]
 800144e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001456:	dd01      	ble.n	800145c <ConstrainFloat+0x3e>
		return max;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	e000      	b.n	800145e <ConstrainFloat+0x40>
	}
	else {
		return value;
 800145c:	68fb      	ldr	r3, [r7, #12]
	}
}
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eeb0 0a67 	vmov.f32	s0, s15
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <Abs>:

int32_t Abs(int32_t x) {
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	return x > 0 ? x : -x;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	bfb8      	it	lt
 800147e:	425b      	neglt	r3, r3
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <AbsFloat>:

float AbsFloat(float x) {
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	ed87 0a01 	vstr	s0, [r7, #4]
	return x > 0 ? x : -x;
 8001496:	edd7 7a01 	vldr	s15, [r7, #4]
 800149a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800149e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a2:	dd02      	ble.n	80014aa <AbsFloat+0x1e>
 80014a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a8:	e003      	b.n	80014b2 <AbsFloat+0x26>
 80014aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ae:	eef1 7a67 	vneg.f32	s15, s15
}
 80014b2:	eeb0 0a67 	vmov.f32	s0, s15
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80014c8:	1d39      	adds	r1, r7, #4
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295
 80014ce:	2201      	movs	r2, #1
 80014d0:	4803      	ldr	r0, [pc, #12]	@ (80014e0 <__io_putchar+0x20>)
 80014d2:	f007 fa23 	bl	800891c <HAL_UART_Transmit>
  return ch;
 80014d6:	687b      	ldr	r3, [r7, #4]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000590 	.word	0x20000590

080014e4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
	if(htim == &htim6) {
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a2a      	ldr	r2, [pc, #168]	@ (800159c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d143      	bne.n	800157e <HAL_TIM_PeriodElapsedCallback+0x9a>
		RotaryEncUpdate(&encoder, __HAL_TIM_GET_COUNTER(&htim4), 0.5);
 80014f6:	4b2a      	ldr	r3, [pc, #168]	@ (80015a0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001502:	4619      	mov	r1, r3
 8001504:	4827      	ldr	r0, [pc, #156]	@ (80015a4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001506:	f7ff fe2f 	bl	8001168 <RotaryEncUpdate>
		encoderBuffer[encoderBufferEnd] = RotaryEncGetCount(&encoder);
 800150a:	4b27      	ldr	r3, [pc, #156]	@ (80015a8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800150c:	681e      	ldr	r6, [r3, #0]
 800150e:	4825      	ldr	r0, [pc, #148]	@ (80015a4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001510:	f7ff fe0f 	bl	8001132 <RotaryEncGetCount>
 8001514:	4603      	mov	r3, r0
 8001516:	4a25      	ldr	r2, [pc, #148]	@ (80015ac <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001518:	f842 3026 	str.w	r3, [r2, r6, lsl #2]

		// Add new value, subtract old value
		encoderAccumulator += encoderBuffer[encoderBufferEnd] -
 800151c:	4b22      	ldr	r3, [pc, #136]	@ (80015a8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a22      	ldr	r2, [pc, #136]	@ (80015ac <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001522:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
				encoderBuffer[encoderBufferStart];
 8001526:	4b22      	ldr	r3, [pc, #136]	@ (80015b0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4920      	ldr	r1, [pc, #128]	@ (80015ac <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800152c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
		encoderAccumulator += encoderBuffer[encoderBufferEnd] -
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	17da      	asrs	r2, r3, #31
 8001534:	461c      	mov	r4, r3
 8001536:	4615      	mov	r5, r2
 8001538:	4b1e      	ldr	r3, [pc, #120]	@ (80015b4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800153a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153e:	eb14 0802 	adds.w	r8, r4, r2
 8001542:	eb45 0903 	adc.w	r9, r5, r3
 8001546:	4b1b      	ldr	r3, [pc, #108]	@ (80015b4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001548:	e9c3 8900 	strd	r8, r9, [r3]

		encoderBufferStart++;
 800154c:	4b18      	ldr	r3, [pc, #96]	@ (80015b0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	4a17      	ldr	r2, [pc, #92]	@ (80015b0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001554:	6013      	str	r3, [r2, #0]
		if(encoderBufferStart == ENCODER_BUFFER_SIZE) {
 8001556:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b05      	cmp	r3, #5
 800155c:	d102      	bne.n	8001564 <HAL_TIM_PeriodElapsedCallback+0x80>
			encoderBufferStart = 0;
 800155e:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
		}

		encoderBufferEnd++;
 8001564:	4b10      	ldr	r3, [pc, #64]	@ (80015a8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	3301      	adds	r3, #1
 800156a:	4a0f      	ldr	r2, [pc, #60]	@ (80015a8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800156c:	6013      	str	r3, [r2, #0]
		if(encoderBufferEnd == ENCODER_BUFFER_SIZE) {
 800156e:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b05      	cmp	r3, #5
 8001574:	d10c      	bne.n	8001590 <HAL_TIM_PeriodElapsedCallback+0xac>
			encoderBufferEnd = 0;
 8001576:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
	}
	else if(htim == &htim7) {
		MotorControllerUpdate(&controller, 2);
		//testCurrent = MotorControllerGetCurrent(&controller);
	}
}
 800157c:	e008      	b.n	8001590 <HAL_TIM_PeriodElapsedCallback+0xac>
	else if(htim == &htim7) {
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a0d      	ldr	r2, [pc, #52]	@ (80015b8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d104      	bne.n	8001590 <HAL_TIM_PeriodElapsedCallback+0xac>
		MotorControllerUpdate(&controller, 2);
 8001586:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800158a:	480c      	ldr	r0, [pc, #48]	@ (80015bc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800158c:	f000 fe13 	bl	80021b6 <MotorControllerUpdate>
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800159a:	bf00      	nop
 800159c:	200004f8 	.word	0x200004f8
 80015a0:	200004ac 	.word	0x200004ac
 80015a4:	20000618 	.word	0x20000618
 80015a8:	20000648 	.word	0x20000648
 80015ac:	20000630 	.word	0x20000630
 80015b0:	20000644 	.word	0x20000644
 80015b4:	20000650 	.word	0x20000650
 80015b8:	20000544 	.word	0x20000544
 80015bc:	200006d0 	.word	0x200006d0

080015c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b09d      	sub	sp, #116	@ 0x74
 80015c4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c6:	f001 fc85 	bl	8002ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ca:	f000 fa71 	bl	8001ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ce:	f000 fd13 	bl	8001ff8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80015d2:	f000 fad5 	bl	8001b80 <MX_I2C1_Init>
  MX_SPI1_Init();
 80015d6:	f000 fb4f 	bl	8001c78 <MX_SPI1_Init>
  MX_TIM4_Init();
 80015da:	f000 fc1b 	bl	8001e14 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80015de:	f000 fcdb 	bl	8001f98 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80015e2:	f00b fc69 	bl	800ceb8 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80015e6:	f000 fb85 	bl	8001cf4 <MX_TIM1_Init>
  MX_TIM6_Init();
 80015ea:	f000 fc69 	bl	8001ec0 <MX_TIM6_Init>
  MX_TIM7_Init();
 80015ee:	f000 fc9d 	bl	8001f2c <MX_TIM7_Init>
  MX_I2C2_Init();
 80015f2:	f000 fb03 	bl	8001bfc <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  GameHID_t gameHID = {
 80015f6:	2300      	movs	r3, #0
 80015f8:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80015fa:	2300      	movs	r3, #0
 80015fc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80015fe:	2300      	movs	r3, #0
 8001600:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
		  .joyX = 0,
		  .joyY = 0,
		  .joyB1 = 0
  };

  UsbReportInit(&usbReport, USB_REPORT_IN_LITTLE_ENDIAN);
 8001604:	2100      	movs	r1, #0
 8001606:	48c3      	ldr	r0, [pc, #780]	@ (8001914 <main+0x354>)
 8001608:	f7ff fe3a 	bl	8001280 <UsbReportInit>

  PIDInit(&positionPid);
 800160c:	48c2      	ldr	r0, [pc, #776]	@ (8001918 <main+0x358>)
 800160e:	f7ff fcbd 	bl	8000f8c <PIDInit>
  RotaryEncInit(&encoder);
 8001612:	48c2      	ldr	r0, [pc, #776]	@ (800191c <main+0x35c>)
 8001614:	f7ff fd62 	bl	80010dc <RotaryEncInit>

  encoderAccumulator = 0;
 8001618:	49c1      	ldr	r1, [pc, #772]	@ (8001920 <main+0x360>)
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	f04f 0300 	mov.w	r3, #0
 8001622:	e9c1 2300 	strd	r2, r3, [r1]
  encoderBufferStart = 0;
 8001626:	4bbf      	ldr	r3, [pc, #764]	@ (8001924 <main+0x364>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
  encoderBufferEnd = ENCODER_NUM_SAMPLES;
 800162c:	4bbe      	ldr	r3, [pc, #760]	@ (8001928 <main+0x368>)
 800162e:	2204      	movs	r2, #4
 8001630:	601a      	str	r2, [r3, #0]

  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001632:	213c      	movs	r1, #60	@ 0x3c
 8001634:	48bd      	ldr	r0, [pc, #756]	@ (800192c <main+0x36c>)
 8001636:	f006 f9a3 	bl	8007980 <HAL_TIM_Encoder_Start>

  PIDInit(&currentPid);
 800163a:	48bd      	ldr	r0, [pc, #756]	@ (8001930 <main+0x370>)
 800163c:	f7ff fca6 	bl	8000f8c <PIDInit>
  currentPid.kP = 3580;
 8001640:	4bbb      	ldr	r3, [pc, #748]	@ (8001930 <main+0x370>)
 8001642:	4abc      	ldr	r2, [pc, #752]	@ (8001934 <main+0x374>)
 8001644:	601a      	str	r2, [r3, #0]
  currentPid.kI = 0;
 8001646:	4bba      	ldr	r3, [pc, #744]	@ (8001930 <main+0x370>)
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	605a      	str	r2, [r3, #4]
  currentPid.kD = 0;
 800164e:	4bb8      	ldr	r3, [pc, #736]	@ (8001930 <main+0x370>)
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  CurrentSenseInit(&currentSense, &hi2c1);
 8001656:	49b8      	ldr	r1, [pc, #736]	@ (8001938 <main+0x378>)
 8001658:	48b8      	ldr	r0, [pc, #736]	@ (800193c <main+0x37c>)
 800165a:	f001 f99d 	bl	8002998 <CurrentSenseInit>

  GPIO_t gpioMotorReverse;
  GPIOInit(&gpioMotorReverse, MOTOR_FORWARD_GPIO_Port, MOTOR_FORWARD_Pin);
 800165e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001662:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001666:	49b6      	ldr	r1, [pc, #728]	@ (8001940 <main+0x380>)
 8001668:	4618      	mov	r0, r3
 800166a:	f001 fbcc 	bl	8002e06 <GPIOInit>

  GPIO_t gpioMotorForward;
  GPIOInit(&gpioMotorForward, MOTOR_REVERSE_GPIO_Port, MOTOR_REVERSE_Pin);
 800166e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001672:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001676:	49b2      	ldr	r1, [pc, #712]	@ (8001940 <main+0x380>)
 8001678:	4618      	mov	r0, r3
 800167a:	f001 fbc4 	bl	8002e06 <GPIOInit>

  MotorInit(&motor, &htim1, TIM_CHANNEL_3, gpioMotorReverse, gpioMotorForward);
 800167e:	aa01      	add	r2, sp, #4
 8001680:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001684:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001688:	e882 0003 	stmia.w	r2, {r0, r1}
 800168c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001692:	2208      	movs	r2, #8
 8001694:	49ab      	ldr	r1, [pc, #684]	@ (8001944 <main+0x384>)
 8001696:	48ac      	ldr	r0, [pc, #688]	@ (8001948 <main+0x388>)
 8001698:	f001 fa74 	bl	8002b84 <MotorInit>
  //MotorSetOffset(&motor, MOTOR_OFFSET);
  MotorStartPWM(&motor);
 800169c:	48aa      	ldr	r0, [pc, #680]	@ (8001948 <main+0x388>)
 800169e:	f001 fa9d 	bl	8002bdc <MotorStartPWM>

  FFBInit(&ffb);
 80016a2:	48aa      	ldr	r0, [pc, #680]	@ (800194c <main+0x38c>)
 80016a4:	f7ff fb8e 	bl	8000dc4 <FFBInit>

  HAL_TIM_Base_Start_IT(&htim1);
 80016a8:	48a6      	ldr	r0, [pc, #664]	@ (8001944 <main+0x384>)
 80016aa:	f005 ff01 	bl	80074b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80016ae:	48a8      	ldr	r0, [pc, #672]	@ (8001950 <main+0x390>)
 80016b0:	f005 fefe 	bl	80074b0 <HAL_TIM_Base_Start_IT>

  while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET){}
 80016b4:	bf00      	nop
 80016b6:	2101      	movs	r1, #1
 80016b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016bc:	f001 ff20 	bl	8003500 <HAL_GPIO_ReadPin>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f7      	beq.n	80016b6 <main+0xf6>

  //Home motor
  GPIO_t homeSensorGpio;
  GPIOInit(&homeSensorGpio, HOME_SENSOR_GPIO_Port, HOME_SENSOR_Pin);
 80016c6:	f107 031c 	add.w	r3, r7, #28
 80016ca:	2202      	movs	r2, #2
 80016cc:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 80016d0:	4618      	mov	r0, r3
 80016d2:	f001 fb98 	bl	8002e06 <GPIOInit>
  HomeSensorInit(&homeSensor, homeSensorGpio);
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	e893 0006 	ldmia.w	r3, {r1, r2}
 80016de:	489d      	ldr	r0, [pc, #628]	@ (8001954 <main+0x394>)
 80016e0:	f001 f8fe 	bl	80028e0 <HomeSensorInit>
  HomeSensorHome(&homeSensor, &motor);
 80016e4:	4998      	ldr	r1, [pc, #608]	@ (8001948 <main+0x388>)
 80016e6:	489b      	ldr	r0, [pc, #620]	@ (8001954 <main+0x394>)
 80016e8:	f001 f90e 	bl	8002908 <HomeSensorHome>
//  while(1) {
//	  printf("%d\r\n", (int)RotaryEncGetCount(&encoder));
//  }

  //Reset encoder count after homing
  HAL_Delay(500);
 80016ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016f0:	f001 fc56 	bl	8002fa0 <HAL_Delay>
  RotaryEncSetCount(&encoder, ENCODER_HOME_OFFSET);
 80016f4:	f46f 71a8 	mvn.w	r1, #336	@ 0x150
 80016f8:	4888      	ldr	r0, [pc, #544]	@ (800191c <main+0x35c>)
 80016fa:	f7ff fd0c 	bl	8001116 <RotaryEncSetCount>

  printf("Homing complete\r\n");
 80016fe:	4896      	ldr	r0, [pc, #600]	@ (8001958 <main+0x398>)
 8001700:	f00d fab2 	bl	800ec68 <puts>

  MotorControllerInit_t controllerInit = {
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]
 8001712:	615a      	str	r2, [r3, #20]
 8001714:	4b8c      	ldr	r3, [pc, #560]	@ (8001948 <main+0x388>)
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	4b80      	ldr	r3, [pc, #512]	@ (800191c <main+0x35c>)
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	4b87      	ldr	r3, [pc, #540]	@ (800193c <main+0x37c>)
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	4b7d      	ldr	r3, [pc, #500]	@ (8001918 <main+0x358>)
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	4b82      	ldr	r3, [pc, #520]	@ (8001930 <main+0x370>)
 8001726:	61bb      	str	r3, [r7, #24]
		  .encoder = &encoder,
		  .currentSensor = &currentSense,
		  .positionPid = &positionPid,
		  .currentPid = &currentPid,
  };
  MotorControllerInit(&controller, controllerInit);
 8001728:	466c      	mov	r4, sp
 800172a:	f107 0310 	add.w	r3, r7, #16
 800172e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001732:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	cb0e      	ldmia	r3, {r1, r2, r3}
 800173a:	4888      	ldr	r0, [pc, #544]	@ (800195c <main+0x39c>)
 800173c:	f000 fd04 	bl	8002148 <MotorControllerInit>
  HAL_TIM_Base_Start_IT(&htim7);
 8001740:	4887      	ldr	r0, [pc, #540]	@ (8001960 <main+0x3a0>)
 8001742:	f005 feb5 	bl	80074b0 <HAL_TIM_Base_Start_IT>
//
//	  MotorControllerSetPower(&controller, motorPower);
//  }

  MotorLogger_t mLogger;
  MotorLoggerInit(&mLogger, &controller);
 8001746:	463b      	mov	r3, r7
 8001748:	4984      	ldr	r1, [pc, #528]	@ (800195c <main+0x39c>)
 800174a:	4618      	mov	r0, r3
 800174c:	f001 fb8a 	bl	8002e64 <MotorLoggerInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  unsigned long previousTimeInMs = HAL_GetTick();
 8001750:	f001 fc1a 	bl	8002f88 <HAL_GetTick>
 8001754:	65f8      	str	r0, [r7, #92]	@ 0x5c
  FFBPeriodicInit(&periodic, 0, 120, 0);
 8001756:	ed9f 1a83 	vldr	s2, [pc, #524]	@ 8001964 <main+0x3a4>
 800175a:	eddf 0a83 	vldr	s1, [pc, #524]	@ 8001968 <main+0x3a8>
 800175e:	ed9f 0a81 	vldr	s0, [pc, #516]	@ 8001964 <main+0x3a4>
 8001762:	4882      	ldr	r0, [pc, #520]	@ (800196c <main+0x3ac>)
 8001764:	f7ff fbaf 	bl	8000ec6 <FFBPeriodicInit>
  periodic.gain = 2.5;
 8001768:	4b80      	ldr	r3, [pc, #512]	@ (800196c <main+0x3ac>)
 800176a:	4a81      	ldr	r2, [pc, #516]	@ (8001970 <main+0x3b0>)
 800176c:	60da      	str	r2, [r3, #12]

  int32_t periFrequency = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	65bb      	str	r3, [r7, #88]	@ 0x58
  float periAmplitude = 0.0f;
 8001772:	f04f 0300 	mov.w	r3, #0
 8001776:	657b      	str	r3, [r7, #84]	@ 0x54
  float sprStrength = 0.0f;
 8001778:	f04f 0300 	mov.w	r3, #0
 800177c:	653b      	str	r3, [r7, #80]	@ 0x50
  while(1) {

	  if(flag_rx == 1){
 800177e:	4b7d      	ldr	r3, [pc, #500]	@ (8001974 <main+0x3b4>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d144      	bne.n	8001810 <main+0x250>

		  flag_rx = 0;
 8001786:	4b7b      	ldr	r3, [pc, #492]	@ (8001974 <main+0x3b4>)
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]

		  UsbReportLoad(&usbReport, report_buffer,
 800178c:	220d      	movs	r2, #13
 800178e:	497a      	ldr	r1, [pc, #488]	@ (8001978 <main+0x3b8>)
 8001790:	4860      	ldr	r0, [pc, #384]	@ (8001914 <main+0x354>)
 8001792:	f7ff fd8c 	bl	80012ae <UsbReportLoad>
				  USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
		  sprStrength = UsbReportParseNextFloat(&usbReport);
 8001796:	485f      	ldr	r0, [pc, #380]	@ (8001914 <main+0x354>)
 8001798:	f7ff fdc6 	bl	8001328 <UsbReportParseNextFloat>
 800179c:	ed87 0a14 	vstr	s0, [r7, #80]	@ 0x50
		  periAmplitude = UsbReportParseNextFloat(&usbReport);
 80017a0:	485c      	ldr	r0, [pc, #368]	@ (8001914 <main+0x354>)
 80017a2:	f7ff fdc1 	bl	8001328 <UsbReportParseNextFloat>
 80017a6:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54
		  periFrequency = UsbReportParseNextInt(&usbReport);
 80017aa:	485a      	ldr	r0, [pc, #360]	@ (8001914 <main+0x354>)
 80017ac:	f7ff fd9b 	bl	80012e6 <UsbReportParseNextInt>
 80017b0:	65b8      	str	r0, [r7, #88]	@ 0x58
//				  angle, 0.0f, strength);
//

		  // Prepare and send aileron axis
		  int16_t aileron = (int16_t)Constrain(((
				  RotaryEncGetCount(&encoder)/200.0f) *
 80017b2:	485a      	ldr	r0, [pc, #360]	@ (800191c <main+0x35c>)
 80017b4:	f7ff fcbd 	bl	8001132 <RotaryEncGetCount>
 80017b8:	ee07 0a90 	vmov	s15, r0
 80017bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017c0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800197c <main+0x3bc>
 80017c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017c8:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8001980 <main+0x3c0>
 80017cc:	ee67 7a87 	vmul.f32	s15, s15, s14
		  int16_t aileron = (int16_t)Constrain(((
 80017d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017d4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80017d8:	496a      	ldr	r1, [pc, #424]	@ (8001984 <main+0x3c4>)
 80017da:	ee17 0a90 	vmov	r0, s15
 80017de:	f7ff fe05 	bl	80013ec <Constrain>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				  32767), -32767, 32767);

		  // Set report ID to 1
		  reportTxBuffer[0] = 0x01;
 80017e8:	4b67      	ldr	r3, [pc, #412]	@ (8001988 <main+0x3c8>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
		  reportTxBuffer[1] = aileron & 0xFF;
 80017ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	4b64      	ldr	r3, [pc, #400]	@ (8001988 <main+0x3c8>)
 80017f6:	705a      	strb	r2, [r3, #1]
		  reportTxBuffer[2] = aileron >> 8;
 80017f8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80017fc:	121b      	asrs	r3, r3, #8
 80017fe:	b21b      	sxth	r3, r3
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4b61      	ldr	r3, [pc, #388]	@ (8001988 <main+0x3c8>)
 8001804:	709a      	strb	r2, [r3, #2]

		  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, reportTxBuffer, 3);
 8001806:	2203      	movs	r2, #3
 8001808:	495f      	ldr	r1, [pc, #380]	@ (8001988 <main+0x3c8>)
 800180a:	4860      	ldr	r0, [pc, #384]	@ (800198c <main+0x3cc>)
 800180c:	f00a f9e8 	bl	800bbe0 <USBD_CUSTOM_HID_SendReport>

		  //USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&aileron, 2);
	  }

	  if(flag == 1) {
 8001810:	4b5f      	ldr	r3, [pc, #380]	@ (8001990 <main+0x3d0>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d107      	bne.n	8001828 <main+0x268>
		  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, txBuffer, 64);
 8001818:	2240      	movs	r2, #64	@ 0x40
 800181a:	495e      	ldr	r1, [pc, #376]	@ (8001994 <main+0x3d4>)
 800181c:	485b      	ldr	r0, [pc, #364]	@ (800198c <main+0x3cc>)
 800181e:	f00a f9df 	bl	800bbe0 <USBD_CUSTOM_HID_SendReport>

		  flag = 0;
 8001822:	4b5b      	ldr	r3, [pc, #364]	@ (8001990 <main+0x3d0>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
	  }

	  angle = (RotaryEncGetCount(&encoder)/200.0f) * 90.0f;
 8001828:	483c      	ldr	r0, [pc, #240]	@ (800191c <main+0x35c>)
 800182a:	f7ff fc82 	bl	8001132 <RotaryEncGetCount>
 800182e:	ee07 0a90 	vmov	s15, r0
 8001832:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001836:	eddf 6a51 	vldr	s13, [pc, #324]	@ 800197c <main+0x3bc>
 800183a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800183e:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8001998 <main+0x3d8>
 8001842:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001846:	4b55      	ldr	r3, [pc, #340]	@ (800199c <main+0x3dc>)
 8001848:	edc3 7a00 	vstr	s15, [r3]
	  float motorPower = -FFBComputeSpringForce(&ffb,
 800184c:	4b53      	ldr	r3, [pc, #332]	@ (800199c <main+0x3dc>)
 800184e:	edd3 7a00 	vldr	s15, [r3]
 8001852:	ed97 1a14 	vldr	s2, [r7, #80]	@ 0x50
 8001856:	eddf 0a43 	vldr	s1, [pc, #268]	@ 8001964 <main+0x3a4>
 800185a:	eeb0 0a67 	vmov.f32	s0, s15
 800185e:	483b      	ldr	r0, [pc, #236]	@ (800194c <main+0x38c>)
 8001860:	f7ff fade 	bl	8000e20 <FFBComputeSpringForce>
 8001864:	eef0 7a40 	vmov.f32	s15, s0
 8001868:	eef1 7a67 	vneg.f32	s15, s15
 800186c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
			  angle, 0.0f, sprStrength);

	  //TODO: Remove after testing
	  periodic.amplitude = periAmplitude;
 8001870:	4a3e      	ldr	r2, [pc, #248]	@ (800196c <main+0x3ac>)
 8001872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001874:	6013      	str	r3, [r2, #0]
	  periodic.frequency = periFrequency;
 8001876:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001878:	ee07 3a90 	vmov	s15, r3
 800187c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001880:	4b3a      	ldr	r3, [pc, #232]	@ (800196c <main+0x3ac>)
 8001882:	edc3 7a01 	vstr	s15, [r3, #4]

	  uint32_t timeInMs = HAL_GetTick();
 8001886:	f001 fb7f 	bl	8002f88 <HAL_GetTick>
 800188a:	6478      	str	r0, [r7, #68]	@ 0x44
	  motorPower += CalcFFBPeriodic(&periodic, timeInMs - previousTimeInMs)
 800188c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800188e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	4619      	mov	r1, r3
 8001894:	4835      	ldr	r0, [pc, #212]	@ (800196c <main+0x3ac>)
 8001896:	f7ff fb37 	bl	8000f08 <CalcFFBPeriodic>
 800189a:	eef0 7a40 	vmov.f32	s15, s0
			  * 1000.0f;
 800189e:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 80019a0 <main+0x3e0>
 80018a2:	ee67 7a87 	vmul.f32	s15, s15, s14
	  motorPower += CalcFFBPeriodic(&periodic, timeInMs - previousTimeInMs)
 80018a6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80018aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ae:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
	  previousTimeInMs = timeInMs;
 80018b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018b4:	65fb      	str	r3, [r7, #92]	@ 0x5c

	  avgAngle = ((((float)encoderAccumulator)/ENCODER_NUM_SAMPLES)/
 80018b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001920 <main+0x360>)
 80018b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	f7ff fa42 	bl	8000d48 <__aeabi_l2f>
 80018c4:	ee06 0a90 	vmov	s13, r0
 80018c8:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 80018cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018d0:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800197c <main+0x3bc>
 80018d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
			  200.0f) * 90.0f;
 80018d8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001998 <main+0x3d8>
 80018dc:	ee67 7a87 	vmul.f32	s15, s15, s14
	  avgAngle = ((((float)encoderAccumulator)/ENCODER_NUM_SAMPLES)/
 80018e0:	4b30      	ldr	r3, [pc, #192]	@ (80019a4 <main+0x3e4>)
 80018e2:	edc3 7a00 	vstr	s15, [r3]

	  if(angle > 90.0f || angle < -90.0f) {
 80018e6:	4b2d      	ldr	r3, [pc, #180]	@ (800199c <main+0x3dc>)
 80018e8:	edd3 7a00 	vldr	s15, [r3]
 80018ec:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001998 <main+0x3d8>
 80018f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f8:	dc58      	bgt.n	80019ac <main+0x3ec>
 80018fa:	4b28      	ldr	r3, [pc, #160]	@ (800199c <main+0x3dc>)
 80018fc:	edd3 7a00 	vldr	s15, [r3]
 8001900:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80019a8 <main+0x3e8>
 8001904:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190c:	f140 8098 	bpl.w	8001a40 <main+0x480>
 8001910:	e04c      	b.n	80019ac <main+0x3ec>
 8001912:	bf00      	nop
 8001914:	2000077c 	.word	0x2000077c
 8001918:	2000065c 	.word	0x2000065c
 800191c:	20000618 	.word	0x20000618
 8001920:	20000650 	.word	0x20000650
 8001924:	20000644 	.word	0x20000644
 8001928:	20000648 	.word	0x20000648
 800192c:	200004ac 	.word	0x200004ac
 8001930:	20000670 	.word	0x20000670
 8001934:	455fc000 	.word	0x455fc000
 8001938:	20000354 	.word	0x20000354
 800193c:	20000658 	.word	0x20000658
 8001940:	48000400 	.word	0x48000400
 8001944:	20000460 	.word	0x20000460
 8001948:	20000684 	.word	0x20000684
 800194c:	200006a8 	.word	0x200006a8
 8001950:	200004f8 	.word	0x200004f8
 8001954:	200006c8 	.word	0x200006c8
 8001958:	08010b60 	.word	0x08010b60
 800195c:	200006d0 	.word	0x200006d0
 8001960:	20000544 	.word	0x20000544
 8001964:	00000000 	.word	0x00000000
 8001968:	42f00000 	.word	0x42f00000
 800196c:	200007cc 	.word	0x200007cc
 8001970:	40200000 	.word	0x40200000
 8001974:	20000779 	.word	0x20000779
 8001978:	20000738 	.word	0x20000738
 800197c:	43480000 	.word	0x43480000
 8001980:	46fffe00 	.word	0x46fffe00
 8001984:	ffff8001 	.word	0xffff8001
 8001988:	200006f4 	.word	0x200006f4
 800198c:	200007f4 	.word	0x200007f4
 8001990:	20000778 	.word	0x20000778
 8001994:	200006f8 	.word	0x200006f8
 8001998:	42b40000 	.word	0x42b40000
 800199c:	200007c8 	.word	0x200007c8
 80019a0:	447a0000 	.word	0x447a0000
 80019a4:	200007c4 	.word	0x200007c4
 80019a8:	c2b40000 	.word	0xc2b40000
		  float speed = (RotaryEncGetSpeed(&encoder)/200.0f) * 90.0f;
 80019ac:	4834      	ldr	r0, [pc, #208]	@ (8001a80 <main+0x4c0>)
 80019ae:	f7ff fbcc 	bl	800114a <RotaryEncGetSpeed>
 80019b2:	eeb0 7a40 	vmov.f32	s14, s0
 80019b6:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8001a84 <main+0x4c4>
 80019ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019be:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001a88 <main+0x4c8>
 80019c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019c6:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		  derivativeTerm = speed * endStopKd;
 80019ca:	4b30      	ldr	r3, [pc, #192]	@ (8001a8c <main+0x4cc>)
 80019cc:	ed93 7a00 	vldr	s14, [r3]
 80019d0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80019d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a90 <main+0x4d0>)
 80019da:	edc3 7a00 	vstr	s15, [r3]

		  float error = angle > 90.0f ? angle - 89.5f : angle + 89.5f;
 80019de:	4b2d      	ldr	r3, [pc, #180]	@ (8001a94 <main+0x4d4>)
 80019e0:	edd3 7a00 	vldr	s15, [r3]
 80019e4:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001a88 <main+0x4c8>
 80019e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f0:	dd07      	ble.n	8001a02 <main+0x442>
 80019f2:	4b28      	ldr	r3, [pc, #160]	@ (8001a94 <main+0x4d4>)
 80019f4:	edd3 7a00 	vldr	s15, [r3]
 80019f8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001a98 <main+0x4d8>
 80019fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a00:	e006      	b.n	8001a10 <main+0x450>
 8001a02:	4b24      	ldr	r3, [pc, #144]	@ (8001a94 <main+0x4d4>)
 8001a04:	edd3 7a00 	vldr	s15, [r3]
 8001a08:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001a98 <main+0x4d8>
 8001a0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a10:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

		  motorPower += UINT16_MAX * (error * endStopKp +
 8001a14:	4b21      	ldr	r3, [pc, #132]	@ (8001a9c <main+0x4dc>)
 8001a16:	ed93 7a00 	vldr	s14, [r3]
 8001a1a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001a1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a22:	4b1b      	ldr	r3, [pc, #108]	@ (8001a90 <main+0x4d0>)
 8001a24:	edd3 7a00 	vldr	s15, [r3]
 8001a28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a2c:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001aa0 <main+0x4e0>
 8001a30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a34:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001a38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a3c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
				   derivativeTerm);
	  }

	  motorPower = ConstrainFloat(motorPower, -UINT16_MAX, UINT16_MAX);
 8001a40:	ed9f 1a17 	vldr	s2, [pc, #92]	@ 8001aa0 <main+0x4e0>
 8001a44:	eddf 0a17 	vldr	s1, [pc, #92]	@ 8001aa4 <main+0x4e4>
 8001a48:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 8001a4c:	f7ff fce7 	bl	800141e <ConstrainFloat>
 8001a50:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
	  MotorControllerSetPower(&controller, (int32_t)motorPower);
 8001a54:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001a58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a5c:	ee17 1a90 	vmov	r1, s15
 8001a60:	4811      	ldr	r0, [pc, #68]	@ (8001aa8 <main+0x4e8>)
 8001a62:	f000 fb95 	bl	8002190 <MotorControllerSetPower>

	  //TODO: Remove. For logging
	  motorPowerLog = motorPower;
 8001a66:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001a6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a6e:	ee17 2a90 	vmov	r2, s15
 8001a72:	4b0e      	ldr	r3, [pc, #56]	@ (8001aac <main+0x4ec>)
 8001a74:	601a      	str	r2, [r3, #0]

	  HAL_Delay(1);
 8001a76:	2001      	movs	r0, #1
 8001a78:	f001 fa92 	bl	8002fa0 <HAL_Delay>
  while(1) {
 8001a7c:	e67f      	b.n	800177e <main+0x1be>
 8001a7e:	bf00      	nop
 8001a80:	20000618 	.word	0x20000618
 8001a84:	43480000 	.word	0x43480000
 8001a88:	42b40000 	.word	0x42b40000
 8001a8c:	20000004 	.word	0x20000004
 8001a90:	200006a4 	.word	0x200006a4
 8001a94:	200007c8 	.word	0x200007c8
 8001a98:	42b30000 	.word	0x42b30000
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	477fff00 	.word	0x477fff00
 8001aa4:	c77fff00 	.word	0xc77fff00
 8001aa8:	200006d0 	.word	0x200006d0
 8001aac:	200007e0 	.word	0x200007e0

08001ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b09e      	sub	sp, #120	@ 0x78
 8001ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ab6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001aba:	2228      	movs	r2, #40	@ 0x28
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f00d f9b2 	bl	800ee28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	223c      	movs	r2, #60	@ 0x3c
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f00d f9a4 	bl	800ee28 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ae4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001ae8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001aea:	2300      	movs	r3, #0
 8001aec:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aee:	2301      	movs	r3, #1
 8001af0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001af2:	2310      	movs	r3, #16
 8001af4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001af6:	2302      	movs	r3, #2
 8001af8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001afa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001afe:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001b00:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001b04:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b06:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f003 ffc0 	bl	8005a90 <HAL_RCC_OscConfig>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001b16:	f000 fb11 	bl	800213c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b1a:	230f      	movs	r3, #15
 8001b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b22:	2300      	movs	r3, #0
 8001b24:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b30:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b34:	2101      	movs	r1, #1
 8001b36:	4618      	mov	r0, r3
 8001b38:	f004 ffe8 	bl	8006b0c <HAL_RCC_ClockConfig>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001b42:	f000 fafb 	bl	800213c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8001b46:	4b0d      	ldr	r3, [pc, #52]	@ (8001b7c <SystemClock_Config+0xcc>)
 8001b48:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8001b52:	2300      	movs	r3, #0
 8001b54:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8001b56:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b60:	463b      	mov	r3, r7
 8001b62:	4618      	mov	r0, r3
 8001b64:	f005 f9f2 	bl	8006f4c <HAL_RCCEx_PeriphCLKConfig>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b6e:	f000 fae5 	bl	800213c <Error_Handler>
  }
}
 8001b72:	bf00      	nop
 8001b74:	3778      	adds	r7, #120	@ 0x78
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	00021061 	.word	0x00021061

08001b80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b84:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf4 <MX_I2C1_Init+0x74>)
 8001b86:	4a1c      	ldr	r2, [pc, #112]	@ (8001bf8 <MX_I2C1_Init+0x78>)
 8001b88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf4 <MX_I2C1_Init+0x74>)
 8001b8c:	f240 220b 	movw	r2, #523	@ 0x20b
 8001b90:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b92:	4b18      	ldr	r3, [pc, #96]	@ (8001bf4 <MX_I2C1_Init+0x74>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b98:	4b16      	ldr	r3, [pc, #88]	@ (8001bf4 <MX_I2C1_Init+0x74>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b9e:	4b15      	ldr	r3, [pc, #84]	@ (8001bf4 <MX_I2C1_Init+0x74>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ba4:	4b13      	ldr	r3, [pc, #76]	@ (8001bf4 <MX_I2C1_Init+0x74>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001baa:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <MX_I2C1_Init+0x74>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bb0:	4b10      	ldr	r3, [pc, #64]	@ (8001bf4 <MX_I2C1_Init+0x74>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf4 <MX_I2C1_Init+0x74>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bbc:	480d      	ldr	r0, [pc, #52]	@ (8001bf4 <MX_I2C1_Init+0x74>)
 8001bbe:	f001 fccf 	bl	8003560 <HAL_I2C_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bc8:	f000 fab8 	bl	800213c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4809      	ldr	r0, [pc, #36]	@ (8001bf4 <MX_I2C1_Init+0x74>)
 8001bd0:	f002 fa16 	bl	8004000 <HAL_I2CEx_ConfigAnalogFilter>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001bda:	f000 faaf 	bl	800213c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001bde:	2100      	movs	r1, #0
 8001be0:	4804      	ldr	r0, [pc, #16]	@ (8001bf4 <MX_I2C1_Init+0x74>)
 8001be2:	f002 fa58 	bl	8004096 <HAL_I2CEx_ConfigDigitalFilter>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001bec:	f000 faa6 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000354 	.word	0x20000354
 8001bf8:	40005400 	.word	0x40005400

08001bfc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c00:	4b1b      	ldr	r3, [pc, #108]	@ (8001c70 <MX_I2C2_Init+0x74>)
 8001c02:	4a1c      	ldr	r2, [pc, #112]	@ (8001c74 <MX_I2C2_Init+0x78>)
 8001c04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0000020B;
 8001c06:	4b1a      	ldr	r3, [pc, #104]	@ (8001c70 <MX_I2C2_Init+0x74>)
 8001c08:	f240 220b 	movw	r2, #523	@ 0x20b
 8001c0c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c0e:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <MX_I2C2_Init+0x74>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c14:	4b16      	ldr	r3, [pc, #88]	@ (8001c70 <MX_I2C2_Init+0x74>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c1a:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <MX_I2C2_Init+0x74>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001c20:	4b13      	ldr	r3, [pc, #76]	@ (8001c70 <MX_I2C2_Init+0x74>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c26:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <MX_I2C2_Init+0x74>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c2c:	4b10      	ldr	r3, [pc, #64]	@ (8001c70 <MX_I2C2_Init+0x74>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c32:	4b0f      	ldr	r3, [pc, #60]	@ (8001c70 <MX_I2C2_Init+0x74>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c38:	480d      	ldr	r0, [pc, #52]	@ (8001c70 <MX_I2C2_Init+0x74>)
 8001c3a:	f001 fc91 	bl	8003560 <HAL_I2C_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c44:	f000 fa7a 	bl	800213c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4809      	ldr	r0, [pc, #36]	@ (8001c70 <MX_I2C2_Init+0x74>)
 8001c4c:	f002 f9d8 	bl	8004000 <HAL_I2CEx_ConfigAnalogFilter>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001c56:	f000 fa71 	bl	800213c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4804      	ldr	r0, [pc, #16]	@ (8001c70 <MX_I2C2_Init+0x74>)
 8001c5e:	f002 fa1a 	bl	8004096 <HAL_I2CEx_ConfigDigitalFilter>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001c68:	f000 fa68 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	200003a8 	.word	0x200003a8
 8001c74:	40005800 	.word	0x40005800

08001c78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cec <MX_SPI1_Init+0x74>)
 8001c7e:	4a1c      	ldr	r2, [pc, #112]	@ (8001cf0 <MX_SPI1_Init+0x78>)
 8001c80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c82:	4b1a      	ldr	r3, [pc, #104]	@ (8001cec <MX_SPI1_Init+0x74>)
 8001c84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c8a:	4b18      	ldr	r3, [pc, #96]	@ (8001cec <MX_SPI1_Init+0x74>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001c90:	4b16      	ldr	r3, [pc, #88]	@ (8001cec <MX_SPI1_Init+0x74>)
 8001c92:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001c96:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c98:	4b14      	ldr	r3, [pc, #80]	@ (8001cec <MX_SPI1_Init+0x74>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c9e:	4b13      	ldr	r3, [pc, #76]	@ (8001cec <MX_SPI1_Init+0x74>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <MX_SPI1_Init+0x74>)
 8001ca6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001caa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001cac:	4b0f      	ldr	r3, [pc, #60]	@ (8001cec <MX_SPI1_Init+0x74>)
 8001cae:	2208      	movs	r2, #8
 8001cb0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cec <MX_SPI1_Init+0x74>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <MX_SPI1_Init+0x74>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001cec <MX_SPI1_Init+0x74>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001cc4:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <MX_SPI1_Init+0x74>)
 8001cc6:	2207      	movs	r2, #7
 8001cc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cca:	4b08      	ldr	r3, [pc, #32]	@ (8001cec <MX_SPI1_Init+0x74>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cd0:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <MX_SPI1_Init+0x74>)
 8001cd2:	2208      	movs	r2, #8
 8001cd4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cd6:	4805      	ldr	r0, [pc, #20]	@ (8001cec <MX_SPI1_Init+0x74>)
 8001cd8:	f005 fae8 	bl	80072ac <HAL_SPI_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001ce2:	f000 fa2b 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200003fc 	.word	0x200003fc
 8001cf0:	40013000 	.word	0x40013000

08001cf4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b096      	sub	sp, #88	@ 0x58
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d06:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	609a      	str	r2, [r3, #8]
 8001d12:	60da      	str	r2, [r3, #12]
 8001d14:	611a      	str	r2, [r3, #16]
 8001d16:	615a      	str	r2, [r3, #20]
 8001d18:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	222c      	movs	r2, #44	@ 0x2c
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f00d f881 	bl	800ee28 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d26:	4b39      	ldr	r3, [pc, #228]	@ (8001e0c <MX_TIM1_Init+0x118>)
 8001d28:	4a39      	ldr	r2, [pc, #228]	@ (8001e10 <MX_TIM1_Init+0x11c>)
 8001d2a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d2c:	4b37      	ldr	r3, [pc, #220]	@ (8001e0c <MX_TIM1_Init+0x118>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d32:	4b36      	ldr	r3, [pc, #216]	@ (8001e0c <MX_TIM1_Init+0x118>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2400-1;
 8001d38:	4b34      	ldr	r3, [pc, #208]	@ (8001e0c <MX_TIM1_Init+0x118>)
 8001d3a:	f640 125f 	movw	r2, #2399	@ 0x95f
 8001d3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d40:	4b32      	ldr	r3, [pc, #200]	@ (8001e0c <MX_TIM1_Init+0x118>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d46:	4b31      	ldr	r3, [pc, #196]	@ (8001e0c <MX_TIM1_Init+0x118>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d4c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e0c <MX_TIM1_Init+0x118>)
 8001d4e:	2280      	movs	r2, #128	@ 0x80
 8001d50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d52:	482e      	ldr	r0, [pc, #184]	@ (8001e0c <MX_TIM1_Init+0x118>)
 8001d54:	f005 fc16 	bl	8007584 <HAL_TIM_PWM_Init>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001d5e:	f000 f9ed 	bl	800213c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d62:	2300      	movs	r3, #0
 8001d64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d6e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001d72:	4619      	mov	r1, r3
 8001d74:	4825      	ldr	r0, [pc, #148]	@ (8001e0c <MX_TIM1_Init+0x118>)
 8001d76:	f006 fc67 	bl	8008648 <HAL_TIMEx_MasterConfigSynchronization>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001d80:	f000 f9dc 	bl	800213c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d84:	2360      	movs	r3, #96	@ 0x60
 8001d86:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d90:	2300      	movs	r3, #0
 8001d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001da0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001da4:	2200      	movs	r2, #0
 8001da6:	4619      	mov	r1, r3
 8001da8:	4818      	ldr	r0, [pc, #96]	@ (8001e0c <MX_TIM1_Init+0x118>)
 8001daa:	f005 ff79 	bl	8007ca0 <HAL_TIM_PWM_ConfigChannel>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001db4:	f000 f9c2 	bl	800213c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001dcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dd0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001dda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dde:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	4619      	mov	r1, r3
 8001dec:	4807      	ldr	r0, [pc, #28]	@ (8001e0c <MX_TIM1_Init+0x118>)
 8001dee:	f006 fcab 	bl	8008748 <HAL_TIMEx_ConfigBreakDeadTime>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001df8:	f000 f9a0 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001dfc:	4803      	ldr	r0, [pc, #12]	@ (8001e0c <MX_TIM1_Init+0x118>)
 8001dfe:	f000 fbcd 	bl	800259c <HAL_TIM_MspPostInit>

}
 8001e02:	bf00      	nop
 8001e04:	3758      	adds	r7, #88	@ 0x58
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000460 	.word	0x20000460
 8001e10:	40012c00 	.word	0x40012c00

08001e14 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08c      	sub	sp, #48	@ 0x30
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e1a:	f107 030c 	add.w	r3, r7, #12
 8001e1e:	2224      	movs	r2, #36	@ 0x24
 8001e20:	2100      	movs	r1, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f00d f800 	bl	800ee28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e28:	463b      	mov	r3, r7
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e32:	4b21      	ldr	r3, [pc, #132]	@ (8001eb8 <MX_TIM4_Init+0xa4>)
 8001e34:	4a21      	ldr	r2, [pc, #132]	@ (8001ebc <MX_TIM4_Init+0xa8>)
 8001e36:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001e38:	4b1f      	ldr	r3, [pc, #124]	@ (8001eb8 <MX_TIM4_Init+0xa4>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb8 <MX_TIM4_Init+0xa4>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001e44:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb8 <MX_TIM4_Init+0xa4>)
 8001e46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e4a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb8 <MX_TIM4_Init+0xa4>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e52:	4b19      	ldr	r3, [pc, #100]	@ (8001eb8 <MX_TIM4_Init+0xa4>)
 8001e54:	2280      	movs	r2, #128	@ 0x80
 8001e56:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e60:	2301      	movs	r3, #1
 8001e62:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 4;
 8001e68:	2304      	movs	r3, #4
 8001e6a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e70:	2301      	movs	r3, #1
 8001e72:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e74:	2300      	movs	r3, #0
 8001e76:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 4;
 8001e78:	2304      	movs	r3, #4
 8001e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001e7c:	f107 030c 	add.w	r3, r7, #12
 8001e80:	4619      	mov	r1, r3
 8001e82:	480d      	ldr	r0, [pc, #52]	@ (8001eb8 <MX_TIM4_Init+0xa4>)
 8001e84:	f005 fcd6 	bl	8007834 <HAL_TIM_Encoder_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001e8e:	f000 f955 	bl	800213c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e92:	2300      	movs	r3, #0
 8001e94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e9a:	463b      	mov	r3, r7
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4806      	ldr	r0, [pc, #24]	@ (8001eb8 <MX_TIM4_Init+0xa4>)
 8001ea0:	f006 fbd2 	bl	8008648 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001eaa:	f000 f947 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001eae:	bf00      	nop
 8001eb0:	3730      	adds	r7, #48	@ 0x30
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	200004ac 	.word	0x200004ac
 8001ebc:	40000800 	.word	0x40000800

08001ec0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ed0:	4b14      	ldr	r3, [pc, #80]	@ (8001f24 <MX_TIM6_Init+0x64>)
 8001ed2:	4a15      	ldr	r2, [pc, #84]	@ (8001f28 <MX_TIM6_Init+0x68>)
 8001ed4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24-1;
 8001ed6:	4b13      	ldr	r3, [pc, #76]	@ (8001f24 <MX_TIM6_Init+0x64>)
 8001ed8:	2217      	movs	r2, #23
 8001eda:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001edc:	4b11      	ldr	r3, [pc, #68]	@ (8001f24 <MX_TIM6_Init+0x64>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001ee2:	4b10      	ldr	r3, [pc, #64]	@ (8001f24 <MX_TIM6_Init+0x64>)
 8001ee4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ee8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001eea:	4b0e      	ldr	r3, [pc, #56]	@ (8001f24 <MX_TIM6_Init+0x64>)
 8001eec:	2280      	movs	r2, #128	@ 0x80
 8001eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ef0:	480c      	ldr	r0, [pc, #48]	@ (8001f24 <MX_TIM6_Init+0x64>)
 8001ef2:	f005 fa86 	bl	8007402 <HAL_TIM_Base_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001efc:	f000 f91e 	bl	800213c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f00:	2300      	movs	r3, #0
 8001f02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4805      	ldr	r0, [pc, #20]	@ (8001f24 <MX_TIM6_Init+0x64>)
 8001f0e:	f006 fb9b 	bl	8008648 <HAL_TIMEx_MasterConfigSynchronization>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001f18:	f000 f910 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200004f8 	.word	0x200004f8
 8001f28:	40001000 	.word	0x40001000

08001f2c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001f3c:	4b14      	ldr	r3, [pc, #80]	@ (8001f90 <MX_TIM7_Init+0x64>)
 8001f3e:	4a15      	ldr	r2, [pc, #84]	@ (8001f94 <MX_TIM7_Init+0x68>)
 8001f40:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 48-1;
 8001f42:	4b13      	ldr	r3, [pc, #76]	@ (8001f90 <MX_TIM7_Init+0x64>)
 8001f44:	222f      	movs	r2, #47	@ 0x2f
 8001f46:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f48:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <MX_TIM7_Init+0x64>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2000-1;
 8001f4e:	4b10      	ldr	r3, [pc, #64]	@ (8001f90 <MX_TIM7_Init+0x64>)
 8001f50:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001f54:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f56:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <MX_TIM7_Init+0x64>)
 8001f58:	2280      	movs	r2, #128	@ 0x80
 8001f5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001f5c:	480c      	ldr	r0, [pc, #48]	@ (8001f90 <MX_TIM7_Init+0x64>)
 8001f5e:	f005 fa50 	bl	8007402 <HAL_TIM_Base_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001f68:	f000 f8e8 	bl	800213c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001f74:	1d3b      	adds	r3, r7, #4
 8001f76:	4619      	mov	r1, r3
 8001f78:	4805      	ldr	r0, [pc, #20]	@ (8001f90 <MX_TIM7_Init+0x64>)
 8001f7a:	f006 fb65 	bl	8008648 <HAL_TIMEx_MasterConfigSynchronization>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001f84:	f000 f8da 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001f88:	bf00      	nop
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20000544 	.word	0x20000544
 8001f94:	40001400 	.word	0x40001400

08001f98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f9c:	4b14      	ldr	r3, [pc, #80]	@ (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001f9e:	4a15      	ldr	r2, [pc, #84]	@ (8001ff4 <MX_USART1_UART_Init+0x5c>)
 8001fa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001fa2:	4b13      	ldr	r3, [pc, #76]	@ (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fa4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001fa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001faa:	4b11      	ldr	r3, [pc, #68]	@ (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fbe:	220c      	movs	r2, #12
 8001fc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc8:	4b09      	ldr	r3, [pc, #36]	@ (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fce:	4b08      	ldr	r3, [pc, #32]	@ (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fda:	4805      	ldr	r0, [pc, #20]	@ (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fdc:	f006 fc50 	bl	8008880 <HAL_UART_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001fe6:	f000 f8a9 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000590 	.word	0x20000590
 8001ff4:	40013800 	.word	0x40013800

08001ff8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08c      	sub	sp, #48	@ 0x30
 8001ffc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffe:	f107 031c 	add.w	r3, r7, #28
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	60da      	str	r2, [r3, #12]
 800200c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800200e:	4b48      	ldr	r3, [pc, #288]	@ (8002130 <MX_GPIO_Init+0x138>)
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	4a47      	ldr	r2, [pc, #284]	@ (8002130 <MX_GPIO_Init+0x138>)
 8002014:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002018:	6153      	str	r3, [r2, #20]
 800201a:	4b45      	ldr	r3, [pc, #276]	@ (8002130 <MX_GPIO_Init+0x138>)
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002022:	61bb      	str	r3, [r7, #24]
 8002024:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002026:	4b42      	ldr	r3, [pc, #264]	@ (8002130 <MX_GPIO_Init+0x138>)
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	4a41      	ldr	r2, [pc, #260]	@ (8002130 <MX_GPIO_Init+0x138>)
 800202c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002030:	6153      	str	r3, [r2, #20]
 8002032:	4b3f      	ldr	r3, [pc, #252]	@ (8002130 <MX_GPIO_Init+0x138>)
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800203e:	4b3c      	ldr	r3, [pc, #240]	@ (8002130 <MX_GPIO_Init+0x138>)
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	4a3b      	ldr	r2, [pc, #236]	@ (8002130 <MX_GPIO_Init+0x138>)
 8002044:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002048:	6153      	str	r3, [r2, #20]
 800204a:	4b39      	ldr	r3, [pc, #228]	@ (8002130 <MX_GPIO_Init+0x138>)
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002056:	4b36      	ldr	r3, [pc, #216]	@ (8002130 <MX_GPIO_Init+0x138>)
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	4a35      	ldr	r2, [pc, #212]	@ (8002130 <MX_GPIO_Init+0x138>)
 800205c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002060:	6153      	str	r3, [r2, #20]
 8002062:	4b33      	ldr	r3, [pc, #204]	@ (8002130 <MX_GPIO_Init+0x138>)
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800206e:	4b30      	ldr	r3, [pc, #192]	@ (8002130 <MX_GPIO_Init+0x138>)
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	4a2f      	ldr	r2, [pc, #188]	@ (8002130 <MX_GPIO_Init+0x138>)
 8002074:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002078:	6153      	str	r3, [r2, #20]
 800207a:	4b2d      	ldr	r3, [pc, #180]	@ (8002130 <MX_GPIO_Init+0x138>)
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002086:	4b2a      	ldr	r3, [pc, #168]	@ (8002130 <MX_GPIO_Init+0x138>)
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	4a29      	ldr	r2, [pc, #164]	@ (8002130 <MX_GPIO_Init+0x138>)
 800208c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002090:	6153      	str	r3, [r2, #20]
 8002092:	4b27      	ldr	r3, [pc, #156]	@ (8002130 <MX_GPIO_Init+0x138>)
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800209a:	607b      	str	r3, [r7, #4]
 800209c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800209e:	2200      	movs	r2, #0
 80020a0:	f64f 7108 	movw	r1, #65288	@ 0xff08
 80020a4:	4823      	ldr	r0, [pc, #140]	@ (8002134 <MX_GPIO_Init+0x13c>)
 80020a6:	f001 fa43 	bl	8003530 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_REVERSE_Pin|MOTOR_FORWARD_Pin, GPIO_PIN_RESET);
 80020aa:	2200      	movs	r2, #0
 80020ac:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80020b0:	4821      	ldr	r0, [pc, #132]	@ (8002138 <MX_GPIO_Init+0x140>)
 80020b2:	f001 fa3d 	bl	8003530 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80020b6:	2337      	movs	r3, #55	@ 0x37
 80020b8:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80020ba:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80020be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020c4:	f107 031c 	add.w	r3, r7, #28
 80020c8:	4619      	mov	r1, r3
 80020ca:	481a      	ldr	r0, [pc, #104]	@ (8002134 <MX_GPIO_Init+0x13c>)
 80020cc:	f001 f89e 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80020d0:	f64f 7308 	movw	r3, #65288	@ 0xff08
 80020d4:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d6:	2301      	movs	r3, #1
 80020d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020de:	2300      	movs	r3, #0
 80020e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020e2:	f107 031c 	add.w	r3, r7, #28
 80020e6:	4619      	mov	r1, r3
 80020e8:	4812      	ldr	r0, [pc, #72]	@ (8002134 <MX_GPIO_Init+0x13c>)
 80020ea:	f001 f88f 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin HOME_SENSOR_Pin */
  GPIO_InitStruct.Pin = B1_Pin|HOME_SENSOR_Pin;
 80020ee:	2303      	movs	r3, #3
 80020f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f2:	2300      	movs	r3, #0
 80020f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fa:	f107 031c 	add.w	r3, r7, #28
 80020fe:	4619      	mov	r1, r3
 8002100:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002104:	f001 f882 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_REVERSE_Pin MOTOR_FORWARD_Pin */
  GPIO_InitStruct.Pin = MOTOR_REVERSE_Pin|MOTOR_FORWARD_Pin;
 8002108:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800210c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210e:	2301      	movs	r3, #1
 8002110:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002116:	2300      	movs	r3, #0
 8002118:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211a:	f107 031c 	add.w	r3, r7, #28
 800211e:	4619      	mov	r1, r3
 8002120:	4805      	ldr	r0, [pc, #20]	@ (8002138 <MX_GPIO_Init+0x140>)
 8002122:	f001 f873 	bl	800320c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002126:	bf00      	nop
 8002128:	3730      	adds	r7, #48	@ 0x30
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000
 8002134:	48001000 	.word	0x48001000
 8002138:	48000400 	.word	0x48000400

0800213c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002140:	b672      	cpsid	i
}
 8002142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002144:	bf00      	nop
 8002146:	e7fd      	b.n	8002144 <Error_Handler+0x8>

08002148 <MotorControllerInit>:

static void MotorControllerCurrentUpdate(MotorController_t *controller,
		float deltaTime);

void MotorControllerInit(MotorController_t *controller,
		MotorControllerInit_t init) {
 8002148:	b084      	sub	sp, #16
 800214a:	b4b0      	push	{r4, r5, r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	f107 001c 	add.w	r0, r7, #28
 8002156:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	controller->init = init;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	461d      	mov	r5, r3
 800215e:	f107 041c 	add.w	r4, r7, #28
 8002162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002164:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002166:	e894 0003 	ldmia.w	r4, {r0, r1}
 800216a:	e885 0003 	stmia.w	r5, {r0, r1}
//	controller->init.encoder = encoder;
//
//	controller->init.positionPid = positionPid;
//	controller->init.currentPid = currentPid;

	controller->mode = MOTOR_CONTROL_POWER;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2020 	strb.w	r2, [r3, #32]
	controller->currentSetPoint = 0;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	61da      	str	r2, [r3, #28]
	controller->positionSetPoint = 0;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	619a      	str	r2, [r3, #24]
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	bcb0      	pop	{r4, r5, r7}
 800218c:	b004      	add	sp, #16
 800218e:	4770      	bx	lr

08002190 <MotorControllerSetPower>:

void MotorControllerSetPower(MotorController_t *controller, int32_t power) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
	controller->mode = MOTOR_CONTROL_POWER;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2020 	strb.w	r2, [r3, #32]
	MotorSetPower(controller->init.motor, power);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6839      	ldr	r1, [r7, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 fdfa 	bl	8002da2 <MotorSetPower>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <MotorControllerUpdate>:

float MotorControllerGetSpeed(MotorController_t *controller) {
	return RotaryEncGetSpeed(controller->init.encoder);
}

void MotorControllerUpdate(MotorController_t *controller, float deltaTime) {
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	ed87 0a00 	vstr	s0, [r7]
	if(controller->mode == MOTOR_CONTROL_POSITION) {
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d105      	bne.n	80021d8 <MotorControllerUpdate+0x22>
		MotorControllerPositionUpdate(controller, deltaTime);
 80021cc:	ed97 0a00 	vldr	s0, [r7]
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f80f 	bl	80021f4 <MotorControllerPositionUpdate>
	}
	else if(controller->mode == MOTOR_CONTROL_CURRENT) {
		MotorControllerCurrentUpdate(controller, deltaTime);
	}
}
 80021d6:	e009      	b.n	80021ec <MotorControllerUpdate+0x36>
	else if(controller->mode == MOTOR_CONTROL_CURRENT) {
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d104      	bne.n	80021ec <MotorControllerUpdate+0x36>
		MotorControllerCurrentUpdate(controller, deltaTime);
 80021e2:	ed97 0a00 	vldr	s0, [r7]
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f810 	bl	800220c <MotorControllerCurrentUpdate>
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <MotorControllerPositionUpdate>:

//TODO: implement
static void MotorControllerPositionUpdate(MotorController_t *controller,
		float deltaTime) {
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	ed87 0a00 	vstr	s0, [r7]

}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <MotorControllerCurrentUpdate>:

static void MotorControllerCurrentUpdate(MotorController_t *controller,
		float deltaTime) {
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	ed87 0a00 	vstr	s0, [r7]
	float actualCurrent = CurrentSenseGetCurrent(
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	4618      	mov	r0, r3
 800221e:	f000 fbdd 	bl	80029dc <CurrentSenseGetCurrent>
 8002222:	ed87 0a03 	vstr	s0, [r7, #12]
			controller->init.currentSensor);

	//determine actual current direction
	if(MotorGetDirection(controller->init.motor) == DIR_FORWARD) {
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fd23 	bl	8002c76 <MotorGetDirection>
 8002230:	4603      	mov	r3, r0
 8002232:	2b02      	cmp	r3, #2
 8002234:	d00d      	beq.n	8002252 <MotorControllerCurrentUpdate+0x46>
		//do nothing
	}
	else if(MotorGetDirection(controller->init.motor) == DIR_REVERSE) {
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f000 fd1b 	bl	8002c76 <MotorGetDirection>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d105      	bne.n	8002252 <MotorControllerCurrentUpdate+0x46>
		//flip actual current direction
		actualCurrent *= -1;
 8002246:	edd7 7a03 	vldr	s15, [r7, #12]
 800224a:	eef1 7a67 	vneg.f32	s15, s15
 800224e:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	//calculate PID for motor output power
	int32_t motorPower = CalcPID(controller->init.currentPid,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	edd3 7a07 	vldr	s15, [r3, #28]
 800225c:	edd7 0a03 	vldr	s1, [r7, #12]
 8002260:	eeb0 0a67 	vmov.f32	s0, s15
 8002264:	4610      	mov	r0, r2
 8002266:	f7fe feb3 	bl	8000fd0 <CalcPID>
 800226a:	eef0 7a40 	vmov.f32	s15, s0
 800226e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002272:	ee17 3a90 	vmov	r3, s15
 8002276:	60bb      	str	r3, [r7, #8]
			controller->currentSetPoint, actualCurrent);
	MotorSetPower(controller->init.motor, motorPower);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	4618      	mov	r0, r3
 8002280:	f000 fd8f 	bl	8002da2 <MotorSetPower>

	testCurrent = actualCurrent;
 8002284:	4a03      	ldr	r2, [pc, #12]	@ (8002294 <MotorControllerCurrentUpdate+0x88>)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6013      	str	r3, [r2, #0]
}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200007e4 	.word	0x200007e4

08002298 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229e:	4b0f      	ldr	r3, [pc, #60]	@ (80022dc <HAL_MspInit+0x44>)
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	4a0e      	ldr	r2, [pc, #56]	@ (80022dc <HAL_MspInit+0x44>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6193      	str	r3, [r2, #24]
 80022aa:	4b0c      	ldr	r3, [pc, #48]	@ (80022dc <HAL_MspInit+0x44>)
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	607b      	str	r3, [r7, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022b6:	4b09      	ldr	r3, [pc, #36]	@ (80022dc <HAL_MspInit+0x44>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	4a08      	ldr	r2, [pc, #32]	@ (80022dc <HAL_MspInit+0x44>)
 80022bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022c0:	61d3      	str	r3, [r2, #28]
 80022c2:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <HAL_MspInit+0x44>)
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80022ce:	2007      	movs	r0, #7
 80022d0:	f000 ff5a 	bl	8003188 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40021000 	.word	0x40021000

080022e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08c      	sub	sp, #48	@ 0x30
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f107 031c 	add.w	r3, r7, #28
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a2f      	ldr	r2, [pc, #188]	@ (80023bc <HAL_I2C_MspInit+0xdc>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d128      	bne.n	8002354 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002302:	4b2f      	ldr	r3, [pc, #188]	@ (80023c0 <HAL_I2C_MspInit+0xe0>)
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	4a2e      	ldr	r2, [pc, #184]	@ (80023c0 <HAL_I2C_MspInit+0xe0>)
 8002308:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800230c:	6153      	str	r3, [r2, #20]
 800230e:	4b2c      	ldr	r3, [pc, #176]	@ (80023c0 <HAL_I2C_MspInit+0xe0>)
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002316:	61bb      	str	r3, [r7, #24]
 8002318:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800231a:	23c0      	movs	r3, #192	@ 0xc0
 800231c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800231e:	2312      	movs	r3, #18
 8002320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002322:	2301      	movs	r3, #1
 8002324:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002326:	2303      	movs	r3, #3
 8002328:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800232a:	2304      	movs	r3, #4
 800232c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232e:	f107 031c 	add.w	r3, r7, #28
 8002332:	4619      	mov	r1, r3
 8002334:	4823      	ldr	r0, [pc, #140]	@ (80023c4 <HAL_I2C_MspInit+0xe4>)
 8002336:	f000 ff69 	bl	800320c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800233a:	4b21      	ldr	r3, [pc, #132]	@ (80023c0 <HAL_I2C_MspInit+0xe0>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	4a20      	ldr	r2, [pc, #128]	@ (80023c0 <HAL_I2C_MspInit+0xe0>)
 8002340:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002344:	61d3      	str	r3, [r2, #28]
 8002346:	4b1e      	ldr	r3, [pc, #120]	@ (80023c0 <HAL_I2C_MspInit+0xe0>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002352:	e02e      	b.n	80023b2 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1b      	ldr	r2, [pc, #108]	@ (80023c8 <HAL_I2C_MspInit+0xe8>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d129      	bne.n	80023b2 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235e:	4b18      	ldr	r3, [pc, #96]	@ (80023c0 <HAL_I2C_MspInit+0xe0>)
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	4a17      	ldr	r2, [pc, #92]	@ (80023c0 <HAL_I2C_MspInit+0xe0>)
 8002364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002368:	6153      	str	r3, [r2, #20]
 800236a:	4b15      	ldr	r3, [pc, #84]	@ (80023c0 <HAL_I2C_MspInit+0xe0>)
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002376:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800237a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800237c:	2312      	movs	r3, #18
 800237e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002384:	2303      	movs	r3, #3
 8002386:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002388:	2304      	movs	r3, #4
 800238a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238c:	f107 031c 	add.w	r3, r7, #28
 8002390:	4619      	mov	r1, r3
 8002392:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002396:	f000 ff39 	bl	800320c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800239a:	4b09      	ldr	r3, [pc, #36]	@ (80023c0 <HAL_I2C_MspInit+0xe0>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4a08      	ldr	r2, [pc, #32]	@ (80023c0 <HAL_I2C_MspInit+0xe0>)
 80023a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023a4:	61d3      	str	r3, [r2, #28]
 80023a6:	4b06      	ldr	r3, [pc, #24]	@ (80023c0 <HAL_I2C_MspInit+0xe0>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
}
 80023b2:	bf00      	nop
 80023b4:	3730      	adds	r7, #48	@ 0x30
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40005400 	.word	0x40005400
 80023c0:	40021000 	.word	0x40021000
 80023c4:	48000400 	.word	0x48000400
 80023c8:	40005800 	.word	0x40005800

080023cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	@ 0x28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a17      	ldr	r2, [pc, #92]	@ (8002448 <HAL_SPI_MspInit+0x7c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d128      	bne.n	8002440 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023ee:	4b17      	ldr	r3, [pc, #92]	@ (800244c <HAL_SPI_MspInit+0x80>)
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	4a16      	ldr	r2, [pc, #88]	@ (800244c <HAL_SPI_MspInit+0x80>)
 80023f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023f8:	6193      	str	r3, [r2, #24]
 80023fa:	4b14      	ldr	r3, [pc, #80]	@ (800244c <HAL_SPI_MspInit+0x80>)
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002406:	4b11      	ldr	r3, [pc, #68]	@ (800244c <HAL_SPI_MspInit+0x80>)
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	4a10      	ldr	r2, [pc, #64]	@ (800244c <HAL_SPI_MspInit+0x80>)
 800240c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002410:	6153      	str	r3, [r2, #20]
 8002412:	4b0e      	ldr	r3, [pc, #56]	@ (800244c <HAL_SPI_MspInit+0x80>)
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800241e:	23e0      	movs	r3, #224	@ 0xe0
 8002420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800242a:	2303      	movs	r3, #3
 800242c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800242e:	2305      	movs	r3, #5
 8002430:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002432:	f107 0314 	add.w	r3, r7, #20
 8002436:	4619      	mov	r1, r3
 8002438:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800243c:	f000 fee6 	bl	800320c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002440:	bf00      	nop
 8002442:	3728      	adds	r7, #40	@ 0x28
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40013000 	.word	0x40013000
 800244c:	40021000 	.word	0x40021000

08002450 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0a      	ldr	r2, [pc, #40]	@ (8002488 <HAL_TIM_PWM_MspInit+0x38>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d10b      	bne.n	800247a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002462:	4b0a      	ldr	r3, [pc, #40]	@ (800248c <HAL_TIM_PWM_MspInit+0x3c>)
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	4a09      	ldr	r2, [pc, #36]	@ (800248c <HAL_TIM_PWM_MspInit+0x3c>)
 8002468:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800246c:	6193      	str	r3, [r2, #24]
 800246e:	4b07      	ldr	r3, [pc, #28]	@ (800248c <HAL_TIM_PWM_MspInit+0x3c>)
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800247a:	bf00      	nop
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40012c00 	.word	0x40012c00
 800248c:	40021000 	.word	0x40021000

08002490 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08a      	sub	sp, #40	@ 0x28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a17      	ldr	r2, [pc, #92]	@ (800250c <HAL_TIM_Encoder_MspInit+0x7c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d128      	bne.n	8002504 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024b2:	4b17      	ldr	r3, [pc, #92]	@ (8002510 <HAL_TIM_Encoder_MspInit+0x80>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	4a16      	ldr	r2, [pc, #88]	@ (8002510 <HAL_TIM_Encoder_MspInit+0x80>)
 80024b8:	f043 0304 	orr.w	r3, r3, #4
 80024bc:	61d3      	str	r3, [r2, #28]
 80024be:	4b14      	ldr	r3, [pc, #80]	@ (8002510 <HAL_TIM_Encoder_MspInit+0x80>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	613b      	str	r3, [r7, #16]
 80024c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ca:	4b11      	ldr	r3, [pc, #68]	@ (8002510 <HAL_TIM_Encoder_MspInit+0x80>)
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	4a10      	ldr	r2, [pc, #64]	@ (8002510 <HAL_TIM_Encoder_MspInit+0x80>)
 80024d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024d4:	6153      	str	r3, [r2, #20]
 80024d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002510 <HAL_TIM_Encoder_MspInit+0x80>)
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80024e2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80024e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e8:	2302      	movs	r3, #2
 80024ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f0:	2300      	movs	r3, #0
 80024f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024f4:	2302      	movs	r3, #2
 80024f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	4619      	mov	r1, r3
 80024fe:	4805      	ldr	r0, [pc, #20]	@ (8002514 <HAL_TIM_Encoder_MspInit+0x84>)
 8002500:	f000 fe84 	bl	800320c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002504:	bf00      	nop
 8002506:	3728      	adds	r7, #40	@ 0x28
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40000800 	.word	0x40000800
 8002510:	40021000 	.word	0x40021000
 8002514:	48000c00 	.word	0x48000c00

08002518 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a1a      	ldr	r2, [pc, #104]	@ (8002590 <HAL_TIM_Base_MspInit+0x78>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d114      	bne.n	8002554 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800252a:	4b1a      	ldr	r3, [pc, #104]	@ (8002594 <HAL_TIM_Base_MspInit+0x7c>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	4a19      	ldr	r2, [pc, #100]	@ (8002594 <HAL_TIM_Base_MspInit+0x7c>)
 8002530:	f043 0310 	orr.w	r3, r3, #16
 8002534:	61d3      	str	r3, [r2, #28]
 8002536:	4b17      	ldr	r3, [pc, #92]	@ (8002594 <HAL_TIM_Base_MspInit+0x7c>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002542:	2200      	movs	r2, #0
 8002544:	2100      	movs	r1, #0
 8002546:	2036      	movs	r0, #54	@ 0x36
 8002548:	f000 fe29 	bl	800319e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800254c:	2036      	movs	r0, #54	@ 0x36
 800254e:	f000 fe42 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002552:	e018      	b.n	8002586 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a0f      	ldr	r2, [pc, #60]	@ (8002598 <HAL_TIM_Base_MspInit+0x80>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d113      	bne.n	8002586 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800255e:	4b0d      	ldr	r3, [pc, #52]	@ (8002594 <HAL_TIM_Base_MspInit+0x7c>)
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	4a0c      	ldr	r2, [pc, #48]	@ (8002594 <HAL_TIM_Base_MspInit+0x7c>)
 8002564:	f043 0320 	orr.w	r3, r3, #32
 8002568:	61d3      	str	r3, [r2, #28]
 800256a:	4b0a      	ldr	r3, [pc, #40]	@ (8002594 <HAL_TIM_Base_MspInit+0x7c>)
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f003 0320 	and.w	r3, r3, #32
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002576:	2200      	movs	r2, #0
 8002578:	2100      	movs	r1, #0
 800257a:	2037      	movs	r0, #55	@ 0x37
 800257c:	f000 fe0f 	bl	800319e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002580:	2037      	movs	r0, #55	@ 0x37
 8002582:	f000 fe28 	bl	80031d6 <HAL_NVIC_EnableIRQ>
}
 8002586:	bf00      	nop
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40001000 	.word	0x40001000
 8002594:	40021000 	.word	0x40021000
 8002598:	40001400 	.word	0x40001400

0800259c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 030c 	add.w	r3, r7, #12
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a12      	ldr	r2, [pc, #72]	@ (8002604 <HAL_TIM_MspPostInit+0x68>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d11d      	bne.n	80025fa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025be:	4b12      	ldr	r3, [pc, #72]	@ (8002608 <HAL_TIM_MspPostInit+0x6c>)
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	4a11      	ldr	r2, [pc, #68]	@ (8002608 <HAL_TIM_MspPostInit+0x6c>)
 80025c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025c8:	6153      	str	r3, [r2, #20]
 80025ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002608 <HAL_TIM_MspPostInit+0x6c>)
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 80025d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025dc:	2302      	movs	r3, #2
 80025de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80025e8:	2306      	movs	r3, #6
 80025ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 80025ec:	f107 030c 	add.w	r3, r7, #12
 80025f0:	4619      	mov	r1, r3
 80025f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025f6:	f000 fe09 	bl	800320c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80025fa:	bf00      	nop
 80025fc:	3720      	adds	r7, #32
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40012c00 	.word	0x40012c00
 8002608:	40021000 	.word	0x40021000

0800260c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08a      	sub	sp, #40	@ 0x28
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f107 0314 	add.w	r3, r7, #20
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a17      	ldr	r2, [pc, #92]	@ (8002688 <HAL_UART_MspInit+0x7c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d127      	bne.n	800267e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800262e:	4b17      	ldr	r3, [pc, #92]	@ (800268c <HAL_UART_MspInit+0x80>)
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	4a16      	ldr	r2, [pc, #88]	@ (800268c <HAL_UART_MspInit+0x80>)
 8002634:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002638:	6193      	str	r3, [r2, #24]
 800263a:	4b14      	ldr	r3, [pc, #80]	@ (800268c <HAL_UART_MspInit+0x80>)
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002646:	4b11      	ldr	r3, [pc, #68]	@ (800268c <HAL_UART_MspInit+0x80>)
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	4a10      	ldr	r2, [pc, #64]	@ (800268c <HAL_UART_MspInit+0x80>)
 800264c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002650:	6153      	str	r3, [r2, #20]
 8002652:	4b0e      	ldr	r3, [pc, #56]	@ (800268c <HAL_UART_MspInit+0x80>)
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800265e:	2330      	movs	r3, #48	@ 0x30
 8002660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002662:	2302      	movs	r3, #2
 8002664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800266a:	2303      	movs	r3, #3
 800266c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800266e:	2307      	movs	r3, #7
 8002670:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002672:	f107 0314 	add.w	r3, r7, #20
 8002676:	4619      	mov	r1, r3
 8002678:	4805      	ldr	r0, [pc, #20]	@ (8002690 <HAL_UART_MspInit+0x84>)
 800267a:	f000 fdc7 	bl	800320c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800267e:	bf00      	nop
 8002680:	3728      	adds	r7, #40	@ 0x28
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40013800 	.word	0x40013800
 800268c:	40021000 	.word	0x40021000
 8002690:	48000800 	.word	0x48000800

08002694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002698:	bf00      	nop
 800269a:	e7fd      	b.n	8002698 <NMI_Handler+0x4>

0800269c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026a0:	bf00      	nop
 80026a2:	e7fd      	b.n	80026a0 <HardFault_Handler+0x4>

080026a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026a8:	bf00      	nop
 80026aa:	e7fd      	b.n	80026a8 <MemManage_Handler+0x4>

080026ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026b0:	bf00      	nop
 80026b2:	e7fd      	b.n	80026b0 <BusFault_Handler+0x4>

080026b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026b8:	bf00      	nop
 80026ba:	e7fd      	b.n	80026b8 <UsageFault_Handler+0x4>

080026bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026ca:	b480      	push	{r7}
 80026cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026ea:	f000 fc39 	bl	8002f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80026f8:	4802      	ldr	r0, [pc, #8]	@ (8002704 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80026fa:	f001 fe05 	bl	8004308 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000cb8 	.word	0x20000cb8

08002708 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800270c:	4802      	ldr	r0, [pc, #8]	@ (8002718 <TIM6_DAC_IRQHandler+0x10>)
 800270e:	f005 f9c5 	bl	8007a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	200004f8 	.word	0x200004f8

0800271c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002720:	4802      	ldr	r0, [pc, #8]	@ (800272c <TIM7_IRQHandler+0x10>)
 8002722:	f005 f9bb 	bl	8007a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000544 	.word	0x20000544

08002730 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return 1;
 8002734:	2301      	movs	r3, #1
}
 8002736:	4618      	mov	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <_kill>:

int _kill(int pid, int sig)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800274a:	f00c fbbf 	bl	800eecc <__errno>
 800274e:	4603      	mov	r3, r0
 8002750:	2216      	movs	r2, #22
 8002752:	601a      	str	r2, [r3, #0]
  return -1;
 8002754:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002758:	4618      	mov	r0, r3
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <_exit>:

void _exit (int status)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002768:	f04f 31ff 	mov.w	r1, #4294967295
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff ffe7 	bl	8002740 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002772:	bf00      	nop
 8002774:	e7fd      	b.n	8002772 <_exit+0x12>

08002776 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b086      	sub	sp, #24
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	e00a      	b.n	800279e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002788:	f3af 8000 	nop.w
 800278c:	4601      	mov	r1, r0
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	60ba      	str	r2, [r7, #8]
 8002794:	b2ca      	uxtb	r2, r1
 8002796:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	3301      	adds	r3, #1
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	dbf0      	blt.n	8002788 <_read+0x12>
  }

  return len;
 80027a6:	687b      	ldr	r3, [r7, #4]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	e009      	b.n	80027d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	60ba      	str	r2, [r7, #8]
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe fe78 	bl	80014c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	3301      	adds	r3, #1
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	429a      	cmp	r2, r3
 80027dc:	dbf1      	blt.n	80027c2 <_write+0x12>
  }
  return len;
 80027de:	687b      	ldr	r3, [r7, #4]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <_close>:

int _close(int file)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002810:	605a      	str	r2, [r3, #4]
  return 0;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <_isatty>:

int _isatty(int file)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002828:	2301      	movs	r3, #1
}
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002836:	b480      	push	{r7}
 8002838:	b085      	sub	sp, #20
 800283a:	af00      	add	r7, sp, #0
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002858:	4a14      	ldr	r2, [pc, #80]	@ (80028ac <_sbrk+0x5c>)
 800285a:	4b15      	ldr	r3, [pc, #84]	@ (80028b0 <_sbrk+0x60>)
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002864:	4b13      	ldr	r3, [pc, #76]	@ (80028b4 <_sbrk+0x64>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d102      	bne.n	8002872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800286c:	4b11      	ldr	r3, [pc, #68]	@ (80028b4 <_sbrk+0x64>)
 800286e:	4a12      	ldr	r2, [pc, #72]	@ (80028b8 <_sbrk+0x68>)
 8002870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002872:	4b10      	ldr	r3, [pc, #64]	@ (80028b4 <_sbrk+0x64>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4413      	add	r3, r2
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	429a      	cmp	r2, r3
 800287e:	d207      	bcs.n	8002890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002880:	f00c fb24 	bl	800eecc <__errno>
 8002884:	4603      	mov	r3, r0
 8002886:	220c      	movs	r2, #12
 8002888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800288a:	f04f 33ff 	mov.w	r3, #4294967295
 800288e:	e009      	b.n	80028a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002890:	4b08      	ldr	r3, [pc, #32]	@ (80028b4 <_sbrk+0x64>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002896:	4b07      	ldr	r3, [pc, #28]	@ (80028b4 <_sbrk+0x64>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	4a05      	ldr	r2, [pc, #20]	@ (80028b4 <_sbrk+0x64>)
 80028a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028a2:	68fb      	ldr	r3, [r7, #12]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	2000a000 	.word	0x2000a000
 80028b0:	00000400 	.word	0x00000400
 80028b4:	200007e8 	.word	0x200007e8
 80028b8:	20001100 	.word	0x20001100

080028bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028c0:	4b06      	ldr	r3, [pc, #24]	@ (80028dc <SystemInit+0x20>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c6:	4a05      	ldr	r2, [pc, #20]	@ (80028dc <SystemInit+0x20>)
 80028c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <HomeSensorInit>:
 *      Author: Jennyston
 */

#include "devices/home_sensor.h"

void HomeSensorInit(HomeSensor_t *homeSensor, GPIO_t gpio) {
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	1d3b      	adds	r3, r7, #4
 80028ea:	e883 0006 	stmia.w	r3, {r1, r2}
	homeSensor->gpio = gpio;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	461a      	mov	r2, r3
 80028f2:	1d3b      	adds	r3, r7, #4
 80028f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028f8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80028fc:	bf00      	nop
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HomeSensorHome>:

void HomeSensorHome(HomeSensor_t *homeSensor, Motor_t *motor) {
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
//	//get motor spinning
//	MotorSetPower(motor, HOME_MOTOR_MAX_SPEED);
//	HAL_Delay(1000);

	//run motor at max speed and find home position
	MotorSetPower(motor, HOME_MOTOR_MAX_SPEED);
 8002912:	f44f 61af 	mov.w	r1, #1400	@ 0x578
 8002916:	6838      	ldr	r0, [r7, #0]
 8002918:	f000 fa43 	bl	8002da2 <MotorSetPower>
	while(GPIOGetState(&(homeSensor->gpio)) == GPIO_LOW) {
 800291c:	bf00      	nop
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4618      	mov	r0, r3
 8002922:	f000 fa83 	bl	8002e2c <GPIOGetState>
 8002926:	4603      	mov	r3, r0
 8002928:	2b01      	cmp	r3, #1
 800292a:	d0f8      	beq.n	800291e <HomeSensorHome+0x16>
		//wait (do nothing)
	}

	//dead time
	MotorSetPower(motor, 0);
 800292c:	2100      	movs	r1, #0
 800292e:	6838      	ldr	r0, [r7, #0]
 8002930:	f000 fa37 	bl	8002da2 <MotorSetPower>
	HAL_Delay(500);
 8002934:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002938:	f000 fb32 	bl	8002fa0 <HAL_Delay>

	//home position has been found, back off slowly
	MotorSetPower(motor, -HOME_MOTOR_MIN_SPEED);
 800293c:	4915      	ldr	r1, [pc, #84]	@ (8002994 <HomeSensorHome+0x8c>)
 800293e:	6838      	ldr	r0, [r7, #0]
 8002940:	f000 fa2f 	bl	8002da2 <MotorSetPower>
	while(GPIOGetState(&(homeSensor->gpio)) == GPIO_HIGH) {
 8002944:	bf00      	nop
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4618      	mov	r0, r3
 800294a:	f000 fa6f 	bl	8002e2c <GPIOGetState>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f8      	beq.n	8002946 <HomeSensorHome+0x3e>
		//wait (do nothing)
	}
	HAL_Delay(250);
 8002954:	20fa      	movs	r0, #250	@ 0xfa
 8002956:	f000 fb23 	bl	8002fa0 <HAL_Delay>

	//dead time
	MotorSetPower(motor, 0);
 800295a:	2100      	movs	r1, #0
 800295c:	6838      	ldr	r0, [r7, #0]
 800295e:	f000 fa20 	bl	8002da2 <MotorSetPower>
	HAL_Delay(500);
 8002962:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002966:	f000 fb1b 	bl	8002fa0 <HAL_Delay>

	//move forward back to home position slowly
	MotorSetPower(motor, HOME_MOTOR_MIN_SPEED);
 800296a:	f240 414c 	movw	r1, #1100	@ 0x44c
 800296e:	6838      	ldr	r0, [r7, #0]
 8002970:	f000 fa17 	bl	8002da2 <MotorSetPower>
	while(GPIOGetState(&(homeSensor->gpio)) == GPIO_LOW) {
 8002974:	bf00      	nop
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fa57 	bl	8002e2c <GPIOGetState>
 800297e:	4603      	mov	r3, r0
 8002980:	2b01      	cmp	r3, #1
 8002982:	d0f8      	beq.n	8002976 <HomeSensorHome+0x6e>
		//wait (do nothing)
	}

	MotorSetPower(motor, 0);
 8002984:	2100      	movs	r1, #0
 8002986:	6838      	ldr	r0, [r7, #0]
 8002988:	f000 fa0b 	bl	8002da2 <MotorSetPower>

	//done
}
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	fffffbb4 	.word	0xfffffbb4

08002998 <CurrentSenseInit>:

//private function forward declarations
static void Ina219WriteRegister(Ina219_t *cSense, Ina219Reg reg, uint16_t data);
static uint16_t Ina219ReadRegister(Ina219_t *cSense, Ina219Reg reg);

void CurrentSenseInit(Ina219_t *cSense, I2C_HandleTypeDef *hi2c) {
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
	cSense->hi2c = hi2c;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	601a      	str	r2, [r3, #0]

	//uint16_t test = Ina219ReadRegister(cSense, INA219_CONFIG);

	//Soft reset INA219
	Ina219WriteRegister(cSense, INA219_CONFIG, 0b1000000000000000);
 80029a8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80029ac:	2100      	movs	r1, #0
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f840 	bl	8002a34 <Ina219WriteRegister>
	HAL_Delay(5);
 80029b4:	2005      	movs	r0, #5
 80029b6:	f000 faf3 	bl	8002fa0 <HAL_Delay>
	 * PGA: +/- 320mV
	 * BADC: 12-bit
	 * SADC: 2 samples
	 * Operating Mode: Shunt and bus, continuous
	 */
	Ina219WriteRegister(cSense, INA219_CONFIG, 0b0001100111001111);
 80029ba:	f641 12cf 	movw	r2, #6607	@ 0x19cf
 80029be:	2100      	movs	r1, #0
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f837 	bl	8002a34 <Ina219WriteRegister>

	//Calibration
	Ina219WriteRegister(cSense, INA219_CALIBRATION, 4096);
 80029c6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80029ca:	2105      	movs	r1, #5
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f831 	bl	8002a34 <Ina219WriteRegister>

}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <CurrentSenseGetCurrent>:

float CurrentSenseGetCurrent(Ina219_t *cSense) {
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]

	//Ensure sensor calibration did not reset as recommended by Adafruit
	//Ina219WriteRegister(cSense, INA219_CALIBRATION, 4096);

	//Ina219WriteRegister(cSense, INA219_CONFIG, 0b0001100110011111);
	Ina219WriteRegister(cSense, INA219_CONFIG, 0b0001100111001111);
 80029e4:	f641 12cf 	movw	r2, #6607	@ 0x19cf
 80029e8:	2100      	movs	r1, #0
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f822 	bl	8002a34 <Ina219WriteRegister>


	//Calibration
	Ina219WriteRegister(cSense, INA219_CALIBRATION, 4096);
 80029f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80029f4:	2105      	movs	r1, #5
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f81c 	bl	8002a34 <Ina219WriteRegister>

	uint16_t rawData = Ina219ReadRegister(cSense, INA219_CURRENT);
 80029fc:	2104      	movs	r1, #4
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f869 	bl	8002ad6 <Ina219ReadRegister>
 8002a04:	4603      	mov	r3, r0
 8002a06:	81bb      	strh	r3, [r7, #12]
	int16_t data = *(int16_t *)&rawData;
 8002a08:	f107 030c 	add.w	r3, r7, #12
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	81fb      	strh	r3, [r7, #14]
	return data * 0.0001f;
 8002a10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a14:	ee07 3a90 	vmov	s15, r3
 8002a18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a1c:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8002a30 <CurrentSenseGetCurrent+0x54>
 8002a20:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002a24:	eeb0 0a67 	vmov.f32	s0, s15
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	38d1b717 	.word	0x38d1b717

08002a34 <Ina219WriteRegister>:

static void Ina219WriteRegister(Ina219_t *cSense, Ina219Reg reg,
		uint16_t data) {
 8002a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a38:	b089      	sub	sp, #36	@ 0x24
 8002a3a:	af02      	add	r7, sp, #8
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	460b      	mov	r3, r1
 8002a40:	70fb      	strb	r3, [r7, #3]
 8002a42:	4613      	mov	r3, r2
 8002a44:	803b      	strh	r3, [r7, #0]
 8002a46:	466b      	mov	r3, sp
 8002a48:	461e      	mov	r6, r3
	//Prepare data for transmit
	const uint8_t TX_DATA_LENGTH = 3;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	75fb      	strb	r3, [r7, #23]
	uint8_t txData[TX_DATA_LENGTH];
 8002a4e:	7dfb      	ldrb	r3, [r7, #23]
 8002a50:	3b01      	subs	r3, #1
 8002a52:	613b      	str	r3, [r7, #16]
 8002a54:	7dfb      	ldrb	r3, [r7, #23]
 8002a56:	2200      	movs	r2, #0
 8002a58:	4698      	mov	r8, r3
 8002a5a:	4691      	mov	r9, r2
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a70:	7dfb      	ldrb	r3, [r7, #23]
 8002a72:	2200      	movs	r2, #0
 8002a74:	461c      	mov	r4, r3
 8002a76:	4615      	mov	r5, r2
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	f04f 0300 	mov.w	r3, #0
 8002a80:	00eb      	lsls	r3, r5, #3
 8002a82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a86:	00e2      	lsls	r2, r4, #3
 8002a88:	7dfb      	ldrb	r3, [r7, #23]
 8002a8a:	3307      	adds	r3, #7
 8002a8c:	08db      	lsrs	r3, r3, #3
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	ebad 0d03 	sub.w	sp, sp, r3
 8002a94:	ab02      	add	r3, sp, #8
 8002a96:	3300      	adds	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
	txData[0] = (uint8_t)reg;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	701a      	strb	r2, [r3, #0]
	txData[1] = (uint8_t)((data >> 8) & 0xFF);
 8002aa0:	883b      	ldrh	r3, [r7, #0]
 8002aa2:	0a1b      	lsrs	r3, r3, #8
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	705a      	strb	r2, [r3, #1]
	txData[2] = (uint8_t)(data & 0xFF);
 8002aac:	883b      	ldrh	r3, [r7, #0]
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	709a      	strb	r2, [r3, #2]

	//Transmit register address with provided data
	HAL_I2C_Master_Transmit(cSense->hi2c, INA219_ADDR, txData, TX_DATA_LENGTH,
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	7dfb      	ldrb	r3, [r7, #23]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac0:	9200      	str	r2, [sp, #0]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	2180      	movs	r1, #128	@ 0x80
 8002ac6:	f000 fde7 	bl	8003698 <HAL_I2C_Master_Transmit>
 8002aca:	46b5      	mov	sp, r6
			HAL_MAX_DELAY);
}
 8002acc:	bf00      	nop
 8002ace:	371c      	adds	r7, #28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002ad6 <Ina219ReadRegister>:

static uint16_t Ina219ReadRegister(Ina219_t *cSense, Ina219Reg reg) {
 8002ad6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ada:	b089      	sub	sp, #36	@ 0x24
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	70fb      	strb	r3, [r7, #3]
 8002ae4:	466b      	mov	r3, sp
 8002ae6:	461e      	mov	r6, r3
	const int RX_DATA_LENGTH = 2;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	617b      	str	r3, [r7, #20]
	uint8_t buffer[RX_DATA_LENGTH];
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2200      	movs	r2, #0
 8002af6:	4698      	mov	r8, r3
 8002af8:	4691      	mov	r9, r2
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	f04f 0300 	mov.w	r3, #0
 8002b02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2200      	movs	r2, #0
 8002b12:	461c      	mov	r4, r3
 8002b14:	4615      	mov	r5, r2
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	00eb      	lsls	r3, r5, #3
 8002b20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b24:	00e2      	lsls	r2, r4, #3
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	3307      	adds	r3, #7
 8002b2a:	08db      	lsrs	r3, r3, #3
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	ebad 0d03 	sub.w	sp, sp, r3
 8002b32:	ab02      	add	r3, sp, #8
 8002b34:	3300      	adds	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Master_Transmit(cSense->hi2c, INA219_ADDR, (uint8_t *)&reg, 1,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	1cfa      	adds	r2, r7, #3
 8002b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	2301      	movs	r3, #1
 8002b46:	2180      	movs	r1, #128	@ 0x80
 8002b48:	f000 fda6 	bl	8003698 <HAL_I2C_Master_Transmit>
			HAL_MAX_DELAY);
	HAL_I2C_Master_Receive(cSense->hi2c, INA219_ADDR, buffer, RX_DATA_LENGTH,
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	f04f 32ff 	mov.w	r2, #4294967295
 8002b58:	9200      	str	r2, [sp, #0]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	2180      	movs	r1, #128	@ 0x80
 8002b5e:	f000 feb3 	bl	80038c8 <HAL_I2C_Master_Receive>
			HAL_MAX_DELAY);

	//Convert 2*8-bit data to 16-bit
	uint16_t data = (((uint16_t)buffer[0])<< 8) | (buffer[1] & 0xFF);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	b21a      	sxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	785b      	ldrb	r3, [r3, #1]
 8002b6e:	b21b      	sxth	r3, r3
 8002b70:	4313      	orrs	r3, r2
 8002b72:	b21b      	sxth	r3, r3
 8002b74:	817b      	strh	r3, [r7, #10]

	return data;
 8002b76:	897b      	ldrh	r3, [r7, #10]
 8002b78:	46b5      	mov	sp, r6
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	371c      	adds	r7, #28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002b84 <MotorInit>:
#include "devices/motor.h"

static int32_t Abs(int32_t x);

void MotorInit(Motor_t *motor, TIM_HandleTypeDef *htim, uint32_t pwmCh,
		GPIO_t reverseGpio, GPIO_t forwardGpio) {
 8002b84:	b082      	sub	sp, #8
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b084      	sub	sp, #16
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	607a      	str	r2, [r7, #4]
 8002b92:	61fb      	str	r3, [r7, #28]
	motor->htim = htim;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	601a      	str	r2, [r3, #0]
	motor->pwmCh = pwmCh;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	605a      	str	r2, [r3, #4]
	motor->reverseGpio = reverseGpio;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	3310      	adds	r3, #16
 8002ba4:	f107 021c 	add.w	r2, r7, #28
 8002ba8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bac:	e883 0003 	stmia.w	r3, {r0, r1}
	motor->forwardGpio = forwardGpio;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	3308      	adds	r3, #8
 8002bb4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002bb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bbc:	e883 0003 	stmia.w	r3, {r0, r1}
	motor->offset = 0;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	839a      	strh	r2, [r3, #28]
	MotorSetDirection(motor, DIR_STOP);
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 f81b 	bl	8002c04 <MotorSetDirection>
}
 8002bce:	bf00      	nop
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bd8:	b002      	add	sp, #8
 8002bda:	4770      	bx	lr

08002bdc <MotorStartPWM>:

void MotorStartPWM(Motor_t *motor) {
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
	//make sure motor is stopped
	MotorSetDirection(motor, DIR_STOP);
 8002be4:	2101      	movs	r1, #1
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f80c 	bl	8002c04 <MotorSetDirection>

	HAL_TIM_PWM_Start(motor->htim, motor->pwmCh);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	f004 fd1c 	bl	8007634 <HAL_TIM_PWM_Start>
}
 8002bfc:	bf00      	nop
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <MotorSetDirection>:

uint16_t MotorGetOffset(Motor_t *motor) {
	return motor->offset;
}

void MotorSetDirection(Motor_t *motor, MotorDirection_t dir) {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	70fb      	strb	r3, [r7, #3]

	//Set appropriate GPIO based on requested direction
	switch(dir) {
 8002c10:	78fb      	ldrb	r3, [r7, #3]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d012      	beq.n	8002c3c <MotorSetDirection+0x38>
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d121      	bne.n	8002c5e <MotorSetDirection+0x5a>
	case DIR_FORWARD:
		HAL_GPIO_WritePin(motor->forwardGpio.port, motor->forwardGpio.pin,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6898      	ldr	r0, [r3, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	899b      	ldrh	r3, [r3, #12]
 8002c22:	2201      	movs	r2, #1
 8002c24:	4619      	mov	r1, r3
 8002c26:	f000 fc83 	bl	8003530 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		HAL_GPIO_WritePin(motor->reverseGpio.port, motor->reverseGpio.pin,
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6918      	ldr	r0, [r3, #16]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	8a9b      	ldrh	r3, [r3, #20]
 8002c32:	2200      	movs	r2, #0
 8002c34:	4619      	mov	r1, r3
 8002c36:	f000 fc7b 	bl	8003530 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 8002c3a:	e011      	b.n	8002c60 <MotorSetDirection+0x5c>
	case DIR_REVERSE:
		HAL_GPIO_WritePin(motor->forwardGpio.port, motor->forwardGpio.pin,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6898      	ldr	r0, [r3, #8]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	899b      	ldrh	r3, [r3, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	4619      	mov	r1, r3
 8002c48:	f000 fc72 	bl	8003530 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(motor->reverseGpio.port, motor->reverseGpio.pin,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6918      	ldr	r0, [r3, #16]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	8a9b      	ldrh	r3, [r3, #20]
 8002c54:	2201      	movs	r2, #1
 8002c56:	4619      	mov	r1, r3
 8002c58:	f000 fc6a 	bl	8003530 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		break;
 8002c5c:	e000      	b.n	8002c60 <MotorSetDirection+0x5c>
	default:
		break;
 8002c5e:	bf00      	nop
	}

	motor->direction = dir;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	78fa      	ldrb	r2, [r7, #3]
 8002c64:	761a      	strb	r2, [r3, #24]

	MotorSetSpeed(motor, 0);
 8002c66:	2100      	movs	r1, #0
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f810 	bl	8002c8e <MotorSetSpeed>
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <MotorGetDirection>:

MotorDirection_t MotorGetDirection(Motor_t *motor) {
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
	return motor->direction;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	7e1b      	ldrb	r3, [r3, #24]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <MotorSetSpeed>:


void MotorSetSpeed(Motor_t *motor, uint16_t speed) {
 8002c8e:	b480      	push	{r7}
 8002c90:	b085      	sub	sp, #20
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	460b      	mov	r3, r1
 8002c98:	807b      	strh	r3, [r7, #2]
	motor->speed = speed;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	887a      	ldrh	r2, [r7, #2]
 8002c9e:	835a      	strh	r2, [r3, #26]

	if(motor->speed > 0) {
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	8b5b      	ldrh	r3, [r3, #26]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d03e      	beq.n	8002d26 <MotorSetSpeed+0x98>
		uint32_t pwmVal = (uint32_t)motor->speed + motor->offset;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	8b5b      	ldrh	r3, [r3, #26]
 8002cac:	461a      	mov	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	8b9b      	ldrh	r3, [r3, #28]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, pwmVal);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d105      	bne.n	8002cca <MotorSetSpeed+0x3c>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	else {
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
	}
}
 8002cc8:	e065      	b.n	8002d96 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, pwmVal);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d105      	bne.n	8002cde <MotorSetSpeed+0x50>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6393      	str	r3, [r2, #56]	@ 0x38
 8002cdc:	e05b      	b.n	8002d96 <MotorSetSpeed+0x108>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d105      	bne.n	8002cf2 <MotorSetSpeed+0x64>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002cf0:	e051      	b.n	8002d96 <MotorSetSpeed+0x108>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b0c      	cmp	r3, #12
 8002cf8:	d105      	bne.n	8002d06 <MotorSetSpeed+0x78>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d04:	e047      	b.n	8002d96 <MotorSetSpeed+0x108>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b10      	cmp	r3, #16
 8002d0c:	d105      	bne.n	8002d1a <MotorSetSpeed+0x8c>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d18:	e03d      	b.n	8002d96 <MotorSetSpeed+0x108>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8002d24:	e037      	b.n	8002d96 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d105      	bne.n	8002d3a <MotorSetSpeed+0xac>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2200      	movs	r2, #0
 8002d36:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002d38:	e02d      	b.n	8002d96 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d105      	bne.n	8002d4e <MotorSetSpeed+0xc0>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	2300      	movs	r3, #0
 8002d4a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002d4c:	e023      	b.n	8002d96 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d105      	bne.n	8002d62 <MotorSetSpeed+0xd4>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002d60:	e019      	b.n	8002d96 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b0c      	cmp	r3, #12
 8002d68:	d105      	bne.n	8002d76 <MotorSetSpeed+0xe8>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	2300      	movs	r3, #0
 8002d72:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002d74:	e00f      	b.n	8002d96 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b10      	cmp	r3, #16
 8002d7c:	d105      	bne.n	8002d8a <MotorSetSpeed+0xfc>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	2300      	movs	r3, #0
 8002d86:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8002d88:	e005      	b.n	8002d96 <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	2300      	movs	r3, #0
 8002d92:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8002d94:	e7ff      	b.n	8002d96 <MotorSetSpeed+0x108>
 8002d96:	bf00      	nop
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <MotorSetPower>:

uint16_t MotorGetSpeed(Motor_t *motor) {
	return motor->speed;
}

void MotorSetPower(Motor_t *motor, int32_t power) {
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	6039      	str	r1, [r7, #0]
	//determine direction based on sign of power
	if(power < 0) {
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	da04      	bge.n	8002dbc <MotorSetPower+0x1a>
		MotorSetDirection(motor, DIR_REVERSE);
 8002db2:	2100      	movs	r1, #0
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7ff ff25 	bl	8002c04 <MotorSetDirection>
 8002dba:	e006      	b.n	8002dca <MotorSetPower+0x28>
	}
	else if(power > 0) {
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	dd03      	ble.n	8002dca <MotorSetPower+0x28>
		MotorSetDirection(motor, DIR_FORWARD);
 8002dc2:	2102      	movs	r1, #2
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff ff1d 	bl	8002c04 <MotorSetDirection>
	}

	MotorSetSpeed(motor, (uint16_t)Abs(power));
 8002dca:	6838      	ldr	r0, [r7, #0]
 8002dcc:	f000 f80a 	bl	8002de4 <Abs>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7ff ff59 	bl	8002c8e <MotorSetSpeed>
}
 8002ddc:	bf00      	nop
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <Abs>:

static int32_t Abs(int32_t x) {
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
	if(x < 0) {
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	da02      	bge.n	8002df8 <Abs+0x14>
		return x * -1;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	425b      	negs	r3, r3
 8002df6:	e000      	b.n	8002dfa <Abs+0x16>
	}
	else {
		return x;
 8002df8:	687b      	ldr	r3, [r7, #4]
	}
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <GPIOInit>:
 *      Author: Jennyston
 */

#include "peripherals/gpio.h"

void GPIOInit(GPIO_t *gpio, GPIO_TypeDef *port, uint16_t pin) {
 8002e06:	b480      	push	{r7}
 8002e08:	b085      	sub	sp, #20
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	4613      	mov	r3, r2
 8002e12:	80fb      	strh	r3, [r7, #6]
	gpio->port = port;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	601a      	str	r2, [r3, #0]
	gpio->pin = pin;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	88fa      	ldrh	r2, [r7, #6]
 8002e1e:	809a      	strh	r2, [r3, #4]
//	gpio->hcomp = NULL;
}
 8002e20:	bf00      	nop
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <GPIOGetState>:
//	gpio->port = NULL;
//	gpio->pin = 0;
//	gpio->hcomp = hcomp;
//}

GPIOState GPIOGetState(GPIO_t *gpio) {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
	if(gpio->port != NULL) {
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00e      	beq.n	8002e5a <GPIOGetState+0x2e>
		return HAL_GPIO_ReadPin(gpio->port, gpio->pin) == GPIO_PIN_SET ?
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	889b      	ldrh	r3, [r3, #4]
 8002e44:	4619      	mov	r1, r3
 8002e46:	4610      	mov	r0, r2
 8002e48:	f000 fb5a 	bl	8003500 <HAL_GPIO_ReadPin>
 8002e4c:	4603      	mov	r3, r0
				GPIO_HIGH : GPIO_LOW;
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	bf14      	ite	ne
 8002e52:	2301      	movne	r3, #1
 8002e54:	2300      	moveq	r3, #0
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	e000      	b.n	8002e5c <GPIOGetState+0x30>
//	else if (gpio->hcomp != NULL) {
//		return HAL_COMP_GetOutputLevel(gpio->hcomp) == COMP_OUTPUTLEVEL_HIGH ?
//				GPIO_HIGH : GPIO_LOW;
//	}
	else {
		return GPIO_LOW;
 8002e5a:	2301      	movs	r3, #1
	}
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <MotorLoggerInit>:
 */

#include <stdio.h>
#include <testing/motor_logger.h>

void MotorLoggerInit(MotorLogger_t *mLogger, MotorController_t *controller) {
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
	mLogger->controller = controller;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	601a      	str	r2, [r3, #0]
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
	  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002eb8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e84:	f7ff fd1a 	bl	80028bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e88:	480c      	ldr	r0, [pc, #48]	@ (8002ebc <LoopForever+0x6>)
  ldr r1, =_edata
 8002e8a:	490d      	ldr	r1, [pc, #52]	@ (8002ec0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ec4 <LoopForever+0xe>)
  movs r3, #0
 8002e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e90:	e002      	b.n	8002e98 <LoopCopyDataInit>

08002e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e96:	3304      	adds	r3, #4

08002e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e9c:	d3f9      	bcc.n	8002e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ea0:	4c0a      	ldr	r4, [pc, #40]	@ (8002ecc <LoopForever+0x16>)
  movs r3, #0
 8002ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ea4:	e001      	b.n	8002eaa <LoopFillZerobss>

08002ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ea8:	3204      	adds	r2, #4

08002eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eac:	d3fb      	bcc.n	8002ea6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002eae:	f00c f813 	bl	800eed8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002eb2:	f7fe fb85 	bl	80015c0 <main>

08002eb6 <LoopForever>:

LoopForever:
    b LoopForever
 8002eb6:	e7fe      	b.n	8002eb6 <LoopForever>
	  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002eb8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ec0:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 8002ec4:	08011360 	.word	0x08011360
  ldr r2, =_sbss
 8002ec8:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 8002ecc:	20001100 	.word	0x20001100

08002ed0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ed0:	e7fe      	b.n	8002ed0 <ADC1_2_IRQHandler>
	...

08002ed4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ed8:	4b08      	ldr	r3, [pc, #32]	@ (8002efc <HAL_Init+0x28>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a07      	ldr	r2, [pc, #28]	@ (8002efc <HAL_Init+0x28>)
 8002ede:	f043 0310 	orr.w	r3, r3, #16
 8002ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ee4:	2003      	movs	r0, #3
 8002ee6:	f000 f94f 	bl	8003188 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eea:	2000      	movs	r0, #0
 8002eec:	f000 f808 	bl	8002f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ef0:	f7ff f9d2 	bl	8002298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40022000 	.word	0x40022000

08002f00 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f08:	4b12      	ldr	r3, [pc, #72]	@ (8002f54 <HAL_InitTick+0x54>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	4b12      	ldr	r3, [pc, #72]	@ (8002f58 <HAL_InitTick+0x58>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	4619      	mov	r1, r3
 8002f12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 f967 	bl	80031f2 <HAL_SYSTICK_Config>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e00e      	b.n	8002f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b0f      	cmp	r3, #15
 8002f32:	d80a      	bhi.n	8002f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f34:	2200      	movs	r2, #0
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	f04f 30ff 	mov.w	r0, #4294967295
 8002f3c:	f000 f92f 	bl	800319e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f40:	4a06      	ldr	r2, [pc, #24]	@ (8002f5c <HAL_InitTick+0x5c>)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	e000      	b.n	8002f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20000008 	.word	0x20000008
 8002f58:	20000010 	.word	0x20000010
 8002f5c:	2000000c 	.word	0x2000000c

08002f60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f64:	4b06      	ldr	r3, [pc, #24]	@ (8002f80 <HAL_IncTick+0x20>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4b06      	ldr	r3, [pc, #24]	@ (8002f84 <HAL_IncTick+0x24>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4413      	add	r3, r2
 8002f70:	4a04      	ldr	r2, [pc, #16]	@ (8002f84 <HAL_IncTick+0x24>)
 8002f72:	6013      	str	r3, [r2, #0]
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	20000010 	.word	0x20000010
 8002f84:	200007ec 	.word	0x200007ec

08002f88 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  return uwTick;  
 8002f8c:	4b03      	ldr	r3, [pc, #12]	@ (8002f9c <HAL_GetTick+0x14>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	200007ec 	.word	0x200007ec

08002fa0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fa8:	f7ff ffee 	bl	8002f88 <HAL_GetTick>
 8002fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb8:	d005      	beq.n	8002fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fba:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe4 <HAL_Delay+0x44>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002fc6:	bf00      	nop
 8002fc8:	f7ff ffde 	bl	8002f88 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d8f7      	bhi.n	8002fc8 <HAL_Delay+0x28>
  {
  }
}
 8002fd8:	bf00      	nop
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000010 	.word	0x20000010

08002fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800302c <__NVIC_SetPriorityGrouping+0x44>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003004:	4013      	ands	r3, r2
 8003006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003010:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800301a:	4a04      	ldr	r2, [pc, #16]	@ (800302c <__NVIC_SetPriorityGrouping+0x44>)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	60d3      	str	r3, [r2, #12]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003034:	4b04      	ldr	r3, [pc, #16]	@ (8003048 <__NVIC_GetPriorityGrouping+0x18>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	0a1b      	lsrs	r3, r3, #8
 800303a:	f003 0307 	and.w	r3, r3, #7
}
 800303e:	4618      	mov	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	2b00      	cmp	r3, #0
 800305c:	db0b      	blt.n	8003076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	f003 021f 	and.w	r2, r3, #31
 8003064:	4907      	ldr	r1, [pc, #28]	@ (8003084 <__NVIC_EnableIRQ+0x38>)
 8003066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2001      	movs	r0, #1
 800306e:	fa00 f202 	lsl.w	r2, r0, r2
 8003072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	e000e100 	.word	0xe000e100

08003088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	6039      	str	r1, [r7, #0]
 8003092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003098:	2b00      	cmp	r3, #0
 800309a:	db0a      	blt.n	80030b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	490c      	ldr	r1, [pc, #48]	@ (80030d4 <__NVIC_SetPriority+0x4c>)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	0112      	lsls	r2, r2, #4
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	440b      	add	r3, r1
 80030ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b0:	e00a      	b.n	80030c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4908      	ldr	r1, [pc, #32]	@ (80030d8 <__NVIC_SetPriority+0x50>)
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	3b04      	subs	r3, #4
 80030c0:	0112      	lsls	r2, r2, #4
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	440b      	add	r3, r1
 80030c6:	761a      	strb	r2, [r3, #24]
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000e100 	.word	0xe000e100
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030dc:	b480      	push	{r7}
 80030de:	b089      	sub	sp, #36	@ 0x24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f1c3 0307 	rsb	r3, r3, #7
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	bf28      	it	cs
 80030fa:	2304      	movcs	r3, #4
 80030fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3304      	adds	r3, #4
 8003102:	2b06      	cmp	r3, #6
 8003104:	d902      	bls.n	800310c <NVIC_EncodePriority+0x30>
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3b03      	subs	r3, #3
 800310a:	e000      	b.n	800310e <NVIC_EncodePriority+0x32>
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003110:	f04f 32ff 	mov.w	r2, #4294967295
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43da      	mvns	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	401a      	ands	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003124:	f04f 31ff 	mov.w	r1, #4294967295
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	fa01 f303 	lsl.w	r3, r1, r3
 800312e:	43d9      	mvns	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003134:	4313      	orrs	r3, r2
         );
}
 8003136:	4618      	mov	r0, r3
 8003138:	3724      	adds	r7, #36	@ 0x24
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3b01      	subs	r3, #1
 8003150:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003154:	d301      	bcc.n	800315a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003156:	2301      	movs	r3, #1
 8003158:	e00f      	b.n	800317a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800315a:	4a0a      	ldr	r2, [pc, #40]	@ (8003184 <SysTick_Config+0x40>)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3b01      	subs	r3, #1
 8003160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003162:	210f      	movs	r1, #15
 8003164:	f04f 30ff 	mov.w	r0, #4294967295
 8003168:	f7ff ff8e 	bl	8003088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800316c:	4b05      	ldr	r3, [pc, #20]	@ (8003184 <SysTick_Config+0x40>)
 800316e:	2200      	movs	r2, #0
 8003170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003172:	4b04      	ldr	r3, [pc, #16]	@ (8003184 <SysTick_Config+0x40>)
 8003174:	2207      	movs	r2, #7
 8003176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	e000e010 	.word	0xe000e010

08003188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff ff29 	bl	8002fe8 <__NVIC_SetPriorityGrouping>
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b086      	sub	sp, #24
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	4603      	mov	r3, r0
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
 80031aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031b0:	f7ff ff3e 	bl	8003030 <__NVIC_GetPriorityGrouping>
 80031b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	6978      	ldr	r0, [r7, #20]
 80031bc:	f7ff ff8e 	bl	80030dc <NVIC_EncodePriority>
 80031c0:	4602      	mov	r2, r0
 80031c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ff5d 	bl	8003088 <__NVIC_SetPriority>
}
 80031ce:	bf00      	nop
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	4603      	mov	r3, r0
 80031de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff ff31 	bl	800304c <__NVIC_EnableIRQ>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff ffa2 	bl	8003144 <SysTick_Config>
 8003200:	4603      	mov	r3, r0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800321a:	e154      	b.n	80034c6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	2101      	movs	r1, #1
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	fa01 f303 	lsl.w	r3, r1, r3
 8003228:	4013      	ands	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 8146 	beq.w	80034c0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 0303 	and.w	r3, r3, #3
 800323c:	2b01      	cmp	r3, #1
 800323e:	d005      	beq.n	800324c <HAL_GPIO_Init+0x40>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 0303 	and.w	r3, r3, #3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d130      	bne.n	80032ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	2203      	movs	r2, #3
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43db      	mvns	r3, r3
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4013      	ands	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003282:	2201      	movs	r2, #1
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4013      	ands	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	091b      	lsrs	r3, r3, #4
 8003298:	f003 0201 	and.w	r2, r3, #1
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	2b03      	cmp	r3, #3
 80032b8:	d017      	beq.n	80032ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	2203      	movs	r2, #3
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43db      	mvns	r3, r3
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	4013      	ands	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d123      	bne.n	800333e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	08da      	lsrs	r2, r3, #3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3208      	adds	r2, #8
 80032fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003302:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	220f      	movs	r2, #15
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	4013      	ands	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	691a      	ldr	r2, [r3, #16]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	08da      	lsrs	r2, r3, #3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3208      	adds	r2, #8
 8003338:	6939      	ldr	r1, [r7, #16]
 800333a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	2203      	movs	r2, #3
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43db      	mvns	r3, r3
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4013      	ands	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 0203 	and.w	r2, r3, #3
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4313      	orrs	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 80a0 	beq.w	80034c0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003380:	4b58      	ldr	r3, [pc, #352]	@ (80034e4 <HAL_GPIO_Init+0x2d8>)
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	4a57      	ldr	r2, [pc, #348]	@ (80034e4 <HAL_GPIO_Init+0x2d8>)
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	6193      	str	r3, [r2, #24]
 800338c:	4b55      	ldr	r3, [pc, #340]	@ (80034e4 <HAL_GPIO_Init+0x2d8>)
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003398:	4a53      	ldr	r2, [pc, #332]	@ (80034e8 <HAL_GPIO_Init+0x2dc>)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	089b      	lsrs	r3, r3, #2
 800339e:	3302      	adds	r3, #2
 80033a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	220f      	movs	r2, #15
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	43db      	mvns	r3, r3
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4013      	ands	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80033c2:	d019      	beq.n	80033f8 <HAL_GPIO_Init+0x1ec>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a49      	ldr	r2, [pc, #292]	@ (80034ec <HAL_GPIO_Init+0x2e0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d013      	beq.n	80033f4 <HAL_GPIO_Init+0x1e8>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a48      	ldr	r2, [pc, #288]	@ (80034f0 <HAL_GPIO_Init+0x2e4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d00d      	beq.n	80033f0 <HAL_GPIO_Init+0x1e4>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a47      	ldr	r2, [pc, #284]	@ (80034f4 <HAL_GPIO_Init+0x2e8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d007      	beq.n	80033ec <HAL_GPIO_Init+0x1e0>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a46      	ldr	r2, [pc, #280]	@ (80034f8 <HAL_GPIO_Init+0x2ec>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d101      	bne.n	80033e8 <HAL_GPIO_Init+0x1dc>
 80033e4:	2304      	movs	r3, #4
 80033e6:	e008      	b.n	80033fa <HAL_GPIO_Init+0x1ee>
 80033e8:	2305      	movs	r3, #5
 80033ea:	e006      	b.n	80033fa <HAL_GPIO_Init+0x1ee>
 80033ec:	2303      	movs	r3, #3
 80033ee:	e004      	b.n	80033fa <HAL_GPIO_Init+0x1ee>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e002      	b.n	80033fa <HAL_GPIO_Init+0x1ee>
 80033f4:	2301      	movs	r3, #1
 80033f6:	e000      	b.n	80033fa <HAL_GPIO_Init+0x1ee>
 80033f8:	2300      	movs	r3, #0
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	f002 0203 	and.w	r2, r2, #3
 8003400:	0092      	lsls	r2, r2, #2
 8003402:	4093      	lsls	r3, r2
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800340a:	4937      	ldr	r1, [pc, #220]	@ (80034e8 <HAL_GPIO_Init+0x2dc>)
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	089b      	lsrs	r3, r3, #2
 8003410:	3302      	adds	r3, #2
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003418:	4b38      	ldr	r3, [pc, #224]	@ (80034fc <HAL_GPIO_Init+0x2f0>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	43db      	mvns	r3, r3
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4013      	ands	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800343c:	4a2f      	ldr	r2, [pc, #188]	@ (80034fc <HAL_GPIO_Init+0x2f0>)
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003442:	4b2e      	ldr	r3, [pc, #184]	@ (80034fc <HAL_GPIO_Init+0x2f0>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	43db      	mvns	r3, r3
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4013      	ands	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4313      	orrs	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003466:	4a25      	ldr	r2, [pc, #148]	@ (80034fc <HAL_GPIO_Init+0x2f0>)
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800346c:	4b23      	ldr	r3, [pc, #140]	@ (80034fc <HAL_GPIO_Init+0x2f0>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	43db      	mvns	r3, r3
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4013      	ands	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4313      	orrs	r3, r2
 800348e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003490:	4a1a      	ldr	r2, [pc, #104]	@ (80034fc <HAL_GPIO_Init+0x2f0>)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003496:	4b19      	ldr	r3, [pc, #100]	@ (80034fc <HAL_GPIO_Init+0x2f0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	43db      	mvns	r3, r3
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4013      	ands	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80034ba:	4a10      	ldr	r2, [pc, #64]	@ (80034fc <HAL_GPIO_Init+0x2f0>)
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	3301      	adds	r3, #1
 80034c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f47f aea3 	bne.w	800321c <HAL_GPIO_Init+0x10>
  }
}
 80034d6:	bf00      	nop
 80034d8:	bf00      	nop
 80034da:	371c      	adds	r7, #28
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40010000 	.word	0x40010000
 80034ec:	48000400 	.word	0x48000400
 80034f0:	48000800 	.word	0x48000800
 80034f4:	48000c00 	.word	0x48000c00
 80034f8:	48001000 	.word	0x48001000
 80034fc:	40010400 	.word	0x40010400

08003500 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691a      	ldr	r2, [r3, #16]
 8003510:	887b      	ldrh	r3, [r7, #2]
 8003512:	4013      	ands	r3, r2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
 800351c:	e001      	b.n	8003522 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800351e:	2300      	movs	r3, #0
 8003520:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003522:	7bfb      	ldrb	r3, [r7, #15]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	807b      	strh	r3, [r7, #2]
 800353c:	4613      	mov	r3, r2
 800353e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003540:	787b      	ldrb	r3, [r7, #1]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003546:	887a      	ldrh	r2, [r7, #2]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800354c:	e002      	b.n	8003554 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800354e:	887a      	ldrh	r2, [r7, #2]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e08d      	b.n	800368e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d106      	bne.n	800358c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7fe feaa 	bl	80022e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2224      	movs	r2, #36	@ 0x24
 8003590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0201 	bic.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d107      	bne.n	80035da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035d6:	609a      	str	r2, [r3, #8]
 80035d8:	e006      	b.n	80035e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80035e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d108      	bne.n	8003602 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035fe:	605a      	str	r2, [r3, #4]
 8003600:	e007      	b.n	8003612 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003610:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003620:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003624:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003634:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691a      	ldr	r2, [r3, #16]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69d9      	ldr	r1, [r3, #28]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a1a      	ldr	r2, [r3, #32]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2220      	movs	r2, #32
 800367a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af02      	add	r7, sp, #8
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	607a      	str	r2, [r7, #4]
 80036a2:	461a      	mov	r2, r3
 80036a4:	460b      	mov	r3, r1
 80036a6:	817b      	strh	r3, [r7, #10]
 80036a8:	4613      	mov	r3, r2
 80036aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	f040 80fd 	bne.w	80038b4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <HAL_I2C_Master_Transmit+0x30>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e0f6      	b.n	80038b6 <HAL_I2C_Master_Transmit+0x21e>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036d0:	f7ff fc5a 	bl	8002f88 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	2319      	movs	r3, #25
 80036dc:	2201      	movs	r2, #1
 80036de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 fa0a 	bl	8003afc <I2C_WaitOnFlagUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e0e1      	b.n	80038b6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2221      	movs	r2, #33	@ 0x21
 80036f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2210      	movs	r2, #16
 80036fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	893a      	ldrh	r2, [r7, #8]
 8003712:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800371e:	b29b      	uxth	r3, r3
 8003720:	2bff      	cmp	r3, #255	@ 0xff
 8003722:	d906      	bls.n	8003732 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	22ff      	movs	r2, #255	@ 0xff
 8003728:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800372a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	e007      	b.n	8003742 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800373c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003740:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003746:	2b00      	cmp	r3, #0
 8003748:	d024      	beq.n	8003794 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374e:	781a      	ldrb	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377e:	b2db      	uxtb	r3, r3
 8003780:	3301      	adds	r3, #1
 8003782:	b2da      	uxtb	r2, r3
 8003784:	8979      	ldrh	r1, [r7, #10]
 8003786:	4b4e      	ldr	r3, [pc, #312]	@ (80038c0 <HAL_I2C_Master_Transmit+0x228>)
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 fc05 	bl	8003f9c <I2C_TransferConfig>
 8003792:	e066      	b.n	8003862 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003798:	b2da      	uxtb	r2, r3
 800379a:	8979      	ldrh	r1, [r7, #10]
 800379c:	4b48      	ldr	r3, [pc, #288]	@ (80038c0 <HAL_I2C_Master_Transmit+0x228>)
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 fbfa 	bl	8003f9c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80037a8:	e05b      	b.n	8003862 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	6a39      	ldr	r1, [r7, #32]
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 f9fd 	bl	8003bae <I2C_WaitOnTXISFlagUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e07b      	b.n	80038b6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	781a      	ldrb	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d034      	beq.n	8003862 <HAL_I2C_Master_Transmit+0x1ca>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d130      	bne.n	8003862 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	2200      	movs	r2, #0
 8003808:	2180      	movs	r1, #128	@ 0x80
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f976 	bl	8003afc <I2C_WaitOnFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e04d      	b.n	80038b6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800381e:	b29b      	uxth	r3, r3
 8003820:	2bff      	cmp	r3, #255	@ 0xff
 8003822:	d90e      	bls.n	8003842 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	22ff      	movs	r2, #255	@ 0xff
 8003828:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800382e:	b2da      	uxtb	r2, r3
 8003830:	8979      	ldrh	r1, [r7, #10]
 8003832:	2300      	movs	r3, #0
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 fbae 	bl	8003f9c <I2C_TransferConfig>
 8003840:	e00f      	b.n	8003862 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003850:	b2da      	uxtb	r2, r3
 8003852:	8979      	ldrh	r1, [r7, #10]
 8003854:	2300      	movs	r3, #0
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 fb9d 	bl	8003f9c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d19e      	bne.n	80037aa <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	6a39      	ldr	r1, [r7, #32]
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 f9e3 	bl	8003c3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e01a      	b.n	80038b6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2220      	movs	r2, #32
 8003886:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6859      	ldr	r1, [r3, #4]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	4b0c      	ldr	r3, [pc, #48]	@ (80038c4 <HAL_I2C_Master_Transmit+0x22c>)
 8003894:	400b      	ands	r3, r1
 8003896:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2220      	movs	r2, #32
 800389c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	e000      	b.n	80038b6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80038b4:	2302      	movs	r3, #2
  }
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3718      	adds	r7, #24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	80002000 	.word	0x80002000
 80038c4:	fe00e800 	.word	0xfe00e800

080038c8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	607a      	str	r2, [r7, #4]
 80038d2:	461a      	mov	r2, r3
 80038d4:	460b      	mov	r3, r1
 80038d6:	817b      	strh	r3, [r7, #10]
 80038d8:	4613      	mov	r3, r2
 80038da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	f040 80db 	bne.w	8003aa0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <HAL_I2C_Master_Receive+0x30>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e0d4      	b.n	8003aa2 <HAL_I2C_Master_Receive+0x1da>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003900:	f7ff fb42 	bl	8002f88 <HAL_GetTick>
 8003904:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	2319      	movs	r3, #25
 800390c:	2201      	movs	r2, #1
 800390e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f8f2 	bl	8003afc <I2C_WaitOnFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e0bf      	b.n	8003aa2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2222      	movs	r2, #34	@ 0x22
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2210      	movs	r2, #16
 800392e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	893a      	ldrh	r2, [r7, #8]
 8003942:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800394e:	b29b      	uxth	r3, r3
 8003950:	2bff      	cmp	r3, #255	@ 0xff
 8003952:	d90e      	bls.n	8003972 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2201      	movs	r2, #1
 8003958:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800395e:	b2da      	uxtb	r2, r3
 8003960:	8979      	ldrh	r1, [r7, #10]
 8003962:	4b52      	ldr	r3, [pc, #328]	@ (8003aac <HAL_I2C_Master_Receive+0x1e4>)
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 fb16 	bl	8003f9c <I2C_TransferConfig>
 8003970:	e06d      	b.n	8003a4e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003980:	b2da      	uxtb	r2, r3
 8003982:	8979      	ldrh	r1, [r7, #10]
 8003984:	4b49      	ldr	r3, [pc, #292]	@ (8003aac <HAL_I2C_Master_Receive+0x1e4>)
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 fb05 	bl	8003f9c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003992:	e05c      	b.n	8003a4e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	6a39      	ldr	r1, [r7, #32]
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f993 	bl	8003cc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e07c      	b.n	8003aa2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	3b01      	subs	r3, #1
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039de:	b29b      	uxth	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d034      	beq.n	8003a4e <HAL_I2C_Master_Receive+0x186>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d130      	bne.n	8003a4e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	2200      	movs	r2, #0
 80039f4:	2180      	movs	r1, #128	@ 0x80
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 f880 	bl	8003afc <I2C_WaitOnFlagUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e04d      	b.n	8003aa2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2bff      	cmp	r3, #255	@ 0xff
 8003a0e:	d90e      	bls.n	8003a2e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	22ff      	movs	r2, #255	@ 0xff
 8003a14:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	8979      	ldrh	r1, [r7, #10]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 fab8 	bl	8003f9c <I2C_TransferConfig>
 8003a2c:	e00f      	b.n	8003a4e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	8979      	ldrh	r1, [r7, #10]
 8003a40:	2300      	movs	r3, #0
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 faa7 	bl	8003f9c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d19d      	bne.n	8003994 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	6a39      	ldr	r1, [r7, #32]
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 f8ed 	bl	8003c3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e01a      	b.n	8003aa2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2220      	movs	r2, #32
 8003a72:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6859      	ldr	r1, [r3, #4]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8003ab0 <HAL_I2C_Master_Receive+0x1e8>)
 8003a80:	400b      	ands	r3, r1
 8003a82:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	e000      	b.n	8003aa2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003aa0:	2302      	movs	r3, #2
  }
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	80002400 	.word	0x80002400
 8003ab0:	fe00e800 	.word	0xfe00e800

08003ab4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d103      	bne.n	8003ad2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d007      	beq.n	8003af0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699a      	ldr	r2, [r3, #24]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	619a      	str	r2, [r3, #24]
  }
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	603b      	str	r3, [r7, #0]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b0c:	e03b      	b.n	8003b86 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	6839      	ldr	r1, [r7, #0]
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 f962 	bl	8003ddc <I2C_IsErrorOccurred>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e041      	b.n	8003ba6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b28:	d02d      	beq.n	8003b86 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b2a:	f7ff fa2d 	bl	8002f88 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d302      	bcc.n	8003b40 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d122      	bne.n	8003b86 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	bf0c      	ite	eq
 8003b50:	2301      	moveq	r3, #1
 8003b52:	2300      	movne	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	461a      	mov	r2, r3
 8003b58:	79fb      	ldrb	r3, [r7, #7]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d113      	bne.n	8003b86 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b62:	f043 0220 	orr.w	r2, r3, #32
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e00f      	b.n	8003ba6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	699a      	ldr	r2, [r3, #24]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	bf0c      	ite	eq
 8003b96:	2301      	moveq	r3, #1
 8003b98:	2300      	movne	r3, #0
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d0b4      	beq.n	8003b0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b084      	sub	sp, #16
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bba:	e033      	b.n	8003c24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	68b9      	ldr	r1, [r7, #8]
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 f90b 	bl	8003ddc <I2C_IsErrorOccurred>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e031      	b.n	8003c34 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd6:	d025      	beq.n	8003c24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd8:	f7ff f9d6 	bl	8002f88 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d302      	bcc.n	8003bee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d11a      	bne.n	8003c24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d013      	beq.n	8003c24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c00:	f043 0220 	orr.w	r2, r3, #32
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e007      	b.n	8003c34 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d1c4      	bne.n	8003bbc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c48:	e02f      	b.n	8003caa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	68b9      	ldr	r1, [r7, #8]
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 f8c4 	bl	8003ddc <I2C_IsErrorOccurred>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e02d      	b.n	8003cba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c5e:	f7ff f993 	bl	8002f88 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d302      	bcc.n	8003c74 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d11a      	bne.n	8003caa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	2b20      	cmp	r3, #32
 8003c80:	d013      	beq.n	8003caa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c86:	f043 0220 	orr.w	r2, r3, #32
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e007      	b.n	8003cba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	f003 0320 	and.w	r3, r3, #32
 8003cb4:	2b20      	cmp	r3, #32
 8003cb6:	d1c8      	bne.n	8003c4a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003cd4:	e071      	b.n	8003dba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f87e 	bl	8003ddc <I2C_IsErrorOccurred>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	d13b      	bne.n	8003d70 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003cf8:	7dfb      	ldrb	r3, [r7, #23]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d138      	bne.n	8003d70 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d105      	bne.n	8003d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	f003 0310 	and.w	r3, r3, #16
 8003d22:	2b10      	cmp	r3, #16
 8003d24:	d121      	bne.n	8003d6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2210      	movs	r2, #16
 8003d2c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2204      	movs	r2, #4
 8003d32:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6859      	ldr	r1, [r3, #4]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	4b24      	ldr	r3, [pc, #144]	@ (8003dd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003d48:	400b      	ands	r3, r1
 8003d4a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	75fb      	strb	r3, [r7, #23]
 8003d68:	e002      	b.n	8003d70 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003d70:	f7ff f90a 	bl	8002f88 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d302      	bcc.n	8003d86 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d119      	bne.n	8003dba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003d86:	7dfb      	ldrb	r3, [r7, #23]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d116      	bne.n	8003dba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	f003 0304 	and.w	r3, r3, #4
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d00f      	beq.n	8003dba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9e:	f043 0220 	orr.w	r2, r3, #32
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d002      	beq.n	8003dce <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003dc8:	7dfb      	ldrb	r3, [r7, #23]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d083      	beq.n	8003cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	fe00e800 	.word	0xfe00e800

08003ddc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08a      	sub	sp, #40	@ 0x28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	f003 0310 	and.w	r3, r3, #16
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d068      	beq.n	8003eda <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2210      	movs	r2, #16
 8003e0e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e10:	e049      	b.n	8003ea6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e18:	d045      	beq.n	8003ea6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e1a:	f7ff f8b5 	bl	8002f88 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d302      	bcc.n	8003e30 <I2C_IsErrorOccurred+0x54>
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d13a      	bne.n	8003ea6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e3a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e42:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e52:	d121      	bne.n	8003e98 <I2C_IsErrorOccurred+0xbc>
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e5a:	d01d      	beq.n	8003e98 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003e5c:	7cfb      	ldrb	r3, [r7, #19]
 8003e5e:	2b20      	cmp	r3, #32
 8003e60:	d01a      	beq.n	8003e98 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e70:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003e72:	f7ff f889 	bl	8002f88 <HAL_GetTick>
 8003e76:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e78:	e00e      	b.n	8003e98 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003e7a:	f7ff f885 	bl	8002f88 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b19      	cmp	r3, #25
 8003e86:	d907      	bls.n	8003e98 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	f043 0320 	orr.w	r3, r3, #32
 8003e8e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003e96:	e006      	b.n	8003ea6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b20      	cmp	r3, #32
 8003ea4:	d1e9      	bne.n	8003e7a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d003      	beq.n	8003ebc <I2C_IsErrorOccurred+0xe0>
 8003eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0aa      	beq.n	8003e12 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d103      	bne.n	8003ecc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	f043 0304 	orr.w	r3, r3, #4
 8003ed2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00b      	beq.n	8003f04 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003efc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00b      	beq.n	8003f26 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	f043 0308 	orr.w	r3, r3, #8
 8003f14:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00b      	beq.n	8003f48 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	f043 0302 	orr.w	r3, r3, #2
 8003f36:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003f48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d01c      	beq.n	8003f8a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f7ff fdaf 	bl	8003ab4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6859      	ldr	r1, [r3, #4]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	4b0d      	ldr	r3, [pc, #52]	@ (8003f98 <I2C_IsErrorOccurred+0x1bc>)
 8003f62:	400b      	ands	r3, r1
 8003f64:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3728      	adds	r7, #40	@ 0x28
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	fe00e800 	.word	0xfe00e800

08003f9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	607b      	str	r3, [r7, #4]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	817b      	strh	r3, [r7, #10]
 8003faa:	4613      	mov	r3, r2
 8003fac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fae:	897b      	ldrh	r3, [r7, #10]
 8003fb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003fb4:	7a7b      	ldrb	r3, [r7, #9]
 8003fb6:	041b      	lsls	r3, r3, #16
 8003fb8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fbc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003fca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	0d5b      	lsrs	r3, r3, #21
 8003fd6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003fda:	4b08      	ldr	r3, [pc, #32]	@ (8003ffc <I2C_TransferConfig+0x60>)
 8003fdc:	430b      	orrs	r3, r1
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	ea02 0103 	and.w	r1, r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003fee:	bf00      	nop
 8003ff0:	371c      	adds	r7, #28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	03ff63ff 	.word	0x03ff63ff

08004000 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b20      	cmp	r3, #32
 8004014:	d138      	bne.n	8004088 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004020:	2302      	movs	r3, #2
 8004022:	e032      	b.n	800408a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2224      	movs	r2, #36	@ 0x24
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0201 	bic.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004052:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6819      	ldr	r1, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0201 	orr.w	r2, r2, #1
 8004072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004084:	2300      	movs	r3, #0
 8004086:	e000      	b.n	800408a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004088:	2302      	movs	r3, #2
  }
}
 800408a:	4618      	mov	r0, r3
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004096:	b480      	push	{r7}
 8004098:	b085      	sub	sp, #20
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b20      	cmp	r3, #32
 80040aa:	d139      	bne.n	8004120 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040b6:	2302      	movs	r3, #2
 80040b8:	e033      	b.n	8004122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2224      	movs	r2, #36	@ 0x24
 80040c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0201 	bic.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80040e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	021b      	lsls	r3, r3, #8
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	e000      	b.n	8004122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004120:	2302      	movs	r3, #2
  }
}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b084      	sub	sp, #16
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e0b9      	b.n	80042b4 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	d106      	bne.n	800415a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f009 f825 	bl	800d1a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2203      	movs	r2, #3
 800415e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f005 f868 	bl	800923c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800416c:	2300      	movs	r3, #0
 800416e:	73fb      	strb	r3, [r7, #15]
 8004170:	e03e      	b.n	80041f0 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004172:	7bfa      	ldrb	r2, [r7, #15]
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	4613      	mov	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	440b      	add	r3, r1
 8004180:	3311      	adds	r3, #17
 8004182:	2201      	movs	r2, #1
 8004184:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004186:	7bfa      	ldrb	r2, [r7, #15]
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	440b      	add	r3, r1
 8004194:	3310      	adds	r3, #16
 8004196:	7bfa      	ldrb	r2, [r7, #15]
 8004198:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800419a:	7bfa      	ldrb	r2, [r7, #15]
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	4613      	mov	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	440b      	add	r3, r1
 80041a8:	3313      	adds	r3, #19
 80041aa:	2200      	movs	r2, #0
 80041ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041ae:	7bfa      	ldrb	r2, [r7, #15]
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	440b      	add	r3, r1
 80041bc:	3320      	adds	r3, #32
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041c2:	7bfa      	ldrb	r2, [r7, #15]
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	440b      	add	r3, r1
 80041d0:	3324      	adds	r3, #36	@ 0x24
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	1c5a      	adds	r2, r3, #1
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	440b      	add	r3, r1
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	3301      	adds	r3, #1
 80041ee:	73fb      	strb	r3, [r7, #15]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	791b      	ldrb	r3, [r3, #4]
 80041f4:	7bfa      	ldrb	r2, [r7, #15]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d3bb      	bcc.n	8004172 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041fa:	2300      	movs	r3, #0
 80041fc:	73fb      	strb	r3, [r7, #15]
 80041fe:	e044      	b.n	800428a <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004200:	7bfa      	ldrb	r2, [r7, #15]
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	4613      	mov	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	440b      	add	r3, r1
 800420e:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004212:	2200      	movs	r2, #0
 8004214:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004216:	7bfa      	ldrb	r2, [r7, #15]
 8004218:	6879      	ldr	r1, [r7, #4]
 800421a:	4613      	mov	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	440b      	add	r3, r1
 8004224:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004228:	7bfa      	ldrb	r2, [r7, #15]
 800422a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800422c:	7bfa      	ldrb	r2, [r7, #15]
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	440b      	add	r3, r1
 800423a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800423e:	2200      	movs	r2, #0
 8004240:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004242:	7bfa      	ldrb	r2, [r7, #15]
 8004244:	6879      	ldr	r1, [r7, #4]
 8004246:	4613      	mov	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	440b      	add	r3, r1
 8004250:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004258:	7bfa      	ldrb	r2, [r7, #15]
 800425a:	6879      	ldr	r1, [r7, #4]
 800425c:	4613      	mov	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	440b      	add	r3, r1
 8004266:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800426e:	7bfa      	ldrb	r2, [r7, #15]
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	4613      	mov	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4413      	add	r3, r2
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	440b      	add	r3, r1
 800427c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004284:	7bfb      	ldrb	r3, [r7, #15]
 8004286:	3301      	adds	r3, #1
 8004288:	73fb      	strb	r3, [r7, #15]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	791b      	ldrb	r3, [r3, #4]
 800428e:	7bfa      	ldrb	r2, [r7, #15]
 8004290:	429a      	cmp	r2, r3
 8004292:	d3b5      	bcc.n	8004200 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6818      	ldr	r0, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3304      	adds	r3, #4
 800429c:	e893 0006 	ldmia.w	r3, {r1, r2}
 80042a0:	f004 ffe7 	bl	8009272 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d101      	bne.n	80042d2 <HAL_PCD_Start+0x16>
 80042ce:	2302      	movs	r3, #2
 80042d0:	e016      	b.n	8004300 <HAL_PCD_Start+0x44>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f004 ff95 	bl	800920e <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80042e4:	2101      	movs	r1, #1
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f009 f9dc 	bl	800d6a4 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f007 fa53 	bl	800b79c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f007 fa4c 	bl	800b7b2 <USB_ReadInterrupts>
 800431a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 fa99 	bl	800485e <PCD_EP_ISR_Handler>

    return;
 800432c:	e0bd      	b.n	80044aa <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004334:	2b00      	cmp	r3, #0
 8004336:	d013      	beq.n	8004360 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004340:	b29a      	uxth	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800434a:	b292      	uxth	r2, r2
 800434c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f008 ffc8 	bl	800d2e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004356:	2100      	movs	r1, #0
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f8a9 	bl	80044b0 <HAL_PCD_SetAddress>

    return;
 800435e:	e0a4      	b.n	80044aa <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00c      	beq.n	8004384 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004372:	b29a      	uxth	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800437c:	b292      	uxth	r2, r2
 800437e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004382:	e092      	b.n	80044aa <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00c      	beq.n	80043a8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004396:	b29a      	uxth	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043a0:	b292      	uxth	r2, r2
 80043a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80043a6:	e080      	b.n	80044aa <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d027      	beq.n	8004402 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0204 	bic.w	r2, r2, #4
 80043c4:	b292      	uxth	r2, r2
 80043c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0208 	bic.w	r2, r2, #8
 80043dc:	b292      	uxth	r2, r2
 80043de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f008 ffb8 	bl	800d358 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80043fa:	b292      	uxth	r2, r2
 80043fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004400:	e053      	b.n	80044aa <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004408:	2b00      	cmp	r3, #0
 800440a:	d027      	beq.n	800445c <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004414:	b29a      	uxth	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0208 	orr.w	r2, r2, #8
 800441e:	b292      	uxth	r2, r2
 8004420:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800442c:	b29a      	uxth	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004436:	b292      	uxth	r2, r2
 8004438:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004444:	b29a      	uxth	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0204 	orr.w	r2, r2, #4
 800444e:	b292      	uxth	r2, r2
 8004450:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f008 ff65 	bl	800d324 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800445a:	e026      	b.n	80044aa <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00f      	beq.n	8004486 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800446e:	b29a      	uxth	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004478:	b292      	uxth	r2, r2
 800447a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f008 ff23 	bl	800d2ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004484:	e011      	b.n	80044aa <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00c      	beq.n	80044aa <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004498:	b29a      	uxth	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044a2:	b292      	uxth	r2, r2
 80044a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80044a8:	bf00      	nop
  }
}
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	460b      	mov	r3, r1
 80044ba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <HAL_PCD_SetAddress+0x1a>
 80044c6:	2302      	movs	r3, #2
 80044c8:	e012      	b.n	80044f0 <HAL_PCD_SetAddress+0x40>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	78fa      	ldrb	r2, [r7, #3]
 80044d6:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	78fa      	ldrb	r2, [r7, #3]
 80044de:	4611      	mov	r1, r2
 80044e0:	4618      	mov	r0, r3
 80044e2:	f007 f947 	bl	800b774 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	4608      	mov	r0, r1
 8004502:	4611      	mov	r1, r2
 8004504:	461a      	mov	r2, r3
 8004506:	4603      	mov	r3, r0
 8004508:	70fb      	strb	r3, [r7, #3]
 800450a:	460b      	mov	r3, r1
 800450c:	803b      	strh	r3, [r7, #0]
 800450e:	4613      	mov	r3, r2
 8004510:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004516:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800451a:	2b00      	cmp	r3, #0
 800451c:	da0e      	bge.n	800453c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	f003 0207 	and.w	r2, r3, #7
 8004524:	4613      	mov	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	3310      	adds	r3, #16
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	4413      	add	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	705a      	strb	r2, [r3, #1]
 800453a:	e00e      	b.n	800455a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800453c:	78fb      	ldrb	r3, [r7, #3]
 800453e:	f003 0207 	and.w	r2, r3, #7
 8004542:	4613      	mov	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	4413      	add	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800455a:	78fb      	ldrb	r3, [r7, #3]
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	b2da      	uxtb	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004566:	883a      	ldrh	r2, [r7, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	78ba      	ldrb	r2, [r7, #2]
 8004570:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004572:	78bb      	ldrb	r3, [r7, #2]
 8004574:	2b02      	cmp	r3, #2
 8004576:	d102      	bne.n	800457e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004584:	2b01      	cmp	r3, #1
 8004586:	d101      	bne.n	800458c <HAL_PCD_EP_Open+0x94>
 8004588:	2302      	movs	r3, #2
 800458a:	e00e      	b.n	80045aa <HAL_PCD_EP_Open+0xb2>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68f9      	ldr	r1, [r7, #12]
 800459a:	4618      	mov	r0, r3
 800459c:	f004 fe88 	bl	80092b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80045a8:	7afb      	ldrb	r3, [r7, #11]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	460b      	mov	r3, r1
 80045bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	da0e      	bge.n	80045e4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045c6:	78fb      	ldrb	r3, [r7, #3]
 80045c8:	f003 0207 	and.w	r2, r3, #7
 80045cc:	4613      	mov	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	3310      	adds	r3, #16
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	4413      	add	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2201      	movs	r2, #1
 80045e0:	705a      	strb	r2, [r3, #1]
 80045e2:	e00e      	b.n	8004602 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	f003 0207 	and.w	r2, r3, #7
 80045ea:	4613      	mov	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	4413      	add	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004602:	78fb      	ldrb	r3, [r7, #3]
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	b2da      	uxtb	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004614:	2b01      	cmp	r3, #1
 8004616:	d101      	bne.n	800461c <HAL_PCD_EP_Close+0x6a>
 8004618:	2302      	movs	r3, #2
 800461a:	e00e      	b.n	800463a <HAL_PCD_EP_Close+0x88>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68f9      	ldr	r1, [r7, #12]
 800462a:	4618      	mov	r0, r3
 800462c:	f005 fa04 	bl	8009a38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b086      	sub	sp, #24
 8004646:	af00      	add	r7, sp, #0
 8004648:	60f8      	str	r0, [r7, #12]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	603b      	str	r3, [r7, #0]
 800464e:	460b      	mov	r3, r1
 8004650:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004652:	7afb      	ldrb	r3, [r7, #11]
 8004654:	f003 0207 	and.w	r2, r3, #7
 8004658:	4613      	mov	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4413      	add	r3, r2
 8004668:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2200      	movs	r2, #0
 800467a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	2200      	movs	r2, #0
 8004680:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004682:	7afb      	ldrb	r3, [r7, #11]
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	b2da      	uxtb	r2, r3
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6979      	ldr	r1, [r7, #20]
 8004694:	4618      	mov	r0, r3
 8004696:	f005 fbbc 	bl	8009e12 <USB_EPStartXfer>

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	607a      	str	r2, [r7, #4]
 80046ae:	603b      	str	r3, [r7, #0]
 80046b0:	460b      	mov	r3, r1
 80046b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046b4:	7afb      	ldrb	r3, [r7, #11]
 80046b6:	f003 0207 	and.w	r2, r3, #7
 80046ba:	4613      	mov	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	3310      	adds	r3, #16
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4413      	add	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2200      	movs	r2, #0
 80046e8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2201      	movs	r2, #1
 80046ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046f0:	7afb      	ldrb	r3, [r7, #11]
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	b2da      	uxtb	r2, r3
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6979      	ldr	r1, [r7, #20]
 8004702:	4618      	mov	r0, r3
 8004704:	f005 fb85 	bl	8009e12 <USB_EPStartXfer>

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b084      	sub	sp, #16
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	460b      	mov	r3, r1
 800471c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800471e:	78fb      	ldrb	r3, [r7, #3]
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	7912      	ldrb	r2, [r2, #4]
 8004728:	4293      	cmp	r3, r2
 800472a:	d901      	bls.n	8004730 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e03e      	b.n	80047ae <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004730:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004734:	2b00      	cmp	r3, #0
 8004736:	da0e      	bge.n	8004756 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	f003 0207 	and.w	r2, r3, #7
 800473e:	4613      	mov	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	3310      	adds	r3, #16
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	4413      	add	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2201      	movs	r2, #1
 8004752:	705a      	strb	r2, [r3, #1]
 8004754:	e00c      	b.n	8004770 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004756:	78fa      	ldrb	r2, [r7, #3]
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	4413      	add	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2201      	movs	r2, #1
 8004774:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004776:	78fb      	ldrb	r3, [r7, #3]
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	b2da      	uxtb	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_PCD_EP_SetStall+0x7e>
 800478c:	2302      	movs	r3, #2
 800478e:	e00e      	b.n	80047ae <HAL_PCD_EP_SetStall+0x9c>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68f9      	ldr	r1, [r7, #12]
 800479e:	4618      	mov	r0, r3
 80047a0:	f006 fee9 	bl	800b576 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b084      	sub	sp, #16
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
 80047be:	460b      	mov	r3, r1
 80047c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80047c2:	78fb      	ldrb	r3, [r7, #3]
 80047c4:	f003 030f 	and.w	r3, r3, #15
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	7912      	ldrb	r2, [r2, #4]
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d901      	bls.n	80047d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e040      	b.n	8004856 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80047d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	da0e      	bge.n	80047fa <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047dc:	78fb      	ldrb	r3, [r7, #3]
 80047de:	f003 0207 	and.w	r2, r3, #7
 80047e2:	4613      	mov	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	3310      	adds	r3, #16
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	4413      	add	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2201      	movs	r2, #1
 80047f6:	705a      	strb	r2, [r3, #1]
 80047f8:	e00e      	b.n	8004818 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047fa:	78fb      	ldrb	r3, [r7, #3]
 80047fc:	f003 0207 	and.w	r2, r3, #7
 8004800:	4613      	mov	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	4413      	add	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800481e:	78fb      	ldrb	r3, [r7, #3]
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	b2da      	uxtb	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004830:	2b01      	cmp	r3, #1
 8004832:	d101      	bne.n	8004838 <HAL_PCD_EP_ClrStall+0x82>
 8004834:	2302      	movs	r3, #2
 8004836:	e00e      	b.n	8004856 <HAL_PCD_EP_ClrStall+0xa0>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68f9      	ldr	r1, [r7, #12]
 8004846:	4618      	mov	r0, r3
 8004848:	f006 fee6 	bl	800b618 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b096      	sub	sp, #88	@ 0x58
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004866:	e3bb      	b.n	8004fe0 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004870:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004874:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004878:	b2db      	uxtb	r3, r3
 800487a:	f003 030f 	and.w	r3, r3, #15
 800487e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8004882:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004886:	2b00      	cmp	r3, #0
 8004888:	f040 8175 	bne.w	8004b76 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800488c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	2b00      	cmp	r3, #0
 8004896:	d14e      	bne.n	8004936 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	b29b      	uxth	r3, r3
 80048a0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80048a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048a8:	81fb      	strh	r3, [r7, #14]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	89fb      	ldrh	r3, [r7, #14]
 80048b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3310      	adds	r3, #16
 80048c0:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	461a      	mov	r2, r3
 80048ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	4413      	add	r3, r2
 80048d6:	3302      	adds	r3, #2
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6812      	ldr	r2, [r2, #0]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80048ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80048ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048f0:	695a      	ldr	r2, [r3, #20]
 80048f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	441a      	add	r2, r3
 80048f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048fa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80048fc:	2100      	movs	r1, #0
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f008 fcc9 	bl	800d296 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	7b1b      	ldrb	r3, [r3, #12]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 8368 	beq.w	8004fe0 <PCD_EP_ISR_Handler+0x782>
 8004910:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	2b00      	cmp	r3, #0
 8004916:	f040 8363 	bne.w	8004fe0 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	7b1b      	ldrb	r3, [r3, #12]
 800491e:	b2db      	uxtb	r3, r3
 8004920:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004924:	b2da      	uxtb	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	731a      	strb	r2, [r3, #12]
 8004934:	e354      	b.n	8004fe0 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800493c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004948:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800494c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004950:	2b00      	cmp	r3, #0
 8004952:	d034      	beq.n	80049be <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800495c:	b29b      	uxth	r3, r3
 800495e:	461a      	mov	r2, r3
 8004960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	00db      	lsls	r3, r3, #3
 8004966:	4413      	add	r3, r2
 8004968:	3306      	adds	r3, #6
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6812      	ldr	r2, [r2, #0]
 8004970:	4413      	add	r3, r2
 8004972:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800497c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800497e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6818      	ldr	r0, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800498a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800498c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800498e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004990:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004992:	b29b      	uxth	r3, r3
 8004994:	f006 ff63 	bl	800b85e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	b29a      	uxth	r2, r3
 80049a0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80049a4:	4013      	ands	r3, r2
 80049a6:	823b      	strh	r3, [r7, #16]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	8a3a      	ldrh	r2, [r7, #16]
 80049ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80049b2:	b292      	uxth	r2, r2
 80049b4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f008 fc40 	bl	800d23c <HAL_PCD_SetupStageCallback>
 80049bc:	e310      	b.n	8004fe0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80049be:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f280 830c 	bge.w	8004fe0 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80049d4:	4013      	ands	r3, r2
 80049d6:	83fb      	strh	r3, [r7, #30]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	8bfa      	ldrh	r2, [r7, #30]
 80049de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80049e2:	b292      	uxth	r2, r2
 80049e4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	4413      	add	r3, r2
 80049fa:	3306      	adds	r3, #6
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6812      	ldr	r2, [r2, #0]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a10:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d019      	beq.n	8004a4e <PCD_EP_ISR_Handler+0x1f0>
 8004a1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d015      	beq.n	8004a4e <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6818      	ldr	r0, [r3, #0]
 8004a26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a28:	6959      	ldr	r1, [r3, #20]
 8004a2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a2c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a30:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	f006 ff13 	bl	800b85e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004a38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a3a:	695a      	ldr	r2, [r3, #20]
 8004a3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	441a      	add	r2, r3
 8004a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a44:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004a46:	2100      	movs	r1, #0
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f008 fc09 	bl	800d260 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004a58:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004a5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f040 82bd 	bne.w	8004fe0 <PCD_EP_ISR_Handler+0x782>
 8004a66:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004a6a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004a6e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a72:	f000 82b5 	beq.w	8004fe0 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	61bb      	str	r3, [r7, #24]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	461a      	mov	r2, r3
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	61bb      	str	r3, [r7, #24]
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004a94:	617b      	str	r3, [r7, #20]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	801a      	strh	r2, [r3, #0]
 8004aa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10a      	bne.n	8004ac4 <PCD_EP_ISR_Handler+0x266>
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ab8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	801a      	strh	r2, [r3, #0]
 8004ac2:	e039      	b.n	8004b38 <PCD_EP_ISR_Handler+0x2da>
 8004ac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	2b3e      	cmp	r3, #62	@ 0x3e
 8004aca:	d818      	bhi.n	8004afe <PCD_EP_ISR_Handler+0x2a0>
 8004acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	085b      	lsrs	r3, r3, #1
 8004ad2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <PCD_EP_ISR_Handler+0x288>
 8004ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	029b      	lsls	r3, r3, #10
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	4313      	orrs	r3, r2
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	801a      	strh	r2, [r3, #0]
 8004afc:	e01c      	b.n	8004b38 <PCD_EP_ISR_Handler+0x2da>
 8004afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	095b      	lsrs	r3, r3, #5
 8004b04:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f003 031f 	and.w	r3, r3, #31
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d102      	bne.n	8004b18 <PCD_EP_ISR_Handler+0x2ba>
 8004b12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b14:	3b01      	subs	r3, #1
 8004b16:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	029b      	lsls	r3, r3, #10
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	4313      	orrs	r3, r2
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b48:	827b      	strh	r3, [r7, #18]
 8004b4a:	8a7b      	ldrh	r3, [r7, #18]
 8004b4c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004b50:	827b      	strh	r3, [r7, #18]
 8004b52:	8a7b      	ldrh	r3, [r7, #18]
 8004b54:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004b58:	827b      	strh	r3, [r7, #18]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	8a7b      	ldrh	r3, [r7, #18]
 8004b60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	8013      	strh	r3, [r2, #0]
 8004b74:	e234      	b.n	8004fe0 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004b8a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f280 80fc 	bge.w	8004d8c <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004baa:	4013      	ands	r3, r2
 8004bac:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8004bc2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004bc6:	b292      	uxth	r2, r2
 8004bc8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004bca:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004bce:	4613      	mov	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	4413      	add	r3, r2
 8004bde:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004be0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004be2:	7b1b      	ldrb	r3, [r3, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d125      	bne.n	8004c34 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4413      	add	r3, r2
 8004bfc:	3306      	adds	r3, #6
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6812      	ldr	r2, [r2, #0]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c10:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004c14:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 8092 	beq.w	8004d42 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c24:	6959      	ldr	r1, [r3, #20]
 8004c26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c28:	88da      	ldrh	r2, [r3, #6]
 8004c2a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004c2e:	f006 fe16 	bl	800b85e <USB_ReadPMA>
 8004c32:	e086      	b.n	8004d42 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c36:	78db      	ldrb	r3, [r3, #3]
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d10a      	bne.n	8004c52 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004c3c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004c40:	461a      	mov	r2, r3
 8004c42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f9d9 	bl	8004ffc <HAL_PCD_EP_DB_Receive>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004c50:	e077      	b.n	8004d42 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c6c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	461a      	mov	r2, r3
 8004c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	441a      	add	r2, r3
 8004c7e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004c82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c8e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d024      	beq.n	8004cfa <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	461a      	mov	r2, r3
 8004cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	00db      	lsls	r3, r3, #3
 8004cc2:	4413      	add	r3, r2
 8004cc4:	3302      	adds	r3, #2
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6812      	ldr	r2, [r2, #0]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cd8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004cdc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d02e      	beq.n	8004d42 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6818      	ldr	r0, [r3, #0]
 8004ce8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cea:	6959      	ldr	r1, [r3, #20]
 8004cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cee:	891a      	ldrh	r2, [r3, #8]
 8004cf0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004cf4:	f006 fdb3 	bl	800b85e <USB_ReadPMA>
 8004cf8:	e023      	b.n	8004d42 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	461a      	mov	r2, r3
 8004d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	4413      	add	r3, r2
 8004d0e:	3306      	adds	r3, #6
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6812      	ldr	r2, [r2, #0]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d22:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004d26:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d009      	beq.n	8004d42 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6818      	ldr	r0, [r3, #0]
 8004d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d34:	6959      	ldr	r1, [r3, #20]
 8004d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d38:	895a      	ldrh	r2, [r3, #10]
 8004d3a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004d3e:	f006 fd8e 	bl	800b85e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004d42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d44:	69da      	ldr	r2, [r3, #28]
 8004d46:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004d4a:	441a      	add	r2, r3
 8004d4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d4e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004d50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d52:	695a      	ldr	r2, [r3, #20]
 8004d54:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004d58:	441a      	add	r2, r3
 8004d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d5c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d005      	beq.n	8004d72 <PCD_EP_ISR_Handler+0x514>
 8004d66:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d206      	bcs.n	8004d80 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004d72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	4619      	mov	r1, r3
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f008 fa71 	bl	800d260 <HAL_PCD_DataOutStageCallback>
 8004d7e:	e005      	b.n	8004d8c <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d86:	4618      	mov	r0, r3
 8004d88:	f005 f843 	bl	8009e12 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004d8c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004d90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 8123 	beq.w	8004fe0 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8004d9a:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004d9e:	4613      	mov	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	3310      	adds	r3, #16
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	4413      	add	r3, r2
 8004dac:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004dc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dc8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	441a      	add	r2, r3
 8004dda:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004dea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dec:	78db      	ldrb	r3, [r3, #3]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	f040 80a2 	bne.w	8004f38 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8004df4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004df6:	2200      	movs	r2, #0
 8004df8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dfc:	7b1b      	ldrb	r3, [r3, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 8093 	beq.w	8004f2a <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004e04:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d046      	beq.n	8004e9e <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e12:	785b      	ldrb	r3, [r3, #1]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d126      	bne.n	8004e66 <PCD_EP_ISR_Handler+0x608>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	461a      	mov	r2, r3
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2c:	4413      	add	r3, r2
 8004e2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	011a      	lsls	r2, r3, #4
 8004e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e38:	4413      	add	r3, r2
 8004e3a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004e3e:	623b      	str	r3, [r7, #32]
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	881b      	ldrh	r3, [r3, #0]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	801a      	strh	r2, [r3, #0]
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	801a      	strh	r2, [r3, #0]
 8004e64:	e061      	b.n	8004f2a <PCD_EP_ISR_Handler+0x6cc>
 8004e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e68:	785b      	ldrb	r3, [r3, #1]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d15d      	bne.n	8004f2a <PCD_EP_ISR_Handler+0x6cc>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	461a      	mov	r2, r3
 8004e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e82:	4413      	add	r3, r2
 8004e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	011a      	lsls	r2, r3, #4
 8004e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e8e:	4413      	add	r3, r2
 8004e90:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004e94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e98:	2200      	movs	r2, #0
 8004e9a:	801a      	strh	r2, [r3, #0]
 8004e9c:	e045      	b.n	8004f2a <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ea6:	785b      	ldrb	r3, [r3, #1]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d126      	bne.n	8004efa <PCD_EP_ISR_Handler+0x69c>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ec0:	4413      	add	r3, r2
 8004ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	011a      	lsls	r2, r3, #4
 8004eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ecc:	4413      	add	r3, r2
 8004ece:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004ed2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee2:	801a      	strh	r2, [r3, #0]
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef6:	801a      	strh	r2, [r3, #0]
 8004ef8:	e017      	b.n	8004f2a <PCD_EP_ISR_Handler+0x6cc>
 8004efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004efc:	785b      	ldrb	r3, [r3, #1]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d113      	bne.n	8004f2a <PCD_EP_ISR_Handler+0x6cc>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f10:	4413      	add	r3, r2
 8004f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	011a      	lsls	r2, r3, #4
 8004f1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004f22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f26:	2200      	movs	r2, #0
 8004f28:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	4619      	mov	r1, r3
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f008 f9b0 	bl	800d296 <HAL_PCD_DataInStageCallback>
 8004f36:	e053      	b.n	8004fe0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004f38:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d146      	bne.n	8004fd2 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	461a      	mov	r2, r3
 8004f50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	4413      	add	r3, r2
 8004f58:	3302      	adds	r3, #2
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6812      	ldr	r2, [r2, #0]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f66:	881b      	ldrh	r3, [r3, #0]
 8004f68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f6c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004f70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f72:	699a      	ldr	r2, [r3, #24]
 8004f74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d907      	bls.n	8004f8c <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8004f7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f7e:	699a      	ldr	r2, [r3, #24]
 8004f80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004f84:	1ad2      	subs	r2, r2, r3
 8004f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f88:	619a      	str	r2, [r3, #24]
 8004f8a:	e002      	b.n	8004f92 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8004f8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f8e:	2200      	movs	r2, #0
 8004f90:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f008 f978 	bl	800d296 <HAL_PCD_DataInStageCallback>
 8004fa6:	e01b      	b.n	8004fe0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004fa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004faa:	695a      	ldr	r2, [r3, #20]
 8004fac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004fb0:	441a      	add	r2, r3
 8004fb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fb4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fb8:	69da      	ldr	r2, [r3, #28]
 8004fba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004fbe:	441a      	add	r2, r3
 8004fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fc2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f004 ff21 	bl	8009e12 <USB_EPStartXfer>
 8004fd0:	e006      	b.n	8004fe0 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004fd2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f91b 	bl	8005216 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	b21b      	sxth	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f6ff ac3b 	blt.w	8004868 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3758      	adds	r7, #88	@ 0x58
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b088      	sub	sp, #32
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	4613      	mov	r3, r2
 8005008:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800500a:	88fb      	ldrh	r3, [r7, #6]
 800500c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d07e      	beq.n	8005112 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800501c:	b29b      	uxth	r3, r3
 800501e:	461a      	mov	r2, r3
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	4413      	add	r3, r2
 8005028:	3302      	adds	r3, #2
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	6812      	ldr	r2, [r2, #0]
 8005030:	4413      	add	r3, r2
 8005032:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800503c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	699a      	ldr	r2, [r3, #24]
 8005042:	8b7b      	ldrh	r3, [r7, #26]
 8005044:	429a      	cmp	r2, r3
 8005046:	d306      	bcc.n	8005056 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	699a      	ldr	r2, [r3, #24]
 800504c:	8b7b      	ldrh	r3, [r7, #26]
 800504e:	1ad2      	subs	r2, r2, r3
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	619a      	str	r2, [r3, #24]
 8005054:	e002      	b.n	800505c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2200      	movs	r2, #0
 800505a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d123      	bne.n	80050ac <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	461a      	mov	r2, r3
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	b29b      	uxth	r3, r3
 8005076:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800507a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800507e:	833b      	strh	r3, [r7, #24]
 8005080:	8b3b      	ldrh	r3, [r7, #24]
 8005082:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005086:	833b      	strh	r3, [r7, #24]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	461a      	mov	r2, r3
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	441a      	add	r2, r3
 8005096:	8b3b      	ldrh	r3, [r7, #24]
 8005098:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800509c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80050ac:	88fb      	ldrh	r3, [r7, #6]
 80050ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d01f      	beq.n	80050f6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	881b      	ldrh	r3, [r3, #0]
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d0:	82fb      	strh	r3, [r7, #22]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	461a      	mov	r2, r3
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	441a      	add	r2, r3
 80050e0:	8afb      	ldrh	r3, [r7, #22]
 80050e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80050f6:	8b7b      	ldrh	r3, [r7, #26]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 8087 	beq.w	800520c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6818      	ldr	r0, [r3, #0]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	6959      	ldr	r1, [r3, #20]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	891a      	ldrh	r2, [r3, #8]
 800510a:	8b7b      	ldrh	r3, [r7, #26]
 800510c:	f006 fba7 	bl	800b85e <USB_ReadPMA>
 8005110:	e07c      	b.n	800520c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800511a:	b29b      	uxth	r3, r3
 800511c:	461a      	mov	r2, r3
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	4413      	add	r3, r2
 8005126:	3306      	adds	r3, #6
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	6812      	ldr	r2, [r2, #0]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800513a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	699a      	ldr	r2, [r3, #24]
 8005140:	8b7b      	ldrh	r3, [r7, #26]
 8005142:	429a      	cmp	r2, r3
 8005144:	d306      	bcc.n	8005154 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	699a      	ldr	r2, [r3, #24]
 800514a:	8b7b      	ldrh	r3, [r7, #26]
 800514c:	1ad2      	subs	r2, r2, r3
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	619a      	str	r2, [r3, #24]
 8005152:	e002      	b.n	800515a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2200      	movs	r2, #0
 8005158:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d123      	bne.n	80051aa <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	461a      	mov	r2, r3
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	b29b      	uxth	r3, r3
 8005174:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005178:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800517c:	83fb      	strh	r3, [r7, #30]
 800517e:	8bfb      	ldrh	r3, [r7, #30]
 8005180:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005184:	83fb      	strh	r3, [r7, #30]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	461a      	mov	r2, r3
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	441a      	add	r2, r3
 8005194:	8bfb      	ldrh	r3, [r7, #30]
 8005196:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800519a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800519e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80051aa:	88fb      	ldrh	r3, [r7, #6]
 80051ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d11f      	bne.n	80051f4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	461a      	mov	r2, r3
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ce:	83bb      	strh	r3, [r7, #28]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	461a      	mov	r2, r3
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	441a      	add	r2, r3
 80051de:	8bbb      	ldrh	r3, [r7, #28]
 80051e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80051f4:	8b7b      	ldrh	r3, [r7, #26]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d008      	beq.n	800520c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6818      	ldr	r0, [r3, #0]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	6959      	ldr	r1, [r3, #20]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	895a      	ldrh	r2, [r3, #10]
 8005206:	8b7b      	ldrh	r3, [r7, #26]
 8005208:	f006 fb29 	bl	800b85e <USB_ReadPMA>
    }
  }

  return count;
 800520c:	8b7b      	ldrh	r3, [r7, #26]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3720      	adds	r7, #32
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b0a4      	sub	sp, #144	@ 0x90
 800521a:	af00      	add	r7, sp, #0
 800521c:	60f8      	str	r0, [r7, #12]
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	4613      	mov	r3, r2
 8005222:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005224:	88fb      	ldrh	r3, [r7, #6]
 8005226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 81dd 	beq.w	80055ea <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005238:	b29b      	uxth	r3, r3
 800523a:	461a      	mov	r2, r3
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	4413      	add	r3, r2
 8005244:	3302      	adds	r3, #2
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	6812      	ldr	r2, [r2, #0]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005258:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	699a      	ldr	r2, [r3, #24]
 8005260:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005264:	429a      	cmp	r2, r3
 8005266:	d907      	bls.n	8005278 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	699a      	ldr	r2, [r3, #24]
 800526c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005270:	1ad2      	subs	r2, r2, r3
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	619a      	str	r2, [r3, #24]
 8005276:	e002      	b.n	800527e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	2200      	movs	r2, #0
 800527c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	2b00      	cmp	r3, #0
 8005284:	f040 80b9 	bne.w	80053fa <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	785b      	ldrb	r3, [r3, #1]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d126      	bne.n	80052de <HAL_PCD_EP_DB_Transmit+0xc8>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800529e:	b29b      	uxth	r3, r3
 80052a0:	461a      	mov	r2, r3
 80052a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a4:	4413      	add	r3, r2
 80052a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	011a      	lsls	r2, r3, #4
 80052ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b0:	4413      	add	r3, r2
 80052b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80052b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c6:	801a      	strh	r2, [r3, #0]
 80052c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052da:	801a      	strh	r2, [r3, #0]
 80052dc:	e01a      	b.n	8005314 <HAL_PCD_EP_DB_Transmit+0xfe>
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	785b      	ldrb	r3, [r3, #1]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d116      	bne.n	8005314 <HAL_PCD_EP_DB_Transmit+0xfe>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	461a      	mov	r2, r3
 80052f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052fa:	4413      	add	r3, r2
 80052fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	011a      	lsls	r2, r3, #4
 8005304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005306:	4413      	add	r3, r2
 8005308:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800530c:	633b      	str	r3, [r7, #48]	@ 0x30
 800530e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005310:	2200      	movs	r2, #0
 8005312:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	627b      	str	r3, [r7, #36]	@ 0x24
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	785b      	ldrb	r3, [r3, #1]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d126      	bne.n	8005370 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	61fb      	str	r3, [r7, #28]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005330:	b29b      	uxth	r3, r3
 8005332:	461a      	mov	r2, r3
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	4413      	add	r3, r2
 8005338:	61fb      	str	r3, [r7, #28]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	011a      	lsls	r2, r3, #4
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	4413      	add	r3, r2
 8005344:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005348:	61bb      	str	r3, [r7, #24]
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	b29b      	uxth	r3, r3
 8005350:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005354:	b29a      	uxth	r2, r3
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	801a      	strh	r2, [r3, #0]
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	b29b      	uxth	r3, r3
 8005360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005368:	b29a      	uxth	r2, r3
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	801a      	strh	r2, [r3, #0]
 800536e:	e017      	b.n	80053a0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	785b      	ldrb	r3, [r3, #1]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d113      	bne.n	80053a0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005380:	b29b      	uxth	r3, r3
 8005382:	461a      	mov	r2, r3
 8005384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005386:	4413      	add	r3, r2
 8005388:	627b      	str	r3, [r7, #36]	@ 0x24
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	011a      	lsls	r2, r3, #4
 8005390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005392:	4413      	add	r3, r2
 8005394:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005398:	623b      	str	r3, [r7, #32]
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	2200      	movs	r2, #0
 800539e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	4619      	mov	r1, r3
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f007 ff75 	bl	800d296 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80053ac:	88fb      	ldrh	r3, [r7, #6]
 80053ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 82fc 	beq.w	80059b0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	461a      	mov	r2, r3
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	881b      	ldrh	r3, [r3, #0]
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053d2:	82fb      	strh	r3, [r7, #22]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	461a      	mov	r2, r3
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	441a      	add	r2, r3
 80053e2:	8afb      	ldrh	r3, [r7, #22]
 80053e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	8013      	strh	r3, [r2, #0]
 80053f8:	e2da      	b.n	80059b0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80053fa:	88fb      	ldrh	r3, [r7, #6]
 80053fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d021      	beq.n	8005448 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	461a      	mov	r2, r3
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	b29b      	uxth	r3, r3
 8005416:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800541a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800541e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	441a      	add	r2, r3
 8005430:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005434:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005438:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800543c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005440:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005444:	b29b      	uxth	r3, r3
 8005446:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800544e:	2b01      	cmp	r3, #1
 8005450:	f040 82ae 	bne.w	80059b0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	695a      	ldr	r2, [r3, #20]
 8005458:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800545c:	441a      	add	r2, r3
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	69da      	ldr	r2, [r3, #28]
 8005466:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800546a:	441a      	add	r2, r3
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	6a1a      	ldr	r2, [r3, #32]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	429a      	cmp	r2, r3
 800547a:	d30b      	bcc.n	8005494 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	6a1a      	ldr	r2, [r3, #32]
 8005488:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800548c:	1ad2      	subs	r2, r2, r3
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	621a      	str	r2, [r3, #32]
 8005492:	e017      	b.n	80054c4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d108      	bne.n	80054ae <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800549c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80054a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80054ac:	e00a      	b.n	80054c4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2200      	movs	r2, #0
 80054c2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	785b      	ldrb	r3, [r3, #1]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d165      	bne.n	8005598 <HAL_PCD_EP_DB_Transmit+0x382>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054da:	b29b      	uxth	r3, r3
 80054dc:	461a      	mov	r2, r3
 80054de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054e0:	4413      	add	r3, r2
 80054e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	011a      	lsls	r2, r3, #4
 80054ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054ec:	4413      	add	r3, r2
 80054ee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80054f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054fe:	b29a      	uxth	r2, r3
 8005500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005502:	801a      	strh	r2, [r3, #0]
 8005504:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10a      	bne.n	8005522 <HAL_PCD_EP_DB_Transmit+0x30c>
 800550c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	b29b      	uxth	r3, r3
 8005512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800551a:	b29a      	uxth	r2, r3
 800551c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800551e:	801a      	strh	r2, [r3, #0]
 8005520:	e057      	b.n	80055d2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005522:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005526:	2b3e      	cmp	r3, #62	@ 0x3e
 8005528:	d818      	bhi.n	800555c <HAL_PCD_EP_DB_Transmit+0x346>
 800552a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800552e:	085b      	lsrs	r3, r3, #1
 8005530:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005532:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <HAL_PCD_EP_DB_Transmit+0x32e>
 800553e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005540:	3301      	adds	r3, #1
 8005542:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005546:	881b      	ldrh	r3, [r3, #0]
 8005548:	b29a      	uxth	r2, r3
 800554a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800554c:	b29b      	uxth	r3, r3
 800554e:	029b      	lsls	r3, r3, #10
 8005550:	b29b      	uxth	r3, r3
 8005552:	4313      	orrs	r3, r2
 8005554:	b29a      	uxth	r2, r3
 8005556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005558:	801a      	strh	r2, [r3, #0]
 800555a:	e03a      	b.n	80055d2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800555c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005560:	095b      	lsrs	r3, r3, #5
 8005562:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005564:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005568:	f003 031f 	and.w	r3, r3, #31
 800556c:	2b00      	cmp	r3, #0
 800556e:	d102      	bne.n	8005576 <HAL_PCD_EP_DB_Transmit+0x360>
 8005570:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005572:	3b01      	subs	r3, #1
 8005574:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005578:	881b      	ldrh	r3, [r3, #0]
 800557a:	b29a      	uxth	r2, r3
 800557c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800557e:	b29b      	uxth	r3, r3
 8005580:	029b      	lsls	r3, r3, #10
 8005582:	b29b      	uxth	r3, r3
 8005584:	4313      	orrs	r3, r2
 8005586:	b29b      	uxth	r3, r3
 8005588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800558c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005590:	b29a      	uxth	r2, r3
 8005592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005594:	801a      	strh	r2, [r3, #0]
 8005596:	e01c      	b.n	80055d2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	785b      	ldrb	r3, [r3, #1]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d118      	bne.n	80055d2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	461a      	mov	r2, r3
 80055b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055b4:	4413      	add	r3, r2
 80055b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	011a      	lsls	r2, r3, #4
 80055be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055c0:	4413      	add	r3, r2
 80055c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80055c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80055c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055d0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6818      	ldr	r0, [r3, #0]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	6959      	ldr	r1, [r3, #20]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	891a      	ldrh	r2, [r3, #8]
 80055de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	f006 f8f5 	bl	800b7d2 <USB_WritePMA>
 80055e8:	e1e2      	b.n	80059b0 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	461a      	mov	r2, r3
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	4413      	add	r3, r2
 80055fe:	3306      	adds	r3, #6
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	6812      	ldr	r2, [r2, #0]
 8005606:	4413      	add	r3, r2
 8005608:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005612:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	699a      	ldr	r2, [r3, #24]
 800561a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800561e:	429a      	cmp	r2, r3
 8005620:	d307      	bcc.n	8005632 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	699a      	ldr	r2, [r3, #24]
 8005626:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800562a:	1ad2      	subs	r2, r2, r3
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	619a      	str	r2, [r3, #24]
 8005630:	e002      	b.n	8005638 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2200      	movs	r2, #0
 8005636:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	2b00      	cmp	r3, #0
 800563e:	f040 80c0 	bne.w	80057c2 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	785b      	ldrb	r3, [r3, #1]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d126      	bne.n	8005698 <HAL_PCD_EP_DB_Transmit+0x482>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005658:	b29b      	uxth	r3, r3
 800565a:	461a      	mov	r2, r3
 800565c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800565e:	4413      	add	r3, r2
 8005660:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	011a      	lsls	r2, r3, #4
 8005668:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800566a:	4413      	add	r3, r2
 800566c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005670:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005672:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	b29b      	uxth	r3, r3
 8005678:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800567c:	b29a      	uxth	r2, r3
 800567e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005680:	801a      	strh	r2, [r3, #0]
 8005682:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005684:	881b      	ldrh	r3, [r3, #0]
 8005686:	b29b      	uxth	r3, r3
 8005688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800568c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005690:	b29a      	uxth	r2, r3
 8005692:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005694:	801a      	strh	r2, [r3, #0]
 8005696:	e01a      	b.n	80056ce <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	785b      	ldrb	r3, [r3, #1]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d116      	bne.n	80056ce <HAL_PCD_EP_DB_Transmit+0x4b8>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	461a      	mov	r2, r3
 80056b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056b4:	4413      	add	r3, r2
 80056b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	011a      	lsls	r2, r3, #4
 80056be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056c0:	4413      	add	r3, r2
 80056c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80056c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80056c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056ca:	2200      	movs	r2, #0
 80056cc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	785b      	ldrb	r3, [r3, #1]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d12b      	bne.n	8005734 <HAL_PCD_EP_DB_Transmit+0x51e>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	461a      	mov	r2, r3
 80056ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056f0:	4413      	add	r3, r2
 80056f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	011a      	lsls	r2, r3, #4
 80056fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056fc:	4413      	add	r3, r2
 80056fe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005702:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005706:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	b29b      	uxth	r3, r3
 800570e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005712:	b29a      	uxth	r2, r3
 8005714:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005718:	801a      	strh	r2, [r3, #0]
 800571a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	b29b      	uxth	r3, r3
 8005722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800572a:	b29a      	uxth	r2, r3
 800572c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005730:	801a      	strh	r2, [r3, #0]
 8005732:	e017      	b.n	8005764 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	785b      	ldrb	r3, [r3, #1]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d113      	bne.n	8005764 <HAL_PCD_EP_DB_Transmit+0x54e>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005744:	b29b      	uxth	r3, r3
 8005746:	461a      	mov	r2, r3
 8005748:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800574a:	4413      	add	r3, r2
 800574c:	677b      	str	r3, [r7, #116]	@ 0x74
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	011a      	lsls	r2, r3, #4
 8005754:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005756:	4413      	add	r3, r2
 8005758:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800575c:	673b      	str	r3, [r7, #112]	@ 0x70
 800575e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005760:	2200      	movs	r2, #0
 8005762:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	4619      	mov	r1, r3
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f007 fd93 	bl	800d296 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005770:	88fb      	ldrh	r3, [r7, #6]
 8005772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005776:	2b00      	cmp	r3, #0
 8005778:	f040 811a 	bne.w	80059b0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	461a      	mov	r2, r3
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	b29b      	uxth	r3, r3
 800578e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005796:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	461a      	mov	r2, r3
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	441a      	add	r2, r3
 80057a8:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80057ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057bc:	b29b      	uxth	r3, r3
 80057be:	8013      	strh	r3, [r2, #0]
 80057c0:	e0f6      	b.n	80059b0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80057c2:	88fb      	ldrh	r3, [r7, #6]
 80057c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d121      	bne.n	8005810 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	461a      	mov	r2, r3
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057e6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	461a      	mov	r2, r3
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	441a      	add	r2, r3
 80057f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80057fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005800:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005804:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800580c:	b29b      	uxth	r3, r3
 800580e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005816:	2b01      	cmp	r3, #1
 8005818:	f040 80ca 	bne.w	80059b0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	695a      	ldr	r2, [r3, #20]
 8005820:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005824:	441a      	add	r2, r3
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	69da      	ldr	r2, [r3, #28]
 800582e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005832:	441a      	add	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	6a1a      	ldr	r2, [r3, #32]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	429a      	cmp	r2, r3
 8005842:	d30b      	bcc.n	800585c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	6a1a      	ldr	r2, [r3, #32]
 8005850:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005854:	1ad2      	subs	r2, r2, r3
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	621a      	str	r2, [r3, #32]
 800585a:	e017      	b.n	800588c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d108      	bne.n	8005876 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8005864:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005868:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005874:	e00a      	b.n	800588c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2200      	movs	r2, #0
 8005882:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	657b      	str	r3, [r7, #84]	@ 0x54
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	785b      	ldrb	r3, [r3, #1]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d165      	bne.n	8005966 <HAL_PCD_EP_DB_Transmit+0x750>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	461a      	mov	r2, r3
 80058ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058ae:	4413      	add	r3, r2
 80058b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	011a      	lsls	r2, r3, #4
 80058b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058ba:	4413      	add	r3, r2
 80058bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80058c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058d0:	801a      	strh	r2, [r3, #0]
 80058d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10a      	bne.n	80058f0 <HAL_PCD_EP_DB_Transmit+0x6da>
 80058da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058ec:	801a      	strh	r2, [r3, #0]
 80058ee:	e054      	b.n	800599a <HAL_PCD_EP_DB_Transmit+0x784>
 80058f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80058f6:	d818      	bhi.n	800592a <HAL_PCD_EP_DB_Transmit+0x714>
 80058f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058fc:	085b      	lsrs	r3, r3, #1
 80058fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005900:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <HAL_PCD_EP_DB_Transmit+0x6fc>
 800590c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800590e:	3301      	adds	r3, #1
 8005910:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005912:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	b29a      	uxth	r2, r3
 8005918:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800591a:	b29b      	uxth	r3, r3
 800591c:	029b      	lsls	r3, r3, #10
 800591e:	b29b      	uxth	r3, r3
 8005920:	4313      	orrs	r3, r2
 8005922:	b29a      	uxth	r2, r3
 8005924:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005926:	801a      	strh	r2, [r3, #0]
 8005928:	e037      	b.n	800599a <HAL_PCD_EP_DB_Transmit+0x784>
 800592a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800592e:	095b      	lsrs	r3, r3, #5
 8005930:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005932:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005936:	f003 031f 	and.w	r3, r3, #31
 800593a:	2b00      	cmp	r3, #0
 800593c:	d102      	bne.n	8005944 <HAL_PCD_EP_DB_Transmit+0x72e>
 800593e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005940:	3b01      	subs	r3, #1
 8005942:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005944:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005946:	881b      	ldrh	r3, [r3, #0]
 8005948:	b29a      	uxth	r2, r3
 800594a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800594c:	b29b      	uxth	r3, r3
 800594e:	029b      	lsls	r3, r3, #10
 8005950:	b29b      	uxth	r3, r3
 8005952:	4313      	orrs	r3, r2
 8005954:	b29b      	uxth	r3, r3
 8005956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800595a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800595e:	b29a      	uxth	r2, r3
 8005960:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005962:	801a      	strh	r2, [r3, #0]
 8005964:	e019      	b.n	800599a <HAL_PCD_EP_DB_Transmit+0x784>
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	785b      	ldrb	r3, [r3, #1]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d115      	bne.n	800599a <HAL_PCD_EP_DB_Transmit+0x784>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005976:	b29b      	uxth	r3, r3
 8005978:	461a      	mov	r2, r3
 800597a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800597c:	4413      	add	r3, r2
 800597e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	011a      	lsls	r2, r3, #4
 8005986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005988:	4413      	add	r3, r2
 800598a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800598e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005990:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005994:	b29a      	uxth	r2, r3
 8005996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005998:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6818      	ldr	r0, [r3, #0]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	6959      	ldr	r1, [r3, #20]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	895a      	ldrh	r2, [r3, #10]
 80059a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	f005 ff11 	bl	800b7d2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	461a      	mov	r2, r3
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4413      	add	r3, r2
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059ca:	82bb      	strh	r3, [r7, #20]
 80059cc:	8abb      	ldrh	r3, [r7, #20]
 80059ce:	f083 0310 	eor.w	r3, r3, #16
 80059d2:	82bb      	strh	r3, [r7, #20]
 80059d4:	8abb      	ldrh	r3, [r7, #20]
 80059d6:	f083 0320 	eor.w	r3, r3, #32
 80059da:	82bb      	strh	r3, [r7, #20]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	461a      	mov	r2, r3
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	441a      	add	r2, r3
 80059ea:	8abb      	ldrh	r3, [r7, #20]
 80059ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3790      	adds	r7, #144	@ 0x90
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b087      	sub	sp, #28
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	60f8      	str	r0, [r7, #12]
 8005a12:	607b      	str	r3, [r7, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	817b      	strh	r3, [r7, #10]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005a1c:	897b      	ldrh	r3, [r7, #10]
 8005a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00b      	beq.n	8005a40 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a28:	897b      	ldrh	r3, [r7, #10]
 8005a2a:	f003 0207 	and.w	r2, r3, #7
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	3310      	adds	r3, #16
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	617b      	str	r3, [r7, #20]
 8005a3e:	e009      	b.n	8005a54 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a40:	897a      	ldrh	r2, [r7, #10]
 8005a42:	4613      	mov	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	4413      	add	r3, r2
 8005a52:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005a54:	893b      	ldrh	r3, [r7, #8]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d107      	bne.n	8005a6a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	80da      	strh	r2, [r3, #6]
 8005a68:	e00b      	b.n	8005a82 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	0c1b      	lsrs	r3, r3, #16
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005aa0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005aa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005aa6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d102      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	f001 b823 	b.w	8006afc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005aba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 817d 	beq.w	8005dc6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005acc:	4bbc      	ldr	r3, [pc, #752]	@ (8005dc0 <HAL_RCC_OscConfig+0x330>)
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f003 030c 	and.w	r3, r3, #12
 8005ad4:	2b04      	cmp	r3, #4
 8005ad6:	d00c      	beq.n	8005af2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005ad8:	4bb9      	ldr	r3, [pc, #740]	@ (8005dc0 <HAL_RCC_OscConfig+0x330>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f003 030c 	and.w	r3, r3, #12
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d15c      	bne.n	8005b9e <HAL_RCC_OscConfig+0x10e>
 8005ae4:	4bb6      	ldr	r3, [pc, #728]	@ (8005dc0 <HAL_RCC_OscConfig+0x330>)
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005af0:	d155      	bne.n	8005b9e <HAL_RCC_OscConfig+0x10e>
 8005af2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005af6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005afa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8005afe:	fa93 f3a3 	rbit	r3, r3
 8005b02:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005b06:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b0a:	fab3 f383 	clz	r3, r3
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	095b      	lsrs	r3, r3, #5
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	f043 0301 	orr.w	r3, r3, #1
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d102      	bne.n	8005b24 <HAL_RCC_OscConfig+0x94>
 8005b1e:	4ba8      	ldr	r3, [pc, #672]	@ (8005dc0 <HAL_RCC_OscConfig+0x330>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	e015      	b.n	8005b50 <HAL_RCC_OscConfig+0xc0>
 8005b24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005b28:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b2c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8005b30:	fa93 f3a3 	rbit	r3, r3
 8005b34:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8005b38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005b3c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8005b40:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8005b44:	fa93 f3a3 	rbit	r3, r3
 8005b48:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8005b4c:	4b9c      	ldr	r3, [pc, #624]	@ (8005dc0 <HAL_RCC_OscConfig+0x330>)
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b50:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005b54:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8005b58:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8005b5c:	fa92 f2a2 	rbit	r2, r2
 8005b60:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8005b64:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8005b68:	fab2 f282 	clz	r2, r2
 8005b6c:	b2d2      	uxtb	r2, r2
 8005b6e:	f042 0220 	orr.w	r2, r2, #32
 8005b72:	b2d2      	uxtb	r2, r2
 8005b74:	f002 021f 	and.w	r2, r2, #31
 8005b78:	2101      	movs	r1, #1
 8005b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8005b7e:	4013      	ands	r3, r2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 811f 	beq.w	8005dc4 <HAL_RCC_OscConfig+0x334>
 8005b86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f040 8116 	bne.w	8005dc4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	f000 bfaf 	b.w	8006afc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ba2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bae:	d106      	bne.n	8005bbe <HAL_RCC_OscConfig+0x12e>
 8005bb0:	4b83      	ldr	r3, [pc, #524]	@ (8005dc0 <HAL_RCC_OscConfig+0x330>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a82      	ldr	r2, [pc, #520]	@ (8005dc0 <HAL_RCC_OscConfig+0x330>)
 8005bb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bba:	6013      	str	r3, [r2, #0]
 8005bbc:	e036      	b.n	8005c2c <HAL_RCC_OscConfig+0x19c>
 8005bbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005bc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10c      	bne.n	8005be8 <HAL_RCC_OscConfig+0x158>
 8005bce:	4b7c      	ldr	r3, [pc, #496]	@ (8005dc0 <HAL_RCC_OscConfig+0x330>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a7b      	ldr	r2, [pc, #492]	@ (8005dc0 <HAL_RCC_OscConfig+0x330>)
 8005bd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bd8:	6013      	str	r3, [r2, #0]
 8005bda:	4b79      	ldr	r3, [pc, #484]	@ (8005dc0 <HAL_RCC_OscConfig+0x330>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a78      	ldr	r2, [pc, #480]	@ (8005dc0 <HAL_RCC_OscConfig+0x330>)
 8005be0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005be4:	6013      	str	r3, [r2, #0]
 8005be6:	e021      	b.n	8005c2c <HAL_RCC_OscConfig+0x19c>
 8005be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005bec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005bf8:	d10c      	bne.n	8005c14 <HAL_RCC_OscConfig+0x184>
 8005bfa:	4b71      	ldr	r3, [pc, #452]	@ (8005dc0 <HAL_RCC_OscConfig+0x330>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a70      	ldr	r2, [pc, #448]	@ (8005dc0 <HAL_RCC_OscConfig+0x330>)
 8005c00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c04:	6013      	str	r3, [r2, #0]
 8005c06:	4b6e      	ldr	r3, [pc, #440]	@ (8005dc0 <HAL_RCC_OscConfig+0x330>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a6d      	ldr	r2, [pc, #436]	@ (8005dc0 <HAL_RCC_OscConfig+0x330>)
 8005c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c10:	6013      	str	r3, [r2, #0]
 8005c12:	e00b      	b.n	8005c2c <HAL_RCC_OscConfig+0x19c>
 8005c14:	4b6a      	ldr	r3, [pc, #424]	@ (8005dc0 <HAL_RCC_OscConfig+0x330>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a69      	ldr	r2, [pc, #420]	@ (8005dc0 <HAL_RCC_OscConfig+0x330>)
 8005c1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c1e:	6013      	str	r3, [r2, #0]
 8005c20:	4b67      	ldr	r3, [pc, #412]	@ (8005dc0 <HAL_RCC_OscConfig+0x330>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a66      	ldr	r2, [pc, #408]	@ (8005dc0 <HAL_RCC_OscConfig+0x330>)
 8005c26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c2a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005c2c:	4b64      	ldr	r3, [pc, #400]	@ (8005dc0 <HAL_RCC_OscConfig+0x330>)
 8005c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c30:	f023 020f 	bic.w	r2, r3, #15
 8005c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	495f      	ldr	r1, [pc, #380]	@ (8005dc0 <HAL_RCC_OscConfig+0x330>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d059      	beq.n	8005d0a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c56:	f7fd f997 	bl	8002f88 <HAL_GetTick>
 8005c5a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c5e:	e00a      	b.n	8005c76 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c60:	f7fd f992 	bl	8002f88 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b64      	cmp	r3, #100	@ 0x64
 8005c6e:	d902      	bls.n	8005c76 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	f000 bf43 	b.w	8006afc <HAL_RCC_OscConfig+0x106c>
 8005c76:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005c7a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c7e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8005c82:	fa93 f3a3 	rbit	r3, r3
 8005c86:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8005c8a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c8e:	fab3 f383 	clz	r3, r3
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	095b      	lsrs	r3, r3, #5
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	f043 0301 	orr.w	r3, r3, #1
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d102      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x218>
 8005ca2:	4b47      	ldr	r3, [pc, #284]	@ (8005dc0 <HAL_RCC_OscConfig+0x330>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	e015      	b.n	8005cd4 <HAL_RCC_OscConfig+0x244>
 8005ca8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005cac:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cb0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8005cb4:	fa93 f3a3 	rbit	r3, r3
 8005cb8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8005cbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005cc0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005cc4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8005cc8:	fa93 f3a3 	rbit	r3, r3
 8005ccc:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8005cd0:	4b3b      	ldr	r3, [pc, #236]	@ (8005dc0 <HAL_RCC_OscConfig+0x330>)
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005cd8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8005cdc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8005ce0:	fa92 f2a2 	rbit	r2, r2
 8005ce4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8005ce8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8005cec:	fab2 f282 	clz	r2, r2
 8005cf0:	b2d2      	uxtb	r2, r2
 8005cf2:	f042 0220 	orr.w	r2, r2, #32
 8005cf6:	b2d2      	uxtb	r2, r2
 8005cf8:	f002 021f 	and.w	r2, r2, #31
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8005d02:	4013      	ands	r3, r2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d0ab      	beq.n	8005c60 <HAL_RCC_OscConfig+0x1d0>
 8005d08:	e05d      	b.n	8005dc6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d0a:	f7fd f93d 	bl	8002f88 <HAL_GetTick>
 8005d0e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d12:	e00a      	b.n	8005d2a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d14:	f7fd f938 	bl	8002f88 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	2b64      	cmp	r3, #100	@ 0x64
 8005d22:	d902      	bls.n	8005d2a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	f000 bee9 	b.w	8006afc <HAL_RCC_OscConfig+0x106c>
 8005d2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005d2e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d32:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005d36:	fa93 f3a3 	rbit	r3, r3
 8005d3a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8005d3e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d42:	fab3 f383 	clz	r3, r3
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	095b      	lsrs	r3, r3, #5
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	f043 0301 	orr.w	r3, r3, #1
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d102      	bne.n	8005d5c <HAL_RCC_OscConfig+0x2cc>
 8005d56:	4b1a      	ldr	r3, [pc, #104]	@ (8005dc0 <HAL_RCC_OscConfig+0x330>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	e015      	b.n	8005d88 <HAL_RCC_OscConfig+0x2f8>
 8005d5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005d60:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d64:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8005d68:	fa93 f3a3 	rbit	r3, r3
 8005d6c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8005d70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005d74:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8005d78:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8005d7c:	fa93 f3a3 	rbit	r3, r3
 8005d80:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8005d84:	4b0e      	ldr	r3, [pc, #56]	@ (8005dc0 <HAL_RCC_OscConfig+0x330>)
 8005d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d88:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005d8c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8005d90:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8005d94:	fa92 f2a2 	rbit	r2, r2
 8005d98:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8005d9c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8005da0:	fab2 f282 	clz	r2, r2
 8005da4:	b2d2      	uxtb	r2, r2
 8005da6:	f042 0220 	orr.w	r2, r2, #32
 8005daa:	b2d2      	uxtb	r2, r2
 8005dac:	f002 021f 	and.w	r2, r2, #31
 8005db0:	2101      	movs	r1, #1
 8005db2:	fa01 f202 	lsl.w	r2, r1, r2
 8005db6:	4013      	ands	r3, r2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1ab      	bne.n	8005d14 <HAL_RCC_OscConfig+0x284>
 8005dbc:	e003      	b.n	8005dc6 <HAL_RCC_OscConfig+0x336>
 8005dbe:	bf00      	nop
 8005dc0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005dca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f000 817d 	beq.w	80060d6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005ddc:	4ba6      	ldr	r3, [pc, #664]	@ (8006078 <HAL_RCC_OscConfig+0x5e8>)
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f003 030c 	and.w	r3, r3, #12
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00b      	beq.n	8005e00 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005de8:	4ba3      	ldr	r3, [pc, #652]	@ (8006078 <HAL_RCC_OscConfig+0x5e8>)
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f003 030c 	and.w	r3, r3, #12
 8005df0:	2b08      	cmp	r3, #8
 8005df2:	d172      	bne.n	8005eda <HAL_RCC_OscConfig+0x44a>
 8005df4:	4ba0      	ldr	r3, [pc, #640]	@ (8006078 <HAL_RCC_OscConfig+0x5e8>)
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d16c      	bne.n	8005eda <HAL_RCC_OscConfig+0x44a>
 8005e00:	2302      	movs	r3, #2
 8005e02:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e06:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8005e0a:	fa93 f3a3 	rbit	r3, r3
 8005e0e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8005e12:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e16:	fab3 f383 	clz	r3, r3
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	095b      	lsrs	r3, r3, #5
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	f043 0301 	orr.w	r3, r3, #1
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d102      	bne.n	8005e30 <HAL_RCC_OscConfig+0x3a0>
 8005e2a:	4b93      	ldr	r3, [pc, #588]	@ (8006078 <HAL_RCC_OscConfig+0x5e8>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	e013      	b.n	8005e58 <HAL_RCC_OscConfig+0x3c8>
 8005e30:	2302      	movs	r3, #2
 8005e32:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e36:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8005e3a:	fa93 f3a3 	rbit	r3, r3
 8005e3e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8005e42:	2302      	movs	r3, #2
 8005e44:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8005e48:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005e4c:	fa93 f3a3 	rbit	r3, r3
 8005e50:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8005e54:	4b88      	ldr	r3, [pc, #544]	@ (8006078 <HAL_RCC_OscConfig+0x5e8>)
 8005e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e58:	2202      	movs	r2, #2
 8005e5a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8005e5e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8005e62:	fa92 f2a2 	rbit	r2, r2
 8005e66:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8005e6a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8005e6e:	fab2 f282 	clz	r2, r2
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	f042 0220 	orr.w	r2, r2, #32
 8005e78:	b2d2      	uxtb	r2, r2
 8005e7a:	f002 021f 	and.w	r2, r2, #31
 8005e7e:	2101      	movs	r1, #1
 8005e80:	fa01 f202 	lsl.w	r2, r1, r2
 8005e84:	4013      	ands	r3, r2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00a      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x410>
 8005e8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d002      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	f000 be2e 	b.w	8006afc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ea0:	4b75      	ldr	r3, [pc, #468]	@ (8006078 <HAL_RCC_OscConfig+0x5e8>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005eac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	21f8      	movs	r1, #248	@ 0xf8
 8005eb6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eba:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8005ebe:	fa91 f1a1 	rbit	r1, r1
 8005ec2:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8005ec6:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8005eca:	fab1 f181 	clz	r1, r1
 8005ece:	b2c9      	uxtb	r1, r1
 8005ed0:	408b      	lsls	r3, r1
 8005ed2:	4969      	ldr	r1, [pc, #420]	@ (8006078 <HAL_RCC_OscConfig+0x5e8>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ed8:	e0fd      	b.n	80060d6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005eda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ede:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f000 8088 	beq.w	8005ffc <HAL_RCC_OscConfig+0x56c>
 8005eec:	2301      	movs	r3, #1
 8005eee:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8005ef6:	fa93 f3a3 	rbit	r3, r3
 8005efa:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8005efe:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f02:	fab3 f383 	clz	r3, r3
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005f0c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	461a      	mov	r2, r3
 8005f14:	2301      	movs	r3, #1
 8005f16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f18:	f7fd f836 	bl	8002f88 <HAL_GetTick>
 8005f1c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f20:	e00a      	b.n	8005f38 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f22:	f7fd f831 	bl	8002f88 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d902      	bls.n	8005f38 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	f000 bde2 	b.w	8006afc <HAL_RCC_OscConfig+0x106c>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f3e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8005f42:	fa93 f3a3 	rbit	r3, r3
 8005f46:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8005f4a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f4e:	fab3 f383 	clz	r3, r3
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	095b      	lsrs	r3, r3, #5
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	f043 0301 	orr.w	r3, r3, #1
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d102      	bne.n	8005f68 <HAL_RCC_OscConfig+0x4d8>
 8005f62:	4b45      	ldr	r3, [pc, #276]	@ (8006078 <HAL_RCC_OscConfig+0x5e8>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	e013      	b.n	8005f90 <HAL_RCC_OscConfig+0x500>
 8005f68:	2302      	movs	r3, #2
 8005f6a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f6e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8005f72:	fa93 f3a3 	rbit	r3, r3
 8005f76:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8005f80:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8005f84:	fa93 f3a3 	rbit	r3, r3
 8005f88:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8005f8c:	4b3a      	ldr	r3, [pc, #232]	@ (8006078 <HAL_RCC_OscConfig+0x5e8>)
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f90:	2202      	movs	r2, #2
 8005f92:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8005f96:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8005f9a:	fa92 f2a2 	rbit	r2, r2
 8005f9e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8005fa2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8005fa6:	fab2 f282 	clz	r2, r2
 8005faa:	b2d2      	uxtb	r2, r2
 8005fac:	f042 0220 	orr.w	r2, r2, #32
 8005fb0:	b2d2      	uxtb	r2, r2
 8005fb2:	f002 021f 	and.w	r2, r2, #31
 8005fb6:	2101      	movs	r1, #1
 8005fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d0af      	beq.n	8005f22 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fc2:	4b2d      	ldr	r3, [pc, #180]	@ (8006078 <HAL_RCC_OscConfig+0x5e8>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005fce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	21f8      	movs	r1, #248	@ 0xf8
 8005fd8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fdc:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8005fe0:	fa91 f1a1 	rbit	r1, r1
 8005fe4:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8005fe8:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8005fec:	fab1 f181 	clz	r1, r1
 8005ff0:	b2c9      	uxtb	r1, r1
 8005ff2:	408b      	lsls	r3, r1
 8005ff4:	4920      	ldr	r1, [pc, #128]	@ (8006078 <HAL_RCC_OscConfig+0x5e8>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	600b      	str	r3, [r1, #0]
 8005ffa:	e06c      	b.n	80060d6 <HAL_RCC_OscConfig+0x646>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006002:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006006:	fa93 f3a3 	rbit	r3, r3
 800600a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800600e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006012:	fab3 f383 	clz	r3, r3
 8006016:	b2db      	uxtb	r3, r3
 8006018:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800601c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	461a      	mov	r2, r3
 8006024:	2300      	movs	r3, #0
 8006026:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006028:	f7fc ffae 	bl	8002f88 <HAL_GetTick>
 800602c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006030:	e00a      	b.n	8006048 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006032:	f7fc ffa9 	bl	8002f88 <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d902      	bls.n	8006048 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	f000 bd5a 	b.w	8006afc <HAL_RCC_OscConfig+0x106c>
 8006048:	2302      	movs	r3, #2
 800604a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800604e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006052:	fa93 f3a3 	rbit	r3, r3
 8006056:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800605a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800605e:	fab3 f383 	clz	r3, r3
 8006062:	b2db      	uxtb	r3, r3
 8006064:	095b      	lsrs	r3, r3, #5
 8006066:	b2db      	uxtb	r3, r3
 8006068:	f043 0301 	orr.w	r3, r3, #1
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b01      	cmp	r3, #1
 8006070:	d104      	bne.n	800607c <HAL_RCC_OscConfig+0x5ec>
 8006072:	4b01      	ldr	r3, [pc, #4]	@ (8006078 <HAL_RCC_OscConfig+0x5e8>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	e015      	b.n	80060a4 <HAL_RCC_OscConfig+0x614>
 8006078:	40021000 	.word	0x40021000
 800607c:	2302      	movs	r3, #2
 800607e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006082:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006086:	fa93 f3a3 	rbit	r3, r3
 800608a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800608e:	2302      	movs	r3, #2
 8006090:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8006094:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006098:	fa93 f3a3 	rbit	r3, r3
 800609c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80060a0:	4bc8      	ldr	r3, [pc, #800]	@ (80063c4 <HAL_RCC_OscConfig+0x934>)
 80060a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a4:	2202      	movs	r2, #2
 80060a6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80060aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80060ae:	fa92 f2a2 	rbit	r2, r2
 80060b2:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80060b6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80060ba:	fab2 f282 	clz	r2, r2
 80060be:	b2d2      	uxtb	r2, r2
 80060c0:	f042 0220 	orr.w	r2, r2, #32
 80060c4:	b2d2      	uxtb	r2, r2
 80060c6:	f002 021f 	and.w	r2, r2, #31
 80060ca:	2101      	movs	r1, #1
 80060cc:	fa01 f202 	lsl.w	r2, r1, r2
 80060d0:	4013      	ands	r3, r2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1ad      	bne.n	8006032 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0308 	and.w	r3, r3, #8
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f000 8110 	beq.w	800630c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d079      	beq.n	80061f0 <HAL_RCC_OscConfig+0x760>
 80060fc:	2301      	movs	r3, #1
 80060fe:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006102:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006106:	fa93 f3a3 	rbit	r3, r3
 800610a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800610e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006112:	fab3 f383 	clz	r3, r3
 8006116:	b2db      	uxtb	r3, r3
 8006118:	461a      	mov	r2, r3
 800611a:	4bab      	ldr	r3, [pc, #684]	@ (80063c8 <HAL_RCC_OscConfig+0x938>)
 800611c:	4413      	add	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	461a      	mov	r2, r3
 8006122:	2301      	movs	r3, #1
 8006124:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006126:	f7fc ff2f 	bl	8002f88 <HAL_GetTick>
 800612a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800612e:	e00a      	b.n	8006146 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006130:	f7fc ff2a 	bl	8002f88 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	2b02      	cmp	r3, #2
 800613e:	d902      	bls.n	8006146 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	f000 bcdb 	b.w	8006afc <HAL_RCC_OscConfig+0x106c>
 8006146:	2302      	movs	r3, #2
 8006148:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800614c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006150:	fa93 f3a3 	rbit	r3, r3
 8006154:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006158:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800615c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006160:	2202      	movs	r2, #2
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006168:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	fa93 f2a3 	rbit	r2, r3
 8006172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006176:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800617a:	601a      	str	r2, [r3, #0]
 800617c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006180:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006184:	2202      	movs	r2, #2
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800618c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	fa93 f2a3 	rbit	r2, r3
 8006196:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800619a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800619e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061a0:	4b88      	ldr	r3, [pc, #544]	@ (80063c4 <HAL_RCC_OscConfig+0x934>)
 80061a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80061ac:	2102      	movs	r1, #2
 80061ae:	6019      	str	r1, [r3, #0]
 80061b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061b4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	fa93 f1a3 	rbit	r1, r3
 80061be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80061c6:	6019      	str	r1, [r3, #0]
  return result;
 80061c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061cc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	fab3 f383 	clz	r3, r3
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	f003 031f 	and.w	r3, r3, #31
 80061e2:	2101      	movs	r1, #1
 80061e4:	fa01 f303 	lsl.w	r3, r1, r3
 80061e8:	4013      	ands	r3, r2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d0a0      	beq.n	8006130 <HAL_RCC_OscConfig+0x6a0>
 80061ee:	e08d      	b.n	800630c <HAL_RCC_OscConfig+0x87c>
 80061f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061f4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80061f8:	2201      	movs	r2, #1
 80061fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006200:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	fa93 f2a3 	rbit	r2, r3
 800620a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800620e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006212:	601a      	str	r2, [r3, #0]
  return result;
 8006214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006218:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800621c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800621e:	fab3 f383 	clz	r3, r3
 8006222:	b2db      	uxtb	r3, r3
 8006224:	461a      	mov	r2, r3
 8006226:	4b68      	ldr	r3, [pc, #416]	@ (80063c8 <HAL_RCC_OscConfig+0x938>)
 8006228:	4413      	add	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	461a      	mov	r2, r3
 800622e:	2300      	movs	r3, #0
 8006230:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006232:	f7fc fea9 	bl	8002f88 <HAL_GetTick>
 8006236:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800623a:	e00a      	b.n	8006252 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800623c:	f7fc fea4 	bl	8002f88 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	2b02      	cmp	r3, #2
 800624a:	d902      	bls.n	8006252 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	f000 bc55 	b.w	8006afc <HAL_RCC_OscConfig+0x106c>
 8006252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006256:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800625a:	2202      	movs	r2, #2
 800625c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800625e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006262:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	fa93 f2a3 	rbit	r2, r3
 800626c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006270:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006274:	601a      	str	r2, [r3, #0]
 8006276:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800627a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800627e:	2202      	movs	r2, #2
 8006280:	601a      	str	r2, [r3, #0]
 8006282:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006286:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	fa93 f2a3 	rbit	r2, r3
 8006290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006294:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800629e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80062a2:	2202      	movs	r2, #2
 80062a4:	601a      	str	r2, [r3, #0]
 80062a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062aa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	fa93 f2a3 	rbit	r2, r3
 80062b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062b8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80062bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062be:	4b41      	ldr	r3, [pc, #260]	@ (80063c4 <HAL_RCC_OscConfig+0x934>)
 80062c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80062c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062c6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80062ca:	2102      	movs	r1, #2
 80062cc:	6019      	str	r1, [r3, #0]
 80062ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062d2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	fa93 f1a3 	rbit	r1, r3
 80062dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80062e4:	6019      	str	r1, [r3, #0]
  return result;
 80062e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062ea:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	fab3 f383 	clz	r3, r3
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	f003 031f 	and.w	r3, r3, #31
 8006300:	2101      	movs	r1, #1
 8006302:	fa01 f303 	lsl.w	r3, r1, r3
 8006306:	4013      	ands	r3, r2
 8006308:	2b00      	cmp	r3, #0
 800630a:	d197      	bne.n	800623c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800630c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006310:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0304 	and.w	r3, r3, #4
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 81a1 	beq.w	8006664 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006322:	2300      	movs	r3, #0
 8006324:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006328:	4b26      	ldr	r3, [pc, #152]	@ (80063c4 <HAL_RCC_OscConfig+0x934>)
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d116      	bne.n	8006362 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006334:	4b23      	ldr	r3, [pc, #140]	@ (80063c4 <HAL_RCC_OscConfig+0x934>)
 8006336:	69db      	ldr	r3, [r3, #28]
 8006338:	4a22      	ldr	r2, [pc, #136]	@ (80063c4 <HAL_RCC_OscConfig+0x934>)
 800633a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800633e:	61d3      	str	r3, [r2, #28]
 8006340:	4b20      	ldr	r3, [pc, #128]	@ (80063c4 <HAL_RCC_OscConfig+0x934>)
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8006348:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800634c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006356:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800635a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800635c:	2301      	movs	r3, #1
 800635e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006362:	4b1a      	ldr	r3, [pc, #104]	@ (80063cc <HAL_RCC_OscConfig+0x93c>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800636a:	2b00      	cmp	r3, #0
 800636c:	d11a      	bne.n	80063a4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800636e:	4b17      	ldr	r3, [pc, #92]	@ (80063cc <HAL_RCC_OscConfig+0x93c>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a16      	ldr	r2, [pc, #88]	@ (80063cc <HAL_RCC_OscConfig+0x93c>)
 8006374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006378:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800637a:	f7fc fe05 	bl	8002f88 <HAL_GetTick>
 800637e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006382:	e009      	b.n	8006398 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006384:	f7fc fe00 	bl	8002f88 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b64      	cmp	r3, #100	@ 0x64
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e3b1      	b.n	8006afc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006398:	4b0c      	ldr	r3, [pc, #48]	@ (80063cc <HAL_RCC_OscConfig+0x93c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0ef      	beq.n	8006384 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d10d      	bne.n	80063d0 <HAL_RCC_OscConfig+0x940>
 80063b4:	4b03      	ldr	r3, [pc, #12]	@ (80063c4 <HAL_RCC_OscConfig+0x934>)
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	4a02      	ldr	r2, [pc, #8]	@ (80063c4 <HAL_RCC_OscConfig+0x934>)
 80063ba:	f043 0301 	orr.w	r3, r3, #1
 80063be:	6213      	str	r3, [r2, #32]
 80063c0:	e03c      	b.n	800643c <HAL_RCC_OscConfig+0x9ac>
 80063c2:	bf00      	nop
 80063c4:	40021000 	.word	0x40021000
 80063c8:	10908120 	.word	0x10908120
 80063cc:	40007000 	.word	0x40007000
 80063d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10c      	bne.n	80063fa <HAL_RCC_OscConfig+0x96a>
 80063e0:	4bc1      	ldr	r3, [pc, #772]	@ (80066e8 <HAL_RCC_OscConfig+0xc58>)
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	4ac0      	ldr	r2, [pc, #768]	@ (80066e8 <HAL_RCC_OscConfig+0xc58>)
 80063e6:	f023 0301 	bic.w	r3, r3, #1
 80063ea:	6213      	str	r3, [r2, #32]
 80063ec:	4bbe      	ldr	r3, [pc, #760]	@ (80066e8 <HAL_RCC_OscConfig+0xc58>)
 80063ee:	6a1b      	ldr	r3, [r3, #32]
 80063f0:	4abd      	ldr	r2, [pc, #756]	@ (80066e8 <HAL_RCC_OscConfig+0xc58>)
 80063f2:	f023 0304 	bic.w	r3, r3, #4
 80063f6:	6213      	str	r3, [r2, #32]
 80063f8:	e020      	b.n	800643c <HAL_RCC_OscConfig+0x9ac>
 80063fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	2b05      	cmp	r3, #5
 8006408:	d10c      	bne.n	8006424 <HAL_RCC_OscConfig+0x994>
 800640a:	4bb7      	ldr	r3, [pc, #732]	@ (80066e8 <HAL_RCC_OscConfig+0xc58>)
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	4ab6      	ldr	r2, [pc, #728]	@ (80066e8 <HAL_RCC_OscConfig+0xc58>)
 8006410:	f043 0304 	orr.w	r3, r3, #4
 8006414:	6213      	str	r3, [r2, #32]
 8006416:	4bb4      	ldr	r3, [pc, #720]	@ (80066e8 <HAL_RCC_OscConfig+0xc58>)
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	4ab3      	ldr	r2, [pc, #716]	@ (80066e8 <HAL_RCC_OscConfig+0xc58>)
 800641c:	f043 0301 	orr.w	r3, r3, #1
 8006420:	6213      	str	r3, [r2, #32]
 8006422:	e00b      	b.n	800643c <HAL_RCC_OscConfig+0x9ac>
 8006424:	4bb0      	ldr	r3, [pc, #704]	@ (80066e8 <HAL_RCC_OscConfig+0xc58>)
 8006426:	6a1b      	ldr	r3, [r3, #32]
 8006428:	4aaf      	ldr	r2, [pc, #700]	@ (80066e8 <HAL_RCC_OscConfig+0xc58>)
 800642a:	f023 0301 	bic.w	r3, r3, #1
 800642e:	6213      	str	r3, [r2, #32]
 8006430:	4bad      	ldr	r3, [pc, #692]	@ (80066e8 <HAL_RCC_OscConfig+0xc58>)
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	4aac      	ldr	r2, [pc, #688]	@ (80066e8 <HAL_RCC_OscConfig+0xc58>)
 8006436:	f023 0304 	bic.w	r3, r3, #4
 800643a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800643c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006440:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	f000 8081 	beq.w	8006550 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800644e:	f7fc fd9b 	bl	8002f88 <HAL_GetTick>
 8006452:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006456:	e00b      	b.n	8006470 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006458:	f7fc fd96 	bl	8002f88 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006468:	4293      	cmp	r3, r2
 800646a:	d901      	bls.n	8006470 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e345      	b.n	8006afc <HAL_RCC_OscConfig+0x106c>
 8006470:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006474:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006478:	2202      	movs	r2, #2
 800647a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800647c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006480:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	fa93 f2a3 	rbit	r2, r3
 800648a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800648e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006498:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800649c:	2202      	movs	r2, #2
 800649e:	601a      	str	r2, [r3, #0]
 80064a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064a4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	fa93 f2a3 	rbit	r2, r3
 80064ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064b2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80064b6:	601a      	str	r2, [r3, #0]
  return result;
 80064b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064bc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80064c0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064c2:	fab3 f383 	clz	r3, r3
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	095b      	lsrs	r3, r3, #5
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	f043 0302 	orr.w	r3, r3, #2
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d102      	bne.n	80064dc <HAL_RCC_OscConfig+0xa4c>
 80064d6:	4b84      	ldr	r3, [pc, #528]	@ (80066e8 <HAL_RCC_OscConfig+0xc58>)
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	e013      	b.n	8006504 <HAL_RCC_OscConfig+0xa74>
 80064dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064e0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80064e4:	2202      	movs	r2, #2
 80064e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064ec:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	fa93 f2a3 	rbit	r2, r3
 80064f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064fa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	4b79      	ldr	r3, [pc, #484]	@ (80066e8 <HAL_RCC_OscConfig+0xc58>)
 8006502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006504:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006508:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800650c:	2102      	movs	r1, #2
 800650e:	6011      	str	r1, [r2, #0]
 8006510:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006514:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8006518:	6812      	ldr	r2, [r2, #0]
 800651a:	fa92 f1a2 	rbit	r1, r2
 800651e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006522:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8006526:	6011      	str	r1, [r2, #0]
  return result;
 8006528:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800652c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8006530:	6812      	ldr	r2, [r2, #0]
 8006532:	fab2 f282 	clz	r2, r2
 8006536:	b2d2      	uxtb	r2, r2
 8006538:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800653c:	b2d2      	uxtb	r2, r2
 800653e:	f002 021f 	and.w	r2, r2, #31
 8006542:	2101      	movs	r1, #1
 8006544:	fa01 f202 	lsl.w	r2, r1, r2
 8006548:	4013      	ands	r3, r2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d084      	beq.n	8006458 <HAL_RCC_OscConfig+0x9c8>
 800654e:	e07f      	b.n	8006650 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006550:	f7fc fd1a 	bl	8002f88 <HAL_GetTick>
 8006554:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006558:	e00b      	b.n	8006572 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800655a:	f7fc fd15 	bl	8002f88 <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800656a:	4293      	cmp	r3, r2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e2c4      	b.n	8006afc <HAL_RCC_OscConfig+0x106c>
 8006572:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006576:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800657a:	2202      	movs	r2, #2
 800657c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800657e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006582:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	fa93 f2a3 	rbit	r2, r3
 800658c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006590:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8006594:	601a      	str	r2, [r3, #0]
 8006596:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800659a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800659e:	2202      	movs	r2, #2
 80065a0:	601a      	str	r2, [r3, #0]
 80065a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065a6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	fa93 f2a3 	rbit	r2, r3
 80065b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065b4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80065b8:	601a      	str	r2, [r3, #0]
  return result;
 80065ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065be:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80065c2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065c4:	fab3 f383 	clz	r3, r3
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	095b      	lsrs	r3, r3, #5
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	f043 0302 	orr.w	r3, r3, #2
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d102      	bne.n	80065de <HAL_RCC_OscConfig+0xb4e>
 80065d8:	4b43      	ldr	r3, [pc, #268]	@ (80066e8 <HAL_RCC_OscConfig+0xc58>)
 80065da:	6a1b      	ldr	r3, [r3, #32]
 80065dc:	e013      	b.n	8006606 <HAL_RCC_OscConfig+0xb76>
 80065de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065e2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80065e6:	2202      	movs	r2, #2
 80065e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065ee:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	fa93 f2a3 	rbit	r2, r3
 80065f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065fc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8006600:	601a      	str	r2, [r3, #0]
 8006602:	4b39      	ldr	r3, [pc, #228]	@ (80066e8 <HAL_RCC_OscConfig+0xc58>)
 8006604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006606:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800660a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800660e:	2102      	movs	r1, #2
 8006610:	6011      	str	r1, [r2, #0]
 8006612:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006616:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800661a:	6812      	ldr	r2, [r2, #0]
 800661c:	fa92 f1a2 	rbit	r1, r2
 8006620:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006624:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8006628:	6011      	str	r1, [r2, #0]
  return result;
 800662a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800662e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8006632:	6812      	ldr	r2, [r2, #0]
 8006634:	fab2 f282 	clz	r2, r2
 8006638:	b2d2      	uxtb	r2, r2
 800663a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800663e:	b2d2      	uxtb	r2, r2
 8006640:	f002 021f 	and.w	r2, r2, #31
 8006644:	2101      	movs	r1, #1
 8006646:	fa01 f202 	lsl.w	r2, r1, r2
 800664a:	4013      	ands	r3, r2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d184      	bne.n	800655a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006650:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8006654:	2b01      	cmp	r3, #1
 8006656:	d105      	bne.n	8006664 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006658:	4b23      	ldr	r3, [pc, #140]	@ (80066e8 <HAL_RCC_OscConfig+0xc58>)
 800665a:	69db      	ldr	r3, [r3, #28]
 800665c:	4a22      	ldr	r2, [pc, #136]	@ (80066e8 <HAL_RCC_OscConfig+0xc58>)
 800665e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006662:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006668:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	69db      	ldr	r3, [r3, #28]
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 8242 	beq.w	8006afa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006676:	4b1c      	ldr	r3, [pc, #112]	@ (80066e8 <HAL_RCC_OscConfig+0xc58>)
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f003 030c 	and.w	r3, r3, #12
 800667e:	2b08      	cmp	r3, #8
 8006680:	f000 8213 	beq.w	8006aaa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006688:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	69db      	ldr	r3, [r3, #28]
 8006690:	2b02      	cmp	r3, #2
 8006692:	f040 8162 	bne.w	800695a <HAL_RCC_OscConfig+0xeca>
 8006696:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800669a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800669e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80066a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066a8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	fa93 f2a3 	rbit	r2, r3
 80066b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066b6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80066ba:	601a      	str	r2, [r3, #0]
  return result;
 80066bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066c0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80066c4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066c6:	fab3 f383 	clz	r3, r3
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80066d0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	461a      	mov	r2, r3
 80066d8:	2300      	movs	r3, #0
 80066da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066dc:	f7fc fc54 	bl	8002f88 <HAL_GetTick>
 80066e0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80066e4:	e00c      	b.n	8006700 <HAL_RCC_OscConfig+0xc70>
 80066e6:	bf00      	nop
 80066e8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066ec:	f7fc fc4c 	bl	8002f88 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d901      	bls.n	8006700 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e1fd      	b.n	8006afc <HAL_RCC_OscConfig+0x106c>
 8006700:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006704:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006708:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800670c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800670e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006712:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	fa93 f2a3 	rbit	r2, r3
 800671c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006720:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8006724:	601a      	str	r2, [r3, #0]
  return result;
 8006726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800672a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800672e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006730:	fab3 f383 	clz	r3, r3
 8006734:	b2db      	uxtb	r3, r3
 8006736:	095b      	lsrs	r3, r3, #5
 8006738:	b2db      	uxtb	r3, r3
 800673a:	f043 0301 	orr.w	r3, r3, #1
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b01      	cmp	r3, #1
 8006742:	d102      	bne.n	800674a <HAL_RCC_OscConfig+0xcba>
 8006744:	4bb0      	ldr	r3, [pc, #704]	@ (8006a08 <HAL_RCC_OscConfig+0xf78>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	e027      	b.n	800679a <HAL_RCC_OscConfig+0xd0a>
 800674a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800674e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8006752:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006756:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800675c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	fa93 f2a3 	rbit	r2, r3
 8006766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800676a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800676e:	601a      	str	r2, [r3, #0]
 8006770:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006774:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8006778:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800677c:	601a      	str	r2, [r3, #0]
 800677e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006782:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	fa93 f2a3 	rbit	r2, r3
 800678c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006790:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006794:	601a      	str	r2, [r3, #0]
 8006796:	4b9c      	ldr	r3, [pc, #624]	@ (8006a08 <HAL_RCC_OscConfig+0xf78>)
 8006798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800679a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800679e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80067a2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80067a6:	6011      	str	r1, [r2, #0]
 80067a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80067ac:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80067b0:	6812      	ldr	r2, [r2, #0]
 80067b2:	fa92 f1a2 	rbit	r1, r2
 80067b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80067ba:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80067be:	6011      	str	r1, [r2, #0]
  return result;
 80067c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80067c4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80067c8:	6812      	ldr	r2, [r2, #0]
 80067ca:	fab2 f282 	clz	r2, r2
 80067ce:	b2d2      	uxtb	r2, r2
 80067d0:	f042 0220 	orr.w	r2, r2, #32
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	f002 021f 	and.w	r2, r2, #31
 80067da:	2101      	movs	r1, #1
 80067dc:	fa01 f202 	lsl.w	r2, r1, r2
 80067e0:	4013      	ands	r3, r2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d182      	bne.n	80066ec <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067e6:	4b88      	ldr	r3, [pc, #544]	@ (8006a08 <HAL_RCC_OscConfig+0xf78>)
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80067ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80067fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	430b      	orrs	r3, r1
 8006808:	497f      	ldr	r1, [pc, #508]	@ (8006a08 <HAL_RCC_OscConfig+0xf78>)
 800680a:	4313      	orrs	r3, r2
 800680c:	604b      	str	r3, [r1, #4]
 800680e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006812:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8006816:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800681a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800681c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006820:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	fa93 f2a3 	rbit	r2, r3
 800682a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800682e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8006832:	601a      	str	r2, [r3, #0]
  return result;
 8006834:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006838:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800683c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800683e:	fab3 f383 	clz	r3, r3
 8006842:	b2db      	uxtb	r3, r3
 8006844:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006848:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	461a      	mov	r2, r3
 8006850:	2301      	movs	r3, #1
 8006852:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006854:	f7fc fb98 	bl	8002f88 <HAL_GetTick>
 8006858:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800685c:	e009      	b.n	8006872 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800685e:	f7fc fb93 	bl	8002f88 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b02      	cmp	r3, #2
 800686c:	d901      	bls.n	8006872 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e144      	b.n	8006afc <HAL_RCC_OscConfig+0x106c>
 8006872:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006876:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800687a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800687e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006880:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006884:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	fa93 f2a3 	rbit	r2, r3
 800688e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006892:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006896:	601a      	str	r2, [r3, #0]
  return result;
 8006898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800689c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80068a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068a2:	fab3 f383 	clz	r3, r3
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	095b      	lsrs	r3, r3, #5
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	f043 0301 	orr.w	r3, r3, #1
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d102      	bne.n	80068bc <HAL_RCC_OscConfig+0xe2c>
 80068b6:	4b54      	ldr	r3, [pc, #336]	@ (8006a08 <HAL_RCC_OscConfig+0xf78>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	e027      	b.n	800690c <HAL_RCC_OscConfig+0xe7c>
 80068bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068c0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80068c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80068c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068ce:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	fa93 f2a3 	rbit	r2, r3
 80068d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068dc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80068e0:	601a      	str	r2, [r3, #0]
 80068e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068e6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80068ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068f4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	fa93 f2a3 	rbit	r2, r3
 80068fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006902:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8006906:	601a      	str	r2, [r3, #0]
 8006908:	4b3f      	ldr	r3, [pc, #252]	@ (8006a08 <HAL_RCC_OscConfig+0xf78>)
 800690a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800690c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006910:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8006914:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006918:	6011      	str	r1, [r2, #0]
 800691a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800691e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8006922:	6812      	ldr	r2, [r2, #0]
 8006924:	fa92 f1a2 	rbit	r1, r2
 8006928:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800692c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006930:	6011      	str	r1, [r2, #0]
  return result;
 8006932:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006936:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800693a:	6812      	ldr	r2, [r2, #0]
 800693c:	fab2 f282 	clz	r2, r2
 8006940:	b2d2      	uxtb	r2, r2
 8006942:	f042 0220 	orr.w	r2, r2, #32
 8006946:	b2d2      	uxtb	r2, r2
 8006948:	f002 021f 	and.w	r2, r2, #31
 800694c:	2101      	movs	r1, #1
 800694e:	fa01 f202 	lsl.w	r2, r1, r2
 8006952:	4013      	ands	r3, r2
 8006954:	2b00      	cmp	r3, #0
 8006956:	d082      	beq.n	800685e <HAL_RCC_OscConfig+0xdce>
 8006958:	e0cf      	b.n	8006afa <HAL_RCC_OscConfig+0x106a>
 800695a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800695e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006962:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006966:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800696c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	fa93 f2a3 	rbit	r2, r3
 8006976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800697a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800697e:	601a      	str	r2, [r3, #0]
  return result;
 8006980:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006984:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006988:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800698a:	fab3 f383 	clz	r3, r3
 800698e:	b2db      	uxtb	r3, r3
 8006990:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006994:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	461a      	mov	r2, r3
 800699c:	2300      	movs	r3, #0
 800699e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069a0:	f7fc faf2 	bl	8002f88 <HAL_GetTick>
 80069a4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069a8:	e009      	b.n	80069be <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069aa:	f7fc faed 	bl	8002f88 <HAL_GetTick>
 80069ae:	4602      	mov	r2, r0
 80069b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d901      	bls.n	80069be <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e09e      	b.n	8006afc <HAL_RCC_OscConfig+0x106c>
 80069be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069c2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80069c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80069ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069d0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	fa93 f2a3 	rbit	r2, r3
 80069da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069de:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80069e2:	601a      	str	r2, [r3, #0]
  return result;
 80069e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069e8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80069ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069ee:	fab3 f383 	clz	r3, r3
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	095b      	lsrs	r3, r3, #5
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	f043 0301 	orr.w	r3, r3, #1
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d104      	bne.n	8006a0c <HAL_RCC_OscConfig+0xf7c>
 8006a02:	4b01      	ldr	r3, [pc, #4]	@ (8006a08 <HAL_RCC_OscConfig+0xf78>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	e029      	b.n	8006a5c <HAL_RCC_OscConfig+0xfcc>
 8006a08:	40021000 	.word	0x40021000
 8006a0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a10:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006a14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006a18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a1e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	fa93 f2a3 	rbit	r2, r3
 8006a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a2c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8006a30:	601a      	str	r2, [r3, #0]
 8006a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a36:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8006a3a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a44:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	fa93 f2a3 	rbit	r2, r3
 8006a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a52:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8006a56:	601a      	str	r2, [r3, #0]
 8006a58:	4b2b      	ldr	r3, [pc, #172]	@ (8006b08 <HAL_RCC_OscConfig+0x1078>)
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a5c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006a60:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8006a64:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006a68:	6011      	str	r1, [r2, #0]
 8006a6a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006a6e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8006a72:	6812      	ldr	r2, [r2, #0]
 8006a74:	fa92 f1a2 	rbit	r1, r2
 8006a78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006a7c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006a80:	6011      	str	r1, [r2, #0]
  return result;
 8006a82:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006a86:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006a8a:	6812      	ldr	r2, [r2, #0]
 8006a8c:	fab2 f282 	clz	r2, r2
 8006a90:	b2d2      	uxtb	r2, r2
 8006a92:	f042 0220 	orr.w	r2, r2, #32
 8006a96:	b2d2      	uxtb	r2, r2
 8006a98:	f002 021f 	and.w	r2, r2, #31
 8006a9c:	2101      	movs	r1, #1
 8006a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d180      	bne.n	80069aa <HAL_RCC_OscConfig+0xf1a>
 8006aa8:	e027      	b.n	8006afa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006aae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d101      	bne.n	8006abe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e01e      	b.n	8006afc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006abe:	4b12      	ldr	r3, [pc, #72]	@ (8006b08 <HAL_RCC_OscConfig+0x1078>)
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006ac6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006aca:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006ace:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ad2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d10b      	bne.n	8006af6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006ade:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006ae2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006aea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d001      	beq.n	8006afa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e000      	b.n	8006afc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	40021000 	.word	0x40021000

08006b0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b09e      	sub	sp, #120	@ 0x78
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e162      	b.n	8006dea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b24:	4b90      	ldr	r3, [pc, #576]	@ (8006d68 <HAL_RCC_ClockConfig+0x25c>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0307 	and.w	r3, r3, #7
 8006b2c:	683a      	ldr	r2, [r7, #0]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d910      	bls.n	8006b54 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b32:	4b8d      	ldr	r3, [pc, #564]	@ (8006d68 <HAL_RCC_ClockConfig+0x25c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f023 0207 	bic.w	r2, r3, #7
 8006b3a:	498b      	ldr	r1, [pc, #556]	@ (8006d68 <HAL_RCC_ClockConfig+0x25c>)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b42:	4b89      	ldr	r3, [pc, #548]	@ (8006d68 <HAL_RCC_ClockConfig+0x25c>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0307 	and.w	r3, r3, #7
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d001      	beq.n	8006b54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e14a      	b.n	8006dea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0302 	and.w	r3, r3, #2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d008      	beq.n	8006b72 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b60:	4b82      	ldr	r3, [pc, #520]	@ (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	497f      	ldr	r1, [pc, #508]	@ (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 80dc 	beq.w	8006d38 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d13c      	bne.n	8006c02 <HAL_RCC_ClockConfig+0xf6>
 8006b88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006b8c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b90:	fa93 f3a3 	rbit	r3, r3
 8006b94:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8006b96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b98:	fab3 f383 	clz	r3, r3
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	095b      	lsrs	r3, r3, #5
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	f043 0301 	orr.w	r3, r3, #1
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d102      	bne.n	8006bb2 <HAL_RCC_ClockConfig+0xa6>
 8006bac:	4b6f      	ldr	r3, [pc, #444]	@ (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	e00f      	b.n	8006bd2 <HAL_RCC_ClockConfig+0xc6>
 8006bb2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006bb6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006bba:	fa93 f3a3 	rbit	r3, r3
 8006bbe:	667b      	str	r3, [r7, #100]	@ 0x64
 8006bc0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006bc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006bc8:	fa93 f3a3 	rbit	r3, r3
 8006bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bce:	4b67      	ldr	r3, [pc, #412]	@ (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006bd6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006bd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bda:	fa92 f2a2 	rbit	r2, r2
 8006bde:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8006be0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006be2:	fab2 f282 	clz	r2, r2
 8006be6:	b2d2      	uxtb	r2, r2
 8006be8:	f042 0220 	orr.w	r2, r2, #32
 8006bec:	b2d2      	uxtb	r2, r2
 8006bee:	f002 021f 	and.w	r2, r2, #31
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d17b      	bne.n	8006cf6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e0f3      	b.n	8006dea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d13c      	bne.n	8006c84 <HAL_RCC_ClockConfig+0x178>
 8006c0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c0e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c12:	fa93 f3a3 	rbit	r3, r3
 8006c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006c18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c1a:	fab3 f383 	clz	r3, r3
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	095b      	lsrs	r3, r3, #5
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	f043 0301 	orr.w	r3, r3, #1
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d102      	bne.n	8006c34 <HAL_RCC_ClockConfig+0x128>
 8006c2e:	4b4f      	ldr	r3, [pc, #316]	@ (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	e00f      	b.n	8006c54 <HAL_RCC_ClockConfig+0x148>
 8006c34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c38:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c3c:	fa93 f3a3 	rbit	r3, r3
 8006c40:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c46:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c4a:	fa93 f3a3 	rbit	r3, r3
 8006c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c50:	4b46      	ldr	r3, [pc, #280]	@ (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006c58:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006c5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c5c:	fa92 f2a2 	rbit	r2, r2
 8006c60:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8006c62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c64:	fab2 f282 	clz	r2, r2
 8006c68:	b2d2      	uxtb	r2, r2
 8006c6a:	f042 0220 	orr.w	r2, r2, #32
 8006c6e:	b2d2      	uxtb	r2, r2
 8006c70:	f002 021f 	and.w	r2, r2, #31
 8006c74:	2101      	movs	r1, #1
 8006c76:	fa01 f202 	lsl.w	r2, r1, r2
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d13a      	bne.n	8006cf6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e0b2      	b.n	8006dea <HAL_RCC_ClockConfig+0x2de>
 8006c84:	2302      	movs	r3, #2
 8006c86:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8a:	fa93 f3a3 	rbit	r3, r3
 8006c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c92:	fab3 f383 	clz	r3, r3
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	095b      	lsrs	r3, r3, #5
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	f043 0301 	orr.w	r3, r3, #1
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d102      	bne.n	8006cac <HAL_RCC_ClockConfig+0x1a0>
 8006ca6:	4b31      	ldr	r3, [pc, #196]	@ (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	e00d      	b.n	8006cc8 <HAL_RCC_ClockConfig+0x1bc>
 8006cac:	2302      	movs	r3, #2
 8006cae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb2:	fa93 f3a3 	rbit	r3, r3
 8006cb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cb8:	2302      	movs	r3, #2
 8006cba:	623b      	str	r3, [r7, #32]
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	fa93 f3a3 	rbit	r3, r3
 8006cc2:	61fb      	str	r3, [r7, #28]
 8006cc4:	4b29      	ldr	r3, [pc, #164]	@ (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc8:	2202      	movs	r2, #2
 8006cca:	61ba      	str	r2, [r7, #24]
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	fa92 f2a2 	rbit	r2, r2
 8006cd2:	617a      	str	r2, [r7, #20]
  return result;
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	fab2 f282 	clz	r2, r2
 8006cda:	b2d2      	uxtb	r2, r2
 8006cdc:	f042 0220 	orr.w	r2, r2, #32
 8006ce0:	b2d2      	uxtb	r2, r2
 8006ce2:	f002 021f 	and.w	r2, r2, #31
 8006ce6:	2101      	movs	r1, #1
 8006ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8006cec:	4013      	ands	r3, r2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d101      	bne.n	8006cf6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e079      	b.n	8006dea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f023 0203 	bic.w	r2, r3, #3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	491a      	ldr	r1, [pc, #104]	@ (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d08:	f7fc f93e 	bl	8002f88 <HAL_GetTick>
 8006d0c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d0e:	e00a      	b.n	8006d26 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d10:	f7fc f93a 	bl	8002f88 <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d901      	bls.n	8006d26 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e061      	b.n	8006dea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d26:	4b11      	ldr	r3, [pc, #68]	@ (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f003 020c 	and.w	r2, r3, #12
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d1eb      	bne.n	8006d10 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d38:	4b0b      	ldr	r3, [pc, #44]	@ (8006d68 <HAL_RCC_ClockConfig+0x25c>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0307 	and.w	r3, r3, #7
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d214      	bcs.n	8006d70 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d46:	4b08      	ldr	r3, [pc, #32]	@ (8006d68 <HAL_RCC_ClockConfig+0x25c>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f023 0207 	bic.w	r2, r3, #7
 8006d4e:	4906      	ldr	r1, [pc, #24]	@ (8006d68 <HAL_RCC_ClockConfig+0x25c>)
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d56:	4b04      	ldr	r3, [pc, #16]	@ (8006d68 <HAL_RCC_ClockConfig+0x25c>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0307 	and.w	r3, r3, #7
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d005      	beq.n	8006d70 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e040      	b.n	8006dea <HAL_RCC_ClockConfig+0x2de>
 8006d68:	40022000 	.word	0x40022000
 8006d6c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0304 	and.w	r3, r3, #4
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d008      	beq.n	8006d8e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8006df4 <HAL_RCC_ClockConfig+0x2e8>)
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	491a      	ldr	r1, [pc, #104]	@ (8006df4 <HAL_RCC_ClockConfig+0x2e8>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 0308 	and.w	r3, r3, #8
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d009      	beq.n	8006dae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d9a:	4b16      	ldr	r3, [pc, #88]	@ (8006df4 <HAL_RCC_ClockConfig+0x2e8>)
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	00db      	lsls	r3, r3, #3
 8006da8:	4912      	ldr	r1, [pc, #72]	@ (8006df4 <HAL_RCC_ClockConfig+0x2e8>)
 8006daa:	4313      	orrs	r3, r2
 8006dac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006dae:	f000 f829 	bl	8006e04 <HAL_RCC_GetSysClockFreq>
 8006db2:	4601      	mov	r1, r0
 8006db4:	4b0f      	ldr	r3, [pc, #60]	@ (8006df4 <HAL_RCC_ClockConfig+0x2e8>)
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006dbc:	22f0      	movs	r2, #240	@ 0xf0
 8006dbe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	fa92 f2a2 	rbit	r2, r2
 8006dc6:	60fa      	str	r2, [r7, #12]
  return result;
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	fab2 f282 	clz	r2, r2
 8006dce:	b2d2      	uxtb	r2, r2
 8006dd0:	40d3      	lsrs	r3, r2
 8006dd2:	4a09      	ldr	r2, [pc, #36]	@ (8006df8 <HAL_RCC_ClockConfig+0x2ec>)
 8006dd4:	5cd3      	ldrb	r3, [r2, r3]
 8006dd6:	fa21 f303 	lsr.w	r3, r1, r3
 8006dda:	4a08      	ldr	r2, [pc, #32]	@ (8006dfc <HAL_RCC_ClockConfig+0x2f0>)
 8006ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006dde:	4b08      	ldr	r3, [pc, #32]	@ (8006e00 <HAL_RCC_ClockConfig+0x2f4>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fc f88c 	bl	8002f00 <HAL_InitTick>
  
  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3778      	adds	r7, #120	@ 0x78
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	40021000 	.word	0x40021000
 8006df8:	08010bd4 	.word	0x08010bd4
 8006dfc:	20000008 	.word	0x20000008
 8006e00:	2000000c 	.word	0x2000000c

08006e04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b087      	sub	sp, #28
 8006e08:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	60fb      	str	r3, [r7, #12]
 8006e0e:	2300      	movs	r3, #0
 8006e10:	60bb      	str	r3, [r7, #8]
 8006e12:	2300      	movs	r3, #0
 8006e14:	617b      	str	r3, [r7, #20]
 8006e16:	2300      	movs	r3, #0
 8006e18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8006e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8006e98 <HAL_RCC_GetSysClockFreq+0x94>)
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f003 030c 	and.w	r3, r3, #12
 8006e2a:	2b04      	cmp	r3, #4
 8006e2c:	d002      	beq.n	8006e34 <HAL_RCC_GetSysClockFreq+0x30>
 8006e2e:	2b08      	cmp	r3, #8
 8006e30:	d003      	beq.n	8006e3a <HAL_RCC_GetSysClockFreq+0x36>
 8006e32:	e026      	b.n	8006e82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006e34:	4b19      	ldr	r3, [pc, #100]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0x98>)
 8006e36:	613b      	str	r3, [r7, #16]
      break;
 8006e38:	e026      	b.n	8006e88 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	0c9b      	lsrs	r3, r3, #18
 8006e3e:	f003 030f 	and.w	r3, r3, #15
 8006e42:	4a17      	ldr	r2, [pc, #92]	@ (8006ea0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006e44:	5cd3      	ldrb	r3, [r2, r3]
 8006e46:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8006e48:	4b13      	ldr	r3, [pc, #76]	@ (8006e98 <HAL_RCC_GetSysClockFreq+0x94>)
 8006e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e4c:	f003 030f 	and.w	r3, r3, #15
 8006e50:	4a14      	ldr	r2, [pc, #80]	@ (8006ea4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006e52:	5cd3      	ldrb	r3, [r2, r3]
 8006e54:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d008      	beq.n	8006e72 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006e60:	4a0e      	ldr	r2, [pc, #56]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0x98>)
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	fb02 f303 	mul.w	r3, r2, r3
 8006e6e:	617b      	str	r3, [r7, #20]
 8006e70:	e004      	b.n	8006e7c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a0c      	ldr	r2, [pc, #48]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006e76:	fb02 f303 	mul.w	r3, r2, r3
 8006e7a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	613b      	str	r3, [r7, #16]
      break;
 8006e80:	e002      	b.n	8006e88 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006e82:	4b06      	ldr	r3, [pc, #24]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0x98>)
 8006e84:	613b      	str	r3, [r7, #16]
      break;
 8006e86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e88:	693b      	ldr	r3, [r7, #16]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	371c      	adds	r7, #28
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	40021000 	.word	0x40021000
 8006e9c:	007a1200 	.word	0x007a1200
 8006ea0:	08010bec 	.word	0x08010bec
 8006ea4:	08010bfc 	.word	0x08010bfc
 8006ea8:	003d0900 	.word	0x003d0900

08006eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006eac:	b480      	push	{r7}
 8006eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006eb0:	4b03      	ldr	r3, [pc, #12]	@ (8006ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	20000008 	.word	0x20000008

08006ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006eca:	f7ff ffef 	bl	8006eac <HAL_RCC_GetHCLKFreq>
 8006ece:	4601      	mov	r1, r0
 8006ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8006f00 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ed8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8006edc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	fa92 f2a2 	rbit	r2, r2
 8006ee4:	603a      	str	r2, [r7, #0]
  return result;
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	fab2 f282 	clz	r2, r2
 8006eec:	b2d2      	uxtb	r2, r2
 8006eee:	40d3      	lsrs	r3, r2
 8006ef0:	4a04      	ldr	r2, [pc, #16]	@ (8006f04 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006ef2:	5cd3      	ldrb	r3, [r2, r3]
 8006ef4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	40021000 	.word	0x40021000
 8006f04:	08010be4 	.word	0x08010be4

08006f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006f0e:	f7ff ffcd 	bl	8006eac <HAL_RCC_GetHCLKFreq>
 8006f12:	4601      	mov	r1, r0
 8006f14:	4b0b      	ldr	r3, [pc, #44]	@ (8006f44 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8006f1c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8006f20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	fa92 f2a2 	rbit	r2, r2
 8006f28:	603a      	str	r2, [r7, #0]
  return result;
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	fab2 f282 	clz	r2, r2
 8006f30:	b2d2      	uxtb	r2, r2
 8006f32:	40d3      	lsrs	r3, r2
 8006f34:	4a04      	ldr	r2, [pc, #16]	@ (8006f48 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006f36:	5cd3      	ldrb	r3, [r2, r3]
 8006f38:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	40021000 	.word	0x40021000
 8006f48:	08010be4 	.word	0x08010be4

08006f4c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b092      	sub	sp, #72	@ 0x48
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f000 80d4 	beq.w	8007118 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f70:	4b4e      	ldr	r3, [pc, #312]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f72:	69db      	ldr	r3, [r3, #28]
 8006f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10e      	bne.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f7c:	4b4b      	ldr	r3, [pc, #300]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	4a4a      	ldr	r2, [pc, #296]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f86:	61d3      	str	r3, [r2, #28]
 8006f88:	4b48      	ldr	r3, [pc, #288]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f8a:	69db      	ldr	r3, [r3, #28]
 8006f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f90:	60bb      	str	r3, [r7, #8]
 8006f92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f94:	2301      	movs	r3, #1
 8006f96:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f9a:	4b45      	ldr	r3, [pc, #276]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d118      	bne.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fa6:	4b42      	ldr	r3, [pc, #264]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a41      	ldr	r2, [pc, #260]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fb0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fb2:	f7fb ffe9 	bl	8002f88 <HAL_GetTick>
 8006fb6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fb8:	e008      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fba:	f7fb ffe5 	bl	8002f88 <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	2b64      	cmp	r3, #100	@ 0x64
 8006fc6:	d901      	bls.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e169      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fcc:	4b38      	ldr	r3, [pc, #224]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d0f0      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006fd8:	4b34      	ldr	r3, [pc, #208]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 8084 	beq.w	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ff2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d07c      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ff8:	4b2c      	ldr	r3, [pc, #176]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007000:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007002:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007006:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700a:	fa93 f3a3 	rbit	r3, r3
 800700e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8007010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007012:	fab3 f383 	clz	r3, r3
 8007016:	b2db      	uxtb	r3, r3
 8007018:	461a      	mov	r2, r3
 800701a:	4b26      	ldr	r3, [pc, #152]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800701c:	4413      	add	r3, r2
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	461a      	mov	r2, r3
 8007022:	2301      	movs	r3, #1
 8007024:	6013      	str	r3, [r2, #0]
 8007026:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800702a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800702c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702e:	fa93 f3a3 	rbit	r3, r3
 8007032:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8007034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007036:	fab3 f383 	clz	r3, r3
 800703a:	b2db      	uxtb	r3, r3
 800703c:	461a      	mov	r2, r3
 800703e:	4b1d      	ldr	r3, [pc, #116]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007040:	4413      	add	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	461a      	mov	r2, r3
 8007046:	2300      	movs	r3, #0
 8007048:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800704a:	4a18      	ldr	r2, [pc, #96]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800704c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800704e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	d04b      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800705a:	f7fb ff95 	bl	8002f88 <HAL_GetTick>
 800705e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007060:	e00a      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007062:	f7fb ff91 	bl	8002f88 <HAL_GetTick>
 8007066:	4602      	mov	r2, r0
 8007068:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007070:	4293      	cmp	r3, r2
 8007072:	d901      	bls.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e113      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007078:	2302      	movs	r3, #2
 800707a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800707c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800707e:	fa93 f3a3 	rbit	r3, r3
 8007082:	627b      	str	r3, [r7, #36]	@ 0x24
 8007084:	2302      	movs	r3, #2
 8007086:	623b      	str	r3, [r7, #32]
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	fa93 f3a3 	rbit	r3, r3
 800708e:	61fb      	str	r3, [r7, #28]
  return result;
 8007090:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007092:	fab3 f383 	clz	r3, r3
 8007096:	b2db      	uxtb	r3, r3
 8007098:	095b      	lsrs	r3, r3, #5
 800709a:	b2db      	uxtb	r3, r3
 800709c:	f043 0302 	orr.w	r3, r3, #2
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d108      	bne.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80070a6:	4b01      	ldr	r3, [pc, #4]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	e00d      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80070ac:	40021000 	.word	0x40021000
 80070b0:	40007000 	.word	0x40007000
 80070b4:	10908100 	.word	0x10908100
 80070b8:	2302      	movs	r3, #2
 80070ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	fa93 f3a3 	rbit	r3, r3
 80070c2:	617b      	str	r3, [r7, #20]
 80070c4:	4b78      	ldr	r3, [pc, #480]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80070c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c8:	2202      	movs	r2, #2
 80070ca:	613a      	str	r2, [r7, #16]
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	fa92 f2a2 	rbit	r2, r2
 80070d2:	60fa      	str	r2, [r7, #12]
  return result;
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	fab2 f282 	clz	r2, r2
 80070da:	b2d2      	uxtb	r2, r2
 80070dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070e0:	b2d2      	uxtb	r2, r2
 80070e2:	f002 021f 	and.w	r2, r2, #31
 80070e6:	2101      	movs	r1, #1
 80070e8:	fa01 f202 	lsl.w	r2, r1, r2
 80070ec:	4013      	ands	r3, r2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d0b7      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80070f2:	4b6d      	ldr	r3, [pc, #436]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	496a      	ldr	r1, [pc, #424]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007100:	4313      	orrs	r3, r2
 8007102:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007104:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007108:	2b01      	cmp	r3, #1
 800710a:	d105      	bne.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800710c:	4b66      	ldr	r3, [pc, #408]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800710e:	69db      	ldr	r3, [r3, #28]
 8007110:	4a65      	ldr	r2, [pc, #404]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007112:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007116:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0301 	and.w	r3, r3, #1
 8007120:	2b00      	cmp	r3, #0
 8007122:	d008      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007124:	4b60      	ldr	r3, [pc, #384]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007128:	f023 0203 	bic.w	r2, r3, #3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	495d      	ldr	r1, [pc, #372]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007132:	4313      	orrs	r3, r2
 8007134:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 0302 	and.w	r3, r3, #2
 800713e:	2b00      	cmp	r3, #0
 8007140:	d008      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007142:	4b59      	ldr	r3, [pc, #356]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007146:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	4956      	ldr	r1, [pc, #344]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007150:	4313      	orrs	r3, r2
 8007152:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0304 	and.w	r3, r3, #4
 800715c:	2b00      	cmp	r3, #0
 800715e:	d008      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007160:	4b51      	ldr	r3, [pc, #324]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007164:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	494e      	ldr	r1, [pc, #312]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800716e:	4313      	orrs	r3, r2
 8007170:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0320 	and.w	r3, r3, #32
 800717a:	2b00      	cmp	r3, #0
 800717c:	d008      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800717e:	4b4a      	ldr	r3, [pc, #296]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007182:	f023 0210 	bic.w	r2, r3, #16
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	4947      	ldr	r1, [pc, #284]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800718c:	4313      	orrs	r3, r2
 800718e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d008      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800719c:	4b42      	ldr	r3, [pc, #264]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a8:	493f      	ldr	r1, [pc, #252]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d008      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80071ba:	4b3b      	ldr	r3, [pc, #236]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80071bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071be:	f023 0220 	bic.w	r2, r3, #32
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	4938      	ldr	r1, [pc, #224]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80071c8:	4313      	orrs	r3, r2
 80071ca:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0308 	and.w	r3, r3, #8
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d008      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80071d8:	4b33      	ldr	r3, [pc, #204]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80071da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071dc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	4930      	ldr	r1, [pc, #192]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0310 	and.w	r3, r3, #16
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d008      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80071f6:	4b2c      	ldr	r3, [pc, #176]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80071f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	4929      	ldr	r1, [pc, #164]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007204:	4313      	orrs	r3, r2
 8007206:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007210:	2b00      	cmp	r3, #0
 8007212:	d008      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007214:	4b24      	ldr	r3, [pc, #144]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007220:	4921      	ldr	r1, [pc, #132]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007222:	4313      	orrs	r3, r2
 8007224:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800722e:	2b00      	cmp	r3, #0
 8007230:	d008      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007232:	4b1d      	ldr	r3, [pc, #116]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007236:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800723e:	491a      	ldr	r1, [pc, #104]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007240:	4313      	orrs	r3, r2
 8007242:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800724c:	2b00      	cmp	r3, #0
 800724e:	d008      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007250:	4b15      	ldr	r3, [pc, #84]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007254:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800725c:	4912      	ldr	r1, [pc, #72]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800725e:	4313      	orrs	r3, r2
 8007260:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d008      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800726e:	4b0e      	ldr	r3, [pc, #56]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007272:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800727a:	490b      	ldr	r1, [pc, #44]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800727c:	4313      	orrs	r3, r2
 800727e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d008      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800728c:	4b06      	ldr	r3, [pc, #24]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800728e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007290:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007298:	4903      	ldr	r1, [pc, #12]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800729a:	4313      	orrs	r3, r2
 800729c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3748      	adds	r7, #72	@ 0x48
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	40021000 	.word	0x40021000

080072ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e09d      	b.n	80073fa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d108      	bne.n	80072d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072ce:	d009      	beq.n	80072e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	61da      	str	r2, [r3, #28]
 80072d6:	e005      	b.n	80072e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d106      	bne.n	8007304 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7fb f864 	bl	80023cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2202      	movs	r2, #2
 8007308:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800731a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007324:	d902      	bls.n	800732c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007326:	2300      	movs	r3, #0
 8007328:	60fb      	str	r3, [r7, #12]
 800732a:	e002      	b.n	8007332 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800732c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007330:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800733a:	d007      	beq.n	800734c <HAL_SPI_Init+0xa0>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007344:	d002      	beq.n	800734c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800735c:	431a      	orrs	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	f003 0302 	and.w	r3, r3, #2
 8007366:	431a      	orrs	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	431a      	orrs	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800737a:	431a      	orrs	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	69db      	ldr	r3, [r3, #28]
 8007380:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007384:	431a      	orrs	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800738e:	ea42 0103 	orr.w	r1, r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007396:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	430a      	orrs	r2, r1
 80073a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	0c1b      	lsrs	r3, r3, #16
 80073a8:	f003 0204 	and.w	r2, r3, #4
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b0:	f003 0310 	and.w	r3, r3, #16
 80073b4:	431a      	orrs	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ba:	f003 0308 	and.w	r3, r3, #8
 80073be:	431a      	orrs	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80073c8:	ea42 0103 	orr.w	r1, r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	430a      	orrs	r2, r1
 80073d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	69da      	ldr	r2, [r3, #28]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80073e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b082      	sub	sp, #8
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d101      	bne.n	8007414 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e049      	b.n	80074a8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	d106      	bne.n	800742e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f7fb f875 	bl	8002518 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2202      	movs	r2, #2
 8007432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	3304      	adds	r3, #4
 800743e:	4619      	mov	r1, r3
 8007440:	4610      	mov	r0, r2
 8007442:	f000 fd69 	bl	8007f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d001      	beq.n	80074c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e04a      	b.n	800755e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68da      	ldr	r2, [r3, #12]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f042 0201 	orr.w	r2, r2, #1
 80074de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a21      	ldr	r2, [pc, #132]	@ (800756c <HAL_TIM_Base_Start_IT+0xbc>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d018      	beq.n	800751c <HAL_TIM_Base_Start_IT+0x6c>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074f2:	d013      	beq.n	800751c <HAL_TIM_Base_Start_IT+0x6c>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007570 <HAL_TIM_Base_Start_IT+0xc0>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d00e      	beq.n	800751c <HAL_TIM_Base_Start_IT+0x6c>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a1c      	ldr	r2, [pc, #112]	@ (8007574 <HAL_TIM_Base_Start_IT+0xc4>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d009      	beq.n	800751c <HAL_TIM_Base_Start_IT+0x6c>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a1a      	ldr	r2, [pc, #104]	@ (8007578 <HAL_TIM_Base_Start_IT+0xc8>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d004      	beq.n	800751c <HAL_TIM_Base_Start_IT+0x6c>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a19      	ldr	r2, [pc, #100]	@ (800757c <HAL_TIM_Base_Start_IT+0xcc>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d115      	bne.n	8007548 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	689a      	ldr	r2, [r3, #8]
 8007522:	4b17      	ldr	r3, [pc, #92]	@ (8007580 <HAL_TIM_Base_Start_IT+0xd0>)
 8007524:	4013      	ands	r3, r2
 8007526:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2b06      	cmp	r3, #6
 800752c:	d015      	beq.n	800755a <HAL_TIM_Base_Start_IT+0xaa>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007534:	d011      	beq.n	800755a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f042 0201 	orr.w	r2, r2, #1
 8007544:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007546:	e008      	b.n	800755a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f042 0201 	orr.w	r2, r2, #1
 8007556:	601a      	str	r2, [r3, #0]
 8007558:	e000      	b.n	800755c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800755a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	40012c00 	.word	0x40012c00
 8007570:	40000400 	.word	0x40000400
 8007574:	40000800 	.word	0x40000800
 8007578:	40013400 	.word	0x40013400
 800757c:	40014000 	.word	0x40014000
 8007580:	00010007 	.word	0x00010007

08007584 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e049      	b.n	800762a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d106      	bne.n	80075b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f7fa ff50 	bl	8002450 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	3304      	adds	r3, #4
 80075c0:	4619      	mov	r1, r3
 80075c2:	4610      	mov	r0, r2
 80075c4:	f000 fca8 	bl	8007f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
	...

08007634 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d109      	bne.n	8007658 <HAL_TIM_PWM_Start+0x24>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b01      	cmp	r3, #1
 800764e:	bf14      	ite	ne
 8007650:	2301      	movne	r3, #1
 8007652:	2300      	moveq	r3, #0
 8007654:	b2db      	uxtb	r3, r3
 8007656:	e03c      	b.n	80076d2 <HAL_TIM_PWM_Start+0x9e>
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	2b04      	cmp	r3, #4
 800765c:	d109      	bne.n	8007672 <HAL_TIM_PWM_Start+0x3e>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b01      	cmp	r3, #1
 8007668:	bf14      	ite	ne
 800766a:	2301      	movne	r3, #1
 800766c:	2300      	moveq	r3, #0
 800766e:	b2db      	uxtb	r3, r3
 8007670:	e02f      	b.n	80076d2 <HAL_TIM_PWM_Start+0x9e>
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b08      	cmp	r3, #8
 8007676:	d109      	bne.n	800768c <HAL_TIM_PWM_Start+0x58>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b01      	cmp	r3, #1
 8007682:	bf14      	ite	ne
 8007684:	2301      	movne	r3, #1
 8007686:	2300      	moveq	r3, #0
 8007688:	b2db      	uxtb	r3, r3
 800768a:	e022      	b.n	80076d2 <HAL_TIM_PWM_Start+0x9e>
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2b0c      	cmp	r3, #12
 8007690:	d109      	bne.n	80076a6 <HAL_TIM_PWM_Start+0x72>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b01      	cmp	r3, #1
 800769c:	bf14      	ite	ne
 800769e:	2301      	movne	r3, #1
 80076a0:	2300      	moveq	r3, #0
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	e015      	b.n	80076d2 <HAL_TIM_PWM_Start+0x9e>
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	2b10      	cmp	r3, #16
 80076aa:	d109      	bne.n	80076c0 <HAL_TIM_PWM_Start+0x8c>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	bf14      	ite	ne
 80076b8:	2301      	movne	r3, #1
 80076ba:	2300      	moveq	r3, #0
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	e008      	b.n	80076d2 <HAL_TIM_PWM_Start+0x9e>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	bf14      	ite	ne
 80076cc:	2301      	movne	r3, #1
 80076ce:	2300      	moveq	r3, #0
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e097      	b.n	800780a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d104      	bne.n	80076ea <HAL_TIM_PWM_Start+0xb6>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2202      	movs	r2, #2
 80076e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076e8:	e023      	b.n	8007732 <HAL_TIM_PWM_Start+0xfe>
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	2b04      	cmp	r3, #4
 80076ee:	d104      	bne.n	80076fa <HAL_TIM_PWM_Start+0xc6>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2202      	movs	r2, #2
 80076f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076f8:	e01b      	b.n	8007732 <HAL_TIM_PWM_Start+0xfe>
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b08      	cmp	r3, #8
 80076fe:	d104      	bne.n	800770a <HAL_TIM_PWM_Start+0xd6>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2202      	movs	r2, #2
 8007704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007708:	e013      	b.n	8007732 <HAL_TIM_PWM_Start+0xfe>
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	2b0c      	cmp	r3, #12
 800770e:	d104      	bne.n	800771a <HAL_TIM_PWM_Start+0xe6>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007718:	e00b      	b.n	8007732 <HAL_TIM_PWM_Start+0xfe>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2b10      	cmp	r3, #16
 800771e:	d104      	bne.n	800772a <HAL_TIM_PWM_Start+0xf6>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007728:	e003      	b.n	8007732 <HAL_TIM_PWM_Start+0xfe>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2202      	movs	r2, #2
 800772e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2201      	movs	r2, #1
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	4618      	mov	r0, r3
 800773c:	f000 ff5e 	bl	80085fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a33      	ldr	r2, [pc, #204]	@ (8007814 <HAL_TIM_PWM_Start+0x1e0>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d013      	beq.n	8007772 <HAL_TIM_PWM_Start+0x13e>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a32      	ldr	r2, [pc, #200]	@ (8007818 <HAL_TIM_PWM_Start+0x1e4>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d00e      	beq.n	8007772 <HAL_TIM_PWM_Start+0x13e>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a30      	ldr	r2, [pc, #192]	@ (800781c <HAL_TIM_PWM_Start+0x1e8>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d009      	beq.n	8007772 <HAL_TIM_PWM_Start+0x13e>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a2f      	ldr	r2, [pc, #188]	@ (8007820 <HAL_TIM_PWM_Start+0x1ec>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d004      	beq.n	8007772 <HAL_TIM_PWM_Start+0x13e>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a2d      	ldr	r2, [pc, #180]	@ (8007824 <HAL_TIM_PWM_Start+0x1f0>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d101      	bne.n	8007776 <HAL_TIM_PWM_Start+0x142>
 8007772:	2301      	movs	r3, #1
 8007774:	e000      	b.n	8007778 <HAL_TIM_PWM_Start+0x144>
 8007776:	2300      	movs	r3, #0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d007      	beq.n	800778c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800778a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a20      	ldr	r2, [pc, #128]	@ (8007814 <HAL_TIM_PWM_Start+0x1e0>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d018      	beq.n	80077c8 <HAL_TIM_PWM_Start+0x194>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800779e:	d013      	beq.n	80077c8 <HAL_TIM_PWM_Start+0x194>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a20      	ldr	r2, [pc, #128]	@ (8007828 <HAL_TIM_PWM_Start+0x1f4>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d00e      	beq.n	80077c8 <HAL_TIM_PWM_Start+0x194>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a1f      	ldr	r2, [pc, #124]	@ (800782c <HAL_TIM_PWM_Start+0x1f8>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d009      	beq.n	80077c8 <HAL_TIM_PWM_Start+0x194>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a17      	ldr	r2, [pc, #92]	@ (8007818 <HAL_TIM_PWM_Start+0x1e4>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d004      	beq.n	80077c8 <HAL_TIM_PWM_Start+0x194>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a16      	ldr	r2, [pc, #88]	@ (800781c <HAL_TIM_PWM_Start+0x1e8>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d115      	bne.n	80077f4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	689a      	ldr	r2, [r3, #8]
 80077ce:	4b18      	ldr	r3, [pc, #96]	@ (8007830 <HAL_TIM_PWM_Start+0x1fc>)
 80077d0:	4013      	ands	r3, r2
 80077d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2b06      	cmp	r3, #6
 80077d8:	d015      	beq.n	8007806 <HAL_TIM_PWM_Start+0x1d2>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077e0:	d011      	beq.n	8007806 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f042 0201 	orr.w	r2, r2, #1
 80077f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077f2:	e008      	b.n	8007806 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f042 0201 	orr.w	r2, r2, #1
 8007802:	601a      	str	r2, [r3, #0]
 8007804:	e000      	b.n	8007808 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007806:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	40012c00 	.word	0x40012c00
 8007818:	40013400 	.word	0x40013400
 800781c:	40014000 	.word	0x40014000
 8007820:	40014400 	.word	0x40014400
 8007824:	40014800 	.word	0x40014800
 8007828:	40000400 	.word	0x40000400
 800782c:	40000800 	.word	0x40000800
 8007830:	00010007 	.word	0x00010007

08007834 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e097      	b.n	8007978 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d106      	bne.n	8007862 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f7fa fe17 	bl	8002490 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2202      	movs	r2, #2
 8007866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	6812      	ldr	r2, [r2, #0]
 8007874:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007878:	f023 0307 	bic.w	r3, r3, #7
 800787c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	3304      	adds	r3, #4
 8007886:	4619      	mov	r1, r3
 8007888:	4610      	mov	r0, r2
 800788a:	f000 fb45 	bl	8007f18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	6a1b      	ldr	r3, [r3, #32]
 80078a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078b6:	f023 0303 	bic.w	r3, r3, #3
 80078ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	689a      	ldr	r2, [r3, #8]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	699b      	ldr	r3, [r3, #24]
 80078c4:	021b      	lsls	r3, r3, #8
 80078c6:	4313      	orrs	r3, r2
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80078d4:	f023 030c 	bic.w	r3, r3, #12
 80078d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80078e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	68da      	ldr	r2, [r3, #12]
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	69db      	ldr	r3, [r3, #28]
 80078ee:	021b      	lsls	r3, r3, #8
 80078f0:	4313      	orrs	r3, r2
 80078f2:	693a      	ldr	r2, [r7, #16]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	011a      	lsls	r2, r3, #4
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	031b      	lsls	r3, r3, #12
 8007904:	4313      	orrs	r3, r2
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	4313      	orrs	r3, r2
 800790a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007912:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800791a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	695b      	ldr	r3, [r3, #20]
 8007924:	011b      	lsls	r3, r3, #4
 8007926:	4313      	orrs	r3, r2
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	4313      	orrs	r3, r2
 800792c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	697a      	ldr	r2, [r7, #20]
 8007934:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	693a      	ldr	r2, [r7, #16]
 800793c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3718      	adds	r7, #24
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007990:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007998:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80079a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d110      	bne.n	80079d2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d102      	bne.n	80079bc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80079b6:	7b7b      	ldrb	r3, [r7, #13]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d001      	beq.n	80079c0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e069      	b.n	8007a94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2202      	movs	r2, #2
 80079c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2202      	movs	r2, #2
 80079cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079d0:	e031      	b.n	8007a36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2b04      	cmp	r3, #4
 80079d6:	d110      	bne.n	80079fa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d102      	bne.n	80079e4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80079de:	7b3b      	ldrb	r3, [r7, #12]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d001      	beq.n	80079e8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e055      	b.n	8007a94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2202      	movs	r2, #2
 80079ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2202      	movs	r2, #2
 80079f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079f8:	e01d      	b.n	8007a36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d108      	bne.n	8007a12 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a00:	7bbb      	ldrb	r3, [r7, #14]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d105      	bne.n	8007a12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a06:	7b7b      	ldrb	r3, [r7, #13]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d102      	bne.n	8007a12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a0c:	7b3b      	ldrb	r3, [r7, #12]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d001      	beq.n	8007a16 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e03e      	b.n	8007a94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2202      	movs	r2, #2
 8007a1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2202      	movs	r2, #2
 8007a22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2202      	movs	r2, #2
 8007a2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2202      	movs	r2, #2
 8007a32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d003      	beq.n	8007a44 <HAL_TIM_Encoder_Start+0xc4>
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	2b04      	cmp	r3, #4
 8007a40:	d008      	beq.n	8007a54 <HAL_TIM_Encoder_Start+0xd4>
 8007a42:	e00f      	b.n	8007a64 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f000 fdd5 	bl	80085fc <TIM_CCxChannelCmd>
      break;
 8007a52:	e016      	b.n	8007a82 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	2104      	movs	r1, #4
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f000 fdcd 	bl	80085fc <TIM_CCxChannelCmd>
      break;
 8007a62:	e00e      	b.n	8007a82 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f000 fdc5 	bl	80085fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2201      	movs	r2, #1
 8007a78:	2104      	movs	r1, #4
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 fdbe 	bl	80085fc <TIM_CCxChannelCmd>
      break;
 8007a80:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f042 0201 	orr.w	r2, r2, #1
 8007a90:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f003 0302 	and.w	r3, r3, #2
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d020      	beq.n	8007b00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d01b      	beq.n	8007b00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f06f 0202 	mvn.w	r2, #2
 8007ad0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	f003 0303 	and.w	r3, r3, #3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d003      	beq.n	8007aee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f9f8 	bl	8007edc <HAL_TIM_IC_CaptureCallback>
 8007aec:	e005      	b.n	8007afa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f9ea 	bl	8007ec8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f9fb 	bl	8007ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	f003 0304 	and.w	r3, r3, #4
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d020      	beq.n	8007b4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f003 0304 	and.w	r3, r3, #4
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d01b      	beq.n	8007b4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f06f 0204 	mvn.w	r2, #4
 8007b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2202      	movs	r2, #2
 8007b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d003      	beq.n	8007b3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f9d2 	bl	8007edc <HAL_TIM_IC_CaptureCallback>
 8007b38:	e005      	b.n	8007b46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f9c4 	bl	8007ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f9d5 	bl	8007ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	f003 0308 	and.w	r3, r3, #8
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d020      	beq.n	8007b98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f003 0308 	and.w	r3, r3, #8
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d01b      	beq.n	8007b98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f06f 0208 	mvn.w	r2, #8
 8007b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2204      	movs	r2, #4
 8007b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	f003 0303 	and.w	r3, r3, #3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d003      	beq.n	8007b86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f9ac 	bl	8007edc <HAL_TIM_IC_CaptureCallback>
 8007b84:	e005      	b.n	8007b92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f99e 	bl	8007ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f9af 	bl	8007ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	f003 0310 	and.w	r3, r3, #16
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d020      	beq.n	8007be4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f003 0310 	and.w	r3, r3, #16
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d01b      	beq.n	8007be4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f06f 0210 	mvn.w	r2, #16
 8007bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2208      	movs	r2, #8
 8007bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	69db      	ldr	r3, [r3, #28]
 8007bc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d003      	beq.n	8007bd2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f986 	bl	8007edc <HAL_TIM_IC_CaptureCallback>
 8007bd0:	e005      	b.n	8007bde <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f978 	bl	8007ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f989 	bl	8007ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00c      	beq.n	8007c08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f003 0301 	and.w	r3, r3, #1
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d007      	beq.n	8007c08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f06f 0201 	mvn.w	r2, #1
 8007c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7f9 fc6e 	bl	80014e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00c      	beq.n	8007c2c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d007      	beq.n	8007c2c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fe16 	bl	8008858 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00c      	beq.n	8007c50 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d007      	beq.n	8007c50 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fe0e 	bl	800886c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00c      	beq.n	8007c74 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d007      	beq.n	8007c74 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f948 	bl	8007f04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	f003 0320 	and.w	r3, r3, #32
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00c      	beq.n	8007c98 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f003 0320 	and.w	r3, r3, #32
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d007      	beq.n	8007c98 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f06f 0220 	mvn.w	r2, #32
 8007c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fdd6 	bl	8008844 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c98:	bf00      	nop
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d101      	bne.n	8007cbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007cba:	2302      	movs	r3, #2
 8007cbc:	e0ff      	b.n	8007ebe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2b14      	cmp	r3, #20
 8007cca:	f200 80f0 	bhi.w	8007eae <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007cce:	a201      	add	r2, pc, #4	@ (adr r2, 8007cd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd4:	08007d29 	.word	0x08007d29
 8007cd8:	08007eaf 	.word	0x08007eaf
 8007cdc:	08007eaf 	.word	0x08007eaf
 8007ce0:	08007eaf 	.word	0x08007eaf
 8007ce4:	08007d69 	.word	0x08007d69
 8007ce8:	08007eaf 	.word	0x08007eaf
 8007cec:	08007eaf 	.word	0x08007eaf
 8007cf0:	08007eaf 	.word	0x08007eaf
 8007cf4:	08007dab 	.word	0x08007dab
 8007cf8:	08007eaf 	.word	0x08007eaf
 8007cfc:	08007eaf 	.word	0x08007eaf
 8007d00:	08007eaf 	.word	0x08007eaf
 8007d04:	08007deb 	.word	0x08007deb
 8007d08:	08007eaf 	.word	0x08007eaf
 8007d0c:	08007eaf 	.word	0x08007eaf
 8007d10:	08007eaf 	.word	0x08007eaf
 8007d14:	08007e2d 	.word	0x08007e2d
 8007d18:	08007eaf 	.word	0x08007eaf
 8007d1c:	08007eaf 	.word	0x08007eaf
 8007d20:	08007eaf 	.word	0x08007eaf
 8007d24:	08007e6d 	.word	0x08007e6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68b9      	ldr	r1, [r7, #8]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f000 f98e 	bl	8008050 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	699a      	ldr	r2, [r3, #24]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f042 0208 	orr.w	r2, r2, #8
 8007d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	699a      	ldr	r2, [r3, #24]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f022 0204 	bic.w	r2, r2, #4
 8007d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	6999      	ldr	r1, [r3, #24]
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	691a      	ldr	r2, [r3, #16]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	430a      	orrs	r2, r1
 8007d64:	619a      	str	r2, [r3, #24]
      break;
 8007d66:	e0a5      	b.n	8007eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68b9      	ldr	r1, [r7, #8]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f000 f9fe 	bl	8008170 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	699a      	ldr	r2, [r3, #24]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	699a      	ldr	r2, [r3, #24]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6999      	ldr	r1, [r3, #24]
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	021a      	lsls	r2, r3, #8
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	430a      	orrs	r2, r1
 8007da6:	619a      	str	r2, [r3, #24]
      break;
 8007da8:	e084      	b.n	8007eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68b9      	ldr	r1, [r7, #8]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f000 fa67 	bl	8008284 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	69da      	ldr	r2, [r3, #28]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f042 0208 	orr.w	r2, r2, #8
 8007dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	69da      	ldr	r2, [r3, #28]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f022 0204 	bic.w	r2, r2, #4
 8007dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	69d9      	ldr	r1, [r3, #28]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	691a      	ldr	r2, [r3, #16]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	430a      	orrs	r2, r1
 8007de6:	61da      	str	r2, [r3, #28]
      break;
 8007de8:	e064      	b.n	8007eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68b9      	ldr	r1, [r7, #8]
 8007df0:	4618      	mov	r0, r3
 8007df2:	f000 facf 	bl	8008394 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	69da      	ldr	r2, [r3, #28]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	69da      	ldr	r2, [r3, #28]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	69d9      	ldr	r1, [r3, #28]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	021a      	lsls	r2, r3, #8
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	430a      	orrs	r2, r1
 8007e28:	61da      	str	r2, [r3, #28]
      break;
 8007e2a:	e043      	b.n	8007eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68b9      	ldr	r1, [r7, #8]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 fb18 	bl	8008468 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f042 0208 	orr.w	r2, r2, #8
 8007e46:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f022 0204 	bic.w	r2, r2, #4
 8007e56:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	691a      	ldr	r2, [r3, #16]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	430a      	orrs	r2, r1
 8007e68:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007e6a:	e023      	b.n	8007eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68b9      	ldr	r1, [r7, #8]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 fb5c 	bl	8008530 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e86:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e96:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	021a      	lsls	r2, r3, #8
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	430a      	orrs	r2, r1
 8007eaa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007eac:	e002      	b.n	8007eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	75fb      	strb	r3, [r7, #23]
      break;
 8007eb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3718      	adds	r7, #24
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop

08007ec8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ef8:	bf00      	nop
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a42      	ldr	r2, [pc, #264]	@ (8008034 <TIM_Base_SetConfig+0x11c>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d00f      	beq.n	8007f50 <TIM_Base_SetConfig+0x38>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f36:	d00b      	beq.n	8007f50 <TIM_Base_SetConfig+0x38>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a3f      	ldr	r2, [pc, #252]	@ (8008038 <TIM_Base_SetConfig+0x120>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d007      	beq.n	8007f50 <TIM_Base_SetConfig+0x38>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a3e      	ldr	r2, [pc, #248]	@ (800803c <TIM_Base_SetConfig+0x124>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d003      	beq.n	8007f50 <TIM_Base_SetConfig+0x38>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a3d      	ldr	r2, [pc, #244]	@ (8008040 <TIM_Base_SetConfig+0x128>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d108      	bne.n	8007f62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a33      	ldr	r2, [pc, #204]	@ (8008034 <TIM_Base_SetConfig+0x11c>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d01b      	beq.n	8007fa2 <TIM_Base_SetConfig+0x8a>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f70:	d017      	beq.n	8007fa2 <TIM_Base_SetConfig+0x8a>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a30      	ldr	r2, [pc, #192]	@ (8008038 <TIM_Base_SetConfig+0x120>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d013      	beq.n	8007fa2 <TIM_Base_SetConfig+0x8a>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a2f      	ldr	r2, [pc, #188]	@ (800803c <TIM_Base_SetConfig+0x124>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d00f      	beq.n	8007fa2 <TIM_Base_SetConfig+0x8a>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a2e      	ldr	r2, [pc, #184]	@ (8008040 <TIM_Base_SetConfig+0x128>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d00b      	beq.n	8007fa2 <TIM_Base_SetConfig+0x8a>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a2d      	ldr	r2, [pc, #180]	@ (8008044 <TIM_Base_SetConfig+0x12c>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d007      	beq.n	8007fa2 <TIM_Base_SetConfig+0x8a>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a2c      	ldr	r2, [pc, #176]	@ (8008048 <TIM_Base_SetConfig+0x130>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d003      	beq.n	8007fa2 <TIM_Base_SetConfig+0x8a>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a2b      	ldr	r2, [pc, #172]	@ (800804c <TIM_Base_SetConfig+0x134>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d108      	bne.n	8007fb4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	695b      	ldr	r3, [r3, #20]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	689a      	ldr	r2, [r3, #8]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a16      	ldr	r2, [pc, #88]	@ (8008034 <TIM_Base_SetConfig+0x11c>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d00f      	beq.n	8008000 <TIM_Base_SetConfig+0xe8>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a17      	ldr	r2, [pc, #92]	@ (8008040 <TIM_Base_SetConfig+0x128>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d00b      	beq.n	8008000 <TIM_Base_SetConfig+0xe8>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a16      	ldr	r2, [pc, #88]	@ (8008044 <TIM_Base_SetConfig+0x12c>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d007      	beq.n	8008000 <TIM_Base_SetConfig+0xe8>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a15      	ldr	r2, [pc, #84]	@ (8008048 <TIM_Base_SetConfig+0x130>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d003      	beq.n	8008000 <TIM_Base_SetConfig+0xe8>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a14      	ldr	r2, [pc, #80]	@ (800804c <TIM_Base_SetConfig+0x134>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d103      	bne.n	8008008 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	691a      	ldr	r2, [r3, #16]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	f003 0301 	and.w	r3, r3, #1
 8008016:	2b01      	cmp	r3, #1
 8008018:	d105      	bne.n	8008026 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	f023 0201 	bic.w	r2, r3, #1
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	611a      	str	r2, [r3, #16]
  }
}
 8008026:	bf00      	nop
 8008028:	3714      	adds	r7, #20
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	40012c00 	.word	0x40012c00
 8008038:	40000400 	.word	0x40000400
 800803c:	40000800 	.word	0x40000800
 8008040:	40013400 	.word	0x40013400
 8008044:	40014000 	.word	0x40014000
 8008048:	40014400 	.word	0x40014400
 800804c:	40014800 	.word	0x40014800

08008050 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008050:	b480      	push	{r7}
 8008052:	b087      	sub	sp, #28
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6a1b      	ldr	r3, [r3, #32]
 8008064:	f023 0201 	bic.w	r2, r3, #1
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	699b      	ldr	r3, [r3, #24]
 8008076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800807e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f023 0303 	bic.w	r3, r3, #3
 800808a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	4313      	orrs	r3, r2
 8008094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	f023 0302 	bic.w	r3, r3, #2
 800809c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a2c      	ldr	r2, [pc, #176]	@ (800815c <TIM_OC1_SetConfig+0x10c>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d00f      	beq.n	80080d0 <TIM_OC1_SetConfig+0x80>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a2b      	ldr	r2, [pc, #172]	@ (8008160 <TIM_OC1_SetConfig+0x110>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d00b      	beq.n	80080d0 <TIM_OC1_SetConfig+0x80>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4a2a      	ldr	r2, [pc, #168]	@ (8008164 <TIM_OC1_SetConfig+0x114>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d007      	beq.n	80080d0 <TIM_OC1_SetConfig+0x80>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a29      	ldr	r2, [pc, #164]	@ (8008168 <TIM_OC1_SetConfig+0x118>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d003      	beq.n	80080d0 <TIM_OC1_SetConfig+0x80>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a28      	ldr	r2, [pc, #160]	@ (800816c <TIM_OC1_SetConfig+0x11c>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d10c      	bne.n	80080ea <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	f023 0308 	bic.w	r3, r3, #8
 80080d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	697a      	ldr	r2, [r7, #20]
 80080de:	4313      	orrs	r3, r2
 80080e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	f023 0304 	bic.w	r3, r3, #4
 80080e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a1b      	ldr	r2, [pc, #108]	@ (800815c <TIM_OC1_SetConfig+0x10c>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d00f      	beq.n	8008112 <TIM_OC1_SetConfig+0xc2>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a1a      	ldr	r2, [pc, #104]	@ (8008160 <TIM_OC1_SetConfig+0x110>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d00b      	beq.n	8008112 <TIM_OC1_SetConfig+0xc2>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a19      	ldr	r2, [pc, #100]	@ (8008164 <TIM_OC1_SetConfig+0x114>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d007      	beq.n	8008112 <TIM_OC1_SetConfig+0xc2>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a18      	ldr	r2, [pc, #96]	@ (8008168 <TIM_OC1_SetConfig+0x118>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d003      	beq.n	8008112 <TIM_OC1_SetConfig+0xc2>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a17      	ldr	r2, [pc, #92]	@ (800816c <TIM_OC1_SetConfig+0x11c>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d111      	bne.n	8008136 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	4313      	orrs	r3, r2
 800812a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	4313      	orrs	r3, r2
 8008134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	685a      	ldr	r2, [r3, #4]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	621a      	str	r2, [r3, #32]
}
 8008150:	bf00      	nop
 8008152:	371c      	adds	r7, #28
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	40012c00 	.word	0x40012c00
 8008160:	40013400 	.word	0x40013400
 8008164:	40014000 	.word	0x40014000
 8008168:	40014400 	.word	0x40014400
 800816c:	40014800 	.word	0x40014800

08008170 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008170:	b480      	push	{r7}
 8008172:	b087      	sub	sp, #28
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a1b      	ldr	r3, [r3, #32]
 800817e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6a1b      	ldr	r3, [r3, #32]
 8008184:	f023 0210 	bic.w	r2, r3, #16
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800819e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	021b      	lsls	r3, r3, #8
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	f023 0320 	bic.w	r3, r3, #32
 80081be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	011b      	lsls	r3, r3, #4
 80081c6:	697a      	ldr	r2, [r7, #20]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a28      	ldr	r2, [pc, #160]	@ (8008270 <TIM_OC2_SetConfig+0x100>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d003      	beq.n	80081dc <TIM_OC2_SetConfig+0x6c>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a27      	ldr	r2, [pc, #156]	@ (8008274 <TIM_OC2_SetConfig+0x104>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d10d      	bne.n	80081f8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	011b      	lsls	r3, r3, #4
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a1d      	ldr	r2, [pc, #116]	@ (8008270 <TIM_OC2_SetConfig+0x100>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d00f      	beq.n	8008220 <TIM_OC2_SetConfig+0xb0>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a1c      	ldr	r2, [pc, #112]	@ (8008274 <TIM_OC2_SetConfig+0x104>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d00b      	beq.n	8008220 <TIM_OC2_SetConfig+0xb0>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a1b      	ldr	r2, [pc, #108]	@ (8008278 <TIM_OC2_SetConfig+0x108>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d007      	beq.n	8008220 <TIM_OC2_SetConfig+0xb0>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a1a      	ldr	r2, [pc, #104]	@ (800827c <TIM_OC2_SetConfig+0x10c>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d003      	beq.n	8008220 <TIM_OC2_SetConfig+0xb0>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a19      	ldr	r2, [pc, #100]	@ (8008280 <TIM_OC2_SetConfig+0x110>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d113      	bne.n	8008248 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008226:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800822e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	695b      	ldr	r3, [r3, #20]
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	693a      	ldr	r2, [r7, #16]
 8008238:	4313      	orrs	r3, r2
 800823a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	699b      	ldr	r3, [r3, #24]
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	4313      	orrs	r3, r2
 8008246:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	693a      	ldr	r2, [r7, #16]
 800824c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	685a      	ldr	r2, [r3, #4]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	621a      	str	r2, [r3, #32]
}
 8008262:	bf00      	nop
 8008264:	371c      	adds	r7, #28
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	40012c00 	.word	0x40012c00
 8008274:	40013400 	.word	0x40013400
 8008278:	40014000 	.word	0x40014000
 800827c:	40014400 	.word	0x40014400
 8008280:	40014800 	.word	0x40014800

08008284 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008284:	b480      	push	{r7}
 8008286:	b087      	sub	sp, #28
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a1b      	ldr	r3, [r3, #32]
 8008298:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	69db      	ldr	r3, [r3, #28]
 80082aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f023 0303 	bic.w	r3, r3, #3
 80082be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80082d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	021b      	lsls	r3, r3, #8
 80082d8:	697a      	ldr	r2, [r7, #20]
 80082da:	4313      	orrs	r3, r2
 80082dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a27      	ldr	r2, [pc, #156]	@ (8008380 <TIM_OC3_SetConfig+0xfc>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d003      	beq.n	80082ee <TIM_OC3_SetConfig+0x6a>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a26      	ldr	r2, [pc, #152]	@ (8008384 <TIM_OC3_SetConfig+0x100>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d10d      	bne.n	800830a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80082f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	021b      	lsls	r3, r3, #8
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	4313      	orrs	r3, r2
 8008300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008308:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a1c      	ldr	r2, [pc, #112]	@ (8008380 <TIM_OC3_SetConfig+0xfc>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d00f      	beq.n	8008332 <TIM_OC3_SetConfig+0xae>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a1b      	ldr	r2, [pc, #108]	@ (8008384 <TIM_OC3_SetConfig+0x100>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d00b      	beq.n	8008332 <TIM_OC3_SetConfig+0xae>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a1a      	ldr	r2, [pc, #104]	@ (8008388 <TIM_OC3_SetConfig+0x104>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d007      	beq.n	8008332 <TIM_OC3_SetConfig+0xae>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a19      	ldr	r2, [pc, #100]	@ (800838c <TIM_OC3_SetConfig+0x108>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d003      	beq.n	8008332 <TIM_OC3_SetConfig+0xae>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a18      	ldr	r2, [pc, #96]	@ (8008390 <TIM_OC3_SetConfig+0x10c>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d113      	bne.n	800835a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	695b      	ldr	r3, [r3, #20]
 8008346:	011b      	lsls	r3, r3, #4
 8008348:	693a      	ldr	r2, [r7, #16]
 800834a:	4313      	orrs	r3, r2
 800834c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	011b      	lsls	r3, r3, #4
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	4313      	orrs	r3, r2
 8008358:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	693a      	ldr	r2, [r7, #16]
 800835e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	685a      	ldr	r2, [r3, #4]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	621a      	str	r2, [r3, #32]
}
 8008374:	bf00      	nop
 8008376:	371c      	adds	r7, #28
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr
 8008380:	40012c00 	.word	0x40012c00
 8008384:	40013400 	.word	0x40013400
 8008388:	40014000 	.word	0x40014000
 800838c:	40014400 	.word	0x40014400
 8008390:	40014800 	.word	0x40014800

08008394 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008394:	b480      	push	{r7}
 8008396:	b087      	sub	sp, #28
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a1b      	ldr	r3, [r3, #32]
 80083a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	69db      	ldr	r3, [r3, #28]
 80083ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80083c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	021b      	lsls	r3, r3, #8
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	4313      	orrs	r3, r2
 80083da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80083e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	031b      	lsls	r3, r3, #12
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a18      	ldr	r2, [pc, #96]	@ (8008454 <TIM_OC4_SetConfig+0xc0>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d00f      	beq.n	8008418 <TIM_OC4_SetConfig+0x84>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a17      	ldr	r2, [pc, #92]	@ (8008458 <TIM_OC4_SetConfig+0xc4>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d00b      	beq.n	8008418 <TIM_OC4_SetConfig+0x84>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a16      	ldr	r2, [pc, #88]	@ (800845c <TIM_OC4_SetConfig+0xc8>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d007      	beq.n	8008418 <TIM_OC4_SetConfig+0x84>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a15      	ldr	r2, [pc, #84]	@ (8008460 <TIM_OC4_SetConfig+0xcc>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d003      	beq.n	8008418 <TIM_OC4_SetConfig+0x84>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a14      	ldr	r2, [pc, #80]	@ (8008464 <TIM_OC4_SetConfig+0xd0>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d109      	bne.n	800842c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800841e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	695b      	ldr	r3, [r3, #20]
 8008424:	019b      	lsls	r3, r3, #6
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	4313      	orrs	r3, r2
 800842a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	697a      	ldr	r2, [r7, #20]
 8008430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	693a      	ldr	r2, [r7, #16]
 8008444:	621a      	str	r2, [r3, #32]
}
 8008446:	bf00      	nop
 8008448:	371c      	adds	r7, #28
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	40012c00 	.word	0x40012c00
 8008458:	40013400 	.word	0x40013400
 800845c:	40014000 	.word	0x40014000
 8008460:	40014400 	.word	0x40014400
 8008464:	40014800 	.word	0x40014800

08008468 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008468:	b480      	push	{r7}
 800846a:	b087      	sub	sp, #28
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a1b      	ldr	r3, [r3, #32]
 8008476:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a1b      	ldr	r3, [r3, #32]
 800847c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800848e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800849a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80084ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	041b      	lsls	r3, r3, #16
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a17      	ldr	r2, [pc, #92]	@ (800851c <TIM_OC5_SetConfig+0xb4>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d00f      	beq.n	80084e2 <TIM_OC5_SetConfig+0x7a>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a16      	ldr	r2, [pc, #88]	@ (8008520 <TIM_OC5_SetConfig+0xb8>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d00b      	beq.n	80084e2 <TIM_OC5_SetConfig+0x7a>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a15      	ldr	r2, [pc, #84]	@ (8008524 <TIM_OC5_SetConfig+0xbc>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d007      	beq.n	80084e2 <TIM_OC5_SetConfig+0x7a>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a14      	ldr	r2, [pc, #80]	@ (8008528 <TIM_OC5_SetConfig+0xc0>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d003      	beq.n	80084e2 <TIM_OC5_SetConfig+0x7a>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a13      	ldr	r2, [pc, #76]	@ (800852c <TIM_OC5_SetConfig+0xc4>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d109      	bne.n	80084f6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	021b      	lsls	r3, r3, #8
 80084f0:	697a      	ldr	r2, [r7, #20]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	685a      	ldr	r2, [r3, #4]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	693a      	ldr	r2, [r7, #16]
 800850e:	621a      	str	r2, [r3, #32]
}
 8008510:	bf00      	nop
 8008512:	371c      	adds	r7, #28
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr
 800851c:	40012c00 	.word	0x40012c00
 8008520:	40013400 	.word	0x40013400
 8008524:	40014000 	.word	0x40014000
 8008528:	40014400 	.word	0x40014400
 800852c:	40014800 	.word	0x40014800

08008530 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008530:	b480      	push	{r7}
 8008532:	b087      	sub	sp, #28
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6a1b      	ldr	r3, [r3, #32]
 8008544:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800855e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	021b      	lsls	r3, r3, #8
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	4313      	orrs	r3, r2
 800856e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008576:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	051b      	lsls	r3, r3, #20
 800857e:	693a      	ldr	r2, [r7, #16]
 8008580:	4313      	orrs	r3, r2
 8008582:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a18      	ldr	r2, [pc, #96]	@ (80085e8 <TIM_OC6_SetConfig+0xb8>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d00f      	beq.n	80085ac <TIM_OC6_SetConfig+0x7c>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a17      	ldr	r2, [pc, #92]	@ (80085ec <TIM_OC6_SetConfig+0xbc>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d00b      	beq.n	80085ac <TIM_OC6_SetConfig+0x7c>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a16      	ldr	r2, [pc, #88]	@ (80085f0 <TIM_OC6_SetConfig+0xc0>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d007      	beq.n	80085ac <TIM_OC6_SetConfig+0x7c>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a15      	ldr	r2, [pc, #84]	@ (80085f4 <TIM_OC6_SetConfig+0xc4>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d003      	beq.n	80085ac <TIM_OC6_SetConfig+0x7c>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4a14      	ldr	r2, [pc, #80]	@ (80085f8 <TIM_OC6_SetConfig+0xc8>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d109      	bne.n	80085c0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80085b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	695b      	ldr	r3, [r3, #20]
 80085b8:	029b      	lsls	r3, r3, #10
 80085ba:	697a      	ldr	r2, [r7, #20]
 80085bc:	4313      	orrs	r3, r2
 80085be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	697a      	ldr	r2, [r7, #20]
 80085c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	685a      	ldr	r2, [r3, #4]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	621a      	str	r2, [r3, #32]
}
 80085da:	bf00      	nop
 80085dc:	371c      	adds	r7, #28
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr
 80085e6:	bf00      	nop
 80085e8:	40012c00 	.word	0x40012c00
 80085ec:	40013400 	.word	0x40013400
 80085f0:	40014000 	.word	0x40014000
 80085f4:	40014400 	.word	0x40014400
 80085f8:	40014800 	.word	0x40014800

080085fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b087      	sub	sp, #28
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	f003 031f 	and.w	r3, r3, #31
 800860e:	2201      	movs	r2, #1
 8008610:	fa02 f303 	lsl.w	r3, r2, r3
 8008614:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6a1a      	ldr	r2, [r3, #32]
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	43db      	mvns	r3, r3
 800861e:	401a      	ands	r2, r3
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6a1a      	ldr	r2, [r3, #32]
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	f003 031f 	and.w	r3, r3, #31
 800862e:	6879      	ldr	r1, [r7, #4]
 8008630:	fa01 f303 	lsl.w	r3, r1, r3
 8008634:	431a      	orrs	r2, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	621a      	str	r2, [r3, #32]
}
 800863a:	bf00      	nop
 800863c:	371c      	adds	r7, #28
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
	...

08008648 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008658:	2b01      	cmp	r3, #1
 800865a:	d101      	bne.n	8008660 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800865c:	2302      	movs	r3, #2
 800865e:	e063      	b.n	8008728 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2202      	movs	r2, #2
 800866c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a2b      	ldr	r2, [pc, #172]	@ (8008734 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d004      	beq.n	8008694 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a2a      	ldr	r2, [pc, #168]	@ (8008738 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d108      	bne.n	80086a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800869a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a1b      	ldr	r2, [pc, #108]	@ (8008734 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d018      	beq.n	80086fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086d2:	d013      	beq.n	80086fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a18      	ldr	r2, [pc, #96]	@ (800873c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d00e      	beq.n	80086fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a17      	ldr	r2, [pc, #92]	@ (8008740 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d009      	beq.n	80086fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a12      	ldr	r2, [pc, #72]	@ (8008738 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d004      	beq.n	80086fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a13      	ldr	r2, [pc, #76]	@ (8008744 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d10c      	bne.n	8008716 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008702:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	4313      	orrs	r3, r2
 800870c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2201      	movs	r2, #1
 800871a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3714      	adds	r7, #20
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr
 8008734:	40012c00 	.word	0x40012c00
 8008738:	40013400 	.word	0x40013400
 800873c:	40000400 	.word	0x40000400
 8008740:	40000800 	.word	0x40000800
 8008744:	40014000 	.word	0x40014000

08008748 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008752:	2300      	movs	r3, #0
 8008754:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800875c:	2b01      	cmp	r3, #1
 800875e:	d101      	bne.n	8008764 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008760:	2302      	movs	r3, #2
 8008762:	e065      	b.n	8008830 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	4313      	orrs	r3, r2
 8008778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	4313      	orrs	r3, r2
 8008786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	4313      	orrs	r3, r2
 8008794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	695b      	ldr	r3, [r3, #20]
 80087bc:	4313      	orrs	r3, r2
 80087be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ca:	4313      	orrs	r3, r2
 80087cc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	699b      	ldr	r3, [r3, #24]
 80087d8:	041b      	lsls	r3, r3, #16
 80087da:	4313      	orrs	r3, r2
 80087dc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a16      	ldr	r2, [pc, #88]	@ (800883c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d004      	beq.n	80087f2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a14      	ldr	r2, [pc, #80]	@ (8008840 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d115      	bne.n	800881e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087fc:	051b      	lsls	r3, r3, #20
 80087fe:	4313      	orrs	r3, r2
 8008800:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	69db      	ldr	r3, [r3, #28]
 800880c:	4313      	orrs	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	4313      	orrs	r3, r2
 800881c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3714      	adds	r7, #20
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr
 800883c:	40012c00 	.word	0x40012c00
 8008840:	40013400 	.word	0x40013400

08008844 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800884c:	bf00      	nop
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008860:	bf00      	nop
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e040      	b.n	8008914 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008896:	2b00      	cmp	r3, #0
 8008898:	d106      	bne.n	80088a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f7f9 feb2 	bl	800260c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2224      	movs	r2, #36	@ 0x24
 80088ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f022 0201 	bic.w	r2, r2, #1
 80088bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d002      	beq.n	80088cc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fa86 	bl	8008dd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f8af 	bl	8008a30 <UART_SetConfig>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d101      	bne.n	80088dc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	e01b      	b.n	8008914 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	685a      	ldr	r2, [r3, #4]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80088ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	689a      	ldr	r2, [r3, #8]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80088fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f042 0201 	orr.w	r2, r2, #1
 800890a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 fb05 	bl	8008f1c <UART_CheckIdleState>
 8008912:	4603      	mov	r3, r0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b08a      	sub	sp, #40	@ 0x28
 8008920:	af02      	add	r7, sp, #8
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	603b      	str	r3, [r7, #0]
 8008928:	4613      	mov	r3, r2
 800892a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008930:	2b20      	cmp	r3, #32
 8008932:	d177      	bne.n	8008a24 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d002      	beq.n	8008940 <HAL_UART_Transmit+0x24>
 800893a:	88fb      	ldrh	r3, [r7, #6]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d101      	bne.n	8008944 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	e070      	b.n	8008a26 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2221      	movs	r2, #33	@ 0x21
 8008950:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008952:	f7fa fb19 	bl	8002f88 <HAL_GetTick>
 8008956:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	88fa      	ldrh	r2, [r7, #6]
 800895c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	88fa      	ldrh	r2, [r7, #6]
 8008964:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008970:	d108      	bne.n	8008984 <HAL_UART_Transmit+0x68>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d104      	bne.n	8008984 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800897a:	2300      	movs	r3, #0
 800897c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	61bb      	str	r3, [r7, #24]
 8008982:	e003      	b.n	800898c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008988:	2300      	movs	r3, #0
 800898a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800898c:	e02f      	b.n	80089ee <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	2200      	movs	r2, #0
 8008996:	2180      	movs	r1, #128	@ 0x80
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f000 fb67 	bl	800906c <UART_WaitOnFlagUntilTimeout>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d004      	beq.n	80089ae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2220      	movs	r2, #32
 80089a8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80089aa:	2303      	movs	r3, #3
 80089ac:	e03b      	b.n	8008a26 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10b      	bne.n	80089cc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	881a      	ldrh	r2, [r3, #0]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089c0:	b292      	uxth	r2, r2
 80089c2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80089c4:	69bb      	ldr	r3, [r7, #24]
 80089c6:	3302      	adds	r3, #2
 80089c8:	61bb      	str	r3, [r7, #24]
 80089ca:	e007      	b.n	80089dc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	781a      	ldrb	r2, [r3, #0]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	3301      	adds	r3, #1
 80089da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	3b01      	subs	r3, #1
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1c9      	bne.n	800898e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	9300      	str	r3, [sp, #0]
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	2200      	movs	r2, #0
 8008a02:	2140      	movs	r1, #64	@ 0x40
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f000 fb31 	bl	800906c <UART_WaitOnFlagUntilTimeout>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d004      	beq.n	8008a1a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2220      	movs	r2, #32
 8008a14:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008a16:	2303      	movs	r3, #3
 8008a18:	e005      	b.n	8008a26 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2220      	movs	r2, #32
 8008a1e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	e000      	b.n	8008a26 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008a24:	2302      	movs	r3, #2
  }
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3720      	adds	r7, #32
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
	...

08008a30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b088      	sub	sp, #32
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	689a      	ldr	r2, [r3, #8]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	431a      	orrs	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	695b      	ldr	r3, [r3, #20]
 8008a4a:	431a      	orrs	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	69db      	ldr	r3, [r3, #28]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8008a5e:	f023 030c 	bic.w	r3, r3, #12
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	6812      	ldr	r2, [r2, #0]
 8008a66:	6979      	ldr	r1, [r7, #20]
 8008a68:	430b      	orrs	r3, r1
 8008a6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	68da      	ldr	r2, [r3, #12]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	430a      	orrs	r2, r1
 8008a80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	699b      	ldr	r3, [r3, #24]
 8008a86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a1b      	ldr	r3, [r3, #32]
 8008a8c:	697a      	ldr	r2, [r7, #20]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4aa7      	ldr	r2, [pc, #668]	@ (8008d48 <UART_SetConfig+0x318>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d120      	bne.n	8008af2 <UART_SetConfig+0xc2>
 8008ab0:	4ba6      	ldr	r3, [pc, #664]	@ (8008d4c <UART_SetConfig+0x31c>)
 8008ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ab4:	f003 0303 	and.w	r3, r3, #3
 8008ab8:	2b03      	cmp	r3, #3
 8008aba:	d817      	bhi.n	8008aec <UART_SetConfig+0xbc>
 8008abc:	a201      	add	r2, pc, #4	@ (adr r2, 8008ac4 <UART_SetConfig+0x94>)
 8008abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac2:	bf00      	nop
 8008ac4:	08008ad5 	.word	0x08008ad5
 8008ac8:	08008ae1 	.word	0x08008ae1
 8008acc:	08008ae7 	.word	0x08008ae7
 8008ad0:	08008adb 	.word	0x08008adb
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	77fb      	strb	r3, [r7, #31]
 8008ad8:	e0b5      	b.n	8008c46 <UART_SetConfig+0x216>
 8008ada:	2302      	movs	r3, #2
 8008adc:	77fb      	strb	r3, [r7, #31]
 8008ade:	e0b2      	b.n	8008c46 <UART_SetConfig+0x216>
 8008ae0:	2304      	movs	r3, #4
 8008ae2:	77fb      	strb	r3, [r7, #31]
 8008ae4:	e0af      	b.n	8008c46 <UART_SetConfig+0x216>
 8008ae6:	2308      	movs	r3, #8
 8008ae8:	77fb      	strb	r3, [r7, #31]
 8008aea:	e0ac      	b.n	8008c46 <UART_SetConfig+0x216>
 8008aec:	2310      	movs	r3, #16
 8008aee:	77fb      	strb	r3, [r7, #31]
 8008af0:	e0a9      	b.n	8008c46 <UART_SetConfig+0x216>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a96      	ldr	r2, [pc, #600]	@ (8008d50 <UART_SetConfig+0x320>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d124      	bne.n	8008b46 <UART_SetConfig+0x116>
 8008afc:	4b93      	ldr	r3, [pc, #588]	@ (8008d4c <UART_SetConfig+0x31c>)
 8008afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008b04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008b08:	d011      	beq.n	8008b2e <UART_SetConfig+0xfe>
 8008b0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008b0e:	d817      	bhi.n	8008b40 <UART_SetConfig+0x110>
 8008b10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b14:	d011      	beq.n	8008b3a <UART_SetConfig+0x10a>
 8008b16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b1a:	d811      	bhi.n	8008b40 <UART_SetConfig+0x110>
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d003      	beq.n	8008b28 <UART_SetConfig+0xf8>
 8008b20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b24:	d006      	beq.n	8008b34 <UART_SetConfig+0x104>
 8008b26:	e00b      	b.n	8008b40 <UART_SetConfig+0x110>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	77fb      	strb	r3, [r7, #31]
 8008b2c:	e08b      	b.n	8008c46 <UART_SetConfig+0x216>
 8008b2e:	2302      	movs	r3, #2
 8008b30:	77fb      	strb	r3, [r7, #31]
 8008b32:	e088      	b.n	8008c46 <UART_SetConfig+0x216>
 8008b34:	2304      	movs	r3, #4
 8008b36:	77fb      	strb	r3, [r7, #31]
 8008b38:	e085      	b.n	8008c46 <UART_SetConfig+0x216>
 8008b3a:	2308      	movs	r3, #8
 8008b3c:	77fb      	strb	r3, [r7, #31]
 8008b3e:	e082      	b.n	8008c46 <UART_SetConfig+0x216>
 8008b40:	2310      	movs	r3, #16
 8008b42:	77fb      	strb	r3, [r7, #31]
 8008b44:	e07f      	b.n	8008c46 <UART_SetConfig+0x216>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a82      	ldr	r2, [pc, #520]	@ (8008d54 <UART_SetConfig+0x324>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d124      	bne.n	8008b9a <UART_SetConfig+0x16a>
 8008b50:	4b7e      	ldr	r3, [pc, #504]	@ (8008d4c <UART_SetConfig+0x31c>)
 8008b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b54:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008b58:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008b5c:	d011      	beq.n	8008b82 <UART_SetConfig+0x152>
 8008b5e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008b62:	d817      	bhi.n	8008b94 <UART_SetConfig+0x164>
 8008b64:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008b68:	d011      	beq.n	8008b8e <UART_SetConfig+0x15e>
 8008b6a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008b6e:	d811      	bhi.n	8008b94 <UART_SetConfig+0x164>
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d003      	beq.n	8008b7c <UART_SetConfig+0x14c>
 8008b74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008b78:	d006      	beq.n	8008b88 <UART_SetConfig+0x158>
 8008b7a:	e00b      	b.n	8008b94 <UART_SetConfig+0x164>
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	77fb      	strb	r3, [r7, #31]
 8008b80:	e061      	b.n	8008c46 <UART_SetConfig+0x216>
 8008b82:	2302      	movs	r3, #2
 8008b84:	77fb      	strb	r3, [r7, #31]
 8008b86:	e05e      	b.n	8008c46 <UART_SetConfig+0x216>
 8008b88:	2304      	movs	r3, #4
 8008b8a:	77fb      	strb	r3, [r7, #31]
 8008b8c:	e05b      	b.n	8008c46 <UART_SetConfig+0x216>
 8008b8e:	2308      	movs	r3, #8
 8008b90:	77fb      	strb	r3, [r7, #31]
 8008b92:	e058      	b.n	8008c46 <UART_SetConfig+0x216>
 8008b94:	2310      	movs	r3, #16
 8008b96:	77fb      	strb	r3, [r7, #31]
 8008b98:	e055      	b.n	8008c46 <UART_SetConfig+0x216>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a6e      	ldr	r2, [pc, #440]	@ (8008d58 <UART_SetConfig+0x328>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d124      	bne.n	8008bee <UART_SetConfig+0x1be>
 8008ba4:	4b69      	ldr	r3, [pc, #420]	@ (8008d4c <UART_SetConfig+0x31c>)
 8008ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ba8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008bac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008bb0:	d011      	beq.n	8008bd6 <UART_SetConfig+0x1a6>
 8008bb2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008bb6:	d817      	bhi.n	8008be8 <UART_SetConfig+0x1b8>
 8008bb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008bbc:	d011      	beq.n	8008be2 <UART_SetConfig+0x1b2>
 8008bbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008bc2:	d811      	bhi.n	8008be8 <UART_SetConfig+0x1b8>
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d003      	beq.n	8008bd0 <UART_SetConfig+0x1a0>
 8008bc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bcc:	d006      	beq.n	8008bdc <UART_SetConfig+0x1ac>
 8008bce:	e00b      	b.n	8008be8 <UART_SetConfig+0x1b8>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	77fb      	strb	r3, [r7, #31]
 8008bd4:	e037      	b.n	8008c46 <UART_SetConfig+0x216>
 8008bd6:	2302      	movs	r3, #2
 8008bd8:	77fb      	strb	r3, [r7, #31]
 8008bda:	e034      	b.n	8008c46 <UART_SetConfig+0x216>
 8008bdc:	2304      	movs	r3, #4
 8008bde:	77fb      	strb	r3, [r7, #31]
 8008be0:	e031      	b.n	8008c46 <UART_SetConfig+0x216>
 8008be2:	2308      	movs	r3, #8
 8008be4:	77fb      	strb	r3, [r7, #31]
 8008be6:	e02e      	b.n	8008c46 <UART_SetConfig+0x216>
 8008be8:	2310      	movs	r3, #16
 8008bea:	77fb      	strb	r3, [r7, #31]
 8008bec:	e02b      	b.n	8008c46 <UART_SetConfig+0x216>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a5a      	ldr	r2, [pc, #360]	@ (8008d5c <UART_SetConfig+0x32c>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d124      	bne.n	8008c42 <UART_SetConfig+0x212>
 8008bf8:	4b54      	ldr	r3, [pc, #336]	@ (8008d4c <UART_SetConfig+0x31c>)
 8008bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bfc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008c00:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008c04:	d011      	beq.n	8008c2a <UART_SetConfig+0x1fa>
 8008c06:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008c0a:	d817      	bhi.n	8008c3c <UART_SetConfig+0x20c>
 8008c0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008c10:	d011      	beq.n	8008c36 <UART_SetConfig+0x206>
 8008c12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008c16:	d811      	bhi.n	8008c3c <UART_SetConfig+0x20c>
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d003      	beq.n	8008c24 <UART_SetConfig+0x1f4>
 8008c1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008c20:	d006      	beq.n	8008c30 <UART_SetConfig+0x200>
 8008c22:	e00b      	b.n	8008c3c <UART_SetConfig+0x20c>
 8008c24:	2300      	movs	r3, #0
 8008c26:	77fb      	strb	r3, [r7, #31]
 8008c28:	e00d      	b.n	8008c46 <UART_SetConfig+0x216>
 8008c2a:	2302      	movs	r3, #2
 8008c2c:	77fb      	strb	r3, [r7, #31]
 8008c2e:	e00a      	b.n	8008c46 <UART_SetConfig+0x216>
 8008c30:	2304      	movs	r3, #4
 8008c32:	77fb      	strb	r3, [r7, #31]
 8008c34:	e007      	b.n	8008c46 <UART_SetConfig+0x216>
 8008c36:	2308      	movs	r3, #8
 8008c38:	77fb      	strb	r3, [r7, #31]
 8008c3a:	e004      	b.n	8008c46 <UART_SetConfig+0x216>
 8008c3c:	2310      	movs	r3, #16
 8008c3e:	77fb      	strb	r3, [r7, #31]
 8008c40:	e001      	b.n	8008c46 <UART_SetConfig+0x216>
 8008c42:	2310      	movs	r3, #16
 8008c44:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	69db      	ldr	r3, [r3, #28]
 8008c4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c4e:	d15b      	bne.n	8008d08 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8008c50:	7ffb      	ldrb	r3, [r7, #31]
 8008c52:	2b08      	cmp	r3, #8
 8008c54:	d827      	bhi.n	8008ca6 <UART_SetConfig+0x276>
 8008c56:	a201      	add	r2, pc, #4	@ (adr r2, 8008c5c <UART_SetConfig+0x22c>)
 8008c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c5c:	08008c81 	.word	0x08008c81
 8008c60:	08008c89 	.word	0x08008c89
 8008c64:	08008c91 	.word	0x08008c91
 8008c68:	08008ca7 	.word	0x08008ca7
 8008c6c:	08008c97 	.word	0x08008c97
 8008c70:	08008ca7 	.word	0x08008ca7
 8008c74:	08008ca7 	.word	0x08008ca7
 8008c78:	08008ca7 	.word	0x08008ca7
 8008c7c:	08008c9f 	.word	0x08008c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c80:	f7fe f920 	bl	8006ec4 <HAL_RCC_GetPCLK1Freq>
 8008c84:	61b8      	str	r0, [r7, #24]
        break;
 8008c86:	e013      	b.n	8008cb0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c88:	f7fe f93e 	bl	8006f08 <HAL_RCC_GetPCLK2Freq>
 8008c8c:	61b8      	str	r0, [r7, #24]
        break;
 8008c8e:	e00f      	b.n	8008cb0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c90:	4b33      	ldr	r3, [pc, #204]	@ (8008d60 <UART_SetConfig+0x330>)
 8008c92:	61bb      	str	r3, [r7, #24]
        break;
 8008c94:	e00c      	b.n	8008cb0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c96:	f7fe f8b5 	bl	8006e04 <HAL_RCC_GetSysClockFreq>
 8008c9a:	61b8      	str	r0, [r7, #24]
        break;
 8008c9c:	e008      	b.n	8008cb0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ca2:	61bb      	str	r3, [r7, #24]
        break;
 8008ca4:	e004      	b.n	8008cb0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	77bb      	strb	r3, [r7, #30]
        break;
 8008cae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f000 8082 	beq.w	8008dbc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	005a      	lsls	r2, r3, #1
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	085b      	lsrs	r3, r3, #1
 8008cc2:	441a      	add	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ccc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	2b0f      	cmp	r3, #15
 8008cd2:	d916      	bls.n	8008d02 <UART_SetConfig+0x2d2>
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cda:	d212      	bcs.n	8008d02 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	f023 030f 	bic.w	r3, r3, #15
 8008ce4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	085b      	lsrs	r3, r3, #1
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	f003 0307 	and.w	r3, r3, #7
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	89fb      	ldrh	r3, [r7, #14]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	89fa      	ldrh	r2, [r7, #14]
 8008cfe:	60da      	str	r2, [r3, #12]
 8008d00:	e05c      	b.n	8008dbc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	77bb      	strb	r3, [r7, #30]
 8008d06:	e059      	b.n	8008dbc <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d08:	7ffb      	ldrb	r3, [r7, #31]
 8008d0a:	2b08      	cmp	r3, #8
 8008d0c:	d835      	bhi.n	8008d7a <UART_SetConfig+0x34a>
 8008d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d14 <UART_SetConfig+0x2e4>)
 8008d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d14:	08008d39 	.word	0x08008d39
 8008d18:	08008d41 	.word	0x08008d41
 8008d1c:	08008d65 	.word	0x08008d65
 8008d20:	08008d7b 	.word	0x08008d7b
 8008d24:	08008d6b 	.word	0x08008d6b
 8008d28:	08008d7b 	.word	0x08008d7b
 8008d2c:	08008d7b 	.word	0x08008d7b
 8008d30:	08008d7b 	.word	0x08008d7b
 8008d34:	08008d73 	.word	0x08008d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d38:	f7fe f8c4 	bl	8006ec4 <HAL_RCC_GetPCLK1Freq>
 8008d3c:	61b8      	str	r0, [r7, #24]
        break;
 8008d3e:	e021      	b.n	8008d84 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d40:	f7fe f8e2 	bl	8006f08 <HAL_RCC_GetPCLK2Freq>
 8008d44:	61b8      	str	r0, [r7, #24]
        break;
 8008d46:	e01d      	b.n	8008d84 <UART_SetConfig+0x354>
 8008d48:	40013800 	.word	0x40013800
 8008d4c:	40021000 	.word	0x40021000
 8008d50:	40004400 	.word	0x40004400
 8008d54:	40004800 	.word	0x40004800
 8008d58:	40004c00 	.word	0x40004c00
 8008d5c:	40005000 	.word	0x40005000
 8008d60:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d64:	4b1b      	ldr	r3, [pc, #108]	@ (8008dd4 <UART_SetConfig+0x3a4>)
 8008d66:	61bb      	str	r3, [r7, #24]
        break;
 8008d68:	e00c      	b.n	8008d84 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d6a:	f7fe f84b 	bl	8006e04 <HAL_RCC_GetSysClockFreq>
 8008d6e:	61b8      	str	r0, [r7, #24]
        break;
 8008d70:	e008      	b.n	8008d84 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d76:	61bb      	str	r3, [r7, #24]
        break;
 8008d78:	e004      	b.n	8008d84 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	77bb      	strb	r3, [r7, #30]
        break;
 8008d82:	bf00      	nop
    }

    if (pclk != 0U)
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d018      	beq.n	8008dbc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	085a      	lsrs	r2, r3, #1
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	441a      	add	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	2b0f      	cmp	r3, #15
 8008da2:	d909      	bls.n	8008db8 <UART_SetConfig+0x388>
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008daa:	d205      	bcs.n	8008db8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	b29a      	uxth	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	60da      	str	r2, [r3, #12]
 8008db6:	e001      	b.n	8008dbc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008dc8:	7fbb      	ldrb	r3, [r7, #30]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3720      	adds	r7, #32
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	007a1200 	.word	0x007a1200

08008dd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008de4:	f003 0308 	and.w	r3, r3, #8
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00a      	beq.n	8008e02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e06:	f003 0301 	and.w	r3, r3, #1
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00a      	beq.n	8008e24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	430a      	orrs	r2, r1
 8008e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e28:	f003 0302 	and.w	r3, r3, #2
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00a      	beq.n	8008e46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	430a      	orrs	r2, r1
 8008e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e4a:	f003 0304 	and.w	r3, r3, #4
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00a      	beq.n	8008e68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	430a      	orrs	r2, r1
 8008e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e6c:	f003 0310 	and.w	r3, r3, #16
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00a      	beq.n	8008e8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	430a      	orrs	r2, r1
 8008e88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e8e:	f003 0320 	and.w	r3, r3, #32
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00a      	beq.n	8008eac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	430a      	orrs	r2, r1
 8008eaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d01a      	beq.n	8008eee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	430a      	orrs	r2, r1
 8008ecc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ed6:	d10a      	bne.n	8008eee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	430a      	orrs	r2, r1
 8008eec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00a      	beq.n	8008f10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	430a      	orrs	r2, r1
 8008f0e:	605a      	str	r2, [r3, #4]
  }
}
 8008f10:	bf00      	nop
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b098      	sub	sp, #96	@ 0x60
 8008f20:	af02      	add	r7, sp, #8
 8008f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f2c:	f7fa f82c 	bl	8002f88 <HAL_GetTick>
 8008f30:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 0308 	and.w	r3, r3, #8
 8008f3c:	2b08      	cmp	r3, #8
 8008f3e:	d12e      	bne.n	8008f9e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f44:	9300      	str	r3, [sp, #0]
 8008f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f88c 	bl	800906c <UART_WaitOnFlagUntilTimeout>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d021      	beq.n	8008f9e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f62:	e853 3f00 	ldrex	r3, [r3]
 8008f66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	461a      	mov	r2, r3
 8008f76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f78:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f7a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f80:	e841 2300 	strex	r3, r2, [r1]
 8008f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d1e6      	bne.n	8008f5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2220      	movs	r2, #32
 8008f90:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f9a:	2303      	movs	r3, #3
 8008f9c:	e062      	b.n	8009064 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 0304 	and.w	r3, r3, #4
 8008fa8:	2b04      	cmp	r3, #4
 8008faa:	d149      	bne.n	8009040 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008fb0:	9300      	str	r3, [sp, #0]
 8008fb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 f856 	bl	800906c <UART_WaitOnFlagUntilTimeout>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d03c      	beq.n	8009040 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fce:	e853 3f00 	ldrex	r3, [r3]
 8008fd2:	623b      	str	r3, [r7, #32]
   return(result);
 8008fd4:	6a3b      	ldr	r3, [r7, #32]
 8008fd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fe4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fe6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008fea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fec:	e841 2300 	strex	r3, r2, [r1]
 8008ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1e6      	bne.n	8008fc6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	3308      	adds	r3, #8
 8008ffe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	e853 3f00 	ldrex	r3, [r3]
 8009006:	60fb      	str	r3, [r7, #12]
   return(result);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f023 0301 	bic.w	r3, r3, #1
 800900e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	3308      	adds	r3, #8
 8009016:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009018:	61fa      	str	r2, [r7, #28]
 800901a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901c:	69b9      	ldr	r1, [r7, #24]
 800901e:	69fa      	ldr	r2, [r7, #28]
 8009020:	e841 2300 	strex	r3, r2, [r1]
 8009024:	617b      	str	r3, [r7, #20]
   return(result);
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1e5      	bne.n	8008ff8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2220      	movs	r2, #32
 8009030:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800903c:	2303      	movs	r3, #3
 800903e:	e011      	b.n	8009064 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2220      	movs	r2, #32
 8009044:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2220      	movs	r2, #32
 800904a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3758      	adds	r7, #88	@ 0x58
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	603b      	str	r3, [r7, #0]
 8009078:	4613      	mov	r3, r2
 800907a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800907c:	e04f      	b.n	800911e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009084:	d04b      	beq.n	800911e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009086:	f7f9 ff7f 	bl	8002f88 <HAL_GetTick>
 800908a:	4602      	mov	r2, r0
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	1ad3      	subs	r3, r2, r3
 8009090:	69ba      	ldr	r2, [r7, #24]
 8009092:	429a      	cmp	r2, r3
 8009094:	d302      	bcc.n	800909c <UART_WaitOnFlagUntilTimeout+0x30>
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d101      	bne.n	80090a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800909c:	2303      	movs	r3, #3
 800909e:	e04e      	b.n	800913e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 0304 	and.w	r3, r3, #4
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d037      	beq.n	800911e <UART_WaitOnFlagUntilTimeout+0xb2>
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	2b80      	cmp	r3, #128	@ 0x80
 80090b2:	d034      	beq.n	800911e <UART_WaitOnFlagUntilTimeout+0xb2>
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	2b40      	cmp	r3, #64	@ 0x40
 80090b8:	d031      	beq.n	800911e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	69db      	ldr	r3, [r3, #28]
 80090c0:	f003 0308 	and.w	r3, r3, #8
 80090c4:	2b08      	cmp	r3, #8
 80090c6:	d110      	bne.n	80090ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2208      	movs	r2, #8
 80090ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f000 f838 	bl	8009146 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2208      	movs	r2, #8
 80090da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	e029      	b.n	800913e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	69db      	ldr	r3, [r3, #28]
 80090f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090f8:	d111      	bne.n	800911e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009102:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f000 f81e 	bl	8009146 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2220      	movs	r2, #32
 800910e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800911a:	2303      	movs	r3, #3
 800911c:	e00f      	b.n	800913e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	69da      	ldr	r2, [r3, #28]
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	4013      	ands	r3, r2
 8009128:	68ba      	ldr	r2, [r7, #8]
 800912a:	429a      	cmp	r2, r3
 800912c:	bf0c      	ite	eq
 800912e:	2301      	moveq	r3, #1
 8009130:	2300      	movne	r3, #0
 8009132:	b2db      	uxtb	r3, r3
 8009134:	461a      	mov	r2, r3
 8009136:	79fb      	ldrb	r3, [r7, #7]
 8009138:	429a      	cmp	r2, r3
 800913a:	d0a0      	beq.n	800907e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800913c:	2300      	movs	r3, #0
}
 800913e:	4618      	mov	r0, r3
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009146:	b480      	push	{r7}
 8009148:	b095      	sub	sp, #84	@ 0x54
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009156:	e853 3f00 	ldrex	r3, [r3]
 800915a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800915c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009162:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	461a      	mov	r2, r3
 800916a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800916c:	643b      	str	r3, [r7, #64]	@ 0x40
 800916e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009170:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009172:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009174:	e841 2300 	strex	r3, r2, [r1]
 8009178:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800917a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1e6      	bne.n	800914e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	3308      	adds	r3, #8
 8009186:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009188:	6a3b      	ldr	r3, [r7, #32]
 800918a:	e853 3f00 	ldrex	r3, [r3]
 800918e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	f023 0301 	bic.w	r3, r3, #1
 8009196:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	3308      	adds	r3, #8
 800919e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80091a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091a8:	e841 2300 	strex	r3, r2, [r1]
 80091ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1e5      	bne.n	8009180 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d118      	bne.n	80091ee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	e853 3f00 	ldrex	r3, [r3]
 80091c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	f023 0310 	bic.w	r3, r3, #16
 80091d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	461a      	mov	r2, r3
 80091d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091da:	61bb      	str	r3, [r7, #24]
 80091dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091de:	6979      	ldr	r1, [r7, #20]
 80091e0:	69ba      	ldr	r2, [r7, #24]
 80091e2:	e841 2300 	strex	r3, r2, [r1]
 80091e6:	613b      	str	r3, [r7, #16]
   return(result);
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1e6      	bne.n	80091bc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2220      	movs	r2, #32
 80091f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009202:	bf00      	nop
 8009204:	3754      	adds	r7, #84	@ 0x54
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr

0800920e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800920e:	b480      	push	{r7}
 8009210:	b085      	sub	sp, #20
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800921e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8009222:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	b29a      	uxth	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3714      	adds	r7, #20
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009244:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8009248:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009250:	b29a      	uxth	r2, r3
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	b29b      	uxth	r3, r3
 8009256:	43db      	mvns	r3, r3
 8009258:	b29b      	uxth	r3, r3
 800925a:	4013      	ands	r3, r2
 800925c:	b29a      	uxth	r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr

08009272 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009272:	b480      	push	{r7}
 8009274:	b085      	sub	sp, #20
 8009276:	af00      	add	r7, sp, #0
 8009278:	60f8      	str	r0, [r7, #12]
 800927a:	1d3b      	adds	r3, r7, #4
 800927c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2201      	movs	r2, #1
 8009284:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2200      	movs	r2, #0
 8009294:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3714      	adds	r7, #20
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr
	...

080092b0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b09d      	sub	sp, #116	@ 0x74
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4413      	add	r3, r2
 80092ca:	881b      	ldrh	r3, [r3, #0]
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80092d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092d6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	78db      	ldrb	r3, [r3, #3]
 80092de:	2b03      	cmp	r3, #3
 80092e0:	d81f      	bhi.n	8009322 <USB_ActivateEndpoint+0x72>
 80092e2:	a201      	add	r2, pc, #4	@ (adr r2, 80092e8 <USB_ActivateEndpoint+0x38>)
 80092e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e8:	080092f9 	.word	0x080092f9
 80092ec:	08009315 	.word	0x08009315
 80092f0:	0800932b 	.word	0x0800932b
 80092f4:	08009307 	.word	0x08009307
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80092f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80092fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009300:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009304:	e012      	b.n	800932c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009306:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800930a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800930e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009312:	e00b      	b.n	800932c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009314:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009318:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800931c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009320:	e004      	b.n	800932c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8009328:	e000      	b.n	800932c <USB_ActivateEndpoint+0x7c>
      break;
 800932a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	441a      	add	r2, r3
 8009336:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800933a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800933e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009342:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800934a:	b29b      	uxth	r3, r3
 800934c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	4413      	add	r3, r2
 8009358:	881b      	ldrh	r3, [r3, #0]
 800935a:	b29b      	uxth	r3, r3
 800935c:	b21b      	sxth	r3, r3
 800935e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009366:	b21a      	sxth	r2, r3
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	b21b      	sxth	r3, r3
 800936e:	4313      	orrs	r3, r2
 8009370:	b21b      	sxth	r3, r3
 8009372:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	441a      	add	r2, r3
 8009380:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009384:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009388:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800938c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009390:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009394:	b29b      	uxth	r3, r3
 8009396:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	7b1b      	ldrb	r3, [r3, #12]
 800939c:	2b00      	cmp	r3, #0
 800939e:	f040 8178 	bne.w	8009692 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	785b      	ldrb	r3, [r3, #1]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f000 8084 	beq.w	80094b4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	61bb      	str	r3, [r7, #24]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	461a      	mov	r2, r3
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	4413      	add	r3, r2
 80093be:	61bb      	str	r3, [r7, #24]
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	011a      	lsls	r2, r3, #4
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	4413      	add	r3, r2
 80093ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80093ce:	617b      	str	r3, [r7, #20]
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	88db      	ldrh	r3, [r3, #6]
 80093d4:	085b      	lsrs	r3, r3, #1
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	005b      	lsls	r3, r3, #1
 80093da:	b29a      	uxth	r2, r3
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	4413      	add	r3, r2
 80093ea:	881b      	ldrh	r3, [r3, #0]
 80093ec:	827b      	strh	r3, [r7, #18]
 80093ee:	8a7b      	ldrh	r3, [r7, #18]
 80093f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d01b      	beq.n	8009430 <USB_ActivateEndpoint+0x180>
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	4413      	add	r3, r2
 8009402:	881b      	ldrh	r3, [r3, #0]
 8009404:	b29b      	uxth	r3, r3
 8009406:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800940a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800940e:	823b      	strh	r3, [r7, #16]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	441a      	add	r2, r3
 800941a:	8a3b      	ldrh	r3, [r7, #16]
 800941c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009420:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009424:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009428:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800942c:	b29b      	uxth	r3, r3
 800942e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	78db      	ldrb	r3, [r3, #3]
 8009434:	2b01      	cmp	r3, #1
 8009436:	d020      	beq.n	800947a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	4413      	add	r3, r2
 8009442:	881b      	ldrh	r3, [r3, #0]
 8009444:	b29b      	uxth	r3, r3
 8009446:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800944a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800944e:	81bb      	strh	r3, [r7, #12]
 8009450:	89bb      	ldrh	r3, [r7, #12]
 8009452:	f083 0320 	eor.w	r3, r3, #32
 8009456:	81bb      	strh	r3, [r7, #12]
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	441a      	add	r2, r3
 8009462:	89bb      	ldrh	r3, [r7, #12]
 8009464:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009468:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800946c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009470:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009474:	b29b      	uxth	r3, r3
 8009476:	8013      	strh	r3, [r2, #0]
 8009478:	e2d5      	b.n	8009a26 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	4413      	add	r3, r2
 8009484:	881b      	ldrh	r3, [r3, #0]
 8009486:	b29b      	uxth	r3, r3
 8009488:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800948c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009490:	81fb      	strh	r3, [r7, #14]
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	441a      	add	r2, r3
 800949c:	89fb      	ldrh	r3, [r7, #14]
 800949e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	8013      	strh	r3, [r2, #0]
 80094b2:	e2b8      	b.n	8009a26 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094be:	b29b      	uxth	r3, r3
 80094c0:	461a      	mov	r2, r3
 80094c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c4:	4413      	add	r3, r2
 80094c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	011a      	lsls	r2, r3, #4
 80094ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d0:	4413      	add	r3, r2
 80094d2:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80094d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	88db      	ldrh	r3, [r3, #6]
 80094dc:	085b      	lsrs	r3, r3, #1
 80094de:	b29b      	uxth	r3, r3
 80094e0:	005b      	lsls	r3, r3, #1
 80094e2:	b29a      	uxth	r2, r3
 80094e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094e6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	461a      	mov	r2, r3
 80094f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f8:	4413      	add	r3, r2
 80094fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	011a      	lsls	r2, r3, #4
 8009502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009504:	4413      	add	r3, r2
 8009506:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800950a:	627b      	str	r3, [r7, #36]	@ 0x24
 800950c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800950e:	881b      	ldrh	r3, [r3, #0]
 8009510:	b29b      	uxth	r3, r3
 8009512:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009516:	b29a      	uxth	r2, r3
 8009518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800951a:	801a      	strh	r2, [r3, #0]
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	691b      	ldr	r3, [r3, #16]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d10a      	bne.n	800953a <USB_ActivateEndpoint+0x28a>
 8009524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009526:	881b      	ldrh	r3, [r3, #0]
 8009528:	b29b      	uxth	r3, r3
 800952a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800952e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009532:	b29a      	uxth	r2, r3
 8009534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009536:	801a      	strh	r2, [r3, #0]
 8009538:	e039      	b.n	80095ae <USB_ActivateEndpoint+0x2fe>
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009540:	d818      	bhi.n	8009574 <USB_ActivateEndpoint+0x2c4>
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	085b      	lsrs	r3, r3, #1
 8009548:	66bb      	str	r3, [r7, #104]	@ 0x68
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	691b      	ldr	r3, [r3, #16]
 800954e:	f003 0301 	and.w	r3, r3, #1
 8009552:	2b00      	cmp	r3, #0
 8009554:	d002      	beq.n	800955c <USB_ActivateEndpoint+0x2ac>
 8009556:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009558:	3301      	adds	r3, #1
 800955a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800955c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800955e:	881b      	ldrh	r3, [r3, #0]
 8009560:	b29a      	uxth	r2, r3
 8009562:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009564:	b29b      	uxth	r3, r3
 8009566:	029b      	lsls	r3, r3, #10
 8009568:	b29b      	uxth	r3, r3
 800956a:	4313      	orrs	r3, r2
 800956c:	b29a      	uxth	r2, r3
 800956e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009570:	801a      	strh	r2, [r3, #0]
 8009572:	e01c      	b.n	80095ae <USB_ActivateEndpoint+0x2fe>
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	691b      	ldr	r3, [r3, #16]
 8009578:	095b      	lsrs	r3, r3, #5
 800957a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	f003 031f 	and.w	r3, r3, #31
 8009584:	2b00      	cmp	r3, #0
 8009586:	d102      	bne.n	800958e <USB_ActivateEndpoint+0x2de>
 8009588:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800958a:	3b01      	subs	r3, #1
 800958c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800958e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009590:	881b      	ldrh	r3, [r3, #0]
 8009592:	b29a      	uxth	r2, r3
 8009594:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009596:	b29b      	uxth	r3, r3
 8009598:	029b      	lsls	r3, r3, #10
 800959a:	b29b      	uxth	r3, r3
 800959c:	4313      	orrs	r3, r2
 800959e:	b29b      	uxth	r3, r3
 80095a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	4413      	add	r3, r2
 80095b8:	881b      	ldrh	r3, [r3, #0]
 80095ba:	847b      	strh	r3, [r7, #34]	@ 0x22
 80095bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80095be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d01b      	beq.n	80095fe <USB_ActivateEndpoint+0x34e>
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	4413      	add	r3, r2
 80095d0:	881b      	ldrh	r3, [r3, #0]
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095dc:	843b      	strh	r3, [r7, #32]
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	441a      	add	r2, r3
 80095e8:	8c3b      	ldrh	r3, [r7, #32]
 80095ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80095f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d124      	bne.n	8009650 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	4413      	add	r3, r2
 8009610:	881b      	ldrh	r3, [r3, #0]
 8009612:	b29b      	uxth	r3, r3
 8009614:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009618:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800961c:	83bb      	strh	r3, [r7, #28]
 800961e:	8bbb      	ldrh	r3, [r7, #28]
 8009620:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009624:	83bb      	strh	r3, [r7, #28]
 8009626:	8bbb      	ldrh	r3, [r7, #28]
 8009628:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800962c:	83bb      	strh	r3, [r7, #28]
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	441a      	add	r2, r3
 8009638:	8bbb      	ldrh	r3, [r7, #28]
 800963a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800963e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009642:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800964a:	b29b      	uxth	r3, r3
 800964c:	8013      	strh	r3, [r2, #0]
 800964e:	e1ea      	b.n	8009a26 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	4413      	add	r3, r2
 800965a:	881b      	ldrh	r3, [r3, #0]
 800965c:	b29b      	uxth	r3, r3
 800965e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009666:	83fb      	strh	r3, [r7, #30]
 8009668:	8bfb      	ldrh	r3, [r7, #30]
 800966a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800966e:	83fb      	strh	r3, [r7, #30]
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	441a      	add	r2, r3
 800967a:	8bfb      	ldrh	r3, [r7, #30]
 800967c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009680:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009684:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009688:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800968c:	b29b      	uxth	r3, r3
 800968e:	8013      	strh	r3, [r2, #0]
 8009690:	e1c9      	b.n	8009a26 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	78db      	ldrb	r3, [r3, #3]
 8009696:	2b02      	cmp	r3, #2
 8009698:	d11e      	bne.n	80096d8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	4413      	add	r3, r2
 80096a4:	881b      	ldrh	r3, [r3, #0]
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096b0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	441a      	add	r2, r3
 80096be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80096c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096ca:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80096ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	8013      	strh	r3, [r2, #0]
 80096d6:	e01d      	b.n	8009714 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	4413      	add	r3, r2
 80096e2:	881b      	ldrh	r3, [r3, #0]
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80096ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096ee:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	441a      	add	r2, r3
 80096fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009700:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009704:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009708:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800970c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009710:	b29b      	uxth	r3, r3
 8009712:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800971e:	b29b      	uxth	r3, r3
 8009720:	461a      	mov	r2, r3
 8009722:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009724:	4413      	add	r3, r2
 8009726:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	011a      	lsls	r2, r3, #4
 800972e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009730:	4413      	add	r3, r2
 8009732:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009736:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	891b      	ldrh	r3, [r3, #8]
 800973c:	085b      	lsrs	r3, r3, #1
 800973e:	b29b      	uxth	r3, r3
 8009740:	005b      	lsls	r3, r3, #1
 8009742:	b29a      	uxth	r2, r3
 8009744:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009746:	801a      	strh	r2, [r3, #0]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	657b      	str	r3, [r7, #84]	@ 0x54
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009752:	b29b      	uxth	r3, r3
 8009754:	461a      	mov	r2, r3
 8009756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009758:	4413      	add	r3, r2
 800975a:	657b      	str	r3, [r7, #84]	@ 0x54
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	011a      	lsls	r2, r3, #4
 8009762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009764:	4413      	add	r3, r2
 8009766:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800976a:	653b      	str	r3, [r7, #80]	@ 0x50
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	895b      	ldrh	r3, [r3, #10]
 8009770:	085b      	lsrs	r3, r3, #1
 8009772:	b29b      	uxth	r3, r3
 8009774:	005b      	lsls	r3, r3, #1
 8009776:	b29a      	uxth	r2, r3
 8009778:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800977a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	785b      	ldrb	r3, [r3, #1]
 8009780:	2b00      	cmp	r3, #0
 8009782:	f040 8093 	bne.w	80098ac <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	4413      	add	r3, r2
 8009790:	881b      	ldrh	r3, [r3, #0]
 8009792:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8009796:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800979a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d01b      	beq.n	80097da <USB_ActivateEndpoint+0x52a>
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	4413      	add	r3, r2
 80097ac:	881b      	ldrh	r3, [r3, #0]
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097b8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	441a      	add	r2, r3
 80097c4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80097c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80097d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	4413      	add	r3, r2
 80097e4:	881b      	ldrh	r3, [r3, #0]
 80097e6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80097e8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80097ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d01b      	beq.n	800982a <USB_ActivateEndpoint+0x57a>
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	4413      	add	r3, r2
 80097fc:	881b      	ldrh	r3, [r3, #0]
 80097fe:	b29b      	uxth	r3, r3
 8009800:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009804:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009808:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	441a      	add	r2, r3
 8009814:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009816:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800981a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800981e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009822:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009826:	b29b      	uxth	r3, r3
 8009828:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	4413      	add	r3, r2
 8009834:	881b      	ldrh	r3, [r3, #0]
 8009836:	b29b      	uxth	r3, r3
 8009838:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800983c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009840:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009842:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009844:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009848:	873b      	strh	r3, [r7, #56]	@ 0x38
 800984a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800984c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009850:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	441a      	add	r2, r3
 800985c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800985e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009862:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800986a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800986e:	b29b      	uxth	r3, r3
 8009870:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	4413      	add	r3, r2
 800987c:	881b      	ldrh	r3, [r3, #0]
 800987e:	b29b      	uxth	r3, r3
 8009880:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009884:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009888:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	441a      	add	r2, r3
 8009894:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009896:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800989a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800989e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	8013      	strh	r3, [r2, #0]
 80098aa:	e0bc      	b.n	8009a26 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4413      	add	r3, r2
 80098b6:	881b      	ldrh	r3, [r3, #0]
 80098b8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80098bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80098c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d01d      	beq.n	8009904 <USB_ActivateEndpoint+0x654>
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	4413      	add	r3, r2
 80098d2:	881b      	ldrh	r3, [r3, #0]
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098de:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	441a      	add	r2, r3
 80098ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80098f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80098fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009900:	b29b      	uxth	r3, r3
 8009902:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	4413      	add	r3, r2
 800990e:	881b      	ldrh	r3, [r3, #0]
 8009910:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8009914:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800991c:	2b00      	cmp	r3, #0
 800991e:	d01d      	beq.n	800995c <USB_ActivateEndpoint+0x6ac>
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4413      	add	r3, r2
 800992a:	881b      	ldrh	r3, [r3, #0]
 800992c:	b29b      	uxth	r3, r3
 800992e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009936:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	441a      	add	r2, r3
 8009944:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8009948:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800994c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009950:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009954:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009958:	b29b      	uxth	r3, r3
 800995a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	78db      	ldrb	r3, [r3, #3]
 8009960:	2b01      	cmp	r3, #1
 8009962:	d024      	beq.n	80099ae <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	4413      	add	r3, r2
 800996e:	881b      	ldrh	r3, [r3, #0]
 8009970:	b29b      	uxth	r3, r3
 8009972:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009976:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800997a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800997e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009982:	f083 0320 	eor.w	r3, r3, #32
 8009986:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	441a      	add	r2, r3
 8009994:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009998:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800999c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	8013      	strh	r3, [r2, #0]
 80099ac:	e01d      	b.n	80099ea <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	4413      	add	r3, r2
 80099b8:	881b      	ldrh	r3, [r3, #0]
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099c4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	441a      	add	r2, r3
 80099d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80099d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	4413      	add	r3, r2
 80099f4:	881b      	ldrh	r3, [r3, #0]
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80099fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a00:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	441a      	add	r2, r3
 8009a0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009a12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009a26:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3774      	adds	r7, #116	@ 0x74
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop

08009a38 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b08d      	sub	sp, #52	@ 0x34
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	7b1b      	ldrb	r3, [r3, #12]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	f040 808e 	bne.w	8009b68 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	785b      	ldrb	r3, [r3, #1]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d044      	beq.n	8009ade <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	4413      	add	r3, r2
 8009a5e:	881b      	ldrh	r3, [r3, #0]
 8009a60:	81bb      	strh	r3, [r7, #12]
 8009a62:	89bb      	ldrh	r3, [r7, #12]
 8009a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d01b      	beq.n	8009aa4 <USB_DeactivateEndpoint+0x6c>
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	4413      	add	r3, r2
 8009a76:	881b      	ldrh	r3, [r3, #0]
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a82:	817b      	strh	r3, [r7, #10]
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	441a      	add	r2, r3
 8009a8e:	897b      	ldrh	r3, [r7, #10]
 8009a90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4413      	add	r3, r2
 8009aae:	881b      	ldrh	r3, [r3, #0]
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ab6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009aba:	813b      	strh	r3, [r7, #8]
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	441a      	add	r2, r3
 8009ac6:	893b      	ldrh	r3, [r7, #8]
 8009ac8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009acc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ad0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	8013      	strh	r3, [r2, #0]
 8009adc:	e192      	b.n	8009e04 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	4413      	add	r3, r2
 8009ae8:	881b      	ldrh	r3, [r3, #0]
 8009aea:	827b      	strh	r3, [r7, #18]
 8009aec:	8a7b      	ldrh	r3, [r7, #18]
 8009aee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d01b      	beq.n	8009b2e <USB_DeactivateEndpoint+0xf6>
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	4413      	add	r3, r2
 8009b00:	881b      	ldrh	r3, [r3, #0]
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b0c:	823b      	strh	r3, [r7, #16]
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	441a      	add	r2, r3
 8009b18:	8a3b      	ldrh	r3, [r7, #16]
 8009b1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009b26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	4413      	add	r3, r2
 8009b38:	881b      	ldrh	r3, [r3, #0]
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b44:	81fb      	strh	r3, [r7, #14]
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	441a      	add	r2, r3
 8009b50:	89fb      	ldrh	r3, [r7, #14]
 8009b52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	8013      	strh	r3, [r2, #0]
 8009b66:	e14d      	b.n	8009e04 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	785b      	ldrb	r3, [r3, #1]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f040 80a5 	bne.w	8009cbc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	4413      	add	r3, r2
 8009b7c:	881b      	ldrh	r3, [r3, #0]
 8009b7e:	843b      	strh	r3, [r7, #32]
 8009b80:	8c3b      	ldrh	r3, [r7, #32]
 8009b82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d01b      	beq.n	8009bc2 <USB_DeactivateEndpoint+0x18a>
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	4413      	add	r3, r2
 8009b94:	881b      	ldrh	r3, [r3, #0]
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ba0:	83fb      	strh	r3, [r7, #30]
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	441a      	add	r2, r3
 8009bac:	8bfb      	ldrh	r3, [r7, #30]
 8009bae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	4413      	add	r3, r2
 8009bcc:	881b      	ldrh	r3, [r3, #0]
 8009bce:	83bb      	strh	r3, [r7, #28]
 8009bd0:	8bbb      	ldrh	r3, [r7, #28]
 8009bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d01b      	beq.n	8009c12 <USB_DeactivateEndpoint+0x1da>
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	4413      	add	r3, r2
 8009be4:	881b      	ldrh	r3, [r3, #0]
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009bec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bf0:	837b      	strh	r3, [r7, #26]
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	441a      	add	r2, r3
 8009bfc:	8b7b      	ldrh	r3, [r7, #26]
 8009bfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c0a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	4413      	add	r3, r2
 8009c1c:	881b      	ldrh	r3, [r3, #0]
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c28:	833b      	strh	r3, [r7, #24]
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	441a      	add	r2, r3
 8009c34:	8b3b      	ldrh	r3, [r7, #24]
 8009c36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c42:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4413      	add	r3, r2
 8009c54:	881b      	ldrh	r3, [r3, #0]
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009c5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c60:	82fb      	strh	r3, [r7, #22]
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	441a      	add	r2, r3
 8009c6c:	8afb      	ldrh	r3, [r7, #22]
 8009c6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4413      	add	r3, r2
 8009c8c:	881b      	ldrh	r3, [r3, #0]
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c98:	82bb      	strh	r3, [r7, #20]
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	441a      	add	r2, r3
 8009ca4:	8abb      	ldrh	r3, [r7, #20]
 8009ca6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009caa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009cae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	8013      	strh	r3, [r2, #0]
 8009cba:	e0a3      	b.n	8009e04 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	4413      	add	r3, r2
 8009cc6:	881b      	ldrh	r3, [r3, #0]
 8009cc8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8009cca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009ccc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d01b      	beq.n	8009d0c <USB_DeactivateEndpoint+0x2d4>
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	4413      	add	r3, r2
 8009cde:	881b      	ldrh	r3, [r3, #0]
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cea:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	441a      	add	r2, r3
 8009cf6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009cf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009cfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	4413      	add	r3, r2
 8009d16:	881b      	ldrh	r3, [r3, #0]
 8009d18:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009d1a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d01b      	beq.n	8009d5c <USB_DeactivateEndpoint+0x324>
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	4413      	add	r3, r2
 8009d2e:	881b      	ldrh	r3, [r3, #0]
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d3a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	441a      	add	r2, r3
 8009d46:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009d48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	4413      	add	r3, r2
 8009d66:	881b      	ldrh	r3, [r3, #0]
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d72:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	441a      	add	r2, r3
 8009d7e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009d80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009d8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	4413      	add	r3, r2
 8009d9e:	881b      	ldrh	r3, [r3, #0]
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009da6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009daa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	441a      	add	r2, r3
 8009db6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009db8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009dbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009dc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	4413      	add	r3, r2
 8009dd6:	881b      	ldrh	r3, [r3, #0]
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009de2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	441a      	add	r2, r3
 8009dee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009df0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009df4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009df8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009dfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3734      	adds	r7, #52	@ 0x34
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b0c2      	sub	sp, #264	@ 0x108
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e20:	6018      	str	r0, [r3, #0]
 8009e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e2a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	785b      	ldrb	r3, [r3, #1]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	f040 86b7 	bne.w	800abac <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	699a      	ldr	r2, [r3, #24]
 8009e4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d908      	bls.n	8009e6c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8009e5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009e6a:	e007      	b.n	8009e7c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	699b      	ldr	r3, [r3, #24]
 8009e78:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	7b1b      	ldrb	r3, [r3, #12]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d13a      	bne.n	8009f02 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009e8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	6959      	ldr	r1, [r3, #20]
 8009e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	88da      	ldrh	r2, [r3, #6]
 8009ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009eae:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009eb2:	6800      	ldr	r0, [r0, #0]
 8009eb4:	f001 fc8d 	bl	800b7d2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ebc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	613b      	str	r3, [r7, #16]
 8009ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ec8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	4413      	add	r3, r2
 8009eda:	613b      	str	r3, [r7, #16]
 8009edc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ee0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	011a      	lsls	r2, r3, #4
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	4413      	add	r3, r2
 8009eee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009ef2:	60fb      	str	r3, [r7, #12]
 8009ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ef8:	b29a      	uxth	r2, r3
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	801a      	strh	r2, [r3, #0]
 8009efe:	f000 be1f 	b.w	800ab40 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	78db      	ldrb	r3, [r3, #3]
 8009f0e:	2b02      	cmp	r3, #2
 8009f10:	f040 8462 	bne.w	800a7d8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	6a1a      	ldr	r2, [r3, #32]
 8009f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	691b      	ldr	r3, [r3, #16]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	f240 83df 	bls.w	800a6f0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	4413      	add	r3, r2
 8009f4c:	881b      	ldrh	r3, [r3, #0]
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f58:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8009f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	441a      	add	r2, r3
 8009f76:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009f7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f82:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009f8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	6a1a      	ldr	r2, [r3, #32]
 8009f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f9e:	1ad2      	subs	r2, r2, r3
 8009fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	4413      	add	r3, r2
 8009fc6:	881b      	ldrh	r3, [r3, #0]
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f000 81c7 	beq.w	800a362 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	633b      	str	r3, [r7, #48]	@ 0x30
 8009fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	785b      	ldrb	r3, [r3, #1]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d177      	bne.n	800a0e0 <USB_EPStartXfer+0x2ce>
 8009ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ff4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a000:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	461a      	mov	r2, r3
 800a00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a010:	4413      	add	r3, r2
 800a012:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a018:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	011a      	lsls	r2, r3, #4
 800a022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a024:	4413      	add	r3, r2
 800a026:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a02a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a02e:	881b      	ldrh	r3, [r3, #0]
 800a030:	b29b      	uxth	r3, r3
 800a032:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a036:	b29a      	uxth	r2, r3
 800a038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a03a:	801a      	strh	r2, [r3, #0]
 800a03c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a040:	2b00      	cmp	r3, #0
 800a042:	d10a      	bne.n	800a05a <USB_EPStartXfer+0x248>
 800a044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a046:	881b      	ldrh	r3, [r3, #0]
 800a048:	b29b      	uxth	r3, r3
 800a04a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a04e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a052:	b29a      	uxth	r2, r3
 800a054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a056:	801a      	strh	r2, [r3, #0]
 800a058:	e067      	b.n	800a12a <USB_EPStartXfer+0x318>
 800a05a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a05e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a060:	d81c      	bhi.n	800a09c <USB_EPStartXfer+0x28a>
 800a062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a066:	085b      	lsrs	r3, r3, #1
 800a068:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a06c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a070:	f003 0301 	and.w	r3, r3, #1
 800a074:	2b00      	cmp	r3, #0
 800a076:	d004      	beq.n	800a082 <USB_EPStartXfer+0x270>
 800a078:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a07c:	3301      	adds	r3, #1
 800a07e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a084:	881b      	ldrh	r3, [r3, #0]
 800a086:	b29a      	uxth	r2, r3
 800a088:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	029b      	lsls	r3, r3, #10
 800a090:	b29b      	uxth	r3, r3
 800a092:	4313      	orrs	r3, r2
 800a094:	b29a      	uxth	r2, r3
 800a096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a098:	801a      	strh	r2, [r3, #0]
 800a09a:	e046      	b.n	800a12a <USB_EPStartXfer+0x318>
 800a09c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0a0:	095b      	lsrs	r3, r3, #5
 800a0a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0aa:	f003 031f 	and.w	r3, r3, #31
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d104      	bne.n	800a0bc <USB_EPStartXfer+0x2aa>
 800a0b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a0b6:	3b01      	subs	r3, #1
 800a0b8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0be:	881b      	ldrh	r3, [r3, #0]
 800a0c0:	b29a      	uxth	r2, r3
 800a0c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	029b      	lsls	r3, r3, #10
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0d8:	b29a      	uxth	r2, r3
 800a0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0dc:	801a      	strh	r2, [r3, #0]
 800a0de:	e024      	b.n	800a12a <USB_EPStartXfer+0x318>
 800a0e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	785b      	ldrb	r3, [r3, #1]
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d11c      	bne.n	800a12a <USB_EPStartXfer+0x318>
 800a0f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	461a      	mov	r2, r3
 800a102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a104:	4413      	add	r3, r2
 800a106:	633b      	str	r3, [r7, #48]	@ 0x30
 800a108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a10c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	011a      	lsls	r2, r3, #4
 800a116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a118:	4413      	add	r3, r2
 800a11a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a11e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a124:	b29a      	uxth	r2, r3
 800a126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a128:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a12a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a12e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	895b      	ldrh	r3, [r3, #10]
 800a136:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a13a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a13e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	6959      	ldr	r1, [r3, #20]
 800a146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a150:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a154:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a158:	6800      	ldr	r0, [r0, #0]
 800a15a:	f001 fb3a 	bl	800b7d2 <USB_WritePMA>
            ep->xfer_buff += len;
 800a15e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a162:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	695a      	ldr	r2, [r3, #20]
 800a16a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a16e:	441a      	add	r2, r3
 800a170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a174:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a17c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a180:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	6a1a      	ldr	r2, [r3, #32]
 800a188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a18c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	691b      	ldr	r3, [r3, #16]
 800a194:	429a      	cmp	r2, r3
 800a196:	d90f      	bls.n	800a1b8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800a198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a19c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	6a1a      	ldr	r2, [r3, #32]
 800a1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1a8:	1ad2      	subs	r2, r2, r3
 800a1aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	621a      	str	r2, [r3, #32]
 800a1b6:	e00e      	b.n	800a1d6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a1b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	6a1b      	ldr	r3, [r3, #32]
 800a1c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800a1c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a1d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	785b      	ldrb	r3, [r3, #1]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d177      	bne.n	800a2d6 <USB_EPStartXfer+0x4c4>
 800a1e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	61bb      	str	r3, [r7, #24]
 800a1f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a200:	b29b      	uxth	r3, r3
 800a202:	461a      	mov	r2, r3
 800a204:	69bb      	ldr	r3, [r7, #24]
 800a206:	4413      	add	r3, r2
 800a208:	61bb      	str	r3, [r7, #24]
 800a20a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a20e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	011a      	lsls	r2, r3, #4
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	4413      	add	r3, r2
 800a21c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a220:	617b      	str	r3, [r7, #20]
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	881b      	ldrh	r3, [r3, #0]
 800a226:	b29b      	uxth	r3, r3
 800a228:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a22c:	b29a      	uxth	r2, r3
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	801a      	strh	r2, [r3, #0]
 800a232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a236:	2b00      	cmp	r3, #0
 800a238:	d10a      	bne.n	800a250 <USB_EPStartXfer+0x43e>
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	881b      	ldrh	r3, [r3, #0]
 800a23e:	b29b      	uxth	r3, r3
 800a240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a248:	b29a      	uxth	r2, r3
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	801a      	strh	r2, [r3, #0]
 800a24e:	e06d      	b.n	800a32c <USB_EPStartXfer+0x51a>
 800a250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a254:	2b3e      	cmp	r3, #62	@ 0x3e
 800a256:	d81c      	bhi.n	800a292 <USB_EPStartXfer+0x480>
 800a258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a25c:	085b      	lsrs	r3, r3, #1
 800a25e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a266:	f003 0301 	and.w	r3, r3, #1
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d004      	beq.n	800a278 <USB_EPStartXfer+0x466>
 800a26e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a272:	3301      	adds	r3, #1
 800a274:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	881b      	ldrh	r3, [r3, #0]
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a282:	b29b      	uxth	r3, r3
 800a284:	029b      	lsls	r3, r3, #10
 800a286:	b29b      	uxth	r3, r3
 800a288:	4313      	orrs	r3, r2
 800a28a:	b29a      	uxth	r2, r3
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	801a      	strh	r2, [r3, #0]
 800a290:	e04c      	b.n	800a32c <USB_EPStartXfer+0x51a>
 800a292:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a296:	095b      	lsrs	r3, r3, #5
 800a298:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a29c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2a0:	f003 031f 	and.w	r3, r3, #31
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d104      	bne.n	800a2b2 <USB_EPStartXfer+0x4a0>
 800a2a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	881b      	ldrh	r3, [r3, #0]
 800a2b6:	b29a      	uxth	r2, r3
 800a2b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	029b      	lsls	r3, r3, #10
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2ce:	b29a      	uxth	r2, r3
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	801a      	strh	r2, [r3, #0]
 800a2d4:	e02a      	b.n	800a32c <USB_EPStartXfer+0x51a>
 800a2d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	785b      	ldrb	r3, [r3, #1]
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d122      	bne.n	800a32c <USB_EPStartXfer+0x51a>
 800a2e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	623b      	str	r3, [r7, #32]
 800a2f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a300:	b29b      	uxth	r3, r3
 800a302:	461a      	mov	r2, r3
 800a304:	6a3b      	ldr	r3, [r7, #32]
 800a306:	4413      	add	r3, r2
 800a308:	623b      	str	r3, [r7, #32]
 800a30a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a30e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	011a      	lsls	r2, r3, #4
 800a318:	6a3b      	ldr	r3, [r7, #32]
 800a31a:	4413      	add	r3, r2
 800a31c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a320:	61fb      	str	r3, [r7, #28]
 800a322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a326:	b29a      	uxth	r2, r3
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a32c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a330:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	891b      	ldrh	r3, [r3, #8]
 800a338:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a33c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a340:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	6959      	ldr	r1, [r3, #20]
 800a348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a352:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a356:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a35a:	6800      	ldr	r0, [r0, #0]
 800a35c:	f001 fa39 	bl	800b7d2 <USB_WritePMA>
 800a360:	e3ee      	b.n	800ab40 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	785b      	ldrb	r3, [r3, #1]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d177      	bne.n	800a462 <USB_EPStartXfer+0x650>
 800a372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a376:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a37e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a382:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	461a      	mov	r2, r3
 800a390:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a392:	4413      	add	r3, r2
 800a394:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a39a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	011a      	lsls	r2, r3, #4
 800a3a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3a6:	4413      	add	r3, r2
 800a3a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a3ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3b0:	881b      	ldrh	r3, [r3, #0]
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3b8:	b29a      	uxth	r2, r3
 800a3ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3bc:	801a      	strh	r2, [r3, #0]
 800a3be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d10a      	bne.n	800a3dc <USB_EPStartXfer+0x5ca>
 800a3c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3c8:	881b      	ldrh	r3, [r3, #0]
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3d4:	b29a      	uxth	r2, r3
 800a3d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3d8:	801a      	strh	r2, [r3, #0]
 800a3da:	e06d      	b.n	800a4b8 <USB_EPStartXfer+0x6a6>
 800a3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3e0:	2b3e      	cmp	r3, #62	@ 0x3e
 800a3e2:	d81c      	bhi.n	800a41e <USB_EPStartXfer+0x60c>
 800a3e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3e8:	085b      	lsrs	r3, r3, #1
 800a3ea:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a3ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3f2:	f003 0301 	and.w	r3, r3, #1
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d004      	beq.n	800a404 <USB_EPStartXfer+0x5f2>
 800a3fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a3fe:	3301      	adds	r3, #1
 800a400:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a406:	881b      	ldrh	r3, [r3, #0]
 800a408:	b29a      	uxth	r2, r3
 800a40a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a40e:	b29b      	uxth	r3, r3
 800a410:	029b      	lsls	r3, r3, #10
 800a412:	b29b      	uxth	r3, r3
 800a414:	4313      	orrs	r3, r2
 800a416:	b29a      	uxth	r2, r3
 800a418:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a41a:	801a      	strh	r2, [r3, #0]
 800a41c:	e04c      	b.n	800a4b8 <USB_EPStartXfer+0x6a6>
 800a41e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a422:	095b      	lsrs	r3, r3, #5
 800a424:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a42c:	f003 031f 	and.w	r3, r3, #31
 800a430:	2b00      	cmp	r3, #0
 800a432:	d104      	bne.n	800a43e <USB_EPStartXfer+0x62c>
 800a434:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a438:	3b01      	subs	r3, #1
 800a43a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a43e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a440:	881b      	ldrh	r3, [r3, #0]
 800a442:	b29a      	uxth	r2, r3
 800a444:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a448:	b29b      	uxth	r3, r3
 800a44a:	029b      	lsls	r3, r3, #10
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	4313      	orrs	r3, r2
 800a450:	b29b      	uxth	r3, r3
 800a452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a45e:	801a      	strh	r2, [r3, #0]
 800a460:	e02a      	b.n	800a4b8 <USB_EPStartXfer+0x6a6>
 800a462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a466:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	785b      	ldrb	r3, [r3, #1]
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d122      	bne.n	800a4b8 <USB_EPStartXfer+0x6a6>
 800a472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a476:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a47e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a482:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	461a      	mov	r2, r3
 800a490:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a492:	4413      	add	r3, r2
 800a494:	653b      	str	r3, [r7, #80]	@ 0x50
 800a496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a49a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	011a      	lsls	r2, r3, #4
 800a4a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4a6:	4413      	add	r3, r2
 800a4a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a4ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a4ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4b2:	b29a      	uxth	r2, r3
 800a4b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a4b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	891b      	ldrh	r3, [r3, #8]
 800a4c4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a4c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	6959      	ldr	r1, [r3, #20]
 800a4d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a4de:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a4e2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a4e6:	6800      	ldr	r0, [r0, #0]
 800a4e8:	f001 f973 	bl	800b7d2 <USB_WritePMA>
            ep->xfer_buff += len;
 800a4ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	695a      	ldr	r2, [r3, #20]
 800a4f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4fc:	441a      	add	r2, r3
 800a4fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a502:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a50a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a50e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	6a1a      	ldr	r2, [r3, #32]
 800a516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a51a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	691b      	ldr	r3, [r3, #16]
 800a522:	429a      	cmp	r2, r3
 800a524:	d90f      	bls.n	800a546 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800a526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a52a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	6a1a      	ldr	r2, [r3, #32]
 800a532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a536:	1ad2      	subs	r2, r2, r3
 800a538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a53c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	621a      	str	r2, [r3, #32]
 800a544:	e00e      	b.n	800a564 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800a546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a54a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	6a1b      	ldr	r3, [r3, #32]
 800a552:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800a556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a55a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2200      	movs	r2, #0
 800a562:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a568:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	785b      	ldrb	r3, [r3, #1]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d177      	bne.n	800a670 <USB_EPStartXfer+0x85e>
 800a580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a584:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a58c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a590:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	461a      	mov	r2, r3
 800a59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a0:	4413      	add	r3, r2
 800a5a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a5a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	011a      	lsls	r2, r3, #4
 800a5b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5b4:	4413      	add	r3, r2
 800a5b6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a5ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5be:	881b      	ldrh	r3, [r3, #0]
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ca:	801a      	strh	r2, [r3, #0]
 800a5cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d10a      	bne.n	800a5ea <USB_EPStartXfer+0x7d8>
 800a5d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5d6:	881b      	ldrh	r3, [r3, #0]
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5e2:	b29a      	uxth	r2, r3
 800a5e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5e6:	801a      	strh	r2, [r3, #0]
 800a5e8:	e067      	b.n	800a6ba <USB_EPStartXfer+0x8a8>
 800a5ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5ee:	2b3e      	cmp	r3, #62	@ 0x3e
 800a5f0:	d81c      	bhi.n	800a62c <USB_EPStartXfer+0x81a>
 800a5f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5f6:	085b      	lsrs	r3, r3, #1
 800a5f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a600:	f003 0301 	and.w	r3, r3, #1
 800a604:	2b00      	cmp	r3, #0
 800a606:	d004      	beq.n	800a612 <USB_EPStartXfer+0x800>
 800a608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a60c:	3301      	adds	r3, #1
 800a60e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a614:	881b      	ldrh	r3, [r3, #0]
 800a616:	b29a      	uxth	r2, r3
 800a618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	029b      	lsls	r3, r3, #10
 800a620:	b29b      	uxth	r3, r3
 800a622:	4313      	orrs	r3, r2
 800a624:	b29a      	uxth	r2, r3
 800a626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a628:	801a      	strh	r2, [r3, #0]
 800a62a:	e046      	b.n	800a6ba <USB_EPStartXfer+0x8a8>
 800a62c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a630:	095b      	lsrs	r3, r3, #5
 800a632:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a63a:	f003 031f 	and.w	r3, r3, #31
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d104      	bne.n	800a64c <USB_EPStartXfer+0x83a>
 800a642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a646:	3b01      	subs	r3, #1
 800a648:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a64c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a64e:	881b      	ldrh	r3, [r3, #0]
 800a650:	b29a      	uxth	r2, r3
 800a652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a656:	b29b      	uxth	r3, r3
 800a658:	029b      	lsls	r3, r3, #10
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	4313      	orrs	r3, r2
 800a65e:	b29b      	uxth	r3, r3
 800a660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a668:	b29a      	uxth	r2, r3
 800a66a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a66c:	801a      	strh	r2, [r3, #0]
 800a66e:	e024      	b.n	800a6ba <USB_EPStartXfer+0x8a8>
 800a670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a674:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	785b      	ldrb	r3, [r3, #1]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d11c      	bne.n	800a6ba <USB_EPStartXfer+0x8a8>
 800a680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a684:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a68e:	b29b      	uxth	r3, r3
 800a690:	461a      	mov	r2, r3
 800a692:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a694:	4413      	add	r3, r2
 800a696:	643b      	str	r3, [r7, #64]	@ 0x40
 800a698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a69c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	011a      	lsls	r2, r3, #4
 800a6a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6a8:	4413      	add	r3, r2
 800a6aa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a6ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6b4:	b29a      	uxth	r2, r3
 800a6b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a6ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	895b      	ldrh	r3, [r3, #10]
 800a6c6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a6ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	6959      	ldr	r1, [r3, #20]
 800a6d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a6e0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a6e4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a6e8:	6800      	ldr	r0, [r0, #0]
 800a6ea:	f001 f872 	bl	800b7d2 <USB_WritePMA>
 800a6ee:	e227      	b.n	800ab40 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a6f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	6a1b      	ldr	r3, [r3, #32]
 800a6fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a704:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a708:	681a      	ldr	r2, [r3, #0]
 800a70a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a70e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	4413      	add	r3, r2
 800a71a:	881b      	ldrh	r3, [r3, #0]
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a726:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a72a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a72e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a738:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	441a      	add	r2, r3
 800a744:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a748:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a74c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a750:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a758:	b29b      	uxth	r3, r3
 800a75a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a75c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a760:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a76c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a776:	b29b      	uxth	r3, r3
 800a778:	461a      	mov	r2, r3
 800a77a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a77c:	4413      	add	r3, r2
 800a77e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	011a      	lsls	r2, r3, #4
 800a78e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a790:	4413      	add	r3, r2
 800a792:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a796:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a79c:	b29a      	uxth	r2, r3
 800a79e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a7a0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a7a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	891b      	ldrh	r3, [r3, #8]
 800a7ae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a7b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	6959      	ldr	r1, [r3, #20]
 800a7be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a7c8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a7cc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a7d0:	6800      	ldr	r0, [r0, #0]
 800a7d2:	f000 fffe 	bl	800b7d2 <USB_WritePMA>
 800a7d6:	e1b3      	b.n	800ab40 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a7d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	6a1a      	ldr	r2, [r3, #32]
 800a7e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7e8:	1ad2      	subs	r2, r2, r3
 800a7ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a7f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a804:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	4413      	add	r3, r2
 800a810:	881b      	ldrh	r3, [r3, #0]
 800a812:	b29b      	uxth	r3, r3
 800a814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a818:	2b00      	cmp	r3, #0
 800a81a:	f000 80c6 	beq.w	800a9aa <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a81e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a822:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	673b      	str	r3, [r7, #112]	@ 0x70
 800a82a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a82e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	785b      	ldrb	r3, [r3, #1]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d177      	bne.n	800a92a <USB_EPStartXfer+0xb18>
 800a83a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a83e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a84a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a854:	b29b      	uxth	r3, r3
 800a856:	461a      	mov	r2, r3
 800a858:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a85a:	4413      	add	r3, r2
 800a85c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a85e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a862:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	011a      	lsls	r2, r3, #4
 800a86c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a86e:	4413      	add	r3, r2
 800a870:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a874:	667b      	str	r3, [r7, #100]	@ 0x64
 800a876:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a878:	881b      	ldrh	r3, [r3, #0]
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a880:	b29a      	uxth	r2, r3
 800a882:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a884:	801a      	strh	r2, [r3, #0]
 800a886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d10a      	bne.n	800a8a4 <USB_EPStartXfer+0xa92>
 800a88e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a890:	881b      	ldrh	r3, [r3, #0]
 800a892:	b29b      	uxth	r3, r3
 800a894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a89c:	b29a      	uxth	r2, r3
 800a89e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a8a0:	801a      	strh	r2, [r3, #0]
 800a8a2:	e067      	b.n	800a974 <USB_EPStartXfer+0xb62>
 800a8a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8a8:	2b3e      	cmp	r3, #62	@ 0x3e
 800a8aa:	d81c      	bhi.n	800a8e6 <USB_EPStartXfer+0xad4>
 800a8ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8b0:	085b      	lsrs	r3, r3, #1
 800a8b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a8b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8ba:	f003 0301 	and.w	r3, r3, #1
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d004      	beq.n	800a8cc <USB_EPStartXfer+0xaba>
 800a8c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a8cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a8ce:	881b      	ldrh	r3, [r3, #0]
 800a8d0:	b29a      	uxth	r2, r3
 800a8d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	029b      	lsls	r3, r3, #10
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	b29a      	uxth	r2, r3
 800a8e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a8e2:	801a      	strh	r2, [r3, #0]
 800a8e4:	e046      	b.n	800a974 <USB_EPStartXfer+0xb62>
 800a8e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8ea:	095b      	lsrs	r3, r3, #5
 800a8ec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a8f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8f4:	f003 031f 	and.w	r3, r3, #31
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d104      	bne.n	800a906 <USB_EPStartXfer+0xaf4>
 800a8fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a900:	3b01      	subs	r3, #1
 800a902:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a906:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a908:	881b      	ldrh	r3, [r3, #0]
 800a90a:	b29a      	uxth	r2, r3
 800a90c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a910:	b29b      	uxth	r3, r3
 800a912:	029b      	lsls	r3, r3, #10
 800a914:	b29b      	uxth	r3, r3
 800a916:	4313      	orrs	r3, r2
 800a918:	b29b      	uxth	r3, r3
 800a91a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a91e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a922:	b29a      	uxth	r2, r3
 800a924:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a926:	801a      	strh	r2, [r3, #0]
 800a928:	e024      	b.n	800a974 <USB_EPStartXfer+0xb62>
 800a92a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a92e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	785b      	ldrb	r3, [r3, #1]
 800a936:	2b01      	cmp	r3, #1
 800a938:	d11c      	bne.n	800a974 <USB_EPStartXfer+0xb62>
 800a93a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a93e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a948:	b29b      	uxth	r3, r3
 800a94a:	461a      	mov	r2, r3
 800a94c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a94e:	4413      	add	r3, r2
 800a950:	673b      	str	r3, [r7, #112]	@ 0x70
 800a952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a956:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	011a      	lsls	r2, r3, #4
 800a960:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a962:	4413      	add	r3, r2
 800a964:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a968:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a96a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a96e:	b29a      	uxth	r2, r3
 800a970:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a972:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	895b      	ldrh	r3, [r3, #10]
 800a980:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	6959      	ldr	r1, [r3, #20]
 800a990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a994:	b29b      	uxth	r3, r3
 800a996:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a99a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a99e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a9a2:	6800      	ldr	r0, [r0, #0]
 800a9a4:	f000 ff15 	bl	800b7d2 <USB_WritePMA>
 800a9a8:	e0ca      	b.n	800ab40 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a9aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	785b      	ldrb	r3, [r3, #1]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d177      	bne.n	800aaaa <USB_EPStartXfer+0xc98>
 800a9ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a9c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a9da:	4413      	add	r3, r2
 800a9dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a9de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	011a      	lsls	r2, r3, #4
 800a9ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a9ee:	4413      	add	r3, r2
 800a9f0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a9f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a9f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a9f8:	881b      	ldrh	r3, [r3, #0]
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa00:	b29a      	uxth	r2, r3
 800aa02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa04:	801a      	strh	r2, [r3, #0]
 800aa06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d10a      	bne.n	800aa24 <USB_EPStartXfer+0xc12>
 800aa0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa10:	881b      	ldrh	r3, [r3, #0]
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa1c:	b29a      	uxth	r2, r3
 800aa1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa20:	801a      	strh	r2, [r3, #0]
 800aa22:	e073      	b.n	800ab0c <USB_EPStartXfer+0xcfa>
 800aa24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa28:	2b3e      	cmp	r3, #62	@ 0x3e
 800aa2a:	d81c      	bhi.n	800aa66 <USB_EPStartXfer+0xc54>
 800aa2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa30:	085b      	lsrs	r3, r3, #1
 800aa32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800aa36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa3a:	f003 0301 	and.w	r3, r3, #1
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d004      	beq.n	800aa4c <USB_EPStartXfer+0xc3a>
 800aa42:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800aa46:	3301      	adds	r3, #1
 800aa48:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800aa4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa4e:	881b      	ldrh	r3, [r3, #0]
 800aa50:	b29a      	uxth	r2, r3
 800aa52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	029b      	lsls	r3, r3, #10
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	b29a      	uxth	r2, r3
 800aa60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa62:	801a      	strh	r2, [r3, #0]
 800aa64:	e052      	b.n	800ab0c <USB_EPStartXfer+0xcfa>
 800aa66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa6a:	095b      	lsrs	r3, r3, #5
 800aa6c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800aa70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa74:	f003 031f 	and.w	r3, r3, #31
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d104      	bne.n	800aa86 <USB_EPStartXfer+0xc74>
 800aa7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800aa80:	3b01      	subs	r3, #1
 800aa82:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800aa86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa88:	881b      	ldrh	r3, [r3, #0]
 800aa8a:	b29a      	uxth	r2, r3
 800aa8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	029b      	lsls	r3, r3, #10
 800aa94:	b29b      	uxth	r3, r3
 800aa96:	4313      	orrs	r3, r2
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aaa2:	b29a      	uxth	r2, r3
 800aaa4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aaa6:	801a      	strh	r2, [r3, #0]
 800aaa8:	e030      	b.n	800ab0c <USB_EPStartXfer+0xcfa>
 800aaaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	785b      	ldrb	r3, [r3, #1]
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d128      	bne.n	800ab0c <USB_EPStartXfer+0xcfa>
 800aaba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aabe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aacc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	461a      	mov	r2, r3
 800aada:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aade:	4413      	add	r3, r2
 800aae0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	011a      	lsls	r2, r3, #4
 800aaf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aaf6:	4413      	add	r3, r2
 800aaf8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800aafc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ab00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab04:	b29a      	uxth	r2, r3
 800ab06:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ab0a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ab0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	891b      	ldrh	r3, [r3, #8]
 800ab18:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	6959      	ldr	r1, [r3, #20]
 800ab28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ab32:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ab36:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ab3a:	6800      	ldr	r0, [r0, #0]
 800ab3c:	f000 fe49 	bl	800b7d2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ab40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	4413      	add	r3, r2
 800ab5a:	881b      	ldrh	r3, [r3, #0]
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab66:	817b      	strh	r3, [r7, #10]
 800ab68:	897b      	ldrh	r3, [r7, #10]
 800ab6a:	f083 0310 	eor.w	r3, r3, #16
 800ab6e:	817b      	strh	r3, [r7, #10]
 800ab70:	897b      	ldrh	r3, [r7, #10]
 800ab72:	f083 0320 	eor.w	r3, r3, #32
 800ab76:	817b      	strh	r3, [r7, #10]
 800ab78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	441a      	add	r2, r3
 800ab92:	897b      	ldrh	r3, [r7, #10]
 800ab94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aba0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	8013      	strh	r3, [r2, #0]
 800aba8:	f000 bcdf 	b.w	800b56a <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800abac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	7b1b      	ldrb	r3, [r3, #12]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	f040 80bc 	bne.w	800ad36 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800abbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	699a      	ldr	r2, [r3, #24]
 800abca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	691b      	ldr	r3, [r3, #16]
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d917      	bls.n	800ac0a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800abda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	691b      	ldr	r3, [r3, #16]
 800abe6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800abea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	699a      	ldr	r2, [r3, #24]
 800abf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abfa:	1ad2      	subs	r2, r2, r3
 800abfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	619a      	str	r2, [r3, #24]
 800ac08:	e00e      	b.n	800ac28 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800ac0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	699b      	ldr	r3, [r3, #24]
 800ac16:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800ac1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	2200      	movs	r2, #0
 800ac26:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ac28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ac36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	461a      	mov	r2, r3
 800ac48:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ac4c:	4413      	add	r3, r2
 800ac4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ac52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	011a      	lsls	r2, r3, #4
 800ac60:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ac64:	4413      	add	r3, r2
 800ac66:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800ac6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ac6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ac72:	881b      	ldrh	r3, [r3, #0]
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac7a:	b29a      	uxth	r2, r3
 800ac7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ac80:	801a      	strh	r2, [r3, #0]
 800ac82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d10d      	bne.n	800aca6 <USB_EPStartXfer+0xe94>
 800ac8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ac8e:	881b      	ldrh	r3, [r3, #0]
 800ac90:	b29b      	uxth	r3, r3
 800ac92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac9a:	b29a      	uxth	r2, r3
 800ac9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aca0:	801a      	strh	r2, [r3, #0]
 800aca2:	f000 bc28 	b.w	800b4f6 <USB_EPStartXfer+0x16e4>
 800aca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acaa:	2b3e      	cmp	r3, #62	@ 0x3e
 800acac:	d81f      	bhi.n	800acee <USB_EPStartXfer+0xedc>
 800acae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acb2:	085b      	lsrs	r3, r3, #1
 800acb4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800acb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acbc:	f003 0301 	and.w	r3, r3, #1
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d004      	beq.n	800acce <USB_EPStartXfer+0xebc>
 800acc4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800acc8:	3301      	adds	r3, #1
 800acca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800acce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800acd2:	881b      	ldrh	r3, [r3, #0]
 800acd4:	b29a      	uxth	r2, r3
 800acd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800acda:	b29b      	uxth	r3, r3
 800acdc:	029b      	lsls	r3, r3, #10
 800acde:	b29b      	uxth	r3, r3
 800ace0:	4313      	orrs	r3, r2
 800ace2:	b29a      	uxth	r2, r3
 800ace4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ace8:	801a      	strh	r2, [r3, #0]
 800acea:	f000 bc04 	b.w	800b4f6 <USB_EPStartXfer+0x16e4>
 800acee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acf2:	095b      	lsrs	r3, r3, #5
 800acf4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800acf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acfc:	f003 031f 	and.w	r3, r3, #31
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d104      	bne.n	800ad0e <USB_EPStartXfer+0xefc>
 800ad04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ad08:	3b01      	subs	r3, #1
 800ad0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ad0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ad12:	881b      	ldrh	r3, [r3, #0]
 800ad14:	b29a      	uxth	r2, r3
 800ad16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	029b      	lsls	r3, r3, #10
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	4313      	orrs	r3, r2
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad2c:	b29a      	uxth	r2, r3
 800ad2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ad32:	801a      	strh	r2, [r3, #0]
 800ad34:	e3df      	b.n	800b4f6 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ad36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	78db      	ldrb	r3, [r3, #3]
 800ad42:	2b02      	cmp	r3, #2
 800ad44:	f040 8218 	bne.w	800b178 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ad48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	785b      	ldrb	r3, [r3, #1]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	f040 809d 	bne.w	800ae94 <USB_EPStartXfer+0x1082>
 800ad5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ad68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad76:	b29b      	uxth	r3, r3
 800ad78:	461a      	mov	r2, r3
 800ad7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad7e:	4413      	add	r3, r2
 800ad80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ad84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	011a      	lsls	r2, r3, #4
 800ad92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad96:	4413      	add	r3, r2
 800ad98:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ad9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ada0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ada4:	881b      	ldrh	r3, [r3, #0]
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800adac:	b29a      	uxth	r2, r3
 800adae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800adb2:	801a      	strh	r2, [r3, #0]
 800adb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	691b      	ldr	r3, [r3, #16]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d10c      	bne.n	800adde <USB_EPStartXfer+0xfcc>
 800adc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800adc8:	881b      	ldrh	r3, [r3, #0]
 800adca:	b29b      	uxth	r3, r3
 800adcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800add0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800add4:	b29a      	uxth	r2, r3
 800add6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800adda:	801a      	strh	r2, [r3, #0]
 800addc:	e08f      	b.n	800aefe <USB_EPStartXfer+0x10ec>
 800adde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ade2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	2b3e      	cmp	r3, #62	@ 0x3e
 800adec:	d826      	bhi.n	800ae3c <USB_EPStartXfer+0x102a>
 800adee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	691b      	ldr	r3, [r3, #16]
 800adfa:	085b      	lsrs	r3, r3, #1
 800adfc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ae00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	691b      	ldr	r3, [r3, #16]
 800ae0c:	f003 0301 	and.w	r3, r3, #1
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d004      	beq.n	800ae1e <USB_EPStartXfer+0x100c>
 800ae14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae18:	3301      	adds	r3, #1
 800ae1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ae1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ae22:	881b      	ldrh	r3, [r3, #0]
 800ae24:	b29a      	uxth	r2, r3
 800ae26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	029b      	lsls	r3, r3, #10
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	4313      	orrs	r3, r2
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ae38:	801a      	strh	r2, [r3, #0]
 800ae3a:	e060      	b.n	800aefe <USB_EPStartXfer+0x10ec>
 800ae3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	095b      	lsrs	r3, r3, #5
 800ae4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ae4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	691b      	ldr	r3, [r3, #16]
 800ae5a:	f003 031f 	and.w	r3, r3, #31
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d104      	bne.n	800ae6c <USB_EPStartXfer+0x105a>
 800ae62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae66:	3b01      	subs	r3, #1
 800ae68:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ae6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ae70:	881b      	ldrh	r3, [r3, #0]
 800ae72:	b29a      	uxth	r2, r3
 800ae74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	029b      	lsls	r3, r3, #10
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae8a:	b29a      	uxth	r2, r3
 800ae8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ae90:	801a      	strh	r2, [r3, #0]
 800ae92:	e034      	b.n	800aefe <USB_EPStartXfer+0x10ec>
 800ae94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	785b      	ldrb	r3, [r3, #1]
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d12c      	bne.n	800aefe <USB_EPStartXfer+0x10ec>
 800aea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aea8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aeb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	461a      	mov	r2, r3
 800aec4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aec8:	4413      	add	r3, r2
 800aeca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aed2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	011a      	lsls	r2, r3, #4
 800aedc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aee0:	4413      	add	r3, r2
 800aee2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800aee6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aeea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	b29a      	uxth	r2, r3
 800aef8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800aefc:	801a      	strh	r2, [r3, #0]
 800aefe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800af0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	785b      	ldrb	r3, [r3, #1]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	f040 809d 	bne.w	800b058 <USB_EPStartXfer+0x1246>
 800af1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800af2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	461a      	mov	r2, r3
 800af3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800af42:	4413      	add	r3, r2
 800af44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800af48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	011a      	lsls	r2, r3, #4
 800af56:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800af5a:	4413      	add	r3, r2
 800af5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800af60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800af64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800af68:	881b      	ldrh	r3, [r3, #0]
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af70:	b29a      	uxth	r2, r3
 800af72:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800af76:	801a      	strh	r2, [r3, #0]
 800af78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	691b      	ldr	r3, [r3, #16]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d10c      	bne.n	800afa2 <USB_EPStartXfer+0x1190>
 800af88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800af8c:	881b      	ldrh	r3, [r3, #0]
 800af8e:	b29b      	uxth	r3, r3
 800af90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af98:	b29a      	uxth	r2, r3
 800af9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800af9e:	801a      	strh	r2, [r3, #0]
 800afa0:	e088      	b.n	800b0b4 <USB_EPStartXfer+0x12a2>
 800afa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	691b      	ldr	r3, [r3, #16]
 800afae:	2b3e      	cmp	r3, #62	@ 0x3e
 800afb0:	d826      	bhi.n	800b000 <USB_EPStartXfer+0x11ee>
 800afb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	691b      	ldr	r3, [r3, #16]
 800afbe:	085b      	lsrs	r3, r3, #1
 800afc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800afc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	691b      	ldr	r3, [r3, #16]
 800afd0:	f003 0301 	and.w	r3, r3, #1
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d004      	beq.n	800afe2 <USB_EPStartXfer+0x11d0>
 800afd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afdc:	3301      	adds	r3, #1
 800afde:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800afe2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800afe6:	881b      	ldrh	r3, [r3, #0]
 800afe8:	b29a      	uxth	r2, r3
 800afea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afee:	b29b      	uxth	r3, r3
 800aff0:	029b      	lsls	r3, r3, #10
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	4313      	orrs	r3, r2
 800aff6:	b29a      	uxth	r2, r3
 800aff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800affc:	801a      	strh	r2, [r3, #0]
 800affe:	e059      	b.n	800b0b4 <USB_EPStartXfer+0x12a2>
 800b000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	691b      	ldr	r3, [r3, #16]
 800b00c:	095b      	lsrs	r3, r3, #5
 800b00e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	691b      	ldr	r3, [r3, #16]
 800b01e:	f003 031f 	and.w	r3, r3, #31
 800b022:	2b00      	cmp	r3, #0
 800b024:	d104      	bne.n	800b030 <USB_EPStartXfer+0x121e>
 800b026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b02a:	3b01      	subs	r3, #1
 800b02c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b030:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b034:	881b      	ldrh	r3, [r3, #0]
 800b036:	b29a      	uxth	r2, r3
 800b038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	029b      	lsls	r3, r3, #10
 800b040:	b29b      	uxth	r3, r3
 800b042:	4313      	orrs	r3, r2
 800b044:	b29b      	uxth	r3, r3
 800b046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b04a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b04e:	b29a      	uxth	r2, r3
 800b050:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b054:	801a      	strh	r2, [r3, #0]
 800b056:	e02d      	b.n	800b0b4 <USB_EPStartXfer+0x12a2>
 800b058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b05c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	785b      	ldrb	r3, [r3, #1]
 800b064:	2b01      	cmp	r3, #1
 800b066:	d125      	bne.n	800b0b4 <USB_EPStartXfer+0x12a2>
 800b068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b06c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b076:	b29b      	uxth	r3, r3
 800b078:	461a      	mov	r2, r3
 800b07a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b07e:	4413      	add	r3, r2
 800b080:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	011a      	lsls	r2, r3, #4
 800b092:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b096:	4413      	add	r3, r2
 800b098:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b09c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b0a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	b29a      	uxth	r2, r3
 800b0ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b0b2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b0b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	69db      	ldr	r3, [r3, #28]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	f000 8218 	beq.w	800b4f6 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b0c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0ce:	681a      	ldr	r2, [r3, #0]
 800b0d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	4413      	add	r3, r2
 800b0e0:	881b      	ldrh	r3, [r3, #0]
 800b0e2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b0e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b0ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d005      	beq.n	800b0fe <USB_EPStartXfer+0x12ec>
 800b0f2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b0f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d10d      	bne.n	800b11a <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b0fe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b106:	2b00      	cmp	r3, #0
 800b108:	f040 81f5 	bne.w	800b4f6 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b10c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b114:	2b00      	cmp	r3, #0
 800b116:	f040 81ee 	bne.w	800b4f6 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b11a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b11e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b122:	681a      	ldr	r2, [r3, #0]
 800b124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	4413      	add	r3, r2
 800b134:	881b      	ldrh	r3, [r3, #0]
 800b136:	b29b      	uxth	r3, r3
 800b138:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b13c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b140:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b148:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b152:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	441a      	add	r2, r3
 800b15e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b162:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b166:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b16a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b16e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b172:	b29b      	uxth	r3, r3
 800b174:	8013      	strh	r3, [r2, #0]
 800b176:	e1be      	b.n	800b4f6 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b17c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	78db      	ldrb	r3, [r3, #3]
 800b184:	2b01      	cmp	r3, #1
 800b186:	f040 81b4 	bne.w	800b4f2 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b18a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b18e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	699a      	ldr	r2, [r3, #24]
 800b196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b19a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	691b      	ldr	r3, [r3, #16]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d917      	bls.n	800b1d6 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800b1a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	691b      	ldr	r3, [r3, #16]
 800b1b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800b1b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	699a      	ldr	r2, [r3, #24]
 800b1c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1c6:	1ad2      	subs	r2, r2, r3
 800b1c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	619a      	str	r2, [r3, #24]
 800b1d4:	e00e      	b.n	800b1f4 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800b1d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	699b      	ldr	r3, [r3, #24]
 800b1e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800b1e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b1f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	785b      	ldrb	r3, [r3, #1]
 800b200:	2b00      	cmp	r3, #0
 800b202:	f040 8085 	bne.w	800b310 <USB_EPStartXfer+0x14fe>
 800b206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b20a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b218:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b222:	b29b      	uxth	r3, r3
 800b224:	461a      	mov	r2, r3
 800b226:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b22a:	4413      	add	r3, r2
 800b22c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	011a      	lsls	r2, r3, #4
 800b23e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b242:	4413      	add	r3, r2
 800b244:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b248:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b24c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b250:	881b      	ldrh	r3, [r3, #0]
 800b252:	b29b      	uxth	r3, r3
 800b254:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b258:	b29a      	uxth	r2, r3
 800b25a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b25e:	801a      	strh	r2, [r3, #0]
 800b260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b264:	2b00      	cmp	r3, #0
 800b266:	d10c      	bne.n	800b282 <USB_EPStartXfer+0x1470>
 800b268:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b26c:	881b      	ldrh	r3, [r3, #0]
 800b26e:	b29b      	uxth	r3, r3
 800b270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b278:	b29a      	uxth	r2, r3
 800b27a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b27e:	801a      	strh	r2, [r3, #0]
 800b280:	e077      	b.n	800b372 <USB_EPStartXfer+0x1560>
 800b282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b286:	2b3e      	cmp	r3, #62	@ 0x3e
 800b288:	d81e      	bhi.n	800b2c8 <USB_EPStartXfer+0x14b6>
 800b28a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b28e:	085b      	lsrs	r3, r3, #1
 800b290:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b298:	f003 0301 	and.w	r3, r3, #1
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d004      	beq.n	800b2aa <USB_EPStartXfer+0x1498>
 800b2a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b2aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b2ae:	881b      	ldrh	r3, [r3, #0]
 800b2b0:	b29a      	uxth	r2, r3
 800b2b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	029b      	lsls	r3, r3, #10
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	b29a      	uxth	r2, r3
 800b2c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b2c4:	801a      	strh	r2, [r3, #0]
 800b2c6:	e054      	b.n	800b372 <USB_EPStartXfer+0x1560>
 800b2c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2cc:	095b      	lsrs	r3, r3, #5
 800b2ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b2d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2d6:	f003 031f 	and.w	r3, r3, #31
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d104      	bne.n	800b2e8 <USB_EPStartXfer+0x14d6>
 800b2de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2e2:	3b01      	subs	r3, #1
 800b2e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b2e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b2ec:	881b      	ldrh	r3, [r3, #0]
 800b2ee:	b29a      	uxth	r2, r3
 800b2f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	029b      	lsls	r3, r3, #10
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b306:	b29a      	uxth	r2, r3
 800b308:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b30c:	801a      	strh	r2, [r3, #0]
 800b30e:	e030      	b.n	800b372 <USB_EPStartXfer+0x1560>
 800b310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b314:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	785b      	ldrb	r3, [r3, #1]
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d128      	bne.n	800b372 <USB_EPStartXfer+0x1560>
 800b320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b324:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b32e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b332:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	461a      	mov	r2, r3
 800b340:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b344:	4413      	add	r3, r2
 800b346:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b34a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b34e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	011a      	lsls	r2, r3, #4
 800b358:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b35c:	4413      	add	r3, r2
 800b35e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b362:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b36a:	b29a      	uxth	r2, r3
 800b36c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800b370:	801a      	strh	r2, [r3, #0]
 800b372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b376:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b384:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	785b      	ldrb	r3, [r3, #1]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f040 8085 	bne.w	800b49c <USB_EPStartXfer+0x168a>
 800b392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b396:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b3a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b3b6:	4413      	add	r3, r2
 800b3b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b3bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	011a      	lsls	r2, r3, #4
 800b3ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b3ce:	4413      	add	r3, r2
 800b3d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b3d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b3d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b3dc:	881b      	ldrh	r3, [r3, #0]
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b3e4:	b29a      	uxth	r2, r3
 800b3e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b3ea:	801a      	strh	r2, [r3, #0]
 800b3ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d10c      	bne.n	800b40e <USB_EPStartXfer+0x15fc>
 800b3f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b3f8:	881b      	ldrh	r3, [r3, #0]
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b404:	b29a      	uxth	r2, r3
 800b406:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b40a:	801a      	strh	r2, [r3, #0]
 800b40c:	e073      	b.n	800b4f6 <USB_EPStartXfer+0x16e4>
 800b40e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b412:	2b3e      	cmp	r3, #62	@ 0x3e
 800b414:	d81e      	bhi.n	800b454 <USB_EPStartXfer+0x1642>
 800b416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b41a:	085b      	lsrs	r3, r3, #1
 800b41c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b424:	f003 0301 	and.w	r3, r3, #1
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d004      	beq.n	800b436 <USB_EPStartXfer+0x1624>
 800b42c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b430:	3301      	adds	r3, #1
 800b432:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b436:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b43a:	881b      	ldrh	r3, [r3, #0]
 800b43c:	b29a      	uxth	r2, r3
 800b43e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b442:	b29b      	uxth	r3, r3
 800b444:	029b      	lsls	r3, r3, #10
 800b446:	b29b      	uxth	r3, r3
 800b448:	4313      	orrs	r3, r2
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b450:	801a      	strh	r2, [r3, #0]
 800b452:	e050      	b.n	800b4f6 <USB_EPStartXfer+0x16e4>
 800b454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b458:	095b      	lsrs	r3, r3, #5
 800b45a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b45e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b462:	f003 031f 	and.w	r3, r3, #31
 800b466:	2b00      	cmp	r3, #0
 800b468:	d104      	bne.n	800b474 <USB_EPStartXfer+0x1662>
 800b46a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b46e:	3b01      	subs	r3, #1
 800b470:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b474:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b478:	881b      	ldrh	r3, [r3, #0]
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b480:	b29b      	uxth	r3, r3
 800b482:	029b      	lsls	r3, r3, #10
 800b484:	b29b      	uxth	r3, r3
 800b486:	4313      	orrs	r3, r2
 800b488:	b29b      	uxth	r3, r3
 800b48a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b48e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b492:	b29a      	uxth	r2, r3
 800b494:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b498:	801a      	strh	r2, [r3, #0]
 800b49a:	e02c      	b.n	800b4f6 <USB_EPStartXfer+0x16e4>
 800b49c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	785b      	ldrb	r3, [r3, #1]
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	d124      	bne.n	800b4f6 <USB_EPStartXfer+0x16e4>
 800b4ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	461a      	mov	r2, r3
 800b4be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b4c2:	4413      	add	r3, r2
 800b4c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b4c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	011a      	lsls	r2, r3, #4
 800b4d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b4da:	4413      	add	r3, r2
 800b4dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b4e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b4e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4e8:	b29a      	uxth	r2, r3
 800b4ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b4ee:	801a      	strh	r2, [r3, #0]
 800b4f0:	e001      	b.n	800b4f6 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	e03a      	b.n	800b56c <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b4f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	009b      	lsls	r3, r3, #2
 800b50e:	4413      	add	r3, r2
 800b510:	881b      	ldrh	r3, [r3, #0]
 800b512:	b29b      	uxth	r3, r3
 800b514:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b518:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b51c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b520:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b524:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b528:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b52c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b530:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b534:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b53c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b546:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	009b      	lsls	r3, r3, #2
 800b550:	441a      	add	r2, r3
 800b552:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b556:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b55a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b55e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b566:	b29b      	uxth	r3, r3
 800b568:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b56a:	2300      	movs	r3, #0
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}

0800b576 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b576:	b480      	push	{r7}
 800b578:	b085      	sub	sp, #20
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
 800b57e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	785b      	ldrb	r3, [r3, #1]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d020      	beq.n	800b5ca <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b588:	687a      	ldr	r2, [r7, #4]
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	009b      	lsls	r3, r3, #2
 800b590:	4413      	add	r3, r2
 800b592:	881b      	ldrh	r3, [r3, #0]
 800b594:	b29b      	uxth	r3, r3
 800b596:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b59a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b59e:	81bb      	strh	r3, [r7, #12]
 800b5a0:	89bb      	ldrh	r3, [r7, #12]
 800b5a2:	f083 0310 	eor.w	r3, r3, #16
 800b5a6:	81bb      	strh	r3, [r7, #12]
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	441a      	add	r2, r3
 800b5b2:	89bb      	ldrh	r3, [r7, #12]
 800b5b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b5b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b5bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b5c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	8013      	strh	r3, [r2, #0]
 800b5c8:	e01f      	b.n	800b60a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b5ca:	687a      	ldr	r2, [r7, #4]
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	4413      	add	r3, r2
 800b5d4:	881b      	ldrh	r3, [r3, #0]
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b5dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5e0:	81fb      	strh	r3, [r7, #14]
 800b5e2:	89fb      	ldrh	r3, [r7, #14]
 800b5e4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b5e8:	81fb      	strh	r3, [r7, #14]
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	441a      	add	r2, r3
 800b5f4:	89fb      	ldrh	r3, [r7, #14]
 800b5f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b5fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b5fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b606:	b29b      	uxth	r3, r3
 800b608:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b60a:	2300      	movs	r3, #0
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3714      	adds	r7, #20
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b618:	b480      	push	{r7}
 800b61a:	b087      	sub	sp, #28
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	7b1b      	ldrb	r3, [r3, #12]
 800b626:	2b00      	cmp	r3, #0
 800b628:	f040 809d 	bne.w	800b766 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	785b      	ldrb	r3, [r3, #1]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d04c      	beq.n	800b6ce <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	4413      	add	r3, r2
 800b63e:	881b      	ldrh	r3, [r3, #0]
 800b640:	823b      	strh	r3, [r7, #16]
 800b642:	8a3b      	ldrh	r3, [r7, #16]
 800b644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d01b      	beq.n	800b684 <USB_EPClearStall+0x6c>
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	781b      	ldrb	r3, [r3, #0]
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	4413      	add	r3, r2
 800b656:	881b      	ldrh	r3, [r3, #0]
 800b658:	b29b      	uxth	r3, r3
 800b65a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b65e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b662:	81fb      	strh	r3, [r7, #14]
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	009b      	lsls	r3, r3, #2
 800b66c:	441a      	add	r2, r3
 800b66e:	89fb      	ldrh	r3, [r7, #14]
 800b670:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b674:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b678:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b67c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b680:	b29b      	uxth	r3, r3
 800b682:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	78db      	ldrb	r3, [r3, #3]
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d06c      	beq.n	800b766 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	009b      	lsls	r3, r3, #2
 800b694:	4413      	add	r3, r2
 800b696:	881b      	ldrh	r3, [r3, #0]
 800b698:	b29b      	uxth	r3, r3
 800b69a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b69e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b6a2:	81bb      	strh	r3, [r7, #12]
 800b6a4:	89bb      	ldrh	r3, [r7, #12]
 800b6a6:	f083 0320 	eor.w	r3, r3, #32
 800b6aa:	81bb      	strh	r3, [r7, #12]
 800b6ac:	687a      	ldr	r2, [r7, #4]
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	009b      	lsls	r3, r3, #2
 800b6b4:	441a      	add	r2, r3
 800b6b6:	89bb      	ldrh	r3, [r7, #12]
 800b6b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b6bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b6c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b6c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6c8:	b29b      	uxth	r3, r3
 800b6ca:	8013      	strh	r3, [r2, #0]
 800b6cc:	e04b      	b.n	800b766 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	4413      	add	r3, r2
 800b6d8:	881b      	ldrh	r3, [r3, #0]
 800b6da:	82fb      	strh	r3, [r7, #22]
 800b6dc:	8afb      	ldrh	r3, [r7, #22]
 800b6de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d01b      	beq.n	800b71e <USB_EPClearStall+0x106>
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	009b      	lsls	r3, r3, #2
 800b6ee:	4413      	add	r3, r2
 800b6f0:	881b      	ldrh	r3, [r3, #0]
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b6f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6fc:	82bb      	strh	r3, [r7, #20]
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	009b      	lsls	r3, r3, #2
 800b706:	441a      	add	r2, r3
 800b708:	8abb      	ldrh	r3, [r7, #20]
 800b70a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b70e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b712:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	009b      	lsls	r3, r3, #2
 800b726:	4413      	add	r3, r2
 800b728:	881b      	ldrh	r3, [r3, #0]
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b730:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b734:	827b      	strh	r3, [r7, #18]
 800b736:	8a7b      	ldrh	r3, [r7, #18]
 800b738:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b73c:	827b      	strh	r3, [r7, #18]
 800b73e:	8a7b      	ldrh	r3, [r7, #18]
 800b740:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b744:	827b      	strh	r3, [r7, #18]
 800b746:	687a      	ldr	r2, [r7, #4]
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	009b      	lsls	r3, r3, #2
 800b74e:	441a      	add	r2, r3
 800b750:	8a7b      	ldrh	r3, [r7, #18]
 800b752:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b756:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b75a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b75e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b762:	b29b      	uxth	r3, r3
 800b764:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b766:	2300      	movs	r3, #0
}
 800b768:	4618      	mov	r0, r3
 800b76a:	371c      	adds	r7, #28
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b774:	b480      	push	{r7}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	460b      	mov	r3, r1
 800b77e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b780:	78fb      	ldrb	r3, [r7, #3]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d103      	bne.n	800b78e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2280      	movs	r2, #128	@ 0x80
 800b78a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800b78e:	2300      	movs	r3, #0
}
 800b790:	4618      	mov	r0, r3
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b7a4:	2300      	movs	r3, #0
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	370c      	adds	r7, #12
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr

0800b7b2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b7b2:	b480      	push	{r7}
 800b7b4:	b085      	sub	sp, #20
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b7c0:	b29b      	uxth	r3, r3
 800b7c2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3714      	adds	r7, #20
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr

0800b7d2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b7d2:	b480      	push	{r7}
 800b7d4:	b08b      	sub	sp, #44	@ 0x2c
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	60f8      	str	r0, [r7, #12]
 800b7da:	60b9      	str	r1, [r7, #8]
 800b7dc:	4611      	mov	r1, r2
 800b7de:	461a      	mov	r2, r3
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	80fb      	strh	r3, [r7, #6]
 800b7e4:	4613      	mov	r3, r2
 800b7e6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b7e8:	88bb      	ldrh	r3, [r7, #4]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	085b      	lsrs	r3, r3, #1
 800b7ee:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b7f8:	88fb      	ldrh	r3, [r7, #6]
 800b7fa:	005a      	lsls	r2, r3, #1
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	4413      	add	r3, r2
 800b800:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b804:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b806:	69bb      	ldr	r3, [r7, #24]
 800b808:	627b      	str	r3, [r7, #36]	@ 0x24
 800b80a:	e01e      	b.n	800b84a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b812:	69fb      	ldr	r3, [r7, #28]
 800b814:	3301      	adds	r3, #1
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	021b      	lsls	r3, r3, #8
 800b81a:	b21a      	sxth	r2, r3
 800b81c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b820:	4313      	orrs	r3, r2
 800b822:	b21b      	sxth	r3, r3
 800b824:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b826:	6a3b      	ldr	r3, [r7, #32]
 800b828:	8a7a      	ldrh	r2, [r7, #18]
 800b82a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b82c:	6a3b      	ldr	r3, [r7, #32]
 800b82e:	3302      	adds	r3, #2
 800b830:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b832:	6a3b      	ldr	r3, [r7, #32]
 800b834:	3302      	adds	r3, #2
 800b836:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800b838:	69fb      	ldr	r3, [r7, #28]
 800b83a:	3301      	adds	r3, #1
 800b83c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b83e:	69fb      	ldr	r3, [r7, #28]
 800b840:	3301      	adds	r3, #1
 800b842:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b846:	3b01      	subs	r3, #1
 800b848:	627b      	str	r3, [r7, #36]	@ 0x24
 800b84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d1dd      	bne.n	800b80c <USB_WritePMA+0x3a>
  }
}
 800b850:	bf00      	nop
 800b852:	bf00      	nop
 800b854:	372c      	adds	r7, #44	@ 0x2c
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr

0800b85e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b85e:	b480      	push	{r7}
 800b860:	b08b      	sub	sp, #44	@ 0x2c
 800b862:	af00      	add	r7, sp, #0
 800b864:	60f8      	str	r0, [r7, #12]
 800b866:	60b9      	str	r1, [r7, #8]
 800b868:	4611      	mov	r1, r2
 800b86a:	461a      	mov	r2, r3
 800b86c:	460b      	mov	r3, r1
 800b86e:	80fb      	strh	r3, [r7, #6]
 800b870:	4613      	mov	r3, r2
 800b872:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b874:	88bb      	ldrh	r3, [r7, #4]
 800b876:	085b      	lsrs	r3, r3, #1
 800b878:	b29b      	uxth	r3, r3
 800b87a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b884:	88fb      	ldrh	r3, [r7, #6]
 800b886:	005a      	lsls	r2, r3, #1
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	4413      	add	r3, r2
 800b88c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b890:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b892:	69bb      	ldr	r3, [r7, #24]
 800b894:	627b      	str	r3, [r7, #36]	@ 0x24
 800b896:	e01b      	b.n	800b8d0 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b898:	6a3b      	ldr	r3, [r7, #32]
 800b89a:	881b      	ldrh	r3, [r3, #0]
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b8a0:	6a3b      	ldr	r3, [r7, #32]
 800b8a2:	3302      	adds	r3, #2
 800b8a4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	b2da      	uxtb	r2, r3
 800b8aa:	69fb      	ldr	r3, [r7, #28]
 800b8ac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b8ae:	69fb      	ldr	r3, [r7, #28]
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	0a1b      	lsrs	r3, r3, #8
 800b8b8:	b2da      	uxtb	r2, r3
 800b8ba:	69fb      	ldr	r3, [r7, #28]
 800b8bc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b8c4:	6a3b      	ldr	r3, [r7, #32]
 800b8c6:	3302      	adds	r3, #2
 800b8c8:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800b8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8cc:	3b01      	subs	r3, #1
 800b8ce:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d1e0      	bne.n	800b898 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b8d6:	88bb      	ldrh	r3, [r7, #4]
 800b8d8:	f003 0301 	and.w	r3, r3, #1
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d007      	beq.n	800b8f2 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800b8e2:	6a3b      	ldr	r3, [r7, #32]
 800b8e4:	881b      	ldrh	r3, [r3, #0]
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	b2da      	uxtb	r2, r3
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	701a      	strb	r2, [r3, #0]
  }
}
 800b8f2:	bf00      	nop
 800b8f4:	372c      	adds	r7, #44	@ 0x2c
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr

0800b8fe <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b084      	sub	sp, #16
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
 800b906:	460b      	mov	r3, r1
 800b908:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b90a:	2300      	movs	r3, #0
 800b90c:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 800b90e:	2302      	movs	r3, #2
 800b910:	2203      	movs	r2, #3
 800b912:	2181      	movs	r1, #129	@ 0x81
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f001 fd98 	bl	800d44a <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2201      	movs	r2, #1
 800b91e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800b920:	2302      	movs	r3, #2
 800b922:	2203      	movs	r2, #3
 800b924:	2101      	movs	r1, #1
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f001 fd8f 	bl	800d44a <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2201      	movs	r2, #1
 800b930:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800b934:	2024      	movs	r0, #36	@ 0x24
 800b936:	f001 fe9d 	bl	800d674 <USBD_static_malloc>
 800b93a:	4602      	mov	r2, r0
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d102      	bne.n	800b952 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 800b94c:	2301      	movs	r3, #1
 800b94e:	73fb      	strb	r3, [r7, #15]
 800b950:	e012      	b.n	800b978 <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b958:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	2200      	movs	r2, #0
 800b95e:	f883 2020 	strb.w	r2, [r3, #32]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800b96c:	68ba      	ldr	r2, [r7, #8]
 800b96e:	230d      	movs	r3, #13
 800b970:	2101      	movs	r1, #1
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f001 fe5a 	bl	800d62c <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 800b978:	7bfb      	ldrb	r3, [r7, #15]
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3710      	adds	r7, #16
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}

0800b982 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 800b982:	b580      	push	{r7, lr}
 800b984:	b082      	sub	sp, #8
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
 800b98a:	460b      	mov	r3, r1
 800b98c:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800b98e:	2181      	movs	r1, #129	@ 0x81
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f001 fd80 	bl	800d496 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2200      	movs	r2, #0
 800b99a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800b99c:	2101      	movs	r1, #1
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f001 fd79 	bl	800d496 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d00e      	beq.n	800b9d4 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b9bc:	689b      	ldr	r3, [r3, #8]
 800b9be:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f001 fe62 	bl	800d690 <USBD_static_free>
    pdev->pClassData = NULL;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }
  return USBD_OK;
 800b9d4:	2300      	movs	r3, #0
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3708      	adds	r7, #8
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
	...

0800b9e0 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b088      	sub	sp, #32
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9f0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d051      	beq.n	800bab2 <USBD_CUSTOM_HID_Setup+0xd2>
 800ba0e:	2b20      	cmp	r3, #32
 800ba10:	f040 80d8 	bne.w	800bbc4 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	785b      	ldrb	r3, [r3, #1]
 800ba18:	3b02      	subs	r3, #2
 800ba1a:	2b09      	cmp	r3, #9
 800ba1c:	d841      	bhi.n	800baa2 <USBD_CUSTOM_HID_Setup+0xc2>
 800ba1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ba24 <USBD_CUSTOM_HID_Setup+0x44>)
 800ba20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba24:	0800ba7d 	.word	0x0800ba7d
 800ba28:	0800ba5b 	.word	0x0800ba5b
 800ba2c:	0800baa3 	.word	0x0800baa3
 800ba30:	0800baa3 	.word	0x0800baa3
 800ba34:	0800baa3 	.word	0x0800baa3
 800ba38:	0800baa3 	.word	0x0800baa3
 800ba3c:	0800baa3 	.word	0x0800baa3
 800ba40:	0800ba8d 	.word	0x0800ba8d
 800ba44:	0800ba6b 	.word	0x0800ba6b
 800ba48:	0800ba4d 	.word	0x0800ba4d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	885b      	ldrh	r3, [r3, #2]
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	461a      	mov	r2, r3
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	611a      	str	r2, [r3, #16]
          break;
 800ba58:	e02a      	b.n	800bab0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	3310      	adds	r3, #16
 800ba5e:	2201      	movs	r2, #1
 800ba60:	4619      	mov	r1, r3
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f001 f9a4 	bl	800cdb0 <USBD_CtlSendData>
          break;
 800ba68:	e022      	b.n	800bab0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	885b      	ldrh	r3, [r3, #2]
 800ba6e:	0a1b      	lsrs	r3, r3, #8
 800ba70:	b29b      	uxth	r3, r3
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	461a      	mov	r2, r3
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	615a      	str	r2, [r3, #20]
          break;
 800ba7a:	e019      	b.n	800bab0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	3314      	adds	r3, #20
 800ba80:	2201      	movs	r2, #1
 800ba82:	4619      	mov	r1, r3
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f001 f993 	bl	800cdb0 <USBD_CtlSendData>
          break;
 800ba8a:	e011      	b.n	800bab0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	61da      	str	r2, [r3, #28]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800ba92:	6939      	ldr	r1, [r7, #16]
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	88db      	ldrh	r3, [r3, #6]
 800ba98:	461a      	mov	r2, r3
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f001 f9b6 	bl	800ce0c <USBD_CtlPrepareRx>
          break;
 800baa0:	e006      	b.n	800bab0 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 800baa2:	6839      	ldr	r1, [r7, #0]
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f001 f918 	bl	800ccda <USBD_CtlError>
          ret = USBD_FAIL;
 800baaa:	2302      	movs	r3, #2
 800baac:	75fb      	strb	r3, [r7, #23]
          break;
 800baae:	bf00      	nop
      }
      break;
 800bab0:	e08f      	b.n	800bbd2 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	785b      	ldrb	r3, [r3, #1]
 800bab6:	2b0b      	cmp	r3, #11
 800bab8:	d87c      	bhi.n	800bbb4 <USBD_CUSTOM_HID_Setup+0x1d4>
 800baba:	a201      	add	r2, pc, #4	@ (adr r2, 800bac0 <USBD_CUSTOM_HID_Setup+0xe0>)
 800babc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bac0:	0800baf1 	.word	0x0800baf1
 800bac4:	0800bbb5 	.word	0x0800bbb5
 800bac8:	0800bbb5 	.word	0x0800bbb5
 800bacc:	0800bbb5 	.word	0x0800bbb5
 800bad0:	0800bbb5 	.word	0x0800bbb5
 800bad4:	0800bbb5 	.word	0x0800bbb5
 800bad8:	0800bb19 	.word	0x0800bb19
 800badc:	0800bbb5 	.word	0x0800bbb5
 800bae0:	0800bbb5 	.word	0x0800bbb5
 800bae4:	0800bbb5 	.word	0x0800bbb5
 800bae8:	0800bb67 	.word	0x0800bb67
 800baec:	0800bb8f 	.word	0x0800bb8f
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baf6:	2b03      	cmp	r3, #3
 800baf8:	d107      	bne.n	800bb0a <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800bafa:	f107 030e 	add.w	r3, r7, #14
 800bafe:	2202      	movs	r2, #2
 800bb00:	4619      	mov	r1, r3
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f001 f954 	bl	800cdb0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bb08:	e05b      	b.n	800bbc2 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800bb0a:	6839      	ldr	r1, [r7, #0]
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f001 f8e4 	bl	800ccda <USBD_CtlError>
            ret = USBD_FAIL;
 800bb12:	2302      	movs	r3, #2
 800bb14:	75fb      	strb	r3, [r7, #23]
          break;
 800bb16:	e054      	b.n	800bbc2 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	885b      	ldrh	r3, [r3, #2]
 800bb1c:	0a1b      	lsrs	r3, r3, #8
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	2b22      	cmp	r3, #34	@ 0x22
 800bb22:	d10b      	bne.n	800bb3c <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	88db      	ldrh	r3, [r3, #6]
 800bb28:	2b23      	cmp	r3, #35	@ 0x23
 800bb2a:	bf28      	it	cs
 800bb2c:	2323      	movcs	r3, #35	@ 0x23
 800bb2e:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	61bb      	str	r3, [r7, #24]
 800bb3a:	e00d      	b.n	800bb58 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	885b      	ldrh	r3, [r3, #2]
 800bb40:	0a1b      	lsrs	r3, r3, #8
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	2b21      	cmp	r3, #33	@ 0x21
 800bb46:	d107      	bne.n	800bb58 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800bb48:	4b24      	ldr	r3, [pc, #144]	@ (800bbdc <USBD_CUSTOM_HID_Setup+0x1fc>)
 800bb4a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	88db      	ldrh	r3, [r3, #6]
 800bb50:	2b09      	cmp	r3, #9
 800bb52:	bf28      	it	cs
 800bb54:	2309      	movcs	r3, #9
 800bb56:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 800bb58:	8bfb      	ldrh	r3, [r7, #30]
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	69b9      	ldr	r1, [r7, #24]
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f001 f926 	bl	800cdb0 <USBD_CtlSendData>
          break;
 800bb64:	e02d      	b.n	800bbc2 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb6c:	2b03      	cmp	r3, #3
 800bb6e:	d107      	bne.n	800bb80 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	3318      	adds	r3, #24
 800bb74:	2201      	movs	r2, #1
 800bb76:	4619      	mov	r1, r3
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f001 f919 	bl	800cdb0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bb7e:	e020      	b.n	800bbc2 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800bb80:	6839      	ldr	r1, [r7, #0]
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f001 f8a9 	bl	800ccda <USBD_CtlError>
            ret = USBD_FAIL;
 800bb88:	2302      	movs	r3, #2
 800bb8a:	75fb      	strb	r3, [r7, #23]
          break;
 800bb8c:	e019      	b.n	800bbc2 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb94:	2b03      	cmp	r3, #3
 800bb96:	d106      	bne.n	800bba6 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	885b      	ldrh	r3, [r3, #2]
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	461a      	mov	r2, r3
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	619a      	str	r2, [r3, #24]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bba4:	e00d      	b.n	800bbc2 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800bba6:	6839      	ldr	r1, [r7, #0]
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f001 f896 	bl	800ccda <USBD_CtlError>
            ret = USBD_FAIL;
 800bbae:	2302      	movs	r3, #2
 800bbb0:	75fb      	strb	r3, [r7, #23]
          break;
 800bbb2:	e006      	b.n	800bbc2 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 800bbb4:	6839      	ldr	r1, [r7, #0]
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f001 f88f 	bl	800ccda <USBD_CtlError>
          ret = USBD_FAIL;
 800bbbc:	2302      	movs	r3, #2
 800bbbe:	75fb      	strb	r3, [r7, #23]
          break;
 800bbc0:	bf00      	nop
      }
      break;
 800bbc2:	e006      	b.n	800bbd2 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 800bbc4:	6839      	ldr	r1, [r7, #0]
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f001 f887 	bl	800ccda <USBD_CtlError>
      ret = USBD_FAIL;
 800bbcc:	2302      	movs	r3, #2
 800bbce:	75fb      	strb	r3, [r7, #23]
      break;
 800bbd0:	bf00      	nop
  }
  return ret;
 800bbd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3720      	adds	r7, #32
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}
 800bbdc:	200000d0 	.word	0x200000d0

0800bbe0 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b086      	sub	sp, #24
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	60f8      	str	r0, [r7, #12]
 800bbe8:	60b9      	str	r1, [r7, #8]
 800bbea:	4613      	mov	r3, r2
 800bbec:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbf4:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbfc:	2b03      	cmp	r3, #3
 800bbfe:	d111      	bne.n	800bc24 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d10a      	bne.n	800bc20 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	f883 2020 	strb.w	r2, [r3, #32]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800bc12:	88fb      	ldrh	r3, [r7, #6]
 800bc14:	68ba      	ldr	r2, [r7, #8]
 800bc16:	2181      	movs	r1, #129	@ 0x81
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	f001 fce4 	bl	800d5e6 <USBD_LL_Transmit>
 800bc1e:	e001      	b.n	800bc24 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 800bc20:	2301      	movs	r3, #1
 800bc22:	e000      	b.n	800bc26 <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 800bc24:	2300      	movs	r3, #0
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3718      	adds	r7, #24
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
	...

0800bc30 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2229      	movs	r2, #41	@ 0x29
 800bc3c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800bc3e:	4b03      	ldr	r3, [pc, #12]	@ (800bc4c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	370c      	adds	r7, #12
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr
 800bc4c:	2000004c 	.word	0x2000004c

0800bc50 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b083      	sub	sp, #12
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2229      	movs	r2, #41	@ 0x29
 800bc5c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800bc5e:	4b03      	ldr	r3, [pc, #12]	@ (800bc6c <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr
 800bc6c:	20000078 	.word	0x20000078

0800bc70 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b083      	sub	sp, #12
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2229      	movs	r2, #41	@ 0x29
 800bc7c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800bc7e:	4b03      	ldr	r3, [pc, #12]	@ (800bc8c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	370c      	adds	r7, #12
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr
 800bc8c:	200000a4 	.word	0x200000a4

0800bc90 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b083      	sub	sp, #12
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	460b      	mov	r3, r1
 800bc9a:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bca2:	2200      	movs	r2, #0
 800bca4:	f883 2020 	strb.w	r2, [r3, #32]

  return USBD_OK;
 800bca8:	2300      	movs	r3, #0
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	370c      	adds	r7, #12
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb4:	4770      	bx	lr

0800bcb6 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 800bcb6:	b580      	push	{r7, lr}
 800bcb8:	b084      	sub	sp, #16
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	6078      	str	r0, [r7, #4]
 800bcbe:	460b      	mov	r3, r1
 800bcc0:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcc8:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bcd0:	68db      	ldr	r3, [r3, #12]
 800bcd2:	68fa      	ldr	r2, [r7, #12]
 800bcd4:	7810      	ldrb	r0, [r2, #0]
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	7852      	ldrb	r2, [r2, #1]
 800bcda:	4611      	mov	r1, r2
 800bcdc:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800bcde:	68fa      	ldr	r2, [r7, #12]
 800bce0:	230d      	movs	r3, #13
 800bce2:	2101      	movs	r1, #1
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f001 fca1 	bl	800d62c <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 800bcea:	2300      	movs	r3, #0
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3710      	adds	r7, #16
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b084      	sub	sp, #16
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd02:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	69db      	ldr	r3, [r3, #28]
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d10c      	bne.n	800bd26 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bd12:	68db      	ldr	r3, [r3, #12]
 800bd14:	68fa      	ldr	r2, [r7, #12]
 800bd16:	7810      	ldrb	r0, [r2, #0]
 800bd18:	68fa      	ldr	r2, [r7, #12]
 800bd1a:	7852      	ldrb	r2, [r2, #1]
 800bd1c:	4611      	mov	r1, r2
 800bd1e:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	2200      	movs	r2, #0
 800bd24:	61da      	str	r2, [r3, #28]
  }

  return USBD_OK;
 800bd26:	2300      	movs	r3, #0
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3710      	adds	r7, #16
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	220a      	movs	r2, #10
 800bd3c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800bd3e:	4b03      	ldr	r3, [pc, #12]	@ (800bd4c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	370c      	adds	r7, #12
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr
 800bd4c:	200000dc 	.word	0x200000dc

0800bd50 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b085      	sub	sp, #20
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800bd5a:	2302      	movs	r3, #2
 800bd5c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d005      	beq.n	800bd70 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	683a      	ldr	r2, [r7, #0]
 800bd68:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bd70:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3714      	adds	r7, #20
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr

0800bd7e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bd7e:	b580      	push	{r7, lr}
 800bd80:	b084      	sub	sp, #16
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	60f8      	str	r0, [r7, #12]
 800bd86:	60b9      	str	r1, [r7, #8]
 800bd88:	4613      	mov	r3, r2
 800bd8a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d101      	bne.n	800bd96 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bd92:	2302      	movs	r3, #2
 800bd94:	e01a      	b.n	800bdcc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d003      	beq.n	800bda8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2200      	movs	r2, #0
 800bda4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d003      	beq.n	800bdb6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	68ba      	ldr	r2, [r7, #8]
 800bdb2:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2201      	movs	r2, #1
 800bdba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	79fa      	ldrb	r2, [r7, #7]
 800bdc2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800bdc4:	68f8      	ldr	r0, [r7, #12]
 800bdc6:	f001 fad5 	bl	800d374 <USBD_LL_Init>

  return USBD_OK;
 800bdca:	2300      	movs	r3, #0
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3710      	adds	r7, #16
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800bdde:	2300      	movs	r3, #0
 800bde0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d006      	beq.n	800bdf6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	683a      	ldr	r2, [r7, #0]
 800bdec:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	73fb      	strb	r3, [r7, #15]
 800bdf4:	e001      	b.n	800bdfa <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800bdf6:	2302      	movs	r3, #2
 800bdf8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bdfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3714      	adds	r7, #20
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr

0800be08 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f001 faff 	bl	800d414 <USBD_LL_Start>

  return USBD_OK;
 800be16:	2300      	movs	r3, #0
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3708      	adds	r7, #8
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800be20:	b480      	push	{r7}
 800be22:	b083      	sub	sp, #12
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800be28:	2300      	movs	r3, #0
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	370c      	adds	r7, #12
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr

0800be36 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b084      	sub	sp, #16
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
 800be3e:	460b      	mov	r3, r1
 800be40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800be42:	2302      	movs	r3, #2
 800be44:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d00c      	beq.n	800be6a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	78fa      	ldrb	r2, [r7, #3]
 800be5a:	4611      	mov	r1, r2
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	4798      	blx	r3
 800be60:	4603      	mov	r3, r0
 800be62:	2b00      	cmp	r3, #0
 800be64:	d101      	bne.n	800be6a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800be66:	2300      	movs	r3, #0
 800be68:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800be6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3710      	adds	r7, #16
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	460b      	mov	r3, r1
 800be7e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	78fa      	ldrb	r2, [r7, #3]
 800be8a:	4611      	mov	r1, r2
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	4798      	blx	r3

  return USBD_OK;
 800be90:	2300      	movs	r3, #0
}
 800be92:	4618      	mov	r0, r3
 800be94:	3708      	adds	r7, #8
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}

0800be9a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b082      	sub	sp, #8
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
 800bea2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800beaa:	6839      	ldr	r1, [r7, #0]
 800beac:	4618      	mov	r0, r3
 800beae:	f000 feda 	bl	800cc66 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2201      	movs	r2, #1
 800beb6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bec0:	461a      	mov	r2, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800bece:	f003 031f 	and.w	r3, r3, #31
 800bed2:	2b02      	cmp	r3, #2
 800bed4:	d016      	beq.n	800bf04 <USBD_LL_SetupStage+0x6a>
 800bed6:	2b02      	cmp	r3, #2
 800bed8:	d81c      	bhi.n	800bf14 <USBD_LL_SetupStage+0x7a>
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d002      	beq.n	800bee4 <USBD_LL_SetupStage+0x4a>
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d008      	beq.n	800bef4 <USBD_LL_SetupStage+0x5a>
 800bee2:	e017      	b.n	800bf14 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800beea:	4619      	mov	r1, r3
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 f9cd 	bl	800c28c <USBD_StdDevReq>
      break;
 800bef2:	e01a      	b.n	800bf2a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800befa:	4619      	mov	r1, r3
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f000 fa2f 	bl	800c360 <USBD_StdItfReq>
      break;
 800bf02:	e012      	b.n	800bf2a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800bf0a:	4619      	mov	r1, r3
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f000 fa6f 	bl	800c3f0 <USBD_StdEPReq>
      break;
 800bf12:	e00a      	b.n	800bf2a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800bf1a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bf1e:	b2db      	uxtb	r3, r3
 800bf20:	4619      	mov	r1, r3
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f001 fad6 	bl	800d4d4 <USBD_LL_StallEP>
      break;
 800bf28:	bf00      	nop
  }

  return USBD_OK;
 800bf2a:	2300      	movs	r3, #0
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3708      	adds	r7, #8
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b086      	sub	sp, #24
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	607a      	str	r2, [r7, #4]
 800bf40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bf42:	7afb      	ldrb	r3, [r7, #11]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d14b      	bne.n	800bfe0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bf4e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bf56:	2b03      	cmp	r3, #3
 800bf58:	d134      	bne.n	800bfc4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	68da      	ldr	r2, [r3, #12]
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	691b      	ldr	r3, [r3, #16]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d919      	bls.n	800bf9a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	68da      	ldr	r2, [r3, #12]
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	691b      	ldr	r3, [r3, #16]
 800bf6e:	1ad2      	subs	r2, r2, r3
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	68da      	ldr	r2, [r3, #12]
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d203      	bcs.n	800bf88 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800bf84:	b29b      	uxth	r3, r3
 800bf86:	e002      	b.n	800bf8e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	461a      	mov	r2, r3
 800bf90:	6879      	ldr	r1, [r7, #4]
 800bf92:	68f8      	ldr	r0, [r7, #12]
 800bf94:	f000 ff58 	bl	800ce48 <USBD_CtlContinueRx>
 800bf98:	e038      	b.n	800c00c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfa0:	691b      	ldr	r3, [r3, #16]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d00a      	beq.n	800bfbc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bfac:	2b03      	cmp	r3, #3
 800bfae:	d105      	bne.n	800bfbc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfb6:	691b      	ldr	r3, [r3, #16]
 800bfb8:	68f8      	ldr	r0, [r7, #12]
 800bfba:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800bfbc:	68f8      	ldr	r0, [r7, #12]
 800bfbe:	f000 ff55 	bl	800ce6c <USBD_CtlSendStatus>
 800bfc2:	e023      	b.n	800c00c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bfca:	2b05      	cmp	r3, #5
 800bfcc:	d11e      	bne.n	800c00c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800bfd6:	2100      	movs	r1, #0
 800bfd8:	68f8      	ldr	r0, [r7, #12]
 800bfda:	f001 fa7b 	bl	800d4d4 <USBD_LL_StallEP>
 800bfde:	e015      	b.n	800c00c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfe6:	699b      	ldr	r3, [r3, #24]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d00d      	beq.n	800c008 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bff2:	2b03      	cmp	r3, #3
 800bff4:	d108      	bne.n	800c008 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bffc:	699b      	ldr	r3, [r3, #24]
 800bffe:	7afa      	ldrb	r2, [r7, #11]
 800c000:	4611      	mov	r1, r2
 800c002:	68f8      	ldr	r0, [r7, #12]
 800c004:	4798      	blx	r3
 800c006:	e001      	b.n	800c00c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c008:	2302      	movs	r3, #2
 800c00a:	e000      	b.n	800c00e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800c00c:	2300      	movs	r3, #0
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3718      	adds	r7, #24
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}

0800c016 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c016:	b580      	push	{r7, lr}
 800c018:	b086      	sub	sp, #24
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	60f8      	str	r0, [r7, #12]
 800c01e:	460b      	mov	r3, r1
 800c020:	607a      	str	r2, [r7, #4]
 800c022:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c024:	7afb      	ldrb	r3, [r7, #11]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d17f      	bne.n	800c12a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	3314      	adds	r3, #20
 800c02e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c036:	2b02      	cmp	r3, #2
 800c038:	d15c      	bne.n	800c0f4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	68da      	ldr	r2, [r3, #12]
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	691b      	ldr	r3, [r3, #16]
 800c042:	429a      	cmp	r2, r3
 800c044:	d915      	bls.n	800c072 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	68da      	ldr	r2, [r3, #12]
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	691b      	ldr	r3, [r3, #16]
 800c04e:	1ad2      	subs	r2, r2, r3
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	b29b      	uxth	r3, r3
 800c05a:	461a      	mov	r2, r3
 800c05c:	6879      	ldr	r1, [r7, #4]
 800c05e:	68f8      	ldr	r0, [r7, #12]
 800c060:	f000 fec2 	bl	800cde8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c064:	2300      	movs	r3, #0
 800c066:	2200      	movs	r2, #0
 800c068:	2100      	movs	r1, #0
 800c06a:	68f8      	ldr	r0, [r7, #12]
 800c06c:	f001 fade 	bl	800d62c <USBD_LL_PrepareReceive>
 800c070:	e04e      	b.n	800c110 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	689b      	ldr	r3, [r3, #8]
 800c076:	697a      	ldr	r2, [r7, #20]
 800c078:	6912      	ldr	r2, [r2, #16]
 800c07a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c07e:	fb01 f202 	mul.w	r2, r1, r2
 800c082:	1a9b      	subs	r3, r3, r2
 800c084:	2b00      	cmp	r3, #0
 800c086:	d11c      	bne.n	800c0c2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	689a      	ldr	r2, [r3, #8]
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c090:	429a      	cmp	r2, r3
 800c092:	d316      	bcc.n	800c0c2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	689a      	ldr	r2, [r3, #8]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d20f      	bcs.n	800c0c2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	68f8      	ldr	r0, [r7, #12]
 800c0a8:	f000 fe9e 	bl	800cde8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	2100      	movs	r1, #0
 800c0ba:	68f8      	ldr	r0, [r7, #12]
 800c0bc:	f001 fab6 	bl	800d62c <USBD_LL_PrepareReceive>
 800c0c0:	e026      	b.n	800c110 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0c8:	68db      	ldr	r3, [r3, #12]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d00a      	beq.n	800c0e4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c0d4:	2b03      	cmp	r3, #3
 800c0d6:	d105      	bne.n	800c0e4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0de:	68db      	ldr	r3, [r3, #12]
 800c0e0:	68f8      	ldr	r0, [r7, #12]
 800c0e2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c0e4:	2180      	movs	r1, #128	@ 0x80
 800c0e6:	68f8      	ldr	r0, [r7, #12]
 800c0e8:	f001 f9f4 	bl	800d4d4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c0ec:	68f8      	ldr	r0, [r7, #12]
 800c0ee:	f000 fed0 	bl	800ce92 <USBD_CtlReceiveStatus>
 800c0f2:	e00d      	b.n	800c110 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c0fa:	2b04      	cmp	r3, #4
 800c0fc:	d004      	beq.n	800c108 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c104:	2b00      	cmp	r3, #0
 800c106:	d103      	bne.n	800c110 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c108:	2180      	movs	r1, #128	@ 0x80
 800c10a:	68f8      	ldr	r0, [r7, #12]
 800c10c:	f001 f9e2 	bl	800d4d4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c116:	2b01      	cmp	r3, #1
 800c118:	d11d      	bne.n	800c156 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800c11a:	68f8      	ldr	r0, [r7, #12]
 800c11c:	f7ff fe80 	bl	800be20 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2200      	movs	r2, #0
 800c124:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c128:	e015      	b.n	800c156 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c130:	695b      	ldr	r3, [r3, #20]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d00d      	beq.n	800c152 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c13c:	2b03      	cmp	r3, #3
 800c13e:	d108      	bne.n	800c152 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c146:	695b      	ldr	r3, [r3, #20]
 800c148:	7afa      	ldrb	r2, [r7, #11]
 800c14a:	4611      	mov	r1, r2
 800c14c:	68f8      	ldr	r0, [r7, #12]
 800c14e:	4798      	blx	r3
 800c150:	e001      	b.n	800c156 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c152:	2302      	movs	r3, #2
 800c154:	e000      	b.n	800c158 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800c156:	2300      	movs	r3, #0
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3718      	adds	r7, #24
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c168:	2340      	movs	r3, #64	@ 0x40
 800c16a:	2200      	movs	r2, #0
 800c16c:	2100      	movs	r1, #0
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f001 f96b 	bl	800d44a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2201      	movs	r2, #1
 800c178:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2240      	movs	r2, #64	@ 0x40
 800c180:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c184:	2340      	movs	r3, #64	@ 0x40
 800c186:	2200      	movs	r2, #0
 800c188:	2180      	movs	r1, #128	@ 0x80
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f001 f95d 	bl	800d44a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2201      	movs	r2, #1
 800c194:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2240      	movs	r2, #64	@ 0x40
 800c19a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2201      	movs	r2, #1
 800c1a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d009      	beq.n	800c1d8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1ca:	685b      	ldr	r3, [r3, #4]
 800c1cc:	687a      	ldr	r2, [r7, #4]
 800c1ce:	6852      	ldr	r2, [r2, #4]
 800c1d0:	b2d2      	uxtb	r2, r2
 800c1d2:	4611      	mov	r1, r2
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	4798      	blx	r3
  }

  return USBD_OK;
 800c1d8:	2300      	movs	r3, #0
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3708      	adds	r7, #8
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}

0800c1e2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c1e2:	b480      	push	{r7}
 800c1e4:	b083      	sub	sp, #12
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	78fa      	ldrb	r2, [r7, #3]
 800c1f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c1f4:	2300      	movs	r3, #0
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	370c      	adds	r7, #12
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr

0800c202 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c202:	b480      	push	{r7}
 800c204:	b083      	sub	sp, #12
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2204      	movs	r2, #4
 800c21a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c21e:	2300      	movs	r3, #0
}
 800c220:	4618      	mov	r0, r3
 800c222:	370c      	adds	r7, #12
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr

0800c22c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b083      	sub	sp, #12
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c23a:	2b04      	cmp	r3, #4
 800c23c:	d105      	bne.n	800c24a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c24a:	2300      	movs	r3, #0
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	370c      	adds	r7, #12
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr

0800c258 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c266:	2b03      	cmp	r3, #3
 800c268:	d10b      	bne.n	800c282 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c270:	69db      	ldr	r3, [r3, #28]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d005      	beq.n	800c282 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c27c:	69db      	ldr	r3, [r3, #28]
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c282:	2300      	movs	r3, #0
}
 800c284:	4618      	mov	r0, r3
 800c286:	3708      	adds	r7, #8
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c296:	2300      	movs	r3, #0
 800c298:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c2a2:	2b40      	cmp	r3, #64	@ 0x40
 800c2a4:	d005      	beq.n	800c2b2 <USBD_StdDevReq+0x26>
 800c2a6:	2b40      	cmp	r3, #64	@ 0x40
 800c2a8:	d84f      	bhi.n	800c34a <USBD_StdDevReq+0xbe>
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d009      	beq.n	800c2c2 <USBD_StdDevReq+0x36>
 800c2ae:	2b20      	cmp	r3, #32
 800c2b0:	d14b      	bne.n	800c34a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2b8:	689b      	ldr	r3, [r3, #8]
 800c2ba:	6839      	ldr	r1, [r7, #0]
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	4798      	blx	r3
      break;
 800c2c0:	e048      	b.n	800c354 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	785b      	ldrb	r3, [r3, #1]
 800c2c6:	2b09      	cmp	r3, #9
 800c2c8:	d839      	bhi.n	800c33e <USBD_StdDevReq+0xb2>
 800c2ca:	a201      	add	r2, pc, #4	@ (adr r2, 800c2d0 <USBD_StdDevReq+0x44>)
 800c2cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2d0:	0800c321 	.word	0x0800c321
 800c2d4:	0800c335 	.word	0x0800c335
 800c2d8:	0800c33f 	.word	0x0800c33f
 800c2dc:	0800c32b 	.word	0x0800c32b
 800c2e0:	0800c33f 	.word	0x0800c33f
 800c2e4:	0800c303 	.word	0x0800c303
 800c2e8:	0800c2f9 	.word	0x0800c2f9
 800c2ec:	0800c33f 	.word	0x0800c33f
 800c2f0:	0800c317 	.word	0x0800c317
 800c2f4:	0800c30d 	.word	0x0800c30d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c2f8:	6839      	ldr	r1, [r7, #0]
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 f9dc 	bl	800c6b8 <USBD_GetDescriptor>
          break;
 800c300:	e022      	b.n	800c348 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c302:	6839      	ldr	r1, [r7, #0]
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f000 fb3f 	bl	800c988 <USBD_SetAddress>
          break;
 800c30a:	e01d      	b.n	800c348 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800c30c:	6839      	ldr	r1, [r7, #0]
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 fb7e 	bl	800ca10 <USBD_SetConfig>
          break;
 800c314:	e018      	b.n	800c348 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c316:	6839      	ldr	r1, [r7, #0]
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 fc07 	bl	800cb2c <USBD_GetConfig>
          break;
 800c31e:	e013      	b.n	800c348 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c320:	6839      	ldr	r1, [r7, #0]
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 fc37 	bl	800cb96 <USBD_GetStatus>
          break;
 800c328:	e00e      	b.n	800c348 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c32a:	6839      	ldr	r1, [r7, #0]
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 fc65 	bl	800cbfc <USBD_SetFeature>
          break;
 800c332:	e009      	b.n	800c348 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c334:	6839      	ldr	r1, [r7, #0]
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f000 fc74 	bl	800cc24 <USBD_ClrFeature>
          break;
 800c33c:	e004      	b.n	800c348 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800c33e:	6839      	ldr	r1, [r7, #0]
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 fcca 	bl	800ccda <USBD_CtlError>
          break;
 800c346:	bf00      	nop
      }
      break;
 800c348:	e004      	b.n	800c354 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800c34a:	6839      	ldr	r1, [r7, #0]
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 fcc4 	bl	800ccda <USBD_CtlError>
      break;
 800c352:	bf00      	nop
  }

  return ret;
 800c354:	7bfb      	ldrb	r3, [r7, #15]
}
 800c356:	4618      	mov	r0, r3
 800c358:	3710      	adds	r7, #16
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop

0800c360 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c36a:	2300      	movs	r3, #0
 800c36c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c376:	2b40      	cmp	r3, #64	@ 0x40
 800c378:	d005      	beq.n	800c386 <USBD_StdItfReq+0x26>
 800c37a:	2b40      	cmp	r3, #64	@ 0x40
 800c37c:	d82e      	bhi.n	800c3dc <USBD_StdItfReq+0x7c>
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d001      	beq.n	800c386 <USBD_StdItfReq+0x26>
 800c382:	2b20      	cmp	r3, #32
 800c384:	d12a      	bne.n	800c3dc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c38c:	3b01      	subs	r3, #1
 800c38e:	2b02      	cmp	r3, #2
 800c390:	d81d      	bhi.n	800c3ce <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	889b      	ldrh	r3, [r3, #4]
 800c396:	b2db      	uxtb	r3, r3
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d813      	bhi.n	800c3c4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3a2:	689b      	ldr	r3, [r3, #8]
 800c3a4:	6839      	ldr	r1, [r7, #0]
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	4798      	blx	r3
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	88db      	ldrh	r3, [r3, #6]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d110      	bne.n	800c3d8 <USBD_StdItfReq+0x78>
 800c3b6:	7bfb      	ldrb	r3, [r7, #15]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d10d      	bne.n	800c3d8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 fd55 	bl	800ce6c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c3c2:	e009      	b.n	800c3d8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800c3c4:	6839      	ldr	r1, [r7, #0]
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f000 fc87 	bl	800ccda <USBD_CtlError>
          break;
 800c3cc:	e004      	b.n	800c3d8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800c3ce:	6839      	ldr	r1, [r7, #0]
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 fc82 	bl	800ccda <USBD_CtlError>
          break;
 800c3d6:	e000      	b.n	800c3da <USBD_StdItfReq+0x7a>
          break;
 800c3d8:	bf00      	nop
      }
      break;
 800c3da:	e004      	b.n	800c3e6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800c3dc:	6839      	ldr	r1, [r7, #0]
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 fc7b 	bl	800ccda <USBD_CtlError>
      break;
 800c3e4:	bf00      	nop
  }

  return USBD_OK;
 800c3e6:	2300      	movs	r3, #0
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3710      	adds	r7, #16
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	889b      	ldrh	r3, [r3, #4]
 800c402:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c40c:	2b40      	cmp	r3, #64	@ 0x40
 800c40e:	d007      	beq.n	800c420 <USBD_StdEPReq+0x30>
 800c410:	2b40      	cmp	r3, #64	@ 0x40
 800c412:	f200 8146 	bhi.w	800c6a2 <USBD_StdEPReq+0x2b2>
 800c416:	2b00      	cmp	r3, #0
 800c418:	d00a      	beq.n	800c430 <USBD_StdEPReq+0x40>
 800c41a:	2b20      	cmp	r3, #32
 800c41c:	f040 8141 	bne.w	800c6a2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c426:	689b      	ldr	r3, [r3, #8]
 800c428:	6839      	ldr	r1, [r7, #0]
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	4798      	blx	r3
      break;
 800c42e:	e13d      	b.n	800c6ac <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c438:	2b20      	cmp	r3, #32
 800c43a:	d10a      	bne.n	800c452 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c442:	689b      	ldr	r3, [r3, #8]
 800c444:	6839      	ldr	r1, [r7, #0]
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	4798      	blx	r3
 800c44a:	4603      	mov	r3, r0
 800c44c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800c44e:	7bfb      	ldrb	r3, [r7, #15]
 800c450:	e12d      	b.n	800c6ae <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	785b      	ldrb	r3, [r3, #1]
 800c456:	2b03      	cmp	r3, #3
 800c458:	d007      	beq.n	800c46a <USBD_StdEPReq+0x7a>
 800c45a:	2b03      	cmp	r3, #3
 800c45c:	f300 811b 	bgt.w	800c696 <USBD_StdEPReq+0x2a6>
 800c460:	2b00      	cmp	r3, #0
 800c462:	d072      	beq.n	800c54a <USBD_StdEPReq+0x15a>
 800c464:	2b01      	cmp	r3, #1
 800c466:	d03a      	beq.n	800c4de <USBD_StdEPReq+0xee>
 800c468:	e115      	b.n	800c696 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c470:	2b02      	cmp	r3, #2
 800c472:	d002      	beq.n	800c47a <USBD_StdEPReq+0x8a>
 800c474:	2b03      	cmp	r3, #3
 800c476:	d015      	beq.n	800c4a4 <USBD_StdEPReq+0xb4>
 800c478:	e02b      	b.n	800c4d2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c47a:	7bbb      	ldrb	r3, [r7, #14]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d00c      	beq.n	800c49a <USBD_StdEPReq+0xaa>
 800c480:	7bbb      	ldrb	r3, [r7, #14]
 800c482:	2b80      	cmp	r3, #128	@ 0x80
 800c484:	d009      	beq.n	800c49a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c486:	7bbb      	ldrb	r3, [r7, #14]
 800c488:	4619      	mov	r1, r3
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f001 f822 	bl	800d4d4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c490:	2180      	movs	r1, #128	@ 0x80
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f001 f81e 	bl	800d4d4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c498:	e020      	b.n	800c4dc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800c49a:	6839      	ldr	r1, [r7, #0]
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 fc1c 	bl	800ccda <USBD_CtlError>
              break;
 800c4a2:	e01b      	b.n	800c4dc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	885b      	ldrh	r3, [r3, #2]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d10e      	bne.n	800c4ca <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800c4ac:	7bbb      	ldrb	r3, [r7, #14]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d00b      	beq.n	800c4ca <USBD_StdEPReq+0xda>
 800c4b2:	7bbb      	ldrb	r3, [r7, #14]
 800c4b4:	2b80      	cmp	r3, #128	@ 0x80
 800c4b6:	d008      	beq.n	800c4ca <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	88db      	ldrh	r3, [r3, #6]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d104      	bne.n	800c4ca <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c4c0:	7bbb      	ldrb	r3, [r7, #14]
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f001 f805 	bl	800d4d4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f000 fcce 	bl	800ce6c <USBD_CtlSendStatus>

              break;
 800c4d0:	e004      	b.n	800c4dc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800c4d2:	6839      	ldr	r1, [r7, #0]
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f000 fc00 	bl	800ccda <USBD_CtlError>
              break;
 800c4da:	bf00      	nop
          }
          break;
 800c4dc:	e0e0      	b.n	800c6a0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4e4:	2b02      	cmp	r3, #2
 800c4e6:	d002      	beq.n	800c4ee <USBD_StdEPReq+0xfe>
 800c4e8:	2b03      	cmp	r3, #3
 800c4ea:	d015      	beq.n	800c518 <USBD_StdEPReq+0x128>
 800c4ec:	e026      	b.n	800c53c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c4ee:	7bbb      	ldrb	r3, [r7, #14]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d00c      	beq.n	800c50e <USBD_StdEPReq+0x11e>
 800c4f4:	7bbb      	ldrb	r3, [r7, #14]
 800c4f6:	2b80      	cmp	r3, #128	@ 0x80
 800c4f8:	d009      	beq.n	800c50e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c4fa:	7bbb      	ldrb	r3, [r7, #14]
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f000 ffe8 	bl	800d4d4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c504:	2180      	movs	r1, #128	@ 0x80
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 ffe4 	bl	800d4d4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c50c:	e01c      	b.n	800c548 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800c50e:	6839      	ldr	r1, [r7, #0]
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 fbe2 	bl	800ccda <USBD_CtlError>
              break;
 800c516:	e017      	b.n	800c548 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	885b      	ldrh	r3, [r3, #2]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d112      	bne.n	800c546 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c520:	7bbb      	ldrb	r3, [r7, #14]
 800c522:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c526:	2b00      	cmp	r3, #0
 800c528:	d004      	beq.n	800c534 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c52a:	7bbb      	ldrb	r3, [r7, #14]
 800c52c:	4619      	mov	r1, r3
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 ffef 	bl	800d512 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 fc99 	bl	800ce6c <USBD_CtlSendStatus>
              }
              break;
 800c53a:	e004      	b.n	800c546 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800c53c:	6839      	ldr	r1, [r7, #0]
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 fbcb 	bl	800ccda <USBD_CtlError>
              break;
 800c544:	e000      	b.n	800c548 <USBD_StdEPReq+0x158>
              break;
 800c546:	bf00      	nop
          }
          break;
 800c548:	e0aa      	b.n	800c6a0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c550:	2b02      	cmp	r3, #2
 800c552:	d002      	beq.n	800c55a <USBD_StdEPReq+0x16a>
 800c554:	2b03      	cmp	r3, #3
 800c556:	d032      	beq.n	800c5be <USBD_StdEPReq+0x1ce>
 800c558:	e097      	b.n	800c68a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c55a:	7bbb      	ldrb	r3, [r7, #14]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d007      	beq.n	800c570 <USBD_StdEPReq+0x180>
 800c560:	7bbb      	ldrb	r3, [r7, #14]
 800c562:	2b80      	cmp	r3, #128	@ 0x80
 800c564:	d004      	beq.n	800c570 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800c566:	6839      	ldr	r1, [r7, #0]
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 fbb6 	bl	800ccda <USBD_CtlError>
                break;
 800c56e:	e091      	b.n	800c694 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c574:	2b00      	cmp	r3, #0
 800c576:	da0b      	bge.n	800c590 <USBD_StdEPReq+0x1a0>
 800c578:	7bbb      	ldrb	r3, [r7, #14]
 800c57a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c57e:	4613      	mov	r3, r2
 800c580:	009b      	lsls	r3, r3, #2
 800c582:	4413      	add	r3, r2
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	3310      	adds	r3, #16
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	4413      	add	r3, r2
 800c58c:	3304      	adds	r3, #4
 800c58e:	e00b      	b.n	800c5a8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c590:	7bbb      	ldrb	r3, [r7, #14]
 800c592:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c596:	4613      	mov	r3, r2
 800c598:	009b      	lsls	r3, r3, #2
 800c59a:	4413      	add	r3, r2
 800c59c:	009b      	lsls	r3, r3, #2
 800c59e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	4413      	add	r3, r2
 800c5a6:	3304      	adds	r3, #4
 800c5a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	2202      	movs	r2, #2
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f000 fbfa 	bl	800cdb0 <USBD_CtlSendData>
              break;
 800c5bc:	e06a      	b.n	800c694 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c5be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	da11      	bge.n	800c5ea <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c5c6:	7bbb      	ldrb	r3, [r7, #14]
 800c5c8:	f003 020f 	and.w	r2, r3, #15
 800c5cc:	6879      	ldr	r1, [r7, #4]
 800c5ce:	4613      	mov	r3, r2
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	4413      	add	r3, r2
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	440b      	add	r3, r1
 800c5d8:	3318      	adds	r3, #24
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d117      	bne.n	800c610 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c5e0:	6839      	ldr	r1, [r7, #0]
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f000 fb79 	bl	800ccda <USBD_CtlError>
                  break;
 800c5e8:	e054      	b.n	800c694 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c5ea:	7bbb      	ldrb	r3, [r7, #14]
 800c5ec:	f003 020f 	and.w	r2, r3, #15
 800c5f0:	6879      	ldr	r1, [r7, #4]
 800c5f2:	4613      	mov	r3, r2
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	4413      	add	r3, r2
 800c5f8:	009b      	lsls	r3, r3, #2
 800c5fa:	440b      	add	r3, r1
 800c5fc:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d104      	bne.n	800c610 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c606:	6839      	ldr	r1, [r7, #0]
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 fb66 	bl	800ccda <USBD_CtlError>
                  break;
 800c60e:	e041      	b.n	800c694 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c610:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c614:	2b00      	cmp	r3, #0
 800c616:	da0b      	bge.n	800c630 <USBD_StdEPReq+0x240>
 800c618:	7bbb      	ldrb	r3, [r7, #14]
 800c61a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c61e:	4613      	mov	r3, r2
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	4413      	add	r3, r2
 800c624:	009b      	lsls	r3, r3, #2
 800c626:	3310      	adds	r3, #16
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	4413      	add	r3, r2
 800c62c:	3304      	adds	r3, #4
 800c62e:	e00b      	b.n	800c648 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c630:	7bbb      	ldrb	r3, [r7, #14]
 800c632:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c636:	4613      	mov	r3, r2
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	4413      	add	r3, r2
 800c63c:	009b      	lsls	r3, r3, #2
 800c63e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	4413      	add	r3, r2
 800c646:	3304      	adds	r3, #4
 800c648:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c64a:	7bbb      	ldrb	r3, [r7, #14]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d002      	beq.n	800c656 <USBD_StdEPReq+0x266>
 800c650:	7bbb      	ldrb	r3, [r7, #14]
 800c652:	2b80      	cmp	r3, #128	@ 0x80
 800c654:	d103      	bne.n	800c65e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	2200      	movs	r2, #0
 800c65a:	601a      	str	r2, [r3, #0]
 800c65c:	e00e      	b.n	800c67c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c65e:	7bbb      	ldrb	r3, [r7, #14]
 800c660:	4619      	mov	r1, r3
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f000 ff74 	bl	800d550 <USBD_LL_IsStallEP>
 800c668:	4603      	mov	r3, r0
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d003      	beq.n	800c676 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	2201      	movs	r2, #1
 800c672:	601a      	str	r2, [r3, #0]
 800c674:	e002      	b.n	800c67c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	2200      	movs	r2, #0
 800c67a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	2202      	movs	r2, #2
 800c680:	4619      	mov	r1, r3
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 fb94 	bl	800cdb0 <USBD_CtlSendData>
              break;
 800c688:	e004      	b.n	800c694 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800c68a:	6839      	ldr	r1, [r7, #0]
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 fb24 	bl	800ccda <USBD_CtlError>
              break;
 800c692:	bf00      	nop
          }
          break;
 800c694:	e004      	b.n	800c6a0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800c696:	6839      	ldr	r1, [r7, #0]
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f000 fb1e 	bl	800ccda <USBD_CtlError>
          break;
 800c69e:	bf00      	nop
      }
      break;
 800c6a0:	e004      	b.n	800c6ac <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800c6a2:	6839      	ldr	r1, [r7, #0]
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f000 fb18 	bl	800ccda <USBD_CtlError>
      break;
 800c6aa:	bf00      	nop
  }

  return ret;
 800c6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3710      	adds	r7, #16
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
	...

0800c6b8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b084      	sub	sp, #16
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	885b      	ldrh	r3, [r3, #2]
 800c6d2:	0a1b      	lsrs	r3, r3, #8
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	3b01      	subs	r3, #1
 800c6d8:	2b06      	cmp	r3, #6
 800c6da:	f200 8128 	bhi.w	800c92e <USBD_GetDescriptor+0x276>
 800c6de:	a201      	add	r2, pc, #4	@ (adr r2, 800c6e4 <USBD_GetDescriptor+0x2c>)
 800c6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e4:	0800c701 	.word	0x0800c701
 800c6e8:	0800c719 	.word	0x0800c719
 800c6ec:	0800c759 	.word	0x0800c759
 800c6f0:	0800c92f 	.word	0x0800c92f
 800c6f4:	0800c92f 	.word	0x0800c92f
 800c6f8:	0800c8cf 	.word	0x0800c8cf
 800c6fc:	0800c8fb 	.word	0x0800c8fb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	687a      	ldr	r2, [r7, #4]
 800c70a:	7c12      	ldrb	r2, [r2, #16]
 800c70c:	f107 0108 	add.w	r1, r7, #8
 800c710:	4610      	mov	r0, r2
 800c712:	4798      	blx	r3
 800c714:	60f8      	str	r0, [r7, #12]
      break;
 800c716:	e112      	b.n	800c93e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	7c1b      	ldrb	r3, [r3, #16]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d10d      	bne.n	800c73c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c728:	f107 0208 	add.w	r2, r7, #8
 800c72c:	4610      	mov	r0, r2
 800c72e:	4798      	blx	r3
 800c730:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	3301      	adds	r3, #1
 800c736:	2202      	movs	r2, #2
 800c738:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c73a:	e100      	b.n	800c93e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c744:	f107 0208 	add.w	r2, r7, #8
 800c748:	4610      	mov	r0, r2
 800c74a:	4798      	blx	r3
 800c74c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	3301      	adds	r3, #1
 800c752:	2202      	movs	r2, #2
 800c754:	701a      	strb	r2, [r3, #0]
      break;
 800c756:	e0f2      	b.n	800c93e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	885b      	ldrh	r3, [r3, #2]
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	2b05      	cmp	r3, #5
 800c760:	f200 80ac 	bhi.w	800c8bc <USBD_GetDescriptor+0x204>
 800c764:	a201      	add	r2, pc, #4	@ (adr r2, 800c76c <USBD_GetDescriptor+0xb4>)
 800c766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c76a:	bf00      	nop
 800c76c:	0800c785 	.word	0x0800c785
 800c770:	0800c7b9 	.word	0x0800c7b9
 800c774:	0800c7ed 	.word	0x0800c7ed
 800c778:	0800c821 	.word	0x0800c821
 800c77c:	0800c855 	.word	0x0800c855
 800c780:	0800c889 	.word	0x0800c889
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c78a:	685b      	ldr	r3, [r3, #4]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d00b      	beq.n	800c7a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	7c12      	ldrb	r2, [r2, #16]
 800c79c:	f107 0108 	add.w	r1, r7, #8
 800c7a0:	4610      	mov	r0, r2
 800c7a2:	4798      	blx	r3
 800c7a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7a6:	e091      	b.n	800c8cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c7a8:	6839      	ldr	r1, [r7, #0]
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 fa95 	bl	800ccda <USBD_CtlError>
            err++;
 800c7b0:	7afb      	ldrb	r3, [r7, #11]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	72fb      	strb	r3, [r7, #11]
          break;
 800c7b6:	e089      	b.n	800c8cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c7be:	689b      	ldr	r3, [r3, #8]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d00b      	beq.n	800c7dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c7ca:	689b      	ldr	r3, [r3, #8]
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	7c12      	ldrb	r2, [r2, #16]
 800c7d0:	f107 0108 	add.w	r1, r7, #8
 800c7d4:	4610      	mov	r0, r2
 800c7d6:	4798      	blx	r3
 800c7d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7da:	e077      	b.n	800c8cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c7dc:	6839      	ldr	r1, [r7, #0]
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 fa7b 	bl	800ccda <USBD_CtlError>
            err++;
 800c7e4:	7afb      	ldrb	r3, [r7, #11]
 800c7e6:	3301      	adds	r3, #1
 800c7e8:	72fb      	strb	r3, [r7, #11]
          break;
 800c7ea:	e06f      	b.n	800c8cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c7f2:	68db      	ldr	r3, [r3, #12]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d00b      	beq.n	800c810 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c7fe:	68db      	ldr	r3, [r3, #12]
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	7c12      	ldrb	r2, [r2, #16]
 800c804:	f107 0108 	add.w	r1, r7, #8
 800c808:	4610      	mov	r0, r2
 800c80a:	4798      	blx	r3
 800c80c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c80e:	e05d      	b.n	800c8cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c810:	6839      	ldr	r1, [r7, #0]
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 fa61 	bl	800ccda <USBD_CtlError>
            err++;
 800c818:	7afb      	ldrb	r3, [r7, #11]
 800c81a:	3301      	adds	r3, #1
 800c81c:	72fb      	strb	r3, [r7, #11]
          break;
 800c81e:	e055      	b.n	800c8cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c826:	691b      	ldr	r3, [r3, #16]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d00b      	beq.n	800c844 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c832:	691b      	ldr	r3, [r3, #16]
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	7c12      	ldrb	r2, [r2, #16]
 800c838:	f107 0108 	add.w	r1, r7, #8
 800c83c:	4610      	mov	r0, r2
 800c83e:	4798      	blx	r3
 800c840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c842:	e043      	b.n	800c8cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c844:	6839      	ldr	r1, [r7, #0]
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 fa47 	bl	800ccda <USBD_CtlError>
            err++;
 800c84c:	7afb      	ldrb	r3, [r7, #11]
 800c84e:	3301      	adds	r3, #1
 800c850:	72fb      	strb	r3, [r7, #11]
          break;
 800c852:	e03b      	b.n	800c8cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c85a:	695b      	ldr	r3, [r3, #20]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d00b      	beq.n	800c878 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c866:	695b      	ldr	r3, [r3, #20]
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	7c12      	ldrb	r2, [r2, #16]
 800c86c:	f107 0108 	add.w	r1, r7, #8
 800c870:	4610      	mov	r0, r2
 800c872:	4798      	blx	r3
 800c874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c876:	e029      	b.n	800c8cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c878:	6839      	ldr	r1, [r7, #0]
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 fa2d 	bl	800ccda <USBD_CtlError>
            err++;
 800c880:	7afb      	ldrb	r3, [r7, #11]
 800c882:	3301      	adds	r3, #1
 800c884:	72fb      	strb	r3, [r7, #11]
          break;
 800c886:	e021      	b.n	800c8cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c88e:	699b      	ldr	r3, [r3, #24]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d00b      	beq.n	800c8ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c89a:	699b      	ldr	r3, [r3, #24]
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	7c12      	ldrb	r2, [r2, #16]
 800c8a0:	f107 0108 	add.w	r1, r7, #8
 800c8a4:	4610      	mov	r0, r2
 800c8a6:	4798      	blx	r3
 800c8a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8aa:	e00f      	b.n	800c8cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c8ac:	6839      	ldr	r1, [r7, #0]
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 fa13 	bl	800ccda <USBD_CtlError>
            err++;
 800c8b4:	7afb      	ldrb	r3, [r7, #11]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	72fb      	strb	r3, [r7, #11]
          break;
 800c8ba:	e007      	b.n	800c8cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c8bc:	6839      	ldr	r1, [r7, #0]
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f000 fa0b 	bl	800ccda <USBD_CtlError>
          err++;
 800c8c4:	7afb      	ldrb	r3, [r7, #11]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c8ca:	e038      	b.n	800c93e <USBD_GetDescriptor+0x286>
 800c8cc:	e037      	b.n	800c93e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	7c1b      	ldrb	r3, [r3, #16]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d109      	bne.n	800c8ea <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8de:	f107 0208 	add.w	r2, r7, #8
 800c8e2:	4610      	mov	r0, r2
 800c8e4:	4798      	blx	r3
 800c8e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c8e8:	e029      	b.n	800c93e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c8ea:	6839      	ldr	r1, [r7, #0]
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f000 f9f4 	bl	800ccda <USBD_CtlError>
        err++;
 800c8f2:	7afb      	ldrb	r3, [r7, #11]
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	72fb      	strb	r3, [r7, #11]
      break;
 800c8f8:	e021      	b.n	800c93e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	7c1b      	ldrb	r3, [r3, #16]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d10d      	bne.n	800c91e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c90a:	f107 0208 	add.w	r2, r7, #8
 800c90e:	4610      	mov	r0, r2
 800c910:	4798      	blx	r3
 800c912:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	3301      	adds	r3, #1
 800c918:	2207      	movs	r2, #7
 800c91a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c91c:	e00f      	b.n	800c93e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c91e:	6839      	ldr	r1, [r7, #0]
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 f9da 	bl	800ccda <USBD_CtlError>
        err++;
 800c926:	7afb      	ldrb	r3, [r7, #11]
 800c928:	3301      	adds	r3, #1
 800c92a:	72fb      	strb	r3, [r7, #11]
      break;
 800c92c:	e007      	b.n	800c93e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c92e:	6839      	ldr	r1, [r7, #0]
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f000 f9d2 	bl	800ccda <USBD_CtlError>
      err++;
 800c936:	7afb      	ldrb	r3, [r7, #11]
 800c938:	3301      	adds	r3, #1
 800c93a:	72fb      	strb	r3, [r7, #11]
      break;
 800c93c:	bf00      	nop
  }

  if (err != 0U)
 800c93e:	7afb      	ldrb	r3, [r7, #11]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d11c      	bne.n	800c97e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c944:	893b      	ldrh	r3, [r7, #8]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d011      	beq.n	800c96e <USBD_GetDescriptor+0x2b6>
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	88db      	ldrh	r3, [r3, #6]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d00d      	beq.n	800c96e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	88da      	ldrh	r2, [r3, #6]
 800c956:	893b      	ldrh	r3, [r7, #8]
 800c958:	4293      	cmp	r3, r2
 800c95a:	bf28      	it	cs
 800c95c:	4613      	movcs	r3, r2
 800c95e:	b29b      	uxth	r3, r3
 800c960:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c962:	893b      	ldrh	r3, [r7, #8]
 800c964:	461a      	mov	r2, r3
 800c966:	68f9      	ldr	r1, [r7, #12]
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 fa21 	bl	800cdb0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	88db      	ldrh	r3, [r3, #6]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d104      	bne.n	800c980 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 fa78 	bl	800ce6c <USBD_CtlSendStatus>
 800c97c:	e000      	b.n	800c980 <USBD_GetDescriptor+0x2c8>
    return;
 800c97e:	bf00      	nop
    }
  }
}
 800c980:	3710      	adds	r7, #16
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
 800c986:	bf00      	nop

0800c988 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	889b      	ldrh	r3, [r3, #4]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d130      	bne.n	800c9fc <USBD_SetAddress+0x74>
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	88db      	ldrh	r3, [r3, #6]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d12c      	bne.n	800c9fc <USBD_SetAddress+0x74>
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	885b      	ldrh	r3, [r3, #2]
 800c9a6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c9a8:	d828      	bhi.n	800c9fc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	885b      	ldrh	r3, [r3, #2]
 800c9ae:	b2db      	uxtb	r3, r3
 800c9b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c9b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9bc:	2b03      	cmp	r3, #3
 800c9be:	d104      	bne.n	800c9ca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c9c0:	6839      	ldr	r1, [r7, #0]
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f000 f989 	bl	800ccda <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9c8:	e01d      	b.n	800ca06 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	7bfa      	ldrb	r2, [r7, #15]
 800c9ce:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c9d2:	7bfb      	ldrb	r3, [r7, #15]
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f000 fde6 	bl	800d5a8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f000 fa45 	bl	800ce6c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c9e2:	7bfb      	ldrb	r3, [r7, #15]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d004      	beq.n	800c9f2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2202      	movs	r2, #2
 800c9ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9f0:	e009      	b.n	800ca06 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9fa:	e004      	b.n	800ca06 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c9fc:	6839      	ldr	r1, [r7, #0]
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 f96b 	bl	800ccda <USBD_CtlError>
  }
}
 800ca04:	bf00      	nop
 800ca06:	bf00      	nop
 800ca08:	3710      	adds	r7, #16
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}
	...

0800ca10 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	885b      	ldrh	r3, [r3, #2]
 800ca1e:	b2da      	uxtb	r2, r3
 800ca20:	4b41      	ldr	r3, [pc, #260]	@ (800cb28 <USBD_SetConfig+0x118>)
 800ca22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ca24:	4b40      	ldr	r3, [pc, #256]	@ (800cb28 <USBD_SetConfig+0x118>)
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	d904      	bls.n	800ca36 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ca2c:	6839      	ldr	r1, [r7, #0]
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f000 f953 	bl	800ccda <USBD_CtlError>
 800ca34:	e075      	b.n	800cb22 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca3c:	2b02      	cmp	r3, #2
 800ca3e:	d002      	beq.n	800ca46 <USBD_SetConfig+0x36>
 800ca40:	2b03      	cmp	r3, #3
 800ca42:	d023      	beq.n	800ca8c <USBD_SetConfig+0x7c>
 800ca44:	e062      	b.n	800cb0c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ca46:	4b38      	ldr	r3, [pc, #224]	@ (800cb28 <USBD_SetConfig+0x118>)
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d01a      	beq.n	800ca84 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ca4e:	4b36      	ldr	r3, [pc, #216]	@ (800cb28 <USBD_SetConfig+0x118>)
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	461a      	mov	r2, r3
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2203      	movs	r2, #3
 800ca5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ca60:	4b31      	ldr	r3, [pc, #196]	@ (800cb28 <USBD_SetConfig+0x118>)
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	4619      	mov	r1, r3
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f7ff f9e5 	bl	800be36 <USBD_SetClassConfig>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	2b02      	cmp	r3, #2
 800ca70:	d104      	bne.n	800ca7c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ca72:	6839      	ldr	r1, [r7, #0]
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f000 f930 	bl	800ccda <USBD_CtlError>
            return;
 800ca7a:	e052      	b.n	800cb22 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 f9f5 	bl	800ce6c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ca82:	e04e      	b.n	800cb22 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 f9f1 	bl	800ce6c <USBD_CtlSendStatus>
        break;
 800ca8a:	e04a      	b.n	800cb22 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ca8c:	4b26      	ldr	r3, [pc, #152]	@ (800cb28 <USBD_SetConfig+0x118>)
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d112      	bne.n	800caba <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2202      	movs	r2, #2
 800ca98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800ca9c:	4b22      	ldr	r3, [pc, #136]	@ (800cb28 <USBD_SetConfig+0x118>)
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	461a      	mov	r2, r3
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800caa6:	4b20      	ldr	r3, [pc, #128]	@ (800cb28 <USBD_SetConfig+0x118>)
 800caa8:	781b      	ldrb	r3, [r3, #0]
 800caaa:	4619      	mov	r1, r3
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f7ff f9e1 	bl	800be74 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 f9da 	bl	800ce6c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800cab8:	e033      	b.n	800cb22 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800caba:	4b1b      	ldr	r3, [pc, #108]	@ (800cb28 <USBD_SetConfig+0x118>)
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	461a      	mov	r2, r3
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	685b      	ldr	r3, [r3, #4]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d01d      	beq.n	800cb04 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	b2db      	uxtb	r3, r3
 800cace:	4619      	mov	r1, r3
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f7ff f9cf 	bl	800be74 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800cad6:	4b14      	ldr	r3, [pc, #80]	@ (800cb28 <USBD_SetConfig+0x118>)
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	461a      	mov	r2, r3
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cae0:	4b11      	ldr	r3, [pc, #68]	@ (800cb28 <USBD_SetConfig+0x118>)
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	4619      	mov	r1, r3
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f7ff f9a5 	bl	800be36 <USBD_SetClassConfig>
 800caec:	4603      	mov	r3, r0
 800caee:	2b02      	cmp	r3, #2
 800caf0:	d104      	bne.n	800cafc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800caf2:	6839      	ldr	r1, [r7, #0]
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 f8f0 	bl	800ccda <USBD_CtlError>
            return;
 800cafa:	e012      	b.n	800cb22 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f000 f9b5 	bl	800ce6c <USBD_CtlSendStatus>
        break;
 800cb02:	e00e      	b.n	800cb22 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f000 f9b1 	bl	800ce6c <USBD_CtlSendStatus>
        break;
 800cb0a:	e00a      	b.n	800cb22 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800cb0c:	6839      	ldr	r1, [r7, #0]
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f000 f8e3 	bl	800ccda <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800cb14:	4b04      	ldr	r3, [pc, #16]	@ (800cb28 <USBD_SetConfig+0x118>)
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	4619      	mov	r1, r3
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f7ff f9aa 	bl	800be74 <USBD_ClrClassConfig>
        break;
 800cb20:	bf00      	nop
    }
  }
}
 800cb22:	3708      	adds	r7, #8
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}
 800cb28:	200007f0 	.word	0x200007f0

0800cb2c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b082      	sub	sp, #8
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	88db      	ldrh	r3, [r3, #6]
 800cb3a:	2b01      	cmp	r3, #1
 800cb3c:	d004      	beq.n	800cb48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cb3e:	6839      	ldr	r1, [r7, #0]
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f000 f8ca 	bl	800ccda <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cb46:	e022      	b.n	800cb8e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb4e:	2b02      	cmp	r3, #2
 800cb50:	dc02      	bgt.n	800cb58 <USBD_GetConfig+0x2c>
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	dc03      	bgt.n	800cb5e <USBD_GetConfig+0x32>
 800cb56:	e015      	b.n	800cb84 <USBD_GetConfig+0x58>
 800cb58:	2b03      	cmp	r3, #3
 800cb5a:	d00b      	beq.n	800cb74 <USBD_GetConfig+0x48>
 800cb5c:	e012      	b.n	800cb84 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2200      	movs	r2, #0
 800cb62:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	3308      	adds	r3, #8
 800cb68:	2201      	movs	r2, #1
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f000 f91f 	bl	800cdb0 <USBD_CtlSendData>
        break;
 800cb72:	e00c      	b.n	800cb8e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	3304      	adds	r3, #4
 800cb78:	2201      	movs	r2, #1
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f000 f917 	bl	800cdb0 <USBD_CtlSendData>
        break;
 800cb82:	e004      	b.n	800cb8e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800cb84:	6839      	ldr	r1, [r7, #0]
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f000 f8a7 	bl	800ccda <USBD_CtlError>
        break;
 800cb8c:	bf00      	nop
}
 800cb8e:	bf00      	nop
 800cb90:	3708      	adds	r7, #8
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}

0800cb96 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb96:	b580      	push	{r7, lr}
 800cb98:	b082      	sub	sp, #8
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	6078      	str	r0, [r7, #4]
 800cb9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cba6:	3b01      	subs	r3, #1
 800cba8:	2b02      	cmp	r3, #2
 800cbaa:	d81e      	bhi.n	800cbea <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	88db      	ldrh	r3, [r3, #6]
 800cbb0:	2b02      	cmp	r3, #2
 800cbb2:	d004      	beq.n	800cbbe <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800cbb4:	6839      	ldr	r1, [r7, #0]
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f000 f88f 	bl	800ccda <USBD_CtlError>
        break;
 800cbbc:	e01a      	b.n	800cbf4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2201      	movs	r2, #1
 800cbc2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d005      	beq.n	800cbda <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	68db      	ldr	r3, [r3, #12]
 800cbd2:	f043 0202 	orr.w	r2, r3, #2
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	330c      	adds	r3, #12
 800cbde:	2202      	movs	r2, #2
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f000 f8e4 	bl	800cdb0 <USBD_CtlSendData>
      break;
 800cbe8:	e004      	b.n	800cbf4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800cbea:	6839      	ldr	r1, [r7, #0]
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f000 f874 	bl	800ccda <USBD_CtlError>
      break;
 800cbf2:	bf00      	nop
  }
}
 800cbf4:	bf00      	nop
 800cbf6:	3708      	adds	r7, #8
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b082      	sub	sp, #8
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	885b      	ldrh	r3, [r3, #2]
 800cc0a:	2b01      	cmp	r3, #1
 800cc0c:	d106      	bne.n	800cc1c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2201      	movs	r2, #1
 800cc12:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 f928 	bl	800ce6c <USBD_CtlSendStatus>
  }
}
 800cc1c:	bf00      	nop
 800cc1e:	3708      	adds	r7, #8
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc34:	3b01      	subs	r3, #1
 800cc36:	2b02      	cmp	r3, #2
 800cc38:	d80b      	bhi.n	800cc52 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	885b      	ldrh	r3, [r3, #2]
 800cc3e:	2b01      	cmp	r3, #1
 800cc40:	d10c      	bne.n	800cc5c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2200      	movs	r2, #0
 800cc46:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f000 f90e 	bl	800ce6c <USBD_CtlSendStatus>
      }
      break;
 800cc50:	e004      	b.n	800cc5c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800cc52:	6839      	ldr	r1, [r7, #0]
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f000 f840 	bl	800ccda <USBD_CtlError>
      break;
 800cc5a:	e000      	b.n	800cc5e <USBD_ClrFeature+0x3a>
      break;
 800cc5c:	bf00      	nop
  }
}
 800cc5e:	bf00      	nop
 800cc60:	3708      	adds	r7, #8
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}

0800cc66 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cc66:	b480      	push	{r7}
 800cc68:	b083      	sub	sp, #12
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	6078      	str	r0, [r7, #4]
 800cc6e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	781a      	ldrb	r2, [r3, #0]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	785a      	ldrb	r2, [r3, #1]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	3302      	adds	r3, #2
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	461a      	mov	r2, r3
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	3303      	adds	r3, #3
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	021b      	lsls	r3, r3, #8
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	4413      	add	r3, r2
 800cc94:	b29a      	uxth	r2, r3
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	3304      	adds	r3, #4
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	461a      	mov	r2, r3
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	3305      	adds	r3, #5
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	021b      	lsls	r3, r3, #8
 800ccaa:	b29b      	uxth	r3, r3
 800ccac:	4413      	add	r3, r2
 800ccae:	b29a      	uxth	r2, r3
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	3306      	adds	r3, #6
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	461a      	mov	r2, r3
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	3307      	adds	r3, #7
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	021b      	lsls	r3, r3, #8
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	4413      	add	r3, r2
 800ccc8:	b29a      	uxth	r2, r3
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	80da      	strh	r2, [r3, #6]

}
 800ccce:	bf00      	nop
 800ccd0:	370c      	adds	r7, #12
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr

0800ccda <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ccda:	b580      	push	{r7, lr}
 800ccdc:	b082      	sub	sp, #8
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	6078      	str	r0, [r7, #4]
 800cce2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800cce4:	2180      	movs	r1, #128	@ 0x80
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f000 fbf4 	bl	800d4d4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ccec:	2100      	movs	r1, #0
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 fbf0 	bl	800d4d4 <USBD_LL_StallEP>
}
 800ccf4:	bf00      	nop
 800ccf6:	3708      	adds	r7, #8
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b086      	sub	sp, #24
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d032      	beq.n	800cd78 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800cd12:	68f8      	ldr	r0, [r7, #12]
 800cd14:	f000 f834 	bl	800cd80 <USBD_GetLen>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	005b      	lsls	r3, r3, #1
 800cd20:	b29a      	uxth	r2, r3
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800cd26:	7dfb      	ldrb	r3, [r7, #23]
 800cd28:	1c5a      	adds	r2, r3, #1
 800cd2a:	75fa      	strb	r2, [r7, #23]
 800cd2c:	461a      	mov	r2, r3
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	4413      	add	r3, r2
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	7812      	ldrb	r2, [r2, #0]
 800cd36:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800cd38:	7dfb      	ldrb	r3, [r7, #23]
 800cd3a:	1c5a      	adds	r2, r3, #1
 800cd3c:	75fa      	strb	r2, [r7, #23]
 800cd3e:	461a      	mov	r2, r3
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	4413      	add	r3, r2
 800cd44:	2203      	movs	r2, #3
 800cd46:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800cd48:	e012      	b.n	800cd70 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	1c5a      	adds	r2, r3, #1
 800cd4e:	60fa      	str	r2, [r7, #12]
 800cd50:	7dfa      	ldrb	r2, [r7, #23]
 800cd52:	1c51      	adds	r1, r2, #1
 800cd54:	75f9      	strb	r1, [r7, #23]
 800cd56:	4611      	mov	r1, r2
 800cd58:	68ba      	ldr	r2, [r7, #8]
 800cd5a:	440a      	add	r2, r1
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800cd60:	7dfb      	ldrb	r3, [r7, #23]
 800cd62:	1c5a      	adds	r2, r3, #1
 800cd64:	75fa      	strb	r2, [r7, #23]
 800cd66:	461a      	mov	r2, r3
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	4413      	add	r3, r2
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d1e8      	bne.n	800cd4a <USBD_GetString+0x4e>
    }
  }
}
 800cd78:	bf00      	nop
 800cd7a:	3718      	adds	r7, #24
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cd80:	b480      	push	{r7}
 800cd82:	b085      	sub	sp, #20
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800cd8c:	e005      	b.n	800cd9a <USBD_GetLen+0x1a>
  {
    len++;
 800cd8e:	7bfb      	ldrb	r3, [r7, #15]
 800cd90:	3301      	adds	r3, #1
 800cd92:	73fb      	strb	r3, [r7, #15]
    buf++;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	3301      	adds	r3, #1
 800cd98:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d1f5      	bne.n	800cd8e <USBD_GetLen+0xe>
  }

  return len;
 800cda2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3714      	adds	r7, #20
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr

0800cdb0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	60f8      	str	r0, [r7, #12]
 800cdb8:	60b9      	str	r1, [r7, #8]
 800cdba:	4613      	mov	r3, r2
 800cdbc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2202      	movs	r2, #2
 800cdc2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cdc6:	88fa      	ldrh	r2, [r7, #6]
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800cdcc:	88fa      	ldrh	r2, [r7, #6]
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cdd2:	88fb      	ldrh	r3, [r7, #6]
 800cdd4:	68ba      	ldr	r2, [r7, #8]
 800cdd6:	2100      	movs	r1, #0
 800cdd8:	68f8      	ldr	r0, [r7, #12]
 800cdda:	f000 fc04 	bl	800d5e6 <USBD_LL_Transmit>

  return USBD_OK;
 800cdde:	2300      	movs	r3, #0
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3710      	adds	r7, #16
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b084      	sub	sp, #16
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	60f8      	str	r0, [r7, #12]
 800cdf0:	60b9      	str	r1, [r7, #8]
 800cdf2:	4613      	mov	r3, r2
 800cdf4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cdf6:	88fb      	ldrh	r3, [r7, #6]
 800cdf8:	68ba      	ldr	r2, [r7, #8]
 800cdfa:	2100      	movs	r1, #0
 800cdfc:	68f8      	ldr	r0, [r7, #12]
 800cdfe:	f000 fbf2 	bl	800d5e6 <USBD_LL_Transmit>

  return USBD_OK;
 800ce02:	2300      	movs	r3, #0
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3710      	adds	r7, #16
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b084      	sub	sp, #16
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	60f8      	str	r0, [r7, #12]
 800ce14:	60b9      	str	r1, [r7, #8]
 800ce16:	4613      	mov	r3, r2
 800ce18:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2203      	movs	r2, #3
 800ce1e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ce22:	88fa      	ldrh	r2, [r7, #6]
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800ce2a:	88fa      	ldrh	r2, [r7, #6]
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ce32:	88fb      	ldrh	r3, [r7, #6]
 800ce34:	68ba      	ldr	r2, [r7, #8]
 800ce36:	2100      	movs	r1, #0
 800ce38:	68f8      	ldr	r0, [r7, #12]
 800ce3a:	f000 fbf7 	bl	800d62c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce3e:	2300      	movs	r3, #0
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3710      	adds	r7, #16
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b084      	sub	sp, #16
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	4613      	mov	r3, r2
 800ce54:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ce56:	88fb      	ldrh	r3, [r7, #6]
 800ce58:	68ba      	ldr	r2, [r7, #8]
 800ce5a:	2100      	movs	r1, #0
 800ce5c:	68f8      	ldr	r0, [r7, #12]
 800ce5e:	f000 fbe5 	bl	800d62c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce62:	2300      	movs	r3, #0
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3710      	adds	r7, #16
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b082      	sub	sp, #8
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2204      	movs	r2, #4
 800ce78:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	2200      	movs	r2, #0
 800ce80:	2100      	movs	r1, #0
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f000 fbaf 	bl	800d5e6 <USBD_LL_Transmit>

  return USBD_OK;
 800ce88:	2300      	movs	r3, #0
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3708      	adds	r7, #8
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}

0800ce92 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ce92:	b580      	push	{r7, lr}
 800ce94:	b082      	sub	sp, #8
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2205      	movs	r2, #5
 800ce9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cea2:	2300      	movs	r3, #0
 800cea4:	2200      	movs	r2, #0
 800cea6:	2100      	movs	r1, #0
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f000 fbbf 	bl	800d62c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ceae:	2300      	movs	r3, #0
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3708      	adds	r7, #8
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cebc:	2200      	movs	r2, #0
 800cebe:	4912      	ldr	r1, [pc, #72]	@ (800cf08 <MX_USB_DEVICE_Init+0x50>)
 800cec0:	4812      	ldr	r0, [pc, #72]	@ (800cf0c <MX_USB_DEVICE_Init+0x54>)
 800cec2:	f7fe ff5c 	bl	800bd7e <USBD_Init>
 800cec6:	4603      	mov	r3, r0
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d001      	beq.n	800ced0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cecc:	f7f5 f936 	bl	800213c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800ced0:	490f      	ldr	r1, [pc, #60]	@ (800cf10 <MX_USB_DEVICE_Init+0x58>)
 800ced2:	480e      	ldr	r0, [pc, #56]	@ (800cf0c <MX_USB_DEVICE_Init+0x54>)
 800ced4:	f7fe ff7e 	bl	800bdd4 <USBD_RegisterClass>
 800ced8:	4603      	mov	r3, r0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d001      	beq.n	800cee2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cede:	f7f5 f92d 	bl	800213c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800cee2:	490c      	ldr	r1, [pc, #48]	@ (800cf14 <MX_USB_DEVICE_Init+0x5c>)
 800cee4:	4809      	ldr	r0, [pc, #36]	@ (800cf0c <MX_USB_DEVICE_Init+0x54>)
 800cee6:	f7fe ff33 	bl	800bd50 <USBD_CUSTOM_HID_RegisterInterface>
 800ceea:	4603      	mov	r3, r0
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d001      	beq.n	800cef4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cef0:	f7f5 f924 	bl	800213c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cef4:	4805      	ldr	r0, [pc, #20]	@ (800cf0c <MX_USB_DEVICE_Init+0x54>)
 800cef6:	f7fe ff87 	bl	800be08 <USBD_Start>
 800cefa:	4603      	mov	r3, r0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d001      	beq.n	800cf04 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cf00:	f7f5 f91c 	bl	800213c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cf04:	bf00      	nop
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	2000011c 	.word	0x2000011c
 800cf0c:	200007f4 	.word	0x200007f4
 800cf10:	20000014 	.word	0x20000014
 800cf14:	2000010c 	.word	0x2000010c

0800cf18 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cf1c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	46bd      	mov	sp, r7
 800cf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf26:	4770      	bx	lr

0800cf28 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800cf2c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	46bd      	mov	sp, r7
 800cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf36:	4770      	bx	lr

0800cf38 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t *state)
{
 800cf38:	b4f0      	push	{r4, r5, r6, r7}
 800cf3a:	b082      	sub	sp, #8
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */

	memcpy(report_buffer, state, 64);
 800cf40:	4a0e      	ldr	r2, [pc, #56]	@ (800cf7c <CUSTOM_HID_OutEvent_FS+0x44>)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	4610      	mov	r0, r2
 800cf46:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	f8d1 c000 	ldr.w	ip, [r1]
 800cf52:	684e      	ldr	r6, [r1, #4]
 800cf54:	688d      	ldr	r5, [r1, #8]
 800cf56:	68c9      	ldr	r1, [r1, #12]
 800cf58:	f8c2 c000 	str.w	ip, [r2]
 800cf5c:	6056      	str	r6, [r2, #4]
 800cf5e:	6095      	str	r5, [r2, #8]
 800cf60:	60d1      	str	r1, [r2, #12]
 800cf62:	3310      	adds	r3, #16
 800cf64:	3010      	adds	r0, #16
 800cf66:	42a3      	cmp	r3, r4
 800cf68:	d1ef      	bne.n	800cf4a <CUSTOM_HID_OutEvent_FS+0x12>

	flag_rx = 1;
 800cf6a:	4b05      	ldr	r3, [pc, #20]	@ (800cf80 <CUSTOM_HID_OutEvent_FS+0x48>)
 800cf6c:	2201      	movs	r2, #1
 800cf6e:	701a      	strb	r2, [r3, #0]

	return (USBD_OK);
 800cf70:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3708      	adds	r7, #8
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bcf0      	pop	{r4, r5, r6, r7}
 800cf7a:	4770      	bx	lr
 800cf7c:	20000738 	.word	0x20000738
 800cf80:	20000779 	.word	0x20000779

0800cf84 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b083      	sub	sp, #12
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	6039      	str	r1, [r7, #0]
 800cf8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	2212      	movs	r2, #18
 800cf94:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cf96:	4b03      	ldr	r3, [pc, #12]	@ (800cfa4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	370c      	adds	r7, #12
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr
 800cfa4:	20000138 	.word	0x20000138

0800cfa8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b083      	sub	sp, #12
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	4603      	mov	r3, r0
 800cfb0:	6039      	str	r1, [r7, #0]
 800cfb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	2204      	movs	r2, #4
 800cfb8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cfba:	4b03      	ldr	r3, [pc, #12]	@ (800cfc8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	370c      	adds	r7, #12
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr
 800cfc8:	2000014c 	.word	0x2000014c

0800cfcc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b082      	sub	sp, #8
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	6039      	str	r1, [r7, #0]
 800cfd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cfd8:	79fb      	ldrb	r3, [r7, #7]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d105      	bne.n	800cfea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cfde:	683a      	ldr	r2, [r7, #0]
 800cfe0:	4907      	ldr	r1, [pc, #28]	@ (800d000 <USBD_FS_ProductStrDescriptor+0x34>)
 800cfe2:	4808      	ldr	r0, [pc, #32]	@ (800d004 <USBD_FS_ProductStrDescriptor+0x38>)
 800cfe4:	f7ff fe8a 	bl	800ccfc <USBD_GetString>
 800cfe8:	e004      	b.n	800cff4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cfea:	683a      	ldr	r2, [r7, #0]
 800cfec:	4904      	ldr	r1, [pc, #16]	@ (800d000 <USBD_FS_ProductStrDescriptor+0x34>)
 800cfee:	4805      	ldr	r0, [pc, #20]	@ (800d004 <USBD_FS_ProductStrDescriptor+0x38>)
 800cff0:	f7ff fe84 	bl	800ccfc <USBD_GetString>
  }
  return USBD_StrDesc;
 800cff4:	4b02      	ldr	r3, [pc, #8]	@ (800d000 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3708      	adds	r7, #8
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
 800cffe:	bf00      	nop
 800d000:	20000ab8 	.word	0x20000ab8
 800d004:	08010b74 	.word	0x08010b74

0800d008 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b082      	sub	sp, #8
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	4603      	mov	r3, r0
 800d010:	6039      	str	r1, [r7, #0]
 800d012:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d014:	683a      	ldr	r2, [r7, #0]
 800d016:	4904      	ldr	r1, [pc, #16]	@ (800d028 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d018:	4804      	ldr	r0, [pc, #16]	@ (800d02c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d01a:	f7ff fe6f 	bl	800ccfc <USBD_GetString>
  return USBD_StrDesc;
 800d01e:	4b02      	ldr	r3, [pc, #8]	@ (800d028 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d020:	4618      	mov	r0, r3
 800d022:	3708      	adds	r7, #8
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}
 800d028:	20000ab8 	.word	0x20000ab8
 800d02c:	08010b94 	.word	0x08010b94

0800d030 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
 800d036:	4603      	mov	r3, r0
 800d038:	6039      	str	r1, [r7, #0]
 800d03a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	221a      	movs	r2, #26
 800d040:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d042:	f000 f843 	bl	800d0cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d046:	4b02      	ldr	r3, [pc, #8]	@ (800d050 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3708      	adds	r7, #8
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}
 800d050:	20000150 	.word	0x20000150

0800d054 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af00      	add	r7, sp, #0
 800d05a:	4603      	mov	r3, r0
 800d05c:	6039      	str	r1, [r7, #0]
 800d05e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d060:	79fb      	ldrb	r3, [r7, #7]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d105      	bne.n	800d072 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d066:	683a      	ldr	r2, [r7, #0]
 800d068:	4907      	ldr	r1, [pc, #28]	@ (800d088 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d06a:	4808      	ldr	r0, [pc, #32]	@ (800d08c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d06c:	f7ff fe46 	bl	800ccfc <USBD_GetString>
 800d070:	e004      	b.n	800d07c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d072:	683a      	ldr	r2, [r7, #0]
 800d074:	4904      	ldr	r1, [pc, #16]	@ (800d088 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d076:	4805      	ldr	r0, [pc, #20]	@ (800d08c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d078:	f7ff fe40 	bl	800ccfc <USBD_GetString>
  }
  return USBD_StrDesc;
 800d07c:	4b02      	ldr	r3, [pc, #8]	@ (800d088 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3708      	adds	r7, #8
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	20000ab8 	.word	0x20000ab8
 800d08c:	08010ba8 	.word	0x08010ba8

0800d090 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
 800d096:	4603      	mov	r3, r0
 800d098:	6039      	str	r1, [r7, #0]
 800d09a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d09c:	79fb      	ldrb	r3, [r7, #7]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d105      	bne.n	800d0ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d0a2:	683a      	ldr	r2, [r7, #0]
 800d0a4:	4907      	ldr	r1, [pc, #28]	@ (800d0c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d0a6:	4808      	ldr	r0, [pc, #32]	@ (800d0c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d0a8:	f7ff fe28 	bl	800ccfc <USBD_GetString>
 800d0ac:	e004      	b.n	800d0b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d0ae:	683a      	ldr	r2, [r7, #0]
 800d0b0:	4904      	ldr	r1, [pc, #16]	@ (800d0c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d0b2:	4805      	ldr	r0, [pc, #20]	@ (800d0c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d0b4:	f7ff fe22 	bl	800ccfc <USBD_GetString>
  }
  return USBD_StrDesc;
 800d0b8:	4b02      	ldr	r3, [pc, #8]	@ (800d0c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3708      	adds	r7, #8
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	20000ab8 	.word	0x20000ab8
 800d0c8:	08010bbc 	.word	0x08010bbc

0800d0cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d0d2:	4b0f      	ldr	r3, [pc, #60]	@ (800d110 <Get_SerialNum+0x44>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d0d8:	4b0e      	ldr	r3, [pc, #56]	@ (800d114 <Get_SerialNum+0x48>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d0de:	4b0e      	ldr	r3, [pc, #56]	@ (800d118 <Get_SerialNum+0x4c>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d0e4:	68fa      	ldr	r2, [r7, #12]
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	4413      	add	r3, r2
 800d0ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d009      	beq.n	800d106 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d0f2:	2208      	movs	r2, #8
 800d0f4:	4909      	ldr	r1, [pc, #36]	@ (800d11c <Get_SerialNum+0x50>)
 800d0f6:	68f8      	ldr	r0, [r7, #12]
 800d0f8:	f000 f814 	bl	800d124 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d0fc:	2204      	movs	r2, #4
 800d0fe:	4908      	ldr	r1, [pc, #32]	@ (800d120 <Get_SerialNum+0x54>)
 800d100:	68b8      	ldr	r0, [r7, #8]
 800d102:	f000 f80f 	bl	800d124 <IntToUnicode>
  }
}
 800d106:	bf00      	nop
 800d108:	3710      	adds	r7, #16
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	1ffff7ac 	.word	0x1ffff7ac
 800d114:	1ffff7b0 	.word	0x1ffff7b0
 800d118:	1ffff7b4 	.word	0x1ffff7b4
 800d11c:	20000152 	.word	0x20000152
 800d120:	20000162 	.word	0x20000162

0800d124 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d124:	b480      	push	{r7}
 800d126:	b087      	sub	sp, #28
 800d128:	af00      	add	r7, sp, #0
 800d12a:	60f8      	str	r0, [r7, #12]
 800d12c:	60b9      	str	r1, [r7, #8]
 800d12e:	4613      	mov	r3, r2
 800d130:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d132:	2300      	movs	r3, #0
 800d134:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d136:	2300      	movs	r3, #0
 800d138:	75fb      	strb	r3, [r7, #23]
 800d13a:	e027      	b.n	800d18c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	0f1b      	lsrs	r3, r3, #28
 800d140:	2b09      	cmp	r3, #9
 800d142:	d80b      	bhi.n	800d15c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	0f1b      	lsrs	r3, r3, #28
 800d148:	b2da      	uxtb	r2, r3
 800d14a:	7dfb      	ldrb	r3, [r7, #23]
 800d14c:	005b      	lsls	r3, r3, #1
 800d14e:	4619      	mov	r1, r3
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	440b      	add	r3, r1
 800d154:	3230      	adds	r2, #48	@ 0x30
 800d156:	b2d2      	uxtb	r2, r2
 800d158:	701a      	strb	r2, [r3, #0]
 800d15a:	e00a      	b.n	800d172 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	0f1b      	lsrs	r3, r3, #28
 800d160:	b2da      	uxtb	r2, r3
 800d162:	7dfb      	ldrb	r3, [r7, #23]
 800d164:	005b      	lsls	r3, r3, #1
 800d166:	4619      	mov	r1, r3
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	440b      	add	r3, r1
 800d16c:	3237      	adds	r2, #55	@ 0x37
 800d16e:	b2d2      	uxtb	r2, r2
 800d170:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	011b      	lsls	r3, r3, #4
 800d176:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d178:	7dfb      	ldrb	r3, [r7, #23]
 800d17a:	005b      	lsls	r3, r3, #1
 800d17c:	3301      	adds	r3, #1
 800d17e:	68ba      	ldr	r2, [r7, #8]
 800d180:	4413      	add	r3, r2
 800d182:	2200      	movs	r2, #0
 800d184:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d186:	7dfb      	ldrb	r3, [r7, #23]
 800d188:	3301      	adds	r3, #1
 800d18a:	75fb      	strb	r3, [r7, #23]
 800d18c:	7dfa      	ldrb	r2, [r7, #23]
 800d18e:	79fb      	ldrb	r3, [r7, #7]
 800d190:	429a      	cmp	r2, r3
 800d192:	d3d3      	bcc.n	800d13c <IntToUnicode+0x18>
  }
}
 800d194:	bf00      	nop
 800d196:	bf00      	nop
 800d198:	371c      	adds	r7, #28
 800d19a:	46bd      	mov	sp, r7
 800d19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a0:	4770      	bx	lr
	...

0800d1a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b08a      	sub	sp, #40	@ 0x28
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d1ac:	f107 0314 	add.w	r3, r7, #20
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	601a      	str	r2, [r3, #0]
 800d1b4:	605a      	str	r2, [r3, #4]
 800d1b6:	609a      	str	r2, [r3, #8]
 800d1b8:	60da      	str	r2, [r3, #12]
 800d1ba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4a1c      	ldr	r2, [pc, #112]	@ (800d234 <HAL_PCD_MspInit+0x90>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d131      	bne.n	800d22a <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d1c6:	4b1c      	ldr	r3, [pc, #112]	@ (800d238 <HAL_PCD_MspInit+0x94>)
 800d1c8:	695b      	ldr	r3, [r3, #20]
 800d1ca:	4a1b      	ldr	r2, [pc, #108]	@ (800d238 <HAL_PCD_MspInit+0x94>)
 800d1cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d1d0:	6153      	str	r3, [r2, #20]
 800d1d2:	4b19      	ldr	r3, [pc, #100]	@ (800d238 <HAL_PCD_MspInit+0x94>)
 800d1d4:	695b      	ldr	r3, [r3, #20]
 800d1d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d1da:	613b      	str	r3, [r7, #16]
 800d1dc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800d1de:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d1e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1e4:	2302      	movs	r3, #2
 800d1e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d1ec:	2303      	movs	r3, #3
 800d1ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800d1f0:	230e      	movs	r3, #14
 800d1f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d1f4:	f107 0314 	add.w	r3, r7, #20
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d1fe:	f7f6 f805 	bl	800320c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d202:	4b0d      	ldr	r3, [pc, #52]	@ (800d238 <HAL_PCD_MspInit+0x94>)
 800d204:	69db      	ldr	r3, [r3, #28]
 800d206:	4a0c      	ldr	r2, [pc, #48]	@ (800d238 <HAL_PCD_MspInit+0x94>)
 800d208:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d20c:	61d3      	str	r3, [r2, #28]
 800d20e:	4b0a      	ldr	r3, [pc, #40]	@ (800d238 <HAL_PCD_MspInit+0x94>)
 800d210:	69db      	ldr	r3, [r3, #28]
 800d212:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d216:	60fb      	str	r3, [r7, #12]
 800d218:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800d21a:	2200      	movs	r2, #0
 800d21c:	2100      	movs	r1, #0
 800d21e:	2014      	movs	r0, #20
 800d220:	f7f5 ffbd 	bl	800319e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800d224:	2014      	movs	r0, #20
 800d226:	f7f5 ffd6 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d22a:	bf00      	nop
 800d22c:	3728      	adds	r7, #40	@ 0x28
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	40005c00 	.word	0x40005c00
 800d238:	40021000 	.word	0x40021000

0800d23c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800d250:	4619      	mov	r1, r3
 800d252:	4610      	mov	r0, r2
 800d254:	f7fe fe21 	bl	800be9a <USBD_LL_SetupStage>
}
 800d258:	bf00      	nop
 800d25a:	3708      	adds	r7, #8
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}

0800d260 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b082      	sub	sp, #8
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	460b      	mov	r3, r1
 800d26a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800d272:	78fa      	ldrb	r2, [r7, #3]
 800d274:	6879      	ldr	r1, [r7, #4]
 800d276:	4613      	mov	r3, r2
 800d278:	009b      	lsls	r3, r3, #2
 800d27a:	4413      	add	r3, r2
 800d27c:	00db      	lsls	r3, r3, #3
 800d27e:	440b      	add	r3, r1
 800d280:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d284:	681a      	ldr	r2, [r3, #0]
 800d286:	78fb      	ldrb	r3, [r7, #3]
 800d288:	4619      	mov	r1, r3
 800d28a:	f7fe fe53 	bl	800bf34 <USBD_LL_DataOutStage>
}
 800d28e:	bf00      	nop
 800d290:	3708      	adds	r7, #8
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}

0800d296 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d296:	b580      	push	{r7, lr}
 800d298:	b082      	sub	sp, #8
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	6078      	str	r0, [r7, #4]
 800d29e:	460b      	mov	r3, r1
 800d2a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800d2a8:	78fa      	ldrb	r2, [r7, #3]
 800d2aa:	6879      	ldr	r1, [r7, #4]
 800d2ac:	4613      	mov	r3, r2
 800d2ae:	009b      	lsls	r3, r3, #2
 800d2b0:	4413      	add	r3, r2
 800d2b2:	00db      	lsls	r3, r3, #3
 800d2b4:	440b      	add	r3, r1
 800d2b6:	3324      	adds	r3, #36	@ 0x24
 800d2b8:	681a      	ldr	r2, [r3, #0]
 800d2ba:	78fb      	ldrb	r3, [r7, #3]
 800d2bc:	4619      	mov	r1, r3
 800d2be:	f7fe feaa 	bl	800c016 <USBD_LL_DataInStage>
}
 800d2c2:	bf00      	nop
 800d2c4:	3708      	adds	r7, #8
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}

0800d2ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2ca:	b580      	push	{r7, lr}
 800d2cc:	b082      	sub	sp, #8
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f7fe ffbd 	bl	800c258 <USBD_LL_SOF>
}
 800d2de:	bf00      	nop
 800d2e0:	3708      	adds	r7, #8
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}

0800d2e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2e6:	b580      	push	{r7, lr}
 800d2e8:	b084      	sub	sp, #16
 800d2ea:	af00      	add	r7, sp, #0
 800d2ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	795b      	ldrb	r3, [r3, #5]
 800d2f6:	2b02      	cmp	r3, #2
 800d2f8:	d001      	beq.n	800d2fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d2fa:	f7f4 ff1f 	bl	800213c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800d304:	7bfa      	ldrb	r2, [r7, #15]
 800d306:	4611      	mov	r1, r2
 800d308:	4618      	mov	r0, r3
 800d30a:	f7fe ff6a 	bl	800c1e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800d314:	4618      	mov	r0, r3
 800d316:	f7fe ff23 	bl	800c160 <USBD_LL_Reset>
}
 800d31a:	bf00      	nop
 800d31c:	3710      	adds	r7, #16
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
	...

0800d324 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800d332:	4618      	mov	r0, r3
 800d334:	f7fe ff65 	bl	800c202 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	7a5b      	ldrb	r3, [r3, #9]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d005      	beq.n	800d34c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d340:	4b04      	ldr	r3, [pc, #16]	@ (800d354 <HAL_PCD_SuspendCallback+0x30>)
 800d342:	691b      	ldr	r3, [r3, #16]
 800d344:	4a03      	ldr	r2, [pc, #12]	@ (800d354 <HAL_PCD_SuspendCallback+0x30>)
 800d346:	f043 0306 	orr.w	r3, r3, #6
 800d34a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d34c:	bf00      	nop
 800d34e:	3708      	adds	r7, #8
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}
 800d354:	e000ed00 	.word	0xe000ed00

0800d358 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800d366:	4618      	mov	r0, r3
 800d368:	f7fe ff60 	bl	800c22c <USBD_LL_Resume>
}
 800d36c:	bf00      	nop
 800d36e:	3708      	adds	r7, #8
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b082      	sub	sp, #8
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d37c:	4a23      	ldr	r2, [pc, #140]	@ (800d40c <USBD_LL_Init+0x98>)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	4a21      	ldr	r2, [pc, #132]	@ (800d40c <USBD_LL_Init+0x98>)
 800d388:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d38c:	4b1f      	ldr	r3, [pc, #124]	@ (800d40c <USBD_LL_Init+0x98>)
 800d38e:	4a20      	ldr	r2, [pc, #128]	@ (800d410 <USBD_LL_Init+0x9c>)
 800d390:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d392:	4b1e      	ldr	r3, [pc, #120]	@ (800d40c <USBD_LL_Init+0x98>)
 800d394:	2208      	movs	r2, #8
 800d396:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d398:	4b1c      	ldr	r3, [pc, #112]	@ (800d40c <USBD_LL_Init+0x98>)
 800d39a:	2202      	movs	r2, #2
 800d39c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d39e:	4b1b      	ldr	r3, [pc, #108]	@ (800d40c <USBD_LL_Init+0x98>)
 800d3a0:	2202      	movs	r2, #2
 800d3a2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d3a4:	4b19      	ldr	r3, [pc, #100]	@ (800d40c <USBD_LL_Init+0x98>)
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d3aa:	4b18      	ldr	r3, [pc, #96]	@ (800d40c <USBD_LL_Init+0x98>)
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d3b0:	4816      	ldr	r0, [pc, #88]	@ (800d40c <USBD_LL_Init+0x98>)
 800d3b2:	f7f6 febc 	bl	800412e <HAL_PCD_Init>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d001      	beq.n	800d3c0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d3bc:	f7f4 febe 	bl	800213c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d3c6:	2318      	movs	r3, #24
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	2100      	movs	r1, #0
 800d3cc:	f7f8 fb1d 	bl	8005a0a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d3d6:	2358      	movs	r3, #88	@ 0x58
 800d3d8:	2200      	movs	r2, #0
 800d3da:	2180      	movs	r1, #128	@ 0x80
 800d3dc:	f7f8 fb15 	bl	8005a0a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d3e6:	2398      	movs	r3, #152	@ 0x98
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	2181      	movs	r1, #129	@ 0x81
 800d3ec:	f7f8 fb0d 	bl	8005a0a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d3f6:	23d8      	movs	r3, #216	@ 0xd8
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	2101      	movs	r1, #1
 800d3fc:	f7f8 fb05 	bl	8005a0a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800d400:	2300      	movs	r3, #0
}
 800d402:	4618      	mov	r0, r3
 800d404:	3708      	adds	r7, #8
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	20000cb8 	.word	0x20000cb8
 800d410:	40005c00 	.word	0x40005c00

0800d414 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b084      	sub	sp, #16
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d41c:	2300      	movs	r3, #0
 800d41e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d420:	2300      	movs	r3, #0
 800d422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7f6 ff46 	bl	80042bc <HAL_PCD_Start>
 800d430:	4603      	mov	r3, r0
 800d432:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d434:	7bfb      	ldrb	r3, [r7, #15]
 800d436:	4618      	mov	r0, r3
 800d438:	f000 f940 	bl	800d6bc <USBD_Get_USB_Status>
 800d43c:	4603      	mov	r3, r0
 800d43e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d440:	7bbb      	ldrb	r3, [r7, #14]
}
 800d442:	4618      	mov	r0, r3
 800d444:	3710      	adds	r7, #16
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}

0800d44a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d44a:	b580      	push	{r7, lr}
 800d44c:	b084      	sub	sp, #16
 800d44e:	af00      	add	r7, sp, #0
 800d450:	6078      	str	r0, [r7, #4]
 800d452:	4608      	mov	r0, r1
 800d454:	4611      	mov	r1, r2
 800d456:	461a      	mov	r2, r3
 800d458:	4603      	mov	r3, r0
 800d45a:	70fb      	strb	r3, [r7, #3]
 800d45c:	460b      	mov	r3, r1
 800d45e:	70bb      	strb	r3, [r7, #2]
 800d460:	4613      	mov	r3, r2
 800d462:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d464:	2300      	movs	r3, #0
 800d466:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d468:	2300      	movs	r3, #0
 800d46a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d472:	78bb      	ldrb	r3, [r7, #2]
 800d474:	883a      	ldrh	r2, [r7, #0]
 800d476:	78f9      	ldrb	r1, [r7, #3]
 800d478:	f7f7 f83e 	bl	80044f8 <HAL_PCD_EP_Open>
 800d47c:	4603      	mov	r3, r0
 800d47e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d480:	7bfb      	ldrb	r3, [r7, #15]
 800d482:	4618      	mov	r0, r3
 800d484:	f000 f91a 	bl	800d6bc <USBD_Get_USB_Status>
 800d488:	4603      	mov	r3, r0
 800d48a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d48c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d48e:	4618      	mov	r0, r3
 800d490:	3710      	adds	r7, #16
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}

0800d496 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d496:	b580      	push	{r7, lr}
 800d498:	b084      	sub	sp, #16
 800d49a:	af00      	add	r7, sp, #0
 800d49c:	6078      	str	r0, [r7, #4]
 800d49e:	460b      	mov	r3, r1
 800d4a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d4b0:	78fa      	ldrb	r2, [r7, #3]
 800d4b2:	4611      	mov	r1, r2
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f7f7 f87c 	bl	80045b2 <HAL_PCD_EP_Close>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4be:	7bfb      	ldrb	r3, [r7, #15]
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f000 f8fb 	bl	800d6bc <USBD_Get_USB_Status>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3710      	adds	r7, #16
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	460b      	mov	r3, r1
 800d4de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d4ee:	78fa      	ldrb	r2, [r7, #3]
 800d4f0:	4611      	mov	r1, r2
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7f7 f90d 	bl	8004712 <HAL_PCD_EP_SetStall>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4fc:	7bfb      	ldrb	r3, [r7, #15]
 800d4fe:	4618      	mov	r0, r3
 800d500:	f000 f8dc 	bl	800d6bc <USBD_Get_USB_Status>
 800d504:	4603      	mov	r3, r0
 800d506:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d508:	7bbb      	ldrb	r3, [r7, #14]
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3710      	adds	r7, #16
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}

0800d512 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d512:	b580      	push	{r7, lr}
 800d514:	b084      	sub	sp, #16
 800d516:	af00      	add	r7, sp, #0
 800d518:	6078      	str	r0, [r7, #4]
 800d51a:	460b      	mov	r3, r1
 800d51c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d51e:	2300      	movs	r3, #0
 800d520:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d522:	2300      	movs	r3, #0
 800d524:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d52c:	78fa      	ldrb	r2, [r7, #3]
 800d52e:	4611      	mov	r1, r2
 800d530:	4618      	mov	r0, r3
 800d532:	f7f7 f940 	bl	80047b6 <HAL_PCD_EP_ClrStall>
 800d536:	4603      	mov	r3, r0
 800d538:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d53a:	7bfb      	ldrb	r3, [r7, #15]
 800d53c:	4618      	mov	r0, r3
 800d53e:	f000 f8bd 	bl	800d6bc <USBD_Get_USB_Status>
 800d542:	4603      	mov	r3, r0
 800d544:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d546:	7bbb      	ldrb	r3, [r7, #14]
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3710      	adds	r7, #16
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d550:	b480      	push	{r7}
 800d552:	b085      	sub	sp, #20
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	460b      	mov	r3, r1
 800d55a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d562:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d564:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	da0b      	bge.n	800d584 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d56c:	78fb      	ldrb	r3, [r7, #3]
 800d56e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d572:	68f9      	ldr	r1, [r7, #12]
 800d574:	4613      	mov	r3, r2
 800d576:	009b      	lsls	r3, r3, #2
 800d578:	4413      	add	r3, r2
 800d57a:	00db      	lsls	r3, r3, #3
 800d57c:	440b      	add	r3, r1
 800d57e:	3312      	adds	r3, #18
 800d580:	781b      	ldrb	r3, [r3, #0]
 800d582:	e00b      	b.n	800d59c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d584:	78fb      	ldrb	r3, [r7, #3]
 800d586:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d58a:	68f9      	ldr	r1, [r7, #12]
 800d58c:	4613      	mov	r3, r2
 800d58e:	009b      	lsls	r3, r3, #2
 800d590:	4413      	add	r3, r2
 800d592:	00db      	lsls	r3, r3, #3
 800d594:	440b      	add	r3, r1
 800d596:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800d59a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3714      	adds	r7, #20
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a6:	4770      	bx	lr

0800d5a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b084      	sub	sp, #16
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	460b      	mov	r3, r1
 800d5b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d5c2:	78fa      	ldrb	r2, [r7, #3]
 800d5c4:	4611      	mov	r1, r2
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7f6 ff72 	bl	80044b0 <HAL_PCD_SetAddress>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5d0:	7bfb      	ldrb	r3, [r7, #15]
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f000 f872 	bl	800d6bc <USBD_Get_USB_Status>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3710      	adds	r7, #16
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}

0800d5e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d5e6:	b580      	push	{r7, lr}
 800d5e8:	b086      	sub	sp, #24
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	60f8      	str	r0, [r7, #12]
 800d5ee:	607a      	str	r2, [r7, #4]
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	460b      	mov	r3, r1
 800d5f4:	72fb      	strb	r3, [r7, #11]
 800d5f6:	4613      	mov	r3, r2
 800d5f8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5fe:	2300      	movs	r3, #0
 800d600:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d608:	893b      	ldrh	r3, [r7, #8]
 800d60a:	7af9      	ldrb	r1, [r7, #11]
 800d60c:	687a      	ldr	r2, [r7, #4]
 800d60e:	f7f7 f849 	bl	80046a4 <HAL_PCD_EP_Transmit>
 800d612:	4603      	mov	r3, r0
 800d614:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d616:	7dfb      	ldrb	r3, [r7, #23]
 800d618:	4618      	mov	r0, r3
 800d61a:	f000 f84f 	bl	800d6bc <USBD_Get_USB_Status>
 800d61e:	4603      	mov	r3, r0
 800d620:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d622:	7dbb      	ldrb	r3, [r7, #22]
}
 800d624:	4618      	mov	r0, r3
 800d626:	3718      	adds	r7, #24
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b086      	sub	sp, #24
 800d630:	af00      	add	r7, sp, #0
 800d632:	60f8      	str	r0, [r7, #12]
 800d634:	607a      	str	r2, [r7, #4]
 800d636:	461a      	mov	r2, r3
 800d638:	460b      	mov	r3, r1
 800d63a:	72fb      	strb	r3, [r7, #11]
 800d63c:	4613      	mov	r3, r2
 800d63e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d640:	2300      	movs	r3, #0
 800d642:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d644:	2300      	movs	r3, #0
 800d646:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d64e:	893b      	ldrh	r3, [r7, #8]
 800d650:	7af9      	ldrb	r1, [r7, #11]
 800d652:	687a      	ldr	r2, [r7, #4]
 800d654:	f7f6 fff5 	bl	8004642 <HAL_PCD_EP_Receive>
 800d658:	4603      	mov	r3, r0
 800d65a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d65c:	7dfb      	ldrb	r3, [r7, #23]
 800d65e:	4618      	mov	r0, r3
 800d660:	f000 f82c 	bl	800d6bc <USBD_Get_USB_Status>
 800d664:	4603      	mov	r3, r0
 800d666:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d668:	7dbb      	ldrb	r3, [r7, #22]
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3718      	adds	r7, #24
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
	...

0800d674 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d674:	b480      	push	{r7}
 800d676:	b083      	sub	sp, #12
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800d67c:	4b03      	ldr	r3, [pc, #12]	@ (800d68c <USBD_static_malloc+0x18>)
}
 800d67e:	4618      	mov	r0, r3
 800d680:	370c      	adds	r7, #12
 800d682:	46bd      	mov	sp, r7
 800d684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d688:	4770      	bx	lr
 800d68a:	bf00      	nop
 800d68c:	20000f8c 	.word	0x20000f8c

0800d690 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d690:	b480      	push	{r7}
 800d692:	b083      	sub	sp, #12
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]

}
 800d698:	bf00      	nop
 800d69a:	370c      	adds	r7, #12
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr

0800d6a4 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b083      	sub	sp, #12
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d6b0:	bf00      	nop
 800d6b2:	370c      	adds	r7, #12
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr

0800d6bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d6bc:	b480      	push	{r7}
 800d6be:	b085      	sub	sp, #20
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d6ca:	79fb      	ldrb	r3, [r7, #7]
 800d6cc:	2b03      	cmp	r3, #3
 800d6ce:	d817      	bhi.n	800d700 <USBD_Get_USB_Status+0x44>
 800d6d0:	a201      	add	r2, pc, #4	@ (adr r2, 800d6d8 <USBD_Get_USB_Status+0x1c>)
 800d6d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6d6:	bf00      	nop
 800d6d8:	0800d6e9 	.word	0x0800d6e9
 800d6dc:	0800d6ef 	.word	0x0800d6ef
 800d6e0:	0800d6f5 	.word	0x0800d6f5
 800d6e4:	0800d6fb 	.word	0x0800d6fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	73fb      	strb	r3, [r7, #15]
    break;
 800d6ec:	e00b      	b.n	800d706 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d6ee:	2302      	movs	r3, #2
 800d6f0:	73fb      	strb	r3, [r7, #15]
    break;
 800d6f2:	e008      	b.n	800d706 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	73fb      	strb	r3, [r7, #15]
    break;
 800d6f8:	e005      	b.n	800d706 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d6fa:	2302      	movs	r3, #2
 800d6fc:	73fb      	strb	r3, [r7, #15]
    break;
 800d6fe:	e002      	b.n	800d706 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d700:	2302      	movs	r3, #2
 800d702:	73fb      	strb	r3, [r7, #15]
    break;
 800d704:	bf00      	nop
  }
  return usb_status;
 800d706:	7bfb      	ldrb	r3, [r7, #15]
}
 800d708:	4618      	mov	r0, r3
 800d70a:	3714      	adds	r7, #20
 800d70c:	46bd      	mov	sp, r7
 800d70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d712:	4770      	bx	lr

0800d714 <sinf>:
 800d714:	ee10 3a10 	vmov	r3, s0
 800d718:	b507      	push	{r0, r1, r2, lr}
 800d71a:	4a1f      	ldr	r2, [pc, #124]	@ (800d798 <sinf+0x84>)
 800d71c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d720:	4293      	cmp	r3, r2
 800d722:	d807      	bhi.n	800d734 <sinf+0x20>
 800d724:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800d79c <sinf+0x88>
 800d728:	2000      	movs	r0, #0
 800d72a:	b003      	add	sp, #12
 800d72c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d730:	f000 b88e 	b.w	800d850 <__kernel_sinf>
 800d734:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d738:	d304      	bcc.n	800d744 <sinf+0x30>
 800d73a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d73e:	b003      	add	sp, #12
 800d740:	f85d fb04 	ldr.w	pc, [sp], #4
 800d744:	4668      	mov	r0, sp
 800d746:	f000 f8cb 	bl	800d8e0 <__ieee754_rem_pio2f>
 800d74a:	f000 0003 	and.w	r0, r0, #3
 800d74e:	2801      	cmp	r0, #1
 800d750:	d00a      	beq.n	800d768 <sinf+0x54>
 800d752:	2802      	cmp	r0, #2
 800d754:	d00f      	beq.n	800d776 <sinf+0x62>
 800d756:	b9c0      	cbnz	r0, 800d78a <sinf+0x76>
 800d758:	eddd 0a01 	vldr	s1, [sp, #4]
 800d75c:	ed9d 0a00 	vldr	s0, [sp]
 800d760:	2001      	movs	r0, #1
 800d762:	f000 f875 	bl	800d850 <__kernel_sinf>
 800d766:	e7ea      	b.n	800d73e <sinf+0x2a>
 800d768:	eddd 0a01 	vldr	s1, [sp, #4]
 800d76c:	ed9d 0a00 	vldr	s0, [sp]
 800d770:	f000 f816 	bl	800d7a0 <__kernel_cosf>
 800d774:	e7e3      	b.n	800d73e <sinf+0x2a>
 800d776:	eddd 0a01 	vldr	s1, [sp, #4]
 800d77a:	ed9d 0a00 	vldr	s0, [sp]
 800d77e:	2001      	movs	r0, #1
 800d780:	f000 f866 	bl	800d850 <__kernel_sinf>
 800d784:	eeb1 0a40 	vneg.f32	s0, s0
 800d788:	e7d9      	b.n	800d73e <sinf+0x2a>
 800d78a:	eddd 0a01 	vldr	s1, [sp, #4]
 800d78e:	ed9d 0a00 	vldr	s0, [sp]
 800d792:	f000 f805 	bl	800d7a0 <__kernel_cosf>
 800d796:	e7f5      	b.n	800d784 <sinf+0x70>
 800d798:	3f490fd8 	.word	0x3f490fd8
 800d79c:	00000000 	.word	0x00000000

0800d7a0 <__kernel_cosf>:
 800d7a0:	ee10 3a10 	vmov	r3, s0
 800d7a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d7a8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800d7ac:	eef0 6a40 	vmov.f32	s13, s0
 800d7b0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d7b4:	d204      	bcs.n	800d7c0 <__kernel_cosf+0x20>
 800d7b6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800d7ba:	ee17 2a90 	vmov	r2, s15
 800d7be:	b342      	cbz	r2, 800d812 <__kernel_cosf+0x72>
 800d7c0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800d7c4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800d830 <__kernel_cosf+0x90>
 800d7c8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800d834 <__kernel_cosf+0x94>
 800d7cc:	4a1a      	ldr	r2, [pc, #104]	@ (800d838 <__kernel_cosf+0x98>)
 800d7ce:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d83c <__kernel_cosf+0x9c>
 800d7d8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d7dc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800d840 <__kernel_cosf+0xa0>
 800d7e0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d7e4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800d844 <__kernel_cosf+0xa4>
 800d7e8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d7ec:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800d848 <__kernel_cosf+0xa8>
 800d7f0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d7f4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800d7f8:	ee26 6a07 	vmul.f32	s12, s12, s14
 800d7fc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d800:	eee7 0a06 	vfma.f32	s1, s14, s12
 800d804:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d808:	d804      	bhi.n	800d814 <__kernel_cosf+0x74>
 800d80a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d80e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d812:	4770      	bx	lr
 800d814:	4a0d      	ldr	r2, [pc, #52]	@ (800d84c <__kernel_cosf+0xac>)
 800d816:	4293      	cmp	r3, r2
 800d818:	bf9a      	itte	ls
 800d81a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800d81e:	ee07 3a10 	vmovls	s14, r3
 800d822:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800d826:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d82a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d82e:	e7ec      	b.n	800d80a <__kernel_cosf+0x6a>
 800d830:	ad47d74e 	.word	0xad47d74e
 800d834:	310f74f6 	.word	0x310f74f6
 800d838:	3e999999 	.word	0x3e999999
 800d83c:	b493f27c 	.word	0xb493f27c
 800d840:	37d00d01 	.word	0x37d00d01
 800d844:	bab60b61 	.word	0xbab60b61
 800d848:	3d2aaaab 	.word	0x3d2aaaab
 800d84c:	3f480000 	.word	0x3f480000

0800d850 <__kernel_sinf>:
 800d850:	ee10 3a10 	vmov	r3, s0
 800d854:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d858:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800d85c:	d204      	bcs.n	800d868 <__kernel_sinf+0x18>
 800d85e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d862:	ee17 3a90 	vmov	r3, s15
 800d866:	b35b      	cbz	r3, 800d8c0 <__kernel_sinf+0x70>
 800d868:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d86c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800d8c4 <__kernel_sinf+0x74>
 800d870:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800d8c8 <__kernel_sinf+0x78>
 800d874:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d878:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800d8cc <__kernel_sinf+0x7c>
 800d87c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d880:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800d8d0 <__kernel_sinf+0x80>
 800d884:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d888:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800d8d4 <__kernel_sinf+0x84>
 800d88c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800d890:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d894:	b930      	cbnz	r0, 800d8a4 <__kernel_sinf+0x54>
 800d896:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800d8d8 <__kernel_sinf+0x88>
 800d89a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d89e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800d8a2:	4770      	bx	lr
 800d8a4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d8a8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800d8ac:	eee0 7a86 	vfma.f32	s15, s1, s12
 800d8b0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800d8b4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800d8dc <__kernel_sinf+0x8c>
 800d8b8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800d8bc:	ee30 0a60 	vsub.f32	s0, s0, s1
 800d8c0:	4770      	bx	lr
 800d8c2:	bf00      	nop
 800d8c4:	2f2ec9d3 	.word	0x2f2ec9d3
 800d8c8:	b2d72f34 	.word	0xb2d72f34
 800d8cc:	3638ef1b 	.word	0x3638ef1b
 800d8d0:	b9500d01 	.word	0xb9500d01
 800d8d4:	3c088889 	.word	0x3c088889
 800d8d8:	be2aaaab 	.word	0xbe2aaaab
 800d8dc:	3e2aaaab 	.word	0x3e2aaaab

0800d8e0 <__ieee754_rem_pio2f>:
 800d8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8e2:	ee10 6a10 	vmov	r6, s0
 800d8e6:	4b88      	ldr	r3, [pc, #544]	@ (800db08 <__ieee754_rem_pio2f+0x228>)
 800d8e8:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800d8ec:	429d      	cmp	r5, r3
 800d8ee:	b087      	sub	sp, #28
 800d8f0:	4604      	mov	r4, r0
 800d8f2:	d805      	bhi.n	800d900 <__ieee754_rem_pio2f+0x20>
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	ed80 0a00 	vstr	s0, [r0]
 800d8fa:	6043      	str	r3, [r0, #4]
 800d8fc:	2000      	movs	r0, #0
 800d8fe:	e022      	b.n	800d946 <__ieee754_rem_pio2f+0x66>
 800d900:	4b82      	ldr	r3, [pc, #520]	@ (800db0c <__ieee754_rem_pio2f+0x22c>)
 800d902:	429d      	cmp	r5, r3
 800d904:	d83a      	bhi.n	800d97c <__ieee754_rem_pio2f+0x9c>
 800d906:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d90a:	2e00      	cmp	r6, #0
 800d90c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800db10 <__ieee754_rem_pio2f+0x230>
 800d910:	4a80      	ldr	r2, [pc, #512]	@ (800db14 <__ieee754_rem_pio2f+0x234>)
 800d912:	f023 030f 	bic.w	r3, r3, #15
 800d916:	dd18      	ble.n	800d94a <__ieee754_rem_pio2f+0x6a>
 800d918:	4293      	cmp	r3, r2
 800d91a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800d91e:	bf09      	itett	eq
 800d920:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800db18 <__ieee754_rem_pio2f+0x238>
 800d924:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800db1c <__ieee754_rem_pio2f+0x23c>
 800d928:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800db20 <__ieee754_rem_pio2f+0x240>
 800d92c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800d930:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800d934:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d938:	ed80 7a00 	vstr	s14, [r0]
 800d93c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d940:	edc0 7a01 	vstr	s15, [r0, #4]
 800d944:	2001      	movs	r0, #1
 800d946:	b007      	add	sp, #28
 800d948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d94a:	4293      	cmp	r3, r2
 800d94c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800d950:	bf09      	itett	eq
 800d952:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800db18 <__ieee754_rem_pio2f+0x238>
 800d956:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800db1c <__ieee754_rem_pio2f+0x23c>
 800d95a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800db20 <__ieee754_rem_pio2f+0x240>
 800d95e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800d962:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d966:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d96a:	ed80 7a00 	vstr	s14, [r0]
 800d96e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d972:	edc0 7a01 	vstr	s15, [r0, #4]
 800d976:	f04f 30ff 	mov.w	r0, #4294967295
 800d97a:	e7e4      	b.n	800d946 <__ieee754_rem_pio2f+0x66>
 800d97c:	4b69      	ldr	r3, [pc, #420]	@ (800db24 <__ieee754_rem_pio2f+0x244>)
 800d97e:	429d      	cmp	r5, r3
 800d980:	d873      	bhi.n	800da6a <__ieee754_rem_pio2f+0x18a>
 800d982:	f000 f8dd 	bl	800db40 <fabsf>
 800d986:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800db28 <__ieee754_rem_pio2f+0x248>
 800d98a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d98e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d992:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d996:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d99a:	ee17 0a90 	vmov	r0, s15
 800d99e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800db10 <__ieee754_rem_pio2f+0x230>
 800d9a2:	eea7 0a67 	vfms.f32	s0, s14, s15
 800d9a6:	281f      	cmp	r0, #31
 800d9a8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800db1c <__ieee754_rem_pio2f+0x23c>
 800d9ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9b0:	eeb1 6a47 	vneg.f32	s12, s14
 800d9b4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d9b8:	ee16 1a90 	vmov	r1, s13
 800d9bc:	dc09      	bgt.n	800d9d2 <__ieee754_rem_pio2f+0xf2>
 800d9be:	4a5b      	ldr	r2, [pc, #364]	@ (800db2c <__ieee754_rem_pio2f+0x24c>)
 800d9c0:	1e47      	subs	r7, r0, #1
 800d9c2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d9c6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800d9ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d107      	bne.n	800d9e2 <__ieee754_rem_pio2f+0x102>
 800d9d2:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800d9d6:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800d9da:	2a08      	cmp	r2, #8
 800d9dc:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800d9e0:	dc14      	bgt.n	800da0c <__ieee754_rem_pio2f+0x12c>
 800d9e2:	6021      	str	r1, [r4, #0]
 800d9e4:	ed94 7a00 	vldr	s14, [r4]
 800d9e8:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d9ec:	2e00      	cmp	r6, #0
 800d9ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d9f2:	ed84 0a01 	vstr	s0, [r4, #4]
 800d9f6:	daa6      	bge.n	800d946 <__ieee754_rem_pio2f+0x66>
 800d9f8:	eeb1 7a47 	vneg.f32	s14, s14
 800d9fc:	eeb1 0a40 	vneg.f32	s0, s0
 800da00:	ed84 7a00 	vstr	s14, [r4]
 800da04:	ed84 0a01 	vstr	s0, [r4, #4]
 800da08:	4240      	negs	r0, r0
 800da0a:	e79c      	b.n	800d946 <__ieee754_rem_pio2f+0x66>
 800da0c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800db18 <__ieee754_rem_pio2f+0x238>
 800da10:	eef0 6a40 	vmov.f32	s13, s0
 800da14:	eee6 6a25 	vfma.f32	s13, s12, s11
 800da18:	ee70 7a66 	vsub.f32	s15, s0, s13
 800da1c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800da20:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800db20 <__ieee754_rem_pio2f+0x240>
 800da24:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800da28:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800da2c:	ee15 2a90 	vmov	r2, s11
 800da30:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800da34:	1a5b      	subs	r3, r3, r1
 800da36:	2b19      	cmp	r3, #25
 800da38:	dc04      	bgt.n	800da44 <__ieee754_rem_pio2f+0x164>
 800da3a:	edc4 5a00 	vstr	s11, [r4]
 800da3e:	eeb0 0a66 	vmov.f32	s0, s13
 800da42:	e7cf      	b.n	800d9e4 <__ieee754_rem_pio2f+0x104>
 800da44:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800db30 <__ieee754_rem_pio2f+0x250>
 800da48:	eeb0 0a66 	vmov.f32	s0, s13
 800da4c:	eea6 0a25 	vfma.f32	s0, s12, s11
 800da50:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800da54:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800db34 <__ieee754_rem_pio2f+0x254>
 800da58:	eee6 7a25 	vfma.f32	s15, s12, s11
 800da5c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800da60:	ee30 7a67 	vsub.f32	s14, s0, s15
 800da64:	ed84 7a00 	vstr	s14, [r4]
 800da68:	e7bc      	b.n	800d9e4 <__ieee754_rem_pio2f+0x104>
 800da6a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800da6e:	d306      	bcc.n	800da7e <__ieee754_rem_pio2f+0x19e>
 800da70:	ee70 7a40 	vsub.f32	s15, s0, s0
 800da74:	edc0 7a01 	vstr	s15, [r0, #4]
 800da78:	edc0 7a00 	vstr	s15, [r0]
 800da7c:	e73e      	b.n	800d8fc <__ieee754_rem_pio2f+0x1c>
 800da7e:	15ea      	asrs	r2, r5, #23
 800da80:	3a86      	subs	r2, #134	@ 0x86
 800da82:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800da86:	ee07 3a90 	vmov	s15, r3
 800da8a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800da8e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800db38 <__ieee754_rem_pio2f+0x258>
 800da92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800da96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da9a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800da9e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800daa2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800daa6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800daaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800daae:	ed8d 7a04 	vstr	s14, [sp, #16]
 800dab2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dab6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800daba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dabe:	edcd 7a05 	vstr	s15, [sp, #20]
 800dac2:	d11e      	bne.n	800db02 <__ieee754_rem_pio2f+0x222>
 800dac4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800dac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dacc:	bf0c      	ite	eq
 800dace:	2301      	moveq	r3, #1
 800dad0:	2302      	movne	r3, #2
 800dad2:	491a      	ldr	r1, [pc, #104]	@ (800db3c <__ieee754_rem_pio2f+0x25c>)
 800dad4:	9101      	str	r1, [sp, #4]
 800dad6:	2102      	movs	r1, #2
 800dad8:	9100      	str	r1, [sp, #0]
 800dada:	a803      	add	r0, sp, #12
 800dadc:	4621      	mov	r1, r4
 800dade:	f000 f837 	bl	800db50 <__kernel_rem_pio2f>
 800dae2:	2e00      	cmp	r6, #0
 800dae4:	f6bf af2f 	bge.w	800d946 <__ieee754_rem_pio2f+0x66>
 800dae8:	edd4 7a00 	vldr	s15, [r4]
 800daec:	eef1 7a67 	vneg.f32	s15, s15
 800daf0:	edc4 7a00 	vstr	s15, [r4]
 800daf4:	edd4 7a01 	vldr	s15, [r4, #4]
 800daf8:	eef1 7a67 	vneg.f32	s15, s15
 800dafc:	edc4 7a01 	vstr	s15, [r4, #4]
 800db00:	e782      	b.n	800da08 <__ieee754_rem_pio2f+0x128>
 800db02:	2303      	movs	r3, #3
 800db04:	e7e5      	b.n	800dad2 <__ieee754_rem_pio2f+0x1f2>
 800db06:	bf00      	nop
 800db08:	3f490fd8 	.word	0x3f490fd8
 800db0c:	4016cbe3 	.word	0x4016cbe3
 800db10:	3fc90f80 	.word	0x3fc90f80
 800db14:	3fc90fd0 	.word	0x3fc90fd0
 800db18:	37354400 	.word	0x37354400
 800db1c:	37354443 	.word	0x37354443
 800db20:	2e85a308 	.word	0x2e85a308
 800db24:	43490f80 	.word	0x43490f80
 800db28:	3f22f984 	.word	0x3f22f984
 800db2c:	08010c0c 	.word	0x08010c0c
 800db30:	2e85a300 	.word	0x2e85a300
 800db34:	248d3132 	.word	0x248d3132
 800db38:	43800000 	.word	0x43800000
 800db3c:	08010c8c 	.word	0x08010c8c

0800db40 <fabsf>:
 800db40:	ee10 3a10 	vmov	r3, s0
 800db44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800db48:	ee00 3a10 	vmov	s0, r3
 800db4c:	4770      	bx	lr
	...

0800db50 <__kernel_rem_pio2f>:
 800db50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db54:	ed2d 8b04 	vpush	{d8-d9}
 800db58:	b0d9      	sub	sp, #356	@ 0x164
 800db5a:	4690      	mov	r8, r2
 800db5c:	9001      	str	r0, [sp, #4]
 800db5e:	4ab9      	ldr	r2, [pc, #740]	@ (800de44 <__kernel_rem_pio2f+0x2f4>)
 800db60:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800db62:	f118 0f04 	cmn.w	r8, #4
 800db66:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800db6a:	460f      	mov	r7, r1
 800db6c:	f103 3bff 	add.w	fp, r3, #4294967295
 800db70:	db27      	blt.n	800dbc2 <__kernel_rem_pio2f+0x72>
 800db72:	f1b8 0203 	subs.w	r2, r8, #3
 800db76:	bf48      	it	mi
 800db78:	f108 0204 	addmi.w	r2, r8, #4
 800db7c:	10d2      	asrs	r2, r2, #3
 800db7e:	1c55      	adds	r5, r2, #1
 800db80:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800db82:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800de54 <__kernel_rem_pio2f+0x304>
 800db86:	00e8      	lsls	r0, r5, #3
 800db88:	eba2 060b 	sub.w	r6, r2, fp
 800db8c:	9002      	str	r0, [sp, #8]
 800db8e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800db92:	eb0a 0c0b 	add.w	ip, sl, fp
 800db96:	ac1c      	add	r4, sp, #112	@ 0x70
 800db98:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800db9c:	2000      	movs	r0, #0
 800db9e:	4560      	cmp	r0, ip
 800dba0:	dd11      	ble.n	800dbc6 <__kernel_rem_pio2f+0x76>
 800dba2:	a91c      	add	r1, sp, #112	@ 0x70
 800dba4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800dba8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800dbac:	f04f 0c00 	mov.w	ip, #0
 800dbb0:	45d4      	cmp	ip, sl
 800dbb2:	dc27      	bgt.n	800dc04 <__kernel_rem_pio2f+0xb4>
 800dbb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800dbb8:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800de54 <__kernel_rem_pio2f+0x304>
 800dbbc:	4606      	mov	r6, r0
 800dbbe:	2400      	movs	r4, #0
 800dbc0:	e016      	b.n	800dbf0 <__kernel_rem_pio2f+0xa0>
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	e7db      	b.n	800db7e <__kernel_rem_pio2f+0x2e>
 800dbc6:	42c6      	cmn	r6, r0
 800dbc8:	bf5d      	ittte	pl
 800dbca:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800dbce:	ee07 1a90 	vmovpl	s15, r1
 800dbd2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800dbd6:	eef0 7a47 	vmovmi.f32	s15, s14
 800dbda:	ece4 7a01 	vstmia	r4!, {s15}
 800dbde:	3001      	adds	r0, #1
 800dbe0:	e7dd      	b.n	800db9e <__kernel_rem_pio2f+0x4e>
 800dbe2:	ecfe 6a01 	vldmia	lr!, {s13}
 800dbe6:	ed96 7a00 	vldr	s14, [r6]
 800dbea:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dbee:	3401      	adds	r4, #1
 800dbf0:	455c      	cmp	r4, fp
 800dbf2:	f1a6 0604 	sub.w	r6, r6, #4
 800dbf6:	ddf4      	ble.n	800dbe2 <__kernel_rem_pio2f+0x92>
 800dbf8:	ece9 7a01 	vstmia	r9!, {s15}
 800dbfc:	f10c 0c01 	add.w	ip, ip, #1
 800dc00:	3004      	adds	r0, #4
 800dc02:	e7d5      	b.n	800dbb0 <__kernel_rem_pio2f+0x60>
 800dc04:	a908      	add	r1, sp, #32
 800dc06:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dc0a:	9104      	str	r1, [sp, #16]
 800dc0c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800dc0e:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800de50 <__kernel_rem_pio2f+0x300>
 800dc12:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800de4c <__kernel_rem_pio2f+0x2fc>
 800dc16:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800dc1a:	9203      	str	r2, [sp, #12]
 800dc1c:	4654      	mov	r4, sl
 800dc1e:	00a2      	lsls	r2, r4, #2
 800dc20:	9205      	str	r2, [sp, #20]
 800dc22:	aa58      	add	r2, sp, #352	@ 0x160
 800dc24:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800dc28:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800dc2c:	a944      	add	r1, sp, #272	@ 0x110
 800dc2e:	aa08      	add	r2, sp, #32
 800dc30:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800dc34:	4694      	mov	ip, r2
 800dc36:	4626      	mov	r6, r4
 800dc38:	2e00      	cmp	r6, #0
 800dc3a:	f1a0 0004 	sub.w	r0, r0, #4
 800dc3e:	dc4c      	bgt.n	800dcda <__kernel_rem_pio2f+0x18a>
 800dc40:	4628      	mov	r0, r5
 800dc42:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dc46:	f000 f9f5 	bl	800e034 <scalbnf>
 800dc4a:	eeb0 8a40 	vmov.f32	s16, s0
 800dc4e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800dc52:	ee28 0a00 	vmul.f32	s0, s16, s0
 800dc56:	f000 fa53 	bl	800e100 <floorf>
 800dc5a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800dc5e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800dc62:	2d00      	cmp	r5, #0
 800dc64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dc68:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800dc6c:	ee17 9a90 	vmov	r9, s15
 800dc70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc74:	ee38 8a67 	vsub.f32	s16, s16, s15
 800dc78:	dd41      	ble.n	800dcfe <__kernel_rem_pio2f+0x1ae>
 800dc7a:	f104 3cff 	add.w	ip, r4, #4294967295
 800dc7e:	a908      	add	r1, sp, #32
 800dc80:	f1c5 0e08 	rsb	lr, r5, #8
 800dc84:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800dc88:	fa46 f00e 	asr.w	r0, r6, lr
 800dc8c:	4481      	add	r9, r0
 800dc8e:	fa00 f00e 	lsl.w	r0, r0, lr
 800dc92:	1a36      	subs	r6, r6, r0
 800dc94:	f1c5 0007 	rsb	r0, r5, #7
 800dc98:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800dc9c:	4106      	asrs	r6, r0
 800dc9e:	2e00      	cmp	r6, #0
 800dca0:	dd3c      	ble.n	800dd1c <__kernel_rem_pio2f+0x1cc>
 800dca2:	f04f 0e00 	mov.w	lr, #0
 800dca6:	f109 0901 	add.w	r9, r9, #1
 800dcaa:	4670      	mov	r0, lr
 800dcac:	4574      	cmp	r4, lr
 800dcae:	dc68      	bgt.n	800dd82 <__kernel_rem_pio2f+0x232>
 800dcb0:	2d00      	cmp	r5, #0
 800dcb2:	dd03      	ble.n	800dcbc <__kernel_rem_pio2f+0x16c>
 800dcb4:	2d01      	cmp	r5, #1
 800dcb6:	d074      	beq.n	800dda2 <__kernel_rem_pio2f+0x252>
 800dcb8:	2d02      	cmp	r5, #2
 800dcba:	d07d      	beq.n	800ddb8 <__kernel_rem_pio2f+0x268>
 800dcbc:	2e02      	cmp	r6, #2
 800dcbe:	d12d      	bne.n	800dd1c <__kernel_rem_pio2f+0x1cc>
 800dcc0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800dcc4:	ee30 8a48 	vsub.f32	s16, s0, s16
 800dcc8:	b340      	cbz	r0, 800dd1c <__kernel_rem_pio2f+0x1cc>
 800dcca:	4628      	mov	r0, r5
 800dccc:	9306      	str	r3, [sp, #24]
 800dcce:	f000 f9b1 	bl	800e034 <scalbnf>
 800dcd2:	9b06      	ldr	r3, [sp, #24]
 800dcd4:	ee38 8a40 	vsub.f32	s16, s16, s0
 800dcd8:	e020      	b.n	800dd1c <__kernel_rem_pio2f+0x1cc>
 800dcda:	ee60 7a28 	vmul.f32	s15, s0, s17
 800dcde:	3e01      	subs	r6, #1
 800dce0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dce8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800dcec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800dcf0:	ecac 0a01 	vstmia	ip!, {s0}
 800dcf4:	ed90 0a00 	vldr	s0, [r0]
 800dcf8:	ee37 0a80 	vadd.f32	s0, s15, s0
 800dcfc:	e79c      	b.n	800dc38 <__kernel_rem_pio2f+0xe8>
 800dcfe:	d105      	bne.n	800dd0c <__kernel_rem_pio2f+0x1bc>
 800dd00:	1e60      	subs	r0, r4, #1
 800dd02:	a908      	add	r1, sp, #32
 800dd04:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800dd08:	11f6      	asrs	r6, r6, #7
 800dd0a:	e7c8      	b.n	800dc9e <__kernel_rem_pio2f+0x14e>
 800dd0c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800dd10:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800dd14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd18:	da31      	bge.n	800dd7e <__kernel_rem_pio2f+0x22e>
 800dd1a:	2600      	movs	r6, #0
 800dd1c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800dd20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd24:	f040 8098 	bne.w	800de58 <__kernel_rem_pio2f+0x308>
 800dd28:	1e60      	subs	r0, r4, #1
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	4550      	cmp	r0, sl
 800dd2e:	da4b      	bge.n	800ddc8 <__kernel_rem_pio2f+0x278>
 800dd30:	2a00      	cmp	r2, #0
 800dd32:	d065      	beq.n	800de00 <__kernel_rem_pio2f+0x2b0>
 800dd34:	3c01      	subs	r4, #1
 800dd36:	ab08      	add	r3, sp, #32
 800dd38:	3d08      	subs	r5, #8
 800dd3a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d0f8      	beq.n	800dd34 <__kernel_rem_pio2f+0x1e4>
 800dd42:	4628      	mov	r0, r5
 800dd44:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800dd48:	f000 f974 	bl	800e034 <scalbnf>
 800dd4c:	1c63      	adds	r3, r4, #1
 800dd4e:	aa44      	add	r2, sp, #272	@ 0x110
 800dd50:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800de50 <__kernel_rem_pio2f+0x300>
 800dd54:	0099      	lsls	r1, r3, #2
 800dd56:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800dd5a:	4623      	mov	r3, r4
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	f280 80a9 	bge.w	800deb4 <__kernel_rem_pio2f+0x364>
 800dd62:	4623      	mov	r3, r4
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	f2c0 80c7 	blt.w	800def8 <__kernel_rem_pio2f+0x3a8>
 800dd6a:	aa44      	add	r2, sp, #272	@ 0x110
 800dd6c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800dd70:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800de48 <__kernel_rem_pio2f+0x2f8>
 800dd74:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800de54 <__kernel_rem_pio2f+0x304>
 800dd78:	2000      	movs	r0, #0
 800dd7a:	1ae2      	subs	r2, r4, r3
 800dd7c:	e0b1      	b.n	800dee2 <__kernel_rem_pio2f+0x392>
 800dd7e:	2602      	movs	r6, #2
 800dd80:	e78f      	b.n	800dca2 <__kernel_rem_pio2f+0x152>
 800dd82:	f852 1b04 	ldr.w	r1, [r2], #4
 800dd86:	b948      	cbnz	r0, 800dd9c <__kernel_rem_pio2f+0x24c>
 800dd88:	b121      	cbz	r1, 800dd94 <__kernel_rem_pio2f+0x244>
 800dd8a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800dd8e:	f842 1c04 	str.w	r1, [r2, #-4]
 800dd92:	2101      	movs	r1, #1
 800dd94:	f10e 0e01 	add.w	lr, lr, #1
 800dd98:	4608      	mov	r0, r1
 800dd9a:	e787      	b.n	800dcac <__kernel_rem_pio2f+0x15c>
 800dd9c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800dda0:	e7f5      	b.n	800dd8e <__kernel_rem_pio2f+0x23e>
 800dda2:	f104 3cff 	add.w	ip, r4, #4294967295
 800dda6:	aa08      	add	r2, sp, #32
 800dda8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800ddac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ddb0:	a908      	add	r1, sp, #32
 800ddb2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800ddb6:	e781      	b.n	800dcbc <__kernel_rem_pio2f+0x16c>
 800ddb8:	f104 3cff 	add.w	ip, r4, #4294967295
 800ddbc:	aa08      	add	r2, sp, #32
 800ddbe:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800ddc2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800ddc6:	e7f3      	b.n	800ddb0 <__kernel_rem_pio2f+0x260>
 800ddc8:	a908      	add	r1, sp, #32
 800ddca:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800ddce:	3801      	subs	r0, #1
 800ddd0:	430a      	orrs	r2, r1
 800ddd2:	e7ab      	b.n	800dd2c <__kernel_rem_pio2f+0x1dc>
 800ddd4:	3201      	adds	r2, #1
 800ddd6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800ddda:	2e00      	cmp	r6, #0
 800dddc:	d0fa      	beq.n	800ddd4 <__kernel_rem_pio2f+0x284>
 800ddde:	9905      	ldr	r1, [sp, #20]
 800dde0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800dde4:	eb0d 0001 	add.w	r0, sp, r1
 800dde8:	18e6      	adds	r6, r4, r3
 800ddea:	a91c      	add	r1, sp, #112	@ 0x70
 800ddec:	f104 0c01 	add.w	ip, r4, #1
 800ddf0:	384c      	subs	r0, #76	@ 0x4c
 800ddf2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800ddf6:	4422      	add	r2, r4
 800ddf8:	4562      	cmp	r2, ip
 800ddfa:	da04      	bge.n	800de06 <__kernel_rem_pio2f+0x2b6>
 800ddfc:	4614      	mov	r4, r2
 800ddfe:	e70e      	b.n	800dc1e <__kernel_rem_pio2f+0xce>
 800de00:	9804      	ldr	r0, [sp, #16]
 800de02:	2201      	movs	r2, #1
 800de04:	e7e7      	b.n	800ddd6 <__kernel_rem_pio2f+0x286>
 800de06:	9903      	ldr	r1, [sp, #12]
 800de08:	f8dd e004 	ldr.w	lr, [sp, #4]
 800de0c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800de10:	9105      	str	r1, [sp, #20]
 800de12:	ee07 1a90 	vmov	s15, r1
 800de16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de1a:	2400      	movs	r4, #0
 800de1c:	ece6 7a01 	vstmia	r6!, {s15}
 800de20:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800de54 <__kernel_rem_pio2f+0x304>
 800de24:	46b1      	mov	r9, r6
 800de26:	455c      	cmp	r4, fp
 800de28:	dd04      	ble.n	800de34 <__kernel_rem_pio2f+0x2e4>
 800de2a:	ece0 7a01 	vstmia	r0!, {s15}
 800de2e:	f10c 0c01 	add.w	ip, ip, #1
 800de32:	e7e1      	b.n	800ddf8 <__kernel_rem_pio2f+0x2a8>
 800de34:	ecfe 6a01 	vldmia	lr!, {s13}
 800de38:	ed39 7a01 	vldmdb	r9!, {s14}
 800de3c:	3401      	adds	r4, #1
 800de3e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800de42:	e7f0      	b.n	800de26 <__kernel_rem_pio2f+0x2d6>
 800de44:	08010fd0 	.word	0x08010fd0
 800de48:	08010fa4 	.word	0x08010fa4
 800de4c:	43800000 	.word	0x43800000
 800de50:	3b800000 	.word	0x3b800000
 800de54:	00000000 	.word	0x00000000
 800de58:	9b02      	ldr	r3, [sp, #8]
 800de5a:	eeb0 0a48 	vmov.f32	s0, s16
 800de5e:	eba3 0008 	sub.w	r0, r3, r8
 800de62:	f000 f8e7 	bl	800e034 <scalbnf>
 800de66:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800de4c <__kernel_rem_pio2f+0x2fc>
 800de6a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800de6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de72:	db19      	blt.n	800dea8 <__kernel_rem_pio2f+0x358>
 800de74:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800de50 <__kernel_rem_pio2f+0x300>
 800de78:	ee60 7a27 	vmul.f32	s15, s0, s15
 800de7c:	aa08      	add	r2, sp, #32
 800de7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800de82:	3508      	adds	r5, #8
 800de84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de88:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800de8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800de90:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800de94:	ee10 3a10 	vmov	r3, s0
 800de98:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800de9c:	ee17 3a90 	vmov	r3, s15
 800dea0:	3401      	adds	r4, #1
 800dea2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800dea6:	e74c      	b.n	800dd42 <__kernel_rem_pio2f+0x1f2>
 800dea8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800deac:	aa08      	add	r2, sp, #32
 800deae:	ee10 3a10 	vmov	r3, s0
 800deb2:	e7f6      	b.n	800dea2 <__kernel_rem_pio2f+0x352>
 800deb4:	a808      	add	r0, sp, #32
 800deb6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800deba:	9001      	str	r0, [sp, #4]
 800debc:	ee07 0a90 	vmov	s15, r0
 800dec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dec4:	3b01      	subs	r3, #1
 800dec6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800deca:	ee20 0a07 	vmul.f32	s0, s0, s14
 800dece:	ed62 7a01 	vstmdb	r2!, {s15}
 800ded2:	e743      	b.n	800dd5c <__kernel_rem_pio2f+0x20c>
 800ded4:	ecfc 6a01 	vldmia	ip!, {s13}
 800ded8:	ecb5 7a01 	vldmia	r5!, {s14}
 800dedc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dee0:	3001      	adds	r0, #1
 800dee2:	4550      	cmp	r0, sl
 800dee4:	dc01      	bgt.n	800deea <__kernel_rem_pio2f+0x39a>
 800dee6:	4282      	cmp	r2, r0
 800dee8:	daf4      	bge.n	800ded4 <__kernel_rem_pio2f+0x384>
 800deea:	a858      	add	r0, sp, #352	@ 0x160
 800deec:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800def0:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800def4:	3b01      	subs	r3, #1
 800def6:	e735      	b.n	800dd64 <__kernel_rem_pio2f+0x214>
 800def8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800defa:	2b02      	cmp	r3, #2
 800defc:	dc09      	bgt.n	800df12 <__kernel_rem_pio2f+0x3c2>
 800defe:	2b00      	cmp	r3, #0
 800df00:	dc2b      	bgt.n	800df5a <__kernel_rem_pio2f+0x40a>
 800df02:	d044      	beq.n	800df8e <__kernel_rem_pio2f+0x43e>
 800df04:	f009 0007 	and.w	r0, r9, #7
 800df08:	b059      	add	sp, #356	@ 0x164
 800df0a:	ecbd 8b04 	vpop	{d8-d9}
 800df0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df12:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800df14:	2b03      	cmp	r3, #3
 800df16:	d1f5      	bne.n	800df04 <__kernel_rem_pio2f+0x3b4>
 800df18:	aa30      	add	r2, sp, #192	@ 0xc0
 800df1a:	1f0b      	subs	r3, r1, #4
 800df1c:	4413      	add	r3, r2
 800df1e:	461a      	mov	r2, r3
 800df20:	4620      	mov	r0, r4
 800df22:	2800      	cmp	r0, #0
 800df24:	f1a2 0204 	sub.w	r2, r2, #4
 800df28:	dc52      	bgt.n	800dfd0 <__kernel_rem_pio2f+0x480>
 800df2a:	4622      	mov	r2, r4
 800df2c:	2a01      	cmp	r2, #1
 800df2e:	f1a3 0304 	sub.w	r3, r3, #4
 800df32:	dc5d      	bgt.n	800dff0 <__kernel_rem_pio2f+0x4a0>
 800df34:	ab30      	add	r3, sp, #192	@ 0xc0
 800df36:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800de54 <__kernel_rem_pio2f+0x304>
 800df3a:	440b      	add	r3, r1
 800df3c:	2c01      	cmp	r4, #1
 800df3e:	dc67      	bgt.n	800e010 <__kernel_rem_pio2f+0x4c0>
 800df40:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800df44:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800df48:	2e00      	cmp	r6, #0
 800df4a:	d167      	bne.n	800e01c <__kernel_rem_pio2f+0x4cc>
 800df4c:	edc7 6a00 	vstr	s13, [r7]
 800df50:	ed87 7a01 	vstr	s14, [r7, #4]
 800df54:	edc7 7a02 	vstr	s15, [r7, #8]
 800df58:	e7d4      	b.n	800df04 <__kernel_rem_pio2f+0x3b4>
 800df5a:	ab30      	add	r3, sp, #192	@ 0xc0
 800df5c:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800de54 <__kernel_rem_pio2f+0x304>
 800df60:	440b      	add	r3, r1
 800df62:	4622      	mov	r2, r4
 800df64:	2a00      	cmp	r2, #0
 800df66:	da24      	bge.n	800dfb2 <__kernel_rem_pio2f+0x462>
 800df68:	b34e      	cbz	r6, 800dfbe <__kernel_rem_pio2f+0x46e>
 800df6a:	eef1 7a47 	vneg.f32	s15, s14
 800df6e:	edc7 7a00 	vstr	s15, [r7]
 800df72:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800df76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800df7a:	aa31      	add	r2, sp, #196	@ 0xc4
 800df7c:	2301      	movs	r3, #1
 800df7e:	429c      	cmp	r4, r3
 800df80:	da20      	bge.n	800dfc4 <__kernel_rem_pio2f+0x474>
 800df82:	b10e      	cbz	r6, 800df88 <__kernel_rem_pio2f+0x438>
 800df84:	eef1 7a67 	vneg.f32	s15, s15
 800df88:	edc7 7a01 	vstr	s15, [r7, #4]
 800df8c:	e7ba      	b.n	800df04 <__kernel_rem_pio2f+0x3b4>
 800df8e:	ab30      	add	r3, sp, #192	@ 0xc0
 800df90:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800de54 <__kernel_rem_pio2f+0x304>
 800df94:	440b      	add	r3, r1
 800df96:	2c00      	cmp	r4, #0
 800df98:	da05      	bge.n	800dfa6 <__kernel_rem_pio2f+0x456>
 800df9a:	b10e      	cbz	r6, 800dfa0 <__kernel_rem_pio2f+0x450>
 800df9c:	eef1 7a67 	vneg.f32	s15, s15
 800dfa0:	edc7 7a00 	vstr	s15, [r7]
 800dfa4:	e7ae      	b.n	800df04 <__kernel_rem_pio2f+0x3b4>
 800dfa6:	ed33 7a01 	vldmdb	r3!, {s14}
 800dfaa:	3c01      	subs	r4, #1
 800dfac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dfb0:	e7f1      	b.n	800df96 <__kernel_rem_pio2f+0x446>
 800dfb2:	ed73 7a01 	vldmdb	r3!, {s15}
 800dfb6:	3a01      	subs	r2, #1
 800dfb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dfbc:	e7d2      	b.n	800df64 <__kernel_rem_pio2f+0x414>
 800dfbe:	eef0 7a47 	vmov.f32	s15, s14
 800dfc2:	e7d4      	b.n	800df6e <__kernel_rem_pio2f+0x41e>
 800dfc4:	ecb2 7a01 	vldmia	r2!, {s14}
 800dfc8:	3301      	adds	r3, #1
 800dfca:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dfce:	e7d6      	b.n	800df7e <__kernel_rem_pio2f+0x42e>
 800dfd0:	edd2 7a00 	vldr	s15, [r2]
 800dfd4:	edd2 6a01 	vldr	s13, [r2, #4]
 800dfd8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800dfdc:	3801      	subs	r0, #1
 800dfde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dfe2:	ed82 7a00 	vstr	s14, [r2]
 800dfe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfea:	edc2 7a01 	vstr	s15, [r2, #4]
 800dfee:	e798      	b.n	800df22 <__kernel_rem_pio2f+0x3d2>
 800dff0:	edd3 7a00 	vldr	s15, [r3]
 800dff4:	edd3 6a01 	vldr	s13, [r3, #4]
 800dff8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800dffc:	3a01      	subs	r2, #1
 800dffe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e002:	ed83 7a00 	vstr	s14, [r3]
 800e006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e00a:	edc3 7a01 	vstr	s15, [r3, #4]
 800e00e:	e78d      	b.n	800df2c <__kernel_rem_pio2f+0x3dc>
 800e010:	ed33 7a01 	vldmdb	r3!, {s14}
 800e014:	3c01      	subs	r4, #1
 800e016:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e01a:	e78f      	b.n	800df3c <__kernel_rem_pio2f+0x3ec>
 800e01c:	eef1 6a66 	vneg.f32	s13, s13
 800e020:	eeb1 7a47 	vneg.f32	s14, s14
 800e024:	edc7 6a00 	vstr	s13, [r7]
 800e028:	ed87 7a01 	vstr	s14, [r7, #4]
 800e02c:	eef1 7a67 	vneg.f32	s15, s15
 800e030:	e790      	b.n	800df54 <__kernel_rem_pio2f+0x404>
 800e032:	bf00      	nop

0800e034 <scalbnf>:
 800e034:	ee10 3a10 	vmov	r3, s0
 800e038:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800e03c:	d02b      	beq.n	800e096 <scalbnf+0x62>
 800e03e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e042:	d302      	bcc.n	800e04a <scalbnf+0x16>
 800e044:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e048:	4770      	bx	lr
 800e04a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800e04e:	d123      	bne.n	800e098 <scalbnf+0x64>
 800e050:	4b24      	ldr	r3, [pc, #144]	@ (800e0e4 <scalbnf+0xb0>)
 800e052:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800e0e8 <scalbnf+0xb4>
 800e056:	4298      	cmp	r0, r3
 800e058:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e05c:	db17      	blt.n	800e08e <scalbnf+0x5a>
 800e05e:	ee10 3a10 	vmov	r3, s0
 800e062:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e066:	3a19      	subs	r2, #25
 800e068:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800e06c:	4288      	cmp	r0, r1
 800e06e:	dd15      	ble.n	800e09c <scalbnf+0x68>
 800e070:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800e0ec <scalbnf+0xb8>
 800e074:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800e0f0 <scalbnf+0xbc>
 800e078:	ee10 3a10 	vmov	r3, s0
 800e07c:	eeb0 7a67 	vmov.f32	s14, s15
 800e080:	2b00      	cmp	r3, #0
 800e082:	bfb8      	it	lt
 800e084:	eef0 7a66 	vmovlt.f32	s15, s13
 800e088:	ee27 0a87 	vmul.f32	s0, s15, s14
 800e08c:	4770      	bx	lr
 800e08e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800e0f4 <scalbnf+0xc0>
 800e092:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e096:	4770      	bx	lr
 800e098:	0dd2      	lsrs	r2, r2, #23
 800e09a:	e7e5      	b.n	800e068 <scalbnf+0x34>
 800e09c:	4410      	add	r0, r2
 800e09e:	28fe      	cmp	r0, #254	@ 0xfe
 800e0a0:	dce6      	bgt.n	800e070 <scalbnf+0x3c>
 800e0a2:	2800      	cmp	r0, #0
 800e0a4:	dd06      	ble.n	800e0b4 <scalbnf+0x80>
 800e0a6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e0aa:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e0ae:	ee00 3a10 	vmov	s0, r3
 800e0b2:	4770      	bx	lr
 800e0b4:	f110 0f16 	cmn.w	r0, #22
 800e0b8:	da09      	bge.n	800e0ce <scalbnf+0x9a>
 800e0ba:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800e0f4 <scalbnf+0xc0>
 800e0be:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800e0f8 <scalbnf+0xc4>
 800e0c2:	ee10 3a10 	vmov	r3, s0
 800e0c6:	eeb0 7a67 	vmov.f32	s14, s15
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	e7d9      	b.n	800e082 <scalbnf+0x4e>
 800e0ce:	3019      	adds	r0, #25
 800e0d0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e0d4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e0d8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800e0fc <scalbnf+0xc8>
 800e0dc:	ee07 3a90 	vmov	s15, r3
 800e0e0:	e7d7      	b.n	800e092 <scalbnf+0x5e>
 800e0e2:	bf00      	nop
 800e0e4:	ffff3cb0 	.word	0xffff3cb0
 800e0e8:	4c000000 	.word	0x4c000000
 800e0ec:	7149f2ca 	.word	0x7149f2ca
 800e0f0:	f149f2ca 	.word	0xf149f2ca
 800e0f4:	0da24260 	.word	0x0da24260
 800e0f8:	8da24260 	.word	0x8da24260
 800e0fc:	33000000 	.word	0x33000000

0800e100 <floorf>:
 800e100:	ee10 3a10 	vmov	r3, s0
 800e104:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e108:	3a7f      	subs	r2, #127	@ 0x7f
 800e10a:	2a16      	cmp	r2, #22
 800e10c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e110:	dc2b      	bgt.n	800e16a <floorf+0x6a>
 800e112:	2a00      	cmp	r2, #0
 800e114:	da12      	bge.n	800e13c <floorf+0x3c>
 800e116:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800e17c <floorf+0x7c>
 800e11a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e11e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e126:	dd06      	ble.n	800e136 <floorf+0x36>
 800e128:	2b00      	cmp	r3, #0
 800e12a:	da24      	bge.n	800e176 <floorf+0x76>
 800e12c:	2900      	cmp	r1, #0
 800e12e:	4b14      	ldr	r3, [pc, #80]	@ (800e180 <floorf+0x80>)
 800e130:	bf08      	it	eq
 800e132:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800e136:	ee00 3a10 	vmov	s0, r3
 800e13a:	4770      	bx	lr
 800e13c:	4911      	ldr	r1, [pc, #68]	@ (800e184 <floorf+0x84>)
 800e13e:	4111      	asrs	r1, r2
 800e140:	420b      	tst	r3, r1
 800e142:	d0fa      	beq.n	800e13a <floorf+0x3a>
 800e144:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800e17c <floorf+0x7c>
 800e148:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e14c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e154:	ddef      	ble.n	800e136 <floorf+0x36>
 800e156:	2b00      	cmp	r3, #0
 800e158:	bfbe      	ittt	lt
 800e15a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800e15e:	fa40 f202 	asrlt.w	r2, r0, r2
 800e162:	189b      	addlt	r3, r3, r2
 800e164:	ea23 0301 	bic.w	r3, r3, r1
 800e168:	e7e5      	b.n	800e136 <floorf+0x36>
 800e16a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e16e:	d3e4      	bcc.n	800e13a <floorf+0x3a>
 800e170:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e174:	4770      	bx	lr
 800e176:	2300      	movs	r3, #0
 800e178:	e7dd      	b.n	800e136 <floorf+0x36>
 800e17a:	bf00      	nop
 800e17c:	7149f2ca 	.word	0x7149f2ca
 800e180:	bf800000 	.word	0xbf800000
 800e184:	007fffff 	.word	0x007fffff

0800e188 <__cvt>:
 800e188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e18c:	ec57 6b10 	vmov	r6, r7, d0
 800e190:	2f00      	cmp	r7, #0
 800e192:	460c      	mov	r4, r1
 800e194:	4619      	mov	r1, r3
 800e196:	463b      	mov	r3, r7
 800e198:	bfbb      	ittet	lt
 800e19a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e19e:	461f      	movlt	r7, r3
 800e1a0:	2300      	movge	r3, #0
 800e1a2:	232d      	movlt	r3, #45	@ 0x2d
 800e1a4:	700b      	strb	r3, [r1, #0]
 800e1a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e1a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e1ac:	4691      	mov	r9, r2
 800e1ae:	f023 0820 	bic.w	r8, r3, #32
 800e1b2:	bfbc      	itt	lt
 800e1b4:	4632      	movlt	r2, r6
 800e1b6:	4616      	movlt	r6, r2
 800e1b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e1bc:	d005      	beq.n	800e1ca <__cvt+0x42>
 800e1be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e1c2:	d100      	bne.n	800e1c6 <__cvt+0x3e>
 800e1c4:	3401      	adds	r4, #1
 800e1c6:	2102      	movs	r1, #2
 800e1c8:	e000      	b.n	800e1cc <__cvt+0x44>
 800e1ca:	2103      	movs	r1, #3
 800e1cc:	ab03      	add	r3, sp, #12
 800e1ce:	9301      	str	r3, [sp, #4]
 800e1d0:	ab02      	add	r3, sp, #8
 800e1d2:	9300      	str	r3, [sp, #0]
 800e1d4:	ec47 6b10 	vmov	d0, r6, r7
 800e1d8:	4653      	mov	r3, sl
 800e1da:	4622      	mov	r2, r4
 800e1dc:	f000 ff3c 	bl	800f058 <_dtoa_r>
 800e1e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e1e4:	4605      	mov	r5, r0
 800e1e6:	d119      	bne.n	800e21c <__cvt+0x94>
 800e1e8:	f019 0f01 	tst.w	r9, #1
 800e1ec:	d00e      	beq.n	800e20c <__cvt+0x84>
 800e1ee:	eb00 0904 	add.w	r9, r0, r4
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	4630      	mov	r0, r6
 800e1f8:	4639      	mov	r1, r7
 800e1fa:	f7f2 fc65 	bl	8000ac8 <__aeabi_dcmpeq>
 800e1fe:	b108      	cbz	r0, 800e204 <__cvt+0x7c>
 800e200:	f8cd 900c 	str.w	r9, [sp, #12]
 800e204:	2230      	movs	r2, #48	@ 0x30
 800e206:	9b03      	ldr	r3, [sp, #12]
 800e208:	454b      	cmp	r3, r9
 800e20a:	d31e      	bcc.n	800e24a <__cvt+0xc2>
 800e20c:	9b03      	ldr	r3, [sp, #12]
 800e20e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e210:	1b5b      	subs	r3, r3, r5
 800e212:	4628      	mov	r0, r5
 800e214:	6013      	str	r3, [r2, #0]
 800e216:	b004      	add	sp, #16
 800e218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e21c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e220:	eb00 0904 	add.w	r9, r0, r4
 800e224:	d1e5      	bne.n	800e1f2 <__cvt+0x6a>
 800e226:	7803      	ldrb	r3, [r0, #0]
 800e228:	2b30      	cmp	r3, #48	@ 0x30
 800e22a:	d10a      	bne.n	800e242 <__cvt+0xba>
 800e22c:	2200      	movs	r2, #0
 800e22e:	2300      	movs	r3, #0
 800e230:	4630      	mov	r0, r6
 800e232:	4639      	mov	r1, r7
 800e234:	f7f2 fc48 	bl	8000ac8 <__aeabi_dcmpeq>
 800e238:	b918      	cbnz	r0, 800e242 <__cvt+0xba>
 800e23a:	f1c4 0401 	rsb	r4, r4, #1
 800e23e:	f8ca 4000 	str.w	r4, [sl]
 800e242:	f8da 3000 	ldr.w	r3, [sl]
 800e246:	4499      	add	r9, r3
 800e248:	e7d3      	b.n	800e1f2 <__cvt+0x6a>
 800e24a:	1c59      	adds	r1, r3, #1
 800e24c:	9103      	str	r1, [sp, #12]
 800e24e:	701a      	strb	r2, [r3, #0]
 800e250:	e7d9      	b.n	800e206 <__cvt+0x7e>

0800e252 <__exponent>:
 800e252:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e254:	2900      	cmp	r1, #0
 800e256:	bfba      	itte	lt
 800e258:	4249      	neglt	r1, r1
 800e25a:	232d      	movlt	r3, #45	@ 0x2d
 800e25c:	232b      	movge	r3, #43	@ 0x2b
 800e25e:	2909      	cmp	r1, #9
 800e260:	7002      	strb	r2, [r0, #0]
 800e262:	7043      	strb	r3, [r0, #1]
 800e264:	dd29      	ble.n	800e2ba <__exponent+0x68>
 800e266:	f10d 0307 	add.w	r3, sp, #7
 800e26a:	461d      	mov	r5, r3
 800e26c:	270a      	movs	r7, #10
 800e26e:	461a      	mov	r2, r3
 800e270:	fbb1 f6f7 	udiv	r6, r1, r7
 800e274:	fb07 1416 	mls	r4, r7, r6, r1
 800e278:	3430      	adds	r4, #48	@ 0x30
 800e27a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e27e:	460c      	mov	r4, r1
 800e280:	2c63      	cmp	r4, #99	@ 0x63
 800e282:	f103 33ff 	add.w	r3, r3, #4294967295
 800e286:	4631      	mov	r1, r6
 800e288:	dcf1      	bgt.n	800e26e <__exponent+0x1c>
 800e28a:	3130      	adds	r1, #48	@ 0x30
 800e28c:	1e94      	subs	r4, r2, #2
 800e28e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e292:	1c41      	adds	r1, r0, #1
 800e294:	4623      	mov	r3, r4
 800e296:	42ab      	cmp	r3, r5
 800e298:	d30a      	bcc.n	800e2b0 <__exponent+0x5e>
 800e29a:	f10d 0309 	add.w	r3, sp, #9
 800e29e:	1a9b      	subs	r3, r3, r2
 800e2a0:	42ac      	cmp	r4, r5
 800e2a2:	bf88      	it	hi
 800e2a4:	2300      	movhi	r3, #0
 800e2a6:	3302      	adds	r3, #2
 800e2a8:	4403      	add	r3, r0
 800e2aa:	1a18      	subs	r0, r3, r0
 800e2ac:	b003      	add	sp, #12
 800e2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e2b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e2b8:	e7ed      	b.n	800e296 <__exponent+0x44>
 800e2ba:	2330      	movs	r3, #48	@ 0x30
 800e2bc:	3130      	adds	r1, #48	@ 0x30
 800e2be:	7083      	strb	r3, [r0, #2]
 800e2c0:	70c1      	strb	r1, [r0, #3]
 800e2c2:	1d03      	adds	r3, r0, #4
 800e2c4:	e7f1      	b.n	800e2aa <__exponent+0x58>
	...

0800e2c8 <_printf_float>:
 800e2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2cc:	b08d      	sub	sp, #52	@ 0x34
 800e2ce:	460c      	mov	r4, r1
 800e2d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e2d4:	4616      	mov	r6, r2
 800e2d6:	461f      	mov	r7, r3
 800e2d8:	4605      	mov	r5, r0
 800e2da:	f000 fdad 	bl	800ee38 <_localeconv_r>
 800e2de:	6803      	ldr	r3, [r0, #0]
 800e2e0:	9304      	str	r3, [sp, #16]
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f7f1 ffc4 	bl	8000270 <strlen>
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800e2ec:	f8d8 3000 	ldr.w	r3, [r8]
 800e2f0:	9005      	str	r0, [sp, #20]
 800e2f2:	3307      	adds	r3, #7
 800e2f4:	f023 0307 	bic.w	r3, r3, #7
 800e2f8:	f103 0208 	add.w	r2, r3, #8
 800e2fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e300:	f8d4 b000 	ldr.w	fp, [r4]
 800e304:	f8c8 2000 	str.w	r2, [r8]
 800e308:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e30c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e310:	9307      	str	r3, [sp, #28]
 800e312:	f8cd 8018 	str.w	r8, [sp, #24]
 800e316:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e31a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e31e:	4b9c      	ldr	r3, [pc, #624]	@ (800e590 <_printf_float+0x2c8>)
 800e320:	f04f 32ff 	mov.w	r2, #4294967295
 800e324:	f7f2 fc02 	bl	8000b2c <__aeabi_dcmpun>
 800e328:	bb70      	cbnz	r0, 800e388 <_printf_float+0xc0>
 800e32a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e32e:	4b98      	ldr	r3, [pc, #608]	@ (800e590 <_printf_float+0x2c8>)
 800e330:	f04f 32ff 	mov.w	r2, #4294967295
 800e334:	f7f2 fbdc 	bl	8000af0 <__aeabi_dcmple>
 800e338:	bb30      	cbnz	r0, 800e388 <_printf_float+0xc0>
 800e33a:	2200      	movs	r2, #0
 800e33c:	2300      	movs	r3, #0
 800e33e:	4640      	mov	r0, r8
 800e340:	4649      	mov	r1, r9
 800e342:	f7f2 fbcb 	bl	8000adc <__aeabi_dcmplt>
 800e346:	b110      	cbz	r0, 800e34e <_printf_float+0x86>
 800e348:	232d      	movs	r3, #45	@ 0x2d
 800e34a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e34e:	4a91      	ldr	r2, [pc, #580]	@ (800e594 <_printf_float+0x2cc>)
 800e350:	4b91      	ldr	r3, [pc, #580]	@ (800e598 <_printf_float+0x2d0>)
 800e352:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e356:	bf94      	ite	ls
 800e358:	4690      	movls	r8, r2
 800e35a:	4698      	movhi	r8, r3
 800e35c:	2303      	movs	r3, #3
 800e35e:	6123      	str	r3, [r4, #16]
 800e360:	f02b 0304 	bic.w	r3, fp, #4
 800e364:	6023      	str	r3, [r4, #0]
 800e366:	f04f 0900 	mov.w	r9, #0
 800e36a:	9700      	str	r7, [sp, #0]
 800e36c:	4633      	mov	r3, r6
 800e36e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e370:	4621      	mov	r1, r4
 800e372:	4628      	mov	r0, r5
 800e374:	f000 f9d2 	bl	800e71c <_printf_common>
 800e378:	3001      	adds	r0, #1
 800e37a:	f040 808d 	bne.w	800e498 <_printf_float+0x1d0>
 800e37e:	f04f 30ff 	mov.w	r0, #4294967295
 800e382:	b00d      	add	sp, #52	@ 0x34
 800e384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e388:	4642      	mov	r2, r8
 800e38a:	464b      	mov	r3, r9
 800e38c:	4640      	mov	r0, r8
 800e38e:	4649      	mov	r1, r9
 800e390:	f7f2 fbcc 	bl	8000b2c <__aeabi_dcmpun>
 800e394:	b140      	cbz	r0, 800e3a8 <_printf_float+0xe0>
 800e396:	464b      	mov	r3, r9
 800e398:	2b00      	cmp	r3, #0
 800e39a:	bfbc      	itt	lt
 800e39c:	232d      	movlt	r3, #45	@ 0x2d
 800e39e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e3a2:	4a7e      	ldr	r2, [pc, #504]	@ (800e59c <_printf_float+0x2d4>)
 800e3a4:	4b7e      	ldr	r3, [pc, #504]	@ (800e5a0 <_printf_float+0x2d8>)
 800e3a6:	e7d4      	b.n	800e352 <_printf_float+0x8a>
 800e3a8:	6863      	ldr	r3, [r4, #4]
 800e3aa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e3ae:	9206      	str	r2, [sp, #24]
 800e3b0:	1c5a      	adds	r2, r3, #1
 800e3b2:	d13b      	bne.n	800e42c <_printf_float+0x164>
 800e3b4:	2306      	movs	r3, #6
 800e3b6:	6063      	str	r3, [r4, #4]
 800e3b8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e3bc:	2300      	movs	r3, #0
 800e3be:	6022      	str	r2, [r4, #0]
 800e3c0:	9303      	str	r3, [sp, #12]
 800e3c2:	ab0a      	add	r3, sp, #40	@ 0x28
 800e3c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e3c8:	ab09      	add	r3, sp, #36	@ 0x24
 800e3ca:	9300      	str	r3, [sp, #0]
 800e3cc:	6861      	ldr	r1, [r4, #4]
 800e3ce:	ec49 8b10 	vmov	d0, r8, r9
 800e3d2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	f7ff fed6 	bl	800e188 <__cvt>
 800e3dc:	9b06      	ldr	r3, [sp, #24]
 800e3de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e3e0:	2b47      	cmp	r3, #71	@ 0x47
 800e3e2:	4680      	mov	r8, r0
 800e3e4:	d129      	bne.n	800e43a <_printf_float+0x172>
 800e3e6:	1cc8      	adds	r0, r1, #3
 800e3e8:	db02      	blt.n	800e3f0 <_printf_float+0x128>
 800e3ea:	6863      	ldr	r3, [r4, #4]
 800e3ec:	4299      	cmp	r1, r3
 800e3ee:	dd41      	ble.n	800e474 <_printf_float+0x1ac>
 800e3f0:	f1aa 0a02 	sub.w	sl, sl, #2
 800e3f4:	fa5f fa8a 	uxtb.w	sl, sl
 800e3f8:	3901      	subs	r1, #1
 800e3fa:	4652      	mov	r2, sl
 800e3fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e400:	9109      	str	r1, [sp, #36]	@ 0x24
 800e402:	f7ff ff26 	bl	800e252 <__exponent>
 800e406:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e408:	1813      	adds	r3, r2, r0
 800e40a:	2a01      	cmp	r2, #1
 800e40c:	4681      	mov	r9, r0
 800e40e:	6123      	str	r3, [r4, #16]
 800e410:	dc02      	bgt.n	800e418 <_printf_float+0x150>
 800e412:	6822      	ldr	r2, [r4, #0]
 800e414:	07d2      	lsls	r2, r2, #31
 800e416:	d501      	bpl.n	800e41c <_printf_float+0x154>
 800e418:	3301      	adds	r3, #1
 800e41a:	6123      	str	r3, [r4, #16]
 800e41c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e420:	2b00      	cmp	r3, #0
 800e422:	d0a2      	beq.n	800e36a <_printf_float+0xa2>
 800e424:	232d      	movs	r3, #45	@ 0x2d
 800e426:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e42a:	e79e      	b.n	800e36a <_printf_float+0xa2>
 800e42c:	9a06      	ldr	r2, [sp, #24]
 800e42e:	2a47      	cmp	r2, #71	@ 0x47
 800e430:	d1c2      	bne.n	800e3b8 <_printf_float+0xf0>
 800e432:	2b00      	cmp	r3, #0
 800e434:	d1c0      	bne.n	800e3b8 <_printf_float+0xf0>
 800e436:	2301      	movs	r3, #1
 800e438:	e7bd      	b.n	800e3b6 <_printf_float+0xee>
 800e43a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e43e:	d9db      	bls.n	800e3f8 <_printf_float+0x130>
 800e440:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e444:	d118      	bne.n	800e478 <_printf_float+0x1b0>
 800e446:	2900      	cmp	r1, #0
 800e448:	6863      	ldr	r3, [r4, #4]
 800e44a:	dd0b      	ble.n	800e464 <_printf_float+0x19c>
 800e44c:	6121      	str	r1, [r4, #16]
 800e44e:	b913      	cbnz	r3, 800e456 <_printf_float+0x18e>
 800e450:	6822      	ldr	r2, [r4, #0]
 800e452:	07d0      	lsls	r0, r2, #31
 800e454:	d502      	bpl.n	800e45c <_printf_float+0x194>
 800e456:	3301      	adds	r3, #1
 800e458:	440b      	add	r3, r1
 800e45a:	6123      	str	r3, [r4, #16]
 800e45c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e45e:	f04f 0900 	mov.w	r9, #0
 800e462:	e7db      	b.n	800e41c <_printf_float+0x154>
 800e464:	b913      	cbnz	r3, 800e46c <_printf_float+0x1a4>
 800e466:	6822      	ldr	r2, [r4, #0]
 800e468:	07d2      	lsls	r2, r2, #31
 800e46a:	d501      	bpl.n	800e470 <_printf_float+0x1a8>
 800e46c:	3302      	adds	r3, #2
 800e46e:	e7f4      	b.n	800e45a <_printf_float+0x192>
 800e470:	2301      	movs	r3, #1
 800e472:	e7f2      	b.n	800e45a <_printf_float+0x192>
 800e474:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e478:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e47a:	4299      	cmp	r1, r3
 800e47c:	db05      	blt.n	800e48a <_printf_float+0x1c2>
 800e47e:	6823      	ldr	r3, [r4, #0]
 800e480:	6121      	str	r1, [r4, #16]
 800e482:	07d8      	lsls	r0, r3, #31
 800e484:	d5ea      	bpl.n	800e45c <_printf_float+0x194>
 800e486:	1c4b      	adds	r3, r1, #1
 800e488:	e7e7      	b.n	800e45a <_printf_float+0x192>
 800e48a:	2900      	cmp	r1, #0
 800e48c:	bfd4      	ite	le
 800e48e:	f1c1 0202 	rsble	r2, r1, #2
 800e492:	2201      	movgt	r2, #1
 800e494:	4413      	add	r3, r2
 800e496:	e7e0      	b.n	800e45a <_printf_float+0x192>
 800e498:	6823      	ldr	r3, [r4, #0]
 800e49a:	055a      	lsls	r2, r3, #21
 800e49c:	d407      	bmi.n	800e4ae <_printf_float+0x1e6>
 800e49e:	6923      	ldr	r3, [r4, #16]
 800e4a0:	4642      	mov	r2, r8
 800e4a2:	4631      	mov	r1, r6
 800e4a4:	4628      	mov	r0, r5
 800e4a6:	47b8      	blx	r7
 800e4a8:	3001      	adds	r0, #1
 800e4aa:	d12b      	bne.n	800e504 <_printf_float+0x23c>
 800e4ac:	e767      	b.n	800e37e <_printf_float+0xb6>
 800e4ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e4b2:	f240 80dd 	bls.w	800e670 <_printf_float+0x3a8>
 800e4b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	2300      	movs	r3, #0
 800e4be:	f7f2 fb03 	bl	8000ac8 <__aeabi_dcmpeq>
 800e4c2:	2800      	cmp	r0, #0
 800e4c4:	d033      	beq.n	800e52e <_printf_float+0x266>
 800e4c6:	4a37      	ldr	r2, [pc, #220]	@ (800e5a4 <_printf_float+0x2dc>)
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	4631      	mov	r1, r6
 800e4cc:	4628      	mov	r0, r5
 800e4ce:	47b8      	blx	r7
 800e4d0:	3001      	adds	r0, #1
 800e4d2:	f43f af54 	beq.w	800e37e <_printf_float+0xb6>
 800e4d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e4da:	4543      	cmp	r3, r8
 800e4dc:	db02      	blt.n	800e4e4 <_printf_float+0x21c>
 800e4de:	6823      	ldr	r3, [r4, #0]
 800e4e0:	07d8      	lsls	r0, r3, #31
 800e4e2:	d50f      	bpl.n	800e504 <_printf_float+0x23c>
 800e4e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4e8:	4631      	mov	r1, r6
 800e4ea:	4628      	mov	r0, r5
 800e4ec:	47b8      	blx	r7
 800e4ee:	3001      	adds	r0, #1
 800e4f0:	f43f af45 	beq.w	800e37e <_printf_float+0xb6>
 800e4f4:	f04f 0900 	mov.w	r9, #0
 800e4f8:	f108 38ff 	add.w	r8, r8, #4294967295
 800e4fc:	f104 0a1a 	add.w	sl, r4, #26
 800e500:	45c8      	cmp	r8, r9
 800e502:	dc09      	bgt.n	800e518 <_printf_float+0x250>
 800e504:	6823      	ldr	r3, [r4, #0]
 800e506:	079b      	lsls	r3, r3, #30
 800e508:	f100 8103 	bmi.w	800e712 <_printf_float+0x44a>
 800e50c:	68e0      	ldr	r0, [r4, #12]
 800e50e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e510:	4298      	cmp	r0, r3
 800e512:	bfb8      	it	lt
 800e514:	4618      	movlt	r0, r3
 800e516:	e734      	b.n	800e382 <_printf_float+0xba>
 800e518:	2301      	movs	r3, #1
 800e51a:	4652      	mov	r2, sl
 800e51c:	4631      	mov	r1, r6
 800e51e:	4628      	mov	r0, r5
 800e520:	47b8      	blx	r7
 800e522:	3001      	adds	r0, #1
 800e524:	f43f af2b 	beq.w	800e37e <_printf_float+0xb6>
 800e528:	f109 0901 	add.w	r9, r9, #1
 800e52c:	e7e8      	b.n	800e500 <_printf_float+0x238>
 800e52e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e530:	2b00      	cmp	r3, #0
 800e532:	dc39      	bgt.n	800e5a8 <_printf_float+0x2e0>
 800e534:	4a1b      	ldr	r2, [pc, #108]	@ (800e5a4 <_printf_float+0x2dc>)
 800e536:	2301      	movs	r3, #1
 800e538:	4631      	mov	r1, r6
 800e53a:	4628      	mov	r0, r5
 800e53c:	47b8      	blx	r7
 800e53e:	3001      	adds	r0, #1
 800e540:	f43f af1d 	beq.w	800e37e <_printf_float+0xb6>
 800e544:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e548:	ea59 0303 	orrs.w	r3, r9, r3
 800e54c:	d102      	bne.n	800e554 <_printf_float+0x28c>
 800e54e:	6823      	ldr	r3, [r4, #0]
 800e550:	07d9      	lsls	r1, r3, #31
 800e552:	d5d7      	bpl.n	800e504 <_printf_float+0x23c>
 800e554:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e558:	4631      	mov	r1, r6
 800e55a:	4628      	mov	r0, r5
 800e55c:	47b8      	blx	r7
 800e55e:	3001      	adds	r0, #1
 800e560:	f43f af0d 	beq.w	800e37e <_printf_float+0xb6>
 800e564:	f04f 0a00 	mov.w	sl, #0
 800e568:	f104 0b1a 	add.w	fp, r4, #26
 800e56c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e56e:	425b      	negs	r3, r3
 800e570:	4553      	cmp	r3, sl
 800e572:	dc01      	bgt.n	800e578 <_printf_float+0x2b0>
 800e574:	464b      	mov	r3, r9
 800e576:	e793      	b.n	800e4a0 <_printf_float+0x1d8>
 800e578:	2301      	movs	r3, #1
 800e57a:	465a      	mov	r2, fp
 800e57c:	4631      	mov	r1, r6
 800e57e:	4628      	mov	r0, r5
 800e580:	47b8      	blx	r7
 800e582:	3001      	adds	r0, #1
 800e584:	f43f aefb 	beq.w	800e37e <_printf_float+0xb6>
 800e588:	f10a 0a01 	add.w	sl, sl, #1
 800e58c:	e7ee      	b.n	800e56c <_printf_float+0x2a4>
 800e58e:	bf00      	nop
 800e590:	7fefffff 	.word	0x7fefffff
 800e594:	08010fdc 	.word	0x08010fdc
 800e598:	08010fe0 	.word	0x08010fe0
 800e59c:	08010fe4 	.word	0x08010fe4
 800e5a0:	08010fe8 	.word	0x08010fe8
 800e5a4:	08010fec 	.word	0x08010fec
 800e5a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e5aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e5ae:	4553      	cmp	r3, sl
 800e5b0:	bfa8      	it	ge
 800e5b2:	4653      	movge	r3, sl
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	4699      	mov	r9, r3
 800e5b8:	dc36      	bgt.n	800e628 <_printf_float+0x360>
 800e5ba:	f04f 0b00 	mov.w	fp, #0
 800e5be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e5c2:	f104 021a 	add.w	r2, r4, #26
 800e5c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e5c8:	9306      	str	r3, [sp, #24]
 800e5ca:	eba3 0309 	sub.w	r3, r3, r9
 800e5ce:	455b      	cmp	r3, fp
 800e5d0:	dc31      	bgt.n	800e636 <_printf_float+0x36e>
 800e5d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5d4:	459a      	cmp	sl, r3
 800e5d6:	dc3a      	bgt.n	800e64e <_printf_float+0x386>
 800e5d8:	6823      	ldr	r3, [r4, #0]
 800e5da:	07da      	lsls	r2, r3, #31
 800e5dc:	d437      	bmi.n	800e64e <_printf_float+0x386>
 800e5de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5e0:	ebaa 0903 	sub.w	r9, sl, r3
 800e5e4:	9b06      	ldr	r3, [sp, #24]
 800e5e6:	ebaa 0303 	sub.w	r3, sl, r3
 800e5ea:	4599      	cmp	r9, r3
 800e5ec:	bfa8      	it	ge
 800e5ee:	4699      	movge	r9, r3
 800e5f0:	f1b9 0f00 	cmp.w	r9, #0
 800e5f4:	dc33      	bgt.n	800e65e <_printf_float+0x396>
 800e5f6:	f04f 0800 	mov.w	r8, #0
 800e5fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e5fe:	f104 0b1a 	add.w	fp, r4, #26
 800e602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e604:	ebaa 0303 	sub.w	r3, sl, r3
 800e608:	eba3 0309 	sub.w	r3, r3, r9
 800e60c:	4543      	cmp	r3, r8
 800e60e:	f77f af79 	ble.w	800e504 <_printf_float+0x23c>
 800e612:	2301      	movs	r3, #1
 800e614:	465a      	mov	r2, fp
 800e616:	4631      	mov	r1, r6
 800e618:	4628      	mov	r0, r5
 800e61a:	47b8      	blx	r7
 800e61c:	3001      	adds	r0, #1
 800e61e:	f43f aeae 	beq.w	800e37e <_printf_float+0xb6>
 800e622:	f108 0801 	add.w	r8, r8, #1
 800e626:	e7ec      	b.n	800e602 <_printf_float+0x33a>
 800e628:	4642      	mov	r2, r8
 800e62a:	4631      	mov	r1, r6
 800e62c:	4628      	mov	r0, r5
 800e62e:	47b8      	blx	r7
 800e630:	3001      	adds	r0, #1
 800e632:	d1c2      	bne.n	800e5ba <_printf_float+0x2f2>
 800e634:	e6a3      	b.n	800e37e <_printf_float+0xb6>
 800e636:	2301      	movs	r3, #1
 800e638:	4631      	mov	r1, r6
 800e63a:	4628      	mov	r0, r5
 800e63c:	9206      	str	r2, [sp, #24]
 800e63e:	47b8      	blx	r7
 800e640:	3001      	adds	r0, #1
 800e642:	f43f ae9c 	beq.w	800e37e <_printf_float+0xb6>
 800e646:	9a06      	ldr	r2, [sp, #24]
 800e648:	f10b 0b01 	add.w	fp, fp, #1
 800e64c:	e7bb      	b.n	800e5c6 <_printf_float+0x2fe>
 800e64e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e652:	4631      	mov	r1, r6
 800e654:	4628      	mov	r0, r5
 800e656:	47b8      	blx	r7
 800e658:	3001      	adds	r0, #1
 800e65a:	d1c0      	bne.n	800e5de <_printf_float+0x316>
 800e65c:	e68f      	b.n	800e37e <_printf_float+0xb6>
 800e65e:	9a06      	ldr	r2, [sp, #24]
 800e660:	464b      	mov	r3, r9
 800e662:	4442      	add	r2, r8
 800e664:	4631      	mov	r1, r6
 800e666:	4628      	mov	r0, r5
 800e668:	47b8      	blx	r7
 800e66a:	3001      	adds	r0, #1
 800e66c:	d1c3      	bne.n	800e5f6 <_printf_float+0x32e>
 800e66e:	e686      	b.n	800e37e <_printf_float+0xb6>
 800e670:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e674:	f1ba 0f01 	cmp.w	sl, #1
 800e678:	dc01      	bgt.n	800e67e <_printf_float+0x3b6>
 800e67a:	07db      	lsls	r3, r3, #31
 800e67c:	d536      	bpl.n	800e6ec <_printf_float+0x424>
 800e67e:	2301      	movs	r3, #1
 800e680:	4642      	mov	r2, r8
 800e682:	4631      	mov	r1, r6
 800e684:	4628      	mov	r0, r5
 800e686:	47b8      	blx	r7
 800e688:	3001      	adds	r0, #1
 800e68a:	f43f ae78 	beq.w	800e37e <_printf_float+0xb6>
 800e68e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e692:	4631      	mov	r1, r6
 800e694:	4628      	mov	r0, r5
 800e696:	47b8      	blx	r7
 800e698:	3001      	adds	r0, #1
 800e69a:	f43f ae70 	beq.w	800e37e <_printf_float+0xb6>
 800e69e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e6aa:	f7f2 fa0d 	bl	8000ac8 <__aeabi_dcmpeq>
 800e6ae:	b9c0      	cbnz	r0, 800e6e2 <_printf_float+0x41a>
 800e6b0:	4653      	mov	r3, sl
 800e6b2:	f108 0201 	add.w	r2, r8, #1
 800e6b6:	4631      	mov	r1, r6
 800e6b8:	4628      	mov	r0, r5
 800e6ba:	47b8      	blx	r7
 800e6bc:	3001      	adds	r0, #1
 800e6be:	d10c      	bne.n	800e6da <_printf_float+0x412>
 800e6c0:	e65d      	b.n	800e37e <_printf_float+0xb6>
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	465a      	mov	r2, fp
 800e6c6:	4631      	mov	r1, r6
 800e6c8:	4628      	mov	r0, r5
 800e6ca:	47b8      	blx	r7
 800e6cc:	3001      	adds	r0, #1
 800e6ce:	f43f ae56 	beq.w	800e37e <_printf_float+0xb6>
 800e6d2:	f108 0801 	add.w	r8, r8, #1
 800e6d6:	45d0      	cmp	r8, sl
 800e6d8:	dbf3      	blt.n	800e6c2 <_printf_float+0x3fa>
 800e6da:	464b      	mov	r3, r9
 800e6dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e6e0:	e6df      	b.n	800e4a2 <_printf_float+0x1da>
 800e6e2:	f04f 0800 	mov.w	r8, #0
 800e6e6:	f104 0b1a 	add.w	fp, r4, #26
 800e6ea:	e7f4      	b.n	800e6d6 <_printf_float+0x40e>
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	4642      	mov	r2, r8
 800e6f0:	e7e1      	b.n	800e6b6 <_printf_float+0x3ee>
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	464a      	mov	r2, r9
 800e6f6:	4631      	mov	r1, r6
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	47b8      	blx	r7
 800e6fc:	3001      	adds	r0, #1
 800e6fe:	f43f ae3e 	beq.w	800e37e <_printf_float+0xb6>
 800e702:	f108 0801 	add.w	r8, r8, #1
 800e706:	68e3      	ldr	r3, [r4, #12]
 800e708:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e70a:	1a5b      	subs	r3, r3, r1
 800e70c:	4543      	cmp	r3, r8
 800e70e:	dcf0      	bgt.n	800e6f2 <_printf_float+0x42a>
 800e710:	e6fc      	b.n	800e50c <_printf_float+0x244>
 800e712:	f04f 0800 	mov.w	r8, #0
 800e716:	f104 0919 	add.w	r9, r4, #25
 800e71a:	e7f4      	b.n	800e706 <_printf_float+0x43e>

0800e71c <_printf_common>:
 800e71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e720:	4616      	mov	r6, r2
 800e722:	4698      	mov	r8, r3
 800e724:	688a      	ldr	r2, [r1, #8]
 800e726:	690b      	ldr	r3, [r1, #16]
 800e728:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e72c:	4293      	cmp	r3, r2
 800e72e:	bfb8      	it	lt
 800e730:	4613      	movlt	r3, r2
 800e732:	6033      	str	r3, [r6, #0]
 800e734:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e738:	4607      	mov	r7, r0
 800e73a:	460c      	mov	r4, r1
 800e73c:	b10a      	cbz	r2, 800e742 <_printf_common+0x26>
 800e73e:	3301      	adds	r3, #1
 800e740:	6033      	str	r3, [r6, #0]
 800e742:	6823      	ldr	r3, [r4, #0]
 800e744:	0699      	lsls	r1, r3, #26
 800e746:	bf42      	ittt	mi
 800e748:	6833      	ldrmi	r3, [r6, #0]
 800e74a:	3302      	addmi	r3, #2
 800e74c:	6033      	strmi	r3, [r6, #0]
 800e74e:	6825      	ldr	r5, [r4, #0]
 800e750:	f015 0506 	ands.w	r5, r5, #6
 800e754:	d106      	bne.n	800e764 <_printf_common+0x48>
 800e756:	f104 0a19 	add.w	sl, r4, #25
 800e75a:	68e3      	ldr	r3, [r4, #12]
 800e75c:	6832      	ldr	r2, [r6, #0]
 800e75e:	1a9b      	subs	r3, r3, r2
 800e760:	42ab      	cmp	r3, r5
 800e762:	dc26      	bgt.n	800e7b2 <_printf_common+0x96>
 800e764:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e768:	6822      	ldr	r2, [r4, #0]
 800e76a:	3b00      	subs	r3, #0
 800e76c:	bf18      	it	ne
 800e76e:	2301      	movne	r3, #1
 800e770:	0692      	lsls	r2, r2, #26
 800e772:	d42b      	bmi.n	800e7cc <_printf_common+0xb0>
 800e774:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e778:	4641      	mov	r1, r8
 800e77a:	4638      	mov	r0, r7
 800e77c:	47c8      	blx	r9
 800e77e:	3001      	adds	r0, #1
 800e780:	d01e      	beq.n	800e7c0 <_printf_common+0xa4>
 800e782:	6823      	ldr	r3, [r4, #0]
 800e784:	6922      	ldr	r2, [r4, #16]
 800e786:	f003 0306 	and.w	r3, r3, #6
 800e78a:	2b04      	cmp	r3, #4
 800e78c:	bf02      	ittt	eq
 800e78e:	68e5      	ldreq	r5, [r4, #12]
 800e790:	6833      	ldreq	r3, [r6, #0]
 800e792:	1aed      	subeq	r5, r5, r3
 800e794:	68a3      	ldr	r3, [r4, #8]
 800e796:	bf0c      	ite	eq
 800e798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e79c:	2500      	movne	r5, #0
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	bfc4      	itt	gt
 800e7a2:	1a9b      	subgt	r3, r3, r2
 800e7a4:	18ed      	addgt	r5, r5, r3
 800e7a6:	2600      	movs	r6, #0
 800e7a8:	341a      	adds	r4, #26
 800e7aa:	42b5      	cmp	r5, r6
 800e7ac:	d11a      	bne.n	800e7e4 <_printf_common+0xc8>
 800e7ae:	2000      	movs	r0, #0
 800e7b0:	e008      	b.n	800e7c4 <_printf_common+0xa8>
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	4652      	mov	r2, sl
 800e7b6:	4641      	mov	r1, r8
 800e7b8:	4638      	mov	r0, r7
 800e7ba:	47c8      	blx	r9
 800e7bc:	3001      	adds	r0, #1
 800e7be:	d103      	bne.n	800e7c8 <_printf_common+0xac>
 800e7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7c8:	3501      	adds	r5, #1
 800e7ca:	e7c6      	b.n	800e75a <_printf_common+0x3e>
 800e7cc:	18e1      	adds	r1, r4, r3
 800e7ce:	1c5a      	adds	r2, r3, #1
 800e7d0:	2030      	movs	r0, #48	@ 0x30
 800e7d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e7d6:	4422      	add	r2, r4
 800e7d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e7dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e7e0:	3302      	adds	r3, #2
 800e7e2:	e7c7      	b.n	800e774 <_printf_common+0x58>
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	4622      	mov	r2, r4
 800e7e8:	4641      	mov	r1, r8
 800e7ea:	4638      	mov	r0, r7
 800e7ec:	47c8      	blx	r9
 800e7ee:	3001      	adds	r0, #1
 800e7f0:	d0e6      	beq.n	800e7c0 <_printf_common+0xa4>
 800e7f2:	3601      	adds	r6, #1
 800e7f4:	e7d9      	b.n	800e7aa <_printf_common+0x8e>
	...

0800e7f8 <_printf_i>:
 800e7f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e7fc:	7e0f      	ldrb	r7, [r1, #24]
 800e7fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e800:	2f78      	cmp	r7, #120	@ 0x78
 800e802:	4691      	mov	r9, r2
 800e804:	4680      	mov	r8, r0
 800e806:	460c      	mov	r4, r1
 800e808:	469a      	mov	sl, r3
 800e80a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e80e:	d807      	bhi.n	800e820 <_printf_i+0x28>
 800e810:	2f62      	cmp	r7, #98	@ 0x62
 800e812:	d80a      	bhi.n	800e82a <_printf_i+0x32>
 800e814:	2f00      	cmp	r7, #0
 800e816:	f000 80d2 	beq.w	800e9be <_printf_i+0x1c6>
 800e81a:	2f58      	cmp	r7, #88	@ 0x58
 800e81c:	f000 80b9 	beq.w	800e992 <_printf_i+0x19a>
 800e820:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e824:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e828:	e03a      	b.n	800e8a0 <_printf_i+0xa8>
 800e82a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e82e:	2b15      	cmp	r3, #21
 800e830:	d8f6      	bhi.n	800e820 <_printf_i+0x28>
 800e832:	a101      	add	r1, pc, #4	@ (adr r1, 800e838 <_printf_i+0x40>)
 800e834:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e838:	0800e891 	.word	0x0800e891
 800e83c:	0800e8a5 	.word	0x0800e8a5
 800e840:	0800e821 	.word	0x0800e821
 800e844:	0800e821 	.word	0x0800e821
 800e848:	0800e821 	.word	0x0800e821
 800e84c:	0800e821 	.word	0x0800e821
 800e850:	0800e8a5 	.word	0x0800e8a5
 800e854:	0800e821 	.word	0x0800e821
 800e858:	0800e821 	.word	0x0800e821
 800e85c:	0800e821 	.word	0x0800e821
 800e860:	0800e821 	.word	0x0800e821
 800e864:	0800e9a5 	.word	0x0800e9a5
 800e868:	0800e8cf 	.word	0x0800e8cf
 800e86c:	0800e95f 	.word	0x0800e95f
 800e870:	0800e821 	.word	0x0800e821
 800e874:	0800e821 	.word	0x0800e821
 800e878:	0800e9c7 	.word	0x0800e9c7
 800e87c:	0800e821 	.word	0x0800e821
 800e880:	0800e8cf 	.word	0x0800e8cf
 800e884:	0800e821 	.word	0x0800e821
 800e888:	0800e821 	.word	0x0800e821
 800e88c:	0800e967 	.word	0x0800e967
 800e890:	6833      	ldr	r3, [r6, #0]
 800e892:	1d1a      	adds	r2, r3, #4
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	6032      	str	r2, [r6, #0]
 800e898:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e89c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	e09d      	b.n	800e9e0 <_printf_i+0x1e8>
 800e8a4:	6833      	ldr	r3, [r6, #0]
 800e8a6:	6820      	ldr	r0, [r4, #0]
 800e8a8:	1d19      	adds	r1, r3, #4
 800e8aa:	6031      	str	r1, [r6, #0]
 800e8ac:	0606      	lsls	r6, r0, #24
 800e8ae:	d501      	bpl.n	800e8b4 <_printf_i+0xbc>
 800e8b0:	681d      	ldr	r5, [r3, #0]
 800e8b2:	e003      	b.n	800e8bc <_printf_i+0xc4>
 800e8b4:	0645      	lsls	r5, r0, #25
 800e8b6:	d5fb      	bpl.n	800e8b0 <_printf_i+0xb8>
 800e8b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e8bc:	2d00      	cmp	r5, #0
 800e8be:	da03      	bge.n	800e8c8 <_printf_i+0xd0>
 800e8c0:	232d      	movs	r3, #45	@ 0x2d
 800e8c2:	426d      	negs	r5, r5
 800e8c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e8c8:	4859      	ldr	r0, [pc, #356]	@ (800ea30 <_printf_i+0x238>)
 800e8ca:	230a      	movs	r3, #10
 800e8cc:	e011      	b.n	800e8f2 <_printf_i+0xfa>
 800e8ce:	6821      	ldr	r1, [r4, #0]
 800e8d0:	6833      	ldr	r3, [r6, #0]
 800e8d2:	0608      	lsls	r0, r1, #24
 800e8d4:	f853 5b04 	ldr.w	r5, [r3], #4
 800e8d8:	d402      	bmi.n	800e8e0 <_printf_i+0xe8>
 800e8da:	0649      	lsls	r1, r1, #25
 800e8dc:	bf48      	it	mi
 800e8de:	b2ad      	uxthmi	r5, r5
 800e8e0:	2f6f      	cmp	r7, #111	@ 0x6f
 800e8e2:	4853      	ldr	r0, [pc, #332]	@ (800ea30 <_printf_i+0x238>)
 800e8e4:	6033      	str	r3, [r6, #0]
 800e8e6:	bf14      	ite	ne
 800e8e8:	230a      	movne	r3, #10
 800e8ea:	2308      	moveq	r3, #8
 800e8ec:	2100      	movs	r1, #0
 800e8ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e8f2:	6866      	ldr	r6, [r4, #4]
 800e8f4:	60a6      	str	r6, [r4, #8]
 800e8f6:	2e00      	cmp	r6, #0
 800e8f8:	bfa2      	ittt	ge
 800e8fa:	6821      	ldrge	r1, [r4, #0]
 800e8fc:	f021 0104 	bicge.w	r1, r1, #4
 800e900:	6021      	strge	r1, [r4, #0]
 800e902:	b90d      	cbnz	r5, 800e908 <_printf_i+0x110>
 800e904:	2e00      	cmp	r6, #0
 800e906:	d04b      	beq.n	800e9a0 <_printf_i+0x1a8>
 800e908:	4616      	mov	r6, r2
 800e90a:	fbb5 f1f3 	udiv	r1, r5, r3
 800e90e:	fb03 5711 	mls	r7, r3, r1, r5
 800e912:	5dc7      	ldrb	r7, [r0, r7]
 800e914:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e918:	462f      	mov	r7, r5
 800e91a:	42bb      	cmp	r3, r7
 800e91c:	460d      	mov	r5, r1
 800e91e:	d9f4      	bls.n	800e90a <_printf_i+0x112>
 800e920:	2b08      	cmp	r3, #8
 800e922:	d10b      	bne.n	800e93c <_printf_i+0x144>
 800e924:	6823      	ldr	r3, [r4, #0]
 800e926:	07df      	lsls	r7, r3, #31
 800e928:	d508      	bpl.n	800e93c <_printf_i+0x144>
 800e92a:	6923      	ldr	r3, [r4, #16]
 800e92c:	6861      	ldr	r1, [r4, #4]
 800e92e:	4299      	cmp	r1, r3
 800e930:	bfde      	ittt	le
 800e932:	2330      	movle	r3, #48	@ 0x30
 800e934:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e938:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e93c:	1b92      	subs	r2, r2, r6
 800e93e:	6122      	str	r2, [r4, #16]
 800e940:	f8cd a000 	str.w	sl, [sp]
 800e944:	464b      	mov	r3, r9
 800e946:	aa03      	add	r2, sp, #12
 800e948:	4621      	mov	r1, r4
 800e94a:	4640      	mov	r0, r8
 800e94c:	f7ff fee6 	bl	800e71c <_printf_common>
 800e950:	3001      	adds	r0, #1
 800e952:	d14a      	bne.n	800e9ea <_printf_i+0x1f2>
 800e954:	f04f 30ff 	mov.w	r0, #4294967295
 800e958:	b004      	add	sp, #16
 800e95a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e95e:	6823      	ldr	r3, [r4, #0]
 800e960:	f043 0320 	orr.w	r3, r3, #32
 800e964:	6023      	str	r3, [r4, #0]
 800e966:	4833      	ldr	r0, [pc, #204]	@ (800ea34 <_printf_i+0x23c>)
 800e968:	2778      	movs	r7, #120	@ 0x78
 800e96a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e96e:	6823      	ldr	r3, [r4, #0]
 800e970:	6831      	ldr	r1, [r6, #0]
 800e972:	061f      	lsls	r7, r3, #24
 800e974:	f851 5b04 	ldr.w	r5, [r1], #4
 800e978:	d402      	bmi.n	800e980 <_printf_i+0x188>
 800e97a:	065f      	lsls	r7, r3, #25
 800e97c:	bf48      	it	mi
 800e97e:	b2ad      	uxthmi	r5, r5
 800e980:	6031      	str	r1, [r6, #0]
 800e982:	07d9      	lsls	r1, r3, #31
 800e984:	bf44      	itt	mi
 800e986:	f043 0320 	orrmi.w	r3, r3, #32
 800e98a:	6023      	strmi	r3, [r4, #0]
 800e98c:	b11d      	cbz	r5, 800e996 <_printf_i+0x19e>
 800e98e:	2310      	movs	r3, #16
 800e990:	e7ac      	b.n	800e8ec <_printf_i+0xf4>
 800e992:	4827      	ldr	r0, [pc, #156]	@ (800ea30 <_printf_i+0x238>)
 800e994:	e7e9      	b.n	800e96a <_printf_i+0x172>
 800e996:	6823      	ldr	r3, [r4, #0]
 800e998:	f023 0320 	bic.w	r3, r3, #32
 800e99c:	6023      	str	r3, [r4, #0]
 800e99e:	e7f6      	b.n	800e98e <_printf_i+0x196>
 800e9a0:	4616      	mov	r6, r2
 800e9a2:	e7bd      	b.n	800e920 <_printf_i+0x128>
 800e9a4:	6833      	ldr	r3, [r6, #0]
 800e9a6:	6825      	ldr	r5, [r4, #0]
 800e9a8:	6961      	ldr	r1, [r4, #20]
 800e9aa:	1d18      	adds	r0, r3, #4
 800e9ac:	6030      	str	r0, [r6, #0]
 800e9ae:	062e      	lsls	r6, r5, #24
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	d501      	bpl.n	800e9b8 <_printf_i+0x1c0>
 800e9b4:	6019      	str	r1, [r3, #0]
 800e9b6:	e002      	b.n	800e9be <_printf_i+0x1c6>
 800e9b8:	0668      	lsls	r0, r5, #25
 800e9ba:	d5fb      	bpl.n	800e9b4 <_printf_i+0x1bc>
 800e9bc:	8019      	strh	r1, [r3, #0]
 800e9be:	2300      	movs	r3, #0
 800e9c0:	6123      	str	r3, [r4, #16]
 800e9c2:	4616      	mov	r6, r2
 800e9c4:	e7bc      	b.n	800e940 <_printf_i+0x148>
 800e9c6:	6833      	ldr	r3, [r6, #0]
 800e9c8:	1d1a      	adds	r2, r3, #4
 800e9ca:	6032      	str	r2, [r6, #0]
 800e9cc:	681e      	ldr	r6, [r3, #0]
 800e9ce:	6862      	ldr	r2, [r4, #4]
 800e9d0:	2100      	movs	r1, #0
 800e9d2:	4630      	mov	r0, r6
 800e9d4:	f7f1 fbfc 	bl	80001d0 <memchr>
 800e9d8:	b108      	cbz	r0, 800e9de <_printf_i+0x1e6>
 800e9da:	1b80      	subs	r0, r0, r6
 800e9dc:	6060      	str	r0, [r4, #4]
 800e9de:	6863      	ldr	r3, [r4, #4]
 800e9e0:	6123      	str	r3, [r4, #16]
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e9e8:	e7aa      	b.n	800e940 <_printf_i+0x148>
 800e9ea:	6923      	ldr	r3, [r4, #16]
 800e9ec:	4632      	mov	r2, r6
 800e9ee:	4649      	mov	r1, r9
 800e9f0:	4640      	mov	r0, r8
 800e9f2:	47d0      	blx	sl
 800e9f4:	3001      	adds	r0, #1
 800e9f6:	d0ad      	beq.n	800e954 <_printf_i+0x15c>
 800e9f8:	6823      	ldr	r3, [r4, #0]
 800e9fa:	079b      	lsls	r3, r3, #30
 800e9fc:	d413      	bmi.n	800ea26 <_printf_i+0x22e>
 800e9fe:	68e0      	ldr	r0, [r4, #12]
 800ea00:	9b03      	ldr	r3, [sp, #12]
 800ea02:	4298      	cmp	r0, r3
 800ea04:	bfb8      	it	lt
 800ea06:	4618      	movlt	r0, r3
 800ea08:	e7a6      	b.n	800e958 <_printf_i+0x160>
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	4632      	mov	r2, r6
 800ea0e:	4649      	mov	r1, r9
 800ea10:	4640      	mov	r0, r8
 800ea12:	47d0      	blx	sl
 800ea14:	3001      	adds	r0, #1
 800ea16:	d09d      	beq.n	800e954 <_printf_i+0x15c>
 800ea18:	3501      	adds	r5, #1
 800ea1a:	68e3      	ldr	r3, [r4, #12]
 800ea1c:	9903      	ldr	r1, [sp, #12]
 800ea1e:	1a5b      	subs	r3, r3, r1
 800ea20:	42ab      	cmp	r3, r5
 800ea22:	dcf2      	bgt.n	800ea0a <_printf_i+0x212>
 800ea24:	e7eb      	b.n	800e9fe <_printf_i+0x206>
 800ea26:	2500      	movs	r5, #0
 800ea28:	f104 0619 	add.w	r6, r4, #25
 800ea2c:	e7f5      	b.n	800ea1a <_printf_i+0x222>
 800ea2e:	bf00      	nop
 800ea30:	08010fee 	.word	0x08010fee
 800ea34:	08010fff 	.word	0x08010fff

0800ea38 <std>:
 800ea38:	2300      	movs	r3, #0
 800ea3a:	b510      	push	{r4, lr}
 800ea3c:	4604      	mov	r4, r0
 800ea3e:	e9c0 3300 	strd	r3, r3, [r0]
 800ea42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ea46:	6083      	str	r3, [r0, #8]
 800ea48:	8181      	strh	r1, [r0, #12]
 800ea4a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ea4c:	81c2      	strh	r2, [r0, #14]
 800ea4e:	6183      	str	r3, [r0, #24]
 800ea50:	4619      	mov	r1, r3
 800ea52:	2208      	movs	r2, #8
 800ea54:	305c      	adds	r0, #92	@ 0x5c
 800ea56:	f000 f9e7 	bl	800ee28 <memset>
 800ea5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ea90 <std+0x58>)
 800ea5c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ea5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ea94 <std+0x5c>)
 800ea60:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ea62:	4b0d      	ldr	r3, [pc, #52]	@ (800ea98 <std+0x60>)
 800ea64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ea66:	4b0d      	ldr	r3, [pc, #52]	@ (800ea9c <std+0x64>)
 800ea68:	6323      	str	r3, [r4, #48]	@ 0x30
 800ea6a:	4b0d      	ldr	r3, [pc, #52]	@ (800eaa0 <std+0x68>)
 800ea6c:	6224      	str	r4, [r4, #32]
 800ea6e:	429c      	cmp	r4, r3
 800ea70:	d006      	beq.n	800ea80 <std+0x48>
 800ea72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ea76:	4294      	cmp	r4, r2
 800ea78:	d002      	beq.n	800ea80 <std+0x48>
 800ea7a:	33d0      	adds	r3, #208	@ 0xd0
 800ea7c:	429c      	cmp	r4, r3
 800ea7e:	d105      	bne.n	800ea8c <std+0x54>
 800ea80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ea84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea88:	f000 ba4a 	b.w	800ef20 <__retarget_lock_init_recursive>
 800ea8c:	bd10      	pop	{r4, pc}
 800ea8e:	bf00      	nop
 800ea90:	0800ec79 	.word	0x0800ec79
 800ea94:	0800ec9b 	.word	0x0800ec9b
 800ea98:	0800ecd3 	.word	0x0800ecd3
 800ea9c:	0800ecf7 	.word	0x0800ecf7
 800eaa0:	20000fb4 	.word	0x20000fb4

0800eaa4 <stdio_exit_handler>:
 800eaa4:	4a02      	ldr	r2, [pc, #8]	@ (800eab0 <stdio_exit_handler+0xc>)
 800eaa6:	4903      	ldr	r1, [pc, #12]	@ (800eab4 <stdio_exit_handler+0x10>)
 800eaa8:	4803      	ldr	r0, [pc, #12]	@ (800eab8 <stdio_exit_handler+0x14>)
 800eaaa:	f000 b869 	b.w	800eb80 <_fwalk_sglue>
 800eaae:	bf00      	nop
 800eab0:	2000016c 	.word	0x2000016c
 800eab4:	08010871 	.word	0x08010871
 800eab8:	2000017c 	.word	0x2000017c

0800eabc <cleanup_stdio>:
 800eabc:	6841      	ldr	r1, [r0, #4]
 800eabe:	4b0c      	ldr	r3, [pc, #48]	@ (800eaf0 <cleanup_stdio+0x34>)
 800eac0:	4299      	cmp	r1, r3
 800eac2:	b510      	push	{r4, lr}
 800eac4:	4604      	mov	r4, r0
 800eac6:	d001      	beq.n	800eacc <cleanup_stdio+0x10>
 800eac8:	f001 fed2 	bl	8010870 <_fflush_r>
 800eacc:	68a1      	ldr	r1, [r4, #8]
 800eace:	4b09      	ldr	r3, [pc, #36]	@ (800eaf4 <cleanup_stdio+0x38>)
 800ead0:	4299      	cmp	r1, r3
 800ead2:	d002      	beq.n	800eada <cleanup_stdio+0x1e>
 800ead4:	4620      	mov	r0, r4
 800ead6:	f001 fecb 	bl	8010870 <_fflush_r>
 800eada:	68e1      	ldr	r1, [r4, #12]
 800eadc:	4b06      	ldr	r3, [pc, #24]	@ (800eaf8 <cleanup_stdio+0x3c>)
 800eade:	4299      	cmp	r1, r3
 800eae0:	d004      	beq.n	800eaec <cleanup_stdio+0x30>
 800eae2:	4620      	mov	r0, r4
 800eae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eae8:	f001 bec2 	b.w	8010870 <_fflush_r>
 800eaec:	bd10      	pop	{r4, pc}
 800eaee:	bf00      	nop
 800eaf0:	20000fb4 	.word	0x20000fb4
 800eaf4:	2000101c 	.word	0x2000101c
 800eaf8:	20001084 	.word	0x20001084

0800eafc <global_stdio_init.part.0>:
 800eafc:	b510      	push	{r4, lr}
 800eafe:	4b0b      	ldr	r3, [pc, #44]	@ (800eb2c <global_stdio_init.part.0+0x30>)
 800eb00:	4c0b      	ldr	r4, [pc, #44]	@ (800eb30 <global_stdio_init.part.0+0x34>)
 800eb02:	4a0c      	ldr	r2, [pc, #48]	@ (800eb34 <global_stdio_init.part.0+0x38>)
 800eb04:	601a      	str	r2, [r3, #0]
 800eb06:	4620      	mov	r0, r4
 800eb08:	2200      	movs	r2, #0
 800eb0a:	2104      	movs	r1, #4
 800eb0c:	f7ff ff94 	bl	800ea38 <std>
 800eb10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800eb14:	2201      	movs	r2, #1
 800eb16:	2109      	movs	r1, #9
 800eb18:	f7ff ff8e 	bl	800ea38 <std>
 800eb1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800eb20:	2202      	movs	r2, #2
 800eb22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb26:	2112      	movs	r1, #18
 800eb28:	f7ff bf86 	b.w	800ea38 <std>
 800eb2c:	200010ec 	.word	0x200010ec
 800eb30:	20000fb4 	.word	0x20000fb4
 800eb34:	0800eaa5 	.word	0x0800eaa5

0800eb38 <__sfp_lock_acquire>:
 800eb38:	4801      	ldr	r0, [pc, #4]	@ (800eb40 <__sfp_lock_acquire+0x8>)
 800eb3a:	f000 b9f2 	b.w	800ef22 <__retarget_lock_acquire_recursive>
 800eb3e:	bf00      	nop
 800eb40:	200010f5 	.word	0x200010f5

0800eb44 <__sfp_lock_release>:
 800eb44:	4801      	ldr	r0, [pc, #4]	@ (800eb4c <__sfp_lock_release+0x8>)
 800eb46:	f000 b9ed 	b.w	800ef24 <__retarget_lock_release_recursive>
 800eb4a:	bf00      	nop
 800eb4c:	200010f5 	.word	0x200010f5

0800eb50 <__sinit>:
 800eb50:	b510      	push	{r4, lr}
 800eb52:	4604      	mov	r4, r0
 800eb54:	f7ff fff0 	bl	800eb38 <__sfp_lock_acquire>
 800eb58:	6a23      	ldr	r3, [r4, #32]
 800eb5a:	b11b      	cbz	r3, 800eb64 <__sinit+0x14>
 800eb5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb60:	f7ff bff0 	b.w	800eb44 <__sfp_lock_release>
 800eb64:	4b04      	ldr	r3, [pc, #16]	@ (800eb78 <__sinit+0x28>)
 800eb66:	6223      	str	r3, [r4, #32]
 800eb68:	4b04      	ldr	r3, [pc, #16]	@ (800eb7c <__sinit+0x2c>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d1f5      	bne.n	800eb5c <__sinit+0xc>
 800eb70:	f7ff ffc4 	bl	800eafc <global_stdio_init.part.0>
 800eb74:	e7f2      	b.n	800eb5c <__sinit+0xc>
 800eb76:	bf00      	nop
 800eb78:	0800eabd 	.word	0x0800eabd
 800eb7c:	200010ec 	.word	0x200010ec

0800eb80 <_fwalk_sglue>:
 800eb80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb84:	4607      	mov	r7, r0
 800eb86:	4688      	mov	r8, r1
 800eb88:	4614      	mov	r4, r2
 800eb8a:	2600      	movs	r6, #0
 800eb8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eb90:	f1b9 0901 	subs.w	r9, r9, #1
 800eb94:	d505      	bpl.n	800eba2 <_fwalk_sglue+0x22>
 800eb96:	6824      	ldr	r4, [r4, #0]
 800eb98:	2c00      	cmp	r4, #0
 800eb9a:	d1f7      	bne.n	800eb8c <_fwalk_sglue+0xc>
 800eb9c:	4630      	mov	r0, r6
 800eb9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eba2:	89ab      	ldrh	r3, [r5, #12]
 800eba4:	2b01      	cmp	r3, #1
 800eba6:	d907      	bls.n	800ebb8 <_fwalk_sglue+0x38>
 800eba8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ebac:	3301      	adds	r3, #1
 800ebae:	d003      	beq.n	800ebb8 <_fwalk_sglue+0x38>
 800ebb0:	4629      	mov	r1, r5
 800ebb2:	4638      	mov	r0, r7
 800ebb4:	47c0      	blx	r8
 800ebb6:	4306      	orrs	r6, r0
 800ebb8:	3568      	adds	r5, #104	@ 0x68
 800ebba:	e7e9      	b.n	800eb90 <_fwalk_sglue+0x10>

0800ebbc <_puts_r>:
 800ebbc:	6a03      	ldr	r3, [r0, #32]
 800ebbe:	b570      	push	{r4, r5, r6, lr}
 800ebc0:	6884      	ldr	r4, [r0, #8]
 800ebc2:	4605      	mov	r5, r0
 800ebc4:	460e      	mov	r6, r1
 800ebc6:	b90b      	cbnz	r3, 800ebcc <_puts_r+0x10>
 800ebc8:	f7ff ffc2 	bl	800eb50 <__sinit>
 800ebcc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ebce:	07db      	lsls	r3, r3, #31
 800ebd0:	d405      	bmi.n	800ebde <_puts_r+0x22>
 800ebd2:	89a3      	ldrh	r3, [r4, #12]
 800ebd4:	0598      	lsls	r0, r3, #22
 800ebd6:	d402      	bmi.n	800ebde <_puts_r+0x22>
 800ebd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ebda:	f000 f9a2 	bl	800ef22 <__retarget_lock_acquire_recursive>
 800ebde:	89a3      	ldrh	r3, [r4, #12]
 800ebe0:	0719      	lsls	r1, r3, #28
 800ebe2:	d502      	bpl.n	800ebea <_puts_r+0x2e>
 800ebe4:	6923      	ldr	r3, [r4, #16]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d135      	bne.n	800ec56 <_puts_r+0x9a>
 800ebea:	4621      	mov	r1, r4
 800ebec:	4628      	mov	r0, r5
 800ebee:	f000 f8c5 	bl	800ed7c <__swsetup_r>
 800ebf2:	b380      	cbz	r0, 800ec56 <_puts_r+0x9a>
 800ebf4:	f04f 35ff 	mov.w	r5, #4294967295
 800ebf8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ebfa:	07da      	lsls	r2, r3, #31
 800ebfc:	d405      	bmi.n	800ec0a <_puts_r+0x4e>
 800ebfe:	89a3      	ldrh	r3, [r4, #12]
 800ec00:	059b      	lsls	r3, r3, #22
 800ec02:	d402      	bmi.n	800ec0a <_puts_r+0x4e>
 800ec04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec06:	f000 f98d 	bl	800ef24 <__retarget_lock_release_recursive>
 800ec0a:	4628      	mov	r0, r5
 800ec0c:	bd70      	pop	{r4, r5, r6, pc}
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	da04      	bge.n	800ec1c <_puts_r+0x60>
 800ec12:	69a2      	ldr	r2, [r4, #24]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	dc17      	bgt.n	800ec48 <_puts_r+0x8c>
 800ec18:	290a      	cmp	r1, #10
 800ec1a:	d015      	beq.n	800ec48 <_puts_r+0x8c>
 800ec1c:	6823      	ldr	r3, [r4, #0]
 800ec1e:	1c5a      	adds	r2, r3, #1
 800ec20:	6022      	str	r2, [r4, #0]
 800ec22:	7019      	strb	r1, [r3, #0]
 800ec24:	68a3      	ldr	r3, [r4, #8]
 800ec26:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ec2a:	3b01      	subs	r3, #1
 800ec2c:	60a3      	str	r3, [r4, #8]
 800ec2e:	2900      	cmp	r1, #0
 800ec30:	d1ed      	bne.n	800ec0e <_puts_r+0x52>
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	da11      	bge.n	800ec5a <_puts_r+0x9e>
 800ec36:	4622      	mov	r2, r4
 800ec38:	210a      	movs	r1, #10
 800ec3a:	4628      	mov	r0, r5
 800ec3c:	f000 f85f 	bl	800ecfe <__swbuf_r>
 800ec40:	3001      	adds	r0, #1
 800ec42:	d0d7      	beq.n	800ebf4 <_puts_r+0x38>
 800ec44:	250a      	movs	r5, #10
 800ec46:	e7d7      	b.n	800ebf8 <_puts_r+0x3c>
 800ec48:	4622      	mov	r2, r4
 800ec4a:	4628      	mov	r0, r5
 800ec4c:	f000 f857 	bl	800ecfe <__swbuf_r>
 800ec50:	3001      	adds	r0, #1
 800ec52:	d1e7      	bne.n	800ec24 <_puts_r+0x68>
 800ec54:	e7ce      	b.n	800ebf4 <_puts_r+0x38>
 800ec56:	3e01      	subs	r6, #1
 800ec58:	e7e4      	b.n	800ec24 <_puts_r+0x68>
 800ec5a:	6823      	ldr	r3, [r4, #0]
 800ec5c:	1c5a      	adds	r2, r3, #1
 800ec5e:	6022      	str	r2, [r4, #0]
 800ec60:	220a      	movs	r2, #10
 800ec62:	701a      	strb	r2, [r3, #0]
 800ec64:	e7ee      	b.n	800ec44 <_puts_r+0x88>
	...

0800ec68 <puts>:
 800ec68:	4b02      	ldr	r3, [pc, #8]	@ (800ec74 <puts+0xc>)
 800ec6a:	4601      	mov	r1, r0
 800ec6c:	6818      	ldr	r0, [r3, #0]
 800ec6e:	f7ff bfa5 	b.w	800ebbc <_puts_r>
 800ec72:	bf00      	nop
 800ec74:	20000178 	.word	0x20000178

0800ec78 <__sread>:
 800ec78:	b510      	push	{r4, lr}
 800ec7a:	460c      	mov	r4, r1
 800ec7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec80:	f000 f900 	bl	800ee84 <_read_r>
 800ec84:	2800      	cmp	r0, #0
 800ec86:	bfab      	itete	ge
 800ec88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ec8a:	89a3      	ldrhlt	r3, [r4, #12]
 800ec8c:	181b      	addge	r3, r3, r0
 800ec8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ec92:	bfac      	ite	ge
 800ec94:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ec96:	81a3      	strhlt	r3, [r4, #12]
 800ec98:	bd10      	pop	{r4, pc}

0800ec9a <__swrite>:
 800ec9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec9e:	461f      	mov	r7, r3
 800eca0:	898b      	ldrh	r3, [r1, #12]
 800eca2:	05db      	lsls	r3, r3, #23
 800eca4:	4605      	mov	r5, r0
 800eca6:	460c      	mov	r4, r1
 800eca8:	4616      	mov	r6, r2
 800ecaa:	d505      	bpl.n	800ecb8 <__swrite+0x1e>
 800ecac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecb0:	2302      	movs	r3, #2
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	f000 f8d4 	bl	800ee60 <_lseek_r>
 800ecb8:	89a3      	ldrh	r3, [r4, #12]
 800ecba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ecbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ecc2:	81a3      	strh	r3, [r4, #12]
 800ecc4:	4632      	mov	r2, r6
 800ecc6:	463b      	mov	r3, r7
 800ecc8:	4628      	mov	r0, r5
 800ecca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecce:	f000 b8eb 	b.w	800eea8 <_write_r>

0800ecd2 <__sseek>:
 800ecd2:	b510      	push	{r4, lr}
 800ecd4:	460c      	mov	r4, r1
 800ecd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecda:	f000 f8c1 	bl	800ee60 <_lseek_r>
 800ecde:	1c43      	adds	r3, r0, #1
 800ece0:	89a3      	ldrh	r3, [r4, #12]
 800ece2:	bf15      	itete	ne
 800ece4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ece6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ecea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ecee:	81a3      	strheq	r3, [r4, #12]
 800ecf0:	bf18      	it	ne
 800ecf2:	81a3      	strhne	r3, [r4, #12]
 800ecf4:	bd10      	pop	{r4, pc}

0800ecf6 <__sclose>:
 800ecf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecfa:	f000 b8a1 	b.w	800ee40 <_close_r>

0800ecfe <__swbuf_r>:
 800ecfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed00:	460e      	mov	r6, r1
 800ed02:	4614      	mov	r4, r2
 800ed04:	4605      	mov	r5, r0
 800ed06:	b118      	cbz	r0, 800ed10 <__swbuf_r+0x12>
 800ed08:	6a03      	ldr	r3, [r0, #32]
 800ed0a:	b90b      	cbnz	r3, 800ed10 <__swbuf_r+0x12>
 800ed0c:	f7ff ff20 	bl	800eb50 <__sinit>
 800ed10:	69a3      	ldr	r3, [r4, #24]
 800ed12:	60a3      	str	r3, [r4, #8]
 800ed14:	89a3      	ldrh	r3, [r4, #12]
 800ed16:	071a      	lsls	r2, r3, #28
 800ed18:	d501      	bpl.n	800ed1e <__swbuf_r+0x20>
 800ed1a:	6923      	ldr	r3, [r4, #16]
 800ed1c:	b943      	cbnz	r3, 800ed30 <__swbuf_r+0x32>
 800ed1e:	4621      	mov	r1, r4
 800ed20:	4628      	mov	r0, r5
 800ed22:	f000 f82b 	bl	800ed7c <__swsetup_r>
 800ed26:	b118      	cbz	r0, 800ed30 <__swbuf_r+0x32>
 800ed28:	f04f 37ff 	mov.w	r7, #4294967295
 800ed2c:	4638      	mov	r0, r7
 800ed2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed30:	6823      	ldr	r3, [r4, #0]
 800ed32:	6922      	ldr	r2, [r4, #16]
 800ed34:	1a98      	subs	r0, r3, r2
 800ed36:	6963      	ldr	r3, [r4, #20]
 800ed38:	b2f6      	uxtb	r6, r6
 800ed3a:	4283      	cmp	r3, r0
 800ed3c:	4637      	mov	r7, r6
 800ed3e:	dc05      	bgt.n	800ed4c <__swbuf_r+0x4e>
 800ed40:	4621      	mov	r1, r4
 800ed42:	4628      	mov	r0, r5
 800ed44:	f001 fd94 	bl	8010870 <_fflush_r>
 800ed48:	2800      	cmp	r0, #0
 800ed4a:	d1ed      	bne.n	800ed28 <__swbuf_r+0x2a>
 800ed4c:	68a3      	ldr	r3, [r4, #8]
 800ed4e:	3b01      	subs	r3, #1
 800ed50:	60a3      	str	r3, [r4, #8]
 800ed52:	6823      	ldr	r3, [r4, #0]
 800ed54:	1c5a      	adds	r2, r3, #1
 800ed56:	6022      	str	r2, [r4, #0]
 800ed58:	701e      	strb	r6, [r3, #0]
 800ed5a:	6962      	ldr	r2, [r4, #20]
 800ed5c:	1c43      	adds	r3, r0, #1
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	d004      	beq.n	800ed6c <__swbuf_r+0x6e>
 800ed62:	89a3      	ldrh	r3, [r4, #12]
 800ed64:	07db      	lsls	r3, r3, #31
 800ed66:	d5e1      	bpl.n	800ed2c <__swbuf_r+0x2e>
 800ed68:	2e0a      	cmp	r6, #10
 800ed6a:	d1df      	bne.n	800ed2c <__swbuf_r+0x2e>
 800ed6c:	4621      	mov	r1, r4
 800ed6e:	4628      	mov	r0, r5
 800ed70:	f001 fd7e 	bl	8010870 <_fflush_r>
 800ed74:	2800      	cmp	r0, #0
 800ed76:	d0d9      	beq.n	800ed2c <__swbuf_r+0x2e>
 800ed78:	e7d6      	b.n	800ed28 <__swbuf_r+0x2a>
	...

0800ed7c <__swsetup_r>:
 800ed7c:	b538      	push	{r3, r4, r5, lr}
 800ed7e:	4b29      	ldr	r3, [pc, #164]	@ (800ee24 <__swsetup_r+0xa8>)
 800ed80:	4605      	mov	r5, r0
 800ed82:	6818      	ldr	r0, [r3, #0]
 800ed84:	460c      	mov	r4, r1
 800ed86:	b118      	cbz	r0, 800ed90 <__swsetup_r+0x14>
 800ed88:	6a03      	ldr	r3, [r0, #32]
 800ed8a:	b90b      	cbnz	r3, 800ed90 <__swsetup_r+0x14>
 800ed8c:	f7ff fee0 	bl	800eb50 <__sinit>
 800ed90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed94:	0719      	lsls	r1, r3, #28
 800ed96:	d422      	bmi.n	800edde <__swsetup_r+0x62>
 800ed98:	06da      	lsls	r2, r3, #27
 800ed9a:	d407      	bmi.n	800edac <__swsetup_r+0x30>
 800ed9c:	2209      	movs	r2, #9
 800ed9e:	602a      	str	r2, [r5, #0]
 800eda0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eda4:	81a3      	strh	r3, [r4, #12]
 800eda6:	f04f 30ff 	mov.w	r0, #4294967295
 800edaa:	e033      	b.n	800ee14 <__swsetup_r+0x98>
 800edac:	0758      	lsls	r0, r3, #29
 800edae:	d512      	bpl.n	800edd6 <__swsetup_r+0x5a>
 800edb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800edb2:	b141      	cbz	r1, 800edc6 <__swsetup_r+0x4a>
 800edb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800edb8:	4299      	cmp	r1, r3
 800edba:	d002      	beq.n	800edc2 <__swsetup_r+0x46>
 800edbc:	4628      	mov	r0, r5
 800edbe:	f000 ff0f 	bl	800fbe0 <_free_r>
 800edc2:	2300      	movs	r3, #0
 800edc4:	6363      	str	r3, [r4, #52]	@ 0x34
 800edc6:	89a3      	ldrh	r3, [r4, #12]
 800edc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800edcc:	81a3      	strh	r3, [r4, #12]
 800edce:	2300      	movs	r3, #0
 800edd0:	6063      	str	r3, [r4, #4]
 800edd2:	6923      	ldr	r3, [r4, #16]
 800edd4:	6023      	str	r3, [r4, #0]
 800edd6:	89a3      	ldrh	r3, [r4, #12]
 800edd8:	f043 0308 	orr.w	r3, r3, #8
 800eddc:	81a3      	strh	r3, [r4, #12]
 800edde:	6923      	ldr	r3, [r4, #16]
 800ede0:	b94b      	cbnz	r3, 800edf6 <__swsetup_r+0x7a>
 800ede2:	89a3      	ldrh	r3, [r4, #12]
 800ede4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ede8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800edec:	d003      	beq.n	800edf6 <__swsetup_r+0x7a>
 800edee:	4621      	mov	r1, r4
 800edf0:	4628      	mov	r0, r5
 800edf2:	f001 fd8b 	bl	801090c <__smakebuf_r>
 800edf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edfa:	f013 0201 	ands.w	r2, r3, #1
 800edfe:	d00a      	beq.n	800ee16 <__swsetup_r+0x9a>
 800ee00:	2200      	movs	r2, #0
 800ee02:	60a2      	str	r2, [r4, #8]
 800ee04:	6962      	ldr	r2, [r4, #20]
 800ee06:	4252      	negs	r2, r2
 800ee08:	61a2      	str	r2, [r4, #24]
 800ee0a:	6922      	ldr	r2, [r4, #16]
 800ee0c:	b942      	cbnz	r2, 800ee20 <__swsetup_r+0xa4>
 800ee0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ee12:	d1c5      	bne.n	800eda0 <__swsetup_r+0x24>
 800ee14:	bd38      	pop	{r3, r4, r5, pc}
 800ee16:	0799      	lsls	r1, r3, #30
 800ee18:	bf58      	it	pl
 800ee1a:	6962      	ldrpl	r2, [r4, #20]
 800ee1c:	60a2      	str	r2, [r4, #8]
 800ee1e:	e7f4      	b.n	800ee0a <__swsetup_r+0x8e>
 800ee20:	2000      	movs	r0, #0
 800ee22:	e7f7      	b.n	800ee14 <__swsetup_r+0x98>
 800ee24:	20000178 	.word	0x20000178

0800ee28 <memset>:
 800ee28:	4402      	add	r2, r0
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	4293      	cmp	r3, r2
 800ee2e:	d100      	bne.n	800ee32 <memset+0xa>
 800ee30:	4770      	bx	lr
 800ee32:	f803 1b01 	strb.w	r1, [r3], #1
 800ee36:	e7f9      	b.n	800ee2c <memset+0x4>

0800ee38 <_localeconv_r>:
 800ee38:	4800      	ldr	r0, [pc, #0]	@ (800ee3c <_localeconv_r+0x4>)
 800ee3a:	4770      	bx	lr
 800ee3c:	200002b8 	.word	0x200002b8

0800ee40 <_close_r>:
 800ee40:	b538      	push	{r3, r4, r5, lr}
 800ee42:	4d06      	ldr	r5, [pc, #24]	@ (800ee5c <_close_r+0x1c>)
 800ee44:	2300      	movs	r3, #0
 800ee46:	4604      	mov	r4, r0
 800ee48:	4608      	mov	r0, r1
 800ee4a:	602b      	str	r3, [r5, #0]
 800ee4c:	f7f3 fccc 	bl	80027e8 <_close>
 800ee50:	1c43      	adds	r3, r0, #1
 800ee52:	d102      	bne.n	800ee5a <_close_r+0x1a>
 800ee54:	682b      	ldr	r3, [r5, #0]
 800ee56:	b103      	cbz	r3, 800ee5a <_close_r+0x1a>
 800ee58:	6023      	str	r3, [r4, #0]
 800ee5a:	bd38      	pop	{r3, r4, r5, pc}
 800ee5c:	200010f0 	.word	0x200010f0

0800ee60 <_lseek_r>:
 800ee60:	b538      	push	{r3, r4, r5, lr}
 800ee62:	4d07      	ldr	r5, [pc, #28]	@ (800ee80 <_lseek_r+0x20>)
 800ee64:	4604      	mov	r4, r0
 800ee66:	4608      	mov	r0, r1
 800ee68:	4611      	mov	r1, r2
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	602a      	str	r2, [r5, #0]
 800ee6e:	461a      	mov	r2, r3
 800ee70:	f7f3 fce1 	bl	8002836 <_lseek>
 800ee74:	1c43      	adds	r3, r0, #1
 800ee76:	d102      	bne.n	800ee7e <_lseek_r+0x1e>
 800ee78:	682b      	ldr	r3, [r5, #0]
 800ee7a:	b103      	cbz	r3, 800ee7e <_lseek_r+0x1e>
 800ee7c:	6023      	str	r3, [r4, #0]
 800ee7e:	bd38      	pop	{r3, r4, r5, pc}
 800ee80:	200010f0 	.word	0x200010f0

0800ee84 <_read_r>:
 800ee84:	b538      	push	{r3, r4, r5, lr}
 800ee86:	4d07      	ldr	r5, [pc, #28]	@ (800eea4 <_read_r+0x20>)
 800ee88:	4604      	mov	r4, r0
 800ee8a:	4608      	mov	r0, r1
 800ee8c:	4611      	mov	r1, r2
 800ee8e:	2200      	movs	r2, #0
 800ee90:	602a      	str	r2, [r5, #0]
 800ee92:	461a      	mov	r2, r3
 800ee94:	f7f3 fc6f 	bl	8002776 <_read>
 800ee98:	1c43      	adds	r3, r0, #1
 800ee9a:	d102      	bne.n	800eea2 <_read_r+0x1e>
 800ee9c:	682b      	ldr	r3, [r5, #0]
 800ee9e:	b103      	cbz	r3, 800eea2 <_read_r+0x1e>
 800eea0:	6023      	str	r3, [r4, #0]
 800eea2:	bd38      	pop	{r3, r4, r5, pc}
 800eea4:	200010f0 	.word	0x200010f0

0800eea8 <_write_r>:
 800eea8:	b538      	push	{r3, r4, r5, lr}
 800eeaa:	4d07      	ldr	r5, [pc, #28]	@ (800eec8 <_write_r+0x20>)
 800eeac:	4604      	mov	r4, r0
 800eeae:	4608      	mov	r0, r1
 800eeb0:	4611      	mov	r1, r2
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	602a      	str	r2, [r5, #0]
 800eeb6:	461a      	mov	r2, r3
 800eeb8:	f7f3 fc7a 	bl	80027b0 <_write>
 800eebc:	1c43      	adds	r3, r0, #1
 800eebe:	d102      	bne.n	800eec6 <_write_r+0x1e>
 800eec0:	682b      	ldr	r3, [r5, #0]
 800eec2:	b103      	cbz	r3, 800eec6 <_write_r+0x1e>
 800eec4:	6023      	str	r3, [r4, #0]
 800eec6:	bd38      	pop	{r3, r4, r5, pc}
 800eec8:	200010f0 	.word	0x200010f0

0800eecc <__errno>:
 800eecc:	4b01      	ldr	r3, [pc, #4]	@ (800eed4 <__errno+0x8>)
 800eece:	6818      	ldr	r0, [r3, #0]
 800eed0:	4770      	bx	lr
 800eed2:	bf00      	nop
 800eed4:	20000178 	.word	0x20000178

0800eed8 <__libc_init_array>:
 800eed8:	b570      	push	{r4, r5, r6, lr}
 800eeda:	4d0d      	ldr	r5, [pc, #52]	@ (800ef10 <__libc_init_array+0x38>)
 800eedc:	4c0d      	ldr	r4, [pc, #52]	@ (800ef14 <__libc_init_array+0x3c>)
 800eede:	1b64      	subs	r4, r4, r5
 800eee0:	10a4      	asrs	r4, r4, #2
 800eee2:	2600      	movs	r6, #0
 800eee4:	42a6      	cmp	r6, r4
 800eee6:	d109      	bne.n	800eefc <__libc_init_array+0x24>
 800eee8:	4d0b      	ldr	r5, [pc, #44]	@ (800ef18 <__libc_init_array+0x40>)
 800eeea:	4c0c      	ldr	r4, [pc, #48]	@ (800ef1c <__libc_init_array+0x44>)
 800eeec:	f001 fe2c 	bl	8010b48 <_init>
 800eef0:	1b64      	subs	r4, r4, r5
 800eef2:	10a4      	asrs	r4, r4, #2
 800eef4:	2600      	movs	r6, #0
 800eef6:	42a6      	cmp	r6, r4
 800eef8:	d105      	bne.n	800ef06 <__libc_init_array+0x2e>
 800eefa:	bd70      	pop	{r4, r5, r6, pc}
 800eefc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef00:	4798      	blx	r3
 800ef02:	3601      	adds	r6, #1
 800ef04:	e7ee      	b.n	800eee4 <__libc_init_array+0xc>
 800ef06:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef0a:	4798      	blx	r3
 800ef0c:	3601      	adds	r6, #1
 800ef0e:	e7f2      	b.n	800eef6 <__libc_init_array+0x1e>
 800ef10:	08011358 	.word	0x08011358
 800ef14:	08011358 	.word	0x08011358
 800ef18:	08011358 	.word	0x08011358
 800ef1c:	0801135c 	.word	0x0801135c

0800ef20 <__retarget_lock_init_recursive>:
 800ef20:	4770      	bx	lr

0800ef22 <__retarget_lock_acquire_recursive>:
 800ef22:	4770      	bx	lr

0800ef24 <__retarget_lock_release_recursive>:
 800ef24:	4770      	bx	lr

0800ef26 <memcpy>:
 800ef26:	440a      	add	r2, r1
 800ef28:	4291      	cmp	r1, r2
 800ef2a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef2e:	d100      	bne.n	800ef32 <memcpy+0xc>
 800ef30:	4770      	bx	lr
 800ef32:	b510      	push	{r4, lr}
 800ef34:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef38:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef3c:	4291      	cmp	r1, r2
 800ef3e:	d1f9      	bne.n	800ef34 <memcpy+0xe>
 800ef40:	bd10      	pop	{r4, pc}

0800ef42 <quorem>:
 800ef42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef46:	6903      	ldr	r3, [r0, #16]
 800ef48:	690c      	ldr	r4, [r1, #16]
 800ef4a:	42a3      	cmp	r3, r4
 800ef4c:	4607      	mov	r7, r0
 800ef4e:	db7e      	blt.n	800f04e <quorem+0x10c>
 800ef50:	3c01      	subs	r4, #1
 800ef52:	f101 0814 	add.w	r8, r1, #20
 800ef56:	00a3      	lsls	r3, r4, #2
 800ef58:	f100 0514 	add.w	r5, r0, #20
 800ef5c:	9300      	str	r3, [sp, #0]
 800ef5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef62:	9301      	str	r3, [sp, #4]
 800ef64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ef68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef6c:	3301      	adds	r3, #1
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ef74:	fbb2 f6f3 	udiv	r6, r2, r3
 800ef78:	d32e      	bcc.n	800efd8 <quorem+0x96>
 800ef7a:	f04f 0a00 	mov.w	sl, #0
 800ef7e:	46c4      	mov	ip, r8
 800ef80:	46ae      	mov	lr, r5
 800ef82:	46d3      	mov	fp, sl
 800ef84:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ef88:	b298      	uxth	r0, r3
 800ef8a:	fb06 a000 	mla	r0, r6, r0, sl
 800ef8e:	0c02      	lsrs	r2, r0, #16
 800ef90:	0c1b      	lsrs	r3, r3, #16
 800ef92:	fb06 2303 	mla	r3, r6, r3, r2
 800ef96:	f8de 2000 	ldr.w	r2, [lr]
 800ef9a:	b280      	uxth	r0, r0
 800ef9c:	b292      	uxth	r2, r2
 800ef9e:	1a12      	subs	r2, r2, r0
 800efa0:	445a      	add	r2, fp
 800efa2:	f8de 0000 	ldr.w	r0, [lr]
 800efa6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800efaa:	b29b      	uxth	r3, r3
 800efac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800efb0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800efb4:	b292      	uxth	r2, r2
 800efb6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800efba:	45e1      	cmp	r9, ip
 800efbc:	f84e 2b04 	str.w	r2, [lr], #4
 800efc0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800efc4:	d2de      	bcs.n	800ef84 <quorem+0x42>
 800efc6:	9b00      	ldr	r3, [sp, #0]
 800efc8:	58eb      	ldr	r3, [r5, r3]
 800efca:	b92b      	cbnz	r3, 800efd8 <quorem+0x96>
 800efcc:	9b01      	ldr	r3, [sp, #4]
 800efce:	3b04      	subs	r3, #4
 800efd0:	429d      	cmp	r5, r3
 800efd2:	461a      	mov	r2, r3
 800efd4:	d32f      	bcc.n	800f036 <quorem+0xf4>
 800efd6:	613c      	str	r4, [r7, #16]
 800efd8:	4638      	mov	r0, r7
 800efda:	f001 f97b 	bl	80102d4 <__mcmp>
 800efde:	2800      	cmp	r0, #0
 800efe0:	db25      	blt.n	800f02e <quorem+0xec>
 800efe2:	4629      	mov	r1, r5
 800efe4:	2000      	movs	r0, #0
 800efe6:	f858 2b04 	ldr.w	r2, [r8], #4
 800efea:	f8d1 c000 	ldr.w	ip, [r1]
 800efee:	fa1f fe82 	uxth.w	lr, r2
 800eff2:	fa1f f38c 	uxth.w	r3, ip
 800eff6:	eba3 030e 	sub.w	r3, r3, lr
 800effa:	4403      	add	r3, r0
 800effc:	0c12      	lsrs	r2, r2, #16
 800effe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f002:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f006:	b29b      	uxth	r3, r3
 800f008:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f00c:	45c1      	cmp	r9, r8
 800f00e:	f841 3b04 	str.w	r3, [r1], #4
 800f012:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f016:	d2e6      	bcs.n	800efe6 <quorem+0xa4>
 800f018:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f01c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f020:	b922      	cbnz	r2, 800f02c <quorem+0xea>
 800f022:	3b04      	subs	r3, #4
 800f024:	429d      	cmp	r5, r3
 800f026:	461a      	mov	r2, r3
 800f028:	d30b      	bcc.n	800f042 <quorem+0x100>
 800f02a:	613c      	str	r4, [r7, #16]
 800f02c:	3601      	adds	r6, #1
 800f02e:	4630      	mov	r0, r6
 800f030:	b003      	add	sp, #12
 800f032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f036:	6812      	ldr	r2, [r2, #0]
 800f038:	3b04      	subs	r3, #4
 800f03a:	2a00      	cmp	r2, #0
 800f03c:	d1cb      	bne.n	800efd6 <quorem+0x94>
 800f03e:	3c01      	subs	r4, #1
 800f040:	e7c6      	b.n	800efd0 <quorem+0x8e>
 800f042:	6812      	ldr	r2, [r2, #0]
 800f044:	3b04      	subs	r3, #4
 800f046:	2a00      	cmp	r2, #0
 800f048:	d1ef      	bne.n	800f02a <quorem+0xe8>
 800f04a:	3c01      	subs	r4, #1
 800f04c:	e7ea      	b.n	800f024 <quorem+0xe2>
 800f04e:	2000      	movs	r0, #0
 800f050:	e7ee      	b.n	800f030 <quorem+0xee>
 800f052:	0000      	movs	r0, r0
 800f054:	0000      	movs	r0, r0
	...

0800f058 <_dtoa_r>:
 800f058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f05c:	69c7      	ldr	r7, [r0, #28]
 800f05e:	b099      	sub	sp, #100	@ 0x64
 800f060:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f064:	ec55 4b10 	vmov	r4, r5, d0
 800f068:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f06a:	9109      	str	r1, [sp, #36]	@ 0x24
 800f06c:	4683      	mov	fp, r0
 800f06e:	920e      	str	r2, [sp, #56]	@ 0x38
 800f070:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f072:	b97f      	cbnz	r7, 800f094 <_dtoa_r+0x3c>
 800f074:	2010      	movs	r0, #16
 800f076:	f000 fdfd 	bl	800fc74 <malloc>
 800f07a:	4602      	mov	r2, r0
 800f07c:	f8cb 001c 	str.w	r0, [fp, #28]
 800f080:	b920      	cbnz	r0, 800f08c <_dtoa_r+0x34>
 800f082:	4ba7      	ldr	r3, [pc, #668]	@ (800f320 <_dtoa_r+0x2c8>)
 800f084:	21ef      	movs	r1, #239	@ 0xef
 800f086:	48a7      	ldr	r0, [pc, #668]	@ (800f324 <_dtoa_r+0x2cc>)
 800f088:	f001 fcae 	bl	80109e8 <__assert_func>
 800f08c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f090:	6007      	str	r7, [r0, #0]
 800f092:	60c7      	str	r7, [r0, #12]
 800f094:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f098:	6819      	ldr	r1, [r3, #0]
 800f09a:	b159      	cbz	r1, 800f0b4 <_dtoa_r+0x5c>
 800f09c:	685a      	ldr	r2, [r3, #4]
 800f09e:	604a      	str	r2, [r1, #4]
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	4093      	lsls	r3, r2
 800f0a4:	608b      	str	r3, [r1, #8]
 800f0a6:	4658      	mov	r0, fp
 800f0a8:	f000 feda 	bl	800fe60 <_Bfree>
 800f0ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	601a      	str	r2, [r3, #0]
 800f0b4:	1e2b      	subs	r3, r5, #0
 800f0b6:	bfb9      	ittee	lt
 800f0b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f0bc:	9303      	strlt	r3, [sp, #12]
 800f0be:	2300      	movge	r3, #0
 800f0c0:	6033      	strge	r3, [r6, #0]
 800f0c2:	9f03      	ldr	r7, [sp, #12]
 800f0c4:	4b98      	ldr	r3, [pc, #608]	@ (800f328 <_dtoa_r+0x2d0>)
 800f0c6:	bfbc      	itt	lt
 800f0c8:	2201      	movlt	r2, #1
 800f0ca:	6032      	strlt	r2, [r6, #0]
 800f0cc:	43bb      	bics	r3, r7
 800f0ce:	d112      	bne.n	800f0f6 <_dtoa_r+0x9e>
 800f0d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f0d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f0d6:	6013      	str	r3, [r2, #0]
 800f0d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f0dc:	4323      	orrs	r3, r4
 800f0de:	f000 854d 	beq.w	800fb7c <_dtoa_r+0xb24>
 800f0e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f0e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f33c <_dtoa_r+0x2e4>
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	f000 854f 	beq.w	800fb8c <_dtoa_r+0xb34>
 800f0ee:	f10a 0303 	add.w	r3, sl, #3
 800f0f2:	f000 bd49 	b.w	800fb88 <_dtoa_r+0xb30>
 800f0f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	ec51 0b17 	vmov	r0, r1, d7
 800f100:	2300      	movs	r3, #0
 800f102:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f106:	f7f1 fcdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800f10a:	4680      	mov	r8, r0
 800f10c:	b158      	cbz	r0, 800f126 <_dtoa_r+0xce>
 800f10e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f110:	2301      	movs	r3, #1
 800f112:	6013      	str	r3, [r2, #0]
 800f114:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f116:	b113      	cbz	r3, 800f11e <_dtoa_r+0xc6>
 800f118:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f11a:	4b84      	ldr	r3, [pc, #528]	@ (800f32c <_dtoa_r+0x2d4>)
 800f11c:	6013      	str	r3, [r2, #0]
 800f11e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f340 <_dtoa_r+0x2e8>
 800f122:	f000 bd33 	b.w	800fb8c <_dtoa_r+0xb34>
 800f126:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f12a:	aa16      	add	r2, sp, #88	@ 0x58
 800f12c:	a917      	add	r1, sp, #92	@ 0x5c
 800f12e:	4658      	mov	r0, fp
 800f130:	f001 f980 	bl	8010434 <__d2b>
 800f134:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f138:	4681      	mov	r9, r0
 800f13a:	2e00      	cmp	r6, #0
 800f13c:	d077      	beq.n	800f22e <_dtoa_r+0x1d6>
 800f13e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f140:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f144:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f148:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f14c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f150:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f154:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f158:	4619      	mov	r1, r3
 800f15a:	2200      	movs	r2, #0
 800f15c:	4b74      	ldr	r3, [pc, #464]	@ (800f330 <_dtoa_r+0x2d8>)
 800f15e:	f7f1 f893 	bl	8000288 <__aeabi_dsub>
 800f162:	a369      	add	r3, pc, #420	@ (adr r3, 800f308 <_dtoa_r+0x2b0>)
 800f164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f168:	f7f1 fa46 	bl	80005f8 <__aeabi_dmul>
 800f16c:	a368      	add	r3, pc, #416	@ (adr r3, 800f310 <_dtoa_r+0x2b8>)
 800f16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f172:	f7f1 f88b 	bl	800028c <__adddf3>
 800f176:	4604      	mov	r4, r0
 800f178:	4630      	mov	r0, r6
 800f17a:	460d      	mov	r5, r1
 800f17c:	f7f1 f9d2 	bl	8000524 <__aeabi_i2d>
 800f180:	a365      	add	r3, pc, #404	@ (adr r3, 800f318 <_dtoa_r+0x2c0>)
 800f182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f186:	f7f1 fa37 	bl	80005f8 <__aeabi_dmul>
 800f18a:	4602      	mov	r2, r0
 800f18c:	460b      	mov	r3, r1
 800f18e:	4620      	mov	r0, r4
 800f190:	4629      	mov	r1, r5
 800f192:	f7f1 f87b 	bl	800028c <__adddf3>
 800f196:	4604      	mov	r4, r0
 800f198:	460d      	mov	r5, r1
 800f19a:	f7f1 fcdd 	bl	8000b58 <__aeabi_d2iz>
 800f19e:	2200      	movs	r2, #0
 800f1a0:	4607      	mov	r7, r0
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	4620      	mov	r0, r4
 800f1a6:	4629      	mov	r1, r5
 800f1a8:	f7f1 fc98 	bl	8000adc <__aeabi_dcmplt>
 800f1ac:	b140      	cbz	r0, 800f1c0 <_dtoa_r+0x168>
 800f1ae:	4638      	mov	r0, r7
 800f1b0:	f7f1 f9b8 	bl	8000524 <__aeabi_i2d>
 800f1b4:	4622      	mov	r2, r4
 800f1b6:	462b      	mov	r3, r5
 800f1b8:	f7f1 fc86 	bl	8000ac8 <__aeabi_dcmpeq>
 800f1bc:	b900      	cbnz	r0, 800f1c0 <_dtoa_r+0x168>
 800f1be:	3f01      	subs	r7, #1
 800f1c0:	2f16      	cmp	r7, #22
 800f1c2:	d851      	bhi.n	800f268 <_dtoa_r+0x210>
 800f1c4:	4b5b      	ldr	r3, [pc, #364]	@ (800f334 <_dtoa_r+0x2dc>)
 800f1c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f1d2:	f7f1 fc83 	bl	8000adc <__aeabi_dcmplt>
 800f1d6:	2800      	cmp	r0, #0
 800f1d8:	d048      	beq.n	800f26c <_dtoa_r+0x214>
 800f1da:	3f01      	subs	r7, #1
 800f1dc:	2300      	movs	r3, #0
 800f1de:	9312      	str	r3, [sp, #72]	@ 0x48
 800f1e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f1e2:	1b9b      	subs	r3, r3, r6
 800f1e4:	1e5a      	subs	r2, r3, #1
 800f1e6:	bf44      	itt	mi
 800f1e8:	f1c3 0801 	rsbmi	r8, r3, #1
 800f1ec:	2300      	movmi	r3, #0
 800f1ee:	9208      	str	r2, [sp, #32]
 800f1f0:	bf54      	ite	pl
 800f1f2:	f04f 0800 	movpl.w	r8, #0
 800f1f6:	9308      	strmi	r3, [sp, #32]
 800f1f8:	2f00      	cmp	r7, #0
 800f1fa:	db39      	blt.n	800f270 <_dtoa_r+0x218>
 800f1fc:	9b08      	ldr	r3, [sp, #32]
 800f1fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f200:	443b      	add	r3, r7
 800f202:	9308      	str	r3, [sp, #32]
 800f204:	2300      	movs	r3, #0
 800f206:	930a      	str	r3, [sp, #40]	@ 0x28
 800f208:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f20a:	2b09      	cmp	r3, #9
 800f20c:	d864      	bhi.n	800f2d8 <_dtoa_r+0x280>
 800f20e:	2b05      	cmp	r3, #5
 800f210:	bfc4      	itt	gt
 800f212:	3b04      	subgt	r3, #4
 800f214:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f218:	f1a3 0302 	sub.w	r3, r3, #2
 800f21c:	bfcc      	ite	gt
 800f21e:	2400      	movgt	r4, #0
 800f220:	2401      	movle	r4, #1
 800f222:	2b03      	cmp	r3, #3
 800f224:	d863      	bhi.n	800f2ee <_dtoa_r+0x296>
 800f226:	e8df f003 	tbb	[pc, r3]
 800f22a:	372a      	.short	0x372a
 800f22c:	5535      	.short	0x5535
 800f22e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f232:	441e      	add	r6, r3
 800f234:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f238:	2b20      	cmp	r3, #32
 800f23a:	bfc1      	itttt	gt
 800f23c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f240:	409f      	lslgt	r7, r3
 800f242:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f246:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f24a:	bfd6      	itet	le
 800f24c:	f1c3 0320 	rsble	r3, r3, #32
 800f250:	ea47 0003 	orrgt.w	r0, r7, r3
 800f254:	fa04 f003 	lslle.w	r0, r4, r3
 800f258:	f7f1 f954 	bl	8000504 <__aeabi_ui2d>
 800f25c:	2201      	movs	r2, #1
 800f25e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f262:	3e01      	subs	r6, #1
 800f264:	9214      	str	r2, [sp, #80]	@ 0x50
 800f266:	e777      	b.n	800f158 <_dtoa_r+0x100>
 800f268:	2301      	movs	r3, #1
 800f26a:	e7b8      	b.n	800f1de <_dtoa_r+0x186>
 800f26c:	9012      	str	r0, [sp, #72]	@ 0x48
 800f26e:	e7b7      	b.n	800f1e0 <_dtoa_r+0x188>
 800f270:	427b      	negs	r3, r7
 800f272:	930a      	str	r3, [sp, #40]	@ 0x28
 800f274:	2300      	movs	r3, #0
 800f276:	eba8 0807 	sub.w	r8, r8, r7
 800f27a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f27c:	e7c4      	b.n	800f208 <_dtoa_r+0x1b0>
 800f27e:	2300      	movs	r3, #0
 800f280:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f282:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f284:	2b00      	cmp	r3, #0
 800f286:	dc35      	bgt.n	800f2f4 <_dtoa_r+0x29c>
 800f288:	2301      	movs	r3, #1
 800f28a:	9300      	str	r3, [sp, #0]
 800f28c:	9307      	str	r3, [sp, #28]
 800f28e:	461a      	mov	r2, r3
 800f290:	920e      	str	r2, [sp, #56]	@ 0x38
 800f292:	e00b      	b.n	800f2ac <_dtoa_r+0x254>
 800f294:	2301      	movs	r3, #1
 800f296:	e7f3      	b.n	800f280 <_dtoa_r+0x228>
 800f298:	2300      	movs	r3, #0
 800f29a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f29c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f29e:	18fb      	adds	r3, r7, r3
 800f2a0:	9300      	str	r3, [sp, #0]
 800f2a2:	3301      	adds	r3, #1
 800f2a4:	2b01      	cmp	r3, #1
 800f2a6:	9307      	str	r3, [sp, #28]
 800f2a8:	bfb8      	it	lt
 800f2aa:	2301      	movlt	r3, #1
 800f2ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f2b0:	2100      	movs	r1, #0
 800f2b2:	2204      	movs	r2, #4
 800f2b4:	f102 0514 	add.w	r5, r2, #20
 800f2b8:	429d      	cmp	r5, r3
 800f2ba:	d91f      	bls.n	800f2fc <_dtoa_r+0x2a4>
 800f2bc:	6041      	str	r1, [r0, #4]
 800f2be:	4658      	mov	r0, fp
 800f2c0:	f000 fd8e 	bl	800fde0 <_Balloc>
 800f2c4:	4682      	mov	sl, r0
 800f2c6:	2800      	cmp	r0, #0
 800f2c8:	d13c      	bne.n	800f344 <_dtoa_r+0x2ec>
 800f2ca:	4b1b      	ldr	r3, [pc, #108]	@ (800f338 <_dtoa_r+0x2e0>)
 800f2cc:	4602      	mov	r2, r0
 800f2ce:	f240 11af 	movw	r1, #431	@ 0x1af
 800f2d2:	e6d8      	b.n	800f086 <_dtoa_r+0x2e>
 800f2d4:	2301      	movs	r3, #1
 800f2d6:	e7e0      	b.n	800f29a <_dtoa_r+0x242>
 800f2d8:	2401      	movs	r4, #1
 800f2da:	2300      	movs	r3, #0
 800f2dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2de:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f2e0:	f04f 33ff 	mov.w	r3, #4294967295
 800f2e4:	9300      	str	r3, [sp, #0]
 800f2e6:	9307      	str	r3, [sp, #28]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	2312      	movs	r3, #18
 800f2ec:	e7d0      	b.n	800f290 <_dtoa_r+0x238>
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f2f2:	e7f5      	b.n	800f2e0 <_dtoa_r+0x288>
 800f2f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2f6:	9300      	str	r3, [sp, #0]
 800f2f8:	9307      	str	r3, [sp, #28]
 800f2fa:	e7d7      	b.n	800f2ac <_dtoa_r+0x254>
 800f2fc:	3101      	adds	r1, #1
 800f2fe:	0052      	lsls	r2, r2, #1
 800f300:	e7d8      	b.n	800f2b4 <_dtoa_r+0x25c>
 800f302:	bf00      	nop
 800f304:	f3af 8000 	nop.w
 800f308:	636f4361 	.word	0x636f4361
 800f30c:	3fd287a7 	.word	0x3fd287a7
 800f310:	8b60c8b3 	.word	0x8b60c8b3
 800f314:	3fc68a28 	.word	0x3fc68a28
 800f318:	509f79fb 	.word	0x509f79fb
 800f31c:	3fd34413 	.word	0x3fd34413
 800f320:	0801101d 	.word	0x0801101d
 800f324:	08011034 	.word	0x08011034
 800f328:	7ff00000 	.word	0x7ff00000
 800f32c:	08010fed 	.word	0x08010fed
 800f330:	3ff80000 	.word	0x3ff80000
 800f334:	08011130 	.word	0x08011130
 800f338:	0801108c 	.word	0x0801108c
 800f33c:	08011019 	.word	0x08011019
 800f340:	08010fec 	.word	0x08010fec
 800f344:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f348:	6018      	str	r0, [r3, #0]
 800f34a:	9b07      	ldr	r3, [sp, #28]
 800f34c:	2b0e      	cmp	r3, #14
 800f34e:	f200 80a4 	bhi.w	800f49a <_dtoa_r+0x442>
 800f352:	2c00      	cmp	r4, #0
 800f354:	f000 80a1 	beq.w	800f49a <_dtoa_r+0x442>
 800f358:	2f00      	cmp	r7, #0
 800f35a:	dd33      	ble.n	800f3c4 <_dtoa_r+0x36c>
 800f35c:	4bad      	ldr	r3, [pc, #692]	@ (800f614 <_dtoa_r+0x5bc>)
 800f35e:	f007 020f 	and.w	r2, r7, #15
 800f362:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f366:	ed93 7b00 	vldr	d7, [r3]
 800f36a:	05f8      	lsls	r0, r7, #23
 800f36c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f370:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f374:	d516      	bpl.n	800f3a4 <_dtoa_r+0x34c>
 800f376:	4ba8      	ldr	r3, [pc, #672]	@ (800f618 <_dtoa_r+0x5c0>)
 800f378:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f37c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f380:	f7f1 fa64 	bl	800084c <__aeabi_ddiv>
 800f384:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f388:	f004 040f 	and.w	r4, r4, #15
 800f38c:	2603      	movs	r6, #3
 800f38e:	4da2      	ldr	r5, [pc, #648]	@ (800f618 <_dtoa_r+0x5c0>)
 800f390:	b954      	cbnz	r4, 800f3a8 <_dtoa_r+0x350>
 800f392:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f396:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f39a:	f7f1 fa57 	bl	800084c <__aeabi_ddiv>
 800f39e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3a2:	e028      	b.n	800f3f6 <_dtoa_r+0x39e>
 800f3a4:	2602      	movs	r6, #2
 800f3a6:	e7f2      	b.n	800f38e <_dtoa_r+0x336>
 800f3a8:	07e1      	lsls	r1, r4, #31
 800f3aa:	d508      	bpl.n	800f3be <_dtoa_r+0x366>
 800f3ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f3b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f3b4:	f7f1 f920 	bl	80005f8 <__aeabi_dmul>
 800f3b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f3bc:	3601      	adds	r6, #1
 800f3be:	1064      	asrs	r4, r4, #1
 800f3c0:	3508      	adds	r5, #8
 800f3c2:	e7e5      	b.n	800f390 <_dtoa_r+0x338>
 800f3c4:	f000 80d2 	beq.w	800f56c <_dtoa_r+0x514>
 800f3c8:	427c      	negs	r4, r7
 800f3ca:	4b92      	ldr	r3, [pc, #584]	@ (800f614 <_dtoa_r+0x5bc>)
 800f3cc:	4d92      	ldr	r5, [pc, #584]	@ (800f618 <_dtoa_r+0x5c0>)
 800f3ce:	f004 020f 	and.w	r2, r4, #15
 800f3d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f3de:	f7f1 f90b 	bl	80005f8 <__aeabi_dmul>
 800f3e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3e6:	1124      	asrs	r4, r4, #4
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	2602      	movs	r6, #2
 800f3ec:	2c00      	cmp	r4, #0
 800f3ee:	f040 80b2 	bne.w	800f556 <_dtoa_r+0x4fe>
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d1d3      	bne.n	800f39e <_dtoa_r+0x346>
 800f3f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f3f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	f000 80b7 	beq.w	800f570 <_dtoa_r+0x518>
 800f402:	4b86      	ldr	r3, [pc, #536]	@ (800f61c <_dtoa_r+0x5c4>)
 800f404:	2200      	movs	r2, #0
 800f406:	4620      	mov	r0, r4
 800f408:	4629      	mov	r1, r5
 800f40a:	f7f1 fb67 	bl	8000adc <__aeabi_dcmplt>
 800f40e:	2800      	cmp	r0, #0
 800f410:	f000 80ae 	beq.w	800f570 <_dtoa_r+0x518>
 800f414:	9b07      	ldr	r3, [sp, #28]
 800f416:	2b00      	cmp	r3, #0
 800f418:	f000 80aa 	beq.w	800f570 <_dtoa_r+0x518>
 800f41c:	9b00      	ldr	r3, [sp, #0]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	dd37      	ble.n	800f492 <_dtoa_r+0x43a>
 800f422:	1e7b      	subs	r3, r7, #1
 800f424:	9304      	str	r3, [sp, #16]
 800f426:	4620      	mov	r0, r4
 800f428:	4b7d      	ldr	r3, [pc, #500]	@ (800f620 <_dtoa_r+0x5c8>)
 800f42a:	2200      	movs	r2, #0
 800f42c:	4629      	mov	r1, r5
 800f42e:	f7f1 f8e3 	bl	80005f8 <__aeabi_dmul>
 800f432:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f436:	9c00      	ldr	r4, [sp, #0]
 800f438:	3601      	adds	r6, #1
 800f43a:	4630      	mov	r0, r6
 800f43c:	f7f1 f872 	bl	8000524 <__aeabi_i2d>
 800f440:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f444:	f7f1 f8d8 	bl	80005f8 <__aeabi_dmul>
 800f448:	4b76      	ldr	r3, [pc, #472]	@ (800f624 <_dtoa_r+0x5cc>)
 800f44a:	2200      	movs	r2, #0
 800f44c:	f7f0 ff1e 	bl	800028c <__adddf3>
 800f450:	4605      	mov	r5, r0
 800f452:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f456:	2c00      	cmp	r4, #0
 800f458:	f040 808d 	bne.w	800f576 <_dtoa_r+0x51e>
 800f45c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f460:	4b71      	ldr	r3, [pc, #452]	@ (800f628 <_dtoa_r+0x5d0>)
 800f462:	2200      	movs	r2, #0
 800f464:	f7f0 ff10 	bl	8000288 <__aeabi_dsub>
 800f468:	4602      	mov	r2, r0
 800f46a:	460b      	mov	r3, r1
 800f46c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f470:	462a      	mov	r2, r5
 800f472:	4633      	mov	r3, r6
 800f474:	f7f1 fb50 	bl	8000b18 <__aeabi_dcmpgt>
 800f478:	2800      	cmp	r0, #0
 800f47a:	f040 828b 	bne.w	800f994 <_dtoa_r+0x93c>
 800f47e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f482:	462a      	mov	r2, r5
 800f484:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f488:	f7f1 fb28 	bl	8000adc <__aeabi_dcmplt>
 800f48c:	2800      	cmp	r0, #0
 800f48e:	f040 8128 	bne.w	800f6e2 <_dtoa_r+0x68a>
 800f492:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f496:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f49a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	f2c0 815a 	blt.w	800f756 <_dtoa_r+0x6fe>
 800f4a2:	2f0e      	cmp	r7, #14
 800f4a4:	f300 8157 	bgt.w	800f756 <_dtoa_r+0x6fe>
 800f4a8:	4b5a      	ldr	r3, [pc, #360]	@ (800f614 <_dtoa_r+0x5bc>)
 800f4aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f4ae:	ed93 7b00 	vldr	d7, [r3]
 800f4b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	ed8d 7b00 	vstr	d7, [sp]
 800f4ba:	da03      	bge.n	800f4c4 <_dtoa_r+0x46c>
 800f4bc:	9b07      	ldr	r3, [sp, #28]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	f340 8101 	ble.w	800f6c6 <_dtoa_r+0x66e>
 800f4c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f4c8:	4656      	mov	r6, sl
 800f4ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4ce:	4620      	mov	r0, r4
 800f4d0:	4629      	mov	r1, r5
 800f4d2:	f7f1 f9bb 	bl	800084c <__aeabi_ddiv>
 800f4d6:	f7f1 fb3f 	bl	8000b58 <__aeabi_d2iz>
 800f4da:	4680      	mov	r8, r0
 800f4dc:	f7f1 f822 	bl	8000524 <__aeabi_i2d>
 800f4e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4e4:	f7f1 f888 	bl	80005f8 <__aeabi_dmul>
 800f4e8:	4602      	mov	r2, r0
 800f4ea:	460b      	mov	r3, r1
 800f4ec:	4620      	mov	r0, r4
 800f4ee:	4629      	mov	r1, r5
 800f4f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f4f4:	f7f0 fec8 	bl	8000288 <__aeabi_dsub>
 800f4f8:	f806 4b01 	strb.w	r4, [r6], #1
 800f4fc:	9d07      	ldr	r5, [sp, #28]
 800f4fe:	eba6 040a 	sub.w	r4, r6, sl
 800f502:	42a5      	cmp	r5, r4
 800f504:	4602      	mov	r2, r0
 800f506:	460b      	mov	r3, r1
 800f508:	f040 8117 	bne.w	800f73a <_dtoa_r+0x6e2>
 800f50c:	f7f0 febe 	bl	800028c <__adddf3>
 800f510:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f514:	4604      	mov	r4, r0
 800f516:	460d      	mov	r5, r1
 800f518:	f7f1 fafe 	bl	8000b18 <__aeabi_dcmpgt>
 800f51c:	2800      	cmp	r0, #0
 800f51e:	f040 80f9 	bne.w	800f714 <_dtoa_r+0x6bc>
 800f522:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f526:	4620      	mov	r0, r4
 800f528:	4629      	mov	r1, r5
 800f52a:	f7f1 facd 	bl	8000ac8 <__aeabi_dcmpeq>
 800f52e:	b118      	cbz	r0, 800f538 <_dtoa_r+0x4e0>
 800f530:	f018 0f01 	tst.w	r8, #1
 800f534:	f040 80ee 	bne.w	800f714 <_dtoa_r+0x6bc>
 800f538:	4649      	mov	r1, r9
 800f53a:	4658      	mov	r0, fp
 800f53c:	f000 fc90 	bl	800fe60 <_Bfree>
 800f540:	2300      	movs	r3, #0
 800f542:	7033      	strb	r3, [r6, #0]
 800f544:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f546:	3701      	adds	r7, #1
 800f548:	601f      	str	r7, [r3, #0]
 800f54a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	f000 831d 	beq.w	800fb8c <_dtoa_r+0xb34>
 800f552:	601e      	str	r6, [r3, #0]
 800f554:	e31a      	b.n	800fb8c <_dtoa_r+0xb34>
 800f556:	07e2      	lsls	r2, r4, #31
 800f558:	d505      	bpl.n	800f566 <_dtoa_r+0x50e>
 800f55a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f55e:	f7f1 f84b 	bl	80005f8 <__aeabi_dmul>
 800f562:	3601      	adds	r6, #1
 800f564:	2301      	movs	r3, #1
 800f566:	1064      	asrs	r4, r4, #1
 800f568:	3508      	adds	r5, #8
 800f56a:	e73f      	b.n	800f3ec <_dtoa_r+0x394>
 800f56c:	2602      	movs	r6, #2
 800f56e:	e742      	b.n	800f3f6 <_dtoa_r+0x39e>
 800f570:	9c07      	ldr	r4, [sp, #28]
 800f572:	9704      	str	r7, [sp, #16]
 800f574:	e761      	b.n	800f43a <_dtoa_r+0x3e2>
 800f576:	4b27      	ldr	r3, [pc, #156]	@ (800f614 <_dtoa_r+0x5bc>)
 800f578:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f57a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f57e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f582:	4454      	add	r4, sl
 800f584:	2900      	cmp	r1, #0
 800f586:	d053      	beq.n	800f630 <_dtoa_r+0x5d8>
 800f588:	4928      	ldr	r1, [pc, #160]	@ (800f62c <_dtoa_r+0x5d4>)
 800f58a:	2000      	movs	r0, #0
 800f58c:	f7f1 f95e 	bl	800084c <__aeabi_ddiv>
 800f590:	4633      	mov	r3, r6
 800f592:	462a      	mov	r2, r5
 800f594:	f7f0 fe78 	bl	8000288 <__aeabi_dsub>
 800f598:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f59c:	4656      	mov	r6, sl
 800f59e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5a2:	f7f1 fad9 	bl	8000b58 <__aeabi_d2iz>
 800f5a6:	4605      	mov	r5, r0
 800f5a8:	f7f0 ffbc 	bl	8000524 <__aeabi_i2d>
 800f5ac:	4602      	mov	r2, r0
 800f5ae:	460b      	mov	r3, r1
 800f5b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5b4:	f7f0 fe68 	bl	8000288 <__aeabi_dsub>
 800f5b8:	3530      	adds	r5, #48	@ 0x30
 800f5ba:	4602      	mov	r2, r0
 800f5bc:	460b      	mov	r3, r1
 800f5be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f5c2:	f806 5b01 	strb.w	r5, [r6], #1
 800f5c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f5ca:	f7f1 fa87 	bl	8000adc <__aeabi_dcmplt>
 800f5ce:	2800      	cmp	r0, #0
 800f5d0:	d171      	bne.n	800f6b6 <_dtoa_r+0x65e>
 800f5d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f5d6:	4911      	ldr	r1, [pc, #68]	@ (800f61c <_dtoa_r+0x5c4>)
 800f5d8:	2000      	movs	r0, #0
 800f5da:	f7f0 fe55 	bl	8000288 <__aeabi_dsub>
 800f5de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f5e2:	f7f1 fa7b 	bl	8000adc <__aeabi_dcmplt>
 800f5e6:	2800      	cmp	r0, #0
 800f5e8:	f040 8095 	bne.w	800f716 <_dtoa_r+0x6be>
 800f5ec:	42a6      	cmp	r6, r4
 800f5ee:	f43f af50 	beq.w	800f492 <_dtoa_r+0x43a>
 800f5f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f5f6:	4b0a      	ldr	r3, [pc, #40]	@ (800f620 <_dtoa_r+0x5c8>)
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	f7f0 fffd 	bl	80005f8 <__aeabi_dmul>
 800f5fe:	4b08      	ldr	r3, [pc, #32]	@ (800f620 <_dtoa_r+0x5c8>)
 800f600:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f604:	2200      	movs	r2, #0
 800f606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f60a:	f7f0 fff5 	bl	80005f8 <__aeabi_dmul>
 800f60e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f612:	e7c4      	b.n	800f59e <_dtoa_r+0x546>
 800f614:	08011130 	.word	0x08011130
 800f618:	08011108 	.word	0x08011108
 800f61c:	3ff00000 	.word	0x3ff00000
 800f620:	40240000 	.word	0x40240000
 800f624:	401c0000 	.word	0x401c0000
 800f628:	40140000 	.word	0x40140000
 800f62c:	3fe00000 	.word	0x3fe00000
 800f630:	4631      	mov	r1, r6
 800f632:	4628      	mov	r0, r5
 800f634:	f7f0 ffe0 	bl	80005f8 <__aeabi_dmul>
 800f638:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f63c:	9415      	str	r4, [sp, #84]	@ 0x54
 800f63e:	4656      	mov	r6, sl
 800f640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f644:	f7f1 fa88 	bl	8000b58 <__aeabi_d2iz>
 800f648:	4605      	mov	r5, r0
 800f64a:	f7f0 ff6b 	bl	8000524 <__aeabi_i2d>
 800f64e:	4602      	mov	r2, r0
 800f650:	460b      	mov	r3, r1
 800f652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f656:	f7f0 fe17 	bl	8000288 <__aeabi_dsub>
 800f65a:	3530      	adds	r5, #48	@ 0x30
 800f65c:	f806 5b01 	strb.w	r5, [r6], #1
 800f660:	4602      	mov	r2, r0
 800f662:	460b      	mov	r3, r1
 800f664:	42a6      	cmp	r6, r4
 800f666:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f66a:	f04f 0200 	mov.w	r2, #0
 800f66e:	d124      	bne.n	800f6ba <_dtoa_r+0x662>
 800f670:	4bac      	ldr	r3, [pc, #688]	@ (800f924 <_dtoa_r+0x8cc>)
 800f672:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f676:	f7f0 fe09 	bl	800028c <__adddf3>
 800f67a:	4602      	mov	r2, r0
 800f67c:	460b      	mov	r3, r1
 800f67e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f682:	f7f1 fa49 	bl	8000b18 <__aeabi_dcmpgt>
 800f686:	2800      	cmp	r0, #0
 800f688:	d145      	bne.n	800f716 <_dtoa_r+0x6be>
 800f68a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f68e:	49a5      	ldr	r1, [pc, #660]	@ (800f924 <_dtoa_r+0x8cc>)
 800f690:	2000      	movs	r0, #0
 800f692:	f7f0 fdf9 	bl	8000288 <__aeabi_dsub>
 800f696:	4602      	mov	r2, r0
 800f698:	460b      	mov	r3, r1
 800f69a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f69e:	f7f1 fa1d 	bl	8000adc <__aeabi_dcmplt>
 800f6a2:	2800      	cmp	r0, #0
 800f6a4:	f43f aef5 	beq.w	800f492 <_dtoa_r+0x43a>
 800f6a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f6aa:	1e73      	subs	r3, r6, #1
 800f6ac:	9315      	str	r3, [sp, #84]	@ 0x54
 800f6ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f6b2:	2b30      	cmp	r3, #48	@ 0x30
 800f6b4:	d0f8      	beq.n	800f6a8 <_dtoa_r+0x650>
 800f6b6:	9f04      	ldr	r7, [sp, #16]
 800f6b8:	e73e      	b.n	800f538 <_dtoa_r+0x4e0>
 800f6ba:	4b9b      	ldr	r3, [pc, #620]	@ (800f928 <_dtoa_r+0x8d0>)
 800f6bc:	f7f0 ff9c 	bl	80005f8 <__aeabi_dmul>
 800f6c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f6c4:	e7bc      	b.n	800f640 <_dtoa_r+0x5e8>
 800f6c6:	d10c      	bne.n	800f6e2 <_dtoa_r+0x68a>
 800f6c8:	4b98      	ldr	r3, [pc, #608]	@ (800f92c <_dtoa_r+0x8d4>)
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f6d0:	f7f0 ff92 	bl	80005f8 <__aeabi_dmul>
 800f6d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f6d8:	f7f1 fa14 	bl	8000b04 <__aeabi_dcmpge>
 800f6dc:	2800      	cmp	r0, #0
 800f6de:	f000 8157 	beq.w	800f990 <_dtoa_r+0x938>
 800f6e2:	2400      	movs	r4, #0
 800f6e4:	4625      	mov	r5, r4
 800f6e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f6e8:	43db      	mvns	r3, r3
 800f6ea:	9304      	str	r3, [sp, #16]
 800f6ec:	4656      	mov	r6, sl
 800f6ee:	2700      	movs	r7, #0
 800f6f0:	4621      	mov	r1, r4
 800f6f2:	4658      	mov	r0, fp
 800f6f4:	f000 fbb4 	bl	800fe60 <_Bfree>
 800f6f8:	2d00      	cmp	r5, #0
 800f6fa:	d0dc      	beq.n	800f6b6 <_dtoa_r+0x65e>
 800f6fc:	b12f      	cbz	r7, 800f70a <_dtoa_r+0x6b2>
 800f6fe:	42af      	cmp	r7, r5
 800f700:	d003      	beq.n	800f70a <_dtoa_r+0x6b2>
 800f702:	4639      	mov	r1, r7
 800f704:	4658      	mov	r0, fp
 800f706:	f000 fbab 	bl	800fe60 <_Bfree>
 800f70a:	4629      	mov	r1, r5
 800f70c:	4658      	mov	r0, fp
 800f70e:	f000 fba7 	bl	800fe60 <_Bfree>
 800f712:	e7d0      	b.n	800f6b6 <_dtoa_r+0x65e>
 800f714:	9704      	str	r7, [sp, #16]
 800f716:	4633      	mov	r3, r6
 800f718:	461e      	mov	r6, r3
 800f71a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f71e:	2a39      	cmp	r2, #57	@ 0x39
 800f720:	d107      	bne.n	800f732 <_dtoa_r+0x6da>
 800f722:	459a      	cmp	sl, r3
 800f724:	d1f8      	bne.n	800f718 <_dtoa_r+0x6c0>
 800f726:	9a04      	ldr	r2, [sp, #16]
 800f728:	3201      	adds	r2, #1
 800f72a:	9204      	str	r2, [sp, #16]
 800f72c:	2230      	movs	r2, #48	@ 0x30
 800f72e:	f88a 2000 	strb.w	r2, [sl]
 800f732:	781a      	ldrb	r2, [r3, #0]
 800f734:	3201      	adds	r2, #1
 800f736:	701a      	strb	r2, [r3, #0]
 800f738:	e7bd      	b.n	800f6b6 <_dtoa_r+0x65e>
 800f73a:	4b7b      	ldr	r3, [pc, #492]	@ (800f928 <_dtoa_r+0x8d0>)
 800f73c:	2200      	movs	r2, #0
 800f73e:	f7f0 ff5b 	bl	80005f8 <__aeabi_dmul>
 800f742:	2200      	movs	r2, #0
 800f744:	2300      	movs	r3, #0
 800f746:	4604      	mov	r4, r0
 800f748:	460d      	mov	r5, r1
 800f74a:	f7f1 f9bd 	bl	8000ac8 <__aeabi_dcmpeq>
 800f74e:	2800      	cmp	r0, #0
 800f750:	f43f aebb 	beq.w	800f4ca <_dtoa_r+0x472>
 800f754:	e6f0      	b.n	800f538 <_dtoa_r+0x4e0>
 800f756:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f758:	2a00      	cmp	r2, #0
 800f75a:	f000 80db 	beq.w	800f914 <_dtoa_r+0x8bc>
 800f75e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f760:	2a01      	cmp	r2, #1
 800f762:	f300 80bf 	bgt.w	800f8e4 <_dtoa_r+0x88c>
 800f766:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f768:	2a00      	cmp	r2, #0
 800f76a:	f000 80b7 	beq.w	800f8dc <_dtoa_r+0x884>
 800f76e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f772:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f774:	4646      	mov	r6, r8
 800f776:	9a08      	ldr	r2, [sp, #32]
 800f778:	2101      	movs	r1, #1
 800f77a:	441a      	add	r2, r3
 800f77c:	4658      	mov	r0, fp
 800f77e:	4498      	add	r8, r3
 800f780:	9208      	str	r2, [sp, #32]
 800f782:	f000 fc21 	bl	800ffc8 <__i2b>
 800f786:	4605      	mov	r5, r0
 800f788:	b15e      	cbz	r6, 800f7a2 <_dtoa_r+0x74a>
 800f78a:	9b08      	ldr	r3, [sp, #32]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	dd08      	ble.n	800f7a2 <_dtoa_r+0x74a>
 800f790:	42b3      	cmp	r3, r6
 800f792:	9a08      	ldr	r2, [sp, #32]
 800f794:	bfa8      	it	ge
 800f796:	4633      	movge	r3, r6
 800f798:	eba8 0803 	sub.w	r8, r8, r3
 800f79c:	1af6      	subs	r6, r6, r3
 800f79e:	1ad3      	subs	r3, r2, r3
 800f7a0:	9308      	str	r3, [sp, #32]
 800f7a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f7a4:	b1f3      	cbz	r3, 800f7e4 <_dtoa_r+0x78c>
 800f7a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	f000 80b7 	beq.w	800f91c <_dtoa_r+0x8c4>
 800f7ae:	b18c      	cbz	r4, 800f7d4 <_dtoa_r+0x77c>
 800f7b0:	4629      	mov	r1, r5
 800f7b2:	4622      	mov	r2, r4
 800f7b4:	4658      	mov	r0, fp
 800f7b6:	f000 fcc7 	bl	8010148 <__pow5mult>
 800f7ba:	464a      	mov	r2, r9
 800f7bc:	4601      	mov	r1, r0
 800f7be:	4605      	mov	r5, r0
 800f7c0:	4658      	mov	r0, fp
 800f7c2:	f000 fc17 	bl	800fff4 <__multiply>
 800f7c6:	4649      	mov	r1, r9
 800f7c8:	9004      	str	r0, [sp, #16]
 800f7ca:	4658      	mov	r0, fp
 800f7cc:	f000 fb48 	bl	800fe60 <_Bfree>
 800f7d0:	9b04      	ldr	r3, [sp, #16]
 800f7d2:	4699      	mov	r9, r3
 800f7d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f7d6:	1b1a      	subs	r2, r3, r4
 800f7d8:	d004      	beq.n	800f7e4 <_dtoa_r+0x78c>
 800f7da:	4649      	mov	r1, r9
 800f7dc:	4658      	mov	r0, fp
 800f7de:	f000 fcb3 	bl	8010148 <__pow5mult>
 800f7e2:	4681      	mov	r9, r0
 800f7e4:	2101      	movs	r1, #1
 800f7e6:	4658      	mov	r0, fp
 800f7e8:	f000 fbee 	bl	800ffc8 <__i2b>
 800f7ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7ee:	4604      	mov	r4, r0
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	f000 81cf 	beq.w	800fb94 <_dtoa_r+0xb3c>
 800f7f6:	461a      	mov	r2, r3
 800f7f8:	4601      	mov	r1, r0
 800f7fa:	4658      	mov	r0, fp
 800f7fc:	f000 fca4 	bl	8010148 <__pow5mult>
 800f800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f802:	2b01      	cmp	r3, #1
 800f804:	4604      	mov	r4, r0
 800f806:	f300 8095 	bgt.w	800f934 <_dtoa_r+0x8dc>
 800f80a:	9b02      	ldr	r3, [sp, #8]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	f040 8087 	bne.w	800f920 <_dtoa_r+0x8c8>
 800f812:	9b03      	ldr	r3, [sp, #12]
 800f814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f818:	2b00      	cmp	r3, #0
 800f81a:	f040 8089 	bne.w	800f930 <_dtoa_r+0x8d8>
 800f81e:	9b03      	ldr	r3, [sp, #12]
 800f820:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f824:	0d1b      	lsrs	r3, r3, #20
 800f826:	051b      	lsls	r3, r3, #20
 800f828:	b12b      	cbz	r3, 800f836 <_dtoa_r+0x7de>
 800f82a:	9b08      	ldr	r3, [sp, #32]
 800f82c:	3301      	adds	r3, #1
 800f82e:	9308      	str	r3, [sp, #32]
 800f830:	f108 0801 	add.w	r8, r8, #1
 800f834:	2301      	movs	r3, #1
 800f836:	930a      	str	r3, [sp, #40]	@ 0x28
 800f838:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	f000 81b0 	beq.w	800fba0 <_dtoa_r+0xb48>
 800f840:	6923      	ldr	r3, [r4, #16]
 800f842:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f846:	6918      	ldr	r0, [r3, #16]
 800f848:	f000 fb72 	bl	800ff30 <__hi0bits>
 800f84c:	f1c0 0020 	rsb	r0, r0, #32
 800f850:	9b08      	ldr	r3, [sp, #32]
 800f852:	4418      	add	r0, r3
 800f854:	f010 001f 	ands.w	r0, r0, #31
 800f858:	d077      	beq.n	800f94a <_dtoa_r+0x8f2>
 800f85a:	f1c0 0320 	rsb	r3, r0, #32
 800f85e:	2b04      	cmp	r3, #4
 800f860:	dd6b      	ble.n	800f93a <_dtoa_r+0x8e2>
 800f862:	9b08      	ldr	r3, [sp, #32]
 800f864:	f1c0 001c 	rsb	r0, r0, #28
 800f868:	4403      	add	r3, r0
 800f86a:	4480      	add	r8, r0
 800f86c:	4406      	add	r6, r0
 800f86e:	9308      	str	r3, [sp, #32]
 800f870:	f1b8 0f00 	cmp.w	r8, #0
 800f874:	dd05      	ble.n	800f882 <_dtoa_r+0x82a>
 800f876:	4649      	mov	r1, r9
 800f878:	4642      	mov	r2, r8
 800f87a:	4658      	mov	r0, fp
 800f87c:	f000 fcbe 	bl	80101fc <__lshift>
 800f880:	4681      	mov	r9, r0
 800f882:	9b08      	ldr	r3, [sp, #32]
 800f884:	2b00      	cmp	r3, #0
 800f886:	dd05      	ble.n	800f894 <_dtoa_r+0x83c>
 800f888:	4621      	mov	r1, r4
 800f88a:	461a      	mov	r2, r3
 800f88c:	4658      	mov	r0, fp
 800f88e:	f000 fcb5 	bl	80101fc <__lshift>
 800f892:	4604      	mov	r4, r0
 800f894:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f896:	2b00      	cmp	r3, #0
 800f898:	d059      	beq.n	800f94e <_dtoa_r+0x8f6>
 800f89a:	4621      	mov	r1, r4
 800f89c:	4648      	mov	r0, r9
 800f89e:	f000 fd19 	bl	80102d4 <__mcmp>
 800f8a2:	2800      	cmp	r0, #0
 800f8a4:	da53      	bge.n	800f94e <_dtoa_r+0x8f6>
 800f8a6:	1e7b      	subs	r3, r7, #1
 800f8a8:	9304      	str	r3, [sp, #16]
 800f8aa:	4649      	mov	r1, r9
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	220a      	movs	r2, #10
 800f8b0:	4658      	mov	r0, fp
 800f8b2:	f000 faf7 	bl	800fea4 <__multadd>
 800f8b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f8b8:	4681      	mov	r9, r0
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	f000 8172 	beq.w	800fba4 <_dtoa_r+0xb4c>
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	4629      	mov	r1, r5
 800f8c4:	220a      	movs	r2, #10
 800f8c6:	4658      	mov	r0, fp
 800f8c8:	f000 faec 	bl	800fea4 <__multadd>
 800f8cc:	9b00      	ldr	r3, [sp, #0]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	4605      	mov	r5, r0
 800f8d2:	dc67      	bgt.n	800f9a4 <_dtoa_r+0x94c>
 800f8d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8d6:	2b02      	cmp	r3, #2
 800f8d8:	dc41      	bgt.n	800f95e <_dtoa_r+0x906>
 800f8da:	e063      	b.n	800f9a4 <_dtoa_r+0x94c>
 800f8dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f8de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f8e2:	e746      	b.n	800f772 <_dtoa_r+0x71a>
 800f8e4:	9b07      	ldr	r3, [sp, #28]
 800f8e6:	1e5c      	subs	r4, r3, #1
 800f8e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8ea:	42a3      	cmp	r3, r4
 800f8ec:	bfbf      	itttt	lt
 800f8ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f8f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f8f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f8f4:	1ae3      	sublt	r3, r4, r3
 800f8f6:	bfb4      	ite	lt
 800f8f8:	18d2      	addlt	r2, r2, r3
 800f8fa:	1b1c      	subge	r4, r3, r4
 800f8fc:	9b07      	ldr	r3, [sp, #28]
 800f8fe:	bfbc      	itt	lt
 800f900:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f902:	2400      	movlt	r4, #0
 800f904:	2b00      	cmp	r3, #0
 800f906:	bfb5      	itete	lt
 800f908:	eba8 0603 	sublt.w	r6, r8, r3
 800f90c:	9b07      	ldrge	r3, [sp, #28]
 800f90e:	2300      	movlt	r3, #0
 800f910:	4646      	movge	r6, r8
 800f912:	e730      	b.n	800f776 <_dtoa_r+0x71e>
 800f914:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f916:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f918:	4646      	mov	r6, r8
 800f91a:	e735      	b.n	800f788 <_dtoa_r+0x730>
 800f91c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f91e:	e75c      	b.n	800f7da <_dtoa_r+0x782>
 800f920:	2300      	movs	r3, #0
 800f922:	e788      	b.n	800f836 <_dtoa_r+0x7de>
 800f924:	3fe00000 	.word	0x3fe00000
 800f928:	40240000 	.word	0x40240000
 800f92c:	40140000 	.word	0x40140000
 800f930:	9b02      	ldr	r3, [sp, #8]
 800f932:	e780      	b.n	800f836 <_dtoa_r+0x7de>
 800f934:	2300      	movs	r3, #0
 800f936:	930a      	str	r3, [sp, #40]	@ 0x28
 800f938:	e782      	b.n	800f840 <_dtoa_r+0x7e8>
 800f93a:	d099      	beq.n	800f870 <_dtoa_r+0x818>
 800f93c:	9a08      	ldr	r2, [sp, #32]
 800f93e:	331c      	adds	r3, #28
 800f940:	441a      	add	r2, r3
 800f942:	4498      	add	r8, r3
 800f944:	441e      	add	r6, r3
 800f946:	9208      	str	r2, [sp, #32]
 800f948:	e792      	b.n	800f870 <_dtoa_r+0x818>
 800f94a:	4603      	mov	r3, r0
 800f94c:	e7f6      	b.n	800f93c <_dtoa_r+0x8e4>
 800f94e:	9b07      	ldr	r3, [sp, #28]
 800f950:	9704      	str	r7, [sp, #16]
 800f952:	2b00      	cmp	r3, #0
 800f954:	dc20      	bgt.n	800f998 <_dtoa_r+0x940>
 800f956:	9300      	str	r3, [sp, #0]
 800f958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f95a:	2b02      	cmp	r3, #2
 800f95c:	dd1e      	ble.n	800f99c <_dtoa_r+0x944>
 800f95e:	9b00      	ldr	r3, [sp, #0]
 800f960:	2b00      	cmp	r3, #0
 800f962:	f47f aec0 	bne.w	800f6e6 <_dtoa_r+0x68e>
 800f966:	4621      	mov	r1, r4
 800f968:	2205      	movs	r2, #5
 800f96a:	4658      	mov	r0, fp
 800f96c:	f000 fa9a 	bl	800fea4 <__multadd>
 800f970:	4601      	mov	r1, r0
 800f972:	4604      	mov	r4, r0
 800f974:	4648      	mov	r0, r9
 800f976:	f000 fcad 	bl	80102d4 <__mcmp>
 800f97a:	2800      	cmp	r0, #0
 800f97c:	f77f aeb3 	ble.w	800f6e6 <_dtoa_r+0x68e>
 800f980:	4656      	mov	r6, sl
 800f982:	2331      	movs	r3, #49	@ 0x31
 800f984:	f806 3b01 	strb.w	r3, [r6], #1
 800f988:	9b04      	ldr	r3, [sp, #16]
 800f98a:	3301      	adds	r3, #1
 800f98c:	9304      	str	r3, [sp, #16]
 800f98e:	e6ae      	b.n	800f6ee <_dtoa_r+0x696>
 800f990:	9c07      	ldr	r4, [sp, #28]
 800f992:	9704      	str	r7, [sp, #16]
 800f994:	4625      	mov	r5, r4
 800f996:	e7f3      	b.n	800f980 <_dtoa_r+0x928>
 800f998:	9b07      	ldr	r3, [sp, #28]
 800f99a:	9300      	str	r3, [sp, #0]
 800f99c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	f000 8104 	beq.w	800fbac <_dtoa_r+0xb54>
 800f9a4:	2e00      	cmp	r6, #0
 800f9a6:	dd05      	ble.n	800f9b4 <_dtoa_r+0x95c>
 800f9a8:	4629      	mov	r1, r5
 800f9aa:	4632      	mov	r2, r6
 800f9ac:	4658      	mov	r0, fp
 800f9ae:	f000 fc25 	bl	80101fc <__lshift>
 800f9b2:	4605      	mov	r5, r0
 800f9b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d05a      	beq.n	800fa70 <_dtoa_r+0xa18>
 800f9ba:	6869      	ldr	r1, [r5, #4]
 800f9bc:	4658      	mov	r0, fp
 800f9be:	f000 fa0f 	bl	800fde0 <_Balloc>
 800f9c2:	4606      	mov	r6, r0
 800f9c4:	b928      	cbnz	r0, 800f9d2 <_dtoa_r+0x97a>
 800f9c6:	4b84      	ldr	r3, [pc, #528]	@ (800fbd8 <_dtoa_r+0xb80>)
 800f9c8:	4602      	mov	r2, r0
 800f9ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f9ce:	f7ff bb5a 	b.w	800f086 <_dtoa_r+0x2e>
 800f9d2:	692a      	ldr	r2, [r5, #16]
 800f9d4:	3202      	adds	r2, #2
 800f9d6:	0092      	lsls	r2, r2, #2
 800f9d8:	f105 010c 	add.w	r1, r5, #12
 800f9dc:	300c      	adds	r0, #12
 800f9de:	f7ff faa2 	bl	800ef26 <memcpy>
 800f9e2:	2201      	movs	r2, #1
 800f9e4:	4631      	mov	r1, r6
 800f9e6:	4658      	mov	r0, fp
 800f9e8:	f000 fc08 	bl	80101fc <__lshift>
 800f9ec:	f10a 0301 	add.w	r3, sl, #1
 800f9f0:	9307      	str	r3, [sp, #28]
 800f9f2:	9b00      	ldr	r3, [sp, #0]
 800f9f4:	4453      	add	r3, sl
 800f9f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9f8:	9b02      	ldr	r3, [sp, #8]
 800f9fa:	f003 0301 	and.w	r3, r3, #1
 800f9fe:	462f      	mov	r7, r5
 800fa00:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa02:	4605      	mov	r5, r0
 800fa04:	9b07      	ldr	r3, [sp, #28]
 800fa06:	4621      	mov	r1, r4
 800fa08:	3b01      	subs	r3, #1
 800fa0a:	4648      	mov	r0, r9
 800fa0c:	9300      	str	r3, [sp, #0]
 800fa0e:	f7ff fa98 	bl	800ef42 <quorem>
 800fa12:	4639      	mov	r1, r7
 800fa14:	9002      	str	r0, [sp, #8]
 800fa16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fa1a:	4648      	mov	r0, r9
 800fa1c:	f000 fc5a 	bl	80102d4 <__mcmp>
 800fa20:	462a      	mov	r2, r5
 800fa22:	9008      	str	r0, [sp, #32]
 800fa24:	4621      	mov	r1, r4
 800fa26:	4658      	mov	r0, fp
 800fa28:	f000 fc70 	bl	801030c <__mdiff>
 800fa2c:	68c2      	ldr	r2, [r0, #12]
 800fa2e:	4606      	mov	r6, r0
 800fa30:	bb02      	cbnz	r2, 800fa74 <_dtoa_r+0xa1c>
 800fa32:	4601      	mov	r1, r0
 800fa34:	4648      	mov	r0, r9
 800fa36:	f000 fc4d 	bl	80102d4 <__mcmp>
 800fa3a:	4602      	mov	r2, r0
 800fa3c:	4631      	mov	r1, r6
 800fa3e:	4658      	mov	r0, fp
 800fa40:	920e      	str	r2, [sp, #56]	@ 0x38
 800fa42:	f000 fa0d 	bl	800fe60 <_Bfree>
 800fa46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fa4a:	9e07      	ldr	r6, [sp, #28]
 800fa4c:	ea43 0102 	orr.w	r1, r3, r2
 800fa50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa52:	4319      	orrs	r1, r3
 800fa54:	d110      	bne.n	800fa78 <_dtoa_r+0xa20>
 800fa56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fa5a:	d029      	beq.n	800fab0 <_dtoa_r+0xa58>
 800fa5c:	9b08      	ldr	r3, [sp, #32]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	dd02      	ble.n	800fa68 <_dtoa_r+0xa10>
 800fa62:	9b02      	ldr	r3, [sp, #8]
 800fa64:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800fa68:	9b00      	ldr	r3, [sp, #0]
 800fa6a:	f883 8000 	strb.w	r8, [r3]
 800fa6e:	e63f      	b.n	800f6f0 <_dtoa_r+0x698>
 800fa70:	4628      	mov	r0, r5
 800fa72:	e7bb      	b.n	800f9ec <_dtoa_r+0x994>
 800fa74:	2201      	movs	r2, #1
 800fa76:	e7e1      	b.n	800fa3c <_dtoa_r+0x9e4>
 800fa78:	9b08      	ldr	r3, [sp, #32]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	db04      	blt.n	800fa88 <_dtoa_r+0xa30>
 800fa7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fa80:	430b      	orrs	r3, r1
 800fa82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fa84:	430b      	orrs	r3, r1
 800fa86:	d120      	bne.n	800faca <_dtoa_r+0xa72>
 800fa88:	2a00      	cmp	r2, #0
 800fa8a:	dded      	ble.n	800fa68 <_dtoa_r+0xa10>
 800fa8c:	4649      	mov	r1, r9
 800fa8e:	2201      	movs	r2, #1
 800fa90:	4658      	mov	r0, fp
 800fa92:	f000 fbb3 	bl	80101fc <__lshift>
 800fa96:	4621      	mov	r1, r4
 800fa98:	4681      	mov	r9, r0
 800fa9a:	f000 fc1b 	bl	80102d4 <__mcmp>
 800fa9e:	2800      	cmp	r0, #0
 800faa0:	dc03      	bgt.n	800faaa <_dtoa_r+0xa52>
 800faa2:	d1e1      	bne.n	800fa68 <_dtoa_r+0xa10>
 800faa4:	f018 0f01 	tst.w	r8, #1
 800faa8:	d0de      	beq.n	800fa68 <_dtoa_r+0xa10>
 800faaa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800faae:	d1d8      	bne.n	800fa62 <_dtoa_r+0xa0a>
 800fab0:	9a00      	ldr	r2, [sp, #0]
 800fab2:	2339      	movs	r3, #57	@ 0x39
 800fab4:	7013      	strb	r3, [r2, #0]
 800fab6:	4633      	mov	r3, r6
 800fab8:	461e      	mov	r6, r3
 800faba:	3b01      	subs	r3, #1
 800fabc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fac0:	2a39      	cmp	r2, #57	@ 0x39
 800fac2:	d052      	beq.n	800fb6a <_dtoa_r+0xb12>
 800fac4:	3201      	adds	r2, #1
 800fac6:	701a      	strb	r2, [r3, #0]
 800fac8:	e612      	b.n	800f6f0 <_dtoa_r+0x698>
 800faca:	2a00      	cmp	r2, #0
 800facc:	dd07      	ble.n	800fade <_dtoa_r+0xa86>
 800face:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fad2:	d0ed      	beq.n	800fab0 <_dtoa_r+0xa58>
 800fad4:	9a00      	ldr	r2, [sp, #0]
 800fad6:	f108 0301 	add.w	r3, r8, #1
 800fada:	7013      	strb	r3, [r2, #0]
 800fadc:	e608      	b.n	800f6f0 <_dtoa_r+0x698>
 800fade:	9b07      	ldr	r3, [sp, #28]
 800fae0:	9a07      	ldr	r2, [sp, #28]
 800fae2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800fae6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fae8:	4293      	cmp	r3, r2
 800faea:	d028      	beq.n	800fb3e <_dtoa_r+0xae6>
 800faec:	4649      	mov	r1, r9
 800faee:	2300      	movs	r3, #0
 800faf0:	220a      	movs	r2, #10
 800faf2:	4658      	mov	r0, fp
 800faf4:	f000 f9d6 	bl	800fea4 <__multadd>
 800faf8:	42af      	cmp	r7, r5
 800fafa:	4681      	mov	r9, r0
 800fafc:	f04f 0300 	mov.w	r3, #0
 800fb00:	f04f 020a 	mov.w	r2, #10
 800fb04:	4639      	mov	r1, r7
 800fb06:	4658      	mov	r0, fp
 800fb08:	d107      	bne.n	800fb1a <_dtoa_r+0xac2>
 800fb0a:	f000 f9cb 	bl	800fea4 <__multadd>
 800fb0e:	4607      	mov	r7, r0
 800fb10:	4605      	mov	r5, r0
 800fb12:	9b07      	ldr	r3, [sp, #28]
 800fb14:	3301      	adds	r3, #1
 800fb16:	9307      	str	r3, [sp, #28]
 800fb18:	e774      	b.n	800fa04 <_dtoa_r+0x9ac>
 800fb1a:	f000 f9c3 	bl	800fea4 <__multadd>
 800fb1e:	4629      	mov	r1, r5
 800fb20:	4607      	mov	r7, r0
 800fb22:	2300      	movs	r3, #0
 800fb24:	220a      	movs	r2, #10
 800fb26:	4658      	mov	r0, fp
 800fb28:	f000 f9bc 	bl	800fea4 <__multadd>
 800fb2c:	4605      	mov	r5, r0
 800fb2e:	e7f0      	b.n	800fb12 <_dtoa_r+0xaba>
 800fb30:	9b00      	ldr	r3, [sp, #0]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	bfcc      	ite	gt
 800fb36:	461e      	movgt	r6, r3
 800fb38:	2601      	movle	r6, #1
 800fb3a:	4456      	add	r6, sl
 800fb3c:	2700      	movs	r7, #0
 800fb3e:	4649      	mov	r1, r9
 800fb40:	2201      	movs	r2, #1
 800fb42:	4658      	mov	r0, fp
 800fb44:	f000 fb5a 	bl	80101fc <__lshift>
 800fb48:	4621      	mov	r1, r4
 800fb4a:	4681      	mov	r9, r0
 800fb4c:	f000 fbc2 	bl	80102d4 <__mcmp>
 800fb50:	2800      	cmp	r0, #0
 800fb52:	dcb0      	bgt.n	800fab6 <_dtoa_r+0xa5e>
 800fb54:	d102      	bne.n	800fb5c <_dtoa_r+0xb04>
 800fb56:	f018 0f01 	tst.w	r8, #1
 800fb5a:	d1ac      	bne.n	800fab6 <_dtoa_r+0xa5e>
 800fb5c:	4633      	mov	r3, r6
 800fb5e:	461e      	mov	r6, r3
 800fb60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb64:	2a30      	cmp	r2, #48	@ 0x30
 800fb66:	d0fa      	beq.n	800fb5e <_dtoa_r+0xb06>
 800fb68:	e5c2      	b.n	800f6f0 <_dtoa_r+0x698>
 800fb6a:	459a      	cmp	sl, r3
 800fb6c:	d1a4      	bne.n	800fab8 <_dtoa_r+0xa60>
 800fb6e:	9b04      	ldr	r3, [sp, #16]
 800fb70:	3301      	adds	r3, #1
 800fb72:	9304      	str	r3, [sp, #16]
 800fb74:	2331      	movs	r3, #49	@ 0x31
 800fb76:	f88a 3000 	strb.w	r3, [sl]
 800fb7a:	e5b9      	b.n	800f6f0 <_dtoa_r+0x698>
 800fb7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fb7e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fbdc <_dtoa_r+0xb84>
 800fb82:	b11b      	cbz	r3, 800fb8c <_dtoa_r+0xb34>
 800fb84:	f10a 0308 	add.w	r3, sl, #8
 800fb88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fb8a:	6013      	str	r3, [r2, #0]
 800fb8c:	4650      	mov	r0, sl
 800fb8e:	b019      	add	sp, #100	@ 0x64
 800fb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb96:	2b01      	cmp	r3, #1
 800fb98:	f77f ae37 	ble.w	800f80a <_dtoa_r+0x7b2>
 800fb9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fba0:	2001      	movs	r0, #1
 800fba2:	e655      	b.n	800f850 <_dtoa_r+0x7f8>
 800fba4:	9b00      	ldr	r3, [sp, #0]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	f77f aed6 	ble.w	800f958 <_dtoa_r+0x900>
 800fbac:	4656      	mov	r6, sl
 800fbae:	4621      	mov	r1, r4
 800fbb0:	4648      	mov	r0, r9
 800fbb2:	f7ff f9c6 	bl	800ef42 <quorem>
 800fbb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fbba:	f806 8b01 	strb.w	r8, [r6], #1
 800fbbe:	9b00      	ldr	r3, [sp, #0]
 800fbc0:	eba6 020a 	sub.w	r2, r6, sl
 800fbc4:	4293      	cmp	r3, r2
 800fbc6:	ddb3      	ble.n	800fb30 <_dtoa_r+0xad8>
 800fbc8:	4649      	mov	r1, r9
 800fbca:	2300      	movs	r3, #0
 800fbcc:	220a      	movs	r2, #10
 800fbce:	4658      	mov	r0, fp
 800fbd0:	f000 f968 	bl	800fea4 <__multadd>
 800fbd4:	4681      	mov	r9, r0
 800fbd6:	e7ea      	b.n	800fbae <_dtoa_r+0xb56>
 800fbd8:	0801108c 	.word	0x0801108c
 800fbdc:	08011010 	.word	0x08011010

0800fbe0 <_free_r>:
 800fbe0:	b538      	push	{r3, r4, r5, lr}
 800fbe2:	4605      	mov	r5, r0
 800fbe4:	2900      	cmp	r1, #0
 800fbe6:	d041      	beq.n	800fc6c <_free_r+0x8c>
 800fbe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbec:	1f0c      	subs	r4, r1, #4
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	bfb8      	it	lt
 800fbf2:	18e4      	addlt	r4, r4, r3
 800fbf4:	f000 f8e8 	bl	800fdc8 <__malloc_lock>
 800fbf8:	4a1d      	ldr	r2, [pc, #116]	@ (800fc70 <_free_r+0x90>)
 800fbfa:	6813      	ldr	r3, [r2, #0]
 800fbfc:	b933      	cbnz	r3, 800fc0c <_free_r+0x2c>
 800fbfe:	6063      	str	r3, [r4, #4]
 800fc00:	6014      	str	r4, [r2, #0]
 800fc02:	4628      	mov	r0, r5
 800fc04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc08:	f000 b8e4 	b.w	800fdd4 <__malloc_unlock>
 800fc0c:	42a3      	cmp	r3, r4
 800fc0e:	d908      	bls.n	800fc22 <_free_r+0x42>
 800fc10:	6820      	ldr	r0, [r4, #0]
 800fc12:	1821      	adds	r1, r4, r0
 800fc14:	428b      	cmp	r3, r1
 800fc16:	bf01      	itttt	eq
 800fc18:	6819      	ldreq	r1, [r3, #0]
 800fc1a:	685b      	ldreq	r3, [r3, #4]
 800fc1c:	1809      	addeq	r1, r1, r0
 800fc1e:	6021      	streq	r1, [r4, #0]
 800fc20:	e7ed      	b.n	800fbfe <_free_r+0x1e>
 800fc22:	461a      	mov	r2, r3
 800fc24:	685b      	ldr	r3, [r3, #4]
 800fc26:	b10b      	cbz	r3, 800fc2c <_free_r+0x4c>
 800fc28:	42a3      	cmp	r3, r4
 800fc2a:	d9fa      	bls.n	800fc22 <_free_r+0x42>
 800fc2c:	6811      	ldr	r1, [r2, #0]
 800fc2e:	1850      	adds	r0, r2, r1
 800fc30:	42a0      	cmp	r0, r4
 800fc32:	d10b      	bne.n	800fc4c <_free_r+0x6c>
 800fc34:	6820      	ldr	r0, [r4, #0]
 800fc36:	4401      	add	r1, r0
 800fc38:	1850      	adds	r0, r2, r1
 800fc3a:	4283      	cmp	r3, r0
 800fc3c:	6011      	str	r1, [r2, #0]
 800fc3e:	d1e0      	bne.n	800fc02 <_free_r+0x22>
 800fc40:	6818      	ldr	r0, [r3, #0]
 800fc42:	685b      	ldr	r3, [r3, #4]
 800fc44:	6053      	str	r3, [r2, #4]
 800fc46:	4408      	add	r0, r1
 800fc48:	6010      	str	r0, [r2, #0]
 800fc4a:	e7da      	b.n	800fc02 <_free_r+0x22>
 800fc4c:	d902      	bls.n	800fc54 <_free_r+0x74>
 800fc4e:	230c      	movs	r3, #12
 800fc50:	602b      	str	r3, [r5, #0]
 800fc52:	e7d6      	b.n	800fc02 <_free_r+0x22>
 800fc54:	6820      	ldr	r0, [r4, #0]
 800fc56:	1821      	adds	r1, r4, r0
 800fc58:	428b      	cmp	r3, r1
 800fc5a:	bf04      	itt	eq
 800fc5c:	6819      	ldreq	r1, [r3, #0]
 800fc5e:	685b      	ldreq	r3, [r3, #4]
 800fc60:	6063      	str	r3, [r4, #4]
 800fc62:	bf04      	itt	eq
 800fc64:	1809      	addeq	r1, r1, r0
 800fc66:	6021      	streq	r1, [r4, #0]
 800fc68:	6054      	str	r4, [r2, #4]
 800fc6a:	e7ca      	b.n	800fc02 <_free_r+0x22>
 800fc6c:	bd38      	pop	{r3, r4, r5, pc}
 800fc6e:	bf00      	nop
 800fc70:	200010fc 	.word	0x200010fc

0800fc74 <malloc>:
 800fc74:	4b02      	ldr	r3, [pc, #8]	@ (800fc80 <malloc+0xc>)
 800fc76:	4601      	mov	r1, r0
 800fc78:	6818      	ldr	r0, [r3, #0]
 800fc7a:	f000 b825 	b.w	800fcc8 <_malloc_r>
 800fc7e:	bf00      	nop
 800fc80:	20000178 	.word	0x20000178

0800fc84 <sbrk_aligned>:
 800fc84:	b570      	push	{r4, r5, r6, lr}
 800fc86:	4e0f      	ldr	r6, [pc, #60]	@ (800fcc4 <sbrk_aligned+0x40>)
 800fc88:	460c      	mov	r4, r1
 800fc8a:	6831      	ldr	r1, [r6, #0]
 800fc8c:	4605      	mov	r5, r0
 800fc8e:	b911      	cbnz	r1, 800fc96 <sbrk_aligned+0x12>
 800fc90:	f000 fe9a 	bl	80109c8 <_sbrk_r>
 800fc94:	6030      	str	r0, [r6, #0]
 800fc96:	4621      	mov	r1, r4
 800fc98:	4628      	mov	r0, r5
 800fc9a:	f000 fe95 	bl	80109c8 <_sbrk_r>
 800fc9e:	1c43      	adds	r3, r0, #1
 800fca0:	d103      	bne.n	800fcaa <sbrk_aligned+0x26>
 800fca2:	f04f 34ff 	mov.w	r4, #4294967295
 800fca6:	4620      	mov	r0, r4
 800fca8:	bd70      	pop	{r4, r5, r6, pc}
 800fcaa:	1cc4      	adds	r4, r0, #3
 800fcac:	f024 0403 	bic.w	r4, r4, #3
 800fcb0:	42a0      	cmp	r0, r4
 800fcb2:	d0f8      	beq.n	800fca6 <sbrk_aligned+0x22>
 800fcb4:	1a21      	subs	r1, r4, r0
 800fcb6:	4628      	mov	r0, r5
 800fcb8:	f000 fe86 	bl	80109c8 <_sbrk_r>
 800fcbc:	3001      	adds	r0, #1
 800fcbe:	d1f2      	bne.n	800fca6 <sbrk_aligned+0x22>
 800fcc0:	e7ef      	b.n	800fca2 <sbrk_aligned+0x1e>
 800fcc2:	bf00      	nop
 800fcc4:	200010f8 	.word	0x200010f8

0800fcc8 <_malloc_r>:
 800fcc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fccc:	1ccd      	adds	r5, r1, #3
 800fcce:	f025 0503 	bic.w	r5, r5, #3
 800fcd2:	3508      	adds	r5, #8
 800fcd4:	2d0c      	cmp	r5, #12
 800fcd6:	bf38      	it	cc
 800fcd8:	250c      	movcc	r5, #12
 800fcda:	2d00      	cmp	r5, #0
 800fcdc:	4606      	mov	r6, r0
 800fcde:	db01      	blt.n	800fce4 <_malloc_r+0x1c>
 800fce0:	42a9      	cmp	r1, r5
 800fce2:	d904      	bls.n	800fcee <_malloc_r+0x26>
 800fce4:	230c      	movs	r3, #12
 800fce6:	6033      	str	r3, [r6, #0]
 800fce8:	2000      	movs	r0, #0
 800fcea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fdc4 <_malloc_r+0xfc>
 800fcf2:	f000 f869 	bl	800fdc8 <__malloc_lock>
 800fcf6:	f8d8 3000 	ldr.w	r3, [r8]
 800fcfa:	461c      	mov	r4, r3
 800fcfc:	bb44      	cbnz	r4, 800fd50 <_malloc_r+0x88>
 800fcfe:	4629      	mov	r1, r5
 800fd00:	4630      	mov	r0, r6
 800fd02:	f7ff ffbf 	bl	800fc84 <sbrk_aligned>
 800fd06:	1c43      	adds	r3, r0, #1
 800fd08:	4604      	mov	r4, r0
 800fd0a:	d158      	bne.n	800fdbe <_malloc_r+0xf6>
 800fd0c:	f8d8 4000 	ldr.w	r4, [r8]
 800fd10:	4627      	mov	r7, r4
 800fd12:	2f00      	cmp	r7, #0
 800fd14:	d143      	bne.n	800fd9e <_malloc_r+0xd6>
 800fd16:	2c00      	cmp	r4, #0
 800fd18:	d04b      	beq.n	800fdb2 <_malloc_r+0xea>
 800fd1a:	6823      	ldr	r3, [r4, #0]
 800fd1c:	4639      	mov	r1, r7
 800fd1e:	4630      	mov	r0, r6
 800fd20:	eb04 0903 	add.w	r9, r4, r3
 800fd24:	f000 fe50 	bl	80109c8 <_sbrk_r>
 800fd28:	4581      	cmp	r9, r0
 800fd2a:	d142      	bne.n	800fdb2 <_malloc_r+0xea>
 800fd2c:	6821      	ldr	r1, [r4, #0]
 800fd2e:	1a6d      	subs	r5, r5, r1
 800fd30:	4629      	mov	r1, r5
 800fd32:	4630      	mov	r0, r6
 800fd34:	f7ff ffa6 	bl	800fc84 <sbrk_aligned>
 800fd38:	3001      	adds	r0, #1
 800fd3a:	d03a      	beq.n	800fdb2 <_malloc_r+0xea>
 800fd3c:	6823      	ldr	r3, [r4, #0]
 800fd3e:	442b      	add	r3, r5
 800fd40:	6023      	str	r3, [r4, #0]
 800fd42:	f8d8 3000 	ldr.w	r3, [r8]
 800fd46:	685a      	ldr	r2, [r3, #4]
 800fd48:	bb62      	cbnz	r2, 800fda4 <_malloc_r+0xdc>
 800fd4a:	f8c8 7000 	str.w	r7, [r8]
 800fd4e:	e00f      	b.n	800fd70 <_malloc_r+0xa8>
 800fd50:	6822      	ldr	r2, [r4, #0]
 800fd52:	1b52      	subs	r2, r2, r5
 800fd54:	d420      	bmi.n	800fd98 <_malloc_r+0xd0>
 800fd56:	2a0b      	cmp	r2, #11
 800fd58:	d917      	bls.n	800fd8a <_malloc_r+0xc2>
 800fd5a:	1961      	adds	r1, r4, r5
 800fd5c:	42a3      	cmp	r3, r4
 800fd5e:	6025      	str	r5, [r4, #0]
 800fd60:	bf18      	it	ne
 800fd62:	6059      	strne	r1, [r3, #4]
 800fd64:	6863      	ldr	r3, [r4, #4]
 800fd66:	bf08      	it	eq
 800fd68:	f8c8 1000 	streq.w	r1, [r8]
 800fd6c:	5162      	str	r2, [r4, r5]
 800fd6e:	604b      	str	r3, [r1, #4]
 800fd70:	4630      	mov	r0, r6
 800fd72:	f000 f82f 	bl	800fdd4 <__malloc_unlock>
 800fd76:	f104 000b 	add.w	r0, r4, #11
 800fd7a:	1d23      	adds	r3, r4, #4
 800fd7c:	f020 0007 	bic.w	r0, r0, #7
 800fd80:	1ac2      	subs	r2, r0, r3
 800fd82:	bf1c      	itt	ne
 800fd84:	1a1b      	subne	r3, r3, r0
 800fd86:	50a3      	strne	r3, [r4, r2]
 800fd88:	e7af      	b.n	800fcea <_malloc_r+0x22>
 800fd8a:	6862      	ldr	r2, [r4, #4]
 800fd8c:	42a3      	cmp	r3, r4
 800fd8e:	bf0c      	ite	eq
 800fd90:	f8c8 2000 	streq.w	r2, [r8]
 800fd94:	605a      	strne	r2, [r3, #4]
 800fd96:	e7eb      	b.n	800fd70 <_malloc_r+0xa8>
 800fd98:	4623      	mov	r3, r4
 800fd9a:	6864      	ldr	r4, [r4, #4]
 800fd9c:	e7ae      	b.n	800fcfc <_malloc_r+0x34>
 800fd9e:	463c      	mov	r4, r7
 800fda0:	687f      	ldr	r7, [r7, #4]
 800fda2:	e7b6      	b.n	800fd12 <_malloc_r+0x4a>
 800fda4:	461a      	mov	r2, r3
 800fda6:	685b      	ldr	r3, [r3, #4]
 800fda8:	42a3      	cmp	r3, r4
 800fdaa:	d1fb      	bne.n	800fda4 <_malloc_r+0xdc>
 800fdac:	2300      	movs	r3, #0
 800fdae:	6053      	str	r3, [r2, #4]
 800fdb0:	e7de      	b.n	800fd70 <_malloc_r+0xa8>
 800fdb2:	230c      	movs	r3, #12
 800fdb4:	6033      	str	r3, [r6, #0]
 800fdb6:	4630      	mov	r0, r6
 800fdb8:	f000 f80c 	bl	800fdd4 <__malloc_unlock>
 800fdbc:	e794      	b.n	800fce8 <_malloc_r+0x20>
 800fdbe:	6005      	str	r5, [r0, #0]
 800fdc0:	e7d6      	b.n	800fd70 <_malloc_r+0xa8>
 800fdc2:	bf00      	nop
 800fdc4:	200010fc 	.word	0x200010fc

0800fdc8 <__malloc_lock>:
 800fdc8:	4801      	ldr	r0, [pc, #4]	@ (800fdd0 <__malloc_lock+0x8>)
 800fdca:	f7ff b8aa 	b.w	800ef22 <__retarget_lock_acquire_recursive>
 800fdce:	bf00      	nop
 800fdd0:	200010f4 	.word	0x200010f4

0800fdd4 <__malloc_unlock>:
 800fdd4:	4801      	ldr	r0, [pc, #4]	@ (800fddc <__malloc_unlock+0x8>)
 800fdd6:	f7ff b8a5 	b.w	800ef24 <__retarget_lock_release_recursive>
 800fdda:	bf00      	nop
 800fddc:	200010f4 	.word	0x200010f4

0800fde0 <_Balloc>:
 800fde0:	b570      	push	{r4, r5, r6, lr}
 800fde2:	69c6      	ldr	r6, [r0, #28]
 800fde4:	4604      	mov	r4, r0
 800fde6:	460d      	mov	r5, r1
 800fde8:	b976      	cbnz	r6, 800fe08 <_Balloc+0x28>
 800fdea:	2010      	movs	r0, #16
 800fdec:	f7ff ff42 	bl	800fc74 <malloc>
 800fdf0:	4602      	mov	r2, r0
 800fdf2:	61e0      	str	r0, [r4, #28]
 800fdf4:	b920      	cbnz	r0, 800fe00 <_Balloc+0x20>
 800fdf6:	4b18      	ldr	r3, [pc, #96]	@ (800fe58 <_Balloc+0x78>)
 800fdf8:	4818      	ldr	r0, [pc, #96]	@ (800fe5c <_Balloc+0x7c>)
 800fdfa:	216b      	movs	r1, #107	@ 0x6b
 800fdfc:	f000 fdf4 	bl	80109e8 <__assert_func>
 800fe00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fe04:	6006      	str	r6, [r0, #0]
 800fe06:	60c6      	str	r6, [r0, #12]
 800fe08:	69e6      	ldr	r6, [r4, #28]
 800fe0a:	68f3      	ldr	r3, [r6, #12]
 800fe0c:	b183      	cbz	r3, 800fe30 <_Balloc+0x50>
 800fe0e:	69e3      	ldr	r3, [r4, #28]
 800fe10:	68db      	ldr	r3, [r3, #12]
 800fe12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fe16:	b9b8      	cbnz	r0, 800fe48 <_Balloc+0x68>
 800fe18:	2101      	movs	r1, #1
 800fe1a:	fa01 f605 	lsl.w	r6, r1, r5
 800fe1e:	1d72      	adds	r2, r6, #5
 800fe20:	0092      	lsls	r2, r2, #2
 800fe22:	4620      	mov	r0, r4
 800fe24:	f000 fdfe 	bl	8010a24 <_calloc_r>
 800fe28:	b160      	cbz	r0, 800fe44 <_Balloc+0x64>
 800fe2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fe2e:	e00e      	b.n	800fe4e <_Balloc+0x6e>
 800fe30:	2221      	movs	r2, #33	@ 0x21
 800fe32:	2104      	movs	r1, #4
 800fe34:	4620      	mov	r0, r4
 800fe36:	f000 fdf5 	bl	8010a24 <_calloc_r>
 800fe3a:	69e3      	ldr	r3, [r4, #28]
 800fe3c:	60f0      	str	r0, [r6, #12]
 800fe3e:	68db      	ldr	r3, [r3, #12]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d1e4      	bne.n	800fe0e <_Balloc+0x2e>
 800fe44:	2000      	movs	r0, #0
 800fe46:	bd70      	pop	{r4, r5, r6, pc}
 800fe48:	6802      	ldr	r2, [r0, #0]
 800fe4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fe4e:	2300      	movs	r3, #0
 800fe50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fe54:	e7f7      	b.n	800fe46 <_Balloc+0x66>
 800fe56:	bf00      	nop
 800fe58:	0801101d 	.word	0x0801101d
 800fe5c:	0801109d 	.word	0x0801109d

0800fe60 <_Bfree>:
 800fe60:	b570      	push	{r4, r5, r6, lr}
 800fe62:	69c6      	ldr	r6, [r0, #28]
 800fe64:	4605      	mov	r5, r0
 800fe66:	460c      	mov	r4, r1
 800fe68:	b976      	cbnz	r6, 800fe88 <_Bfree+0x28>
 800fe6a:	2010      	movs	r0, #16
 800fe6c:	f7ff ff02 	bl	800fc74 <malloc>
 800fe70:	4602      	mov	r2, r0
 800fe72:	61e8      	str	r0, [r5, #28]
 800fe74:	b920      	cbnz	r0, 800fe80 <_Bfree+0x20>
 800fe76:	4b09      	ldr	r3, [pc, #36]	@ (800fe9c <_Bfree+0x3c>)
 800fe78:	4809      	ldr	r0, [pc, #36]	@ (800fea0 <_Bfree+0x40>)
 800fe7a:	218f      	movs	r1, #143	@ 0x8f
 800fe7c:	f000 fdb4 	bl	80109e8 <__assert_func>
 800fe80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fe84:	6006      	str	r6, [r0, #0]
 800fe86:	60c6      	str	r6, [r0, #12]
 800fe88:	b13c      	cbz	r4, 800fe9a <_Bfree+0x3a>
 800fe8a:	69eb      	ldr	r3, [r5, #28]
 800fe8c:	6862      	ldr	r2, [r4, #4]
 800fe8e:	68db      	ldr	r3, [r3, #12]
 800fe90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fe94:	6021      	str	r1, [r4, #0]
 800fe96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fe9a:	bd70      	pop	{r4, r5, r6, pc}
 800fe9c:	0801101d 	.word	0x0801101d
 800fea0:	0801109d 	.word	0x0801109d

0800fea4 <__multadd>:
 800fea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fea8:	690d      	ldr	r5, [r1, #16]
 800feaa:	4607      	mov	r7, r0
 800feac:	460c      	mov	r4, r1
 800feae:	461e      	mov	r6, r3
 800feb0:	f101 0c14 	add.w	ip, r1, #20
 800feb4:	2000      	movs	r0, #0
 800feb6:	f8dc 3000 	ldr.w	r3, [ip]
 800feba:	b299      	uxth	r1, r3
 800febc:	fb02 6101 	mla	r1, r2, r1, r6
 800fec0:	0c1e      	lsrs	r6, r3, #16
 800fec2:	0c0b      	lsrs	r3, r1, #16
 800fec4:	fb02 3306 	mla	r3, r2, r6, r3
 800fec8:	b289      	uxth	r1, r1
 800feca:	3001      	adds	r0, #1
 800fecc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fed0:	4285      	cmp	r5, r0
 800fed2:	f84c 1b04 	str.w	r1, [ip], #4
 800fed6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800feda:	dcec      	bgt.n	800feb6 <__multadd+0x12>
 800fedc:	b30e      	cbz	r6, 800ff22 <__multadd+0x7e>
 800fede:	68a3      	ldr	r3, [r4, #8]
 800fee0:	42ab      	cmp	r3, r5
 800fee2:	dc19      	bgt.n	800ff18 <__multadd+0x74>
 800fee4:	6861      	ldr	r1, [r4, #4]
 800fee6:	4638      	mov	r0, r7
 800fee8:	3101      	adds	r1, #1
 800feea:	f7ff ff79 	bl	800fde0 <_Balloc>
 800feee:	4680      	mov	r8, r0
 800fef0:	b928      	cbnz	r0, 800fefe <__multadd+0x5a>
 800fef2:	4602      	mov	r2, r0
 800fef4:	4b0c      	ldr	r3, [pc, #48]	@ (800ff28 <__multadd+0x84>)
 800fef6:	480d      	ldr	r0, [pc, #52]	@ (800ff2c <__multadd+0x88>)
 800fef8:	21ba      	movs	r1, #186	@ 0xba
 800fefa:	f000 fd75 	bl	80109e8 <__assert_func>
 800fefe:	6922      	ldr	r2, [r4, #16]
 800ff00:	3202      	adds	r2, #2
 800ff02:	f104 010c 	add.w	r1, r4, #12
 800ff06:	0092      	lsls	r2, r2, #2
 800ff08:	300c      	adds	r0, #12
 800ff0a:	f7ff f80c 	bl	800ef26 <memcpy>
 800ff0e:	4621      	mov	r1, r4
 800ff10:	4638      	mov	r0, r7
 800ff12:	f7ff ffa5 	bl	800fe60 <_Bfree>
 800ff16:	4644      	mov	r4, r8
 800ff18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ff1c:	3501      	adds	r5, #1
 800ff1e:	615e      	str	r6, [r3, #20]
 800ff20:	6125      	str	r5, [r4, #16]
 800ff22:	4620      	mov	r0, r4
 800ff24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff28:	0801108c 	.word	0x0801108c
 800ff2c:	0801109d 	.word	0x0801109d

0800ff30 <__hi0bits>:
 800ff30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ff34:	4603      	mov	r3, r0
 800ff36:	bf36      	itet	cc
 800ff38:	0403      	lslcc	r3, r0, #16
 800ff3a:	2000      	movcs	r0, #0
 800ff3c:	2010      	movcc	r0, #16
 800ff3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ff42:	bf3c      	itt	cc
 800ff44:	021b      	lslcc	r3, r3, #8
 800ff46:	3008      	addcc	r0, #8
 800ff48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ff4c:	bf3c      	itt	cc
 800ff4e:	011b      	lslcc	r3, r3, #4
 800ff50:	3004      	addcc	r0, #4
 800ff52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ff56:	bf3c      	itt	cc
 800ff58:	009b      	lslcc	r3, r3, #2
 800ff5a:	3002      	addcc	r0, #2
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	db05      	blt.n	800ff6c <__hi0bits+0x3c>
 800ff60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ff64:	f100 0001 	add.w	r0, r0, #1
 800ff68:	bf08      	it	eq
 800ff6a:	2020      	moveq	r0, #32
 800ff6c:	4770      	bx	lr

0800ff6e <__lo0bits>:
 800ff6e:	6803      	ldr	r3, [r0, #0]
 800ff70:	4602      	mov	r2, r0
 800ff72:	f013 0007 	ands.w	r0, r3, #7
 800ff76:	d00b      	beq.n	800ff90 <__lo0bits+0x22>
 800ff78:	07d9      	lsls	r1, r3, #31
 800ff7a:	d421      	bmi.n	800ffc0 <__lo0bits+0x52>
 800ff7c:	0798      	lsls	r0, r3, #30
 800ff7e:	bf49      	itett	mi
 800ff80:	085b      	lsrmi	r3, r3, #1
 800ff82:	089b      	lsrpl	r3, r3, #2
 800ff84:	2001      	movmi	r0, #1
 800ff86:	6013      	strmi	r3, [r2, #0]
 800ff88:	bf5c      	itt	pl
 800ff8a:	6013      	strpl	r3, [r2, #0]
 800ff8c:	2002      	movpl	r0, #2
 800ff8e:	4770      	bx	lr
 800ff90:	b299      	uxth	r1, r3
 800ff92:	b909      	cbnz	r1, 800ff98 <__lo0bits+0x2a>
 800ff94:	0c1b      	lsrs	r3, r3, #16
 800ff96:	2010      	movs	r0, #16
 800ff98:	b2d9      	uxtb	r1, r3
 800ff9a:	b909      	cbnz	r1, 800ffa0 <__lo0bits+0x32>
 800ff9c:	3008      	adds	r0, #8
 800ff9e:	0a1b      	lsrs	r3, r3, #8
 800ffa0:	0719      	lsls	r1, r3, #28
 800ffa2:	bf04      	itt	eq
 800ffa4:	091b      	lsreq	r3, r3, #4
 800ffa6:	3004      	addeq	r0, #4
 800ffa8:	0799      	lsls	r1, r3, #30
 800ffaa:	bf04      	itt	eq
 800ffac:	089b      	lsreq	r3, r3, #2
 800ffae:	3002      	addeq	r0, #2
 800ffb0:	07d9      	lsls	r1, r3, #31
 800ffb2:	d403      	bmi.n	800ffbc <__lo0bits+0x4e>
 800ffb4:	085b      	lsrs	r3, r3, #1
 800ffb6:	f100 0001 	add.w	r0, r0, #1
 800ffba:	d003      	beq.n	800ffc4 <__lo0bits+0x56>
 800ffbc:	6013      	str	r3, [r2, #0]
 800ffbe:	4770      	bx	lr
 800ffc0:	2000      	movs	r0, #0
 800ffc2:	4770      	bx	lr
 800ffc4:	2020      	movs	r0, #32
 800ffc6:	4770      	bx	lr

0800ffc8 <__i2b>:
 800ffc8:	b510      	push	{r4, lr}
 800ffca:	460c      	mov	r4, r1
 800ffcc:	2101      	movs	r1, #1
 800ffce:	f7ff ff07 	bl	800fde0 <_Balloc>
 800ffd2:	4602      	mov	r2, r0
 800ffd4:	b928      	cbnz	r0, 800ffe2 <__i2b+0x1a>
 800ffd6:	4b05      	ldr	r3, [pc, #20]	@ (800ffec <__i2b+0x24>)
 800ffd8:	4805      	ldr	r0, [pc, #20]	@ (800fff0 <__i2b+0x28>)
 800ffda:	f240 1145 	movw	r1, #325	@ 0x145
 800ffde:	f000 fd03 	bl	80109e8 <__assert_func>
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	6144      	str	r4, [r0, #20]
 800ffe6:	6103      	str	r3, [r0, #16]
 800ffe8:	bd10      	pop	{r4, pc}
 800ffea:	bf00      	nop
 800ffec:	0801108c 	.word	0x0801108c
 800fff0:	0801109d 	.word	0x0801109d

0800fff4 <__multiply>:
 800fff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fff8:	4614      	mov	r4, r2
 800fffa:	690a      	ldr	r2, [r1, #16]
 800fffc:	6923      	ldr	r3, [r4, #16]
 800fffe:	429a      	cmp	r2, r3
 8010000:	bfa8      	it	ge
 8010002:	4623      	movge	r3, r4
 8010004:	460f      	mov	r7, r1
 8010006:	bfa4      	itt	ge
 8010008:	460c      	movge	r4, r1
 801000a:	461f      	movge	r7, r3
 801000c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010010:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010014:	68a3      	ldr	r3, [r4, #8]
 8010016:	6861      	ldr	r1, [r4, #4]
 8010018:	eb0a 0609 	add.w	r6, sl, r9
 801001c:	42b3      	cmp	r3, r6
 801001e:	b085      	sub	sp, #20
 8010020:	bfb8      	it	lt
 8010022:	3101      	addlt	r1, #1
 8010024:	f7ff fedc 	bl	800fde0 <_Balloc>
 8010028:	b930      	cbnz	r0, 8010038 <__multiply+0x44>
 801002a:	4602      	mov	r2, r0
 801002c:	4b44      	ldr	r3, [pc, #272]	@ (8010140 <__multiply+0x14c>)
 801002e:	4845      	ldr	r0, [pc, #276]	@ (8010144 <__multiply+0x150>)
 8010030:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010034:	f000 fcd8 	bl	80109e8 <__assert_func>
 8010038:	f100 0514 	add.w	r5, r0, #20
 801003c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010040:	462b      	mov	r3, r5
 8010042:	2200      	movs	r2, #0
 8010044:	4543      	cmp	r3, r8
 8010046:	d321      	bcc.n	801008c <__multiply+0x98>
 8010048:	f107 0114 	add.w	r1, r7, #20
 801004c:	f104 0214 	add.w	r2, r4, #20
 8010050:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010054:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010058:	9302      	str	r3, [sp, #8]
 801005a:	1b13      	subs	r3, r2, r4
 801005c:	3b15      	subs	r3, #21
 801005e:	f023 0303 	bic.w	r3, r3, #3
 8010062:	3304      	adds	r3, #4
 8010064:	f104 0715 	add.w	r7, r4, #21
 8010068:	42ba      	cmp	r2, r7
 801006a:	bf38      	it	cc
 801006c:	2304      	movcc	r3, #4
 801006e:	9301      	str	r3, [sp, #4]
 8010070:	9b02      	ldr	r3, [sp, #8]
 8010072:	9103      	str	r1, [sp, #12]
 8010074:	428b      	cmp	r3, r1
 8010076:	d80c      	bhi.n	8010092 <__multiply+0x9e>
 8010078:	2e00      	cmp	r6, #0
 801007a:	dd03      	ble.n	8010084 <__multiply+0x90>
 801007c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010080:	2b00      	cmp	r3, #0
 8010082:	d05b      	beq.n	801013c <__multiply+0x148>
 8010084:	6106      	str	r6, [r0, #16]
 8010086:	b005      	add	sp, #20
 8010088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801008c:	f843 2b04 	str.w	r2, [r3], #4
 8010090:	e7d8      	b.n	8010044 <__multiply+0x50>
 8010092:	f8b1 a000 	ldrh.w	sl, [r1]
 8010096:	f1ba 0f00 	cmp.w	sl, #0
 801009a:	d024      	beq.n	80100e6 <__multiply+0xf2>
 801009c:	f104 0e14 	add.w	lr, r4, #20
 80100a0:	46a9      	mov	r9, r5
 80100a2:	f04f 0c00 	mov.w	ip, #0
 80100a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80100aa:	f8d9 3000 	ldr.w	r3, [r9]
 80100ae:	fa1f fb87 	uxth.w	fp, r7
 80100b2:	b29b      	uxth	r3, r3
 80100b4:	fb0a 330b 	mla	r3, sl, fp, r3
 80100b8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80100bc:	f8d9 7000 	ldr.w	r7, [r9]
 80100c0:	4463      	add	r3, ip
 80100c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80100c6:	fb0a c70b 	mla	r7, sl, fp, ip
 80100ca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80100ce:	b29b      	uxth	r3, r3
 80100d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80100d4:	4572      	cmp	r2, lr
 80100d6:	f849 3b04 	str.w	r3, [r9], #4
 80100da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80100de:	d8e2      	bhi.n	80100a6 <__multiply+0xb2>
 80100e0:	9b01      	ldr	r3, [sp, #4]
 80100e2:	f845 c003 	str.w	ip, [r5, r3]
 80100e6:	9b03      	ldr	r3, [sp, #12]
 80100e8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80100ec:	3104      	adds	r1, #4
 80100ee:	f1b9 0f00 	cmp.w	r9, #0
 80100f2:	d021      	beq.n	8010138 <__multiply+0x144>
 80100f4:	682b      	ldr	r3, [r5, #0]
 80100f6:	f104 0c14 	add.w	ip, r4, #20
 80100fa:	46ae      	mov	lr, r5
 80100fc:	f04f 0a00 	mov.w	sl, #0
 8010100:	f8bc b000 	ldrh.w	fp, [ip]
 8010104:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010108:	fb09 770b 	mla	r7, r9, fp, r7
 801010c:	4457      	add	r7, sl
 801010e:	b29b      	uxth	r3, r3
 8010110:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010114:	f84e 3b04 	str.w	r3, [lr], #4
 8010118:	f85c 3b04 	ldr.w	r3, [ip], #4
 801011c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010120:	f8be 3000 	ldrh.w	r3, [lr]
 8010124:	fb09 330a 	mla	r3, r9, sl, r3
 8010128:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801012c:	4562      	cmp	r2, ip
 801012e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010132:	d8e5      	bhi.n	8010100 <__multiply+0x10c>
 8010134:	9f01      	ldr	r7, [sp, #4]
 8010136:	51eb      	str	r3, [r5, r7]
 8010138:	3504      	adds	r5, #4
 801013a:	e799      	b.n	8010070 <__multiply+0x7c>
 801013c:	3e01      	subs	r6, #1
 801013e:	e79b      	b.n	8010078 <__multiply+0x84>
 8010140:	0801108c 	.word	0x0801108c
 8010144:	0801109d 	.word	0x0801109d

08010148 <__pow5mult>:
 8010148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801014c:	4615      	mov	r5, r2
 801014e:	f012 0203 	ands.w	r2, r2, #3
 8010152:	4607      	mov	r7, r0
 8010154:	460e      	mov	r6, r1
 8010156:	d007      	beq.n	8010168 <__pow5mult+0x20>
 8010158:	4c25      	ldr	r4, [pc, #148]	@ (80101f0 <__pow5mult+0xa8>)
 801015a:	3a01      	subs	r2, #1
 801015c:	2300      	movs	r3, #0
 801015e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010162:	f7ff fe9f 	bl	800fea4 <__multadd>
 8010166:	4606      	mov	r6, r0
 8010168:	10ad      	asrs	r5, r5, #2
 801016a:	d03d      	beq.n	80101e8 <__pow5mult+0xa0>
 801016c:	69fc      	ldr	r4, [r7, #28]
 801016e:	b97c      	cbnz	r4, 8010190 <__pow5mult+0x48>
 8010170:	2010      	movs	r0, #16
 8010172:	f7ff fd7f 	bl	800fc74 <malloc>
 8010176:	4602      	mov	r2, r0
 8010178:	61f8      	str	r0, [r7, #28]
 801017a:	b928      	cbnz	r0, 8010188 <__pow5mult+0x40>
 801017c:	4b1d      	ldr	r3, [pc, #116]	@ (80101f4 <__pow5mult+0xac>)
 801017e:	481e      	ldr	r0, [pc, #120]	@ (80101f8 <__pow5mult+0xb0>)
 8010180:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010184:	f000 fc30 	bl	80109e8 <__assert_func>
 8010188:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801018c:	6004      	str	r4, [r0, #0]
 801018e:	60c4      	str	r4, [r0, #12]
 8010190:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010194:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010198:	b94c      	cbnz	r4, 80101ae <__pow5mult+0x66>
 801019a:	f240 2171 	movw	r1, #625	@ 0x271
 801019e:	4638      	mov	r0, r7
 80101a0:	f7ff ff12 	bl	800ffc8 <__i2b>
 80101a4:	2300      	movs	r3, #0
 80101a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80101aa:	4604      	mov	r4, r0
 80101ac:	6003      	str	r3, [r0, #0]
 80101ae:	f04f 0900 	mov.w	r9, #0
 80101b2:	07eb      	lsls	r3, r5, #31
 80101b4:	d50a      	bpl.n	80101cc <__pow5mult+0x84>
 80101b6:	4631      	mov	r1, r6
 80101b8:	4622      	mov	r2, r4
 80101ba:	4638      	mov	r0, r7
 80101bc:	f7ff ff1a 	bl	800fff4 <__multiply>
 80101c0:	4631      	mov	r1, r6
 80101c2:	4680      	mov	r8, r0
 80101c4:	4638      	mov	r0, r7
 80101c6:	f7ff fe4b 	bl	800fe60 <_Bfree>
 80101ca:	4646      	mov	r6, r8
 80101cc:	106d      	asrs	r5, r5, #1
 80101ce:	d00b      	beq.n	80101e8 <__pow5mult+0xa0>
 80101d0:	6820      	ldr	r0, [r4, #0]
 80101d2:	b938      	cbnz	r0, 80101e4 <__pow5mult+0x9c>
 80101d4:	4622      	mov	r2, r4
 80101d6:	4621      	mov	r1, r4
 80101d8:	4638      	mov	r0, r7
 80101da:	f7ff ff0b 	bl	800fff4 <__multiply>
 80101de:	6020      	str	r0, [r4, #0]
 80101e0:	f8c0 9000 	str.w	r9, [r0]
 80101e4:	4604      	mov	r4, r0
 80101e6:	e7e4      	b.n	80101b2 <__pow5mult+0x6a>
 80101e8:	4630      	mov	r0, r6
 80101ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101ee:	bf00      	nop
 80101f0:	080110f8 	.word	0x080110f8
 80101f4:	0801101d 	.word	0x0801101d
 80101f8:	0801109d 	.word	0x0801109d

080101fc <__lshift>:
 80101fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010200:	460c      	mov	r4, r1
 8010202:	6849      	ldr	r1, [r1, #4]
 8010204:	6923      	ldr	r3, [r4, #16]
 8010206:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801020a:	68a3      	ldr	r3, [r4, #8]
 801020c:	4607      	mov	r7, r0
 801020e:	4691      	mov	r9, r2
 8010210:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010214:	f108 0601 	add.w	r6, r8, #1
 8010218:	42b3      	cmp	r3, r6
 801021a:	db0b      	blt.n	8010234 <__lshift+0x38>
 801021c:	4638      	mov	r0, r7
 801021e:	f7ff fddf 	bl	800fde0 <_Balloc>
 8010222:	4605      	mov	r5, r0
 8010224:	b948      	cbnz	r0, 801023a <__lshift+0x3e>
 8010226:	4602      	mov	r2, r0
 8010228:	4b28      	ldr	r3, [pc, #160]	@ (80102cc <__lshift+0xd0>)
 801022a:	4829      	ldr	r0, [pc, #164]	@ (80102d0 <__lshift+0xd4>)
 801022c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010230:	f000 fbda 	bl	80109e8 <__assert_func>
 8010234:	3101      	adds	r1, #1
 8010236:	005b      	lsls	r3, r3, #1
 8010238:	e7ee      	b.n	8010218 <__lshift+0x1c>
 801023a:	2300      	movs	r3, #0
 801023c:	f100 0114 	add.w	r1, r0, #20
 8010240:	f100 0210 	add.w	r2, r0, #16
 8010244:	4618      	mov	r0, r3
 8010246:	4553      	cmp	r3, sl
 8010248:	db33      	blt.n	80102b2 <__lshift+0xb6>
 801024a:	6920      	ldr	r0, [r4, #16]
 801024c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010250:	f104 0314 	add.w	r3, r4, #20
 8010254:	f019 091f 	ands.w	r9, r9, #31
 8010258:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801025c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010260:	d02b      	beq.n	80102ba <__lshift+0xbe>
 8010262:	f1c9 0e20 	rsb	lr, r9, #32
 8010266:	468a      	mov	sl, r1
 8010268:	2200      	movs	r2, #0
 801026a:	6818      	ldr	r0, [r3, #0]
 801026c:	fa00 f009 	lsl.w	r0, r0, r9
 8010270:	4310      	orrs	r0, r2
 8010272:	f84a 0b04 	str.w	r0, [sl], #4
 8010276:	f853 2b04 	ldr.w	r2, [r3], #4
 801027a:	459c      	cmp	ip, r3
 801027c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010280:	d8f3      	bhi.n	801026a <__lshift+0x6e>
 8010282:	ebac 0304 	sub.w	r3, ip, r4
 8010286:	3b15      	subs	r3, #21
 8010288:	f023 0303 	bic.w	r3, r3, #3
 801028c:	3304      	adds	r3, #4
 801028e:	f104 0015 	add.w	r0, r4, #21
 8010292:	4584      	cmp	ip, r0
 8010294:	bf38      	it	cc
 8010296:	2304      	movcc	r3, #4
 8010298:	50ca      	str	r2, [r1, r3]
 801029a:	b10a      	cbz	r2, 80102a0 <__lshift+0xa4>
 801029c:	f108 0602 	add.w	r6, r8, #2
 80102a0:	3e01      	subs	r6, #1
 80102a2:	4638      	mov	r0, r7
 80102a4:	612e      	str	r6, [r5, #16]
 80102a6:	4621      	mov	r1, r4
 80102a8:	f7ff fdda 	bl	800fe60 <_Bfree>
 80102ac:	4628      	mov	r0, r5
 80102ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80102b6:	3301      	adds	r3, #1
 80102b8:	e7c5      	b.n	8010246 <__lshift+0x4a>
 80102ba:	3904      	subs	r1, #4
 80102bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80102c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80102c4:	459c      	cmp	ip, r3
 80102c6:	d8f9      	bhi.n	80102bc <__lshift+0xc0>
 80102c8:	e7ea      	b.n	80102a0 <__lshift+0xa4>
 80102ca:	bf00      	nop
 80102cc:	0801108c 	.word	0x0801108c
 80102d0:	0801109d 	.word	0x0801109d

080102d4 <__mcmp>:
 80102d4:	690a      	ldr	r2, [r1, #16]
 80102d6:	4603      	mov	r3, r0
 80102d8:	6900      	ldr	r0, [r0, #16]
 80102da:	1a80      	subs	r0, r0, r2
 80102dc:	b530      	push	{r4, r5, lr}
 80102de:	d10e      	bne.n	80102fe <__mcmp+0x2a>
 80102e0:	3314      	adds	r3, #20
 80102e2:	3114      	adds	r1, #20
 80102e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80102e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80102ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80102f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80102f4:	4295      	cmp	r5, r2
 80102f6:	d003      	beq.n	8010300 <__mcmp+0x2c>
 80102f8:	d205      	bcs.n	8010306 <__mcmp+0x32>
 80102fa:	f04f 30ff 	mov.w	r0, #4294967295
 80102fe:	bd30      	pop	{r4, r5, pc}
 8010300:	42a3      	cmp	r3, r4
 8010302:	d3f3      	bcc.n	80102ec <__mcmp+0x18>
 8010304:	e7fb      	b.n	80102fe <__mcmp+0x2a>
 8010306:	2001      	movs	r0, #1
 8010308:	e7f9      	b.n	80102fe <__mcmp+0x2a>
	...

0801030c <__mdiff>:
 801030c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010310:	4689      	mov	r9, r1
 8010312:	4606      	mov	r6, r0
 8010314:	4611      	mov	r1, r2
 8010316:	4648      	mov	r0, r9
 8010318:	4614      	mov	r4, r2
 801031a:	f7ff ffdb 	bl	80102d4 <__mcmp>
 801031e:	1e05      	subs	r5, r0, #0
 8010320:	d112      	bne.n	8010348 <__mdiff+0x3c>
 8010322:	4629      	mov	r1, r5
 8010324:	4630      	mov	r0, r6
 8010326:	f7ff fd5b 	bl	800fde0 <_Balloc>
 801032a:	4602      	mov	r2, r0
 801032c:	b928      	cbnz	r0, 801033a <__mdiff+0x2e>
 801032e:	4b3f      	ldr	r3, [pc, #252]	@ (801042c <__mdiff+0x120>)
 8010330:	f240 2137 	movw	r1, #567	@ 0x237
 8010334:	483e      	ldr	r0, [pc, #248]	@ (8010430 <__mdiff+0x124>)
 8010336:	f000 fb57 	bl	80109e8 <__assert_func>
 801033a:	2301      	movs	r3, #1
 801033c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010340:	4610      	mov	r0, r2
 8010342:	b003      	add	sp, #12
 8010344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010348:	bfbc      	itt	lt
 801034a:	464b      	movlt	r3, r9
 801034c:	46a1      	movlt	r9, r4
 801034e:	4630      	mov	r0, r6
 8010350:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010354:	bfba      	itte	lt
 8010356:	461c      	movlt	r4, r3
 8010358:	2501      	movlt	r5, #1
 801035a:	2500      	movge	r5, #0
 801035c:	f7ff fd40 	bl	800fde0 <_Balloc>
 8010360:	4602      	mov	r2, r0
 8010362:	b918      	cbnz	r0, 801036c <__mdiff+0x60>
 8010364:	4b31      	ldr	r3, [pc, #196]	@ (801042c <__mdiff+0x120>)
 8010366:	f240 2145 	movw	r1, #581	@ 0x245
 801036a:	e7e3      	b.n	8010334 <__mdiff+0x28>
 801036c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010370:	6926      	ldr	r6, [r4, #16]
 8010372:	60c5      	str	r5, [r0, #12]
 8010374:	f109 0310 	add.w	r3, r9, #16
 8010378:	f109 0514 	add.w	r5, r9, #20
 801037c:	f104 0e14 	add.w	lr, r4, #20
 8010380:	f100 0b14 	add.w	fp, r0, #20
 8010384:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010388:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801038c:	9301      	str	r3, [sp, #4]
 801038e:	46d9      	mov	r9, fp
 8010390:	f04f 0c00 	mov.w	ip, #0
 8010394:	9b01      	ldr	r3, [sp, #4]
 8010396:	f85e 0b04 	ldr.w	r0, [lr], #4
 801039a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801039e:	9301      	str	r3, [sp, #4]
 80103a0:	fa1f f38a 	uxth.w	r3, sl
 80103a4:	4619      	mov	r1, r3
 80103a6:	b283      	uxth	r3, r0
 80103a8:	1acb      	subs	r3, r1, r3
 80103aa:	0c00      	lsrs	r0, r0, #16
 80103ac:	4463      	add	r3, ip
 80103ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80103b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80103b6:	b29b      	uxth	r3, r3
 80103b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80103bc:	4576      	cmp	r6, lr
 80103be:	f849 3b04 	str.w	r3, [r9], #4
 80103c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80103c6:	d8e5      	bhi.n	8010394 <__mdiff+0x88>
 80103c8:	1b33      	subs	r3, r6, r4
 80103ca:	3b15      	subs	r3, #21
 80103cc:	f023 0303 	bic.w	r3, r3, #3
 80103d0:	3415      	adds	r4, #21
 80103d2:	3304      	adds	r3, #4
 80103d4:	42a6      	cmp	r6, r4
 80103d6:	bf38      	it	cc
 80103d8:	2304      	movcc	r3, #4
 80103da:	441d      	add	r5, r3
 80103dc:	445b      	add	r3, fp
 80103de:	461e      	mov	r6, r3
 80103e0:	462c      	mov	r4, r5
 80103e2:	4544      	cmp	r4, r8
 80103e4:	d30e      	bcc.n	8010404 <__mdiff+0xf8>
 80103e6:	f108 0103 	add.w	r1, r8, #3
 80103ea:	1b49      	subs	r1, r1, r5
 80103ec:	f021 0103 	bic.w	r1, r1, #3
 80103f0:	3d03      	subs	r5, #3
 80103f2:	45a8      	cmp	r8, r5
 80103f4:	bf38      	it	cc
 80103f6:	2100      	movcc	r1, #0
 80103f8:	440b      	add	r3, r1
 80103fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80103fe:	b191      	cbz	r1, 8010426 <__mdiff+0x11a>
 8010400:	6117      	str	r7, [r2, #16]
 8010402:	e79d      	b.n	8010340 <__mdiff+0x34>
 8010404:	f854 1b04 	ldr.w	r1, [r4], #4
 8010408:	46e6      	mov	lr, ip
 801040a:	0c08      	lsrs	r0, r1, #16
 801040c:	fa1c fc81 	uxtah	ip, ip, r1
 8010410:	4471      	add	r1, lr
 8010412:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010416:	b289      	uxth	r1, r1
 8010418:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801041c:	f846 1b04 	str.w	r1, [r6], #4
 8010420:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010424:	e7dd      	b.n	80103e2 <__mdiff+0xd6>
 8010426:	3f01      	subs	r7, #1
 8010428:	e7e7      	b.n	80103fa <__mdiff+0xee>
 801042a:	bf00      	nop
 801042c:	0801108c 	.word	0x0801108c
 8010430:	0801109d 	.word	0x0801109d

08010434 <__d2b>:
 8010434:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010438:	460f      	mov	r7, r1
 801043a:	2101      	movs	r1, #1
 801043c:	ec59 8b10 	vmov	r8, r9, d0
 8010440:	4616      	mov	r6, r2
 8010442:	f7ff fccd 	bl	800fde0 <_Balloc>
 8010446:	4604      	mov	r4, r0
 8010448:	b930      	cbnz	r0, 8010458 <__d2b+0x24>
 801044a:	4602      	mov	r2, r0
 801044c:	4b23      	ldr	r3, [pc, #140]	@ (80104dc <__d2b+0xa8>)
 801044e:	4824      	ldr	r0, [pc, #144]	@ (80104e0 <__d2b+0xac>)
 8010450:	f240 310f 	movw	r1, #783	@ 0x30f
 8010454:	f000 fac8 	bl	80109e8 <__assert_func>
 8010458:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801045c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010460:	b10d      	cbz	r5, 8010466 <__d2b+0x32>
 8010462:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010466:	9301      	str	r3, [sp, #4]
 8010468:	f1b8 0300 	subs.w	r3, r8, #0
 801046c:	d023      	beq.n	80104b6 <__d2b+0x82>
 801046e:	4668      	mov	r0, sp
 8010470:	9300      	str	r3, [sp, #0]
 8010472:	f7ff fd7c 	bl	800ff6e <__lo0bits>
 8010476:	e9dd 1200 	ldrd	r1, r2, [sp]
 801047a:	b1d0      	cbz	r0, 80104b2 <__d2b+0x7e>
 801047c:	f1c0 0320 	rsb	r3, r0, #32
 8010480:	fa02 f303 	lsl.w	r3, r2, r3
 8010484:	430b      	orrs	r3, r1
 8010486:	40c2      	lsrs	r2, r0
 8010488:	6163      	str	r3, [r4, #20]
 801048a:	9201      	str	r2, [sp, #4]
 801048c:	9b01      	ldr	r3, [sp, #4]
 801048e:	61a3      	str	r3, [r4, #24]
 8010490:	2b00      	cmp	r3, #0
 8010492:	bf0c      	ite	eq
 8010494:	2201      	moveq	r2, #1
 8010496:	2202      	movne	r2, #2
 8010498:	6122      	str	r2, [r4, #16]
 801049a:	b1a5      	cbz	r5, 80104c6 <__d2b+0x92>
 801049c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80104a0:	4405      	add	r5, r0
 80104a2:	603d      	str	r5, [r7, #0]
 80104a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80104a8:	6030      	str	r0, [r6, #0]
 80104aa:	4620      	mov	r0, r4
 80104ac:	b003      	add	sp, #12
 80104ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104b2:	6161      	str	r1, [r4, #20]
 80104b4:	e7ea      	b.n	801048c <__d2b+0x58>
 80104b6:	a801      	add	r0, sp, #4
 80104b8:	f7ff fd59 	bl	800ff6e <__lo0bits>
 80104bc:	9b01      	ldr	r3, [sp, #4]
 80104be:	6163      	str	r3, [r4, #20]
 80104c0:	3020      	adds	r0, #32
 80104c2:	2201      	movs	r2, #1
 80104c4:	e7e8      	b.n	8010498 <__d2b+0x64>
 80104c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80104ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80104ce:	6038      	str	r0, [r7, #0]
 80104d0:	6918      	ldr	r0, [r3, #16]
 80104d2:	f7ff fd2d 	bl	800ff30 <__hi0bits>
 80104d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80104da:	e7e5      	b.n	80104a8 <__d2b+0x74>
 80104dc:	0801108c 	.word	0x0801108c
 80104e0:	0801109d 	.word	0x0801109d

080104e4 <__sfputc_r>:
 80104e4:	6893      	ldr	r3, [r2, #8]
 80104e6:	3b01      	subs	r3, #1
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	b410      	push	{r4}
 80104ec:	6093      	str	r3, [r2, #8]
 80104ee:	da08      	bge.n	8010502 <__sfputc_r+0x1e>
 80104f0:	6994      	ldr	r4, [r2, #24]
 80104f2:	42a3      	cmp	r3, r4
 80104f4:	db01      	blt.n	80104fa <__sfputc_r+0x16>
 80104f6:	290a      	cmp	r1, #10
 80104f8:	d103      	bne.n	8010502 <__sfputc_r+0x1e>
 80104fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104fe:	f7fe bbfe 	b.w	800ecfe <__swbuf_r>
 8010502:	6813      	ldr	r3, [r2, #0]
 8010504:	1c58      	adds	r0, r3, #1
 8010506:	6010      	str	r0, [r2, #0]
 8010508:	7019      	strb	r1, [r3, #0]
 801050a:	4608      	mov	r0, r1
 801050c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010510:	4770      	bx	lr

08010512 <__sfputs_r>:
 8010512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010514:	4606      	mov	r6, r0
 8010516:	460f      	mov	r7, r1
 8010518:	4614      	mov	r4, r2
 801051a:	18d5      	adds	r5, r2, r3
 801051c:	42ac      	cmp	r4, r5
 801051e:	d101      	bne.n	8010524 <__sfputs_r+0x12>
 8010520:	2000      	movs	r0, #0
 8010522:	e007      	b.n	8010534 <__sfputs_r+0x22>
 8010524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010528:	463a      	mov	r2, r7
 801052a:	4630      	mov	r0, r6
 801052c:	f7ff ffda 	bl	80104e4 <__sfputc_r>
 8010530:	1c43      	adds	r3, r0, #1
 8010532:	d1f3      	bne.n	801051c <__sfputs_r+0xa>
 8010534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010538 <_vfiprintf_r>:
 8010538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801053c:	460d      	mov	r5, r1
 801053e:	b09d      	sub	sp, #116	@ 0x74
 8010540:	4614      	mov	r4, r2
 8010542:	4698      	mov	r8, r3
 8010544:	4606      	mov	r6, r0
 8010546:	b118      	cbz	r0, 8010550 <_vfiprintf_r+0x18>
 8010548:	6a03      	ldr	r3, [r0, #32]
 801054a:	b90b      	cbnz	r3, 8010550 <_vfiprintf_r+0x18>
 801054c:	f7fe fb00 	bl	800eb50 <__sinit>
 8010550:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010552:	07d9      	lsls	r1, r3, #31
 8010554:	d405      	bmi.n	8010562 <_vfiprintf_r+0x2a>
 8010556:	89ab      	ldrh	r3, [r5, #12]
 8010558:	059a      	lsls	r2, r3, #22
 801055a:	d402      	bmi.n	8010562 <_vfiprintf_r+0x2a>
 801055c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801055e:	f7fe fce0 	bl	800ef22 <__retarget_lock_acquire_recursive>
 8010562:	89ab      	ldrh	r3, [r5, #12]
 8010564:	071b      	lsls	r3, r3, #28
 8010566:	d501      	bpl.n	801056c <_vfiprintf_r+0x34>
 8010568:	692b      	ldr	r3, [r5, #16]
 801056a:	b99b      	cbnz	r3, 8010594 <_vfiprintf_r+0x5c>
 801056c:	4629      	mov	r1, r5
 801056e:	4630      	mov	r0, r6
 8010570:	f7fe fc04 	bl	800ed7c <__swsetup_r>
 8010574:	b170      	cbz	r0, 8010594 <_vfiprintf_r+0x5c>
 8010576:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010578:	07dc      	lsls	r4, r3, #31
 801057a:	d504      	bpl.n	8010586 <_vfiprintf_r+0x4e>
 801057c:	f04f 30ff 	mov.w	r0, #4294967295
 8010580:	b01d      	add	sp, #116	@ 0x74
 8010582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010586:	89ab      	ldrh	r3, [r5, #12]
 8010588:	0598      	lsls	r0, r3, #22
 801058a:	d4f7      	bmi.n	801057c <_vfiprintf_r+0x44>
 801058c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801058e:	f7fe fcc9 	bl	800ef24 <__retarget_lock_release_recursive>
 8010592:	e7f3      	b.n	801057c <_vfiprintf_r+0x44>
 8010594:	2300      	movs	r3, #0
 8010596:	9309      	str	r3, [sp, #36]	@ 0x24
 8010598:	2320      	movs	r3, #32
 801059a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801059e:	f8cd 800c 	str.w	r8, [sp, #12]
 80105a2:	2330      	movs	r3, #48	@ 0x30
 80105a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010754 <_vfiprintf_r+0x21c>
 80105a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80105ac:	f04f 0901 	mov.w	r9, #1
 80105b0:	4623      	mov	r3, r4
 80105b2:	469a      	mov	sl, r3
 80105b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105b8:	b10a      	cbz	r2, 80105be <_vfiprintf_r+0x86>
 80105ba:	2a25      	cmp	r2, #37	@ 0x25
 80105bc:	d1f9      	bne.n	80105b2 <_vfiprintf_r+0x7a>
 80105be:	ebba 0b04 	subs.w	fp, sl, r4
 80105c2:	d00b      	beq.n	80105dc <_vfiprintf_r+0xa4>
 80105c4:	465b      	mov	r3, fp
 80105c6:	4622      	mov	r2, r4
 80105c8:	4629      	mov	r1, r5
 80105ca:	4630      	mov	r0, r6
 80105cc:	f7ff ffa1 	bl	8010512 <__sfputs_r>
 80105d0:	3001      	adds	r0, #1
 80105d2:	f000 80a7 	beq.w	8010724 <_vfiprintf_r+0x1ec>
 80105d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80105d8:	445a      	add	r2, fp
 80105da:	9209      	str	r2, [sp, #36]	@ 0x24
 80105dc:	f89a 3000 	ldrb.w	r3, [sl]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	f000 809f 	beq.w	8010724 <_vfiprintf_r+0x1ec>
 80105e6:	2300      	movs	r3, #0
 80105e8:	f04f 32ff 	mov.w	r2, #4294967295
 80105ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105f0:	f10a 0a01 	add.w	sl, sl, #1
 80105f4:	9304      	str	r3, [sp, #16]
 80105f6:	9307      	str	r3, [sp, #28]
 80105f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80105fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80105fe:	4654      	mov	r4, sl
 8010600:	2205      	movs	r2, #5
 8010602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010606:	4853      	ldr	r0, [pc, #332]	@ (8010754 <_vfiprintf_r+0x21c>)
 8010608:	f7ef fde2 	bl	80001d0 <memchr>
 801060c:	9a04      	ldr	r2, [sp, #16]
 801060e:	b9d8      	cbnz	r0, 8010648 <_vfiprintf_r+0x110>
 8010610:	06d1      	lsls	r1, r2, #27
 8010612:	bf44      	itt	mi
 8010614:	2320      	movmi	r3, #32
 8010616:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801061a:	0713      	lsls	r3, r2, #28
 801061c:	bf44      	itt	mi
 801061e:	232b      	movmi	r3, #43	@ 0x2b
 8010620:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010624:	f89a 3000 	ldrb.w	r3, [sl]
 8010628:	2b2a      	cmp	r3, #42	@ 0x2a
 801062a:	d015      	beq.n	8010658 <_vfiprintf_r+0x120>
 801062c:	9a07      	ldr	r2, [sp, #28]
 801062e:	4654      	mov	r4, sl
 8010630:	2000      	movs	r0, #0
 8010632:	f04f 0c0a 	mov.w	ip, #10
 8010636:	4621      	mov	r1, r4
 8010638:	f811 3b01 	ldrb.w	r3, [r1], #1
 801063c:	3b30      	subs	r3, #48	@ 0x30
 801063e:	2b09      	cmp	r3, #9
 8010640:	d94b      	bls.n	80106da <_vfiprintf_r+0x1a2>
 8010642:	b1b0      	cbz	r0, 8010672 <_vfiprintf_r+0x13a>
 8010644:	9207      	str	r2, [sp, #28]
 8010646:	e014      	b.n	8010672 <_vfiprintf_r+0x13a>
 8010648:	eba0 0308 	sub.w	r3, r0, r8
 801064c:	fa09 f303 	lsl.w	r3, r9, r3
 8010650:	4313      	orrs	r3, r2
 8010652:	9304      	str	r3, [sp, #16]
 8010654:	46a2      	mov	sl, r4
 8010656:	e7d2      	b.n	80105fe <_vfiprintf_r+0xc6>
 8010658:	9b03      	ldr	r3, [sp, #12]
 801065a:	1d19      	adds	r1, r3, #4
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	9103      	str	r1, [sp, #12]
 8010660:	2b00      	cmp	r3, #0
 8010662:	bfbb      	ittet	lt
 8010664:	425b      	neglt	r3, r3
 8010666:	f042 0202 	orrlt.w	r2, r2, #2
 801066a:	9307      	strge	r3, [sp, #28]
 801066c:	9307      	strlt	r3, [sp, #28]
 801066e:	bfb8      	it	lt
 8010670:	9204      	strlt	r2, [sp, #16]
 8010672:	7823      	ldrb	r3, [r4, #0]
 8010674:	2b2e      	cmp	r3, #46	@ 0x2e
 8010676:	d10a      	bne.n	801068e <_vfiprintf_r+0x156>
 8010678:	7863      	ldrb	r3, [r4, #1]
 801067a:	2b2a      	cmp	r3, #42	@ 0x2a
 801067c:	d132      	bne.n	80106e4 <_vfiprintf_r+0x1ac>
 801067e:	9b03      	ldr	r3, [sp, #12]
 8010680:	1d1a      	adds	r2, r3, #4
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	9203      	str	r2, [sp, #12]
 8010686:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801068a:	3402      	adds	r4, #2
 801068c:	9305      	str	r3, [sp, #20]
 801068e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010764 <_vfiprintf_r+0x22c>
 8010692:	7821      	ldrb	r1, [r4, #0]
 8010694:	2203      	movs	r2, #3
 8010696:	4650      	mov	r0, sl
 8010698:	f7ef fd9a 	bl	80001d0 <memchr>
 801069c:	b138      	cbz	r0, 80106ae <_vfiprintf_r+0x176>
 801069e:	9b04      	ldr	r3, [sp, #16]
 80106a0:	eba0 000a 	sub.w	r0, r0, sl
 80106a4:	2240      	movs	r2, #64	@ 0x40
 80106a6:	4082      	lsls	r2, r0
 80106a8:	4313      	orrs	r3, r2
 80106aa:	3401      	adds	r4, #1
 80106ac:	9304      	str	r3, [sp, #16]
 80106ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106b2:	4829      	ldr	r0, [pc, #164]	@ (8010758 <_vfiprintf_r+0x220>)
 80106b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80106b8:	2206      	movs	r2, #6
 80106ba:	f7ef fd89 	bl	80001d0 <memchr>
 80106be:	2800      	cmp	r0, #0
 80106c0:	d03f      	beq.n	8010742 <_vfiprintf_r+0x20a>
 80106c2:	4b26      	ldr	r3, [pc, #152]	@ (801075c <_vfiprintf_r+0x224>)
 80106c4:	bb1b      	cbnz	r3, 801070e <_vfiprintf_r+0x1d6>
 80106c6:	9b03      	ldr	r3, [sp, #12]
 80106c8:	3307      	adds	r3, #7
 80106ca:	f023 0307 	bic.w	r3, r3, #7
 80106ce:	3308      	adds	r3, #8
 80106d0:	9303      	str	r3, [sp, #12]
 80106d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106d4:	443b      	add	r3, r7
 80106d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80106d8:	e76a      	b.n	80105b0 <_vfiprintf_r+0x78>
 80106da:	fb0c 3202 	mla	r2, ip, r2, r3
 80106de:	460c      	mov	r4, r1
 80106e0:	2001      	movs	r0, #1
 80106e2:	e7a8      	b.n	8010636 <_vfiprintf_r+0xfe>
 80106e4:	2300      	movs	r3, #0
 80106e6:	3401      	adds	r4, #1
 80106e8:	9305      	str	r3, [sp, #20]
 80106ea:	4619      	mov	r1, r3
 80106ec:	f04f 0c0a 	mov.w	ip, #10
 80106f0:	4620      	mov	r0, r4
 80106f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106f6:	3a30      	subs	r2, #48	@ 0x30
 80106f8:	2a09      	cmp	r2, #9
 80106fa:	d903      	bls.n	8010704 <_vfiprintf_r+0x1cc>
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d0c6      	beq.n	801068e <_vfiprintf_r+0x156>
 8010700:	9105      	str	r1, [sp, #20]
 8010702:	e7c4      	b.n	801068e <_vfiprintf_r+0x156>
 8010704:	fb0c 2101 	mla	r1, ip, r1, r2
 8010708:	4604      	mov	r4, r0
 801070a:	2301      	movs	r3, #1
 801070c:	e7f0      	b.n	80106f0 <_vfiprintf_r+0x1b8>
 801070e:	ab03      	add	r3, sp, #12
 8010710:	9300      	str	r3, [sp, #0]
 8010712:	462a      	mov	r2, r5
 8010714:	4b12      	ldr	r3, [pc, #72]	@ (8010760 <_vfiprintf_r+0x228>)
 8010716:	a904      	add	r1, sp, #16
 8010718:	4630      	mov	r0, r6
 801071a:	f7fd fdd5 	bl	800e2c8 <_printf_float>
 801071e:	4607      	mov	r7, r0
 8010720:	1c78      	adds	r0, r7, #1
 8010722:	d1d6      	bne.n	80106d2 <_vfiprintf_r+0x19a>
 8010724:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010726:	07d9      	lsls	r1, r3, #31
 8010728:	d405      	bmi.n	8010736 <_vfiprintf_r+0x1fe>
 801072a:	89ab      	ldrh	r3, [r5, #12]
 801072c:	059a      	lsls	r2, r3, #22
 801072e:	d402      	bmi.n	8010736 <_vfiprintf_r+0x1fe>
 8010730:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010732:	f7fe fbf7 	bl	800ef24 <__retarget_lock_release_recursive>
 8010736:	89ab      	ldrh	r3, [r5, #12]
 8010738:	065b      	lsls	r3, r3, #25
 801073a:	f53f af1f 	bmi.w	801057c <_vfiprintf_r+0x44>
 801073e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010740:	e71e      	b.n	8010580 <_vfiprintf_r+0x48>
 8010742:	ab03      	add	r3, sp, #12
 8010744:	9300      	str	r3, [sp, #0]
 8010746:	462a      	mov	r2, r5
 8010748:	4b05      	ldr	r3, [pc, #20]	@ (8010760 <_vfiprintf_r+0x228>)
 801074a:	a904      	add	r1, sp, #16
 801074c:	4630      	mov	r0, r6
 801074e:	f7fe f853 	bl	800e7f8 <_printf_i>
 8010752:	e7e4      	b.n	801071e <_vfiprintf_r+0x1e6>
 8010754:	080111f8 	.word	0x080111f8
 8010758:	08011202 	.word	0x08011202
 801075c:	0800e2c9 	.word	0x0800e2c9
 8010760:	08010513 	.word	0x08010513
 8010764:	080111fe 	.word	0x080111fe

08010768 <__sflush_r>:
 8010768:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801076c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010770:	0716      	lsls	r6, r2, #28
 8010772:	4605      	mov	r5, r0
 8010774:	460c      	mov	r4, r1
 8010776:	d454      	bmi.n	8010822 <__sflush_r+0xba>
 8010778:	684b      	ldr	r3, [r1, #4]
 801077a:	2b00      	cmp	r3, #0
 801077c:	dc02      	bgt.n	8010784 <__sflush_r+0x1c>
 801077e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010780:	2b00      	cmp	r3, #0
 8010782:	dd48      	ble.n	8010816 <__sflush_r+0xae>
 8010784:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010786:	2e00      	cmp	r6, #0
 8010788:	d045      	beq.n	8010816 <__sflush_r+0xae>
 801078a:	2300      	movs	r3, #0
 801078c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010790:	682f      	ldr	r7, [r5, #0]
 8010792:	6a21      	ldr	r1, [r4, #32]
 8010794:	602b      	str	r3, [r5, #0]
 8010796:	d030      	beq.n	80107fa <__sflush_r+0x92>
 8010798:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801079a:	89a3      	ldrh	r3, [r4, #12]
 801079c:	0759      	lsls	r1, r3, #29
 801079e:	d505      	bpl.n	80107ac <__sflush_r+0x44>
 80107a0:	6863      	ldr	r3, [r4, #4]
 80107a2:	1ad2      	subs	r2, r2, r3
 80107a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80107a6:	b10b      	cbz	r3, 80107ac <__sflush_r+0x44>
 80107a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80107aa:	1ad2      	subs	r2, r2, r3
 80107ac:	2300      	movs	r3, #0
 80107ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80107b0:	6a21      	ldr	r1, [r4, #32]
 80107b2:	4628      	mov	r0, r5
 80107b4:	47b0      	blx	r6
 80107b6:	1c43      	adds	r3, r0, #1
 80107b8:	89a3      	ldrh	r3, [r4, #12]
 80107ba:	d106      	bne.n	80107ca <__sflush_r+0x62>
 80107bc:	6829      	ldr	r1, [r5, #0]
 80107be:	291d      	cmp	r1, #29
 80107c0:	d82b      	bhi.n	801081a <__sflush_r+0xb2>
 80107c2:	4a2a      	ldr	r2, [pc, #168]	@ (801086c <__sflush_r+0x104>)
 80107c4:	410a      	asrs	r2, r1
 80107c6:	07d6      	lsls	r6, r2, #31
 80107c8:	d427      	bmi.n	801081a <__sflush_r+0xb2>
 80107ca:	2200      	movs	r2, #0
 80107cc:	6062      	str	r2, [r4, #4]
 80107ce:	04d9      	lsls	r1, r3, #19
 80107d0:	6922      	ldr	r2, [r4, #16]
 80107d2:	6022      	str	r2, [r4, #0]
 80107d4:	d504      	bpl.n	80107e0 <__sflush_r+0x78>
 80107d6:	1c42      	adds	r2, r0, #1
 80107d8:	d101      	bne.n	80107de <__sflush_r+0x76>
 80107da:	682b      	ldr	r3, [r5, #0]
 80107dc:	b903      	cbnz	r3, 80107e0 <__sflush_r+0x78>
 80107de:	6560      	str	r0, [r4, #84]	@ 0x54
 80107e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80107e2:	602f      	str	r7, [r5, #0]
 80107e4:	b1b9      	cbz	r1, 8010816 <__sflush_r+0xae>
 80107e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80107ea:	4299      	cmp	r1, r3
 80107ec:	d002      	beq.n	80107f4 <__sflush_r+0x8c>
 80107ee:	4628      	mov	r0, r5
 80107f0:	f7ff f9f6 	bl	800fbe0 <_free_r>
 80107f4:	2300      	movs	r3, #0
 80107f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80107f8:	e00d      	b.n	8010816 <__sflush_r+0xae>
 80107fa:	2301      	movs	r3, #1
 80107fc:	4628      	mov	r0, r5
 80107fe:	47b0      	blx	r6
 8010800:	4602      	mov	r2, r0
 8010802:	1c50      	adds	r0, r2, #1
 8010804:	d1c9      	bne.n	801079a <__sflush_r+0x32>
 8010806:	682b      	ldr	r3, [r5, #0]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d0c6      	beq.n	801079a <__sflush_r+0x32>
 801080c:	2b1d      	cmp	r3, #29
 801080e:	d001      	beq.n	8010814 <__sflush_r+0xac>
 8010810:	2b16      	cmp	r3, #22
 8010812:	d11e      	bne.n	8010852 <__sflush_r+0xea>
 8010814:	602f      	str	r7, [r5, #0]
 8010816:	2000      	movs	r0, #0
 8010818:	e022      	b.n	8010860 <__sflush_r+0xf8>
 801081a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801081e:	b21b      	sxth	r3, r3
 8010820:	e01b      	b.n	801085a <__sflush_r+0xf2>
 8010822:	690f      	ldr	r7, [r1, #16]
 8010824:	2f00      	cmp	r7, #0
 8010826:	d0f6      	beq.n	8010816 <__sflush_r+0xae>
 8010828:	0793      	lsls	r3, r2, #30
 801082a:	680e      	ldr	r6, [r1, #0]
 801082c:	bf08      	it	eq
 801082e:	694b      	ldreq	r3, [r1, #20]
 8010830:	600f      	str	r7, [r1, #0]
 8010832:	bf18      	it	ne
 8010834:	2300      	movne	r3, #0
 8010836:	eba6 0807 	sub.w	r8, r6, r7
 801083a:	608b      	str	r3, [r1, #8]
 801083c:	f1b8 0f00 	cmp.w	r8, #0
 8010840:	dde9      	ble.n	8010816 <__sflush_r+0xae>
 8010842:	6a21      	ldr	r1, [r4, #32]
 8010844:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010846:	4643      	mov	r3, r8
 8010848:	463a      	mov	r2, r7
 801084a:	4628      	mov	r0, r5
 801084c:	47b0      	blx	r6
 801084e:	2800      	cmp	r0, #0
 8010850:	dc08      	bgt.n	8010864 <__sflush_r+0xfc>
 8010852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010856:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801085a:	81a3      	strh	r3, [r4, #12]
 801085c:	f04f 30ff 	mov.w	r0, #4294967295
 8010860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010864:	4407      	add	r7, r0
 8010866:	eba8 0800 	sub.w	r8, r8, r0
 801086a:	e7e7      	b.n	801083c <__sflush_r+0xd4>
 801086c:	dfbffffe 	.word	0xdfbffffe

08010870 <_fflush_r>:
 8010870:	b538      	push	{r3, r4, r5, lr}
 8010872:	690b      	ldr	r3, [r1, #16]
 8010874:	4605      	mov	r5, r0
 8010876:	460c      	mov	r4, r1
 8010878:	b913      	cbnz	r3, 8010880 <_fflush_r+0x10>
 801087a:	2500      	movs	r5, #0
 801087c:	4628      	mov	r0, r5
 801087e:	bd38      	pop	{r3, r4, r5, pc}
 8010880:	b118      	cbz	r0, 801088a <_fflush_r+0x1a>
 8010882:	6a03      	ldr	r3, [r0, #32]
 8010884:	b90b      	cbnz	r3, 801088a <_fflush_r+0x1a>
 8010886:	f7fe f963 	bl	800eb50 <__sinit>
 801088a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d0f3      	beq.n	801087a <_fflush_r+0xa>
 8010892:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010894:	07d0      	lsls	r0, r2, #31
 8010896:	d404      	bmi.n	80108a2 <_fflush_r+0x32>
 8010898:	0599      	lsls	r1, r3, #22
 801089a:	d402      	bmi.n	80108a2 <_fflush_r+0x32>
 801089c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801089e:	f7fe fb40 	bl	800ef22 <__retarget_lock_acquire_recursive>
 80108a2:	4628      	mov	r0, r5
 80108a4:	4621      	mov	r1, r4
 80108a6:	f7ff ff5f 	bl	8010768 <__sflush_r>
 80108aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80108ac:	07da      	lsls	r2, r3, #31
 80108ae:	4605      	mov	r5, r0
 80108b0:	d4e4      	bmi.n	801087c <_fflush_r+0xc>
 80108b2:	89a3      	ldrh	r3, [r4, #12]
 80108b4:	059b      	lsls	r3, r3, #22
 80108b6:	d4e1      	bmi.n	801087c <_fflush_r+0xc>
 80108b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80108ba:	f7fe fb33 	bl	800ef24 <__retarget_lock_release_recursive>
 80108be:	e7dd      	b.n	801087c <_fflush_r+0xc>

080108c0 <__swhatbuf_r>:
 80108c0:	b570      	push	{r4, r5, r6, lr}
 80108c2:	460c      	mov	r4, r1
 80108c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108c8:	2900      	cmp	r1, #0
 80108ca:	b096      	sub	sp, #88	@ 0x58
 80108cc:	4615      	mov	r5, r2
 80108ce:	461e      	mov	r6, r3
 80108d0:	da0d      	bge.n	80108ee <__swhatbuf_r+0x2e>
 80108d2:	89a3      	ldrh	r3, [r4, #12]
 80108d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80108d8:	f04f 0100 	mov.w	r1, #0
 80108dc:	bf14      	ite	ne
 80108de:	2340      	movne	r3, #64	@ 0x40
 80108e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80108e4:	2000      	movs	r0, #0
 80108e6:	6031      	str	r1, [r6, #0]
 80108e8:	602b      	str	r3, [r5, #0]
 80108ea:	b016      	add	sp, #88	@ 0x58
 80108ec:	bd70      	pop	{r4, r5, r6, pc}
 80108ee:	466a      	mov	r2, sp
 80108f0:	f000 f848 	bl	8010984 <_fstat_r>
 80108f4:	2800      	cmp	r0, #0
 80108f6:	dbec      	blt.n	80108d2 <__swhatbuf_r+0x12>
 80108f8:	9901      	ldr	r1, [sp, #4]
 80108fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80108fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010902:	4259      	negs	r1, r3
 8010904:	4159      	adcs	r1, r3
 8010906:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801090a:	e7eb      	b.n	80108e4 <__swhatbuf_r+0x24>

0801090c <__smakebuf_r>:
 801090c:	898b      	ldrh	r3, [r1, #12]
 801090e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010910:	079d      	lsls	r5, r3, #30
 8010912:	4606      	mov	r6, r0
 8010914:	460c      	mov	r4, r1
 8010916:	d507      	bpl.n	8010928 <__smakebuf_r+0x1c>
 8010918:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801091c:	6023      	str	r3, [r4, #0]
 801091e:	6123      	str	r3, [r4, #16]
 8010920:	2301      	movs	r3, #1
 8010922:	6163      	str	r3, [r4, #20]
 8010924:	b003      	add	sp, #12
 8010926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010928:	ab01      	add	r3, sp, #4
 801092a:	466a      	mov	r2, sp
 801092c:	f7ff ffc8 	bl	80108c0 <__swhatbuf_r>
 8010930:	9f00      	ldr	r7, [sp, #0]
 8010932:	4605      	mov	r5, r0
 8010934:	4639      	mov	r1, r7
 8010936:	4630      	mov	r0, r6
 8010938:	f7ff f9c6 	bl	800fcc8 <_malloc_r>
 801093c:	b948      	cbnz	r0, 8010952 <__smakebuf_r+0x46>
 801093e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010942:	059a      	lsls	r2, r3, #22
 8010944:	d4ee      	bmi.n	8010924 <__smakebuf_r+0x18>
 8010946:	f023 0303 	bic.w	r3, r3, #3
 801094a:	f043 0302 	orr.w	r3, r3, #2
 801094e:	81a3      	strh	r3, [r4, #12]
 8010950:	e7e2      	b.n	8010918 <__smakebuf_r+0xc>
 8010952:	89a3      	ldrh	r3, [r4, #12]
 8010954:	6020      	str	r0, [r4, #0]
 8010956:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801095a:	81a3      	strh	r3, [r4, #12]
 801095c:	9b01      	ldr	r3, [sp, #4]
 801095e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010962:	b15b      	cbz	r3, 801097c <__smakebuf_r+0x70>
 8010964:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010968:	4630      	mov	r0, r6
 801096a:	f000 f81d 	bl	80109a8 <_isatty_r>
 801096e:	b128      	cbz	r0, 801097c <__smakebuf_r+0x70>
 8010970:	89a3      	ldrh	r3, [r4, #12]
 8010972:	f023 0303 	bic.w	r3, r3, #3
 8010976:	f043 0301 	orr.w	r3, r3, #1
 801097a:	81a3      	strh	r3, [r4, #12]
 801097c:	89a3      	ldrh	r3, [r4, #12]
 801097e:	431d      	orrs	r5, r3
 8010980:	81a5      	strh	r5, [r4, #12]
 8010982:	e7cf      	b.n	8010924 <__smakebuf_r+0x18>

08010984 <_fstat_r>:
 8010984:	b538      	push	{r3, r4, r5, lr}
 8010986:	4d07      	ldr	r5, [pc, #28]	@ (80109a4 <_fstat_r+0x20>)
 8010988:	2300      	movs	r3, #0
 801098a:	4604      	mov	r4, r0
 801098c:	4608      	mov	r0, r1
 801098e:	4611      	mov	r1, r2
 8010990:	602b      	str	r3, [r5, #0]
 8010992:	f7f1 ff35 	bl	8002800 <_fstat>
 8010996:	1c43      	adds	r3, r0, #1
 8010998:	d102      	bne.n	80109a0 <_fstat_r+0x1c>
 801099a:	682b      	ldr	r3, [r5, #0]
 801099c:	b103      	cbz	r3, 80109a0 <_fstat_r+0x1c>
 801099e:	6023      	str	r3, [r4, #0]
 80109a0:	bd38      	pop	{r3, r4, r5, pc}
 80109a2:	bf00      	nop
 80109a4:	200010f0 	.word	0x200010f0

080109a8 <_isatty_r>:
 80109a8:	b538      	push	{r3, r4, r5, lr}
 80109aa:	4d06      	ldr	r5, [pc, #24]	@ (80109c4 <_isatty_r+0x1c>)
 80109ac:	2300      	movs	r3, #0
 80109ae:	4604      	mov	r4, r0
 80109b0:	4608      	mov	r0, r1
 80109b2:	602b      	str	r3, [r5, #0]
 80109b4:	f7f1 ff34 	bl	8002820 <_isatty>
 80109b8:	1c43      	adds	r3, r0, #1
 80109ba:	d102      	bne.n	80109c2 <_isatty_r+0x1a>
 80109bc:	682b      	ldr	r3, [r5, #0]
 80109be:	b103      	cbz	r3, 80109c2 <_isatty_r+0x1a>
 80109c0:	6023      	str	r3, [r4, #0]
 80109c2:	bd38      	pop	{r3, r4, r5, pc}
 80109c4:	200010f0 	.word	0x200010f0

080109c8 <_sbrk_r>:
 80109c8:	b538      	push	{r3, r4, r5, lr}
 80109ca:	4d06      	ldr	r5, [pc, #24]	@ (80109e4 <_sbrk_r+0x1c>)
 80109cc:	2300      	movs	r3, #0
 80109ce:	4604      	mov	r4, r0
 80109d0:	4608      	mov	r0, r1
 80109d2:	602b      	str	r3, [r5, #0]
 80109d4:	f7f1 ff3c 	bl	8002850 <_sbrk>
 80109d8:	1c43      	adds	r3, r0, #1
 80109da:	d102      	bne.n	80109e2 <_sbrk_r+0x1a>
 80109dc:	682b      	ldr	r3, [r5, #0]
 80109de:	b103      	cbz	r3, 80109e2 <_sbrk_r+0x1a>
 80109e0:	6023      	str	r3, [r4, #0]
 80109e2:	bd38      	pop	{r3, r4, r5, pc}
 80109e4:	200010f0 	.word	0x200010f0

080109e8 <__assert_func>:
 80109e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80109ea:	4614      	mov	r4, r2
 80109ec:	461a      	mov	r2, r3
 80109ee:	4b09      	ldr	r3, [pc, #36]	@ (8010a14 <__assert_func+0x2c>)
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	4605      	mov	r5, r0
 80109f4:	68d8      	ldr	r0, [r3, #12]
 80109f6:	b954      	cbnz	r4, 8010a0e <__assert_func+0x26>
 80109f8:	4b07      	ldr	r3, [pc, #28]	@ (8010a18 <__assert_func+0x30>)
 80109fa:	461c      	mov	r4, r3
 80109fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010a00:	9100      	str	r1, [sp, #0]
 8010a02:	462b      	mov	r3, r5
 8010a04:	4905      	ldr	r1, [pc, #20]	@ (8010a1c <__assert_func+0x34>)
 8010a06:	f000 f841 	bl	8010a8c <fiprintf>
 8010a0a:	f000 f851 	bl	8010ab0 <abort>
 8010a0e:	4b04      	ldr	r3, [pc, #16]	@ (8010a20 <__assert_func+0x38>)
 8010a10:	e7f4      	b.n	80109fc <__assert_func+0x14>
 8010a12:	bf00      	nop
 8010a14:	20000178 	.word	0x20000178
 8010a18:	0801124e 	.word	0x0801124e
 8010a1c:	08011220 	.word	0x08011220
 8010a20:	08011213 	.word	0x08011213

08010a24 <_calloc_r>:
 8010a24:	b570      	push	{r4, r5, r6, lr}
 8010a26:	fba1 5402 	umull	r5, r4, r1, r2
 8010a2a:	b93c      	cbnz	r4, 8010a3c <_calloc_r+0x18>
 8010a2c:	4629      	mov	r1, r5
 8010a2e:	f7ff f94b 	bl	800fcc8 <_malloc_r>
 8010a32:	4606      	mov	r6, r0
 8010a34:	b928      	cbnz	r0, 8010a42 <_calloc_r+0x1e>
 8010a36:	2600      	movs	r6, #0
 8010a38:	4630      	mov	r0, r6
 8010a3a:	bd70      	pop	{r4, r5, r6, pc}
 8010a3c:	220c      	movs	r2, #12
 8010a3e:	6002      	str	r2, [r0, #0]
 8010a40:	e7f9      	b.n	8010a36 <_calloc_r+0x12>
 8010a42:	462a      	mov	r2, r5
 8010a44:	4621      	mov	r1, r4
 8010a46:	f7fe f9ef 	bl	800ee28 <memset>
 8010a4a:	e7f5      	b.n	8010a38 <_calloc_r+0x14>

08010a4c <__ascii_mbtowc>:
 8010a4c:	b082      	sub	sp, #8
 8010a4e:	b901      	cbnz	r1, 8010a52 <__ascii_mbtowc+0x6>
 8010a50:	a901      	add	r1, sp, #4
 8010a52:	b142      	cbz	r2, 8010a66 <__ascii_mbtowc+0x1a>
 8010a54:	b14b      	cbz	r3, 8010a6a <__ascii_mbtowc+0x1e>
 8010a56:	7813      	ldrb	r3, [r2, #0]
 8010a58:	600b      	str	r3, [r1, #0]
 8010a5a:	7812      	ldrb	r2, [r2, #0]
 8010a5c:	1e10      	subs	r0, r2, #0
 8010a5e:	bf18      	it	ne
 8010a60:	2001      	movne	r0, #1
 8010a62:	b002      	add	sp, #8
 8010a64:	4770      	bx	lr
 8010a66:	4610      	mov	r0, r2
 8010a68:	e7fb      	b.n	8010a62 <__ascii_mbtowc+0x16>
 8010a6a:	f06f 0001 	mvn.w	r0, #1
 8010a6e:	e7f8      	b.n	8010a62 <__ascii_mbtowc+0x16>

08010a70 <__ascii_wctomb>:
 8010a70:	4603      	mov	r3, r0
 8010a72:	4608      	mov	r0, r1
 8010a74:	b141      	cbz	r1, 8010a88 <__ascii_wctomb+0x18>
 8010a76:	2aff      	cmp	r2, #255	@ 0xff
 8010a78:	d904      	bls.n	8010a84 <__ascii_wctomb+0x14>
 8010a7a:	228a      	movs	r2, #138	@ 0x8a
 8010a7c:	601a      	str	r2, [r3, #0]
 8010a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8010a82:	4770      	bx	lr
 8010a84:	700a      	strb	r2, [r1, #0]
 8010a86:	2001      	movs	r0, #1
 8010a88:	4770      	bx	lr
	...

08010a8c <fiprintf>:
 8010a8c:	b40e      	push	{r1, r2, r3}
 8010a8e:	b503      	push	{r0, r1, lr}
 8010a90:	4601      	mov	r1, r0
 8010a92:	ab03      	add	r3, sp, #12
 8010a94:	4805      	ldr	r0, [pc, #20]	@ (8010aac <fiprintf+0x20>)
 8010a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a9a:	6800      	ldr	r0, [r0, #0]
 8010a9c:	9301      	str	r3, [sp, #4]
 8010a9e:	f7ff fd4b 	bl	8010538 <_vfiprintf_r>
 8010aa2:	b002      	add	sp, #8
 8010aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8010aa8:	b003      	add	sp, #12
 8010aaa:	4770      	bx	lr
 8010aac:	20000178 	.word	0x20000178

08010ab0 <abort>:
 8010ab0:	b508      	push	{r3, lr}
 8010ab2:	2006      	movs	r0, #6
 8010ab4:	f000 f82c 	bl	8010b10 <raise>
 8010ab8:	2001      	movs	r0, #1
 8010aba:	f7f1 fe51 	bl	8002760 <_exit>

08010abe <_raise_r>:
 8010abe:	291f      	cmp	r1, #31
 8010ac0:	b538      	push	{r3, r4, r5, lr}
 8010ac2:	4605      	mov	r5, r0
 8010ac4:	460c      	mov	r4, r1
 8010ac6:	d904      	bls.n	8010ad2 <_raise_r+0x14>
 8010ac8:	2316      	movs	r3, #22
 8010aca:	6003      	str	r3, [r0, #0]
 8010acc:	f04f 30ff 	mov.w	r0, #4294967295
 8010ad0:	bd38      	pop	{r3, r4, r5, pc}
 8010ad2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010ad4:	b112      	cbz	r2, 8010adc <_raise_r+0x1e>
 8010ad6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010ada:	b94b      	cbnz	r3, 8010af0 <_raise_r+0x32>
 8010adc:	4628      	mov	r0, r5
 8010ade:	f000 f831 	bl	8010b44 <_getpid_r>
 8010ae2:	4622      	mov	r2, r4
 8010ae4:	4601      	mov	r1, r0
 8010ae6:	4628      	mov	r0, r5
 8010ae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010aec:	f000 b818 	b.w	8010b20 <_kill_r>
 8010af0:	2b01      	cmp	r3, #1
 8010af2:	d00a      	beq.n	8010b0a <_raise_r+0x4c>
 8010af4:	1c59      	adds	r1, r3, #1
 8010af6:	d103      	bne.n	8010b00 <_raise_r+0x42>
 8010af8:	2316      	movs	r3, #22
 8010afa:	6003      	str	r3, [r0, #0]
 8010afc:	2001      	movs	r0, #1
 8010afe:	e7e7      	b.n	8010ad0 <_raise_r+0x12>
 8010b00:	2100      	movs	r1, #0
 8010b02:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010b06:	4620      	mov	r0, r4
 8010b08:	4798      	blx	r3
 8010b0a:	2000      	movs	r0, #0
 8010b0c:	e7e0      	b.n	8010ad0 <_raise_r+0x12>
	...

08010b10 <raise>:
 8010b10:	4b02      	ldr	r3, [pc, #8]	@ (8010b1c <raise+0xc>)
 8010b12:	4601      	mov	r1, r0
 8010b14:	6818      	ldr	r0, [r3, #0]
 8010b16:	f7ff bfd2 	b.w	8010abe <_raise_r>
 8010b1a:	bf00      	nop
 8010b1c:	20000178 	.word	0x20000178

08010b20 <_kill_r>:
 8010b20:	b538      	push	{r3, r4, r5, lr}
 8010b22:	4d07      	ldr	r5, [pc, #28]	@ (8010b40 <_kill_r+0x20>)
 8010b24:	2300      	movs	r3, #0
 8010b26:	4604      	mov	r4, r0
 8010b28:	4608      	mov	r0, r1
 8010b2a:	4611      	mov	r1, r2
 8010b2c:	602b      	str	r3, [r5, #0]
 8010b2e:	f7f1 fe07 	bl	8002740 <_kill>
 8010b32:	1c43      	adds	r3, r0, #1
 8010b34:	d102      	bne.n	8010b3c <_kill_r+0x1c>
 8010b36:	682b      	ldr	r3, [r5, #0]
 8010b38:	b103      	cbz	r3, 8010b3c <_kill_r+0x1c>
 8010b3a:	6023      	str	r3, [r4, #0]
 8010b3c:	bd38      	pop	{r3, r4, r5, pc}
 8010b3e:	bf00      	nop
 8010b40:	200010f0 	.word	0x200010f0

08010b44 <_getpid_r>:
 8010b44:	f7f1 bdf4 	b.w	8002730 <_getpid>

08010b48 <_init>:
 8010b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b4a:	bf00      	nop
 8010b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b4e:	bc08      	pop	{r3}
 8010b50:	469e      	mov	lr, r3
 8010b52:	4770      	bx	lr

08010b54 <_fini>:
 8010b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b56:	bf00      	nop
 8010b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b5a:	bc08      	pop	{r3}
 8010b5c:	469e      	mov	lr, r3
 8010b5e:	4770      	bx	lr
