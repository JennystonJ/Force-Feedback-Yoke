
Force Feedback Yoke.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f080  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  0800f210  0800f210  00010210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f620  0800f620  0001132c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f620  0800f620  00010620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f628  0800f628  0001132c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f628  0800f628  00010628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f62c  0800f62c  0001062c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000032c  20000000  0800f630  00011000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .ccmram       00000000  10000000  10000000  0001132c  2**0
                  CONTENTS
 10 .bss          00000d2c  2000032c  2000032c  0001132c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001058  20001058  0001132c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001132c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ff64  00000000  00000000  0001135c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ee1  00000000  00000000  000312c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ac8  00000000  00000000  000361a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001478  00000000  00000000  00037c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007fb4  00000000  00000000  000390e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025b8e  00000000  00000000  0004109c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c26e1  00000000  00000000  00066c2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012930b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007dec  00000000  00000000  00129350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000085  00000000  00000000  0013113c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000032c 	.word	0x2000032c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f1f8 	.word	0x0800f1f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000330 	.word	0x20000330
 80001cc:	0800f1f8 	.word	0x0800f1f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <ButtonInit>:
#include "button.h"
#include <stddef.h>

void ButtonInit(Button_t *button, int (*ButtonReadState)(Button_t *button)) {
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]

	button->ButtonReadState = ButtonReadState;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	601a      	str	r2, [r3, #0]
	button->ButtonStateChangedCallback = NULL;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	605a      	str	r2, [r3, #4]

	button->state = BUTTON_STATE_IDLE;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	741a      	strb	r2, [r3, #16]
	button->pressed = false;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	721a      	strb	r2, [r3, #8]
	button->previouslyPressed = button->pressed;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	7a1a      	ldrb	r2, [r3, #8]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	725a      	strb	r2, [r3, #9]
	button->steadyCount = 0;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	60da      	str	r2, [r3, #12]


}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <ButtonIsPressed>:

bool ButtonIsPressed(Button_t *button) {
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	return button->pressed;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	7a1b      	ldrb	r3, [r3, #8]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <ButtonSetStateChangedCallback>:
	// Update previous state for next iteration
	button->previouslyPressed = readingPressed;
}

void ButtonSetStateChangedCallback(Button_t *button,
		void (*ButtonStateChangedCallback)(Button_t *button)) {
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
	button->ButtonStateChangedCallback = ButtonStateChangedCallback;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	683a      	ldr	r2, [r7, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <EncoderInit>:
 *      Author: Jennyston
 */

#include "encoder.h"

void EncoderInit(Encoder_t *encoder, EncoderInterface_t interface) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	e883 0006 	stmia.w	r3, {r1, r2}
	encoder->interface = interface;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c30:	e882 0003 	stmia.w	r2, {r0, r1}

	encoder->countPerRev = ENCODER_DEFAULT_COUNT_PER_REV;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c3a:	611a      	str	r2, [r3, #16]
	encoder->totalCount = GetEncoderSensorCount();
 8000c3c:	f001 f966 	bl	8001f0c <GetEncoderSensorCount>
 8000c40:	4602      	mov	r2, r0
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	609a      	str	r2, [r3, #8]
	encoder->prevHardCount = encoder->totalCount;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	689a      	ldr	r2, [r3, #8]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	60da      	str	r2, [r3, #12]
	encoder->speed = 0;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	f04f 0200 	mov.w	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
}
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <EncoderGetCount>:

int EncoderGetCount(Encoder_t *encoder) {
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
	return encoder->totalCount;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689b      	ldr	r3, [r3, #8]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <MotorInit>:

#include "motor.h"
#include "utilities/utilities.h"
#include <stdbool.h>

void MotorInit(Motor_t *motor, MotorInterface_t interface) {
 8000c76:	b490      	push	{r4, r7}
 8000c78:	b084      	sub	sp, #16
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	60f8      	str	r0, [r7, #12]
 8000c7e:	4638      	mov	r0, r7
 8000c80:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	motor->interface = interface;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	461c      	mov	r4, r3
 8000c88:	463b      	mov	r3, r7
 8000c8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc90      	pop	{r4, r7}
 8000c9a:	4770      	bx	lr

08000c9c <UsbReportInit>:

#include "usb_report.h"
#include <string.h>


void UsbReportInit(UsbReport_t *report, PacketParser_t *parser) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
	report->reportId = 0;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]

	// Clear report data
	memset(report->data, 0, USB_REPORT_MAX_SIZE);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	2240      	movs	r2, #64	@ 0x40
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f00c fc0f 	bl	800d4d8 <memset>

	report->currentParseIndex = 0;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	//report->endianness = inEndian;
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <UsbReportLoad>:

void UsbReportLoad(UsbReport_t *report, uint8_t *buffer, uint16_t size) {
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b084      	sub	sp, #16
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	60f8      	str	r0, [r7, #12]
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	80fb      	strh	r3, [r7, #6]
	// First index contains report id
	report->reportId = *buffer;
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	781a      	ldrb	r2, [r3, #0]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	701a      	strb	r2, [r3, #0]

	// Following indices store data
	// Copy to report data
	memcpy(report->data, buffer+1, size-1);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	1c58      	adds	r0, r3, #1
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	1c59      	adds	r1, r3, #1
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	461a      	mov	r2, r3
 8000cee:	f00c fc72 	bl	800d5d6 <memcpy>

	report->currentParseIndex = 0;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
}
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <UsbReportParseNextFloat>:
	report->currentParseIndex += sizeof(uint32_t);

	return value;
}

float UsbReportParseNextFloat(UsbReport_t *report) {
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b084      	sub	sp, #16
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
	uint8_t *data = report->data + report->currentParseIndex;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	f8b2 2042 	ldrh.w	r2, [r2, #66]	@ 0x42
 8000d14:	4413      	add	r3, r2
 8000d16:	60fb      	str	r3, [r7, #12]
	float value;
	ParseBytesEndian(&value, data, sizeof(float), report->endianness);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000d1e:	f107 0008 	add.w	r0, r7, #8
 8000d22:	2204      	movs	r2, #4
 8000d24:	68f9      	ldr	r1, [r7, #12]
 8000d26:	f000 f810 	bl	8000d4a <ParseBytesEndian>

	// Increment parse index for next parse
	report->currentParseIndex += sizeof(float);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8000d30:	3304      	adds	r3, #4
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

	return value;
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	ee07 3a90 	vmov	s15, r3
}
 8000d40:	eeb0 0a67 	vmov.f32	s0, s15
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <ParseBytesEndian>:

void ParseBytesEndian(void *dest, uint8_t *source, uint8_t length,
		int endianess) {
 8000d4a:	b480      	push	{r7}
 8000d4c:	b087      	sub	sp, #28
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	60f8      	str	r0, [r7, #12]
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	4613      	mov	r3, r2
 8000d58:	71fb      	strb	r3, [r7, #7]
	// Parse based on endianess
	switch(endianess) {
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d018      	beq.n	8000d92 <ParseBytesEndian+0x48>
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d128      	bne.n	8000db8 <ParseBytesEndian+0x6e>
		case USB_REPORT_IN_BIG_ENDIAN:
			for(int i = 0; i < length; i++) {
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
 8000d6a:	e00d      	b.n	8000d88 <ParseBytesEndian+0x3e>
				*((uint8_t *)dest+i) = *(source + length-i-1);
 8000d6c:	79fa      	ldrb	r2, [r7, #7]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	3b01      	subs	r3, #1
 8000d74:	68ba      	ldr	r2, [r7, #8]
 8000d76:	441a      	add	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	68f9      	ldr	r1, [r7, #12]
 8000d7c:	440b      	add	r3, r1
 8000d7e:	7812      	ldrb	r2, [r2, #0]
 8000d80:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < length; i++) {
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3301      	adds	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	697a      	ldr	r2, [r7, #20]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	dbed      	blt.n	8000d6c <ParseBytesEndian+0x22>
			}
			break;
 8000d90:	e013      	b.n	8000dba <ParseBytesEndian+0x70>
		case USB_REPORT_IN_LITTLE_ENDIAN:
			for(int i = 0; i < length; i++) {
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	e00a      	b.n	8000dae <ParseBytesEndian+0x64>
				*((uint8_t *)dest+i) = *(source+i);
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	441a      	add	r2, r3
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	68f9      	ldr	r1, [r7, #12]
 8000da2:	440b      	add	r3, r1
 8000da4:	7812      	ldrb	r2, [r2, #0]
 8000da6:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < length; i++) {
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	3301      	adds	r3, #1
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	dbf0      	blt.n	8000d98 <ParseBytesEndian+0x4e>
			}
			break;
 8000db6:	e000      	b.n	8000dba <ParseBytesEndian+0x70>
		default:
			// Invalid condition
			break;
 8000db8:	bf00      	nop
	}
}
 8000dba:	bf00      	nop
 8000dbc:	371c      	adds	r7, #28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <Constrain>:
int32_t Map(int32_t in, int32_t inMin, int32_t inMax, int32_t outMin,
		int32_t outMax) {
	return (((int64_t)(in - inMin)*(outMax - outMin))/(inMax - inMin)) + outMin;
}

int32_t Constrain(int32_t value, int32_t min, int32_t max) {
 8000dc6:	b480      	push	{r7}
 8000dc8:	b085      	sub	sp, #20
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	60f8      	str	r0, [r7, #12]
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
	if(value < min) {
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	da01      	bge.n	8000dde <Constrain+0x18>
		return min;
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	e006      	b.n	8000dec <Constrain+0x26>
	}
	else if(value > max) {
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	dd01      	ble.n	8000dea <Constrain+0x24>
		return max;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	e000      	b.n	8000dec <Constrain+0x26>
	}
	else {
		return value;
 8000dea:	68fb      	ldr	r3, [r7, #12]
	}
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <ButtonStateChangedCallback>:
static float angle;

void CommandLineMode(void);

// Callbacks
void ButtonStateChangedCallback(Button_t *button) {
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	if(button == &btnAccept) {
	}
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <ButtonReadState>:

int ButtonReadState(Button_t *button) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	if(button == &btnAccept) {
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a0c      	ldr	r2, [pc, #48]	@ (8000e48 <ButtonReadState+0x3c>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d10f      	bne.n	8000e3c <ButtonReadState+0x30>
		if(ButtonIsPressed(&btnAccept)) {
 8000e1c:	480a      	ldr	r0, [pc, #40]	@ (8000e48 <ButtonReadState+0x3c>)
 8000e1e:	f7ff fee1 	bl	8000be4 <ButtonIsPressed>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d009      	beq.n	8000e3c <ButtonReadState+0x30>
			return GPIOGetState(&gpioAccept) == GPIO_HIGH ? 1 : 0;
 8000e28:	4808      	ldr	r0, [pc, #32]	@ (8000e4c <ButtonReadState+0x40>)
 8000e2a:	f001 faa5 	bl	8002378 <GPIOGetState>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	bf0c      	ite	eq
 8000e34:	2301      	moveq	r3, #1
 8000e36:	2300      	movne	r3, #0
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	e000      	b.n	8000e3e <ButtonReadState+0x32>
		}
	}

	return 0;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000418 	.word	0x20000418
 8000e4c:	20000478 	.word	0x20000478

08000e50 <ApplicationInit>:

void ApplicationInit(void) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0


	UsbReportInit(&usbReport, USB_REPORT_IN_LITTLE_ENDIAN);
 8000e54:	2100      	movs	r1, #0
 8000e56:	4815      	ldr	r0, [pc, #84]	@ (8000eac <ApplicationInit+0x5c>)
 8000e58:	f7ff ff20 	bl	8000c9c <UsbReportInit>

	ButtonInit(&btnAccept, &ButtonReadState);
 8000e5c:	4914      	ldr	r1, [pc, #80]	@ (8000eb0 <ApplicationInit+0x60>)
 8000e5e:	4815      	ldr	r0, [pc, #84]	@ (8000eb4 <ApplicationInit+0x64>)
 8000e60:	f7ff fea2 	bl	8000ba8 <ButtonInit>

	printf("Ready!\r\n");
 8000e64:	4814      	ldr	r0, [pc, #80]	@ (8000eb8 <ApplicationInit+0x68>)
 8000e66:	f00c fa57 	bl	800d318 <puts>

	// Wait for button press then release before proceeding
	while(!ButtonIsPressed(&btnAccept)) {
 8000e6a:	bf00      	nop
 8000e6c:	4811      	ldr	r0, [pc, #68]	@ (8000eb4 <ApplicationInit+0x64>)
 8000e6e:	f7ff feb9 	bl	8000be4 <ButtonIsPressed>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f083 0301 	eor.w	r3, r3, #1
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1f6      	bne.n	8000e6c <ApplicationInit+0x1c>
	}
	while(ButtonIsPressed(&btnAccept)) {
 8000e7e:	bf00      	nop
 8000e80:	480c      	ldr	r0, [pc, #48]	@ (8000eb4 <ApplicationInit+0x64>)
 8000e82:	f7ff feaf 	bl	8000be4 <ButtonIsPressed>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1f9      	bne.n	8000e80 <ApplicationInit+0x30>
	}
	while(!ButtonIsPressed(&btnAccept)) {
 8000e8c:	bf00      	nop
 8000e8e:	4809      	ldr	r0, [pc, #36]	@ (8000eb4 <ApplicationInit+0x64>)
 8000e90:	f7ff fea8 	bl	8000be4 <ButtonIsPressed>
 8000e94:	4603      	mov	r3, r0
 8000e96:	f083 0301 	eor.w	r3, r3, #1
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d1f6      	bne.n	8000e8e <ApplicationInit+0x3e>
	}

	// Register callback for future presses
	ButtonSetStateChangedCallback(&btnAccept, &ButtonStateChangedCallback);
 8000ea0:	4906      	ldr	r1, [pc, #24]	@ (8000ebc <ApplicationInit+0x6c>)
 8000ea2:	4804      	ldr	r0, [pc, #16]	@ (8000eb4 <ApplicationInit+0x64>)
 8000ea4:	f7ff feaa 	bl	8000bfc <ButtonSetStateChangedCallback>
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	200003d0 	.word	0x200003d0
 8000eb0:	08000e0d 	.word	0x08000e0d
 8000eb4:	20000418 	.word	0x20000418
 8000eb8:	0800f210 	.word	0x0800f210
 8000ebc:	08000df9 	.word	0x08000df9

08000ec0 <ApplicationRun>:

void ApplicationRun(void) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0

	int32_t periFrequency = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
	float periAmplitude = 0.0f;
 8000eca:	f04f 0300 	mov.w	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]
	float sprStrength = 0.0f;
 8000ed0:	f04f 0300 	mov.w	r3, #0
 8000ed4:	607b      	str	r3, [r7, #4]

	while(1) {
		if(flag_rx == 1){
 8000ed6:	4b37      	ldr	r3, [pc, #220]	@ (8000fb4 <ApplicationRun+0xf4>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d148      	bne.n	8000f70 <ApplicationRun+0xb0>

			flag_rx = 0;
 8000ede:	4b35      	ldr	r3, [pc, #212]	@ (8000fb4 <ApplicationRun+0xf4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]

			UsbReportLoad(&usbReport, report_buffer,
 8000ee4:	220d      	movs	r2, #13
 8000ee6:	4934      	ldr	r1, [pc, #208]	@ (8000fb8 <ApplicationRun+0xf8>)
 8000ee8:	4834      	ldr	r0, [pc, #208]	@ (8000fbc <ApplicationRun+0xfc>)
 8000eea:	f7ff feee 	bl	8000cca <UsbReportLoad>
					USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
			sprStrength = UsbReportParseNextFloat(&usbReport);
 8000eee:	4833      	ldr	r0, [pc, #204]	@ (8000fbc <ApplicationRun+0xfc>)
 8000ef0:	f7ff ff07 	bl	8000d02 <UsbReportParseNextFloat>
 8000ef4:	ed87 0a01 	vstr	s0, [r7, #4]
			periAmplitude = UsbReportParseNextFloat(&usbReport);
 8000ef8:	4830      	ldr	r0, [pc, #192]	@ (8000fbc <ApplicationRun+0xfc>)
 8000efa:	f7ff ff02 	bl	8000d02 <UsbReportParseNextFloat>
 8000efe:	ed87 0a02 	vstr	s0, [r7, #8]
			periFrequency = UsbReportParseNextFloat(&usbReport);
 8000f02:	482e      	ldr	r0, [pc, #184]	@ (8000fbc <ApplicationRun+0xfc>)
 8000f04:	f7ff fefd 	bl	8000d02 <UsbReportParseNextFloat>
 8000f08:	eef0 7a40 	vmov.f32	s15, s0
 8000f0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f10:	ee17 3a90 	vmov	r3, s15
 8000f14:	60fb      	str	r3, [r7, #12]

			// Prepare and send aileron axis
					  int16_t aileron = (int16_t)Constrain(((
							  EncoderGetCount(&rollEncoder)/4095.0f) *
 8000f16:	482a      	ldr	r0, [pc, #168]	@ (8000fc0 <ApplicationRun+0x100>)
 8000f18:	f7ff fea1 	bl	8000c5e <EncoderGetCount>
 8000f1c:	ee07 0a90 	vmov	s15, r0
 8000f20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f24:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8000fc4 <ApplicationRun+0x104>
 8000f28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f2c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000fc8 <ApplicationRun+0x108>
 8000f30:	ee67 7a87 	vmul.f32	s15, s15, s14
					  int16_t aileron = (int16_t)Constrain(((
 8000f34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f38:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000f3c:	4923      	ldr	r1, [pc, #140]	@ (8000fcc <ApplicationRun+0x10c>)
 8000f3e:	ee17 0a90 	vmov	r0, s15
 8000f42:	f7ff ff40 	bl	8000dc6 <Constrain>
 8000f46:	4603      	mov	r3, r0
 8000f48:	807b      	strh	r3, [r7, #2]
							  32767), -32767, 32767);

			// Set report ID to 1
			reportTxBuffer[0] = 0x01;
 8000f4a:	4b21      	ldr	r3, [pc, #132]	@ (8000fd0 <ApplicationRun+0x110>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
			reportTxBuffer[1] = aileron & 0xFF;
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd0 <ApplicationRun+0x110>)
 8000f56:	705a      	strb	r2, [r3, #1]
			reportTxBuffer[2] = aileron >> 8;
 8000f58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f5c:	121b      	asrs	r3, r3, #8
 8000f5e:	b21b      	sxth	r3, r3
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd0 <ApplicationRun+0x110>)
 8000f64:	709a      	strb	r2, [r3, #2]

			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, reportTxBuffer, 3);
 8000f66:	2203      	movs	r2, #3
 8000f68:	4919      	ldr	r1, [pc, #100]	@ (8000fd0 <ApplicationRun+0x110>)
 8000f6a:	481a      	ldr	r0, [pc, #104]	@ (8000fd4 <ApplicationRun+0x114>)
 8000f6c:	f009 feca 	bl	800ad04 <USBD_CUSTOM_HID_SendReport>
		}

		if(flag == 1) {
 8000f70:	4b19      	ldr	r3, [pc, #100]	@ (8000fd8 <ApplicationRun+0x118>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d107      	bne.n	8000f88 <ApplicationRun+0xc8>
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, txBuffer, 64);
 8000f78:	2240      	movs	r2, #64	@ 0x40
 8000f7a:	4918      	ldr	r1, [pc, #96]	@ (8000fdc <ApplicationRun+0x11c>)
 8000f7c:	4815      	ldr	r0, [pc, #84]	@ (8000fd4 <ApplicationRun+0x114>)
 8000f7e:	f009 fec1 	bl	800ad04 <USBD_CUSTOM_HID_SendReport>

			flag = 0;
 8000f82:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <ApplicationRun+0x118>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
		}

		angle = (EncoderGetCount(&rollEncoder)/49152.0f)*360.0f;
 8000f88:	480d      	ldr	r0, [pc, #52]	@ (8000fc0 <ApplicationRun+0x100>)
 8000f8a:	f7ff fe68 	bl	8000c5e <EncoderGetCount>
 8000f8e:	ee07 0a90 	vmov	s15, r0
 8000f92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f96:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8000fe0 <ApplicationRun+0x120>
 8000f9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f9e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000fe4 <ApplicationRun+0x124>
 8000fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa6:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <ApplicationRun+0x128>)
 8000fa8:	edc3 7a00 	vstr	s15, [r3]

		HAL_Delay(5);
 8000fac:	2005      	movs	r0, #5
 8000fae:	f001 faab 	bl	8002508 <HAL_Delay>
		if(flag_rx == 1){
 8000fb2:	e790      	b.n	8000ed6 <ApplicationRun+0x16>
 8000fb4:	200003cd 	.word	0x200003cd
 8000fb8:	2000038c 	.word	0x2000038c
 8000fbc:	200003d0 	.word	0x200003d0
 8000fc0:	20000448 	.word	0x20000448
 8000fc4:	457ff000 	.word	0x457ff000
 8000fc8:	46fffe00 	.word	0x46fffe00
 8000fcc:	ffff8001 	.word	0xffff8001
 8000fd0:	20000348 	.word	0x20000348
 8000fd4:	2000074c 	.word	0x2000074c
 8000fd8:	200003cc 	.word	0x200003cc
 8000fdc:	2000034c 	.word	0x2000034c
 8000fe0:	47400000 	.word	0x47400000
 8000fe4:	43b40000 	.word	0x43b40000
 8000fe8:	2000042c 	.word	0x2000042c

08000fec <BspInit>:
// Private function prototypes
void SetupEncoders(void);
void SetupMotors(void);
void SetupButtons(void);

void BspInit(void) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	SetupEncoders();
 8000ff0:	f000 f816 	bl	8001020 <SetupEncoders>
	SetupMotors();
 8000ff4:	f000 f848 	bl	8001088 <SetupMotors>
	SetupButtons();
 8000ff8:	f000 f8b0 	bl	800115c <SetupButtons>

	// --- Timer setup ----
	// Motor PWM timer
	HAL_TIM_Base_Start_IT(&htim3);
 8000ffc:	4805      	ldr	r0, [pc, #20]	@ (8001014 <BspInit+0x28>)
 8000ffe:	f005 fd0b 	bl	8006a18 <HAL_TIM_Base_Start_IT>
	// Update timer
	HAL_TIM_Base_Start_IT(&htim6);
 8001002:	4805      	ldr	r0, [pc, #20]	@ (8001018 <BspInit+0x2c>)
 8001004:	f005 fd08 	bl	8006a18 <HAL_TIM_Base_Start_IT>
	// Control loop timer
	HAL_TIM_Base_Start_IT(&htim7);
 8001008:	4804      	ldr	r0, [pc, #16]	@ (800101c <BspInit+0x30>)
 800100a:	f005 fd05 	bl	8006a18 <HAL_TIM_Base_Start_IT>
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200005d4 	.word	0x200005d4
 8001018:	20000620 	.word	0x20000620
 800101c:	2000066c 	.word	0x2000066c

08001020 <SetupEncoders>:

void SetupEncoders(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
	// Pitch
	AS5600Init(&pitchAS5600, &hi2c1);
 8001026:	4912      	ldr	r1, [pc, #72]	@ (8001070 <SetupEncoders+0x50>)
 8001028:	4812      	ldr	r0, [pc, #72]	@ (8001074 <SetupEncoders+0x54>)
 800102a:	f000 fef3 	bl	8001e14 <AS5600Init>
	EncoderInterface_t pitchEncoderI;
	AS5600InterfaceInit(&pitchEncoderI, &pitchAS5600);
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	4910      	ldr	r1, [pc, #64]	@ (8001074 <SetupEncoders+0x54>)
 8001034:	4618      	mov	r0, r3
 8001036:	f000 ff55 	bl	8001ee4 <AS5600InterfaceInit>
	EncoderInit(&pitchEncoder, pitchEncoderI);
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001042:	480d      	ldr	r0, [pc, #52]	@ (8001078 <SetupEncoders+0x58>)
 8001044:	f7ff fde8 	bl	8000c18 <EncoderInit>

	// Roll
	AS5600Init(&rollAS5600, &hi2c2);
 8001048:	490c      	ldr	r1, [pc, #48]	@ (800107c <SetupEncoders+0x5c>)
 800104a:	480d      	ldr	r0, [pc, #52]	@ (8001080 <SetupEncoders+0x60>)
 800104c:	f000 fee2 	bl	8001e14 <AS5600Init>
	EncoderInterface_t rollEncoderI;
	AS5600InterfaceInit(&rollEncoderI, &rollAS5600);
 8001050:	463b      	mov	r3, r7
 8001052:	490b      	ldr	r1, [pc, #44]	@ (8001080 <SetupEncoders+0x60>)
 8001054:	4618      	mov	r0, r3
 8001056:	f000 ff45 	bl	8001ee4 <AS5600InterfaceInit>
	EncoderInit(&rollEncoder, rollEncoderI);
 800105a:	463b      	mov	r3, r7
 800105c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001060:	4808      	ldr	r0, [pc, #32]	@ (8001084 <SetupEncoders+0x64>)
 8001062:	f7ff fdd9 	bl	8000c18 <EncoderInit>
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200004c8 	.word	0x200004c8
 8001074:	20000480 	.word	0x20000480
 8001078:	20000430 	.word	0x20000430
 800107c:	2000051c 	.word	0x2000051c
 8001080:	20000484 	.word	0x20000484
 8001084:	20000448 	.word	0x20000448

08001088 <SetupMotors>:

void  SetupMotors(void) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b092      	sub	sp, #72	@ 0x48
 800108c:	af04      	add	r7, sp, #16
	// Pitch
	// Initialize forward/reverse enable GPIOs
	GPIO_t forwardPitchEnGpio;
	GPIO_t reversePitchEnGpio;

	GPIOInit(&forwardPitchEnGpio,
 800108e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001092:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001096:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 800109a:	4618      	mov	r0, r3
 800109c:	f001 f959 	bl	8002352 <GPIOInit>
			MOTOR_PITCH_F_EN_GPIO_Port, MOTOR_PITCH_F_EN_Pin);
	GPIOInit(&reversePitchEnGpio,
 80010a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010a8:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 80010ac:	4618      	mov	r0, r3
 80010ae:	f001 f950 	bl	8002352 <GPIOInit>
			MOTOR_PITCH_R_EN_GPIO_Port, MOTOR_PITCH_R_EN_Pin);

	// Initialize driver
	BTS7960Init(&pitchDriver, forwardPitchEnGpio, reversePitchEnGpio, &htim3,
 80010b2:	2308      	movs	r3, #8
 80010b4:	9303      	str	r3, [sp, #12]
 80010b6:	230c      	movs	r3, #12
 80010b8:	9302      	str	r3, [sp, #8]
 80010ba:	4b22      	ldr	r3, [pc, #136]	@ (8001144 <SetupMotors+0xbc>)
 80010bc:	9301      	str	r3, [sp, #4]
 80010be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010c4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80010c8:	ca06      	ldmia	r2, {r1, r2}
 80010ca:	481f      	ldr	r0, [pc, #124]	@ (8001148 <SetupMotors+0xc0>)
 80010cc:	f000 ff2c 	bl	8001f28 <BTS7960Init>
			TIM_PITCH_F_CH, TIM_PITCH_R_CH);

	// Set up interface
	MotorInterface_t pitchMotorI;
	BTS7960InterfaceInit(&pitchMotorI, &pitchDriver);
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	491c      	ldr	r1, [pc, #112]	@ (8001148 <SetupMotors+0xc0>)
 80010d6:	4618      	mov	r0, r3
 80010d8:	f001 f906 	bl	80022e8 <BTS7960InterfaceInit>

	// Initialize motor
	MotorInit(&pitchMotor, pitchMotorI);
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010e2:	481a      	ldr	r0, [pc, #104]	@ (800114c <SetupMotors+0xc4>)
 80010e4:	f7ff fdc7 	bl	8000c76 <MotorInit>
	// Roll
	// Initialize forward/reverse enable GPIOs
	GPIO_t forwardRollEnGpio;
	GPIO_t reverseRollEnGpio;

	GPIOInit(&forwardRollEnGpio,
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80010f0:	4917      	ldr	r1, [pc, #92]	@ (8001150 <SetupMotors+0xc8>)
 80010f2:	4618      	mov	r0, r3
 80010f4:	f001 f92d 	bl	8002352 <GPIOInit>
			MOTOR_ROLL_F_EN_GPIO_Port, MOTOR_ROLL_F_EN_Pin);
	GPIOInit(&reverseRollEnGpio,
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001100:	4913      	ldr	r1, [pc, #76]	@ (8001150 <SetupMotors+0xc8>)
 8001102:	4618      	mov	r0, r3
 8001104:	f001 f925 	bl	8002352 <GPIOInit>
			MOTOR_ROLL_R_EN_GPIO_Port, MOTOR_ROLL_R_EN_Pin);

	// Initialize driver
	BTS7960Init(&rollDriver, forwardRollEnGpio, reverseRollEnGpio, &htim3,
 8001108:	2300      	movs	r3, #0
 800110a:	9303      	str	r3, [sp, #12]
 800110c:	2304      	movs	r3, #4
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <SetupMotors+0xbc>)
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f107 0214 	add.w	r2, r7, #20
 800111e:	ca06      	ldmia	r2, {r1, r2}
 8001120:	480c      	ldr	r0, [pc, #48]	@ (8001154 <SetupMotors+0xcc>)
 8001122:	f000 ff01 	bl	8001f28 <BTS7960Init>
			TIM_ROLL_F_CH, TIM_ROLL_R_CH);

	// Set up interface
	MotorInterface_t rollMotorI;
	BTS7960InterfaceInit(&rollMotorI, &rollDriver);
 8001126:	463b      	mov	r3, r7
 8001128:	490a      	ldr	r1, [pc, #40]	@ (8001154 <SetupMotors+0xcc>)
 800112a:	4618      	mov	r0, r3
 800112c:	f001 f8dc 	bl	80022e8 <BTS7960InterfaceInit>

	// Initialize motor
	MotorInit(&rollMotor, rollMotorI);
 8001130:	463b      	mov	r3, r7
 8001132:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001134:	4808      	ldr	r0, [pc, #32]	@ (8001158 <SetupMotors+0xd0>)
 8001136:	f7ff fd9e 	bl	8000c76 <MotorInit>
}
 800113a:	bf00      	nop
 800113c:	3738      	adds	r7, #56	@ 0x38
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200005d4 	.word	0x200005d4
 8001148:	20000488 	.word	0x20000488
 800114c:	20000460 	.word	0x20000460
 8001150:	48000c00 	.word	0x48000c00
 8001154:	200004a8 	.word	0x200004a8
 8001158:	2000046c 	.word	0x2000046c

0800115c <SetupButtons>:

void SetupButtons(void) {
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	GPIOInit(&gpioAccept, BUTTON_ACCEPT_GPIO_Port, BUTTON_ACCEPT_Pin);
 8001160:	2201      	movs	r2, #1
 8001162:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8001166:	4802      	ldr	r0, [pc, #8]	@ (8001170 <SetupButtons+0x14>)
 8001168:	f001 f8f3 	bl	8002352 <GPIOInit>
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000478 	.word	0x20000478

08001174 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800117c:	1d39      	adds	r1, r7, #4
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	2201      	movs	r2, #1
 8001184:	4803      	ldr	r0, [pc, #12]	@ (8001194 <__io_putchar+0x20>)
 8001186:	f006 fba5 	bl	80078d4 <HAL_UART_Transmit>
  return ch;
 800118a:	687b      	ldr	r3, [r7, #4]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200006b8 	.word	0x200006b8

08001198 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart1);
 80011a2:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <__io_getchar+0x38>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2208      	movs	r2, #8
 80011a8:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80011aa:	1df9      	adds	r1, r7, #7
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295
 80011b0:	2201      	movs	r2, #1
 80011b2:	4807      	ldr	r0, [pc, #28]	@ (80011d0 <__io_getchar+0x38>)
 80011b4:	f006 fc17 	bl	80079e6 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80011b8:	1df9      	adds	r1, r7, #7
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295
 80011be:	2201      	movs	r2, #1
 80011c0:	4803      	ldr	r0, [pc, #12]	@ (80011d0 <__io_getchar+0x38>)
 80011c2:	f006 fb87 	bl	80078d4 <HAL_UART_Transmit>
  return ch;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200006b8 	.word	0x200006b8

080011d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	}
	else if(htim == &htim7) {
		//MotorControllerUpdate(&controller, 2);
		//testCurrent = MotorControllerGetCurrent(&controller);
	}
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ec:	f001 f926 	bl	800243c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f0:	f000 f81c 	bl	800122c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f4:	f000 fa52 	bl	800169c <MX_GPIO_Init>
  MX_I2C1_Init();
 80011f8:	f000 f87e 	bl	80012f8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80011fc:	f000 f8f8 	bl	80013f0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001200:	f000 fa1c 	bl	800163c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8001204:	f00a feea 	bl	800bfdc <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 8001208:	f000 f9ac 	bl	8001564 <MX_TIM6_Init>
  MX_TIM7_Init();
 800120c:	f000 f9e0 	bl	80015d0 <MX_TIM7_Init>
  MX_I2C2_Init();
 8001210:	f000 f8b0 	bl	8001374 <MX_I2C2_Init>
  MX_TIM3_Init();
 8001214:	f000 f92a 	bl	800146c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  BspInit();
 8001218:	f7ff fee8 	bl	8000fec <BspInit>
  ApplicationInit();
 800121c:	f7ff fe18 	bl	8000e50 <ApplicationInit>
  ApplicationRun();
 8001220:	f7ff fe4e 	bl	8000ec0 <ApplicationRun>
 8001224:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//  }
  /* USER CODE END 3 */
}
 8001226:	4618      	mov	r0, r3
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b09e      	sub	sp, #120	@ 0x78
 8001230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001232:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001236:	2228      	movs	r2, #40	@ 0x28
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f00c f94c 	bl	800d4d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001240:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001250:	463b      	mov	r3, r7
 8001252:	223c      	movs	r2, #60	@ 0x3c
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f00c f93e 	bl	800d4d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800125c:	2303      	movs	r3, #3
 800125e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001260:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001264:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800126a:	2301      	movs	r3, #1
 800126c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800126e:	2310      	movs	r3, #16
 8001270:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001272:	2302      	movs	r3, #2
 8001274:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001276:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800127a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800127c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001280:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001282:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001286:	4618      	mov	r0, r3
 8001288:	f003 feb6 	bl	8004ff8 <HAL_RCC_OscConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001292:	f000 fabb 	bl	800180c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001296:	230f      	movs	r3, #15
 8001298:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800129a:	2302      	movs	r3, #2
 800129c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012ac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80012b0:	2101      	movs	r1, #1
 80012b2:	4618      	mov	r0, r3
 80012b4:	f004 fede 	bl	8006074 <HAL_RCC_ClockConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012be:	f000 faa5 	bl	800180c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80012c2:	4b0c      	ldr	r3, [pc, #48]	@ (80012f4 <SystemClock_Config+0xc8>)
 80012c4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80012ce:	2300      	movs	r3, #0
 80012d0:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80012d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d8:	463b      	mov	r3, r7
 80012da:	4618      	mov	r0, r3
 80012dc:	f005 f8ea 	bl	80064b4 <HAL_RCCEx_PeriphCLKConfig>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80012e6:	f000 fa91 	bl	800180c <Error_Handler>
  }
}
 80012ea:	bf00      	nop
 80012ec:	3778      	adds	r7, #120	@ 0x78
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	00020061 	.word	0x00020061

080012f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	@ (800136c <MX_I2C1_Init+0x74>)
 80012fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001370 <MX_I2C1_Init+0x78>)
 8001300:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8001302:	4b1a      	ldr	r3, [pc, #104]	@ (800136c <MX_I2C1_Init+0x74>)
 8001304:	f240 220b 	movw	r2, #523	@ 0x20b
 8001308:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800130a:	4b18      	ldr	r3, [pc, #96]	@ (800136c <MX_I2C1_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001310:	4b16      	ldr	r3, [pc, #88]	@ (800136c <MX_I2C1_Init+0x74>)
 8001312:	2201      	movs	r2, #1
 8001314:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001316:	4b15      	ldr	r3, [pc, #84]	@ (800136c <MX_I2C1_Init+0x74>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800131c:	4b13      	ldr	r3, [pc, #76]	@ (800136c <MX_I2C1_Init+0x74>)
 800131e:	2200      	movs	r2, #0
 8001320:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001322:	4b12      	ldr	r3, [pc, #72]	@ (800136c <MX_I2C1_Init+0x74>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001328:	4b10      	ldr	r3, [pc, #64]	@ (800136c <MX_I2C1_Init+0x74>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800132e:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <MX_I2C1_Init+0x74>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001334:	480d      	ldr	r0, [pc, #52]	@ (800136c <MX_I2C1_Init+0x74>)
 8001336:	f001 fbc7 	bl	8002ac8 <HAL_I2C_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001340:	f000 fa64 	bl	800180c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001344:	2100      	movs	r1, #0
 8001346:	4809      	ldr	r0, [pc, #36]	@ (800136c <MX_I2C1_Init+0x74>)
 8001348:	f002 f90e 	bl	8003568 <HAL_I2CEx_ConfigAnalogFilter>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001352:	f000 fa5b 	bl	800180c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001356:	2100      	movs	r1, #0
 8001358:	4804      	ldr	r0, [pc, #16]	@ (800136c <MX_I2C1_Init+0x74>)
 800135a:	f002 f950 	bl	80035fe <HAL_I2CEx_ConfigDigitalFilter>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001364:	f000 fa52 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200004c8 	.word	0x200004c8
 8001370:	40005400 	.word	0x40005400

08001374 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001378:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <MX_I2C2_Init+0x74>)
 800137a:	4a1c      	ldr	r2, [pc, #112]	@ (80013ec <MX_I2C2_Init+0x78>)
 800137c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0000020B;
 800137e:	4b1a      	ldr	r3, [pc, #104]	@ (80013e8 <MX_I2C2_Init+0x74>)
 8001380:	f240 220b 	movw	r2, #523	@ 0x20b
 8001384:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001386:	4b18      	ldr	r3, [pc, #96]	@ (80013e8 <MX_I2C2_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800138c:	4b16      	ldr	r3, [pc, #88]	@ (80013e8 <MX_I2C2_Init+0x74>)
 800138e:	2201      	movs	r2, #1
 8001390:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001392:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <MX_I2C2_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001398:	4b13      	ldr	r3, [pc, #76]	@ (80013e8 <MX_I2C2_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800139e:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <MX_I2C2_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013a4:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <MX_I2C2_Init+0x74>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013aa:	4b0f      	ldr	r3, [pc, #60]	@ (80013e8 <MX_I2C2_Init+0x74>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013b0:	480d      	ldr	r0, [pc, #52]	@ (80013e8 <MX_I2C2_Init+0x74>)
 80013b2:	f001 fb89 	bl	8002ac8 <HAL_I2C_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013bc:	f000 fa26 	bl	800180c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013c0:	2100      	movs	r1, #0
 80013c2:	4809      	ldr	r0, [pc, #36]	@ (80013e8 <MX_I2C2_Init+0x74>)
 80013c4:	f002 f8d0 	bl	8003568 <HAL_I2CEx_ConfigAnalogFilter>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80013ce:	f000 fa1d 	bl	800180c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013d2:	2100      	movs	r1, #0
 80013d4:	4804      	ldr	r0, [pc, #16]	@ (80013e8 <MX_I2C2_Init+0x74>)
 80013d6:	f002 f912 	bl	80035fe <HAL_I2CEx_ConfigDigitalFilter>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80013e0:	f000 fa14 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	2000051c 	.word	0x2000051c
 80013ec:	40005800 	.word	0x40005800

080013f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001464 <MX_SPI1_Init+0x74>)
 80013f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001468 <MX_SPI1_Init+0x78>)
 80013f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001464 <MX_SPI1_Init+0x74>)
 80013fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001400:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001402:	4b18      	ldr	r3, [pc, #96]	@ (8001464 <MX_SPI1_Init+0x74>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001408:	4b16      	ldr	r3, [pc, #88]	@ (8001464 <MX_SPI1_Init+0x74>)
 800140a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800140e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001410:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <MX_SPI1_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001416:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <MX_SPI1_Init+0x74>)
 8001418:	2200      	movs	r2, #0
 800141a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800141c:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <MX_SPI1_Init+0x74>)
 800141e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001422:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001424:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <MX_SPI1_Init+0x74>)
 8001426:	2208      	movs	r2, #8
 8001428:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800142a:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <MX_SPI1_Init+0x74>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001430:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <MX_SPI1_Init+0x74>)
 8001432:	2200      	movs	r2, #0
 8001434:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001436:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <MX_SPI1_Init+0x74>)
 8001438:	2200      	movs	r2, #0
 800143a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800143c:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <MX_SPI1_Init+0x74>)
 800143e:	2207      	movs	r2, #7
 8001440:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001442:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <MX_SPI1_Init+0x74>)
 8001444:	2200      	movs	r2, #0
 8001446:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <MX_SPI1_Init+0x74>)
 800144a:	2208      	movs	r2, #8
 800144c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800144e:	4805      	ldr	r0, [pc, #20]	@ (8001464 <MX_SPI1_Init+0x74>)
 8001450:	f005 f9e0 	bl	8006814 <HAL_SPI_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800145a:	f000 f9d7 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000570 	.word	0x20000570
 8001468:	40013000 	.word	0x40013000

0800146c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	@ 0x28
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800147e:	463b      	mov	r3, r7
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
 800148c:	615a      	str	r2, [r3, #20]
 800148e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001490:	4b32      	ldr	r3, [pc, #200]	@ (800155c <MX_TIM3_Init+0xf0>)
 8001492:	4a33      	ldr	r2, [pc, #204]	@ (8001560 <MX_TIM3_Init+0xf4>)
 8001494:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001496:	4b31      	ldr	r3, [pc, #196]	@ (800155c <MX_TIM3_Init+0xf0>)
 8001498:	2200      	movs	r2, #0
 800149a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149c:	4b2f      	ldr	r3, [pc, #188]	@ (800155c <MX_TIM3_Init+0xf0>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 80014a2:	4b2e      	ldr	r3, [pc, #184]	@ (800155c <MX_TIM3_Init+0xf0>)
 80014a4:	f640 125f 	movw	r2, #2399	@ 0x95f
 80014a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014aa:	4b2c      	ldr	r3, [pc, #176]	@ (800155c <MX_TIM3_Init+0xf0>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014b0:	4b2a      	ldr	r3, [pc, #168]	@ (800155c <MX_TIM3_Init+0xf0>)
 80014b2:	2280      	movs	r2, #128	@ 0x80
 80014b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014b6:	4829      	ldr	r0, [pc, #164]	@ (800155c <MX_TIM3_Init+0xf0>)
 80014b8:	f005 fb18 	bl	8006aec <HAL_TIM_PWM_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80014c2:	f000 f9a3 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014ce:	f107 031c 	add.w	r3, r7, #28
 80014d2:	4619      	mov	r1, r3
 80014d4:	4821      	ldr	r0, [pc, #132]	@ (800155c <MX_TIM3_Init+0xf0>)
 80014d6:	f006 f911 	bl	80076fc <HAL_TIMEx_MasterConfigSynchronization>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80014e0:	f000 f994 	bl	800180c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e4:	2360      	movs	r3, #96	@ 0x60
 80014e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014f4:	463b      	mov	r3, r7
 80014f6:	2200      	movs	r2, #0
 80014f8:	4619      	mov	r1, r3
 80014fa:	4818      	ldr	r0, [pc, #96]	@ (800155c <MX_TIM3_Init+0xf0>)
 80014fc:	f005 fc50 	bl	8006da0 <HAL_TIM_PWM_ConfigChannel>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001506:	f000 f981 	bl	800180c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800150a:	463b      	mov	r3, r7
 800150c:	2204      	movs	r2, #4
 800150e:	4619      	mov	r1, r3
 8001510:	4812      	ldr	r0, [pc, #72]	@ (800155c <MX_TIM3_Init+0xf0>)
 8001512:	f005 fc45 	bl	8006da0 <HAL_TIM_PWM_ConfigChannel>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800151c:	f000 f976 	bl	800180c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001520:	463b      	mov	r3, r7
 8001522:	2208      	movs	r2, #8
 8001524:	4619      	mov	r1, r3
 8001526:	480d      	ldr	r0, [pc, #52]	@ (800155c <MX_TIM3_Init+0xf0>)
 8001528:	f005 fc3a 	bl	8006da0 <HAL_TIM_PWM_ConfigChannel>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8001532:	f000 f96b 	bl	800180c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001536:	463b      	mov	r3, r7
 8001538:	220c      	movs	r2, #12
 800153a:	4619      	mov	r1, r3
 800153c:	4807      	ldr	r0, [pc, #28]	@ (800155c <MX_TIM3_Init+0xf0>)
 800153e:	f005 fc2f 	bl	8006da0 <HAL_TIM_PWM_ConfigChannel>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8001548:	f000 f960 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800154c:	4803      	ldr	r0, [pc, #12]	@ (800155c <MX_TIM3_Init+0xf0>)
 800154e:	f000 fabf 	bl	8001ad0 <HAL_TIM_MspPostInit>

}
 8001552:	bf00      	nop
 8001554:	3728      	adds	r7, #40	@ 0x28
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200005d4 	.word	0x200005d4
 8001560:	40000400 	.word	0x40000400

08001564 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001574:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <MX_TIM6_Init+0x64>)
 8001576:	4a15      	ldr	r2, [pc, #84]	@ (80015cc <MX_TIM6_Init+0x68>)
 8001578:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24-1;
 800157a:	4b13      	ldr	r3, [pc, #76]	@ (80015c8 <MX_TIM6_Init+0x64>)
 800157c:	2217      	movs	r2, #23
 800157e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001580:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <MX_TIM6_Init+0x64>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001586:	4b10      	ldr	r3, [pc, #64]	@ (80015c8 <MX_TIM6_Init+0x64>)
 8001588:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800158c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800158e:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <MX_TIM6_Init+0x64>)
 8001590:	2280      	movs	r2, #128	@ 0x80
 8001592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001594:	480c      	ldr	r0, [pc, #48]	@ (80015c8 <MX_TIM6_Init+0x64>)
 8001596:	f005 f9e8 	bl	800696a <HAL_TIM_Base_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80015a0:	f000 f934 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a4:	2300      	movs	r3, #0
 80015a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	@ (80015c8 <MX_TIM6_Init+0x64>)
 80015b2:	f006 f8a3 	bl	80076fc <HAL_TIMEx_MasterConfigSynchronization>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80015bc:	f000 f926 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000620 	.word	0x20000620
 80015cc:	40001000 	.word	0x40001000

080015d0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80015e0:	4b14      	ldr	r3, [pc, #80]	@ (8001634 <MX_TIM7_Init+0x64>)
 80015e2:	4a15      	ldr	r2, [pc, #84]	@ (8001638 <MX_TIM7_Init+0x68>)
 80015e4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 48-1;
 80015e6:	4b13      	ldr	r3, [pc, #76]	@ (8001634 <MX_TIM7_Init+0x64>)
 80015e8:	222f      	movs	r2, #47	@ 0x2f
 80015ea:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ec:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <MX_TIM7_Init+0x64>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2000-1;
 80015f2:	4b10      	ldr	r3, [pc, #64]	@ (8001634 <MX_TIM7_Init+0x64>)
 80015f4:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80015f8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <MX_TIM7_Init+0x64>)
 80015fc:	2280      	movs	r2, #128	@ 0x80
 80015fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001600:	480c      	ldr	r0, [pc, #48]	@ (8001634 <MX_TIM7_Init+0x64>)
 8001602:	f005 f9b2 	bl	800696a <HAL_TIM_Base_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800160c:	f000 f8fe 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001610:	2300      	movs	r3, #0
 8001612:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	4619      	mov	r1, r3
 800161c:	4805      	ldr	r0, [pc, #20]	@ (8001634 <MX_TIM7_Init+0x64>)
 800161e:	f006 f86d 	bl	80076fc <HAL_TIMEx_MasterConfigSynchronization>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001628:	f000 f8f0 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	2000066c 	.word	0x2000066c
 8001638:	40001400 	.word	0x40001400

0800163c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001640:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 8001642:	4a15      	ldr	r2, [pc, #84]	@ (8001698 <MX_USART1_UART_Init+0x5c>)
 8001644:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001646:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 8001648:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800164c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800164e:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001654:	4b0f      	ldr	r3, [pc, #60]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800165a:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001660:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 8001662:	220c      	movs	r2, #12
 8001664:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001666:	4b0b      	ldr	r3, [pc, #44]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800166c:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001672:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001678:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800167e:	4805      	ldr	r0, [pc, #20]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 8001680:	f006 f8da 	bl	8007838 <HAL_UART_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800168a:	f000 f8bf 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200006b8 	.word	0x200006b8
 8001698:	40013800 	.word	0x40013800

0800169c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08c      	sub	sp, #48	@ 0x30
 80016a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a2:	f107 031c 	add.w	r3, r7, #28
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016b2:	4b53      	ldr	r3, [pc, #332]	@ (8001800 <MX_GPIO_Init+0x164>)
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	4a52      	ldr	r2, [pc, #328]	@ (8001800 <MX_GPIO_Init+0x164>)
 80016b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016bc:	6153      	str	r3, [r2, #20]
 80016be:	4b50      	ldr	r3, [pc, #320]	@ (8001800 <MX_GPIO_Init+0x164>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016c6:	61bb      	str	r3, [r7, #24]
 80016c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ca:	4b4d      	ldr	r3, [pc, #308]	@ (8001800 <MX_GPIO_Init+0x164>)
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	4a4c      	ldr	r2, [pc, #304]	@ (8001800 <MX_GPIO_Init+0x164>)
 80016d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80016d4:	6153      	str	r3, [r2, #20]
 80016d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001800 <MX_GPIO_Init+0x164>)
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016e2:	4b47      	ldr	r3, [pc, #284]	@ (8001800 <MX_GPIO_Init+0x164>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	4a46      	ldr	r2, [pc, #280]	@ (8001800 <MX_GPIO_Init+0x164>)
 80016e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016ec:	6153      	str	r3, [r2, #20]
 80016ee:	4b44      	ldr	r3, [pc, #272]	@ (8001800 <MX_GPIO_Init+0x164>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	4b41      	ldr	r3, [pc, #260]	@ (8001800 <MX_GPIO_Init+0x164>)
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	4a40      	ldr	r2, [pc, #256]	@ (8001800 <MX_GPIO_Init+0x164>)
 8001700:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001704:	6153      	str	r3, [r2, #20]
 8001706:	4b3e      	ldr	r3, [pc, #248]	@ (8001800 <MX_GPIO_Init+0x164>)
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001712:	4b3b      	ldr	r3, [pc, #236]	@ (8001800 <MX_GPIO_Init+0x164>)
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	4a3a      	ldr	r2, [pc, #232]	@ (8001800 <MX_GPIO_Init+0x164>)
 8001718:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800171c:	6153      	str	r3, [r2, #20]
 800171e:	4b38      	ldr	r3, [pc, #224]	@ (8001800 <MX_GPIO_Init+0x164>)
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	4b35      	ldr	r3, [pc, #212]	@ (8001800 <MX_GPIO_Init+0x164>)
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	4a34      	ldr	r2, [pc, #208]	@ (8001800 <MX_GPIO_Init+0x164>)
 8001730:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001734:	6153      	str	r3, [r2, #20]
 8001736:	4b32      	ldr	r3, [pc, #200]	@ (8001800 <MX_GPIO_Init+0x164>)
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|GPIO_PIN_10
 8001742:	2200      	movs	r2, #0
 8001744:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8001748:	482e      	ldr	r0, [pc, #184]	@ (8001804 <MX_GPIO_Init+0x168>)
 800174a:	f001 f9a5 	bl	8002a98 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR_ROLL_R_EN_Pin|MOTOR_ROLL_F_EN_Pin, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001754:	482c      	ldr	r0, [pc, #176]	@ (8001808 <MX_GPIO_Init+0x16c>)
 8001756:	f001 f99f 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_PITCH_R_EN_Pin|MOTOR_PITCH_F_EN_Pin, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001760:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001764:	f001 f998 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001768:	2337      	movs	r3, #55	@ 0x37
 800176a:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800176c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001776:	f107 031c 	add.w	r3, r7, #28
 800177a:	4619      	mov	r1, r3
 800177c:	4821      	ldr	r0, [pc, #132]	@ (8001804 <MX_GPIO_Init+0x168>)
 800177e:	f000 fff9 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin PE10
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|GPIO_PIN_10
 8001782:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8001786:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001794:	f107 031c 	add.w	r3, r7, #28
 8001798:	4619      	mov	r1, r3
 800179a:	481a      	ldr	r0, [pc, #104]	@ (8001804 <MX_GPIO_Init+0x168>)
 800179c:	f000 ffea 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_ACCEPT_Pin */
  GPIO_InitStruct.Pin = BUTTON_ACCEPT_Pin;
 80017a0:	2301      	movs	r3, #1
 80017a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a4:	2300      	movs	r3, #0
 80017a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_ACCEPT_GPIO_Port, &GPIO_InitStruct);
 80017ac:	f107 031c 	add.w	r3, r7, #28
 80017b0:	4619      	mov	r1, r3
 80017b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017b6:	f000 ffdd 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_ROLL_R_EN_Pin MOTOR_ROLL_F_EN_Pin */
  GPIO_InitStruct.Pin = MOTOR_ROLL_R_EN_Pin|MOTOR_ROLL_F_EN_Pin;
 80017ba:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80017be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017cc:	f107 031c 	add.w	r3, r7, #28
 80017d0:	4619      	mov	r1, r3
 80017d2:	480d      	ldr	r0, [pc, #52]	@ (8001808 <MX_GPIO_Init+0x16c>)
 80017d4:	f000 ffce 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_PITCH_R_EN_Pin MOTOR_PITCH_F_EN_Pin */
  GPIO_InitStruct.Pin = MOTOR_PITCH_R_EN_Pin|MOTOR_PITCH_F_EN_Pin;
 80017d8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017de:	2301      	movs	r3, #1
 80017e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ea:	f107 031c 	add.w	r3, r7, #28
 80017ee:	4619      	mov	r1, r3
 80017f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017f4:	f000 ffbe 	bl	8002774 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017f8:	bf00      	nop
 80017fa:	3730      	adds	r7, #48	@ 0x30
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40021000 	.word	0x40021000
 8001804:	48001000 	.word	0x48001000
 8001808:	48000c00 	.word	0x48000c00

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
}
 8001812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <Error_Handler+0x8>

08001818 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	4b0f      	ldr	r3, [pc, #60]	@ (800185c <HAL_MspInit+0x44>)
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	4a0e      	ldr	r2, [pc, #56]	@ (800185c <HAL_MspInit+0x44>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6193      	str	r3, [r2, #24]
 800182a:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <HAL_MspInit+0x44>)
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	4b09      	ldr	r3, [pc, #36]	@ (800185c <HAL_MspInit+0x44>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	4a08      	ldr	r2, [pc, #32]	@ (800185c <HAL_MspInit+0x44>)
 800183c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001840:	61d3      	str	r3, [r2, #28]
 8001842:	4b06      	ldr	r3, [pc, #24]	@ (800185c <HAL_MspInit+0x44>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800184e:	2005      	movs	r0, #5
 8001850:	f000 ff4e 	bl	80026f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40021000 	.word	0x40021000

08001860 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08c      	sub	sp, #48	@ 0x30
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 031c 	add.w	r3, r7, #28
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a3d      	ldr	r2, [pc, #244]	@ (8001974 <HAL_I2C_MspInit+0x114>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d128      	bne.n	80018d4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001882:	4b3d      	ldr	r3, [pc, #244]	@ (8001978 <HAL_I2C_MspInit+0x118>)
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	4a3c      	ldr	r2, [pc, #240]	@ (8001978 <HAL_I2C_MspInit+0x118>)
 8001888:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800188c:	6153      	str	r3, [r2, #20]
 800188e:	4b3a      	ldr	r3, [pc, #232]	@ (8001978 <HAL_I2C_MspInit+0x118>)
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001896:	61bb      	str	r3, [r7, #24]
 8001898:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800189a:	23c0      	movs	r3, #192	@ 0xc0
 800189c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800189e:	2312      	movs	r3, #18
 80018a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a6:	2303      	movs	r3, #3
 80018a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018aa:	2304      	movs	r3, #4
 80018ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	4619      	mov	r1, r3
 80018b4:	4831      	ldr	r0, [pc, #196]	@ (800197c <HAL_I2C_MspInit+0x11c>)
 80018b6:	f000 ff5d 	bl	8002774 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001978 <HAL_I2C_MspInit+0x118>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	4a2e      	ldr	r2, [pc, #184]	@ (8001978 <HAL_I2C_MspInit+0x118>)
 80018c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018c4:	61d3      	str	r3, [r2, #28]
 80018c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001978 <HAL_I2C_MspInit+0x118>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018d2:	e04a      	b.n	800196a <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C2)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a29      	ldr	r2, [pc, #164]	@ (8001980 <HAL_I2C_MspInit+0x120>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d145      	bne.n	800196a <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	4b26      	ldr	r3, [pc, #152]	@ (8001978 <HAL_I2C_MspInit+0x118>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	4a25      	ldr	r2, [pc, #148]	@ (8001978 <HAL_I2C_MspInit+0x118>)
 80018e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018e8:	6153      	str	r3, [r2, #20]
 80018ea:	4b23      	ldr	r3, [pc, #140]	@ (8001978 <HAL_I2C_MspInit+0x118>)
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018f6:	4b20      	ldr	r3, [pc, #128]	@ (8001978 <HAL_I2C_MspInit+0x118>)
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001978 <HAL_I2C_MspInit+0x118>)
 80018fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001900:	6153      	str	r3, [r2, #20]
 8001902:	4b1d      	ldr	r3, [pc, #116]	@ (8001978 <HAL_I2C_MspInit+0x118>)
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800190e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001914:	2312      	movs	r3, #18
 8001916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001920:	2304      	movs	r3, #4
 8001922:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	4619      	mov	r1, r3
 800192a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800192e:	f000 ff21 	bl	8002774 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001932:	2340      	movs	r3, #64	@ 0x40
 8001934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001936:	2312      	movs	r3, #18
 8001938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800193e:	2303      	movs	r3, #3
 8001940:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001942:	2304      	movs	r3, #4
 8001944:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001946:	f107 031c 	add.w	r3, r7, #28
 800194a:	4619      	mov	r1, r3
 800194c:	480d      	ldr	r0, [pc, #52]	@ (8001984 <HAL_I2C_MspInit+0x124>)
 800194e:	f000 ff11 	bl	8002774 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001952:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <HAL_I2C_MspInit+0x118>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	4a08      	ldr	r2, [pc, #32]	@ (8001978 <HAL_I2C_MspInit+0x118>)
 8001958:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800195c:	61d3      	str	r3, [r2, #28]
 800195e:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <HAL_I2C_MspInit+0x118>)
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
}
 800196a:	bf00      	nop
 800196c:	3730      	adds	r7, #48	@ 0x30
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40005400 	.word	0x40005400
 8001978:	40021000 	.word	0x40021000
 800197c:	48000400 	.word	0x48000400
 8001980:	40005800 	.word	0x40005800
 8001984:	48001400 	.word	0x48001400

08001988 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	@ 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a17      	ldr	r2, [pc, #92]	@ (8001a04 <HAL_SPI_MspInit+0x7c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d128      	bne.n	80019fc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019aa:	4b17      	ldr	r3, [pc, #92]	@ (8001a08 <HAL_SPI_MspInit+0x80>)
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	4a16      	ldr	r2, [pc, #88]	@ (8001a08 <HAL_SPI_MspInit+0x80>)
 80019b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019b4:	6193      	str	r3, [r2, #24]
 80019b6:	4b14      	ldr	r3, [pc, #80]	@ (8001a08 <HAL_SPI_MspInit+0x80>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <HAL_SPI_MspInit+0x80>)
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	4a10      	ldr	r2, [pc, #64]	@ (8001a08 <HAL_SPI_MspInit+0x80>)
 80019c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019cc:	6153      	str	r3, [r2, #20]
 80019ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001a08 <HAL_SPI_MspInit+0x80>)
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80019da:	23e0      	movs	r3, #224	@ 0xe0
 80019dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e6:	2303      	movs	r3, #3
 80019e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019ea:	2305      	movs	r3, #5
 80019ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	4619      	mov	r1, r3
 80019f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019f8:	f000 febc 	bl	8002774 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80019fc:	bf00      	nop
 80019fe:	3728      	adds	r7, #40	@ 0x28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40013000 	.word	0x40013000
 8001a08:	40021000 	.word	0x40021000

08001a0c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0a      	ldr	r2, [pc, #40]	@ (8001a44 <HAL_TIM_PWM_MspInit+0x38>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d10b      	bne.n	8001a36 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a48 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	4a09      	ldr	r2, [pc, #36]	@ (8001a48 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a24:	f043 0302 	orr.w	r3, r3, #2
 8001a28:	61d3      	str	r3, [r2, #28]
 8001a2a:	4b07      	ldr	r3, [pc, #28]	@ (8001a48 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001a36:	bf00      	nop
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40000400 	.word	0x40000400
 8001a48:	40021000 	.word	0x40021000

08001a4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a1a      	ldr	r2, [pc, #104]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x78>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d114      	bne.n	8001a88 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x7c>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	4a19      	ldr	r2, [pc, #100]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x7c>)
 8001a64:	f043 0310 	orr.w	r3, r3, #16
 8001a68:	61d3      	str	r3, [r2, #28]
 8001a6a:	4b17      	ldr	r3, [pc, #92]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x7c>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f003 0310 	and.w	r3, r3, #16
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	2036      	movs	r0, #54	@ 0x36
 8001a7c:	f000 fe43 	bl	8002706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a80:	2036      	movs	r0, #54	@ 0x36
 8001a82:	f000 fe5c 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001a86:	e018      	b.n	8001aba <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a0f      	ldr	r2, [pc, #60]	@ (8001acc <HAL_TIM_Base_MspInit+0x80>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d113      	bne.n	8001aba <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001a92:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x7c>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	4a0c      	ldr	r2, [pc, #48]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x7c>)
 8001a98:	f043 0320 	orr.w	r3, r3, #32
 8001a9c:	61d3      	str	r3, [r2, #28]
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x7c>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f003 0320 	and.w	r3, r3, #32
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	2037      	movs	r0, #55	@ 0x37
 8001ab0:	f000 fe29 	bl	8002706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ab4:	2037      	movs	r0, #55	@ 0x37
 8001ab6:	f000 fe42 	bl	800273e <HAL_NVIC_EnableIRQ>
}
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40001000 	.word	0x40001000
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40001400 	.word	0x40001400

08001ad0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a11      	ldr	r2, [pc, #68]	@ (8001b34 <HAL_TIM_MspPostInit+0x64>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d11c      	bne.n	8001b2c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af2:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <HAL_TIM_MspPostInit+0x68>)
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	4a10      	ldr	r2, [pc, #64]	@ (8001b38 <HAL_TIM_MspPostInit+0x68>)
 8001af8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001afc:	6153      	str	r3, [r2, #20]
 8001afe:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <HAL_TIM_MspPostInit+0x68>)
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_ROLL_R_PWM_Pin|MOTOR_ROLL_F_PWM_Pin|MOTOR_PITCH_R_PWM_Pin|MOTOR_PITCH_F_PWM_Pin;
 8001b0a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001b0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b10:	2302      	movs	r3, #2
 8001b12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	4619      	mov	r1, r3
 8001b26:	4805      	ldr	r0, [pc, #20]	@ (8001b3c <HAL_TIM_MspPostInit+0x6c>)
 8001b28:	f000 fe24 	bl	8002774 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b2c:	bf00      	nop
 8001b2e:	3720      	adds	r7, #32
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40000400 	.word	0x40000400
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	48000800 	.word	0x48000800

08001b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	@ 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a17      	ldr	r2, [pc, #92]	@ (8001bbc <HAL_UART_MspInit+0x7c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d127      	bne.n	8001bb2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b62:	4b17      	ldr	r3, [pc, #92]	@ (8001bc0 <HAL_UART_MspInit+0x80>)
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	4a16      	ldr	r2, [pc, #88]	@ (8001bc0 <HAL_UART_MspInit+0x80>)
 8001b68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b6c:	6193      	str	r3, [r2, #24]
 8001b6e:	4b14      	ldr	r3, [pc, #80]	@ (8001bc0 <HAL_UART_MspInit+0x80>)
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7a:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <HAL_UART_MspInit+0x80>)
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	4a10      	ldr	r2, [pc, #64]	@ (8001bc0 <HAL_UART_MspInit+0x80>)
 8001b80:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001b84:	6153      	str	r3, [r2, #20]
 8001b86:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc0 <HAL_UART_MspInit+0x80>)
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b92:	2330      	movs	r3, #48	@ 0x30
 8001b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ba2:	2307      	movs	r3, #7
 8001ba4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	4805      	ldr	r0, [pc, #20]	@ (8001bc4 <HAL_UART_MspInit+0x84>)
 8001bae:	f000 fde1 	bl	8002774 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001bb2:	bf00      	nop
 8001bb4:	3728      	adds	r7, #40	@ 0x28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40013800 	.word	0x40013800
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	48000800 	.word	0x48000800

08001bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <NMI_Handler+0x4>

08001bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <HardFault_Handler+0x4>

08001bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <MemManage_Handler+0x4>

08001be0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <BusFault_Handler+0x4>

08001be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <UsageFault_Handler+0x4>

08001bf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c1e:	f000 fc53 	bl	80024c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001c2c:	4802      	ldr	r0, [pc, #8]	@ (8001c38 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001c2e:	f001 fe1f 	bl	8003870 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000c10 	.word	0x20000c10

08001c3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c40:	4802      	ldr	r0, [pc, #8]	@ (8001c4c <TIM6_DAC_IRQHandler+0x10>)
 8001c42:	f004 ffaa 	bl	8006b9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000620 	.word	0x20000620

08001c50 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c54:	4802      	ldr	r0, [pc, #8]	@ (8001c60 <TIM7_IRQHandler+0x10>)
 8001c56:	f004 ffa0 	bl	8006b9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	2000066c 	.word	0x2000066c

08001c64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return 1;
 8001c68:	2301      	movs	r3, #1
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <_kill>:

int _kill(int pid, int sig)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c7e:	f00b fc7d 	bl	800d57c <__errno>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2216      	movs	r2, #22
 8001c86:	601a      	str	r2, [r3, #0]
  return -1;
 8001c88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <_exit>:

void _exit (int status)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ffe7 	bl	8001c74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ca6:	bf00      	nop
 8001ca8:	e7fd      	b.n	8001ca6 <_exit+0x12>

08001caa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	e00a      	b.n	8001cd2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cbc:	f7ff fa6c 	bl	8001198 <__io_getchar>
 8001cc0:	4601      	mov	r1, r0
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	60ba      	str	r2, [r7, #8]
 8001cc8:	b2ca      	uxtb	r2, r1
 8001cca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	dbf0      	blt.n	8001cbc <_read+0x12>
  }

  return len;
 8001cda:	687b      	ldr	r3, [r7, #4]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	e009      	b.n	8001d0a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	60ba      	str	r2, [r7, #8]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fa38 	bl	8001174 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	3301      	adds	r3, #1
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	dbf1      	blt.n	8001cf6 <_write+0x12>
  }
  return len;
 8001d12:	687b      	ldr	r3, [r7, #4]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <_close>:

int _close(int file)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d44:	605a      	str	r2, [r3, #4]
  return 0;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <_isatty>:

int _isatty(int file)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d5c:	2301      	movs	r3, #1
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b085      	sub	sp, #20
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d8c:	4a14      	ldr	r2, [pc, #80]	@ (8001de0 <_sbrk+0x5c>)
 8001d8e:	4b15      	ldr	r3, [pc, #84]	@ (8001de4 <_sbrk+0x60>)
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d98:	4b13      	ldr	r3, [pc, #76]	@ (8001de8 <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da0:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <_sbrk+0x64>)
 8001da2:	4a12      	ldr	r2, [pc, #72]	@ (8001dec <_sbrk+0x68>)
 8001da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001da6:	4b10      	ldr	r3, [pc, #64]	@ (8001de8 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d207      	bcs.n	8001dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db4:	f00b fbe2 	bl	800d57c <__errno>
 8001db8:	4603      	mov	r3, r0
 8001dba:	220c      	movs	r2, #12
 8001dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc2:	e009      	b.n	8001dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc4:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <_sbrk+0x64>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dca:	4b07      	ldr	r3, [pc, #28]	@ (8001de8 <_sbrk+0x64>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	4a05      	ldr	r2, [pc, #20]	@ (8001de8 <_sbrk+0x64>)
 8001dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	2000a000 	.word	0x2000a000
 8001de4:	00000400 	.word	0x00000400
 8001de8:	20000740 	.word	0x20000740
 8001dec:	20001058 	.word	0x20001058

08001df0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001df4:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <SystemInit+0x20>)
 8001df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dfa:	4a05      	ldr	r2, [pc, #20]	@ (8001e10 <SystemInit+0x20>)
 8001dfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <AS5600Init>:
static uint8_t ReadRegister(AS5600_t *device, AS5600Reg reg);
static void ReadRegisterBurst(AS5600_t *device, AS5600Reg reg, uint8_t *data,
		uint8_t length);
static uint16_t ReadRegister16(AS5600_t *device, AS5600Reg reg);

void AS5600Init(AS5600_t *device, I2C_HandleTypeDef *hi2c) {
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
	device->hi2c = hi2c;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	601a      	str	r2, [r3, #0]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <AS5600GetAngle>:

uint8_t AS5600GetStatus(AS5600_t *device) {
	return ReadRegister(device, AS5600_STATUS);
}

uint16_t AS5600GetAngle(AS5600_t *device) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	return ReadRegister16(device, AS5600_RAW_ANGLE_1);
 8001e38:	210c      	movs	r1, #12
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f833 	bl	8001ea6 <ReadRegister16>
 8001e40:	4603      	mov	r3, r0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <ReadRegisterBurst>:

	return data;
}

static void ReadRegisterBurst(AS5600_t *device, AS5600Reg reg, uint8_t *data,
		uint8_t length) {
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b088      	sub	sp, #32
 8001e4e:	af02      	add	r7, sp, #8
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	461a      	mov	r2, r3
 8001e56:	460b      	mov	r3, r1
 8001e58:	72fb      	strb	r3, [r7, #11]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	72bb      	strb	r3, [r7, #10]

	HAL_StatusTypeDef status;
	// Transmit register to access.
	status = HAL_I2C_Master_Transmit(device->hi2c, AS5600_I2C_ADDR, (uint8_t *)&reg, 1,
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	f107 020b 	add.w	r2, r7, #11
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	216c      	movs	r1, #108	@ 0x6c
 8001e70:	f000 fec6 	bl	8002c00 <HAL_I2C_Master_Transmit>
 8001e74:	4603      	mov	r3, r0
 8001e76:	75fb      	strb	r3, [r7, #23]
			HAL_MAX_DELAY);
	if(status != HAL_OK) {
 8001e78:	7dfb      	ldrb	r3, [r7, #23]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10f      	bne.n	8001e9e <ReadRegisterBurst+0x54>
		return 0xFF;
	}

	// Receive data from specified register for specified length.
	status = HAL_I2C_Master_Receive(device->hi2c, AS5600_I2C_ADDR, data, length,
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	7abb      	ldrb	r3, [r7, #10]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	f04f 32ff 	mov.w	r2, #4294967295
 8001e8a:	9200      	str	r2, [sp, #0]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	216c      	movs	r1, #108	@ 0x6c
 8001e90:	f000 ffce 	bl	8002e30 <HAL_I2C_Master_Receive>
 8001e94:	4603      	mov	r3, r0
 8001e96:	75fb      	strb	r3, [r7, #23]
			HAL_MAX_DELAY);
	if(status != HAL_OK) {
 8001e98:	7dfb      	ldrb	r3, [r7, #23]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	e000      	b.n	8001ea0 <ReadRegisterBurst+0x56>
		return 0xFF;
 8001e9e:	bf00      	nop
		return 0xFF;
	}
}
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <ReadRegister16>:

static uint16_t ReadRegister16(AS5600_t *device, AS5600Reg reg) {
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	70fb      	strb	r3, [r7, #3]
	uint16_t data;
	ReadRegisterBurst(device, reg, (uint8_t *)&data, 2);
 8001eb2:	f107 020c 	add.w	r2, r7, #12
 8001eb6:	78f9      	ldrb	r1, [r7, #3]
 8001eb8:	2302      	movs	r3, #2
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ffc5 	bl	8001e4a <ReadRegisterBurst>

	//swap byte order (to little endian)
	uint8_t temp = (uint8_t)(data >> 8);
 8001ec0:	89bb      	ldrh	r3, [r7, #12]
 8001ec2:	0a1b      	lsrs	r3, r3, #8
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	73fb      	strb	r3, [r7, #15]
	data = (data << 8) | temp;
 8001ec8:	89bb      	ldrh	r3, [r7, #12]
 8001eca:	021b      	lsls	r3, r3, #8
 8001ecc:	b21a      	sxth	r2, r3
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	b21b      	sxth	r3, r3
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	81bb      	strh	r3, [r7, #12]

	return data;
 8001eda:	89bb      	ldrh	r3, [r7, #12]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <AS5600InterfaceInit>:

// Private function prototypes
int GetEncoderSensorCount(EncoderInterface_t *interface);


void AS5600InterfaceInit(EncoderInterface_t *interface, AS5600_t *hwEncoder) {
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
	interface->hardwareEncoder = hwEncoder;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	601a      	str	r2, [r3, #0]
	interface->GetEncoderSensorCount = &GetEncoderSensorCount;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a04      	ldr	r2, [pc, #16]	@ (8001f08 <AS5600InterfaceInit+0x24>)
 8001ef8:	605a      	str	r2, [r3, #4]
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	08001f0d 	.word	0x08001f0d

08001f0c <GetEncoderSensorCount>:

int GetEncoderSensorCount(EncoderInterface_t *interface) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	return AS5600GetAngle((AS5600_t *)interface->hardwareEncoder);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff89 	bl	8001e30 <AS5600GetAngle>
 8001f1e:	4603      	mov	r3, r0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <BTS7960Init>:

#include "devices/bts7960.h"
#include "utilities/utilities.h"

void BTS7960Init(BTS7960_t *driver, GPIO_t forwardEn, GPIO_t reverseEn,
		TIM_HandleTypeDef *htim, uint32_t forwardPwmCh, uint32_t reversePwmCh) {
 8001f28:	b082      	sub	sp, #8
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b084      	sub	sp, #16
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	1d38      	adds	r0, r7, #4
 8001f34:	e880 0006 	stmia.w	r0, {r1, r2}
 8001f38:	61fb      	str	r3, [r7, #28]
	driver->forwardEn = forwardEn;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f44:	e882 0003 	stmia.w	r2, {r0, r1}
	driver->reverseEn = reverseEn;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	3308      	adds	r3, #8
 8001f4c:	f107 021c 	add.w	r2, r7, #28
 8001f50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f54:	e883 0003 	stmia.w	r3, {r0, r1}
	driver->htim = htim;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f5c:	611a      	str	r2, [r3, #16]
	driver->forwardPwmCh = forwardPwmCh;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f62:	615a      	str	r2, [r3, #20]
	driver->reversePwmCh = reversePwmCh;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f68:	619a      	str	r2, [r3, #24]

	// Ensure motor is powered off for safety
	BTS7960SetPower(driver, 0);
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 f807 	bl	8001f80 <BTS7960SetPower>
}
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f7c:	b002      	add	sp, #8
 8001f7e:	4770      	bx	lr

08001f80 <BTS7960SetPower>:

void BTS7960SetPower(BTS7960_t *driver, int power) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
	driver->power = Constrain(power, -BTS7690_MAX_PWM_POWER,
 8001f8a:	f640 125f 	movw	r2, #2399	@ 0x95f
 8001f8e:	4985      	ldr	r1, [pc, #532]	@ (80021a4 <BTS7960SetPower+0x224>)
 8001f90:	6838      	ldr	r0, [r7, #0]
 8001f92:	f7fe ff18 	bl	8000dc6 <Constrain>
 8001f96:	4602      	mov	r2, r0
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	61da      	str	r2, [r3, #28]
			BTS7690_MAX_PWM_POWER);

	// Determine direction signals
	if(driver->power > 0) {
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f340 8085 	ble.w	80020b0 <BTS7960SetPower+0x130>
		GPIOSetState(&driver->forwardEn, GPIO_HIGH);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 fa00 	bl	80023b0 <GPIOSetState>
		GPIOSetState(&driver->reverseEn, GPIO_LOW);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3308      	adds	r3, #8
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 f9fa 	bl	80023b0 <GPIOSetState>

		__HAL_TIM_SET_COMPARE(driver->htim, driver->forwardPwmCh,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d106      	bne.n	8001fd2 <BTS7960SetPower+0x52>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69da      	ldr	r2, [r3, #28]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fd0:	e036      	b.n	8002040 <BTS7960SetPower+0xc0>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d107      	bne.n	8001fea <BTS7960SetPower+0x6a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69d9      	ldr	r1, [r3, #28]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	6393      	str	r3, [r2, #56]	@ 0x38
 8001fe8:	e02a      	b.n	8002040 <BTS7960SetPower+0xc0>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d107      	bne.n	8002002 <BTS7960SetPower+0x82>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69d9      	ldr	r1, [r3, #28]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002000:	e01e      	b.n	8002040 <BTS7960SetPower+0xc0>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	2b0c      	cmp	r3, #12
 8002008:	d107      	bne.n	800201a <BTS7960SetPower+0x9a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69d9      	ldr	r1, [r3, #28]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	460b      	mov	r3, r1
 8002016:	6413      	str	r3, [r2, #64]	@ 0x40
 8002018:	e012      	b.n	8002040 <BTS7960SetPower+0xc0>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	2b10      	cmp	r3, #16
 8002020:	d107      	bne.n	8002032 <BTS7960SetPower+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69d9      	ldr	r1, [r3, #28]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	460b      	mov	r3, r1
 800202e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002030:	e006      	b.n	8002040 <BTS7960SetPower+0xc0>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69d9      	ldr	r1, [r3, #28]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	460b      	mov	r3, r1
 800203e:	65d3      	str	r3, [r2, #92]	@ 0x5c
				driver->power);
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d105      	bne.n	8002054 <BTS7960SetPower+0xd4>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2200      	movs	r2, #0
 8002050:	635a      	str	r2, [r3, #52]	@ 0x34
		GPIOSetState(&driver->reverseEn, GPIO_LOW);

		__HAL_TIM_SET_COMPARE(driver->htim, driver->forwardPwmCh, 0);
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
	}
}
 8002052:	e139      	b.n	80022c8 <BTS7960SetPower+0x348>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	2b04      	cmp	r3, #4
 800205a:	d105      	bne.n	8002068 <BTS7960SetPower+0xe8>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	2300      	movs	r3, #0
 8002064:	6393      	str	r3, [r2, #56]	@ 0x38
 8002066:	e12f      	b.n	80022c8 <BTS7960SetPower+0x348>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	2b08      	cmp	r3, #8
 800206e:	d105      	bne.n	800207c <BTS7960SetPower+0xfc>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	2300      	movs	r3, #0
 8002078:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800207a:	e125      	b.n	80022c8 <BTS7960SetPower+0x348>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	2b0c      	cmp	r3, #12
 8002082:	d105      	bne.n	8002090 <BTS7960SetPower+0x110>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	2300      	movs	r3, #0
 800208c:	6413      	str	r3, [r2, #64]	@ 0x40
 800208e:	e11b      	b.n	80022c8 <BTS7960SetPower+0x348>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	2b10      	cmp	r3, #16
 8002096:	d105      	bne.n	80020a4 <BTS7960SetPower+0x124>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	2300      	movs	r3, #0
 80020a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80020a2:	e111      	b.n	80022c8 <BTS7960SetPower+0x348>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	2300      	movs	r3, #0
 80020ac:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80020ae:	e10b      	b.n	80022c8 <BTS7960SetPower+0x348>
	else if(driver->power < 0) {
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f280 808d 	bge.w	80021d4 <BTS7960SetPower+0x254>
		GPIOSetState(&driver->forwardEn, GPIO_LOW);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2101      	movs	r1, #1
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 f976 	bl	80023b0 <GPIOSetState>
		GPIOSetState(&driver->reverseEn, GPIO_HIGH);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3308      	adds	r3, #8
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 f970 	bl	80023b0 <GPIOSetState>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->forwardPwmCh, 0);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d105      	bne.n	80020e4 <BTS7960SetPower+0x164>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2200      	movs	r2, #0
 80020e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80020e2:	e02c      	b.n	800213e <BTS7960SetPower+0x1be>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d105      	bne.n	80020f8 <BTS7960SetPower+0x178>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	2300      	movs	r3, #0
 80020f4:	6393      	str	r3, [r2, #56]	@ 0x38
 80020f6:	e022      	b.n	800213e <BTS7960SetPower+0x1be>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	2b08      	cmp	r3, #8
 80020fe:	d105      	bne.n	800210c <BTS7960SetPower+0x18c>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	2300      	movs	r3, #0
 8002108:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800210a:	e018      	b.n	800213e <BTS7960SetPower+0x1be>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	2b0c      	cmp	r3, #12
 8002112:	d105      	bne.n	8002120 <BTS7960SetPower+0x1a0>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	2300      	movs	r3, #0
 800211c:	6413      	str	r3, [r2, #64]	@ 0x40
 800211e:	e00e      	b.n	800213e <BTS7960SetPower+0x1be>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	2b10      	cmp	r3, #16
 8002126:	d105      	bne.n	8002134 <BTS7960SetPower+0x1b4>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	2300      	movs	r3, #0
 8002130:	6593      	str	r3, [r2, #88]	@ 0x58
 8002132:	e004      	b.n	800213e <BTS7960SetPower+0x1be>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	2300      	movs	r3, #0
 800213c:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh,
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d107      	bne.n	8002156 <BTS7960SetPower+0x1d6>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	425a      	negs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002154:	e0b8      	b.n	80022c8 <BTS7960SetPower+0x348>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b04      	cmp	r3, #4
 800215c:	d108      	bne.n	8002170 <BTS7960SetPower+0x1f0>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	4259      	negs	r1, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	460b      	mov	r3, r1
 800216c:	6393      	str	r3, [r2, #56]	@ 0x38
 800216e:	e0ab      	b.n	80022c8 <BTS7960SetPower+0x348>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	2b08      	cmp	r3, #8
 8002176:	d108      	bne.n	800218a <BTS7960SetPower+0x20a>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	4259      	negs	r1, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	460b      	mov	r3, r1
 8002186:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002188:	e09e      	b.n	80022c8 <BTS7960SetPower+0x348>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	2b0c      	cmp	r3, #12
 8002190:	d10a      	bne.n	80021a8 <BTS7960SetPower+0x228>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	4259      	negs	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	460b      	mov	r3, r1
 80021a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021a2:	e091      	b.n	80022c8 <BTS7960SetPower+0x348>
 80021a4:	fffff6a1 	.word	0xfffff6a1
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	2b10      	cmp	r3, #16
 80021ae:	d108      	bne.n	80021c2 <BTS7960SetPower+0x242>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	4259      	negs	r1, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	460b      	mov	r3, r1
 80021be:	6593      	str	r3, [r2, #88]	@ 0x58
 80021c0:	e082      	b.n	80022c8 <BTS7960SetPower+0x348>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	4259      	negs	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	460b      	mov	r3, r1
 80021d0:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80021d2:	e079      	b.n	80022c8 <BTS7960SetPower+0x348>
		GPIOSetState(&driver->forwardEn, GPIO_LOW);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2101      	movs	r1, #1
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 f8e9 	bl	80023b0 <GPIOSetState>
		GPIOSetState(&driver->reverseEn, GPIO_LOW);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3308      	adds	r3, #8
 80021e2:	2101      	movs	r1, #1
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 f8e3 	bl	80023b0 <GPIOSetState>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->forwardPwmCh, 0);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d105      	bne.n	80021fe <BTS7960SetPower+0x27e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2200      	movs	r2, #0
 80021fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80021fc:	e02c      	b.n	8002258 <BTS7960SetPower+0x2d8>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	2b04      	cmp	r3, #4
 8002204:	d105      	bne.n	8002212 <BTS7960SetPower+0x292>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	2300      	movs	r3, #0
 800220e:	6393      	str	r3, [r2, #56]	@ 0x38
 8002210:	e022      	b.n	8002258 <BTS7960SetPower+0x2d8>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	2b08      	cmp	r3, #8
 8002218:	d105      	bne.n	8002226 <BTS7960SetPower+0x2a6>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	2300      	movs	r3, #0
 8002222:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002224:	e018      	b.n	8002258 <BTS7960SetPower+0x2d8>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	2b0c      	cmp	r3, #12
 800222c:	d105      	bne.n	800223a <BTS7960SetPower+0x2ba>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	2300      	movs	r3, #0
 8002236:	6413      	str	r3, [r2, #64]	@ 0x40
 8002238:	e00e      	b.n	8002258 <BTS7960SetPower+0x2d8>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	2b10      	cmp	r3, #16
 8002240:	d105      	bne.n	800224e <BTS7960SetPower+0x2ce>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	2300      	movs	r3, #0
 800224a:	6593      	str	r3, [r2, #88]	@ 0x58
 800224c:	e004      	b.n	8002258 <BTS7960SetPower+0x2d8>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	2300      	movs	r3, #0
 8002256:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d105      	bne.n	800226c <BTS7960SetPower+0x2ec>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2200      	movs	r2, #0
 8002268:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800226a:	e02d      	b.n	80022c8 <BTS7960SetPower+0x348>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	2b04      	cmp	r3, #4
 8002272:	d105      	bne.n	8002280 <BTS7960SetPower+0x300>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	2300      	movs	r3, #0
 800227c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800227e:	e023      	b.n	80022c8 <BTS7960SetPower+0x348>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b08      	cmp	r3, #8
 8002286:	d105      	bne.n	8002294 <BTS7960SetPower+0x314>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	2300      	movs	r3, #0
 8002290:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002292:	e019      	b.n	80022c8 <BTS7960SetPower+0x348>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	2b0c      	cmp	r3, #12
 800229a:	d105      	bne.n	80022a8 <BTS7960SetPower+0x328>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	2300      	movs	r3, #0
 80022a4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80022a6:	e00f      	b.n	80022c8 <BTS7960SetPower+0x348>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	2b10      	cmp	r3, #16
 80022ae:	d105      	bne.n	80022bc <BTS7960SetPower+0x33c>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	2300      	movs	r3, #0
 80022b8:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80022ba:	e005      	b.n	80022c8 <BTS7960SetPower+0x348>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	2300      	movs	r3, #0
 80022c4:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80022c6:	e7ff      	b.n	80022c8 <BTS7960SetPower+0x348>
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <BTS7960GetPower>:

int BTS7960GetPower(BTS7960_t *driver) {
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	return driver->power;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69db      	ldr	r3, [r3, #28]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <BTS7960InterfaceInit>:

// Private function prototypes
int MotorIGetPower(MotorInterface_t *interface);
void MotorISetPower(MotorInterface_t *interface, int power);

void BTS7960InterfaceInit(MotorInterface_t *interface, BTS7960_t *driver) {
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
	interface->hardwareMotor = driver;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	601a      	str	r2, [r3, #0]
	interface->MotorGetPower = &MotorIGetPower;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a05      	ldr	r2, [pc, #20]	@ (8002310 <BTS7960InterfaceInit+0x28>)
 80022fc:	605a      	str	r2, [r3, #4]
	interface->MotorSetPower = &MotorISetPower;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a04      	ldr	r2, [pc, #16]	@ (8002314 <BTS7960InterfaceInit+0x2c>)
 8002302:	609a      	str	r2, [r3, #8]
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	08002319 	.word	0x08002319
 8002314:	08002335 	.word	0x08002335

08002318 <MotorIGetPower>:

int MotorIGetPower(MotorInterface_t *interface) {
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	return BTS7960GetPower((BTS7960_t *)interface->hardwareMotor);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ffd3 	bl	80022d0 <BTS7960GetPower>
 800232a:	4603      	mov	r3, r0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <MotorISetPower>:

void MotorISetPower(MotorInterface_t *interface, int power) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
	BTS7960SetPower((BTS7960_t *)interface->hardwareMotor, power);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6839      	ldr	r1, [r7, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fe1b 	bl	8001f80 <BTS7960SetPower>
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <GPIOInit>:
 *      Author: Jennyston
 */

#include "peripherals/gpio.h"

void GPIOInit(GPIO_t *gpio, GPIO_TypeDef *port, uint16_t pin) {
 8002352:	b480      	push	{r7}
 8002354:	b085      	sub	sp, #20
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	4613      	mov	r3, r2
 800235e:	80fb      	strh	r3, [r7, #6]
	gpio->port = port;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	601a      	str	r2, [r3, #0]
	gpio->pin = pin;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	88fa      	ldrh	r2, [r7, #6]
 800236a:	809a      	strh	r2, [r3, #4]
//	gpio->hcomp = NULL;
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <GPIOGetState>:
//	gpio->port = NULL;
//	gpio->pin = 0;
//	gpio->hcomp = hcomp;
//}

GPIOState GPIOGetState(GPIO_t *gpio) {
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
	if(gpio->port != NULL) {
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00e      	beq.n	80023a6 <GPIOGetState+0x2e>
		return HAL_GPIO_ReadPin(gpio->port, gpio->pin) == GPIO_PIN_SET ?
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	889b      	ldrh	r3, [r3, #4]
 8002390:	4619      	mov	r1, r3
 8002392:	4610      	mov	r0, r2
 8002394:	f000 fb68 	bl	8002a68 <HAL_GPIO_ReadPin>
 8002398:	4603      	mov	r3, r0
				GPIO_HIGH : GPIO_LOW;
 800239a:	2b01      	cmp	r3, #1
 800239c:	bf14      	ite	ne
 800239e:	2301      	movne	r3, #1
 80023a0:	2300      	moveq	r3, #0
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	e000      	b.n	80023a8 <GPIOGetState+0x30>
//	else if (gpio->hcomp != NULL) {
//		return HAL_COMP_GetOutputLevel(gpio->hcomp) == COMP_OUTPUTLEVEL_HIGH ?
//				GPIO_HIGH : GPIO_LOW;
//	}
	else {
		return GPIO_LOW;
 80023a6:	2301      	movs	r3, #1
	}
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <GPIOSetState>:

void GPIOSetState(GPIO_t *gpio, GPIOState state) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	70fb      	strb	r3, [r7, #3]
	if(gpio->port != NULL) {
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00c      	beq.n	80023de <GPIOSetState+0x2e>
		HAL_GPIO_WritePin(gpio->port, gpio->pin, state == GPIO_HIGH ?
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	8899      	ldrh	r1, [r3, #4]
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	bf0c      	ite	eq
 80023d2:	2301      	moveq	r3, #1
 80023d4:	2300      	movne	r3, #0
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	461a      	mov	r2, r3
 80023da:	f000 fb5d 	bl	8002a98 <HAL_GPIO_WritePin>
				GPIO_PIN_SET : GPIO_PIN_RESET);
	}
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
	  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002420 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80023ec:	f7ff fd00 	bl	8001df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023f0:	480c      	ldr	r0, [pc, #48]	@ (8002424 <LoopForever+0x6>)
  ldr r1, =_edata
 80023f2:	490d      	ldr	r1, [pc, #52]	@ (8002428 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023f4:	4a0d      	ldr	r2, [pc, #52]	@ (800242c <LoopForever+0xe>)
  movs r3, #0
 80023f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023f8:	e002      	b.n	8002400 <LoopCopyDataInit>

080023fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023fe:	3304      	adds	r3, #4

08002400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002404:	d3f9      	bcc.n	80023fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002406:	4a0a      	ldr	r2, [pc, #40]	@ (8002430 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002408:	4c0a      	ldr	r4, [pc, #40]	@ (8002434 <LoopForever+0x16>)
  movs r3, #0
 800240a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800240c:	e001      	b.n	8002412 <LoopFillZerobss>

0800240e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800240e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002410:	3204      	adds	r2, #4

08002412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002414:	d3fb      	bcc.n	800240e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002416:	f00b f8b7 	bl	800d588 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800241a:	f7fe fee5 	bl	80011e8 <main>

0800241e <LoopForever>:

LoopForever:
    b LoopForever
 800241e:	e7fe      	b.n	800241e <LoopForever>
	  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002420:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002428:	2000032c 	.word	0x2000032c
  ldr r2, =_sidata
 800242c:	0800f630 	.word	0x0800f630
  ldr r2, =_sbss
 8002430:	2000032c 	.word	0x2000032c
  ldr r4, =_ebss
 8002434:	20001058 	.word	0x20001058

08002438 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002438:	e7fe      	b.n	8002438 <ADC1_2_IRQHandler>
	...

0800243c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002440:	4b08      	ldr	r3, [pc, #32]	@ (8002464 <HAL_Init+0x28>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a07      	ldr	r2, [pc, #28]	@ (8002464 <HAL_Init+0x28>)
 8002446:	f043 0310 	orr.w	r3, r3, #16
 800244a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800244c:	2003      	movs	r0, #3
 800244e:	f000 f94f 	bl	80026f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002452:	2000      	movs	r0, #0
 8002454:	f000 f808 	bl	8002468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002458:	f7ff f9de 	bl	8001818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40022000 	.word	0x40022000

08002468 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002470:	4b12      	ldr	r3, [pc, #72]	@ (80024bc <HAL_InitTick+0x54>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b12      	ldr	r3, [pc, #72]	@ (80024c0 <HAL_InitTick+0x58>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	4619      	mov	r1, r3
 800247a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800247e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002482:	fbb2 f3f3 	udiv	r3, r2, r3
 8002486:	4618      	mov	r0, r3
 8002488:	f000 f967 	bl	800275a <HAL_SYSTICK_Config>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e00e      	b.n	80024b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b0f      	cmp	r3, #15
 800249a:	d80a      	bhi.n	80024b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800249c:	2200      	movs	r2, #0
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	f04f 30ff 	mov.w	r0, #4294967295
 80024a4:	f000 f92f 	bl	8002706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024a8:	4a06      	ldr	r2, [pc, #24]	@ (80024c4 <HAL_InitTick+0x5c>)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	e000      	b.n	80024b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20000000 	.word	0x20000000
 80024c0:	20000008 	.word	0x20000008
 80024c4:	20000004 	.word	0x20000004

080024c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024cc:	4b06      	ldr	r3, [pc, #24]	@ (80024e8 <HAL_IncTick+0x20>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b06      	ldr	r3, [pc, #24]	@ (80024ec <HAL_IncTick+0x24>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4413      	add	r3, r2
 80024d8:	4a04      	ldr	r2, [pc, #16]	@ (80024ec <HAL_IncTick+0x24>)
 80024da:	6013      	str	r3, [r2, #0]
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	20000008 	.word	0x20000008
 80024ec:	20000744 	.word	0x20000744

080024f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80024f4:	4b03      	ldr	r3, [pc, #12]	@ (8002504 <HAL_GetTick+0x14>)
 80024f6:	681b      	ldr	r3, [r3, #0]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	20000744 	.word	0x20000744

08002508 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002510:	f7ff ffee 	bl	80024f0 <HAL_GetTick>
 8002514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002520:	d005      	beq.n	800252e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002522:	4b0a      	ldr	r3, [pc, #40]	@ (800254c <HAL_Delay+0x44>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4413      	add	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800252e:	bf00      	nop
 8002530:	f7ff ffde 	bl	80024f0 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	429a      	cmp	r2, r3
 800253e:	d8f7      	bhi.n	8002530 <HAL_Delay+0x28>
  {
  }
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000008 	.word	0x20000008

08002550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002560:	4b0c      	ldr	r3, [pc, #48]	@ (8002594 <__NVIC_SetPriorityGrouping+0x44>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800256c:	4013      	ands	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002578:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800257c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002582:	4a04      	ldr	r2, [pc, #16]	@ (8002594 <__NVIC_SetPriorityGrouping+0x44>)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	60d3      	str	r3, [r2, #12]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800259c:	4b04      	ldr	r3, [pc, #16]	@ (80025b0 <__NVIC_GetPriorityGrouping+0x18>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	0a1b      	lsrs	r3, r3, #8
 80025a2:	f003 0307 	and.w	r3, r3, #7
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	db0b      	blt.n	80025de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	f003 021f 	and.w	r2, r3, #31
 80025cc:	4907      	ldr	r1, [pc, #28]	@ (80025ec <__NVIC_EnableIRQ+0x38>)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	2001      	movs	r0, #1
 80025d6:	fa00 f202 	lsl.w	r2, r0, r2
 80025da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000e100 	.word	0xe000e100

080025f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	6039      	str	r1, [r7, #0]
 80025fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002600:	2b00      	cmp	r3, #0
 8002602:	db0a      	blt.n	800261a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	b2da      	uxtb	r2, r3
 8002608:	490c      	ldr	r1, [pc, #48]	@ (800263c <__NVIC_SetPriority+0x4c>)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	0112      	lsls	r2, r2, #4
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	440b      	add	r3, r1
 8002614:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002618:	e00a      	b.n	8002630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	b2da      	uxtb	r2, r3
 800261e:	4908      	ldr	r1, [pc, #32]	@ (8002640 <__NVIC_SetPriority+0x50>)
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	3b04      	subs	r3, #4
 8002628:	0112      	lsls	r2, r2, #4
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	440b      	add	r3, r1
 800262e:	761a      	strb	r2, [r3, #24]
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	e000e100 	.word	0xe000e100
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	@ 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f1c3 0307 	rsb	r3, r3, #7
 800265e:	2b04      	cmp	r3, #4
 8002660:	bf28      	it	cs
 8002662:	2304      	movcs	r3, #4
 8002664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3304      	adds	r3, #4
 800266a:	2b06      	cmp	r3, #6
 800266c:	d902      	bls.n	8002674 <NVIC_EncodePriority+0x30>
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3b03      	subs	r3, #3
 8002672:	e000      	b.n	8002676 <NVIC_EncodePriority+0x32>
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002678:	f04f 32ff 	mov.w	r2, #4294967295
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43da      	mvns	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	401a      	ands	r2, r3
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800268c:	f04f 31ff 	mov.w	r1, #4294967295
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	fa01 f303 	lsl.w	r3, r1, r3
 8002696:	43d9      	mvns	r1, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	4313      	orrs	r3, r2
         );
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3724      	adds	r7, #36	@ 0x24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026bc:	d301      	bcc.n	80026c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026be:	2301      	movs	r3, #1
 80026c0:	e00f      	b.n	80026e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c2:	4a0a      	ldr	r2, [pc, #40]	@ (80026ec <SysTick_Config+0x40>)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ca:	210f      	movs	r1, #15
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295
 80026d0:	f7ff ff8e 	bl	80025f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d4:	4b05      	ldr	r3, [pc, #20]	@ (80026ec <SysTick_Config+0x40>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026da:	4b04      	ldr	r3, [pc, #16]	@ (80026ec <SysTick_Config+0x40>)
 80026dc:	2207      	movs	r2, #7
 80026de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	e000e010 	.word	0xe000e010

080026f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff ff29 	bl	8002550 <__NVIC_SetPriorityGrouping>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b086      	sub	sp, #24
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
 8002712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002718:	f7ff ff3e 	bl	8002598 <__NVIC_GetPriorityGrouping>
 800271c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	6978      	ldr	r0, [r7, #20]
 8002724:	f7ff ff8e 	bl	8002644 <NVIC_EncodePriority>
 8002728:	4602      	mov	r2, r0
 800272a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff5d 	bl	80025f0 <__NVIC_SetPriority>
}
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff31 	bl	80025b4 <__NVIC_EnableIRQ>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ffa2 	bl	80026ac <SysTick_Config>
 8002768:	4603      	mov	r3, r0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002782:	e154      	b.n	8002a2e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	2101      	movs	r1, #1
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	fa01 f303 	lsl.w	r3, r1, r3
 8002790:	4013      	ands	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 8146 	beq.w	8002a28 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d005      	beq.n	80027b4 <HAL_GPIO_Init+0x40>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d130      	bne.n	8002816 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	2203      	movs	r2, #3
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4013      	ands	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027ea:	2201      	movs	r2, #1
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4013      	ands	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	091b      	lsrs	r3, r3, #4
 8002800:	f003 0201 	and.w	r2, r3, #1
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	2b03      	cmp	r3, #3
 8002820:	d017      	beq.n	8002852 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	2203      	movs	r2, #3
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4013      	ands	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d123      	bne.n	80028a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	08da      	lsrs	r2, r3, #3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3208      	adds	r2, #8
 8002866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800286a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	220f      	movs	r2, #15
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4013      	ands	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	691a      	ldr	r2, [r3, #16]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	08da      	lsrs	r2, r3, #3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3208      	adds	r2, #8
 80028a0:	6939      	ldr	r1, [r7, #16]
 80028a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	2203      	movs	r2, #3
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43db      	mvns	r3, r3
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4013      	ands	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 0203 	and.w	r2, r3, #3
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 80a0 	beq.w	8002a28 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028e8:	4b58      	ldr	r3, [pc, #352]	@ (8002a4c <HAL_GPIO_Init+0x2d8>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	4a57      	ldr	r2, [pc, #348]	@ (8002a4c <HAL_GPIO_Init+0x2d8>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6193      	str	r3, [r2, #24]
 80028f4:	4b55      	ldr	r3, [pc, #340]	@ (8002a4c <HAL_GPIO_Init+0x2d8>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002900:	4a53      	ldr	r2, [pc, #332]	@ (8002a50 <HAL_GPIO_Init+0x2dc>)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	089b      	lsrs	r3, r3, #2
 8002906:	3302      	adds	r3, #2
 8002908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	220f      	movs	r2, #15
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800292a:	d019      	beq.n	8002960 <HAL_GPIO_Init+0x1ec>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a49      	ldr	r2, [pc, #292]	@ (8002a54 <HAL_GPIO_Init+0x2e0>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d013      	beq.n	800295c <HAL_GPIO_Init+0x1e8>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a48      	ldr	r2, [pc, #288]	@ (8002a58 <HAL_GPIO_Init+0x2e4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d00d      	beq.n	8002958 <HAL_GPIO_Init+0x1e4>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a47      	ldr	r2, [pc, #284]	@ (8002a5c <HAL_GPIO_Init+0x2e8>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d007      	beq.n	8002954 <HAL_GPIO_Init+0x1e0>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a46      	ldr	r2, [pc, #280]	@ (8002a60 <HAL_GPIO_Init+0x2ec>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d101      	bne.n	8002950 <HAL_GPIO_Init+0x1dc>
 800294c:	2304      	movs	r3, #4
 800294e:	e008      	b.n	8002962 <HAL_GPIO_Init+0x1ee>
 8002950:	2305      	movs	r3, #5
 8002952:	e006      	b.n	8002962 <HAL_GPIO_Init+0x1ee>
 8002954:	2303      	movs	r3, #3
 8002956:	e004      	b.n	8002962 <HAL_GPIO_Init+0x1ee>
 8002958:	2302      	movs	r3, #2
 800295a:	e002      	b.n	8002962 <HAL_GPIO_Init+0x1ee>
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <HAL_GPIO_Init+0x1ee>
 8002960:	2300      	movs	r3, #0
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	f002 0203 	and.w	r2, r2, #3
 8002968:	0092      	lsls	r2, r2, #2
 800296a:	4093      	lsls	r3, r2
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002972:	4937      	ldr	r1, [pc, #220]	@ (8002a50 <HAL_GPIO_Init+0x2dc>)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	089b      	lsrs	r3, r3, #2
 8002978:	3302      	adds	r3, #2
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002980:	4b38      	ldr	r3, [pc, #224]	@ (8002a64 <HAL_GPIO_Init+0x2f0>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	43db      	mvns	r3, r3
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4013      	ands	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029a4:	4a2f      	ldr	r2, [pc, #188]	@ (8002a64 <HAL_GPIO_Init+0x2f0>)
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002a64 <HAL_GPIO_Init+0x2f0>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	43db      	mvns	r3, r3
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4013      	ands	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029ce:	4a25      	ldr	r2, [pc, #148]	@ (8002a64 <HAL_GPIO_Init+0x2f0>)
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029d4:	4b23      	ldr	r3, [pc, #140]	@ (8002a64 <HAL_GPIO_Init+0x2f0>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	43db      	mvns	r3, r3
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	4013      	ands	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80029f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002a64 <HAL_GPIO_Init+0x2f0>)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029fe:	4b19      	ldr	r3, [pc, #100]	@ (8002a64 <HAL_GPIO_Init+0x2f0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	43db      	mvns	r3, r3
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a22:	4a10      	ldr	r2, [pc, #64]	@ (8002a64 <HAL_GPIO_Init+0x2f0>)
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	fa22 f303 	lsr.w	r3, r2, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f47f aea3 	bne.w	8002784 <HAL_GPIO_Init+0x10>
  }
}
 8002a3e:	bf00      	nop
 8002a40:	bf00      	nop
 8002a42:	371c      	adds	r7, #28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40010000 	.word	0x40010000
 8002a54:	48000400 	.word	0x48000400
 8002a58:	48000800 	.word	0x48000800
 8002a5c:	48000c00 	.word	0x48000c00
 8002a60:	48001000 	.word	0x48001000
 8002a64:	40010400 	.word	0x40010400

08002a68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	887b      	ldrh	r3, [r7, #2]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
 8002a84:	e001      	b.n	8002a8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a86:	2300      	movs	r3, #0
 8002a88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	807b      	strh	r3, [r7, #2]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aa8:	787b      	ldrb	r3, [r7, #1]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002aae:	887a      	ldrh	r2, [r7, #2]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ab4:	e002      	b.n	8002abc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ab6:	887a      	ldrh	r2, [r7, #2]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e08d      	b.n	8002bf6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d106      	bne.n	8002af4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7fe feb6 	bl	8001860 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2224      	movs	r2, #36	@ 0x24
 8002af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0201 	bic.w	r2, r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d107      	bne.n	8002b42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	e006      	b.n	8002b50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002b4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d108      	bne.n	8002b6a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b66:	605a      	str	r2, [r3, #4]
 8002b68:	e007      	b.n	8002b7a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691a      	ldr	r2, [r3, #16]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69d9      	ldr	r1, [r3, #28]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a1a      	ldr	r2, [r3, #32]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	817b      	strh	r3, [r7, #10]
 8002c10:	4613      	mov	r3, r2
 8002c12:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	f040 80fd 	bne.w	8002e1c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_I2C_Master_Transmit+0x30>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e0f6      	b.n	8002e1e <HAL_I2C_Master_Transmit+0x21e>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c38:	f7ff fc5a 	bl	80024f0 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	2319      	movs	r3, #25
 8002c44:	2201      	movs	r2, #1
 8002c46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 fa0a 	bl	8003064 <I2C_WaitOnFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e0e1      	b.n	8002e1e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2221      	movs	r2, #33	@ 0x21
 8002c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2210      	movs	r2, #16
 8002c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	893a      	ldrh	r2, [r7, #8]
 8002c7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	2bff      	cmp	r3, #255	@ 0xff
 8002c8a:	d906      	bls.n	8002c9a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	22ff      	movs	r2, #255	@ 0xff
 8002c90:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002c92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	e007      	b.n	8002caa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002ca4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ca8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d024      	beq.n	8002cfc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb6:	781a      	ldrb	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	3301      	adds	r3, #1
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	8979      	ldrh	r1, [r7, #10]
 8002cee:	4b4e      	ldr	r3, [pc, #312]	@ (8002e28 <HAL_I2C_Master_Transmit+0x228>)
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 fc05 	bl	8003504 <I2C_TransferConfig>
 8002cfa:	e066      	b.n	8002dca <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	8979      	ldrh	r1, [r7, #10]
 8002d04:	4b48      	ldr	r3, [pc, #288]	@ (8002e28 <HAL_I2C_Master_Transmit+0x228>)
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 fbfa 	bl	8003504 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002d10:	e05b      	b.n	8002dca <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	6a39      	ldr	r1, [r7, #32]
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 f9fd 	bl	8003116 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e07b      	b.n	8002e1e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2a:	781a      	ldrb	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d034      	beq.n	8002dca <HAL_I2C_Master_Transmit+0x1ca>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d130      	bne.n	8002dca <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2180      	movs	r1, #128	@ 0x80
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 f976 	bl	8003064 <I2C_WaitOnFlagUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e04d      	b.n	8002e1e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2bff      	cmp	r3, #255	@ 0xff
 8002d8a:	d90e      	bls.n	8002daa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	22ff      	movs	r2, #255	@ 0xff
 8002d90:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	8979      	ldrh	r1, [r7, #10]
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 fbae 	bl	8003504 <I2C_TransferConfig>
 8002da8:	e00f      	b.n	8002dca <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	8979      	ldrh	r1, [r7, #10]
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 fb9d 	bl	8003504 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d19e      	bne.n	8002d12 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	6a39      	ldr	r1, [r7, #32]
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f9e3 	bl	80031a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e01a      	b.n	8002e1e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2220      	movs	r2, #32
 8002dee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6859      	ldr	r1, [r3, #4]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8002e2c <HAL_I2C_Master_Transmit+0x22c>)
 8002dfc:	400b      	ands	r3, r1
 8002dfe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	e000      	b.n	8002e1e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002e1c:	2302      	movs	r3, #2
  }
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	80002000 	.word	0x80002000
 8002e2c:	fe00e800 	.word	0xfe00e800

08002e30 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b088      	sub	sp, #32
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	607a      	str	r2, [r7, #4]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	817b      	strh	r3, [r7, #10]
 8002e40:	4613      	mov	r3, r2
 8002e42:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	f040 80db 	bne.w	8003008 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_I2C_Master_Receive+0x30>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e0d4      	b.n	800300a <HAL_I2C_Master_Receive+0x1da>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e68:	f7ff fb42 	bl	80024f0 <HAL_GetTick>
 8002e6c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	2319      	movs	r3, #25
 8002e74:	2201      	movs	r2, #1
 8002e76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f8f2 	bl	8003064 <I2C_WaitOnFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e0bf      	b.n	800300a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2222      	movs	r2, #34	@ 0x22
 8002e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2210      	movs	r2, #16
 8002e96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	893a      	ldrh	r2, [r7, #8]
 8002eaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2bff      	cmp	r3, #255	@ 0xff
 8002eba:	d90e      	bls.n	8002eda <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	8979      	ldrh	r1, [r7, #10]
 8002eca:	4b52      	ldr	r3, [pc, #328]	@ (8003014 <HAL_I2C_Master_Receive+0x1e4>)
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 fb16 	bl	8003504 <I2C_TransferConfig>
 8002ed8:	e06d      	b.n	8002fb6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	8979      	ldrh	r1, [r7, #10]
 8002eec:	4b49      	ldr	r3, [pc, #292]	@ (8003014 <HAL_I2C_Master_Receive+0x1e4>)
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 fb05 	bl	8003504 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002efa:	e05c      	b.n	8002fb6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	6a39      	ldr	r1, [r7, #32]
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 f993 	bl	800322c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e07c      	b.n	800300a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d034      	beq.n	8002fb6 <HAL_I2C_Master_Receive+0x186>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d130      	bne.n	8002fb6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2180      	movs	r1, #128	@ 0x80
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 f880 	bl	8003064 <I2C_WaitOnFlagUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e04d      	b.n	800300a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	2bff      	cmp	r3, #255	@ 0xff
 8002f76:	d90e      	bls.n	8002f96 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	22ff      	movs	r2, #255	@ 0xff
 8002f7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	8979      	ldrh	r1, [r7, #10]
 8002f86:	2300      	movs	r3, #0
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 fab8 	bl	8003504 <I2C_TransferConfig>
 8002f94:	e00f      	b.n	8002fb6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	8979      	ldrh	r1, [r7, #10]
 8002fa8:	2300      	movs	r3, #0
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 faa7 	bl	8003504 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d19d      	bne.n	8002efc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	6a39      	ldr	r1, [r7, #32]
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 f8ed 	bl	80031a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e01a      	b.n	800300a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6859      	ldr	r1, [r3, #4]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8003018 <HAL_I2C_Master_Receive+0x1e8>)
 8002fe8:	400b      	ands	r3, r1
 8002fea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	e000      	b.n	800300a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003008:	2302      	movs	r3, #2
  }
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	80002400 	.word	0x80002400
 8003018:	fe00e800 	.word	0xfe00e800

0800301c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b02      	cmp	r3, #2
 8003030:	d103      	bne.n	800303a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2200      	movs	r2, #0
 8003038:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b01      	cmp	r3, #1
 8003046:	d007      	beq.n	8003058 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	619a      	str	r2, [r3, #24]
  }
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	4613      	mov	r3, r2
 8003072:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003074:	e03b      	b.n	80030ee <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	6839      	ldr	r1, [r7, #0]
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 f962 	bl	8003344 <I2C_IsErrorOccurred>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e041      	b.n	800310e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003090:	d02d      	beq.n	80030ee <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003092:	f7ff fa2d 	bl	80024f0 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d302      	bcc.n	80030a8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d122      	bne.n	80030ee <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699a      	ldr	r2, [r3, #24]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	4013      	ands	r3, r2
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	bf0c      	ite	eq
 80030b8:	2301      	moveq	r3, #1
 80030ba:	2300      	movne	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	461a      	mov	r2, r3
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d113      	bne.n	80030ee <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ca:	f043 0220 	orr.w	r2, r3, #32
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e00f      	b.n	800310e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699a      	ldr	r2, [r3, #24]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4013      	ands	r3, r2
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	bf0c      	ite	eq
 80030fe:	2301      	moveq	r3, #1
 8003100:	2300      	movne	r3, #0
 8003102:	b2db      	uxtb	r3, r3
 8003104:	461a      	mov	r2, r3
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	429a      	cmp	r2, r3
 800310a:	d0b4      	beq.n	8003076 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003122:	e033      	b.n	800318c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	68b9      	ldr	r1, [r7, #8]
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 f90b 	bl	8003344 <I2C_IsErrorOccurred>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e031      	b.n	800319c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313e:	d025      	beq.n	800318c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003140:	f7ff f9d6 	bl	80024f0 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	429a      	cmp	r2, r3
 800314e:	d302      	bcc.n	8003156 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d11a      	bne.n	800318c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b02      	cmp	r3, #2
 8003162:	d013      	beq.n	800318c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003168:	f043 0220 	orr.w	r2, r3, #32
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e007      	b.n	800319c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b02      	cmp	r3, #2
 8003198:	d1c4      	bne.n	8003124 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031b0:	e02f      	b.n	8003212 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f8c4 	bl	8003344 <I2C_IsErrorOccurred>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e02d      	b.n	8003222 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c6:	f7ff f993 	bl	80024f0 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d302      	bcc.n	80031dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d11a      	bne.n	8003212 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	d013      	beq.n	8003212 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ee:	f043 0220 	orr.w	r2, r3, #32
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e007      	b.n	8003222 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b20      	cmp	r3, #32
 800321e:	d1c8      	bne.n	80031b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800323c:	e071      	b.n	8003322 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 f87e 	bl	8003344 <I2C_IsErrorOccurred>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b20      	cmp	r3, #32
 800325e:	d13b      	bne.n	80032d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003260:	7dfb      	ldrb	r3, [r7, #23]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d138      	bne.n	80032d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b04      	cmp	r3, #4
 8003272:	d105      	bne.n	8003280 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	f003 0310 	and.w	r3, r3, #16
 800328a:	2b10      	cmp	r3, #16
 800328c:	d121      	bne.n	80032d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2210      	movs	r2, #16
 8003294:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2204      	movs	r2, #4
 800329a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2220      	movs	r2, #32
 80032a2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6859      	ldr	r1, [r3, #4]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	4b24      	ldr	r3, [pc, #144]	@ (8003340 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80032b0:	400b      	ands	r3, r1
 80032b2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	75fb      	strb	r3, [r7, #23]
 80032d0:	e002      	b.n	80032d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80032d8:	f7ff f90a 	bl	80024f0 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d302      	bcc.n	80032ee <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d119      	bne.n	8003322 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80032ee:	7dfb      	ldrb	r3, [r7, #23]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d116      	bne.n	8003322 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d00f      	beq.n	8003322 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003306:	f043 0220 	orr.w	r2, r3, #32
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b04      	cmp	r3, #4
 800332e:	d002      	beq.n	8003336 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003330:	7dfb      	ldrb	r3, [r7, #23]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d083      	beq.n	800323e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003336:	7dfb      	ldrb	r3, [r7, #23]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	fe00e800 	.word	0xfe00e800

08003344 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b08a      	sub	sp, #40	@ 0x28
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800335e:	2300      	movs	r3, #0
 8003360:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	f003 0310 	and.w	r3, r3, #16
 800336c:	2b00      	cmp	r3, #0
 800336e:	d068      	beq.n	8003442 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2210      	movs	r2, #16
 8003376:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003378:	e049      	b.n	800340e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003380:	d045      	beq.n	800340e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003382:	f7ff f8b5 	bl	80024f0 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	429a      	cmp	r2, r3
 8003390:	d302      	bcc.n	8003398 <I2C_IsErrorOccurred+0x54>
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d13a      	bne.n	800340e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033ba:	d121      	bne.n	8003400 <I2C_IsErrorOccurred+0xbc>
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033c2:	d01d      	beq.n	8003400 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80033c4:	7cfb      	ldrb	r3, [r7, #19]
 80033c6:	2b20      	cmp	r3, #32
 80033c8:	d01a      	beq.n	8003400 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80033da:	f7ff f889 	bl	80024f0 <HAL_GetTick>
 80033de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033e0:	e00e      	b.n	8003400 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033e2:	f7ff f885 	bl	80024f0 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b19      	cmp	r3, #25
 80033ee:	d907      	bls.n	8003400 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	f043 0320 	orr.w	r3, r3, #32
 80033f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80033fe:	e006      	b.n	800340e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	f003 0320 	and.w	r3, r3, #32
 800340a:	2b20      	cmp	r3, #32
 800340c:	d1e9      	bne.n	80033e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b20      	cmp	r3, #32
 800341a:	d003      	beq.n	8003424 <I2C_IsErrorOccurred+0xe0>
 800341c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0aa      	beq.n	800337a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003424:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003428:	2b00      	cmp	r3, #0
 800342a:	d103      	bne.n	8003434 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2220      	movs	r2, #32
 8003432:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	f043 0304 	orr.w	r3, r3, #4
 800343a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00b      	beq.n	800346c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	f043 0301 	orr.w	r3, r3, #1
 800345a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003464:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	f043 0308 	orr.w	r3, r3, #8
 800347c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003486:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00b      	beq.n	80034b0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	f043 0302 	orr.w	r3, r3, #2
 800349e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80034b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d01c      	beq.n	80034f2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f7ff fdaf 	bl	800301c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6859      	ldr	r1, [r3, #4]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003500 <I2C_IsErrorOccurred+0x1bc>)
 80034ca:	400b      	ands	r3, r1
 80034cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	431a      	orrs	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80034f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3728      	adds	r7, #40	@ 0x28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	fe00e800 	.word	0xfe00e800

08003504 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	607b      	str	r3, [r7, #4]
 800350e:	460b      	mov	r3, r1
 8003510:	817b      	strh	r3, [r7, #10]
 8003512:	4613      	mov	r3, r2
 8003514:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003516:	897b      	ldrh	r3, [r7, #10]
 8003518:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800351c:	7a7b      	ldrb	r3, [r7, #9]
 800351e:	041b      	lsls	r3, r3, #16
 8003520:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003524:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	4313      	orrs	r3, r2
 800352e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003532:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	0d5b      	lsrs	r3, r3, #21
 800353e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003542:	4b08      	ldr	r3, [pc, #32]	@ (8003564 <I2C_TransferConfig+0x60>)
 8003544:	430b      	orrs	r3, r1
 8003546:	43db      	mvns	r3, r3
 8003548:	ea02 0103 	and.w	r1, r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	430a      	orrs	r2, r1
 8003554:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003556:	bf00      	nop
 8003558:	371c      	adds	r7, #28
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	03ff63ff 	.word	0x03ff63ff

08003568 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b20      	cmp	r3, #32
 800357c:	d138      	bne.n	80035f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003584:	2b01      	cmp	r3, #1
 8003586:	d101      	bne.n	800358c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003588:	2302      	movs	r3, #2
 800358a:	e032      	b.n	80035f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2224      	movs	r2, #36	@ 0x24
 8003598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0201 	bic.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6819      	ldr	r1, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	e000      	b.n	80035f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035f0:	2302      	movs	r3, #2
  }
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035fe:	b480      	push	{r7}
 8003600:	b085      	sub	sp, #20
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b20      	cmp	r3, #32
 8003612:	d139      	bne.n	8003688 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800361a:	2b01      	cmp	r3, #1
 800361c:	d101      	bne.n	8003622 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800361e:	2302      	movs	r3, #2
 8003620:	e033      	b.n	800368a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2224      	movs	r2, #36	@ 0x24
 800362e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0201 	bic.w	r2, r2, #1
 8003640:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003650:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	021b      	lsls	r3, r3, #8
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4313      	orrs	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003684:	2300      	movs	r3, #0
 8003686:	e000      	b.n	800368a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003688:	2302      	movs	r3, #2
  }
}
 800368a:	4618      	mov	r0, r3
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b084      	sub	sp, #16
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0b9      	b.n	800381c <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d106      	bne.n	80036c2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f008 fe03 	bl	800c2c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2203      	movs	r2, #3
 80036c6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f004 fe46 	bl	8008360 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036d4:	2300      	movs	r3, #0
 80036d6:	73fb      	strb	r3, [r7, #15]
 80036d8:	e03e      	b.n	8003758 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036da:	7bfa      	ldrb	r2, [r7, #15]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	440b      	add	r3, r1
 80036e8:	3311      	adds	r3, #17
 80036ea:	2201      	movs	r2, #1
 80036ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036ee:	7bfa      	ldrb	r2, [r7, #15]
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	4613      	mov	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	440b      	add	r3, r1
 80036fc:	3310      	adds	r3, #16
 80036fe:	7bfa      	ldrb	r2, [r7, #15]
 8003700:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003702:	7bfa      	ldrb	r2, [r7, #15]
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	440b      	add	r3, r1
 8003710:	3313      	adds	r3, #19
 8003712:	2200      	movs	r2, #0
 8003714:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003716:	7bfa      	ldrb	r2, [r7, #15]
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	440b      	add	r3, r1
 8003724:	3320      	adds	r3, #32
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800372a:	7bfa      	ldrb	r2, [r7, #15]
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	440b      	add	r3, r1
 8003738:	3324      	adds	r3, #36	@ 0x24
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800373e:	7bfb      	ldrb	r3, [r7, #15]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	440b      	add	r3, r1
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	3301      	adds	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	791b      	ldrb	r3, [r3, #4]
 800375c:	7bfa      	ldrb	r2, [r7, #15]
 800375e:	429a      	cmp	r2, r3
 8003760:	d3bb      	bcc.n	80036da <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003762:	2300      	movs	r3, #0
 8003764:	73fb      	strb	r3, [r7, #15]
 8003766:	e044      	b.n	80037f2 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003768:	7bfa      	ldrb	r2, [r7, #15]
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	440b      	add	r3, r1
 8003776:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800377a:	2200      	movs	r2, #0
 800377c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800377e:	7bfa      	ldrb	r2, [r7, #15]
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	440b      	add	r3, r1
 800378c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003790:	7bfa      	ldrb	r2, [r7, #15]
 8003792:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003794:	7bfa      	ldrb	r2, [r7, #15]
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	440b      	add	r3, r1
 80037a2:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80037a6:	2200      	movs	r2, #0
 80037a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037aa:	7bfa      	ldrb	r2, [r7, #15]
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	440b      	add	r3, r1
 80037b8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037c0:	7bfa      	ldrb	r2, [r7, #15]
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	440b      	add	r3, r1
 80037ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037d6:	7bfa      	ldrb	r2, [r7, #15]
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	440b      	add	r3, r1
 80037e4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	3301      	adds	r3, #1
 80037f0:	73fb      	strb	r3, [r7, #15]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	791b      	ldrb	r3, [r3, #4]
 80037f6:	7bfa      	ldrb	r2, [r7, #15]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d3b5      	bcc.n	8003768 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6818      	ldr	r0, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3304      	adds	r3, #4
 8003804:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003808:	f004 fdc5 	bl	8008396 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_PCD_Start+0x16>
 8003836:	2302      	movs	r3, #2
 8003838:	e016      	b.n	8003868 <HAL_PCD_Start+0x44>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f004 fd73 	bl	8008332 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800384c:	2101      	movs	r1, #1
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f008 ffba 	bl	800c7c8 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f007 f831 	bl	800a8c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f007 f82a 	bl	800a8d6 <USB_ReadInterrupts>
 8003882:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 fa99 	bl	8003dc6 <PCD_EP_ISR_Handler>

    return;
 8003894:	e0bd      	b.n	8003a12 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800389c:	2b00      	cmp	r3, #0
 800389e:	d013      	beq.n	80038c8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038b2:	b292      	uxth	r2, r2
 80038b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f008 fda6 	bl	800c40a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80038be:	2100      	movs	r1, #0
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f8a9 	bl	8003a18 <HAL_PCD_SetAddress>

    return;
 80038c6:	e0a4      	b.n	8003a12 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00c      	beq.n	80038ec <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038da:	b29a      	uxth	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80038e4:	b292      	uxth	r2, r2
 80038e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80038ea:	e092      	b.n	8003a12 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00c      	beq.n	8003910 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038fe:	b29a      	uxth	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003908:	b292      	uxth	r2, r2
 800390a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800390e:	e080      	b.n	8003a12 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d027      	beq.n	800396a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003922:	b29a      	uxth	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0204 	bic.w	r2, r2, #4
 800392c:	b292      	uxth	r2, r2
 800392e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800393a:	b29a      	uxth	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0208 	bic.w	r2, r2, #8
 8003944:	b292      	uxth	r2, r2
 8003946:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f008 fd96 	bl	800c47c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003958:	b29a      	uxth	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003962:	b292      	uxth	r2, r2
 8003964:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003968:	e053      	b.n	8003a12 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003970:	2b00      	cmp	r3, #0
 8003972:	d027      	beq.n	80039c4 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800397c:	b29a      	uxth	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0208 	orr.w	r2, r2, #8
 8003986:	b292      	uxth	r2, r2
 8003988:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003994:	b29a      	uxth	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800399e:	b292      	uxth	r2, r2
 80039a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0204 	orr.w	r2, r2, #4
 80039b6:	b292      	uxth	r2, r2
 80039b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f008 fd43 	bl	800c448 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80039c2:	e026      	b.n	8003a12 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00f      	beq.n	80039ee <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80039e0:	b292      	uxth	r2, r2
 80039e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f008 fd01 	bl	800c3ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80039ec:	e011      	b.n	8003a12 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00c      	beq.n	8003a12 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a0a:	b292      	uxth	r2, r2
 8003a0c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003a10:	bf00      	nop
  }
}
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <HAL_PCD_SetAddress+0x1a>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e012      	b.n	8003a58 <HAL_PCD_SetAddress+0x40>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	78fa      	ldrb	r2, [r7, #3]
 8003a46:	4611      	mov	r1, r2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f006 ff25 	bl	800a898 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	4608      	mov	r0, r1
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4603      	mov	r3, r0
 8003a70:	70fb      	strb	r3, [r7, #3]
 8003a72:	460b      	mov	r3, r1
 8003a74:	803b      	strh	r3, [r7, #0]
 8003a76:	4613      	mov	r3, r2
 8003a78:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	da0e      	bge.n	8003aa4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	f003 0207 	and.w	r2, r3, #7
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	3310      	adds	r3, #16
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	4413      	add	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	705a      	strb	r2, [r3, #1]
 8003aa2:	e00e      	b.n	8003ac2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aa4:	78fb      	ldrb	r3, [r7, #3]
 8003aa6:	f003 0207 	and.w	r2, r3, #7
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	4413      	add	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ac2:	78fb      	ldrb	r3, [r7, #3]
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003ace:	883a      	ldrh	r2, [r7, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	78ba      	ldrb	r2, [r7, #2]
 8003ad8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ada:	78bb      	ldrb	r3, [r7, #2]
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d102      	bne.n	8003ae6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <HAL_PCD_EP_Open+0x94>
 8003af0:	2302      	movs	r3, #2
 8003af2:	e00e      	b.n	8003b12 <HAL_PCD_EP_Open+0xb2>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68f9      	ldr	r1, [r7, #12]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f004 fc66 	bl	80083d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003b10:	7afb      	ldrb	r3, [r7, #11]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b084      	sub	sp, #16
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	460b      	mov	r3, r1
 8003b24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	da0e      	bge.n	8003b4c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b2e:	78fb      	ldrb	r3, [r7, #3]
 8003b30:	f003 0207 	and.w	r2, r3, #7
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	3310      	adds	r3, #16
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	4413      	add	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2201      	movs	r2, #1
 8003b48:	705a      	strb	r2, [r3, #1]
 8003b4a:	e00e      	b.n	8003b6a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	f003 0207 	and.w	r2, r3, #7
 8003b52:	4613      	mov	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	4413      	add	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b6a:	78fb      	ldrb	r3, [r7, #3]
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <HAL_PCD_EP_Close+0x6a>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e00e      	b.n	8003ba2 <HAL_PCD_EP_Close+0x88>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68f9      	ldr	r1, [r7, #12]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f004 ffe2 	bl	8008b5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b086      	sub	sp, #24
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	60f8      	str	r0, [r7, #12]
 8003bb2:	607a      	str	r2, [r7, #4]
 8003bb4:	603b      	str	r3, [r7, #0]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bba:	7afb      	ldrb	r3, [r7, #11]
 8003bbc:	f003 0207 	and.w	r2, r3, #7
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4413      	add	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2200      	movs	r2, #0
 8003be2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	2200      	movs	r2, #0
 8003be8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bea:	7afb      	ldrb	r3, [r7, #11]
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6979      	ldr	r1, [r7, #20]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f005 f99a 	bl	8008f36 <USB_EPStartXfer>

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	607a      	str	r2, [r7, #4]
 8003c16:	603b      	str	r3, [r7, #0]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c1c:	7afb      	ldrb	r3, [r7, #11]
 8003c1e:	f003 0207 	and.w	r2, r3, #7
 8003c22:	4613      	mov	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	3310      	adds	r3, #16
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	4413      	add	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2201      	movs	r2, #1
 8003c56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c58:	7afb      	ldrb	r3, [r7, #11]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6979      	ldr	r1, [r7, #20]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f005 f963 	bl	8008f36 <USB_EPStartXfer>

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	460b      	mov	r3, r1
 8003c84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c86:	78fb      	ldrb	r3, [r7, #3]
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	7912      	ldrb	r2, [r2, #4]
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d901      	bls.n	8003c98 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e03e      	b.n	8003d16 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	da0e      	bge.n	8003cbe <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	f003 0207 	and.w	r2, r3, #7
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	3310      	adds	r3, #16
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	705a      	strb	r2, [r3, #1]
 8003cbc:	e00c      	b.n	8003cd8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cbe:	78fa      	ldrb	r2, [r7, #3]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	4413      	add	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cde:	78fb      	ldrb	r3, [r7, #3]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <HAL_PCD_EP_SetStall+0x7e>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e00e      	b.n	8003d16 <HAL_PCD_EP_SetStall+0x9c>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68f9      	ldr	r1, [r7, #12]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f006 fcc7 	bl	800a69a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b084      	sub	sp, #16
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	460b      	mov	r3, r1
 8003d28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d2a:	78fb      	ldrb	r3, [r7, #3]
 8003d2c:	f003 030f 	and.w	r3, r3, #15
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	7912      	ldrb	r2, [r2, #4]
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d901      	bls.n	8003d3c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e040      	b.n	8003dbe <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	da0e      	bge.n	8003d62 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d44:	78fb      	ldrb	r3, [r7, #3]
 8003d46:	f003 0207 	and.w	r2, r3, #7
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	3310      	adds	r3, #16
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	4413      	add	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	705a      	strb	r2, [r3, #1]
 8003d60:	e00e      	b.n	8003d80 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d62:	78fb      	ldrb	r3, [r7, #3]
 8003d64:	f003 0207 	and.w	r2, r3, #7
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	4413      	add	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d86:	78fb      	ldrb	r3, [r7, #3]
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_PCD_EP_ClrStall+0x82>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e00e      	b.n	8003dbe <HAL_PCD_EP_ClrStall+0xa0>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68f9      	ldr	r1, [r7, #12]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f006 fcc4 	bl	800a73c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b096      	sub	sp, #88	@ 0x58
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003dce:	e3bb      	b.n	8004548 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003dd8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003ddc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8003dea:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f040 8175 	bne.w	80040de <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003df4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d14e      	bne.n	8003e9e <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	881b      	ldrh	r3, [r3, #0]
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003e0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e10:	81fb      	strh	r3, [r7, #14]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	89fb      	ldrh	r3, [r7, #14]
 8003e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3310      	adds	r3, #16
 8003e28:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	461a      	mov	r2, r3
 8003e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	4413      	add	r3, r2
 8003e3e:	3302      	adds	r3, #2
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6812      	ldr	r2, [r2, #0]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e54:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e58:	695a      	ldr	r2, [r3, #20]
 8003e5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	441a      	add	r2, r3
 8003e60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e62:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003e64:	2100      	movs	r1, #0
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f008 faa7 	bl	800c3ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	7b1b      	ldrb	r3, [r3, #12]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 8368 	beq.w	8004548 <PCD_EP_ISR_Handler+0x782>
 8003e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f040 8363 	bne.w	8004548 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	7b1b      	ldrb	r3, [r3, #12]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	731a      	strb	r2, [r3, #12]
 8003e9c:	e354      	b.n	8004548 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ea4:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003eb0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003eb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d034      	beq.n	8003f26 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	4413      	add	r3, r2
 8003ed0:	3306      	adds	r3, #6
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ee6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6818      	ldr	r0, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ef4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ef8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	f006 fd41 	bl	800a982 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	823b      	strh	r3, [r7, #16]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	8a3a      	ldrh	r2, [r7, #16]
 8003f16:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f1a:	b292      	uxth	r2, r2
 8003f1c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f008 fa1e 	bl	800c360 <HAL_PCD_SetupStageCallback>
 8003f24:	e310      	b.n	8004548 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003f26:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f280 830c 	bge.w	8004548 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	83fb      	strh	r3, [r7, #30]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	8bfa      	ldrh	r2, [r7, #30]
 8003f46:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f4a:	b292      	uxth	r2, r2
 8003f4c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	461a      	mov	r2, r3
 8003f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	4413      	add	r3, r2
 8003f62:	3306      	adds	r3, #6
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f78:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d019      	beq.n	8003fb6 <PCD_EP_ISR_Handler+0x1f0>
 8003f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d015      	beq.n	8003fb6 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6818      	ldr	r0, [r3, #0]
 8003f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f90:	6959      	ldr	r1, [r3, #20]
 8003f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f94:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f98:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	f006 fcf1 	bl	800a982 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fa2:	695a      	ldr	r2, [r3, #20]
 8003fa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	441a      	add	r2, r3
 8003faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fac:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003fae:	2100      	movs	r1, #0
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f008 f9e7 	bl	800c384 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003fc0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003fc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f040 82bd 	bne.w	8004548 <PCD_EP_ISR_Handler+0x782>
 8003fce:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003fd2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003fd6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003fda:	f000 82b5 	beq.w	8004548 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	61bb      	str	r3, [r7, #24]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	461a      	mov	r2, r3
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	61bb      	str	r3, [r7, #24]
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ffc:	617b      	str	r3, [r7, #20]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	b29b      	uxth	r3, r3
 8004004:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004008:	b29a      	uxth	r2, r3
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	801a      	strh	r2, [r3, #0]
 800400e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10a      	bne.n	800402c <PCD_EP_ISR_Handler+0x266>
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	b29b      	uxth	r3, r3
 800401c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004024:	b29a      	uxth	r2, r3
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	801a      	strh	r2, [r3, #0]
 800402a:	e039      	b.n	80040a0 <PCD_EP_ISR_Handler+0x2da>
 800402c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	2b3e      	cmp	r3, #62	@ 0x3e
 8004032:	d818      	bhi.n	8004066 <PCD_EP_ISR_Handler+0x2a0>
 8004034:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	085b      	lsrs	r3, r3, #1
 800403a:	647b      	str	r3, [r7, #68]	@ 0x44
 800403c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <PCD_EP_ISR_Handler+0x288>
 8004048:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800404a:	3301      	adds	r3, #1
 800404c:	647b      	str	r3, [r7, #68]	@ 0x44
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	b29a      	uxth	r2, r3
 8004054:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004056:	b29b      	uxth	r3, r3
 8004058:	029b      	lsls	r3, r3, #10
 800405a:	b29b      	uxth	r3, r3
 800405c:	4313      	orrs	r3, r2
 800405e:	b29a      	uxth	r2, r3
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	801a      	strh	r2, [r3, #0]
 8004064:	e01c      	b.n	80040a0 <PCD_EP_ISR_Handler+0x2da>
 8004066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	647b      	str	r3, [r7, #68]	@ 0x44
 800406e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f003 031f 	and.w	r3, r3, #31
 8004076:	2b00      	cmp	r3, #0
 8004078:	d102      	bne.n	8004080 <PCD_EP_ISR_Handler+0x2ba>
 800407a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800407c:	3b01      	subs	r3, #1
 800407e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	b29a      	uxth	r2, r3
 8004086:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004088:	b29b      	uxth	r3, r3
 800408a:	029b      	lsls	r3, r3, #10
 800408c:	b29b      	uxth	r3, r3
 800408e:	4313      	orrs	r3, r2
 8004090:	b29b      	uxth	r3, r3
 8004092:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004096:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800409a:	b29a      	uxth	r2, r3
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040b0:	827b      	strh	r3, [r7, #18]
 80040b2:	8a7b      	ldrh	r3, [r7, #18]
 80040b4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80040b8:	827b      	strh	r3, [r7, #18]
 80040ba:	8a7b      	ldrh	r3, [r7, #18]
 80040bc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80040c0:	827b      	strh	r3, [r7, #18]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	8a7b      	ldrh	r3, [r7, #18]
 80040c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040d8:	b29b      	uxth	r3, r3
 80040da:	8013      	strh	r3, [r2, #0]
 80040dc:	e234      	b.n	8004548 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	461a      	mov	r2, r3
 80040e4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4413      	add	r3, r2
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80040f2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f280 80fc 	bge.w	80042f4 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	b29a      	uxth	r2, r3
 800410e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004112:	4013      	ands	r3, r2
 8004114:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	461a      	mov	r2, r3
 800411e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800412a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800412e:	b292      	uxth	r2, r2
 8004130:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004132:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	4413      	add	r3, r2
 8004146:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800414a:	7b1b      	ldrb	r3, [r3, #12]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d125      	bne.n	800419c <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004158:	b29b      	uxth	r3, r3
 800415a:	461a      	mov	r2, r3
 800415c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	4413      	add	r3, r2
 8004164:	3306      	adds	r3, #6
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6812      	ldr	r2, [r2, #0]
 800416c:	4413      	add	r3, r2
 800416e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004178:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800417c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 8092 	beq.w	80042aa <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6818      	ldr	r0, [r3, #0]
 800418a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800418c:	6959      	ldr	r1, [r3, #20]
 800418e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004190:	88da      	ldrh	r2, [r3, #6]
 8004192:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004196:	f006 fbf4 	bl	800a982 <USB_ReadPMA>
 800419a:	e086      	b.n	80042aa <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800419c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800419e:	78db      	ldrb	r3, [r3, #3]
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d10a      	bne.n	80041ba <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80041a4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80041a8:	461a      	mov	r2, r3
 80041aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f9d9 	bl	8004564 <HAL_PCD_EP_DB_Receive>
 80041b2:	4603      	mov	r3, r0
 80041b4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80041b8:	e077      	b.n	80042aa <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041d4:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	461a      	mov	r2, r3
 80041de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	441a      	add	r2, r3
 80041e6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80041ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	b29b      	uxth	r3, r3
 8004210:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d024      	beq.n	8004262 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004220:	b29b      	uxth	r3, r3
 8004222:	461a      	mov	r2, r3
 8004224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	4413      	add	r3, r2
 800422c:	3302      	adds	r3, #2
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	4413      	add	r3, r2
 8004236:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004240:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004244:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004248:	2b00      	cmp	r3, #0
 800424a:	d02e      	beq.n	80042aa <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6818      	ldr	r0, [r3, #0]
 8004250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004252:	6959      	ldr	r1, [r3, #20]
 8004254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004256:	891a      	ldrh	r2, [r3, #8]
 8004258:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800425c:	f006 fb91 	bl	800a982 <USB_ReadPMA>
 8004260:	e023      	b.n	80042aa <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800426a:	b29b      	uxth	r3, r3
 800426c:	461a      	mov	r2, r3
 800426e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	4413      	add	r3, r2
 8004276:	3306      	adds	r3, #6
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6812      	ldr	r2, [r2, #0]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800428a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800428e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004292:	2b00      	cmp	r3, #0
 8004294:	d009      	beq.n	80042aa <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6818      	ldr	r0, [r3, #0]
 800429a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800429c:	6959      	ldr	r1, [r3, #20]
 800429e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042a0:	895a      	ldrh	r2, [r3, #10]
 80042a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80042a6:	f006 fb6c 	bl	800a982 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80042aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ac:	69da      	ldr	r2, [r3, #28]
 80042ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80042b2:	441a      	add	r2, r3
 80042b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042b6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80042b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ba:	695a      	ldr	r2, [r3, #20]
 80042bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80042c0:	441a      	add	r2, r3
 80042c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80042c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d005      	beq.n	80042da <PCD_EP_ISR_Handler+0x514>
 80042ce:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80042d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d206      	bcs.n	80042e8 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80042da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	4619      	mov	r1, r3
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f008 f84f 	bl	800c384 <HAL_PCD_DataOutStageCallback>
 80042e6:	e005      	b.n	80042f4 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80042ee:	4618      	mov	r0, r3
 80042f0:	f004 fe21 	bl	8008f36 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80042f4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80042f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 8123 	beq.w	8004548 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8004302:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004306:	4613      	mov	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	3310      	adds	r3, #16
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	4413      	add	r3, r2
 8004314:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	461a      	mov	r2, r3
 800431c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	b29b      	uxth	r3, r3
 8004328:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800432c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004330:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	461a      	mov	r2, r3
 800433a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	441a      	add	r2, r3
 8004342:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800434a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800434e:	b29b      	uxth	r3, r3
 8004350:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004354:	78db      	ldrb	r3, [r3, #3]
 8004356:	2b01      	cmp	r3, #1
 8004358:	f040 80a2 	bne.w	80044a0 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800435c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800435e:	2200      	movs	r2, #0
 8004360:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004364:	7b1b      	ldrb	r3, [r3, #12]
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 8093 	beq.w	8004492 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800436c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004374:	2b00      	cmp	r3, #0
 8004376:	d046      	beq.n	8004406 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004378:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800437a:	785b      	ldrb	r3, [r3, #1]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d126      	bne.n	80043ce <PCD_EP_ISR_Handler+0x608>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	627b      	str	r3, [r7, #36]	@ 0x24
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800438e:	b29b      	uxth	r3, r3
 8004390:	461a      	mov	r2, r3
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	4413      	add	r3, r2
 8004396:	627b      	str	r3, [r7, #36]	@ 0x24
 8004398:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	011a      	lsls	r2, r3, #4
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	4413      	add	r3, r2
 80043a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80043a6:	623b      	str	r3, [r7, #32]
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	801a      	strh	r2, [r3, #0]
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	b29b      	uxth	r3, r3
 80043be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	801a      	strh	r2, [r3, #0]
 80043cc:	e061      	b.n	8004492 <PCD_EP_ISR_Handler+0x6cc>
 80043ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043d0:	785b      	ldrb	r3, [r3, #1]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d15d      	bne.n	8004492 <PCD_EP_ISR_Handler+0x6cc>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ea:	4413      	add	r3, r2
 80043ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	011a      	lsls	r2, r3, #4
 80043f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f6:	4413      	add	r3, r2
 80043f8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80043fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004400:	2200      	movs	r2, #0
 8004402:	801a      	strh	r2, [r3, #0]
 8004404:	e045      	b.n	8004492 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800440c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800440e:	785b      	ldrb	r3, [r3, #1]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d126      	bne.n	8004462 <PCD_EP_ISR_Handler+0x69c>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	637b      	str	r3, [r7, #52]	@ 0x34
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004422:	b29b      	uxth	r3, r3
 8004424:	461a      	mov	r2, r3
 8004426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004428:	4413      	add	r3, r2
 800442a:	637b      	str	r3, [r7, #52]	@ 0x34
 800442c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	011a      	lsls	r2, r3, #4
 8004432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004434:	4413      	add	r3, r2
 8004436:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800443a:	633b      	str	r3, [r7, #48]	@ 0x30
 800443c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	b29b      	uxth	r3, r3
 8004442:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004446:	b29a      	uxth	r2, r3
 8004448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800444a:	801a      	strh	r2, [r3, #0]
 800444c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	b29b      	uxth	r3, r3
 8004452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800445a:	b29a      	uxth	r2, r3
 800445c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445e:	801a      	strh	r2, [r3, #0]
 8004460:	e017      	b.n	8004492 <PCD_EP_ISR_Handler+0x6cc>
 8004462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004464:	785b      	ldrb	r3, [r3, #1]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d113      	bne.n	8004492 <PCD_EP_ISR_Handler+0x6cc>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004472:	b29b      	uxth	r3, r3
 8004474:	461a      	mov	r2, r3
 8004476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004478:	4413      	add	r3, r2
 800447a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800447c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	011a      	lsls	r2, r3, #4
 8004482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004484:	4413      	add	r3, r2
 8004486:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800448a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800448c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800448e:	2200      	movs	r2, #0
 8004490:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	4619      	mov	r1, r3
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f007 ff8e 	bl	800c3ba <HAL_PCD_DataInStageCallback>
 800449e:	e053      	b.n	8004548 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80044a0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80044a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d146      	bne.n	800453a <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	461a      	mov	r2, r3
 80044b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	4413      	add	r3, r2
 80044c0:	3302      	adds	r3, #2
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6812      	ldr	r2, [r2, #0]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044d4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80044d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044da:	699a      	ldr	r2, [r3, #24]
 80044dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d907      	bls.n	80044f4 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80044e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044e6:	699a      	ldr	r2, [r3, #24]
 80044e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80044ec:	1ad2      	subs	r2, r2, r3
 80044ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044f0:	619a      	str	r2, [r3, #24]
 80044f2:	e002      	b.n	80044fa <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80044f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044f6:	2200      	movs	r2, #0
 80044f8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80044fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d106      	bne.n	8004510 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	4619      	mov	r1, r3
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f007 ff56 	bl	800c3ba <HAL_PCD_DataInStageCallback>
 800450e:	e01b      	b.n	8004548 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004512:	695a      	ldr	r2, [r3, #20]
 8004514:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004518:	441a      	add	r2, r3
 800451a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800451c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800451e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004520:	69da      	ldr	r2, [r3, #28]
 8004522:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004526:	441a      	add	r2, r3
 8004528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800452a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004532:	4618      	mov	r0, r3
 8004534:	f004 fcff 	bl	8008f36 <USB_EPStartXfer>
 8004538:	e006      	b.n	8004548 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800453a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800453e:	461a      	mov	r2, r3
 8004540:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f91b 	bl	800477e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004550:	b29b      	uxth	r3, r3
 8004552:	b21b      	sxth	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	f6ff ac3b 	blt.w	8003dd0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3758      	adds	r7, #88	@ 0x58
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b088      	sub	sp, #32
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	4613      	mov	r3, r2
 8004570:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004572:	88fb      	ldrh	r3, [r7, #6]
 8004574:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d07e      	beq.n	800467a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004584:	b29b      	uxth	r3, r3
 8004586:	461a      	mov	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	4413      	add	r3, r2
 8004590:	3302      	adds	r3, #2
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	6812      	ldr	r2, [r2, #0]
 8004598:	4413      	add	r3, r2
 800459a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045a4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	699a      	ldr	r2, [r3, #24]
 80045aa:	8b7b      	ldrh	r3, [r7, #26]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d306      	bcc.n	80045be <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	699a      	ldr	r2, [r3, #24]
 80045b4:	8b7b      	ldrh	r3, [r7, #26]
 80045b6:	1ad2      	subs	r2, r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	619a      	str	r2, [r3, #24]
 80045bc:	e002      	b.n	80045c4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	2200      	movs	r2, #0
 80045c2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d123      	bne.n	8004614 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	461a      	mov	r2, r3
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045e6:	833b      	strh	r3, [r7, #24]
 80045e8:	8b3b      	ldrh	r3, [r7, #24]
 80045ea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80045ee:	833b      	strh	r3, [r7, #24]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	441a      	add	r2, r3
 80045fe:	8b3b      	ldrh	r3, [r7, #24]
 8004600:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004604:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004608:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800460c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004610:	b29b      	uxth	r3, r3
 8004612:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004614:	88fb      	ldrh	r3, [r7, #6]
 8004616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800461a:	2b00      	cmp	r3, #0
 800461c:	d01f      	beq.n	800465e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	461a      	mov	r2, r3
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	b29b      	uxth	r3, r3
 8004630:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004634:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004638:	82fb      	strh	r3, [r7, #22]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	461a      	mov	r2, r3
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	441a      	add	r2, r3
 8004648:	8afb      	ldrh	r3, [r7, #22]
 800464a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800464e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004652:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004656:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800465a:	b29b      	uxth	r3, r3
 800465c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800465e:	8b7b      	ldrh	r3, [r7, #26]
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 8087 	beq.w	8004774 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6818      	ldr	r0, [r3, #0]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	6959      	ldr	r1, [r3, #20]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	891a      	ldrh	r2, [r3, #8]
 8004672:	8b7b      	ldrh	r3, [r7, #26]
 8004674:	f006 f985 	bl	800a982 <USB_ReadPMA>
 8004678:	e07c      	b.n	8004774 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004682:	b29b      	uxth	r3, r3
 8004684:	461a      	mov	r2, r3
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	4413      	add	r3, r2
 800468e:	3306      	adds	r3, #6
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	6812      	ldr	r2, [r2, #0]
 8004696:	4413      	add	r3, r2
 8004698:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046a2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	699a      	ldr	r2, [r3, #24]
 80046a8:	8b7b      	ldrh	r3, [r7, #26]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d306      	bcc.n	80046bc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	699a      	ldr	r2, [r3, #24]
 80046b2:	8b7b      	ldrh	r3, [r7, #26]
 80046b4:	1ad2      	subs	r2, r2, r3
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	619a      	str	r2, [r3, #24]
 80046ba:	e002      	b.n	80046c2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2200      	movs	r2, #0
 80046c0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d123      	bne.n	8004712 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	b29b      	uxth	r3, r3
 80046dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046e4:	83fb      	strh	r3, [r7, #30]
 80046e6:	8bfb      	ldrh	r3, [r7, #30]
 80046e8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80046ec:	83fb      	strh	r3, [r7, #30]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	441a      	add	r2, r3
 80046fc:	8bfb      	ldrh	r3, [r7, #30]
 80046fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004702:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004706:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800470a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800470e:	b29b      	uxth	r3, r3
 8004710:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004712:	88fb      	ldrh	r3, [r7, #6]
 8004714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004718:	2b00      	cmp	r3, #0
 800471a:	d11f      	bne.n	800475c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	461a      	mov	r2, r3
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	b29b      	uxth	r3, r3
 800472e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004736:	83bb      	strh	r3, [r7, #28]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	441a      	add	r2, r3
 8004746:	8bbb      	ldrh	r3, [r7, #28]
 8004748:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800474c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004750:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004754:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004758:	b29b      	uxth	r3, r3
 800475a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800475c:	8b7b      	ldrh	r3, [r7, #26]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d008      	beq.n	8004774 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6818      	ldr	r0, [r3, #0]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	6959      	ldr	r1, [r3, #20]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	895a      	ldrh	r2, [r3, #10]
 800476e:	8b7b      	ldrh	r3, [r7, #26]
 8004770:	f006 f907 	bl	800a982 <USB_ReadPMA>
    }
  }

  return count;
 8004774:	8b7b      	ldrh	r3, [r7, #26]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3720      	adds	r7, #32
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b0a4      	sub	sp, #144	@ 0x90
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	4613      	mov	r3, r2
 800478a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800478c:	88fb      	ldrh	r3, [r7, #6]
 800478e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 81dd 	beq.w	8004b52 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	461a      	mov	r2, r3
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	4413      	add	r3, r2
 80047ac:	3302      	adds	r3, #2
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	6812      	ldr	r2, [r2, #0]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047c0:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	699a      	ldr	r2, [r3, #24]
 80047c8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d907      	bls.n	80047e0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	699a      	ldr	r2, [r3, #24]
 80047d4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80047d8:	1ad2      	subs	r2, r2, r3
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	619a      	str	r2, [r3, #24]
 80047de:	e002      	b.n	80047e6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2200      	movs	r2, #0
 80047e4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f040 80b9 	bne.w	8004962 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	785b      	ldrb	r3, [r3, #1]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d126      	bne.n	8004846 <HAL_PCD_EP_DB_Transmit+0xc8>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004806:	b29b      	uxth	r3, r3
 8004808:	461a      	mov	r2, r3
 800480a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800480c:	4413      	add	r3, r2
 800480e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	011a      	lsls	r2, r3, #4
 8004816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004818:	4413      	add	r3, r2
 800481a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800481e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	b29b      	uxth	r3, r3
 8004826:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800482a:	b29a      	uxth	r2, r3
 800482c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482e:	801a      	strh	r2, [r3, #0]
 8004830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	b29b      	uxth	r3, r3
 8004836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800483a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800483e:	b29a      	uxth	r2, r3
 8004840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004842:	801a      	strh	r2, [r3, #0]
 8004844:	e01a      	b.n	800487c <HAL_PCD_EP_DB_Transmit+0xfe>
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	785b      	ldrb	r3, [r3, #1]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d116      	bne.n	800487c <HAL_PCD_EP_DB_Transmit+0xfe>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	637b      	str	r3, [r7, #52]	@ 0x34
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800485c:	b29b      	uxth	r3, r3
 800485e:	461a      	mov	r2, r3
 8004860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004862:	4413      	add	r3, r2
 8004864:	637b      	str	r3, [r7, #52]	@ 0x34
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	011a      	lsls	r2, r3, #4
 800486c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800486e:	4413      	add	r3, r2
 8004870:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004874:	633b      	str	r3, [r7, #48]	@ 0x30
 8004876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004878:	2200      	movs	r2, #0
 800487a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	627b      	str	r3, [r7, #36]	@ 0x24
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	785b      	ldrb	r3, [r3, #1]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d126      	bne.n	80048d8 <HAL_PCD_EP_DB_Transmit+0x15a>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	61fb      	str	r3, [r7, #28]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004898:	b29b      	uxth	r3, r3
 800489a:	461a      	mov	r2, r3
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	4413      	add	r3, r2
 80048a0:	61fb      	str	r3, [r7, #28]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	011a      	lsls	r2, r3, #4
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	4413      	add	r3, r2
 80048ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80048b0:	61bb      	str	r3, [r7, #24]
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048bc:	b29a      	uxth	r2, r3
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	801a      	strh	r2, [r3, #0]
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	801a      	strh	r2, [r3, #0]
 80048d6:	e017      	b.n	8004908 <HAL_PCD_EP_DB_Transmit+0x18a>
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	785b      	ldrb	r3, [r3, #1]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d113      	bne.n	8004908 <HAL_PCD_EP_DB_Transmit+0x18a>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	461a      	mov	r2, r3
 80048ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ee:	4413      	add	r3, r2
 80048f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	011a      	lsls	r2, r3, #4
 80048f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fa:	4413      	add	r3, r2
 80048fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004900:	623b      	str	r3, [r7, #32]
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	2200      	movs	r2, #0
 8004906:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	4619      	mov	r1, r3
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f007 fd53 	bl	800c3ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004914:	88fb      	ldrh	r3, [r7, #6]
 8004916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 82fc 	beq.w	8004f18 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	461a      	mov	r2, r3
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	b29b      	uxth	r3, r3
 8004932:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800493a:	82fb      	strh	r3, [r7, #22]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	461a      	mov	r2, r3
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	441a      	add	r2, r3
 800494a:	8afb      	ldrh	r3, [r7, #22]
 800494c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004950:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004954:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004958:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800495c:	b29b      	uxth	r3, r3
 800495e:	8013      	strh	r3, [r2, #0]
 8004960:	e2da      	b.n	8004f18 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004962:	88fb      	ldrh	r3, [r7, #6]
 8004964:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d021      	beq.n	80049b0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	461a      	mov	r2, r3
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	881b      	ldrh	r3, [r3, #0]
 800497c:	b29b      	uxth	r3, r3
 800497e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004986:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	461a      	mov	r2, r3
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	441a      	add	r2, r3
 8004998:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800499c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	f040 82ae 	bne.w	8004f18 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	695a      	ldr	r2, [r3, #20]
 80049c0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80049c4:	441a      	add	r2, r3
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	69da      	ldr	r2, [r3, #28]
 80049ce:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80049d2:	441a      	add	r2, r3
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	6a1a      	ldr	r2, [r3, #32]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d30b      	bcc.n	80049fc <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	6a1a      	ldr	r2, [r3, #32]
 80049f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049f4:	1ad2      	subs	r2, r2, r3
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	621a      	str	r2, [r3, #32]
 80049fa:	e017      	b.n	8004a2c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d108      	bne.n	8004a16 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004a04:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004a08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004a14:	e00a      	b.n	8004a2c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	785b      	ldrb	r3, [r3, #1]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d165      	bne.n	8004b00 <HAL_PCD_EP_DB_Transmit+0x382>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	461a      	mov	r2, r3
 8004a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a48:	4413      	add	r3, r2
 8004a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	011a      	lsls	r2, r3, #4
 8004a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a54:	4413      	add	r3, r2
 8004a56:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a6a:	801a      	strh	r2, [r3, #0]
 8004a6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10a      	bne.n	8004a8a <HAL_PCD_EP_DB_Transmit+0x30c>
 8004a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a76:	881b      	ldrh	r3, [r3, #0]
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a86:	801a      	strh	r2, [r3, #0]
 8004a88:	e057      	b.n	8004b3a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004a8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a8e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004a90:	d818      	bhi.n	8004ac4 <HAL_PCD_EP_DB_Transmit+0x346>
 8004a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a96:	085b      	lsrs	r3, r3, #1
 8004a98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <HAL_PCD_EP_DB_Transmit+0x32e>
 8004aa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	029b      	lsls	r3, r3, #10
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	4313      	orrs	r3, r2
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac0:	801a      	strh	r2, [r3, #0]
 8004ac2:	e03a      	b.n	8004b3a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004ac4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ac8:	095b      	lsrs	r3, r3, #5
 8004aca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004acc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ad0:	f003 031f 	and.w	r3, r3, #31
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d102      	bne.n	8004ade <HAL_PCD_EP_DB_Transmit+0x360>
 8004ad8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ada:	3b01      	subs	r3, #1
 8004adc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	029b      	lsls	r3, r3, #10
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	4313      	orrs	r3, r2
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004af4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004afc:	801a      	strh	r2, [r3, #0]
 8004afe:	e01c      	b.n	8004b3a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	785b      	ldrb	r3, [r3, #1]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d118      	bne.n	8004b3a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	461a      	mov	r2, r3
 8004b1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b1c:	4413      	add	r3, r2
 8004b1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	011a      	lsls	r2, r3, #4
 8004b26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b28:	4413      	add	r3, r2
 8004b2a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b38:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6818      	ldr	r0, [r3, #0]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	6959      	ldr	r1, [r3, #20]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	891a      	ldrh	r2, [r3, #8]
 8004b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	f005 fed3 	bl	800a8f6 <USB_WritePMA>
 8004b50:	e1e2      	b.n	8004f18 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	4413      	add	r3, r2
 8004b66:	3306      	adds	r3, #6
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	6812      	ldr	r2, [r2, #0]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b7a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	699a      	ldr	r2, [r3, #24]
 8004b82:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d307      	bcc.n	8004b9a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	699a      	ldr	r2, [r3, #24]
 8004b8e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004b92:	1ad2      	subs	r2, r2, r3
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	619a      	str	r2, [r3, #24]
 8004b98:	e002      	b.n	8004ba0 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f040 80c0 	bne.w	8004d2a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	785b      	ldrb	r3, [r3, #1]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d126      	bne.n	8004c00 <HAL_PCD_EP_DB_Transmit+0x482>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004bc6:	4413      	add	r3, r2
 8004bc8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	011a      	lsls	r2, r3, #4
 8004bd0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004bd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004bda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004be8:	801a      	strh	r2, [r3, #0]
 8004bea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bfc:	801a      	strh	r2, [r3, #0]
 8004bfe:	e01a      	b.n	8004c36 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	785b      	ldrb	r3, [r3, #1]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d116      	bne.n	8004c36 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c1c:	4413      	add	r3, r2
 8004c1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	011a      	lsls	r2, r3, #4
 8004c26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c28:	4413      	add	r3, r2
 8004c2a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c32:	2200      	movs	r2, #0
 8004c34:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	785b      	ldrb	r3, [r3, #1]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d12b      	bne.n	8004c9c <HAL_PCD_EP_DB_Transmit+0x51e>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	461a      	mov	r2, r3
 8004c56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c58:	4413      	add	r3, r2
 8004c5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	011a      	lsls	r2, r3, #4
 8004c62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c64:	4413      	add	r3, r2
 8004c66:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c72:	881b      	ldrh	r3, [r3, #0]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c80:	801a      	strh	r2, [r3, #0]
 8004c82:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c98:	801a      	strh	r2, [r3, #0]
 8004c9a:	e017      	b.n	8004ccc <HAL_PCD_EP_DB_Transmit+0x54e>
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	785b      	ldrb	r3, [r3, #1]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d113      	bne.n	8004ccc <HAL_PCD_EP_DB_Transmit+0x54e>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	461a      	mov	r2, r3
 8004cb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cb2:	4413      	add	r3, r2
 8004cb4:	677b      	str	r3, [r7, #116]	@ 0x74
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	011a      	lsls	r2, r3, #4
 8004cbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004cc4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004cc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004cc8:	2200      	movs	r2, #0
 8004cca:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f007 fb71 	bl	800c3ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004cd8:	88fb      	ldrh	r3, [r7, #6]
 8004cda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f040 811a 	bne.w	8004f18 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cfe:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	461a      	mov	r2, r3
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	441a      	add	r2, r3
 8004d10:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8004d14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	8013      	strh	r3, [r2, #0]
 8004d28:	e0f6      	b.n	8004f18 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004d2a:	88fb      	ldrh	r3, [r7, #6]
 8004d2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d121      	bne.n	8004d78 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	461a      	mov	r2, r3
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d4e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	461a      	mov	r2, r3
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	441a      	add	r2, r3
 8004d60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004d64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	f040 80ca 	bne.w	8004f18 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	695a      	ldr	r2, [r3, #20]
 8004d88:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004d8c:	441a      	add	r2, r3
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	69da      	ldr	r2, [r3, #28]
 8004d96:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004d9a:	441a      	add	r2, r3
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	6a1a      	ldr	r2, [r3, #32]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d30b      	bcc.n	8004dc4 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	6a1a      	ldr	r2, [r3, #32]
 8004db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dbc:	1ad2      	subs	r2, r2, r3
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	621a      	str	r2, [r3, #32]
 8004dc2:	e017      	b.n	8004df4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d108      	bne.n	8004dde <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004dcc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004dd0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004ddc:	e00a      	b.n	8004df4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2200      	movs	r2, #0
 8004dea:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	657b      	str	r3, [r7, #84]	@ 0x54
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	785b      	ldrb	r3, [r3, #1]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d165      	bne.n	8004ece <HAL_PCD_EP_DB_Transmit+0x750>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	461a      	mov	r2, r3
 8004e14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e16:	4413      	add	r3, r2
 8004e18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	011a      	lsls	r2, r3, #4
 8004e20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e22:	4413      	add	r3, r2
 8004e24:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004e28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e2c:	881b      	ldrh	r3, [r3, #0]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e38:	801a      	strh	r2, [r3, #0]
 8004e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10a      	bne.n	8004e58 <HAL_PCD_EP_DB_Transmit+0x6da>
 8004e42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e54:	801a      	strh	r2, [r3, #0]
 8004e56:	e054      	b.n	8004f02 <HAL_PCD_EP_DB_Transmit+0x784>
 8004e58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e5e:	d818      	bhi.n	8004e92 <HAL_PCD_EP_DB_Transmit+0x714>
 8004e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e64:	085b      	lsrs	r3, r3, #1
 8004e66:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d002      	beq.n	8004e7a <HAL_PCD_EP_DB_Transmit+0x6fc>
 8004e74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e76:	3301      	adds	r3, #1
 8004e78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	029b      	lsls	r3, r3, #10
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e8e:	801a      	strh	r2, [r3, #0]
 8004e90:	e037      	b.n	8004f02 <HAL_PCD_EP_DB_Transmit+0x784>
 8004e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e96:	095b      	lsrs	r3, r3, #5
 8004e98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e9e:	f003 031f 	and.w	r3, r3, #31
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d102      	bne.n	8004eac <HAL_PCD_EP_DB_Transmit+0x72e>
 8004ea6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004eac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	029b      	lsls	r3, r3, #10
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ec2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004eca:	801a      	strh	r2, [r3, #0]
 8004ecc:	e019      	b.n	8004f02 <HAL_PCD_EP_DB_Transmit+0x784>
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	785b      	ldrb	r3, [r3, #1]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d115      	bne.n	8004f02 <HAL_PCD_EP_DB_Transmit+0x784>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ee4:	4413      	add	r3, r2
 8004ee6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	011a      	lsls	r2, r3, #4
 8004eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004ef6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f00:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6818      	ldr	r0, [r3, #0]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	6959      	ldr	r1, [r3, #20]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	895a      	ldrh	r2, [r3, #10]
 8004f0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	f005 fcef 	bl	800a8f6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f32:	82bb      	strh	r3, [r7, #20]
 8004f34:	8abb      	ldrh	r3, [r7, #20]
 8004f36:	f083 0310 	eor.w	r3, r3, #16
 8004f3a:	82bb      	strh	r3, [r7, #20]
 8004f3c:	8abb      	ldrh	r3, [r7, #20]
 8004f3e:	f083 0320 	eor.w	r3, r3, #32
 8004f42:	82bb      	strh	r3, [r7, #20]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	441a      	add	r2, r3
 8004f52:	8abb      	ldrh	r3, [r7, #20]
 8004f54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3790      	adds	r7, #144	@ 0x90
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b087      	sub	sp, #28
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	60f8      	str	r0, [r7, #12]
 8004f7a:	607b      	str	r3, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	817b      	strh	r3, [r7, #10]
 8004f80:	4613      	mov	r3, r2
 8004f82:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004f84:	897b      	ldrh	r3, [r7, #10]
 8004f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00b      	beq.n	8004fa8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f90:	897b      	ldrh	r3, [r7, #10]
 8004f92:	f003 0207 	and.w	r2, r3, #7
 8004f96:	4613      	mov	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	3310      	adds	r3, #16
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	e009      	b.n	8004fbc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004fa8:	897a      	ldrh	r2, [r7, #10]
 8004faa:	4613      	mov	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4413      	add	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004fbc:	893b      	ldrh	r3, [r7, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d107      	bne.n	8004fd2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	80da      	strh	r2, [r3, #6]
 8004fd0:	e00b      	b.n	8004fea <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	0c1b      	lsrs	r3, r3, #16
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	371c      	adds	r7, #28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005004:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005008:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800500a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800500e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d102      	bne.n	800501e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	f001 b823 	b.w	8006064 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800501e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005022:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 817d 	beq.w	800532e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005034:	4bbc      	ldr	r3, [pc, #752]	@ (8005328 <HAL_RCC_OscConfig+0x330>)
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f003 030c 	and.w	r3, r3, #12
 800503c:	2b04      	cmp	r3, #4
 800503e:	d00c      	beq.n	800505a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005040:	4bb9      	ldr	r3, [pc, #740]	@ (8005328 <HAL_RCC_OscConfig+0x330>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f003 030c 	and.w	r3, r3, #12
 8005048:	2b08      	cmp	r3, #8
 800504a:	d15c      	bne.n	8005106 <HAL_RCC_OscConfig+0x10e>
 800504c:	4bb6      	ldr	r3, [pc, #728]	@ (8005328 <HAL_RCC_OscConfig+0x330>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005058:	d155      	bne.n	8005106 <HAL_RCC_OscConfig+0x10e>
 800505a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800505e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005062:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8005066:	fa93 f3a3 	rbit	r3, r3
 800506a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800506e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005072:	fab3 f383 	clz	r3, r3
 8005076:	b2db      	uxtb	r3, r3
 8005078:	095b      	lsrs	r3, r3, #5
 800507a:	b2db      	uxtb	r3, r3
 800507c:	f043 0301 	orr.w	r3, r3, #1
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b01      	cmp	r3, #1
 8005084:	d102      	bne.n	800508c <HAL_RCC_OscConfig+0x94>
 8005086:	4ba8      	ldr	r3, [pc, #672]	@ (8005328 <HAL_RCC_OscConfig+0x330>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	e015      	b.n	80050b8 <HAL_RCC_OscConfig+0xc0>
 800508c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005090:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005094:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8005098:	fa93 f3a3 	rbit	r3, r3
 800509c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80050a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80050a4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80050a8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80050ac:	fa93 f3a3 	rbit	r3, r3
 80050b0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80050b4:	4b9c      	ldr	r3, [pc, #624]	@ (8005328 <HAL_RCC_OscConfig+0x330>)
 80050b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80050bc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80050c0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80050c4:	fa92 f2a2 	rbit	r2, r2
 80050c8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80050cc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80050d0:	fab2 f282 	clz	r2, r2
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	f042 0220 	orr.w	r2, r2, #32
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	f002 021f 	and.w	r2, r2, #31
 80050e0:	2101      	movs	r1, #1
 80050e2:	fa01 f202 	lsl.w	r2, r1, r2
 80050e6:	4013      	ands	r3, r2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 811f 	beq.w	800532c <HAL_RCC_OscConfig+0x334>
 80050ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f040 8116 	bne.w	800532c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	f000 bfaf 	b.w	8006064 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800510a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005116:	d106      	bne.n	8005126 <HAL_RCC_OscConfig+0x12e>
 8005118:	4b83      	ldr	r3, [pc, #524]	@ (8005328 <HAL_RCC_OscConfig+0x330>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a82      	ldr	r2, [pc, #520]	@ (8005328 <HAL_RCC_OscConfig+0x330>)
 800511e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005122:	6013      	str	r3, [r2, #0]
 8005124:	e036      	b.n	8005194 <HAL_RCC_OscConfig+0x19c>
 8005126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800512a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10c      	bne.n	8005150 <HAL_RCC_OscConfig+0x158>
 8005136:	4b7c      	ldr	r3, [pc, #496]	@ (8005328 <HAL_RCC_OscConfig+0x330>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a7b      	ldr	r2, [pc, #492]	@ (8005328 <HAL_RCC_OscConfig+0x330>)
 800513c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	4b79      	ldr	r3, [pc, #484]	@ (8005328 <HAL_RCC_OscConfig+0x330>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a78      	ldr	r2, [pc, #480]	@ (8005328 <HAL_RCC_OscConfig+0x330>)
 8005148:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	e021      	b.n	8005194 <HAL_RCC_OscConfig+0x19c>
 8005150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005154:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005160:	d10c      	bne.n	800517c <HAL_RCC_OscConfig+0x184>
 8005162:	4b71      	ldr	r3, [pc, #452]	@ (8005328 <HAL_RCC_OscConfig+0x330>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a70      	ldr	r2, [pc, #448]	@ (8005328 <HAL_RCC_OscConfig+0x330>)
 8005168:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	4b6e      	ldr	r3, [pc, #440]	@ (8005328 <HAL_RCC_OscConfig+0x330>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a6d      	ldr	r2, [pc, #436]	@ (8005328 <HAL_RCC_OscConfig+0x330>)
 8005174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005178:	6013      	str	r3, [r2, #0]
 800517a:	e00b      	b.n	8005194 <HAL_RCC_OscConfig+0x19c>
 800517c:	4b6a      	ldr	r3, [pc, #424]	@ (8005328 <HAL_RCC_OscConfig+0x330>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a69      	ldr	r2, [pc, #420]	@ (8005328 <HAL_RCC_OscConfig+0x330>)
 8005182:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	4b67      	ldr	r3, [pc, #412]	@ (8005328 <HAL_RCC_OscConfig+0x330>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a66      	ldr	r2, [pc, #408]	@ (8005328 <HAL_RCC_OscConfig+0x330>)
 800518e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005192:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005194:	4b64      	ldr	r3, [pc, #400]	@ (8005328 <HAL_RCC_OscConfig+0x330>)
 8005196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005198:	f023 020f 	bic.w	r2, r3, #15
 800519c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	495f      	ldr	r1, [pc, #380]	@ (8005328 <HAL_RCC_OscConfig+0x330>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d059      	beq.n	8005272 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051be:	f7fd f997 	bl	80024f0 <HAL_GetTick>
 80051c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051c6:	e00a      	b.n	80051de <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051c8:	f7fd f992 	bl	80024f0 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b64      	cmp	r3, #100	@ 0x64
 80051d6:	d902      	bls.n	80051de <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	f000 bf43 	b.w	8006064 <HAL_RCC_OscConfig+0x106c>
 80051de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80051e2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80051ea:	fa93 f3a3 	rbit	r3, r3
 80051ee:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80051f2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051f6:	fab3 f383 	clz	r3, r3
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	095b      	lsrs	r3, r3, #5
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	f043 0301 	orr.w	r3, r3, #1
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b01      	cmp	r3, #1
 8005208:	d102      	bne.n	8005210 <HAL_RCC_OscConfig+0x218>
 800520a:	4b47      	ldr	r3, [pc, #284]	@ (8005328 <HAL_RCC_OscConfig+0x330>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	e015      	b.n	800523c <HAL_RCC_OscConfig+0x244>
 8005210:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005214:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005218:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800521c:	fa93 f3a3 	rbit	r3, r3
 8005220:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8005224:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005228:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800522c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8005230:	fa93 f3a3 	rbit	r3, r3
 8005234:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8005238:	4b3b      	ldr	r3, [pc, #236]	@ (8005328 <HAL_RCC_OscConfig+0x330>)
 800523a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005240:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8005244:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8005248:	fa92 f2a2 	rbit	r2, r2
 800524c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8005250:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8005254:	fab2 f282 	clz	r2, r2
 8005258:	b2d2      	uxtb	r2, r2
 800525a:	f042 0220 	orr.w	r2, r2, #32
 800525e:	b2d2      	uxtb	r2, r2
 8005260:	f002 021f 	and.w	r2, r2, #31
 8005264:	2101      	movs	r1, #1
 8005266:	fa01 f202 	lsl.w	r2, r1, r2
 800526a:	4013      	ands	r3, r2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0ab      	beq.n	80051c8 <HAL_RCC_OscConfig+0x1d0>
 8005270:	e05d      	b.n	800532e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005272:	f7fd f93d 	bl	80024f0 <HAL_GetTick>
 8005276:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800527a:	e00a      	b.n	8005292 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800527c:	f7fd f938 	bl	80024f0 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b64      	cmp	r3, #100	@ 0x64
 800528a:	d902      	bls.n	8005292 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	f000 bee9 	b.w	8006064 <HAL_RCC_OscConfig+0x106c>
 8005292:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005296:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800529e:	fa93 f3a3 	rbit	r3, r3
 80052a2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80052a6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052aa:	fab3 f383 	clz	r3, r3
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	095b      	lsrs	r3, r3, #5
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	f043 0301 	orr.w	r3, r3, #1
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d102      	bne.n	80052c4 <HAL_RCC_OscConfig+0x2cc>
 80052be:	4b1a      	ldr	r3, [pc, #104]	@ (8005328 <HAL_RCC_OscConfig+0x330>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	e015      	b.n	80052f0 <HAL_RCC_OscConfig+0x2f8>
 80052c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80052c8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052cc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80052d0:	fa93 f3a3 	rbit	r3, r3
 80052d4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80052d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80052dc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80052e0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80052e4:	fa93 f3a3 	rbit	r3, r3
 80052e8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80052ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005328 <HAL_RCC_OscConfig+0x330>)
 80052ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80052f4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80052f8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80052fc:	fa92 f2a2 	rbit	r2, r2
 8005300:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8005304:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8005308:	fab2 f282 	clz	r2, r2
 800530c:	b2d2      	uxtb	r2, r2
 800530e:	f042 0220 	orr.w	r2, r2, #32
 8005312:	b2d2      	uxtb	r2, r2
 8005314:	f002 021f 	and.w	r2, r2, #31
 8005318:	2101      	movs	r1, #1
 800531a:	fa01 f202 	lsl.w	r2, r1, r2
 800531e:	4013      	ands	r3, r2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1ab      	bne.n	800527c <HAL_RCC_OscConfig+0x284>
 8005324:	e003      	b.n	800532e <HAL_RCC_OscConfig+0x336>
 8005326:	bf00      	nop
 8005328:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800532c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800532e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005332:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 817d 	beq.w	800563e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005344:	4ba6      	ldr	r3, [pc, #664]	@ (80055e0 <HAL_RCC_OscConfig+0x5e8>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f003 030c 	and.w	r3, r3, #12
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00b      	beq.n	8005368 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005350:	4ba3      	ldr	r3, [pc, #652]	@ (80055e0 <HAL_RCC_OscConfig+0x5e8>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f003 030c 	and.w	r3, r3, #12
 8005358:	2b08      	cmp	r3, #8
 800535a:	d172      	bne.n	8005442 <HAL_RCC_OscConfig+0x44a>
 800535c:	4ba0      	ldr	r3, [pc, #640]	@ (80055e0 <HAL_RCC_OscConfig+0x5e8>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d16c      	bne.n	8005442 <HAL_RCC_OscConfig+0x44a>
 8005368:	2302      	movs	r3, #2
 800536a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800536e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8005372:	fa93 f3a3 	rbit	r3, r3
 8005376:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800537a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800537e:	fab3 f383 	clz	r3, r3
 8005382:	b2db      	uxtb	r3, r3
 8005384:	095b      	lsrs	r3, r3, #5
 8005386:	b2db      	uxtb	r3, r3
 8005388:	f043 0301 	orr.w	r3, r3, #1
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b01      	cmp	r3, #1
 8005390:	d102      	bne.n	8005398 <HAL_RCC_OscConfig+0x3a0>
 8005392:	4b93      	ldr	r3, [pc, #588]	@ (80055e0 <HAL_RCC_OscConfig+0x5e8>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	e013      	b.n	80053c0 <HAL_RCC_OscConfig+0x3c8>
 8005398:	2302      	movs	r3, #2
 800539a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800539e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80053a2:	fa93 f3a3 	rbit	r3, r3
 80053a6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80053aa:	2302      	movs	r3, #2
 80053ac:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80053b0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80053b4:	fa93 f3a3 	rbit	r3, r3
 80053b8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80053bc:	4b88      	ldr	r3, [pc, #544]	@ (80055e0 <HAL_RCC_OscConfig+0x5e8>)
 80053be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c0:	2202      	movs	r2, #2
 80053c2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80053c6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80053ca:	fa92 f2a2 	rbit	r2, r2
 80053ce:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80053d2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80053d6:	fab2 f282 	clz	r2, r2
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	f042 0220 	orr.w	r2, r2, #32
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	f002 021f 	and.w	r2, r2, #31
 80053e6:	2101      	movs	r1, #1
 80053e8:	fa01 f202 	lsl.w	r2, r1, r2
 80053ec:	4013      	ands	r3, r2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00a      	beq.n	8005408 <HAL_RCC_OscConfig+0x410>
 80053f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d002      	beq.n	8005408 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	f000 be2e 	b.w	8006064 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005408:	4b75      	ldr	r3, [pc, #468]	@ (80055e0 <HAL_RCC_OscConfig+0x5e8>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005414:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	21f8      	movs	r1, #248	@ 0xf8
 800541e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005422:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8005426:	fa91 f1a1 	rbit	r1, r1
 800542a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800542e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8005432:	fab1 f181 	clz	r1, r1
 8005436:	b2c9      	uxtb	r1, r1
 8005438:	408b      	lsls	r3, r1
 800543a:	4969      	ldr	r1, [pc, #420]	@ (80055e0 <HAL_RCC_OscConfig+0x5e8>)
 800543c:	4313      	orrs	r3, r2
 800543e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005440:	e0fd      	b.n	800563e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005442:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005446:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 8088 	beq.w	8005564 <HAL_RCC_OscConfig+0x56c>
 8005454:	2301      	movs	r3, #1
 8005456:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800545e:	fa93 f3a3 	rbit	r3, r3
 8005462:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8005466:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800546a:	fab3 f383 	clz	r3, r3
 800546e:	b2db      	uxtb	r3, r3
 8005470:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005474:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	461a      	mov	r2, r3
 800547c:	2301      	movs	r3, #1
 800547e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005480:	f7fd f836 	bl	80024f0 <HAL_GetTick>
 8005484:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005488:	e00a      	b.n	80054a0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800548a:	f7fd f831 	bl	80024f0 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d902      	bls.n	80054a0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	f000 bde2 	b.w	8006064 <HAL_RCC_OscConfig+0x106c>
 80054a0:	2302      	movs	r3, #2
 80054a2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80054aa:	fa93 f3a3 	rbit	r3, r3
 80054ae:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80054b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054b6:	fab3 f383 	clz	r3, r3
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	095b      	lsrs	r3, r3, #5
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	f043 0301 	orr.w	r3, r3, #1
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d102      	bne.n	80054d0 <HAL_RCC_OscConfig+0x4d8>
 80054ca:	4b45      	ldr	r3, [pc, #276]	@ (80055e0 <HAL_RCC_OscConfig+0x5e8>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	e013      	b.n	80054f8 <HAL_RCC_OscConfig+0x500>
 80054d0:	2302      	movs	r3, #2
 80054d2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80054da:	fa93 f3a3 	rbit	r3, r3
 80054de:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80054e2:	2302      	movs	r3, #2
 80054e4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80054e8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80054ec:	fa93 f3a3 	rbit	r3, r3
 80054f0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80054f4:	4b3a      	ldr	r3, [pc, #232]	@ (80055e0 <HAL_RCC_OscConfig+0x5e8>)
 80054f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f8:	2202      	movs	r2, #2
 80054fa:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80054fe:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8005502:	fa92 f2a2 	rbit	r2, r2
 8005506:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800550a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800550e:	fab2 f282 	clz	r2, r2
 8005512:	b2d2      	uxtb	r2, r2
 8005514:	f042 0220 	orr.w	r2, r2, #32
 8005518:	b2d2      	uxtb	r2, r2
 800551a:	f002 021f 	and.w	r2, r2, #31
 800551e:	2101      	movs	r1, #1
 8005520:	fa01 f202 	lsl.w	r2, r1, r2
 8005524:	4013      	ands	r3, r2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0af      	beq.n	800548a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800552a:	4b2d      	ldr	r3, [pc, #180]	@ (80055e0 <HAL_RCC_OscConfig+0x5e8>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005536:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	21f8      	movs	r1, #248	@ 0xf8
 8005540:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005544:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8005548:	fa91 f1a1 	rbit	r1, r1
 800554c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8005550:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8005554:	fab1 f181 	clz	r1, r1
 8005558:	b2c9      	uxtb	r1, r1
 800555a:	408b      	lsls	r3, r1
 800555c:	4920      	ldr	r1, [pc, #128]	@ (80055e0 <HAL_RCC_OscConfig+0x5e8>)
 800555e:	4313      	orrs	r3, r2
 8005560:	600b      	str	r3, [r1, #0]
 8005562:	e06c      	b.n	800563e <HAL_RCC_OscConfig+0x646>
 8005564:	2301      	movs	r3, #1
 8005566:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800556a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800556e:	fa93 f3a3 	rbit	r3, r3
 8005572:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8005576:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800557a:	fab3 f383 	clz	r3, r3
 800557e:	b2db      	uxtb	r3, r3
 8005580:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005584:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	461a      	mov	r2, r3
 800558c:	2300      	movs	r3, #0
 800558e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005590:	f7fc ffae 	bl	80024f0 <HAL_GetTick>
 8005594:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005598:	e00a      	b.n	80055b0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800559a:	f7fc ffa9 	bl	80024f0 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d902      	bls.n	80055b0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	f000 bd5a 	b.w	8006064 <HAL_RCC_OscConfig+0x106c>
 80055b0:	2302      	movs	r3, #2
 80055b2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80055ba:	fa93 f3a3 	rbit	r3, r3
 80055be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80055c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055c6:	fab3 f383 	clz	r3, r3
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	095b      	lsrs	r3, r3, #5
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	f043 0301 	orr.w	r3, r3, #1
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d104      	bne.n	80055e4 <HAL_RCC_OscConfig+0x5ec>
 80055da:	4b01      	ldr	r3, [pc, #4]	@ (80055e0 <HAL_RCC_OscConfig+0x5e8>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	e015      	b.n	800560c <HAL_RCC_OscConfig+0x614>
 80055e0:	40021000 	.word	0x40021000
 80055e4:	2302      	movs	r3, #2
 80055e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80055ee:	fa93 f3a3 	rbit	r3, r3
 80055f2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80055f6:	2302      	movs	r3, #2
 80055f8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80055fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005600:	fa93 f3a3 	rbit	r3, r3
 8005604:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005608:	4bc8      	ldr	r3, [pc, #800]	@ (800592c <HAL_RCC_OscConfig+0x934>)
 800560a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560c:	2202      	movs	r2, #2
 800560e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8005612:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005616:	fa92 f2a2 	rbit	r2, r2
 800561a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800561e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8005622:	fab2 f282 	clz	r2, r2
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	f042 0220 	orr.w	r2, r2, #32
 800562c:	b2d2      	uxtb	r2, r2
 800562e:	f002 021f 	and.w	r2, r2, #31
 8005632:	2101      	movs	r1, #1
 8005634:	fa01 f202 	lsl.w	r2, r1, r2
 8005638:	4013      	ands	r3, r2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1ad      	bne.n	800559a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800563e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005642:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0308 	and.w	r3, r3, #8
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 8110 	beq.w	8005874 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005658:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d079      	beq.n	8005758 <HAL_RCC_OscConfig+0x760>
 8005664:	2301      	movs	r3, #1
 8005666:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800566a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800566e:	fa93 f3a3 	rbit	r3, r3
 8005672:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8005676:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800567a:	fab3 f383 	clz	r3, r3
 800567e:	b2db      	uxtb	r3, r3
 8005680:	461a      	mov	r2, r3
 8005682:	4bab      	ldr	r3, [pc, #684]	@ (8005930 <HAL_RCC_OscConfig+0x938>)
 8005684:	4413      	add	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	461a      	mov	r2, r3
 800568a:	2301      	movs	r3, #1
 800568c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800568e:	f7fc ff2f 	bl	80024f0 <HAL_GetTick>
 8005692:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005696:	e00a      	b.n	80056ae <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005698:	f7fc ff2a 	bl	80024f0 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d902      	bls.n	80056ae <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	f000 bcdb 	b.w	8006064 <HAL_RCC_OscConfig+0x106c>
 80056ae:	2302      	movs	r3, #2
 80056b0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80056b8:	fa93 f3a3 	rbit	r3, r3
 80056bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80056c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056c4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80056c8:	2202      	movs	r2, #2
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056d0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	fa93 f2a3 	rbit	r2, r3
 80056da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056ec:	2202      	movs	r2, #2
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	fa93 f2a3 	rbit	r2, r3
 80056fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005702:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005706:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005708:	4b88      	ldr	r3, [pc, #544]	@ (800592c <HAL_RCC_OscConfig+0x934>)
 800570a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800570c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005710:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005714:	2102      	movs	r1, #2
 8005716:	6019      	str	r1, [r3, #0]
 8005718:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800571c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	fa93 f1a3 	rbit	r1, r3
 8005726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800572a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800572e:	6019      	str	r1, [r3, #0]
  return result;
 8005730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005734:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	fab3 f383 	clz	r3, r3
 800573e:	b2db      	uxtb	r3, r3
 8005740:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005744:	b2db      	uxtb	r3, r3
 8005746:	f003 031f 	and.w	r3, r3, #31
 800574a:	2101      	movs	r1, #1
 800574c:	fa01 f303 	lsl.w	r3, r1, r3
 8005750:	4013      	ands	r3, r2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0a0      	beq.n	8005698 <HAL_RCC_OscConfig+0x6a0>
 8005756:	e08d      	b.n	8005874 <HAL_RCC_OscConfig+0x87c>
 8005758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800575c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005760:	2201      	movs	r2, #1
 8005762:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005764:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005768:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	fa93 f2a3 	rbit	r2, r3
 8005772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005776:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800577a:	601a      	str	r2, [r3, #0]
  return result;
 800577c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005780:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005784:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005786:	fab3 f383 	clz	r3, r3
 800578a:	b2db      	uxtb	r3, r3
 800578c:	461a      	mov	r2, r3
 800578e:	4b68      	ldr	r3, [pc, #416]	@ (8005930 <HAL_RCC_OscConfig+0x938>)
 8005790:	4413      	add	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	461a      	mov	r2, r3
 8005796:	2300      	movs	r3, #0
 8005798:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800579a:	f7fc fea9 	bl	80024f0 <HAL_GetTick>
 800579e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057a2:	e00a      	b.n	80057ba <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057a4:	f7fc fea4 	bl	80024f0 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d902      	bls.n	80057ba <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	f000 bc55 	b.w	8006064 <HAL_RCC_OscConfig+0x106c>
 80057ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057be:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80057c2:	2202      	movs	r2, #2
 80057c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057ca:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	fa93 f2a3 	rbit	r2, r3
 80057d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057d8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80057dc:	601a      	str	r2, [r3, #0]
 80057de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057e2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80057e6:	2202      	movs	r2, #2
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057ee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	fa93 f2a3 	rbit	r2, r3
 80057f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005806:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800580a:	2202      	movs	r2, #2
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005812:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	fa93 f2a3 	rbit	r2, r3
 800581c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005820:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005824:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005826:	4b41      	ldr	r3, [pc, #260]	@ (800592c <HAL_RCC_OscConfig+0x934>)
 8005828:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800582a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800582e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005832:	2102      	movs	r1, #2
 8005834:	6019      	str	r1, [r3, #0]
 8005836:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800583a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	fa93 f1a3 	rbit	r1, r3
 8005844:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005848:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800584c:	6019      	str	r1, [r3, #0]
  return result;
 800584e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005852:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	fab3 f383 	clz	r3, r3
 800585c:	b2db      	uxtb	r3, r3
 800585e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005862:	b2db      	uxtb	r3, r3
 8005864:	f003 031f 	and.w	r3, r3, #31
 8005868:	2101      	movs	r1, #1
 800586a:	fa01 f303 	lsl.w	r3, r1, r3
 800586e:	4013      	ands	r3, r2
 8005870:	2b00      	cmp	r3, #0
 8005872:	d197      	bne.n	80057a4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005878:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 81a1 	beq.w	8005bcc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800588a:	2300      	movs	r3, #0
 800588c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005890:	4b26      	ldr	r3, [pc, #152]	@ (800592c <HAL_RCC_OscConfig+0x934>)
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d116      	bne.n	80058ca <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800589c:	4b23      	ldr	r3, [pc, #140]	@ (800592c <HAL_RCC_OscConfig+0x934>)
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	4a22      	ldr	r2, [pc, #136]	@ (800592c <HAL_RCC_OscConfig+0x934>)
 80058a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058a6:	61d3      	str	r3, [r2, #28]
 80058a8:	4b20      	ldr	r3, [pc, #128]	@ (800592c <HAL_RCC_OscConfig+0x934>)
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80058b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058b4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058be:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80058c2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80058c4:	2301      	movs	r3, #1
 80058c6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005934 <HAL_RCC_OscConfig+0x93c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d11a      	bne.n	800590c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058d6:	4b17      	ldr	r3, [pc, #92]	@ (8005934 <HAL_RCC_OscConfig+0x93c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a16      	ldr	r2, [pc, #88]	@ (8005934 <HAL_RCC_OscConfig+0x93c>)
 80058dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058e2:	f7fc fe05 	bl	80024f0 <HAL_GetTick>
 80058e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ea:	e009      	b.n	8005900 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058ec:	f7fc fe00 	bl	80024f0 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	2b64      	cmp	r3, #100	@ 0x64
 80058fa:	d901      	bls.n	8005900 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e3b1      	b.n	8006064 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005900:	4b0c      	ldr	r3, [pc, #48]	@ (8005934 <HAL_RCC_OscConfig+0x93c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005908:	2b00      	cmp	r3, #0
 800590a:	d0ef      	beq.n	80058ec <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800590c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005910:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d10d      	bne.n	8005938 <HAL_RCC_OscConfig+0x940>
 800591c:	4b03      	ldr	r3, [pc, #12]	@ (800592c <HAL_RCC_OscConfig+0x934>)
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	4a02      	ldr	r2, [pc, #8]	@ (800592c <HAL_RCC_OscConfig+0x934>)
 8005922:	f043 0301 	orr.w	r3, r3, #1
 8005926:	6213      	str	r3, [r2, #32]
 8005928:	e03c      	b.n	80059a4 <HAL_RCC_OscConfig+0x9ac>
 800592a:	bf00      	nop
 800592c:	40021000 	.word	0x40021000
 8005930:	10908120 	.word	0x10908120
 8005934:	40007000 	.word	0x40007000
 8005938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800593c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10c      	bne.n	8005962 <HAL_RCC_OscConfig+0x96a>
 8005948:	4bc1      	ldr	r3, [pc, #772]	@ (8005c50 <HAL_RCC_OscConfig+0xc58>)
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	4ac0      	ldr	r2, [pc, #768]	@ (8005c50 <HAL_RCC_OscConfig+0xc58>)
 800594e:	f023 0301 	bic.w	r3, r3, #1
 8005952:	6213      	str	r3, [r2, #32]
 8005954:	4bbe      	ldr	r3, [pc, #760]	@ (8005c50 <HAL_RCC_OscConfig+0xc58>)
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	4abd      	ldr	r2, [pc, #756]	@ (8005c50 <HAL_RCC_OscConfig+0xc58>)
 800595a:	f023 0304 	bic.w	r3, r3, #4
 800595e:	6213      	str	r3, [r2, #32]
 8005960:	e020      	b.n	80059a4 <HAL_RCC_OscConfig+0x9ac>
 8005962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005966:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	2b05      	cmp	r3, #5
 8005970:	d10c      	bne.n	800598c <HAL_RCC_OscConfig+0x994>
 8005972:	4bb7      	ldr	r3, [pc, #732]	@ (8005c50 <HAL_RCC_OscConfig+0xc58>)
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	4ab6      	ldr	r2, [pc, #728]	@ (8005c50 <HAL_RCC_OscConfig+0xc58>)
 8005978:	f043 0304 	orr.w	r3, r3, #4
 800597c:	6213      	str	r3, [r2, #32]
 800597e:	4bb4      	ldr	r3, [pc, #720]	@ (8005c50 <HAL_RCC_OscConfig+0xc58>)
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	4ab3      	ldr	r2, [pc, #716]	@ (8005c50 <HAL_RCC_OscConfig+0xc58>)
 8005984:	f043 0301 	orr.w	r3, r3, #1
 8005988:	6213      	str	r3, [r2, #32]
 800598a:	e00b      	b.n	80059a4 <HAL_RCC_OscConfig+0x9ac>
 800598c:	4bb0      	ldr	r3, [pc, #704]	@ (8005c50 <HAL_RCC_OscConfig+0xc58>)
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	4aaf      	ldr	r2, [pc, #700]	@ (8005c50 <HAL_RCC_OscConfig+0xc58>)
 8005992:	f023 0301 	bic.w	r3, r3, #1
 8005996:	6213      	str	r3, [r2, #32]
 8005998:	4bad      	ldr	r3, [pc, #692]	@ (8005c50 <HAL_RCC_OscConfig+0xc58>)
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	4aac      	ldr	r2, [pc, #688]	@ (8005c50 <HAL_RCC_OscConfig+0xc58>)
 800599e:	f023 0304 	bic.w	r3, r3, #4
 80059a2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 8081 	beq.w	8005ab8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059b6:	f7fc fd9b 	bl	80024f0 <HAL_GetTick>
 80059ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059be:	e00b      	b.n	80059d8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059c0:	f7fc fd96 	bl	80024f0 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e345      	b.n	8006064 <HAL_RCC_OscConfig+0x106c>
 80059d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059dc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80059e0:	2202      	movs	r2, #2
 80059e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059e8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	fa93 f2a3 	rbit	r2, r3
 80059f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059f6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a00:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005a04:	2202      	movs	r2, #2
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a0c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	fa93 f2a3 	rbit	r2, r3
 8005a16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a1a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005a1e:	601a      	str	r2, [r3, #0]
  return result;
 8005a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a24:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005a28:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a2a:	fab3 f383 	clz	r3, r3
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	f043 0302 	orr.w	r3, r3, #2
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d102      	bne.n	8005a44 <HAL_RCC_OscConfig+0xa4c>
 8005a3e:	4b84      	ldr	r3, [pc, #528]	@ (8005c50 <HAL_RCC_OscConfig+0xc58>)
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	e013      	b.n	8005a6c <HAL_RCC_OscConfig+0xa74>
 8005a44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a48:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a54:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	fa93 f2a3 	rbit	r2, r3
 8005a5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a62:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	4b79      	ldr	r3, [pc, #484]	@ (8005c50 <HAL_RCC_OscConfig+0xc58>)
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005a70:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8005a74:	2102      	movs	r1, #2
 8005a76:	6011      	str	r1, [r2, #0]
 8005a78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005a7c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8005a80:	6812      	ldr	r2, [r2, #0]
 8005a82:	fa92 f1a2 	rbit	r1, r2
 8005a86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005a8a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005a8e:	6011      	str	r1, [r2, #0]
  return result;
 8005a90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005a94:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005a98:	6812      	ldr	r2, [r2, #0]
 8005a9a:	fab2 f282 	clz	r2, r2
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005aa4:	b2d2      	uxtb	r2, r2
 8005aa6:	f002 021f 	and.w	r2, r2, #31
 8005aaa:	2101      	movs	r1, #1
 8005aac:	fa01 f202 	lsl.w	r2, r1, r2
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d084      	beq.n	80059c0 <HAL_RCC_OscConfig+0x9c8>
 8005ab6:	e07f      	b.n	8005bb8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ab8:	f7fc fd1a 	bl	80024f0 <HAL_GetTick>
 8005abc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ac0:	e00b      	b.n	8005ada <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ac2:	f7fc fd15 	bl	80024f0 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e2c4      	b.n	8006064 <HAL_RCC_OscConfig+0x106c>
 8005ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ade:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005aea:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	fa93 f2a3 	rbit	r2, r3
 8005af4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005af8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b02:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8005b06:	2202      	movs	r2, #2
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b0e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	fa93 f2a3 	rbit	r2, r3
 8005b18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b1c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005b20:	601a      	str	r2, [r3, #0]
  return result;
 8005b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b26:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005b2a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b2c:	fab3 f383 	clz	r3, r3
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	095b      	lsrs	r3, r3, #5
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	f043 0302 	orr.w	r3, r3, #2
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d102      	bne.n	8005b46 <HAL_RCC_OscConfig+0xb4e>
 8005b40:	4b43      	ldr	r3, [pc, #268]	@ (8005c50 <HAL_RCC_OscConfig+0xc58>)
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	e013      	b.n	8005b6e <HAL_RCC_OscConfig+0xb76>
 8005b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b4a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005b4e:	2202      	movs	r2, #2
 8005b50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b56:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	fa93 f2a3 	rbit	r2, r3
 8005b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b64:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	4b39      	ldr	r3, [pc, #228]	@ (8005c50 <HAL_RCC_OscConfig+0xc58>)
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005b72:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8005b76:	2102      	movs	r1, #2
 8005b78:	6011      	str	r1, [r2, #0]
 8005b7a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005b7e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8005b82:	6812      	ldr	r2, [r2, #0]
 8005b84:	fa92 f1a2 	rbit	r1, r2
 8005b88:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005b8c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005b90:	6011      	str	r1, [r2, #0]
  return result;
 8005b92:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005b96:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005b9a:	6812      	ldr	r2, [r2, #0]
 8005b9c:	fab2 f282 	clz	r2, r2
 8005ba0:	b2d2      	uxtb	r2, r2
 8005ba2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ba6:	b2d2      	uxtb	r2, r2
 8005ba8:	f002 021f 	and.w	r2, r2, #31
 8005bac:	2101      	movs	r1, #1
 8005bae:	fa01 f202 	lsl.w	r2, r1, r2
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d184      	bne.n	8005ac2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005bb8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d105      	bne.n	8005bcc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bc0:	4b23      	ldr	r3, [pc, #140]	@ (8005c50 <HAL_RCC_OscConfig+0xc58>)
 8005bc2:	69db      	ldr	r3, [r3, #28]
 8005bc4:	4a22      	ldr	r2, [pc, #136]	@ (8005c50 <HAL_RCC_OscConfig+0xc58>)
 8005bc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005bd0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	69db      	ldr	r3, [r3, #28]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 8242 	beq.w	8006062 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bde:	4b1c      	ldr	r3, [pc, #112]	@ (8005c50 <HAL_RCC_OscConfig+0xc58>)
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f003 030c 	and.w	r3, r3, #12
 8005be6:	2b08      	cmp	r3, #8
 8005be8:	f000 8213 	beq.w	8006012 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005bf0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	f040 8162 	bne.w	8005ec2 <HAL_RCC_OscConfig+0xeca>
 8005bfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c02:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005c06:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c10:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	fa93 f2a3 	rbit	r2, r3
 8005c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c1e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005c22:	601a      	str	r2, [r3, #0]
  return result;
 8005c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c28:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005c2c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c2e:	fab3 f383 	clz	r3, r3
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005c38:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	461a      	mov	r2, r3
 8005c40:	2300      	movs	r3, #0
 8005c42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c44:	f7fc fc54 	bl	80024f0 <HAL_GetTick>
 8005c48:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c4c:	e00c      	b.n	8005c68 <HAL_RCC_OscConfig+0xc70>
 8005c4e:	bf00      	nop
 8005c50:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c54:	f7fc fc4c 	bl	80024f0 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d901      	bls.n	8005c68 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e1fd      	b.n	8006064 <HAL_RCC_OscConfig+0x106c>
 8005c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c6c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005c70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005c74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c7a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	fa93 f2a3 	rbit	r2, r3
 8005c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c88:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005c8c:	601a      	str	r2, [r3, #0]
  return result;
 8005c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c92:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005c96:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c98:	fab3 f383 	clz	r3, r3
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	095b      	lsrs	r3, r3, #5
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	f043 0301 	orr.w	r3, r3, #1
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d102      	bne.n	8005cb2 <HAL_RCC_OscConfig+0xcba>
 8005cac:	4bb0      	ldr	r3, [pc, #704]	@ (8005f70 <HAL_RCC_OscConfig+0xf78>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	e027      	b.n	8005d02 <HAL_RCC_OscConfig+0xd0a>
 8005cb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005cb6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005cba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005cbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005cc4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	fa93 f2a3 	rbit	r2, r3
 8005cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005cd2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005cd6:	601a      	str	r2, [r3, #0]
 8005cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005cdc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8005ce0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005cea:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	fa93 f2a3 	rbit	r2, r3
 8005cf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005cf8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	4b9c      	ldr	r3, [pc, #624]	@ (8005f70 <HAL_RCC_OscConfig+0xf78>)
 8005d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d02:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005d06:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8005d0a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005d0e:	6011      	str	r1, [r2, #0]
 8005d10:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005d14:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8005d18:	6812      	ldr	r2, [r2, #0]
 8005d1a:	fa92 f1a2 	rbit	r1, r2
 8005d1e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005d22:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005d26:	6011      	str	r1, [r2, #0]
  return result;
 8005d28:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005d2c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005d30:	6812      	ldr	r2, [r2, #0]
 8005d32:	fab2 f282 	clz	r2, r2
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	f042 0220 	orr.w	r2, r2, #32
 8005d3c:	b2d2      	uxtb	r2, r2
 8005d3e:	f002 021f 	and.w	r2, r2, #31
 8005d42:	2101      	movs	r1, #1
 8005d44:	fa01 f202 	lsl.w	r2, r1, r2
 8005d48:	4013      	ands	r3, r2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d182      	bne.n	8005c54 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d4e:	4b88      	ldr	r3, [pc, #544]	@ (8005f70 <HAL_RCC_OscConfig+0xf78>)
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005d56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005d62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	430b      	orrs	r3, r1
 8005d70:	497f      	ldr	r1, [pc, #508]	@ (8005f70 <HAL_RCC_OscConfig+0xf78>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	604b      	str	r3, [r1, #4]
 8005d76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d7a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005d7e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005d82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d88:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	fa93 f2a3 	rbit	r2, r3
 8005d92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d96:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005d9a:	601a      	str	r2, [r3, #0]
  return result;
 8005d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005da0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005da4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005da6:	fab3 f383 	clz	r3, r3
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005db0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	461a      	mov	r2, r3
 8005db8:	2301      	movs	r3, #1
 8005dba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dbc:	f7fc fb98 	bl	80024f0 <HAL_GetTick>
 8005dc0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005dc4:	e009      	b.n	8005dda <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dc6:	f7fc fb93 	bl	80024f0 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e144      	b.n	8006064 <HAL_RCC_OscConfig+0x106c>
 8005dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005dde:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8005de2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005de6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005dec:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	fa93 f2a3 	rbit	r2, r3
 8005df6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005dfa:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005dfe:	601a      	str	r2, [r3, #0]
  return result;
 8005e00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e04:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005e08:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e0a:	fab3 f383 	clz	r3, r3
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	095b      	lsrs	r3, r3, #5
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	f043 0301 	orr.w	r3, r3, #1
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d102      	bne.n	8005e24 <HAL_RCC_OscConfig+0xe2c>
 8005e1e:	4b54      	ldr	r3, [pc, #336]	@ (8005f70 <HAL_RCC_OscConfig+0xf78>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	e027      	b.n	8005e74 <HAL_RCC_OscConfig+0xe7c>
 8005e24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e28:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005e2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005e30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e36:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	fa93 f2a3 	rbit	r2, r3
 8005e40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e44:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e4e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005e52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e5c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	fa93 f2a3 	rbit	r2, r3
 8005e66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e6a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	4b3f      	ldr	r3, [pc, #252]	@ (8005f70 <HAL_RCC_OscConfig+0xf78>)
 8005e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005e78:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8005e7c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005e80:	6011      	str	r1, [r2, #0]
 8005e82:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005e86:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8005e8a:	6812      	ldr	r2, [r2, #0]
 8005e8c:	fa92 f1a2 	rbit	r1, r2
 8005e90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005e94:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005e98:	6011      	str	r1, [r2, #0]
  return result;
 8005e9a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005e9e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005ea2:	6812      	ldr	r2, [r2, #0]
 8005ea4:	fab2 f282 	clz	r2, r2
 8005ea8:	b2d2      	uxtb	r2, r2
 8005eaa:	f042 0220 	orr.w	r2, r2, #32
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	f002 021f 	and.w	r2, r2, #31
 8005eb4:	2101      	movs	r1, #1
 8005eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8005eba:	4013      	ands	r3, r2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d082      	beq.n	8005dc6 <HAL_RCC_OscConfig+0xdce>
 8005ec0:	e0cf      	b.n	8006062 <HAL_RCC_OscConfig+0x106a>
 8005ec2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ec6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005eca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005ece:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ed4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	fa93 f2a3 	rbit	r2, r3
 8005ede:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ee2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005ee6:	601a      	str	r2, [r3, #0]
  return result;
 8005ee8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005eec:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005ef0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ef2:	fab3 f383 	clz	r3, r3
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005efc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	461a      	mov	r2, r3
 8005f04:	2300      	movs	r3, #0
 8005f06:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f08:	f7fc faf2 	bl	80024f0 <HAL_GetTick>
 8005f0c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f10:	e009      	b.n	8005f26 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f12:	f7fc faed 	bl	80024f0 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e09e      	b.n	8006064 <HAL_RCC_OscConfig+0x106c>
 8005f26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f2a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005f2e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005f32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f38:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	fa93 f2a3 	rbit	r2, r3
 8005f42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f46:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005f4a:	601a      	str	r2, [r3, #0]
  return result;
 8005f4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f50:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005f54:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f56:	fab3 f383 	clz	r3, r3
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	095b      	lsrs	r3, r3, #5
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	f043 0301 	orr.w	r3, r3, #1
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d104      	bne.n	8005f74 <HAL_RCC_OscConfig+0xf7c>
 8005f6a:	4b01      	ldr	r3, [pc, #4]	@ (8005f70 <HAL_RCC_OscConfig+0xf78>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	e029      	b.n	8005fc4 <HAL_RCC_OscConfig+0xfcc>
 8005f70:	40021000 	.word	0x40021000
 8005f74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f78:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005f7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005f80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f86:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	fa93 f2a3 	rbit	r2, r3
 8005f90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f94:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8005f98:	601a      	str	r2, [r3, #0]
 8005f9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f9e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005fa2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005fac:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	fa93 f2a3 	rbit	r2, r3
 8005fb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005fba:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8006070 <HAL_RCC_OscConfig+0x1078>)
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005fc8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005fcc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005fd0:	6011      	str	r1, [r2, #0]
 8005fd2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005fd6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005fda:	6812      	ldr	r2, [r2, #0]
 8005fdc:	fa92 f1a2 	rbit	r1, r2
 8005fe0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005fe4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005fe8:	6011      	str	r1, [r2, #0]
  return result;
 8005fea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005fee:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005ff2:	6812      	ldr	r2, [r2, #0]
 8005ff4:	fab2 f282 	clz	r2, r2
 8005ff8:	b2d2      	uxtb	r2, r2
 8005ffa:	f042 0220 	orr.w	r2, r2, #32
 8005ffe:	b2d2      	uxtb	r2, r2
 8006000:	f002 021f 	and.w	r2, r2, #31
 8006004:	2101      	movs	r1, #1
 8006006:	fa01 f202 	lsl.w	r2, r1, r2
 800600a:	4013      	ands	r3, r2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d180      	bne.n	8005f12 <HAL_RCC_OscConfig+0xf1a>
 8006010:	e027      	b.n	8006062 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006016:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d101      	bne.n	8006026 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e01e      	b.n	8006064 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006026:	4b12      	ldr	r3, [pc, #72]	@ (8006070 <HAL_RCC_OscConfig+0x1078>)
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800602e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006032:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006036:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800603a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	429a      	cmp	r2, r3
 8006044:	d10b      	bne.n	800605e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006046:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800604a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800604e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006052:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800605a:	429a      	cmp	r2, r3
 800605c:	d001      	beq.n	8006062 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e000      	b.n	8006064 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	40021000 	.word	0x40021000

08006074 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b09e      	sub	sp, #120	@ 0x78
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800607e:	2300      	movs	r3, #0
 8006080:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e162      	b.n	8006352 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800608c:	4b90      	ldr	r3, [pc, #576]	@ (80062d0 <HAL_RCC_ClockConfig+0x25c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0307 	and.w	r3, r3, #7
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d910      	bls.n	80060bc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800609a:	4b8d      	ldr	r3, [pc, #564]	@ (80062d0 <HAL_RCC_ClockConfig+0x25c>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f023 0207 	bic.w	r2, r3, #7
 80060a2:	498b      	ldr	r1, [pc, #556]	@ (80062d0 <HAL_RCC_ClockConfig+0x25c>)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060aa:	4b89      	ldr	r3, [pc, #548]	@ (80062d0 <HAL_RCC_ClockConfig+0x25c>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0307 	and.w	r3, r3, #7
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d001      	beq.n	80060bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e14a      	b.n	8006352 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0302 	and.w	r3, r3, #2
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d008      	beq.n	80060da <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060c8:	4b82      	ldr	r3, [pc, #520]	@ (80062d4 <HAL_RCC_ClockConfig+0x260>)
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	497f      	ldr	r1, [pc, #508]	@ (80062d4 <HAL_RCC_ClockConfig+0x260>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 80dc 	beq.w	80062a0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d13c      	bne.n	800616a <HAL_RCC_ClockConfig+0xf6>
 80060f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80060f4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060f8:	fa93 f3a3 	rbit	r3, r3
 80060fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80060fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006100:	fab3 f383 	clz	r3, r3
 8006104:	b2db      	uxtb	r3, r3
 8006106:	095b      	lsrs	r3, r3, #5
 8006108:	b2db      	uxtb	r3, r3
 800610a:	f043 0301 	orr.w	r3, r3, #1
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b01      	cmp	r3, #1
 8006112:	d102      	bne.n	800611a <HAL_RCC_ClockConfig+0xa6>
 8006114:	4b6f      	ldr	r3, [pc, #444]	@ (80062d4 <HAL_RCC_ClockConfig+0x260>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	e00f      	b.n	800613a <HAL_RCC_ClockConfig+0xc6>
 800611a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800611e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006120:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006122:	fa93 f3a3 	rbit	r3, r3
 8006126:	667b      	str	r3, [r7, #100]	@ 0x64
 8006128:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800612c:	663b      	str	r3, [r7, #96]	@ 0x60
 800612e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006130:	fa93 f3a3 	rbit	r3, r3
 8006134:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006136:	4b67      	ldr	r3, [pc, #412]	@ (80062d4 <HAL_RCC_ClockConfig+0x260>)
 8006138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800613e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006140:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006142:	fa92 f2a2 	rbit	r2, r2
 8006146:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8006148:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800614a:	fab2 f282 	clz	r2, r2
 800614e:	b2d2      	uxtb	r2, r2
 8006150:	f042 0220 	orr.w	r2, r2, #32
 8006154:	b2d2      	uxtb	r2, r2
 8006156:	f002 021f 	and.w	r2, r2, #31
 800615a:	2101      	movs	r1, #1
 800615c:	fa01 f202 	lsl.w	r2, r1, r2
 8006160:	4013      	ands	r3, r2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d17b      	bne.n	800625e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e0f3      	b.n	8006352 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	2b02      	cmp	r3, #2
 8006170:	d13c      	bne.n	80061ec <HAL_RCC_ClockConfig+0x178>
 8006172:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006176:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006178:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800617a:	fa93 f3a3 	rbit	r3, r3
 800617e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006180:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006182:	fab3 f383 	clz	r3, r3
 8006186:	b2db      	uxtb	r3, r3
 8006188:	095b      	lsrs	r3, r3, #5
 800618a:	b2db      	uxtb	r3, r3
 800618c:	f043 0301 	orr.w	r3, r3, #1
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b01      	cmp	r3, #1
 8006194:	d102      	bne.n	800619c <HAL_RCC_ClockConfig+0x128>
 8006196:	4b4f      	ldr	r3, [pc, #316]	@ (80062d4 <HAL_RCC_ClockConfig+0x260>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	e00f      	b.n	80061bc <HAL_RCC_ClockConfig+0x148>
 800619c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80061a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061a4:	fa93 f3a3 	rbit	r3, r3
 80061a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80061aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80061ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80061b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061b2:	fa93 f3a3 	rbit	r3, r3
 80061b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061b8:	4b46      	ldr	r3, [pc, #280]	@ (80062d4 <HAL_RCC_ClockConfig+0x260>)
 80061ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80061c0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80061c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80061c4:	fa92 f2a2 	rbit	r2, r2
 80061c8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80061ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061cc:	fab2 f282 	clz	r2, r2
 80061d0:	b2d2      	uxtb	r2, r2
 80061d2:	f042 0220 	orr.w	r2, r2, #32
 80061d6:	b2d2      	uxtb	r2, r2
 80061d8:	f002 021f 	and.w	r2, r2, #31
 80061dc:	2101      	movs	r1, #1
 80061de:	fa01 f202 	lsl.w	r2, r1, r2
 80061e2:	4013      	ands	r3, r2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d13a      	bne.n	800625e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e0b2      	b.n	8006352 <HAL_RCC_ClockConfig+0x2de>
 80061ec:	2302      	movs	r3, #2
 80061ee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f2:	fa93 f3a3 	rbit	r3, r3
 80061f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80061f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061fa:	fab3 f383 	clz	r3, r3
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	095b      	lsrs	r3, r3, #5
 8006202:	b2db      	uxtb	r3, r3
 8006204:	f043 0301 	orr.w	r3, r3, #1
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b01      	cmp	r3, #1
 800620c:	d102      	bne.n	8006214 <HAL_RCC_ClockConfig+0x1a0>
 800620e:	4b31      	ldr	r3, [pc, #196]	@ (80062d4 <HAL_RCC_ClockConfig+0x260>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	e00d      	b.n	8006230 <HAL_RCC_ClockConfig+0x1bc>
 8006214:	2302      	movs	r3, #2
 8006216:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621a:	fa93 f3a3 	rbit	r3, r3
 800621e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006220:	2302      	movs	r3, #2
 8006222:	623b      	str	r3, [r7, #32]
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	fa93 f3a3 	rbit	r3, r3
 800622a:	61fb      	str	r3, [r7, #28]
 800622c:	4b29      	ldr	r3, [pc, #164]	@ (80062d4 <HAL_RCC_ClockConfig+0x260>)
 800622e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006230:	2202      	movs	r2, #2
 8006232:	61ba      	str	r2, [r7, #24]
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	fa92 f2a2 	rbit	r2, r2
 800623a:	617a      	str	r2, [r7, #20]
  return result;
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	fab2 f282 	clz	r2, r2
 8006242:	b2d2      	uxtb	r2, r2
 8006244:	f042 0220 	orr.w	r2, r2, #32
 8006248:	b2d2      	uxtb	r2, r2
 800624a:	f002 021f 	and.w	r2, r2, #31
 800624e:	2101      	movs	r1, #1
 8006250:	fa01 f202 	lsl.w	r2, r1, r2
 8006254:	4013      	ands	r3, r2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e079      	b.n	8006352 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800625e:	4b1d      	ldr	r3, [pc, #116]	@ (80062d4 <HAL_RCC_ClockConfig+0x260>)
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f023 0203 	bic.w	r2, r3, #3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	491a      	ldr	r1, [pc, #104]	@ (80062d4 <HAL_RCC_ClockConfig+0x260>)
 800626c:	4313      	orrs	r3, r2
 800626e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006270:	f7fc f93e 	bl	80024f0 <HAL_GetTick>
 8006274:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006276:	e00a      	b.n	800628e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006278:	f7fc f93a 	bl	80024f0 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006286:	4293      	cmp	r3, r2
 8006288:	d901      	bls.n	800628e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e061      	b.n	8006352 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800628e:	4b11      	ldr	r3, [pc, #68]	@ (80062d4 <HAL_RCC_ClockConfig+0x260>)
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f003 020c 	and.w	r2, r3, #12
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	429a      	cmp	r2, r3
 800629e:	d1eb      	bne.n	8006278 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062a0:	4b0b      	ldr	r3, [pc, #44]	@ (80062d0 <HAL_RCC_ClockConfig+0x25c>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0307 	and.w	r3, r3, #7
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d214      	bcs.n	80062d8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ae:	4b08      	ldr	r3, [pc, #32]	@ (80062d0 <HAL_RCC_ClockConfig+0x25c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f023 0207 	bic.w	r2, r3, #7
 80062b6:	4906      	ldr	r1, [pc, #24]	@ (80062d0 <HAL_RCC_ClockConfig+0x25c>)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062be:	4b04      	ldr	r3, [pc, #16]	@ (80062d0 <HAL_RCC_ClockConfig+0x25c>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0307 	and.w	r3, r3, #7
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d005      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e040      	b.n	8006352 <HAL_RCC_ClockConfig+0x2de>
 80062d0:	40022000 	.word	0x40022000
 80062d4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d008      	beq.n	80062f6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062e4:	4b1d      	ldr	r3, [pc, #116]	@ (800635c <HAL_RCC_ClockConfig+0x2e8>)
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	491a      	ldr	r1, [pc, #104]	@ (800635c <HAL_RCC_ClockConfig+0x2e8>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0308 	and.w	r3, r3, #8
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d009      	beq.n	8006316 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006302:	4b16      	ldr	r3, [pc, #88]	@ (800635c <HAL_RCC_ClockConfig+0x2e8>)
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	00db      	lsls	r3, r3, #3
 8006310:	4912      	ldr	r1, [pc, #72]	@ (800635c <HAL_RCC_ClockConfig+0x2e8>)
 8006312:	4313      	orrs	r3, r2
 8006314:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006316:	f000 f829 	bl	800636c <HAL_RCC_GetSysClockFreq>
 800631a:	4601      	mov	r1, r0
 800631c:	4b0f      	ldr	r3, [pc, #60]	@ (800635c <HAL_RCC_ClockConfig+0x2e8>)
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006324:	22f0      	movs	r2, #240	@ 0xf0
 8006326:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	fa92 f2a2 	rbit	r2, r2
 800632e:	60fa      	str	r2, [r7, #12]
  return result;
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	fab2 f282 	clz	r2, r2
 8006336:	b2d2      	uxtb	r2, r2
 8006338:	40d3      	lsrs	r3, r2
 800633a:	4a09      	ldr	r2, [pc, #36]	@ (8006360 <HAL_RCC_ClockConfig+0x2ec>)
 800633c:	5cd3      	ldrb	r3, [r2, r3]
 800633e:	fa21 f303 	lsr.w	r3, r1, r3
 8006342:	4a08      	ldr	r2, [pc, #32]	@ (8006364 <HAL_RCC_ClockConfig+0x2f0>)
 8006344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006346:	4b08      	ldr	r3, [pc, #32]	@ (8006368 <HAL_RCC_ClockConfig+0x2f4>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4618      	mov	r0, r3
 800634c:	f7fc f88c 	bl	8002468 <HAL_InitTick>
  
  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3778      	adds	r7, #120	@ 0x78
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	40021000 	.word	0x40021000
 8006360:	0800f278 	.word	0x0800f278
 8006364:	20000000 	.word	0x20000000
 8006368:	20000004 	.word	0x20000004

0800636c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800636c:	b480      	push	{r7}
 800636e:	b087      	sub	sp, #28
 8006370:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	60fb      	str	r3, [r7, #12]
 8006376:	2300      	movs	r3, #0
 8006378:	60bb      	str	r3, [r7, #8]
 800637a:	2300      	movs	r3, #0
 800637c:	617b      	str	r3, [r7, #20]
 800637e:	2300      	movs	r3, #0
 8006380:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006382:	2300      	movs	r3, #0
 8006384:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8006386:	4b1e      	ldr	r3, [pc, #120]	@ (8006400 <HAL_RCC_GetSysClockFreq+0x94>)
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f003 030c 	and.w	r3, r3, #12
 8006392:	2b04      	cmp	r3, #4
 8006394:	d002      	beq.n	800639c <HAL_RCC_GetSysClockFreq+0x30>
 8006396:	2b08      	cmp	r3, #8
 8006398:	d003      	beq.n	80063a2 <HAL_RCC_GetSysClockFreq+0x36>
 800639a:	e026      	b.n	80063ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800639c:	4b19      	ldr	r3, [pc, #100]	@ (8006404 <HAL_RCC_GetSysClockFreq+0x98>)
 800639e:	613b      	str	r3, [r7, #16]
      break;
 80063a0:	e026      	b.n	80063f0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	0c9b      	lsrs	r3, r3, #18
 80063a6:	f003 030f 	and.w	r3, r3, #15
 80063aa:	4a17      	ldr	r2, [pc, #92]	@ (8006408 <HAL_RCC_GetSysClockFreq+0x9c>)
 80063ac:	5cd3      	ldrb	r3, [r2, r3]
 80063ae:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80063b0:	4b13      	ldr	r3, [pc, #76]	@ (8006400 <HAL_RCC_GetSysClockFreq+0x94>)
 80063b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b4:	f003 030f 	and.w	r3, r3, #15
 80063b8:	4a14      	ldr	r2, [pc, #80]	@ (800640c <HAL_RCC_GetSysClockFreq+0xa0>)
 80063ba:	5cd3      	ldrb	r3, [r2, r3]
 80063bc:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d008      	beq.n	80063da <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80063c8:	4a0e      	ldr	r2, [pc, #56]	@ (8006404 <HAL_RCC_GetSysClockFreq+0x98>)
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	fb02 f303 	mul.w	r3, r2, r3
 80063d6:	617b      	str	r3, [r7, #20]
 80063d8:	e004      	b.n	80063e4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a0c      	ldr	r2, [pc, #48]	@ (8006410 <HAL_RCC_GetSysClockFreq+0xa4>)
 80063de:	fb02 f303 	mul.w	r3, r2, r3
 80063e2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	613b      	str	r3, [r7, #16]
      break;
 80063e8:	e002      	b.n	80063f0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80063ea:	4b06      	ldr	r3, [pc, #24]	@ (8006404 <HAL_RCC_GetSysClockFreq+0x98>)
 80063ec:	613b      	str	r3, [r7, #16]
      break;
 80063ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063f0:	693b      	ldr	r3, [r7, #16]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	371c      	adds	r7, #28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	40021000 	.word	0x40021000
 8006404:	007a1200 	.word	0x007a1200
 8006408:	0800f290 	.word	0x0800f290
 800640c:	0800f2a0 	.word	0x0800f2a0
 8006410:	003d0900 	.word	0x003d0900

08006414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006414:	b480      	push	{r7}
 8006416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006418:	4b03      	ldr	r3, [pc, #12]	@ (8006428 <HAL_RCC_GetHCLKFreq+0x14>)
 800641a:	681b      	ldr	r3, [r3, #0]
}
 800641c:	4618      	mov	r0, r3
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	20000000 	.word	0x20000000

0800642c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006432:	f7ff ffef 	bl	8006414 <HAL_RCC_GetHCLKFreq>
 8006436:	4601      	mov	r1, r0
 8006438:	4b0b      	ldr	r3, [pc, #44]	@ (8006468 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006440:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8006444:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	fa92 f2a2 	rbit	r2, r2
 800644c:	603a      	str	r2, [r7, #0]
  return result;
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	fab2 f282 	clz	r2, r2
 8006454:	b2d2      	uxtb	r2, r2
 8006456:	40d3      	lsrs	r3, r2
 8006458:	4a04      	ldr	r2, [pc, #16]	@ (800646c <HAL_RCC_GetPCLK1Freq+0x40>)
 800645a:	5cd3      	ldrb	r3, [r2, r3]
 800645c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006460:	4618      	mov	r0, r3
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	40021000 	.word	0x40021000
 800646c:	0800f288 	.word	0x0800f288

08006470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006476:	f7ff ffcd 	bl	8006414 <HAL_RCC_GetHCLKFreq>
 800647a:	4601      	mov	r1, r0
 800647c:	4b0b      	ldr	r3, [pc, #44]	@ (80064ac <HAL_RCC_GetPCLK2Freq+0x3c>)
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8006484:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8006488:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	fa92 f2a2 	rbit	r2, r2
 8006490:	603a      	str	r2, [r7, #0]
  return result;
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	fab2 f282 	clz	r2, r2
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	40d3      	lsrs	r3, r2
 800649c:	4a04      	ldr	r2, [pc, #16]	@ (80064b0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800649e:	5cd3      	ldrb	r3, [r2, r3]
 80064a0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80064a4:	4618      	mov	r0, r3
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	40021000 	.word	0x40021000
 80064b0:	0800f288 	.word	0x0800f288

080064b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b092      	sub	sp, #72	@ 0x48
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064bc:	2300      	movs	r3, #0
 80064be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80064c4:	2300      	movs	r3, #0
 80064c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 80d4 	beq.w	8006680 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064d8:	4b4e      	ldr	r3, [pc, #312]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10e      	bne.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064e4:	4b4b      	ldr	r3, [pc, #300]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064e6:	69db      	ldr	r3, [r3, #28]
 80064e8:	4a4a      	ldr	r2, [pc, #296]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064ee:	61d3      	str	r3, [r2, #28]
 80064f0:	4b48      	ldr	r3, [pc, #288]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064f8:	60bb      	str	r3, [r7, #8]
 80064fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064fc:	2301      	movs	r3, #1
 80064fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006502:	4b45      	ldr	r3, [pc, #276]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800650a:	2b00      	cmp	r3, #0
 800650c:	d118      	bne.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800650e:	4b42      	ldr	r3, [pc, #264]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a41      	ldr	r2, [pc, #260]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006518:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800651a:	f7fb ffe9 	bl	80024f0 <HAL_GetTick>
 800651e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006520:	e008      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006522:	f7fb ffe5 	bl	80024f0 <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2b64      	cmp	r3, #100	@ 0x64
 800652e:	d901      	bls.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e169      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006534:	4b38      	ldr	r3, [pc, #224]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800653c:	2b00      	cmp	r3, #0
 800653e:	d0f0      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006540:	4b34      	ldr	r3, [pc, #208]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006548:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800654a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 8084 	beq.w	800665a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800655a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800655c:	429a      	cmp	r2, r3
 800655e:	d07c      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006560:	4b2c      	ldr	r3, [pc, #176]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006568:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800656a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800656e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006572:	fa93 f3a3 	rbit	r3, r3
 8006576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800657a:	fab3 f383 	clz	r3, r3
 800657e:	b2db      	uxtb	r3, r3
 8006580:	461a      	mov	r2, r3
 8006582:	4b26      	ldr	r3, [pc, #152]	@ (800661c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006584:	4413      	add	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	461a      	mov	r2, r3
 800658a:	2301      	movs	r3, #1
 800658c:	6013      	str	r3, [r2, #0]
 800658e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006592:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006596:	fa93 f3a3 	rbit	r3, r3
 800659a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800659c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800659e:	fab3 f383 	clz	r3, r3
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	461a      	mov	r2, r3
 80065a6:	4b1d      	ldr	r3, [pc, #116]	@ (800661c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80065a8:	4413      	add	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	461a      	mov	r2, r3
 80065ae:	2300      	movs	r3, #0
 80065b0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80065b2:	4a18      	ldr	r2, [pc, #96]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065b6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80065b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d04b      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065c2:	f7fb ff95 	bl	80024f0 <HAL_GetTick>
 80065c6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065c8:	e00a      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065ca:	f7fb ff91 	bl	80024f0 <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065d8:	4293      	cmp	r3, r2
 80065da:	d901      	bls.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e113      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80065e0:	2302      	movs	r3, #2
 80065e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e6:	fa93 f3a3 	rbit	r3, r3
 80065ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80065ec:	2302      	movs	r3, #2
 80065ee:	623b      	str	r3, [r7, #32]
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	fa93 f3a3 	rbit	r3, r3
 80065f6:	61fb      	str	r3, [r7, #28]
  return result;
 80065f8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065fa:	fab3 f383 	clz	r3, r3
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	095b      	lsrs	r3, r3, #5
 8006602:	b2db      	uxtb	r3, r3
 8006604:	f043 0302 	orr.w	r3, r3, #2
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d108      	bne.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800660e:	4b01      	ldr	r3, [pc, #4]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	e00d      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006614:	40021000 	.word	0x40021000
 8006618:	40007000 	.word	0x40007000
 800661c:	10908100 	.word	0x10908100
 8006620:	2302      	movs	r3, #2
 8006622:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	fa93 f3a3 	rbit	r3, r3
 800662a:	617b      	str	r3, [r7, #20]
 800662c:	4b78      	ldr	r3, [pc, #480]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800662e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006630:	2202      	movs	r2, #2
 8006632:	613a      	str	r2, [r7, #16]
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	fa92 f2a2 	rbit	r2, r2
 800663a:	60fa      	str	r2, [r7, #12]
  return result;
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	fab2 f282 	clz	r2, r2
 8006642:	b2d2      	uxtb	r2, r2
 8006644:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006648:	b2d2      	uxtb	r2, r2
 800664a:	f002 021f 	and.w	r2, r2, #31
 800664e:	2101      	movs	r1, #1
 8006650:	fa01 f202 	lsl.w	r2, r1, r2
 8006654:	4013      	ands	r3, r2
 8006656:	2b00      	cmp	r3, #0
 8006658:	d0b7      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800665a:	4b6d      	ldr	r3, [pc, #436]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	496a      	ldr	r1, [pc, #424]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006668:	4313      	orrs	r3, r2
 800666a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800666c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006670:	2b01      	cmp	r3, #1
 8006672:	d105      	bne.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006674:	4b66      	ldr	r3, [pc, #408]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006676:	69db      	ldr	r3, [r3, #28]
 8006678:	4a65      	ldr	r2, [pc, #404]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800667a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800667e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	2b00      	cmp	r3, #0
 800668a:	d008      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800668c:	4b60      	ldr	r3, [pc, #384]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800668e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006690:	f023 0203 	bic.w	r2, r3, #3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	495d      	ldr	r1, [pc, #372]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800669a:	4313      	orrs	r3, r2
 800669c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d008      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066aa:	4b59      	ldr	r3, [pc, #356]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	4956      	ldr	r1, [pc, #344]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d008      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066c8:	4b51      	ldr	r3, [pc, #324]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	494e      	ldr	r1, [pc, #312]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0320 	and.w	r3, r3, #32
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d008      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80066e6:	4b4a      	ldr	r3, [pc, #296]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ea:	f023 0210 	bic.w	r2, r3, #16
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	4947      	ldr	r1, [pc, #284]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d008      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006704:	4b42      	ldr	r3, [pc, #264]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006710:	493f      	ldr	r1, [pc, #252]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006712:	4313      	orrs	r3, r2
 8006714:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800671e:	2b00      	cmp	r3, #0
 8006720:	d008      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006722:	4b3b      	ldr	r3, [pc, #236]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006726:	f023 0220 	bic.w	r2, r3, #32
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	4938      	ldr	r1, [pc, #224]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006730:	4313      	orrs	r3, r2
 8006732:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0308 	and.w	r3, r3, #8
 800673c:	2b00      	cmp	r3, #0
 800673e:	d008      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006740:	4b33      	ldr	r3, [pc, #204]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006744:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	4930      	ldr	r1, [pc, #192]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800674e:	4313      	orrs	r3, r2
 8006750:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0310 	and.w	r3, r3, #16
 800675a:	2b00      	cmp	r3, #0
 800675c:	d008      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800675e:	4b2c      	ldr	r3, [pc, #176]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006762:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	4929      	ldr	r1, [pc, #164]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800676c:	4313      	orrs	r3, r2
 800676e:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006778:	2b00      	cmp	r3, #0
 800677a:	d008      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800677c:	4b24      	ldr	r3, [pc, #144]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006788:	4921      	ldr	r1, [pc, #132]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800678a:	4313      	orrs	r3, r2
 800678c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006796:	2b00      	cmp	r3, #0
 8006798:	d008      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800679a:	4b1d      	ldr	r3, [pc, #116]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800679c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a6:	491a      	ldr	r1, [pc, #104]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d008      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80067b8:	4b15      	ldr	r3, [pc, #84]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067bc:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c4:	4912      	ldr	r1, [pc, #72]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d008      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80067d6:	4b0e      	ldr	r3, [pc, #56]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e2:	490b      	ldr	r1, [pc, #44]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d008      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80067f4:	4b06      	ldr	r3, [pc, #24]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006800:	4903      	ldr	r1, [pc, #12]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006802:	4313      	orrs	r3, r2
 8006804:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3748      	adds	r7, #72	@ 0x48
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	40021000 	.word	0x40021000

08006814 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e09d      	b.n	8006962 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800682a:	2b00      	cmp	r3, #0
 800682c:	d108      	bne.n	8006840 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006836:	d009      	beq.n	800684c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	61da      	str	r2, [r3, #28]
 800683e:	e005      	b.n	800684c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d106      	bne.n	800686c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7fb f88e 	bl	8001988 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006882:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800688c:	d902      	bls.n	8006894 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800688e:	2300      	movs	r3, #0
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	e002      	b.n	800689a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006894:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006898:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80068a2:	d007      	beq.n	80068b4 <HAL_SPI_Init+0xa0>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80068ac:	d002      	beq.n	80068b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80068c4:	431a      	orrs	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	431a      	orrs	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	431a      	orrs	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	69db      	ldr	r3, [r3, #28]
 80068e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068ec:	431a      	orrs	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068f6:	ea42 0103 	orr.w	r1, r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068fe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	0c1b      	lsrs	r3, r3, #16
 8006910:	f003 0204 	and.w	r2, r3, #4
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006918:	f003 0310 	and.w	r3, r3, #16
 800691c:	431a      	orrs	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006922:	f003 0308 	and.w	r3, r3, #8
 8006926:	431a      	orrs	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006930:	ea42 0103 	orr.w	r1, r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	69da      	ldr	r2, [r3, #28]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006950:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b082      	sub	sp, #8
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e049      	b.n	8006a10 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b00      	cmp	r3, #0
 8006986:	d106      	bne.n	8006996 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7fb f85b 	bl	8001a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2202      	movs	r2, #2
 800699a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	3304      	adds	r3, #4
 80069a6:	4619      	mov	r1, r3
 80069a8:	4610      	mov	r0, r2
 80069aa:	f000 fb35 	bl	8007018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d001      	beq.n	8006a30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e04a      	b.n	8006ac6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2202      	movs	r2, #2
 8006a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f042 0201 	orr.w	r2, r2, #1
 8006a46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a21      	ldr	r2, [pc, #132]	@ (8006ad4 <HAL_TIM_Base_Start_IT+0xbc>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d018      	beq.n	8006a84 <HAL_TIM_Base_Start_IT+0x6c>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a5a:	d013      	beq.n	8006a84 <HAL_TIM_Base_Start_IT+0x6c>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a1d      	ldr	r2, [pc, #116]	@ (8006ad8 <HAL_TIM_Base_Start_IT+0xc0>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d00e      	beq.n	8006a84 <HAL_TIM_Base_Start_IT+0x6c>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8006adc <HAL_TIM_Base_Start_IT+0xc4>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d009      	beq.n	8006a84 <HAL_TIM_Base_Start_IT+0x6c>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a1a      	ldr	r2, [pc, #104]	@ (8006ae0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d004      	beq.n	8006a84 <HAL_TIM_Base_Start_IT+0x6c>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a19      	ldr	r2, [pc, #100]	@ (8006ae4 <HAL_TIM_Base_Start_IT+0xcc>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d115      	bne.n	8006ab0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689a      	ldr	r2, [r3, #8]
 8006a8a:	4b17      	ldr	r3, [pc, #92]	@ (8006ae8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2b06      	cmp	r3, #6
 8006a94:	d015      	beq.n	8006ac2 <HAL_TIM_Base_Start_IT+0xaa>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a9c:	d011      	beq.n	8006ac2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f042 0201 	orr.w	r2, r2, #1
 8006aac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aae:	e008      	b.n	8006ac2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f042 0201 	orr.w	r2, r2, #1
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	e000      	b.n	8006ac4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ac2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	40012c00 	.word	0x40012c00
 8006ad8:	40000400 	.word	0x40000400
 8006adc:	40000800 	.word	0x40000800
 8006ae0:	40013400 	.word	0x40013400
 8006ae4:	40014000 	.word	0x40014000
 8006ae8:	00010007 	.word	0x00010007

08006aec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e049      	b.n	8006b92 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d106      	bne.n	8006b18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7fa ff7a 	bl	8001a0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	3304      	adds	r3, #4
 8006b28:	4619      	mov	r1, r3
 8006b2a:	4610      	mov	r0, r2
 8006b2c:	f000 fa74 	bl	8007018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b084      	sub	sp, #16
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d020      	beq.n	8006bfe <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d01b      	beq.n	8006bfe <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f06f 0202 	mvn.w	r2, #2
 8006bce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	f003 0303 	and.w	r3, r3, #3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d003      	beq.n	8006bec <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f9f9 	bl	8006fdc <HAL_TIM_IC_CaptureCallback>
 8006bea:	e005      	b.n	8006bf8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f9eb 	bl	8006fc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f9fc 	bl	8006ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	f003 0304 	and.w	r3, r3, #4
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d020      	beq.n	8006c4a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f003 0304 	and.w	r3, r3, #4
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d01b      	beq.n	8006c4a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f06f 0204 	mvn.w	r2, #4
 8006c1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d003      	beq.n	8006c38 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 f9d3 	bl	8006fdc <HAL_TIM_IC_CaptureCallback>
 8006c36:	e005      	b.n	8006c44 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f9c5 	bl	8006fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f9d6 	bl	8006ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	f003 0308 	and.w	r3, r3, #8
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d020      	beq.n	8006c96 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f003 0308 	and.w	r3, r3, #8
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d01b      	beq.n	8006c96 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f06f 0208 	mvn.w	r2, #8
 8006c66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2204      	movs	r2, #4
 8006c6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	f003 0303 	and.w	r3, r3, #3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f9ad 	bl	8006fdc <HAL_TIM_IC_CaptureCallback>
 8006c82:	e005      	b.n	8006c90 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 f99f 	bl	8006fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f9b0 	bl	8006ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	f003 0310 	and.w	r3, r3, #16
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d020      	beq.n	8006ce2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f003 0310 	and.w	r3, r3, #16
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d01b      	beq.n	8006ce2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f06f 0210 	mvn.w	r2, #16
 8006cb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2208      	movs	r2, #8
 8006cb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	69db      	ldr	r3, [r3, #28]
 8006cc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d003      	beq.n	8006cd0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f987 	bl	8006fdc <HAL_TIM_IC_CaptureCallback>
 8006cce:	e005      	b.n	8006cdc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f979 	bl	8006fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f98a 	bl	8006ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00c      	beq.n	8006d06 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d007      	beq.n	8006d06 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f06f 0201 	mvn.w	r2, #1
 8006cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7fa fa67 	bl	80011d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00c      	beq.n	8006d2a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d007      	beq.n	8006d2a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fd73 	bl	8007810 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00c      	beq.n	8006d4e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d007      	beq.n	8006d4e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fd6b 	bl	8007824 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00c      	beq.n	8006d72 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d007      	beq.n	8006d72 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f949 	bl	8007004 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	f003 0320 	and.w	r3, r3, #32
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00c      	beq.n	8006d96 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f003 0320 	and.w	r3, r3, #32
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d007      	beq.n	8006d96 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f06f 0220 	mvn.w	r2, #32
 8006d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fd33 	bl	80077fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d96:	bf00      	nop
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
	...

08006da0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d101      	bne.n	8006dbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006dba:	2302      	movs	r3, #2
 8006dbc:	e0ff      	b.n	8006fbe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b14      	cmp	r3, #20
 8006dca:	f200 80f0 	bhi.w	8006fae <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006dce:	a201      	add	r2, pc, #4	@ (adr r2, 8006dd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd4:	08006e29 	.word	0x08006e29
 8006dd8:	08006faf 	.word	0x08006faf
 8006ddc:	08006faf 	.word	0x08006faf
 8006de0:	08006faf 	.word	0x08006faf
 8006de4:	08006e69 	.word	0x08006e69
 8006de8:	08006faf 	.word	0x08006faf
 8006dec:	08006faf 	.word	0x08006faf
 8006df0:	08006faf 	.word	0x08006faf
 8006df4:	08006eab 	.word	0x08006eab
 8006df8:	08006faf 	.word	0x08006faf
 8006dfc:	08006faf 	.word	0x08006faf
 8006e00:	08006faf 	.word	0x08006faf
 8006e04:	08006eeb 	.word	0x08006eeb
 8006e08:	08006faf 	.word	0x08006faf
 8006e0c:	08006faf 	.word	0x08006faf
 8006e10:	08006faf 	.word	0x08006faf
 8006e14:	08006f2d 	.word	0x08006f2d
 8006e18:	08006faf 	.word	0x08006faf
 8006e1c:	08006faf 	.word	0x08006faf
 8006e20:	08006faf 	.word	0x08006faf
 8006e24:	08006f6d 	.word	0x08006f6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68b9      	ldr	r1, [r7, #8]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 f98e 	bl	8007150 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699a      	ldr	r2, [r3, #24]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f042 0208 	orr.w	r2, r2, #8
 8006e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	699a      	ldr	r2, [r3, #24]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f022 0204 	bic.w	r2, r2, #4
 8006e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6999      	ldr	r1, [r3, #24]
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	691a      	ldr	r2, [r3, #16]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	619a      	str	r2, [r3, #24]
      break;
 8006e66:	e0a5      	b.n	8006fb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68b9      	ldr	r1, [r7, #8]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f000 f9fe 	bl	8007270 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	699a      	ldr	r2, [r3, #24]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	699a      	ldr	r2, [r3, #24]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6999      	ldr	r1, [r3, #24]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	021a      	lsls	r2, r3, #8
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	619a      	str	r2, [r3, #24]
      break;
 8006ea8:	e084      	b.n	8006fb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68b9      	ldr	r1, [r7, #8]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 fa67 	bl	8007384 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	69da      	ldr	r2, [r3, #28]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f042 0208 	orr.w	r2, r2, #8
 8006ec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	69da      	ldr	r2, [r3, #28]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f022 0204 	bic.w	r2, r2, #4
 8006ed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	69d9      	ldr	r1, [r3, #28]
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	691a      	ldr	r2, [r3, #16]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	430a      	orrs	r2, r1
 8006ee6:	61da      	str	r2, [r3, #28]
      break;
 8006ee8:	e064      	b.n	8006fb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68b9      	ldr	r1, [r7, #8]
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f000 facf 	bl	8007494 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	69da      	ldr	r2, [r3, #28]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	69da      	ldr	r2, [r3, #28]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	69d9      	ldr	r1, [r3, #28]
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	021a      	lsls	r2, r3, #8
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	61da      	str	r2, [r3, #28]
      break;
 8006f2a:	e043      	b.n	8006fb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68b9      	ldr	r1, [r7, #8]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 fb18 	bl	8007568 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f042 0208 	orr.w	r2, r2, #8
 8006f46:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f022 0204 	bic.w	r2, r2, #4
 8006f56:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	691a      	ldr	r2, [r3, #16]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	430a      	orrs	r2, r1
 8006f68:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006f6a:	e023      	b.n	8006fb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68b9      	ldr	r1, [r7, #8]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f000 fb5c 	bl	8007630 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f86:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f96:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	021a      	lsls	r2, r3, #8
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006fac:	e002      	b.n	8006fb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8006fb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3718      	adds	r7, #24
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop

08006fc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a42      	ldr	r2, [pc, #264]	@ (8007134 <TIM_Base_SetConfig+0x11c>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d00f      	beq.n	8007050 <TIM_Base_SetConfig+0x38>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007036:	d00b      	beq.n	8007050 <TIM_Base_SetConfig+0x38>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a3f      	ldr	r2, [pc, #252]	@ (8007138 <TIM_Base_SetConfig+0x120>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d007      	beq.n	8007050 <TIM_Base_SetConfig+0x38>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a3e      	ldr	r2, [pc, #248]	@ (800713c <TIM_Base_SetConfig+0x124>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d003      	beq.n	8007050 <TIM_Base_SetConfig+0x38>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a3d      	ldr	r2, [pc, #244]	@ (8007140 <TIM_Base_SetConfig+0x128>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d108      	bne.n	8007062 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	4313      	orrs	r3, r2
 8007060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a33      	ldr	r2, [pc, #204]	@ (8007134 <TIM_Base_SetConfig+0x11c>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d01b      	beq.n	80070a2 <TIM_Base_SetConfig+0x8a>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007070:	d017      	beq.n	80070a2 <TIM_Base_SetConfig+0x8a>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a30      	ldr	r2, [pc, #192]	@ (8007138 <TIM_Base_SetConfig+0x120>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d013      	beq.n	80070a2 <TIM_Base_SetConfig+0x8a>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a2f      	ldr	r2, [pc, #188]	@ (800713c <TIM_Base_SetConfig+0x124>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d00f      	beq.n	80070a2 <TIM_Base_SetConfig+0x8a>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a2e      	ldr	r2, [pc, #184]	@ (8007140 <TIM_Base_SetConfig+0x128>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d00b      	beq.n	80070a2 <TIM_Base_SetConfig+0x8a>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a2d      	ldr	r2, [pc, #180]	@ (8007144 <TIM_Base_SetConfig+0x12c>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d007      	beq.n	80070a2 <TIM_Base_SetConfig+0x8a>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a2c      	ldr	r2, [pc, #176]	@ (8007148 <TIM_Base_SetConfig+0x130>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d003      	beq.n	80070a2 <TIM_Base_SetConfig+0x8a>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a2b      	ldr	r2, [pc, #172]	@ (800714c <TIM_Base_SetConfig+0x134>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d108      	bne.n	80070b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	4313      	orrs	r3, r2
 80070c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	689a      	ldr	r2, [r3, #8]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a16      	ldr	r2, [pc, #88]	@ (8007134 <TIM_Base_SetConfig+0x11c>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d00f      	beq.n	8007100 <TIM_Base_SetConfig+0xe8>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a17      	ldr	r2, [pc, #92]	@ (8007140 <TIM_Base_SetConfig+0x128>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d00b      	beq.n	8007100 <TIM_Base_SetConfig+0xe8>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a16      	ldr	r2, [pc, #88]	@ (8007144 <TIM_Base_SetConfig+0x12c>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d007      	beq.n	8007100 <TIM_Base_SetConfig+0xe8>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a15      	ldr	r2, [pc, #84]	@ (8007148 <TIM_Base_SetConfig+0x130>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d003      	beq.n	8007100 <TIM_Base_SetConfig+0xe8>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a14      	ldr	r2, [pc, #80]	@ (800714c <TIM_Base_SetConfig+0x134>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d103      	bne.n	8007108 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	691a      	ldr	r2, [r3, #16]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b01      	cmp	r3, #1
 8007118:	d105      	bne.n	8007126 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	f023 0201 	bic.w	r2, r3, #1
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	611a      	str	r2, [r3, #16]
  }
}
 8007126:	bf00      	nop
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	40012c00 	.word	0x40012c00
 8007138:	40000400 	.word	0x40000400
 800713c:	40000800 	.word	0x40000800
 8007140:	40013400 	.word	0x40013400
 8007144:	40014000 	.word	0x40014000
 8007148:	40014400 	.word	0x40014400
 800714c:	40014800 	.word	0x40014800

08007150 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007150:	b480      	push	{r7}
 8007152:	b087      	sub	sp, #28
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a1b      	ldr	r3, [r3, #32]
 8007164:	f023 0201 	bic.w	r2, r3, #1
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800717e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f023 0303 	bic.w	r3, r3, #3
 800718a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	4313      	orrs	r3, r2
 8007194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f023 0302 	bic.w	r3, r3, #2
 800719c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a2c      	ldr	r2, [pc, #176]	@ (800725c <TIM_OC1_SetConfig+0x10c>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d00f      	beq.n	80071d0 <TIM_OC1_SetConfig+0x80>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a2b      	ldr	r2, [pc, #172]	@ (8007260 <TIM_OC1_SetConfig+0x110>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d00b      	beq.n	80071d0 <TIM_OC1_SetConfig+0x80>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a2a      	ldr	r2, [pc, #168]	@ (8007264 <TIM_OC1_SetConfig+0x114>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d007      	beq.n	80071d0 <TIM_OC1_SetConfig+0x80>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a29      	ldr	r2, [pc, #164]	@ (8007268 <TIM_OC1_SetConfig+0x118>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d003      	beq.n	80071d0 <TIM_OC1_SetConfig+0x80>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a28      	ldr	r2, [pc, #160]	@ (800726c <TIM_OC1_SetConfig+0x11c>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d10c      	bne.n	80071ea <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	f023 0308 	bic.w	r3, r3, #8
 80071d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	4313      	orrs	r3, r2
 80071e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f023 0304 	bic.w	r3, r3, #4
 80071e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a1b      	ldr	r2, [pc, #108]	@ (800725c <TIM_OC1_SetConfig+0x10c>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d00f      	beq.n	8007212 <TIM_OC1_SetConfig+0xc2>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a1a      	ldr	r2, [pc, #104]	@ (8007260 <TIM_OC1_SetConfig+0x110>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d00b      	beq.n	8007212 <TIM_OC1_SetConfig+0xc2>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a19      	ldr	r2, [pc, #100]	@ (8007264 <TIM_OC1_SetConfig+0x114>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d007      	beq.n	8007212 <TIM_OC1_SetConfig+0xc2>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a18      	ldr	r2, [pc, #96]	@ (8007268 <TIM_OC1_SetConfig+0x118>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d003      	beq.n	8007212 <TIM_OC1_SetConfig+0xc2>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a17      	ldr	r2, [pc, #92]	@ (800726c <TIM_OC1_SetConfig+0x11c>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d111      	bne.n	8007236 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	4313      	orrs	r3, r2
 800722a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	4313      	orrs	r3, r2
 8007234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	621a      	str	r2, [r3, #32]
}
 8007250:	bf00      	nop
 8007252:	371c      	adds	r7, #28
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr
 800725c:	40012c00 	.word	0x40012c00
 8007260:	40013400 	.word	0x40013400
 8007264:	40014000 	.word	0x40014000
 8007268:	40014400 	.word	0x40014400
 800726c:	40014800 	.word	0x40014800

08007270 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a1b      	ldr	r3, [r3, #32]
 8007284:	f023 0210 	bic.w	r2, r3, #16
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800729e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	021b      	lsls	r3, r3, #8
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f023 0320 	bic.w	r3, r3, #32
 80072be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	011b      	lsls	r3, r3, #4
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a28      	ldr	r2, [pc, #160]	@ (8007370 <TIM_OC2_SetConfig+0x100>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d003      	beq.n	80072dc <TIM_OC2_SetConfig+0x6c>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a27      	ldr	r2, [pc, #156]	@ (8007374 <TIM_OC2_SetConfig+0x104>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d10d      	bne.n	80072f8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	011b      	lsls	r3, r3, #4
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a1d      	ldr	r2, [pc, #116]	@ (8007370 <TIM_OC2_SetConfig+0x100>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d00f      	beq.n	8007320 <TIM_OC2_SetConfig+0xb0>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a1c      	ldr	r2, [pc, #112]	@ (8007374 <TIM_OC2_SetConfig+0x104>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d00b      	beq.n	8007320 <TIM_OC2_SetConfig+0xb0>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a1b      	ldr	r2, [pc, #108]	@ (8007378 <TIM_OC2_SetConfig+0x108>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d007      	beq.n	8007320 <TIM_OC2_SetConfig+0xb0>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a1a      	ldr	r2, [pc, #104]	@ (800737c <TIM_OC2_SetConfig+0x10c>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d003      	beq.n	8007320 <TIM_OC2_SetConfig+0xb0>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a19      	ldr	r2, [pc, #100]	@ (8007380 <TIM_OC2_SetConfig+0x110>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d113      	bne.n	8007348 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007326:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800732e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	695b      	ldr	r3, [r3, #20]
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	4313      	orrs	r3, r2
 800733a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	4313      	orrs	r3, r2
 8007346:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	685a      	ldr	r2, [r3, #4]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	621a      	str	r2, [r3, #32]
}
 8007362:	bf00      	nop
 8007364:	371c      	adds	r7, #28
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	40012c00 	.word	0x40012c00
 8007374:	40013400 	.word	0x40013400
 8007378:	40014000 	.word	0x40014000
 800737c:	40014400 	.word	0x40014400
 8007380:	40014800 	.word	0x40014800

08007384 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007384:	b480      	push	{r7}
 8007386:	b087      	sub	sp, #28
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	69db      	ldr	r3, [r3, #28]
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f023 0303 	bic.w	r3, r3, #3
 80073be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80073d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	021b      	lsls	r3, r3, #8
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	4313      	orrs	r3, r2
 80073dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a27      	ldr	r2, [pc, #156]	@ (8007480 <TIM_OC3_SetConfig+0xfc>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d003      	beq.n	80073ee <TIM_OC3_SetConfig+0x6a>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a26      	ldr	r2, [pc, #152]	@ (8007484 <TIM_OC3_SetConfig+0x100>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d10d      	bne.n	800740a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80073f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	021b      	lsls	r3, r3, #8
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	4313      	orrs	r3, r2
 8007400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007408:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a1c      	ldr	r2, [pc, #112]	@ (8007480 <TIM_OC3_SetConfig+0xfc>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d00f      	beq.n	8007432 <TIM_OC3_SetConfig+0xae>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a1b      	ldr	r2, [pc, #108]	@ (8007484 <TIM_OC3_SetConfig+0x100>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d00b      	beq.n	8007432 <TIM_OC3_SetConfig+0xae>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a1a      	ldr	r2, [pc, #104]	@ (8007488 <TIM_OC3_SetConfig+0x104>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d007      	beq.n	8007432 <TIM_OC3_SetConfig+0xae>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a19      	ldr	r2, [pc, #100]	@ (800748c <TIM_OC3_SetConfig+0x108>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d003      	beq.n	8007432 <TIM_OC3_SetConfig+0xae>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a18      	ldr	r2, [pc, #96]	@ (8007490 <TIM_OC3_SetConfig+0x10c>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d113      	bne.n	800745a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007438:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007440:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	011b      	lsls	r3, r3, #4
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	4313      	orrs	r3, r2
 800744c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	011b      	lsls	r3, r3, #4
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	4313      	orrs	r3, r2
 8007458:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	621a      	str	r2, [r3, #32]
}
 8007474:	bf00      	nop
 8007476:	371c      	adds	r7, #28
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	40012c00 	.word	0x40012c00
 8007484:	40013400 	.word	0x40013400
 8007488:	40014000 	.word	0x40014000
 800748c:	40014400 	.word	0x40014400
 8007490:	40014800 	.word	0x40014800

08007494 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007494:	b480      	push	{r7}
 8007496:	b087      	sub	sp, #28
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a1b      	ldr	r3, [r3, #32]
 80074a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	69db      	ldr	r3, [r3, #28]
 80074ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	021b      	lsls	r3, r3, #8
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	4313      	orrs	r3, r2
 80074da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80074e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	031b      	lsls	r3, r3, #12
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a18      	ldr	r2, [pc, #96]	@ (8007554 <TIM_OC4_SetConfig+0xc0>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d00f      	beq.n	8007518 <TIM_OC4_SetConfig+0x84>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a17      	ldr	r2, [pc, #92]	@ (8007558 <TIM_OC4_SetConfig+0xc4>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d00b      	beq.n	8007518 <TIM_OC4_SetConfig+0x84>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a16      	ldr	r2, [pc, #88]	@ (800755c <TIM_OC4_SetConfig+0xc8>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d007      	beq.n	8007518 <TIM_OC4_SetConfig+0x84>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a15      	ldr	r2, [pc, #84]	@ (8007560 <TIM_OC4_SetConfig+0xcc>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d003      	beq.n	8007518 <TIM_OC4_SetConfig+0x84>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a14      	ldr	r2, [pc, #80]	@ (8007564 <TIM_OC4_SetConfig+0xd0>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d109      	bne.n	800752c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800751e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	695b      	ldr	r3, [r3, #20]
 8007524:	019b      	lsls	r3, r3, #6
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	4313      	orrs	r3, r2
 800752a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	693a      	ldr	r2, [r7, #16]
 8007544:	621a      	str	r2, [r3, #32]
}
 8007546:	bf00      	nop
 8007548:	371c      	adds	r7, #28
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	40012c00 	.word	0x40012c00
 8007558:	40013400 	.word	0x40013400
 800755c:	40014000 	.word	0x40014000
 8007560:	40014400 	.word	0x40014400
 8007564:	40014800 	.word	0x40014800

08007568 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007568:	b480      	push	{r7}
 800756a:	b087      	sub	sp, #28
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a1b      	ldr	r3, [r3, #32]
 800757c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800758e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800759a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80075ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	041b      	lsls	r3, r3, #16
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a17      	ldr	r2, [pc, #92]	@ (800761c <TIM_OC5_SetConfig+0xb4>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d00f      	beq.n	80075e2 <TIM_OC5_SetConfig+0x7a>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a16      	ldr	r2, [pc, #88]	@ (8007620 <TIM_OC5_SetConfig+0xb8>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d00b      	beq.n	80075e2 <TIM_OC5_SetConfig+0x7a>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a15      	ldr	r2, [pc, #84]	@ (8007624 <TIM_OC5_SetConfig+0xbc>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d007      	beq.n	80075e2 <TIM_OC5_SetConfig+0x7a>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a14      	ldr	r2, [pc, #80]	@ (8007628 <TIM_OC5_SetConfig+0xc0>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d003      	beq.n	80075e2 <TIM_OC5_SetConfig+0x7a>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a13      	ldr	r2, [pc, #76]	@ (800762c <TIM_OC5_SetConfig+0xc4>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d109      	bne.n	80075f6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	021b      	lsls	r3, r3, #8
 80075f0:	697a      	ldr	r2, [r7, #20]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	697a      	ldr	r2, [r7, #20]
 80075fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	621a      	str	r2, [r3, #32]
}
 8007610:	bf00      	nop
 8007612:	371c      	adds	r7, #28
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	40012c00 	.word	0x40012c00
 8007620:	40013400 	.word	0x40013400
 8007624:	40014000 	.word	0x40014000
 8007628:	40014400 	.word	0x40014400
 800762c:	40014800 	.word	0x40014800

08007630 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007630:	b480      	push	{r7}
 8007632:	b087      	sub	sp, #28
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a1b      	ldr	r3, [r3, #32]
 8007644:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800765e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	021b      	lsls	r3, r3, #8
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	4313      	orrs	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007676:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	051b      	lsls	r3, r3, #20
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	4313      	orrs	r3, r2
 8007682:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a18      	ldr	r2, [pc, #96]	@ (80076e8 <TIM_OC6_SetConfig+0xb8>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d00f      	beq.n	80076ac <TIM_OC6_SetConfig+0x7c>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a17      	ldr	r2, [pc, #92]	@ (80076ec <TIM_OC6_SetConfig+0xbc>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d00b      	beq.n	80076ac <TIM_OC6_SetConfig+0x7c>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a16      	ldr	r2, [pc, #88]	@ (80076f0 <TIM_OC6_SetConfig+0xc0>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d007      	beq.n	80076ac <TIM_OC6_SetConfig+0x7c>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a15      	ldr	r2, [pc, #84]	@ (80076f4 <TIM_OC6_SetConfig+0xc4>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d003      	beq.n	80076ac <TIM_OC6_SetConfig+0x7c>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a14      	ldr	r2, [pc, #80]	@ (80076f8 <TIM_OC6_SetConfig+0xc8>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d109      	bne.n	80076c0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80076b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	029b      	lsls	r3, r3, #10
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	4313      	orrs	r3, r2
 80076be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	685a      	ldr	r2, [r3, #4]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	621a      	str	r2, [r3, #32]
}
 80076da:	bf00      	nop
 80076dc:	371c      	adds	r7, #28
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	40012c00 	.word	0x40012c00
 80076ec:	40013400 	.word	0x40013400
 80076f0:	40014000 	.word	0x40014000
 80076f4:	40014400 	.word	0x40014400
 80076f8:	40014800 	.word	0x40014800

080076fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800770c:	2b01      	cmp	r3, #1
 800770e:	d101      	bne.n	8007714 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007710:	2302      	movs	r3, #2
 8007712:	e063      	b.n	80077dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2202      	movs	r2, #2
 8007720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a2b      	ldr	r2, [pc, #172]	@ (80077e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d004      	beq.n	8007748 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a2a      	ldr	r2, [pc, #168]	@ (80077ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d108      	bne.n	800775a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800774e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	4313      	orrs	r3, r2
 8007758:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007760:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	4313      	orrs	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a1b      	ldr	r2, [pc, #108]	@ (80077e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d018      	beq.n	80077b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007786:	d013      	beq.n	80077b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a18      	ldr	r2, [pc, #96]	@ (80077f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d00e      	beq.n	80077b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a17      	ldr	r2, [pc, #92]	@ (80077f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d009      	beq.n	80077b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a12      	ldr	r2, [pc, #72]	@ (80077ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d004      	beq.n	80077b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a13      	ldr	r2, [pc, #76]	@ (80077f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d10c      	bne.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	4313      	orrs	r3, r2
 80077c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr
 80077e8:	40012c00 	.word	0x40012c00
 80077ec:	40013400 	.word	0x40013400
 80077f0:	40000400 	.word	0x40000400
 80077f4:	40000800 	.word	0x40000800
 80077f8:	40014000 	.word	0x40014000

080077fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007804:	bf00      	nop
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800782c:	bf00      	nop
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d101      	bne.n	800784a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e040      	b.n	80078cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800784e:	2b00      	cmp	r3, #0
 8007850:	d106      	bne.n	8007860 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7fa f970 	bl	8001b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2224      	movs	r2, #36	@ 0x24
 8007864:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f022 0201 	bic.w	r2, r2, #1
 8007874:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800787a:	2b00      	cmp	r3, #0
 800787c:	d002      	beq.n	8007884 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fb3c 	bl	8007efc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f965 	bl	8007b54 <UART_SetConfig>
 800788a:	4603      	mov	r3, r0
 800788c:	2b01      	cmp	r3, #1
 800788e:	d101      	bne.n	8007894 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e01b      	b.n	80078cc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80078a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	689a      	ldr	r2, [r3, #8]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80078b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f042 0201 	orr.w	r2, r2, #1
 80078c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fbbb 	bl	8008040 <UART_CheckIdleState>
 80078ca:	4603      	mov	r3, r0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b08a      	sub	sp, #40	@ 0x28
 80078d8:	af02      	add	r7, sp, #8
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	603b      	str	r3, [r7, #0]
 80078e0:	4613      	mov	r3, r2
 80078e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078e8:	2b20      	cmp	r3, #32
 80078ea:	d177      	bne.n	80079dc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d002      	beq.n	80078f8 <HAL_UART_Transmit+0x24>
 80078f2:	88fb      	ldrh	r3, [r7, #6]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d101      	bne.n	80078fc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e070      	b.n	80079de <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2221      	movs	r2, #33	@ 0x21
 8007908:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800790a:	f7fa fdf1 	bl	80024f0 <HAL_GetTick>
 800790e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	88fa      	ldrh	r2, [r7, #6]
 8007914:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	88fa      	ldrh	r2, [r7, #6]
 800791c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007928:	d108      	bne.n	800793c <HAL_UART_Transmit+0x68>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d104      	bne.n	800793c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007932:	2300      	movs	r3, #0
 8007934:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	61bb      	str	r3, [r7, #24]
 800793a:	e003      	b.n	8007944 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007940:	2300      	movs	r3, #0
 8007942:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007944:	e02f      	b.n	80079a6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	2200      	movs	r2, #0
 800794e:	2180      	movs	r1, #128	@ 0x80
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 fc1d 	bl	8008190 <UART_WaitOnFlagUntilTimeout>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d004      	beq.n	8007966 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2220      	movs	r2, #32
 8007960:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007962:	2303      	movs	r3, #3
 8007964:	e03b      	b.n	80079de <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10b      	bne.n	8007984 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	881a      	ldrh	r2, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007978:	b292      	uxth	r2, r2
 800797a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	3302      	adds	r3, #2
 8007980:	61bb      	str	r3, [r7, #24]
 8007982:	e007      	b.n	8007994 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	781a      	ldrb	r2, [r3, #0]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	3301      	adds	r3, #1
 8007992:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800799a:	b29b      	uxth	r3, r3
 800799c:	3b01      	subs	r3, #1
 800799e:	b29a      	uxth	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1c9      	bne.n	8007946 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	9300      	str	r3, [sp, #0]
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	2200      	movs	r2, #0
 80079ba:	2140      	movs	r1, #64	@ 0x40
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f000 fbe7 	bl	8008190 <UART_WaitOnFlagUntilTimeout>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d004      	beq.n	80079d2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2220      	movs	r2, #32
 80079cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e005      	b.n	80079de <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2220      	movs	r2, #32
 80079d6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80079d8:	2300      	movs	r3, #0
 80079da:	e000      	b.n	80079de <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80079dc:	2302      	movs	r3, #2
  }
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3720      	adds	r7, #32
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b08a      	sub	sp, #40	@ 0x28
 80079ea:	af02      	add	r7, sp, #8
 80079ec:	60f8      	str	r0, [r7, #12]
 80079ee:	60b9      	str	r1, [r7, #8]
 80079f0:	603b      	str	r3, [r7, #0]
 80079f2:	4613      	mov	r3, r2
 80079f4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079fc:	2b20      	cmp	r3, #32
 80079fe:	f040 80a3 	bne.w	8007b48 <HAL_UART_Receive+0x162>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d002      	beq.n	8007a0e <HAL_UART_Receive+0x28>
 8007a08:	88fb      	ldrh	r3, [r7, #6]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d101      	bne.n	8007a12 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e09b      	b.n	8007b4a <HAL_UART_Receive+0x164>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2222      	movs	r2, #34	@ 0x22
 8007a1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a28:	f7fa fd62 	bl	80024f0 <HAL_GetTick>
 8007a2c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	88fa      	ldrh	r2, [r7, #6]
 8007a32:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	88fa      	ldrh	r2, [r7, #6]
 8007a3a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a46:	d10e      	bne.n	8007a66 <HAL_UART_Receive+0x80>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d105      	bne.n	8007a5c <HAL_UART_Receive+0x76>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007a56:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007a5a:	e01a      	b.n	8007a92 <HAL_UART_Receive+0xac>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	22ff      	movs	r2, #255	@ 0xff
 8007a60:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007a64:	e015      	b.n	8007a92 <HAL_UART_Receive+0xac>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10d      	bne.n	8007a8a <HAL_UART_Receive+0xa4>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d104      	bne.n	8007a80 <HAL_UART_Receive+0x9a>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	22ff      	movs	r2, #255	@ 0xff
 8007a7a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007a7e:	e008      	b.n	8007a92 <HAL_UART_Receive+0xac>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	227f      	movs	r2, #127	@ 0x7f
 8007a84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007a88:	e003      	b.n	8007a92 <HAL_UART_Receive+0xac>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a98:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007aa2:	d108      	bne.n	8007ab6 <HAL_UART_Receive+0xd0>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d104      	bne.n	8007ab6 <HAL_UART_Receive+0xd0>
    {
      pdata8bits  = NULL;
 8007aac:	2300      	movs	r3, #0
 8007aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	61bb      	str	r3, [r7, #24]
 8007ab4:	e003      	b.n	8007abe <HAL_UART_Receive+0xd8>
    }
    else
    {
      pdata8bits  = pData;
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007aba:	2300      	movs	r3, #0
 8007abc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007abe:	e037      	b.n	8007b30 <HAL_UART_Receive+0x14a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	2120      	movs	r1, #32
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f000 fb60 	bl	8008190 <UART_WaitOnFlagUntilTimeout>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d005      	beq.n	8007ae2 <HAL_UART_Receive+0xfc>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e033      	b.n	8007b4a <HAL_UART_Receive+0x164>
      }
      if (pdata8bits == NULL)
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10c      	bne.n	8007b02 <HAL_UART_Receive+0x11c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	8a7b      	ldrh	r3, [r7, #18]
 8007af2:	4013      	ands	r3, r2
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	3302      	adds	r3, #2
 8007afe:	61bb      	str	r3, [r7, #24]
 8007b00:	e00d      	b.n	8007b1e <HAL_UART_Receive+0x138>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	b2da      	uxtb	r2, r3
 8007b0c:	8a7b      	ldrh	r3, [r7, #18]
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	4013      	ands	r3, r2
 8007b12:	b2da      	uxtb	r2, r3
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	3b01      	subs	r3, #1
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1c1      	bne.n	8007ac0 <HAL_UART_Receive+0xda>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2220      	movs	r2, #32
 8007b40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	e000      	b.n	8007b4a <HAL_UART_Receive+0x164>
  }
  else
  {
    return HAL_BUSY;
 8007b48:	2302      	movs	r3, #2
  }
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3720      	adds	r7, #32
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
	...

08007b54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b088      	sub	sp, #32
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	689a      	ldr	r2, [r3, #8]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	431a      	orrs	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	431a      	orrs	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	69db      	ldr	r3, [r3, #28]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8007b82:	f023 030c 	bic.w	r3, r3, #12
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	6812      	ldr	r2, [r2, #0]
 8007b8a:	6979      	ldr	r1, [r7, #20]
 8007b8c:	430b      	orrs	r3, r1
 8007b8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	68da      	ldr	r2, [r3, #12]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a1b      	ldr	r3, [r3, #32]
 8007bb0:	697a      	ldr	r2, [r7, #20]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	697a      	ldr	r2, [r7, #20]
 8007bc6:	430a      	orrs	r2, r1
 8007bc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4aa7      	ldr	r2, [pc, #668]	@ (8007e6c <UART_SetConfig+0x318>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d120      	bne.n	8007c16 <UART_SetConfig+0xc2>
 8007bd4:	4ba6      	ldr	r3, [pc, #664]	@ (8007e70 <UART_SetConfig+0x31c>)
 8007bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd8:	f003 0303 	and.w	r3, r3, #3
 8007bdc:	2b03      	cmp	r3, #3
 8007bde:	d817      	bhi.n	8007c10 <UART_SetConfig+0xbc>
 8007be0:	a201      	add	r2, pc, #4	@ (adr r2, 8007be8 <UART_SetConfig+0x94>)
 8007be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be6:	bf00      	nop
 8007be8:	08007bf9 	.word	0x08007bf9
 8007bec:	08007c05 	.word	0x08007c05
 8007bf0:	08007c0b 	.word	0x08007c0b
 8007bf4:	08007bff 	.word	0x08007bff
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	77fb      	strb	r3, [r7, #31]
 8007bfc:	e0b5      	b.n	8007d6a <UART_SetConfig+0x216>
 8007bfe:	2302      	movs	r3, #2
 8007c00:	77fb      	strb	r3, [r7, #31]
 8007c02:	e0b2      	b.n	8007d6a <UART_SetConfig+0x216>
 8007c04:	2304      	movs	r3, #4
 8007c06:	77fb      	strb	r3, [r7, #31]
 8007c08:	e0af      	b.n	8007d6a <UART_SetConfig+0x216>
 8007c0a:	2308      	movs	r3, #8
 8007c0c:	77fb      	strb	r3, [r7, #31]
 8007c0e:	e0ac      	b.n	8007d6a <UART_SetConfig+0x216>
 8007c10:	2310      	movs	r3, #16
 8007c12:	77fb      	strb	r3, [r7, #31]
 8007c14:	e0a9      	b.n	8007d6a <UART_SetConfig+0x216>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a96      	ldr	r2, [pc, #600]	@ (8007e74 <UART_SetConfig+0x320>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d124      	bne.n	8007c6a <UART_SetConfig+0x116>
 8007c20:	4b93      	ldr	r3, [pc, #588]	@ (8007e70 <UART_SetConfig+0x31c>)
 8007c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007c28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c2c:	d011      	beq.n	8007c52 <UART_SetConfig+0xfe>
 8007c2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c32:	d817      	bhi.n	8007c64 <UART_SetConfig+0x110>
 8007c34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c38:	d011      	beq.n	8007c5e <UART_SetConfig+0x10a>
 8007c3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c3e:	d811      	bhi.n	8007c64 <UART_SetConfig+0x110>
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d003      	beq.n	8007c4c <UART_SetConfig+0xf8>
 8007c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c48:	d006      	beq.n	8007c58 <UART_SetConfig+0x104>
 8007c4a:	e00b      	b.n	8007c64 <UART_SetConfig+0x110>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	77fb      	strb	r3, [r7, #31]
 8007c50:	e08b      	b.n	8007d6a <UART_SetConfig+0x216>
 8007c52:	2302      	movs	r3, #2
 8007c54:	77fb      	strb	r3, [r7, #31]
 8007c56:	e088      	b.n	8007d6a <UART_SetConfig+0x216>
 8007c58:	2304      	movs	r3, #4
 8007c5a:	77fb      	strb	r3, [r7, #31]
 8007c5c:	e085      	b.n	8007d6a <UART_SetConfig+0x216>
 8007c5e:	2308      	movs	r3, #8
 8007c60:	77fb      	strb	r3, [r7, #31]
 8007c62:	e082      	b.n	8007d6a <UART_SetConfig+0x216>
 8007c64:	2310      	movs	r3, #16
 8007c66:	77fb      	strb	r3, [r7, #31]
 8007c68:	e07f      	b.n	8007d6a <UART_SetConfig+0x216>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a82      	ldr	r2, [pc, #520]	@ (8007e78 <UART_SetConfig+0x324>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d124      	bne.n	8007cbe <UART_SetConfig+0x16a>
 8007c74:	4b7e      	ldr	r3, [pc, #504]	@ (8007e70 <UART_SetConfig+0x31c>)
 8007c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c78:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007c7c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007c80:	d011      	beq.n	8007ca6 <UART_SetConfig+0x152>
 8007c82:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007c86:	d817      	bhi.n	8007cb8 <UART_SetConfig+0x164>
 8007c88:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007c8c:	d011      	beq.n	8007cb2 <UART_SetConfig+0x15e>
 8007c8e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007c92:	d811      	bhi.n	8007cb8 <UART_SetConfig+0x164>
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d003      	beq.n	8007ca0 <UART_SetConfig+0x14c>
 8007c98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c9c:	d006      	beq.n	8007cac <UART_SetConfig+0x158>
 8007c9e:	e00b      	b.n	8007cb8 <UART_SetConfig+0x164>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	77fb      	strb	r3, [r7, #31]
 8007ca4:	e061      	b.n	8007d6a <UART_SetConfig+0x216>
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	77fb      	strb	r3, [r7, #31]
 8007caa:	e05e      	b.n	8007d6a <UART_SetConfig+0x216>
 8007cac:	2304      	movs	r3, #4
 8007cae:	77fb      	strb	r3, [r7, #31]
 8007cb0:	e05b      	b.n	8007d6a <UART_SetConfig+0x216>
 8007cb2:	2308      	movs	r3, #8
 8007cb4:	77fb      	strb	r3, [r7, #31]
 8007cb6:	e058      	b.n	8007d6a <UART_SetConfig+0x216>
 8007cb8:	2310      	movs	r3, #16
 8007cba:	77fb      	strb	r3, [r7, #31]
 8007cbc:	e055      	b.n	8007d6a <UART_SetConfig+0x216>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a6e      	ldr	r2, [pc, #440]	@ (8007e7c <UART_SetConfig+0x328>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d124      	bne.n	8007d12 <UART_SetConfig+0x1be>
 8007cc8:	4b69      	ldr	r3, [pc, #420]	@ (8007e70 <UART_SetConfig+0x31c>)
 8007cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ccc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007cd0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007cd4:	d011      	beq.n	8007cfa <UART_SetConfig+0x1a6>
 8007cd6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007cda:	d817      	bhi.n	8007d0c <UART_SetConfig+0x1b8>
 8007cdc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ce0:	d011      	beq.n	8007d06 <UART_SetConfig+0x1b2>
 8007ce2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ce6:	d811      	bhi.n	8007d0c <UART_SetConfig+0x1b8>
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d003      	beq.n	8007cf4 <UART_SetConfig+0x1a0>
 8007cec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cf0:	d006      	beq.n	8007d00 <UART_SetConfig+0x1ac>
 8007cf2:	e00b      	b.n	8007d0c <UART_SetConfig+0x1b8>
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	77fb      	strb	r3, [r7, #31]
 8007cf8:	e037      	b.n	8007d6a <UART_SetConfig+0x216>
 8007cfa:	2302      	movs	r3, #2
 8007cfc:	77fb      	strb	r3, [r7, #31]
 8007cfe:	e034      	b.n	8007d6a <UART_SetConfig+0x216>
 8007d00:	2304      	movs	r3, #4
 8007d02:	77fb      	strb	r3, [r7, #31]
 8007d04:	e031      	b.n	8007d6a <UART_SetConfig+0x216>
 8007d06:	2308      	movs	r3, #8
 8007d08:	77fb      	strb	r3, [r7, #31]
 8007d0a:	e02e      	b.n	8007d6a <UART_SetConfig+0x216>
 8007d0c:	2310      	movs	r3, #16
 8007d0e:	77fb      	strb	r3, [r7, #31]
 8007d10:	e02b      	b.n	8007d6a <UART_SetConfig+0x216>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a5a      	ldr	r2, [pc, #360]	@ (8007e80 <UART_SetConfig+0x32c>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d124      	bne.n	8007d66 <UART_SetConfig+0x212>
 8007d1c:	4b54      	ldr	r3, [pc, #336]	@ (8007e70 <UART_SetConfig+0x31c>)
 8007d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d20:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007d24:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007d28:	d011      	beq.n	8007d4e <UART_SetConfig+0x1fa>
 8007d2a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007d2e:	d817      	bhi.n	8007d60 <UART_SetConfig+0x20c>
 8007d30:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d34:	d011      	beq.n	8007d5a <UART_SetConfig+0x206>
 8007d36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d3a:	d811      	bhi.n	8007d60 <UART_SetConfig+0x20c>
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d003      	beq.n	8007d48 <UART_SetConfig+0x1f4>
 8007d40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d44:	d006      	beq.n	8007d54 <UART_SetConfig+0x200>
 8007d46:	e00b      	b.n	8007d60 <UART_SetConfig+0x20c>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	77fb      	strb	r3, [r7, #31]
 8007d4c:	e00d      	b.n	8007d6a <UART_SetConfig+0x216>
 8007d4e:	2302      	movs	r3, #2
 8007d50:	77fb      	strb	r3, [r7, #31]
 8007d52:	e00a      	b.n	8007d6a <UART_SetConfig+0x216>
 8007d54:	2304      	movs	r3, #4
 8007d56:	77fb      	strb	r3, [r7, #31]
 8007d58:	e007      	b.n	8007d6a <UART_SetConfig+0x216>
 8007d5a:	2308      	movs	r3, #8
 8007d5c:	77fb      	strb	r3, [r7, #31]
 8007d5e:	e004      	b.n	8007d6a <UART_SetConfig+0x216>
 8007d60:	2310      	movs	r3, #16
 8007d62:	77fb      	strb	r3, [r7, #31]
 8007d64:	e001      	b.n	8007d6a <UART_SetConfig+0x216>
 8007d66:	2310      	movs	r3, #16
 8007d68:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	69db      	ldr	r3, [r3, #28]
 8007d6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d72:	d15b      	bne.n	8007e2c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8007d74:	7ffb      	ldrb	r3, [r7, #31]
 8007d76:	2b08      	cmp	r3, #8
 8007d78:	d827      	bhi.n	8007dca <UART_SetConfig+0x276>
 8007d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d80 <UART_SetConfig+0x22c>)
 8007d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d80:	08007da5 	.word	0x08007da5
 8007d84:	08007dad 	.word	0x08007dad
 8007d88:	08007db5 	.word	0x08007db5
 8007d8c:	08007dcb 	.word	0x08007dcb
 8007d90:	08007dbb 	.word	0x08007dbb
 8007d94:	08007dcb 	.word	0x08007dcb
 8007d98:	08007dcb 	.word	0x08007dcb
 8007d9c:	08007dcb 	.word	0x08007dcb
 8007da0:	08007dc3 	.word	0x08007dc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007da4:	f7fe fb42 	bl	800642c <HAL_RCC_GetPCLK1Freq>
 8007da8:	61b8      	str	r0, [r7, #24]
        break;
 8007daa:	e013      	b.n	8007dd4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dac:	f7fe fb60 	bl	8006470 <HAL_RCC_GetPCLK2Freq>
 8007db0:	61b8      	str	r0, [r7, #24]
        break;
 8007db2:	e00f      	b.n	8007dd4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007db4:	4b33      	ldr	r3, [pc, #204]	@ (8007e84 <UART_SetConfig+0x330>)
 8007db6:	61bb      	str	r3, [r7, #24]
        break;
 8007db8:	e00c      	b.n	8007dd4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dba:	f7fe fad7 	bl	800636c <HAL_RCC_GetSysClockFreq>
 8007dbe:	61b8      	str	r0, [r7, #24]
        break;
 8007dc0:	e008      	b.n	8007dd4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dc6:	61bb      	str	r3, [r7, #24]
        break;
 8007dc8:	e004      	b.n	8007dd4 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	77bb      	strb	r3, [r7, #30]
        break;
 8007dd2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 8082 	beq.w	8007ee0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	005a      	lsls	r2, r3, #1
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	085b      	lsrs	r3, r3, #1
 8007de6:	441a      	add	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	2b0f      	cmp	r3, #15
 8007df6:	d916      	bls.n	8007e26 <UART_SetConfig+0x2d2>
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dfe:	d212      	bcs.n	8007e26 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	f023 030f 	bic.w	r3, r3, #15
 8007e08:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	085b      	lsrs	r3, r3, #1
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	f003 0307 	and.w	r3, r3, #7
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	89fb      	ldrh	r3, [r7, #14]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	89fa      	ldrh	r2, [r7, #14]
 8007e22:	60da      	str	r2, [r3, #12]
 8007e24:	e05c      	b.n	8007ee0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	77bb      	strb	r3, [r7, #30]
 8007e2a:	e059      	b.n	8007ee0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e2c:	7ffb      	ldrb	r3, [r7, #31]
 8007e2e:	2b08      	cmp	r3, #8
 8007e30:	d835      	bhi.n	8007e9e <UART_SetConfig+0x34a>
 8007e32:	a201      	add	r2, pc, #4	@ (adr r2, 8007e38 <UART_SetConfig+0x2e4>)
 8007e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e38:	08007e5d 	.word	0x08007e5d
 8007e3c:	08007e65 	.word	0x08007e65
 8007e40:	08007e89 	.word	0x08007e89
 8007e44:	08007e9f 	.word	0x08007e9f
 8007e48:	08007e8f 	.word	0x08007e8f
 8007e4c:	08007e9f 	.word	0x08007e9f
 8007e50:	08007e9f 	.word	0x08007e9f
 8007e54:	08007e9f 	.word	0x08007e9f
 8007e58:	08007e97 	.word	0x08007e97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e5c:	f7fe fae6 	bl	800642c <HAL_RCC_GetPCLK1Freq>
 8007e60:	61b8      	str	r0, [r7, #24]
        break;
 8007e62:	e021      	b.n	8007ea8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e64:	f7fe fb04 	bl	8006470 <HAL_RCC_GetPCLK2Freq>
 8007e68:	61b8      	str	r0, [r7, #24]
        break;
 8007e6a:	e01d      	b.n	8007ea8 <UART_SetConfig+0x354>
 8007e6c:	40013800 	.word	0x40013800
 8007e70:	40021000 	.word	0x40021000
 8007e74:	40004400 	.word	0x40004400
 8007e78:	40004800 	.word	0x40004800
 8007e7c:	40004c00 	.word	0x40004c00
 8007e80:	40005000 	.word	0x40005000
 8007e84:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e88:	4b1b      	ldr	r3, [pc, #108]	@ (8007ef8 <UART_SetConfig+0x3a4>)
 8007e8a:	61bb      	str	r3, [r7, #24]
        break;
 8007e8c:	e00c      	b.n	8007ea8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e8e:	f7fe fa6d 	bl	800636c <HAL_RCC_GetSysClockFreq>
 8007e92:	61b8      	str	r0, [r7, #24]
        break;
 8007e94:	e008      	b.n	8007ea8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e9a:	61bb      	str	r3, [r7, #24]
        break;
 8007e9c:	e004      	b.n	8007ea8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	77bb      	strb	r3, [r7, #30]
        break;
 8007ea6:	bf00      	nop
    }

    if (pclk != 0U)
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d018      	beq.n	8007ee0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	085a      	lsrs	r2, r3, #1
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	441a      	add	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	2b0f      	cmp	r3, #15
 8007ec6:	d909      	bls.n	8007edc <UART_SetConfig+0x388>
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ece:	d205      	bcs.n	8007edc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	60da      	str	r2, [r3, #12]
 8007eda:	e001      	b.n	8007ee0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007eec:	7fbb      	ldrb	r3, [r7, #30]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3720      	adds	r7, #32
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	007a1200 	.word	0x007a1200

08007efc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f08:	f003 0308 	and.w	r3, r3, #8
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00a      	beq.n	8007f26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	430a      	orrs	r2, r1
 8007f24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f2a:	f003 0301 	and.w	r3, r3, #1
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00a      	beq.n	8007f48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	430a      	orrs	r2, r1
 8007f46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f4c:	f003 0302 	and.w	r3, r3, #2
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00a      	beq.n	8007f6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	430a      	orrs	r2, r1
 8007f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f6e:	f003 0304 	and.w	r3, r3, #4
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00a      	beq.n	8007f8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	430a      	orrs	r2, r1
 8007f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f90:	f003 0310 	and.w	r3, r3, #16
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00a      	beq.n	8007fae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	430a      	orrs	r2, r1
 8007fac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb2:	f003 0320 	and.w	r3, r3, #32
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00a      	beq.n	8007fd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	430a      	orrs	r2, r1
 8007fce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d01a      	beq.n	8008012 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	430a      	orrs	r2, r1
 8007ff0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ffa:	d10a      	bne.n	8008012 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	430a      	orrs	r2, r1
 8008010:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00a      	beq.n	8008034 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	430a      	orrs	r2, r1
 8008032:	605a      	str	r2, [r3, #4]
  }
}
 8008034:	bf00      	nop
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b098      	sub	sp, #96	@ 0x60
 8008044:	af02      	add	r7, sp, #8
 8008046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008050:	f7fa fa4e 	bl	80024f0 <HAL_GetTick>
 8008054:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 0308 	and.w	r3, r3, #8
 8008060:	2b08      	cmp	r3, #8
 8008062:	d12e      	bne.n	80080c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008064:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800806c:	2200      	movs	r2, #0
 800806e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f88c 	bl	8008190 <UART_WaitOnFlagUntilTimeout>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d021      	beq.n	80080c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008086:	e853 3f00 	ldrex	r3, [r3]
 800808a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800808c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800808e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008092:	653b      	str	r3, [r7, #80]	@ 0x50
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	461a      	mov	r2, r3
 800809a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800809c:	647b      	str	r3, [r7, #68]	@ 0x44
 800809e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080a4:	e841 2300 	strex	r3, r2, [r1]
 80080a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1e6      	bne.n	800807e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2220      	movs	r2, #32
 80080b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e062      	b.n	8008188 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0304 	and.w	r3, r3, #4
 80080cc:	2b04      	cmp	r3, #4
 80080ce:	d149      	bne.n	8008164 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080d8:	2200      	movs	r2, #0
 80080da:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f856 	bl	8008190 <UART_WaitOnFlagUntilTimeout>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d03c      	beq.n	8008164 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f2:	e853 3f00 	ldrex	r3, [r3]
 80080f6:	623b      	str	r3, [r7, #32]
   return(result);
 80080f8:	6a3b      	ldr	r3, [r7, #32]
 80080fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	461a      	mov	r2, r3
 8008106:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008108:	633b      	str	r3, [r7, #48]	@ 0x30
 800810a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800810e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008110:	e841 2300 	strex	r3, r2, [r1]
 8008114:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1e6      	bne.n	80080ea <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	3308      	adds	r3, #8
 8008122:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	e853 3f00 	ldrex	r3, [r3]
 800812a:	60fb      	str	r3, [r7, #12]
   return(result);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f023 0301 	bic.w	r3, r3, #1
 8008132:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	3308      	adds	r3, #8
 800813a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800813c:	61fa      	str	r2, [r7, #28]
 800813e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008140:	69b9      	ldr	r1, [r7, #24]
 8008142:	69fa      	ldr	r2, [r7, #28]
 8008144:	e841 2300 	strex	r3, r2, [r1]
 8008148:	617b      	str	r3, [r7, #20]
   return(result);
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1e5      	bne.n	800811c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2220      	movs	r2, #32
 8008154:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	e011      	b.n	8008188 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2220      	movs	r2, #32
 8008168:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2220      	movs	r2, #32
 800816e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3758      	adds	r7, #88	@ 0x58
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	603b      	str	r3, [r7, #0]
 800819c:	4613      	mov	r3, r2
 800819e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081a0:	e04f      	b.n	8008242 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a8:	d04b      	beq.n	8008242 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081aa:	f7fa f9a1 	bl	80024f0 <HAL_GetTick>
 80081ae:	4602      	mov	r2, r0
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	69ba      	ldr	r2, [r7, #24]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d302      	bcc.n	80081c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e04e      	b.n	8008262 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 0304 	and.w	r3, r3, #4
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d037      	beq.n	8008242 <UART_WaitOnFlagUntilTimeout+0xb2>
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	2b80      	cmp	r3, #128	@ 0x80
 80081d6:	d034      	beq.n	8008242 <UART_WaitOnFlagUntilTimeout+0xb2>
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	2b40      	cmp	r3, #64	@ 0x40
 80081dc:	d031      	beq.n	8008242 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	69db      	ldr	r3, [r3, #28]
 80081e4:	f003 0308 	and.w	r3, r3, #8
 80081e8:	2b08      	cmp	r3, #8
 80081ea:	d110      	bne.n	800820e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2208      	movs	r2, #8
 80081f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f000 f838 	bl	800826a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2208      	movs	r2, #8
 80081fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e029      	b.n	8008262 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	69db      	ldr	r3, [r3, #28]
 8008214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008218:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800821c:	d111      	bne.n	8008242 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008226:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f000 f81e 	bl	800826a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2220      	movs	r2, #32
 8008232:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e00f      	b.n	8008262 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	69da      	ldr	r2, [r3, #28]
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	4013      	ands	r3, r2
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	429a      	cmp	r2, r3
 8008250:	bf0c      	ite	eq
 8008252:	2301      	moveq	r3, #1
 8008254:	2300      	movne	r3, #0
 8008256:	b2db      	uxtb	r3, r3
 8008258:	461a      	mov	r2, r3
 800825a:	79fb      	ldrb	r3, [r7, #7]
 800825c:	429a      	cmp	r2, r3
 800825e:	d0a0      	beq.n	80081a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800826a:	b480      	push	{r7}
 800826c:	b095      	sub	sp, #84	@ 0x54
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800827a:	e853 3f00 	ldrex	r3, [r3]
 800827e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008282:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008286:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	461a      	mov	r2, r3
 800828e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008290:	643b      	str	r3, [r7, #64]	@ 0x40
 8008292:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008294:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008296:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008298:	e841 2300 	strex	r3, r2, [r1]
 800829c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800829e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1e6      	bne.n	8008272 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	3308      	adds	r3, #8
 80082aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ac:	6a3b      	ldr	r3, [r7, #32]
 80082ae:	e853 3f00 	ldrex	r3, [r3]
 80082b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	f023 0301 	bic.w	r3, r3, #1
 80082ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	3308      	adds	r3, #8
 80082c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80082c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082cc:	e841 2300 	strex	r3, r2, [r1]
 80082d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1e5      	bne.n	80082a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d118      	bne.n	8008312 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	e853 3f00 	ldrex	r3, [r3]
 80082ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	f023 0310 	bic.w	r3, r3, #16
 80082f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	461a      	mov	r2, r3
 80082fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082fe:	61bb      	str	r3, [r7, #24]
 8008300:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008302:	6979      	ldr	r1, [r7, #20]
 8008304:	69ba      	ldr	r2, [r7, #24]
 8008306:	e841 2300 	strex	r3, r2, [r1]
 800830a:	613b      	str	r3, [r7, #16]
   return(result);
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1e6      	bne.n	80082e0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2220      	movs	r2, #32
 8008316:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008326:	bf00      	nop
 8008328:	3754      	adds	r7, #84	@ 0x54
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008332:	b480      	push	{r7}
 8008334:	b085      	sub	sp, #20
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008342:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8008346:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	b29a      	uxth	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008368:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800836c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008374:	b29a      	uxth	r2, r3
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	b29b      	uxth	r3, r3
 800837a:	43db      	mvns	r3, r3
 800837c:	b29b      	uxth	r3, r3
 800837e:	4013      	ands	r3, r2
 8008380:	b29a      	uxth	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3714      	adds	r7, #20
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008396:	b480      	push	{r7}
 8008398:	b085      	sub	sp, #20
 800839a:	af00      	add	r7, sp, #0
 800839c:	60f8      	str	r0, [r7, #12]
 800839e:	1d3b      	adds	r3, r7, #4
 80083a0:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
	...

080083d4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b09d      	sub	sp, #116	@ 0x74
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	4413      	add	r3, r2
 80083ee:	881b      	ldrh	r3, [r3, #0]
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80083f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083fa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	78db      	ldrb	r3, [r3, #3]
 8008402:	2b03      	cmp	r3, #3
 8008404:	d81f      	bhi.n	8008446 <USB_ActivateEndpoint+0x72>
 8008406:	a201      	add	r2, pc, #4	@ (adr r2, 800840c <USB_ActivateEndpoint+0x38>)
 8008408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840c:	0800841d 	.word	0x0800841d
 8008410:	08008439 	.word	0x08008439
 8008414:	0800844f 	.word	0x0800844f
 8008418:	0800842b 	.word	0x0800842b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800841c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008420:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008424:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008428:	e012      	b.n	8008450 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800842a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800842e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008432:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008436:	e00b      	b.n	8008450 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008438:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800843c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008440:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008444:	e004      	b.n	8008450 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800844c:	e000      	b.n	8008450 <USB_ActivateEndpoint+0x7c>
      break;
 800844e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	441a      	add	r2, r3
 800845a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800845e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008462:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008466:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800846a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800846e:	b29b      	uxth	r3, r3
 8008470:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4413      	add	r3, r2
 800847c:	881b      	ldrh	r3, [r3, #0]
 800847e:	b29b      	uxth	r3, r3
 8008480:	b21b      	sxth	r3, r3
 8008482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800848a:	b21a      	sxth	r2, r3
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	b21b      	sxth	r3, r3
 8008492:	4313      	orrs	r3, r2
 8008494:	b21b      	sxth	r3, r3
 8008496:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	441a      	add	r2, r3
 80084a4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80084a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	7b1b      	ldrb	r3, [r3, #12]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f040 8178 	bne.w	80087b6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	785b      	ldrb	r3, [r3, #1]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f000 8084 	beq.w	80085d8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	61bb      	str	r3, [r7, #24]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084da:	b29b      	uxth	r3, r3
 80084dc:	461a      	mov	r2, r3
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	4413      	add	r3, r2
 80084e2:	61bb      	str	r3, [r7, #24]
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	011a      	lsls	r2, r3, #4
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80084f2:	617b      	str	r3, [r7, #20]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	88db      	ldrh	r3, [r3, #6]
 80084f8:	085b      	lsrs	r3, r3, #1
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	005b      	lsls	r3, r3, #1
 80084fe:	b29a      	uxth	r2, r3
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	4413      	add	r3, r2
 800850e:	881b      	ldrh	r3, [r3, #0]
 8008510:	827b      	strh	r3, [r7, #18]
 8008512:	8a7b      	ldrh	r3, [r7, #18]
 8008514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008518:	2b00      	cmp	r3, #0
 800851a:	d01b      	beq.n	8008554 <USB_ActivateEndpoint+0x180>
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4413      	add	r3, r2
 8008526:	881b      	ldrh	r3, [r3, #0]
 8008528:	b29b      	uxth	r3, r3
 800852a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800852e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008532:	823b      	strh	r3, [r7, #16]
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	441a      	add	r2, r3
 800853e:	8a3b      	ldrh	r3, [r7, #16]
 8008540:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008544:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008548:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800854c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008550:	b29b      	uxth	r3, r3
 8008552:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	78db      	ldrb	r3, [r3, #3]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d020      	beq.n	800859e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	4413      	add	r3, r2
 8008566:	881b      	ldrh	r3, [r3, #0]
 8008568:	b29b      	uxth	r3, r3
 800856a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800856e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008572:	81bb      	strh	r3, [r7, #12]
 8008574:	89bb      	ldrh	r3, [r7, #12]
 8008576:	f083 0320 	eor.w	r3, r3, #32
 800857a:	81bb      	strh	r3, [r7, #12]
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	441a      	add	r2, r3
 8008586:	89bb      	ldrh	r3, [r7, #12]
 8008588:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800858c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008590:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008598:	b29b      	uxth	r3, r3
 800859a:	8013      	strh	r3, [r2, #0]
 800859c:	e2d5      	b.n	8008b4a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4413      	add	r3, r2
 80085a8:	881b      	ldrh	r3, [r3, #0]
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085b4:	81fb      	strh	r3, [r7, #14]
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	441a      	add	r2, r3
 80085c0:	89fb      	ldrh	r3, [r7, #14]
 80085c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	8013      	strh	r3, [r2, #0]
 80085d6:	e2b8      	b.n	8008b4a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	633b      	str	r3, [r7, #48]	@ 0x30
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	461a      	mov	r2, r3
 80085e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e8:	4413      	add	r3, r2
 80085ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	011a      	lsls	r2, r3, #4
 80085f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f4:	4413      	add	r3, r2
 80085f6:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80085fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	88db      	ldrh	r3, [r3, #6]
 8008600:	085b      	lsrs	r3, r3, #1
 8008602:	b29b      	uxth	r3, r3
 8008604:	005b      	lsls	r3, r3, #1
 8008606:	b29a      	uxth	r2, r3
 8008608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800860a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008616:	b29b      	uxth	r3, r3
 8008618:	461a      	mov	r2, r3
 800861a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800861c:	4413      	add	r3, r2
 800861e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	011a      	lsls	r2, r3, #4
 8008626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008628:	4413      	add	r3, r2
 800862a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800862e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008632:	881b      	ldrh	r3, [r3, #0]
 8008634:	b29b      	uxth	r3, r3
 8008636:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800863a:	b29a      	uxth	r2, r3
 800863c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863e:	801a      	strh	r2, [r3, #0]
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d10a      	bne.n	800865e <USB_ActivateEndpoint+0x28a>
 8008648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800864a:	881b      	ldrh	r3, [r3, #0]
 800864c:	b29b      	uxth	r3, r3
 800864e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008656:	b29a      	uxth	r2, r3
 8008658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865a:	801a      	strh	r2, [r3, #0]
 800865c:	e039      	b.n	80086d2 <USB_ActivateEndpoint+0x2fe>
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	2b3e      	cmp	r3, #62	@ 0x3e
 8008664:	d818      	bhi.n	8008698 <USB_ActivateEndpoint+0x2c4>
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	085b      	lsrs	r3, r3, #1
 800866c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	f003 0301 	and.w	r3, r3, #1
 8008676:	2b00      	cmp	r3, #0
 8008678:	d002      	beq.n	8008680 <USB_ActivateEndpoint+0x2ac>
 800867a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800867c:	3301      	adds	r3, #1
 800867e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008682:	881b      	ldrh	r3, [r3, #0]
 8008684:	b29a      	uxth	r2, r3
 8008686:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008688:	b29b      	uxth	r3, r3
 800868a:	029b      	lsls	r3, r3, #10
 800868c:	b29b      	uxth	r3, r3
 800868e:	4313      	orrs	r3, r2
 8008690:	b29a      	uxth	r2, r3
 8008692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008694:	801a      	strh	r2, [r3, #0]
 8008696:	e01c      	b.n	80086d2 <USB_ActivateEndpoint+0x2fe>
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	095b      	lsrs	r3, r3, #5
 800869e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	f003 031f 	and.w	r3, r3, #31
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d102      	bne.n	80086b2 <USB_ActivateEndpoint+0x2de>
 80086ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80086ae:	3b01      	subs	r3, #1
 80086b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80086b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b4:	881b      	ldrh	r3, [r3, #0]
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	029b      	lsls	r3, r3, #10
 80086be:	b29b      	uxth	r3, r3
 80086c0:	4313      	orrs	r3, r2
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4413      	add	r3, r2
 80086dc:	881b      	ldrh	r3, [r3, #0]
 80086de:	847b      	strh	r3, [r7, #34]	@ 0x22
 80086e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80086e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d01b      	beq.n	8008722 <USB_ActivateEndpoint+0x34e>
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	4413      	add	r3, r2
 80086f4:	881b      	ldrh	r3, [r3, #0]
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008700:	843b      	strh	r3, [r7, #32]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	441a      	add	r2, r3
 800870c:	8c3b      	ldrh	r3, [r7, #32]
 800870e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008712:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008716:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800871a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800871e:	b29b      	uxth	r3, r3
 8008720:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d124      	bne.n	8008774 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4413      	add	r3, r2
 8008734:	881b      	ldrh	r3, [r3, #0]
 8008736:	b29b      	uxth	r3, r3
 8008738:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800873c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008740:	83bb      	strh	r3, [r7, #28]
 8008742:	8bbb      	ldrh	r3, [r7, #28]
 8008744:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008748:	83bb      	strh	r3, [r7, #28]
 800874a:	8bbb      	ldrh	r3, [r7, #28]
 800874c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008750:	83bb      	strh	r3, [r7, #28]
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	441a      	add	r2, r3
 800875c:	8bbb      	ldrh	r3, [r7, #28]
 800875e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008762:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008766:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800876a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800876e:	b29b      	uxth	r3, r3
 8008770:	8013      	strh	r3, [r2, #0]
 8008772:	e1ea      	b.n	8008b4a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	4413      	add	r3, r2
 800877e:	881b      	ldrh	r3, [r3, #0]
 8008780:	b29b      	uxth	r3, r3
 8008782:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800878a:	83fb      	strh	r3, [r7, #30]
 800878c:	8bfb      	ldrh	r3, [r7, #30]
 800878e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008792:	83fb      	strh	r3, [r7, #30]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	441a      	add	r2, r3
 800879e:	8bfb      	ldrh	r3, [r7, #30]
 80087a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	8013      	strh	r3, [r2, #0]
 80087b4:	e1c9      	b.n	8008b4a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	78db      	ldrb	r3, [r3, #3]
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d11e      	bne.n	80087fc <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	881b      	ldrh	r3, [r3, #0]
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087d4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	441a      	add	r2, r3
 80087e2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80087e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087ee:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80087f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	8013      	strh	r3, [r2, #0]
 80087fa:	e01d      	b.n	8008838 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	4413      	add	r3, r2
 8008806:	881b      	ldrh	r3, [r3, #0]
 8008808:	b29b      	uxth	r3, r3
 800880a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800880e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008812:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	441a      	add	r2, r3
 8008820:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008824:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008828:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800882c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008834:	b29b      	uxth	r3, r3
 8008836:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008842:	b29b      	uxth	r3, r3
 8008844:	461a      	mov	r2, r3
 8008846:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008848:	4413      	add	r3, r2
 800884a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	011a      	lsls	r2, r3, #4
 8008852:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008854:	4413      	add	r3, r2
 8008856:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800885a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	891b      	ldrh	r3, [r3, #8]
 8008860:	085b      	lsrs	r3, r3, #1
 8008862:	b29b      	uxth	r3, r3
 8008864:	005b      	lsls	r3, r3, #1
 8008866:	b29a      	uxth	r2, r3
 8008868:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800886a:	801a      	strh	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008876:	b29b      	uxth	r3, r3
 8008878:	461a      	mov	r2, r3
 800887a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800887c:	4413      	add	r3, r2
 800887e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	011a      	lsls	r2, r3, #4
 8008886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008888:	4413      	add	r3, r2
 800888a:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800888e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	895b      	ldrh	r3, [r3, #10]
 8008894:	085b      	lsrs	r3, r3, #1
 8008896:	b29b      	uxth	r3, r3
 8008898:	005b      	lsls	r3, r3, #1
 800889a:	b29a      	uxth	r2, r3
 800889c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800889e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	785b      	ldrb	r3, [r3, #1]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f040 8093 	bne.w	80089d0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	881b      	ldrh	r3, [r3, #0]
 80088b6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80088ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80088be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d01b      	beq.n	80088fe <USB_ActivateEndpoint+0x52a>
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	4413      	add	r3, r2
 80088d0:	881b      	ldrh	r3, [r3, #0]
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088dc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	441a      	add	r2, r3
 80088e8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80088ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80088f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	4413      	add	r3, r2
 8008908:	881b      	ldrh	r3, [r3, #0]
 800890a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800890c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800890e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008912:	2b00      	cmp	r3, #0
 8008914:	d01b      	beq.n	800894e <USB_ActivateEndpoint+0x57a>
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	4413      	add	r3, r2
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	b29b      	uxth	r3, r3
 8008924:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008928:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800892c:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	441a      	add	r2, r3
 8008938:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800893a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800893e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008942:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008946:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800894a:	b29b      	uxth	r3, r3
 800894c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	4413      	add	r3, r2
 8008958:	881b      	ldrh	r3, [r3, #0]
 800895a:	b29b      	uxth	r3, r3
 800895c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008964:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008966:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008968:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800896c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800896e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008970:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008974:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	441a      	add	r2, r3
 8008980:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008982:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008986:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800898a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800898e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008992:	b29b      	uxth	r3, r3
 8008994:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4413      	add	r3, r2
 80089a0:	881b      	ldrh	r3, [r3, #0]
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089ac:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	441a      	add	r2, r3
 80089b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80089ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	8013      	strh	r3, [r2, #0]
 80089ce:	e0bc      	b.n	8008b4a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	4413      	add	r3, r2
 80089da:	881b      	ldrh	r3, [r3, #0]
 80089dc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80089e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80089e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d01d      	beq.n	8008a28 <USB_ActivateEndpoint+0x654>
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	881b      	ldrh	r3, [r3, #0]
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a02:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	441a      	add	r2, r3
 8008a10:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008a14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4413      	add	r3, r2
 8008a32:	881b      	ldrh	r3, [r3, #0]
 8008a34:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8008a38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d01d      	beq.n	8008a80 <USB_ActivateEndpoint+0x6ac>
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4413      	add	r3, r2
 8008a4e:	881b      	ldrh	r3, [r3, #0]
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a5a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	441a      	add	r2, r3
 8008a68:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8008a6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a78:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	78db      	ldrb	r3, [r3, #3]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d024      	beq.n	8008ad2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4413      	add	r3, r2
 8008a92:	881b      	ldrh	r3, [r3, #0]
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a9e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008aa2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008aa6:	f083 0320 	eor.w	r3, r3, #32
 8008aaa:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	441a      	add	r2, r3
 8008ab8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008abc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ac0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ac4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ac8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	8013      	strh	r3, [r2, #0]
 8008ad0:	e01d      	b.n	8008b0e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	4413      	add	r3, r2
 8008adc:	881b      	ldrh	r3, [r3, #0]
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ae4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ae8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	441a      	add	r2, r3
 8008af6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008afa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008afe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4413      	add	r3, r2
 8008b18:	881b      	ldrh	r3, [r3, #0]
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b24:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	441a      	add	r2, r3
 8008b32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008b36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008b4a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3774      	adds	r7, #116	@ 0x74
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop

08008b5c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b08d      	sub	sp, #52	@ 0x34
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	7b1b      	ldrb	r3, [r3, #12]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f040 808e 	bne.w	8008c8c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	785b      	ldrb	r3, [r3, #1]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d044      	beq.n	8008c02 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4413      	add	r3, r2
 8008b82:	881b      	ldrh	r3, [r3, #0]
 8008b84:	81bb      	strh	r3, [r7, #12]
 8008b86:	89bb      	ldrh	r3, [r7, #12]
 8008b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d01b      	beq.n	8008bc8 <USB_DeactivateEndpoint+0x6c>
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	4413      	add	r3, r2
 8008b9a:	881b      	ldrh	r3, [r3, #0]
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ba6:	817b      	strh	r3, [r7, #10]
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	441a      	add	r2, r3
 8008bb2:	897b      	ldrh	r3, [r7, #10]
 8008bb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bc0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	881b      	ldrh	r3, [r3, #0]
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bde:	813b      	strh	r3, [r7, #8]
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	441a      	add	r2, r3
 8008bea:	893b      	ldrh	r3, [r7, #8]
 8008bec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	8013      	strh	r3, [r2, #0]
 8008c00:	e192      	b.n	8008f28 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4413      	add	r3, r2
 8008c0c:	881b      	ldrh	r3, [r3, #0]
 8008c0e:	827b      	strh	r3, [r7, #18]
 8008c10:	8a7b      	ldrh	r3, [r7, #18]
 8008c12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d01b      	beq.n	8008c52 <USB_DeactivateEndpoint+0xf6>
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	881b      	ldrh	r3, [r3, #0]
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c30:	823b      	strh	r3, [r7, #16]
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	441a      	add	r2, r3
 8008c3c:	8a3b      	ldrh	r3, [r7, #16]
 8008c3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	881b      	ldrh	r3, [r3, #0]
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c68:	81fb      	strh	r3, [r7, #14]
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	441a      	add	r2, r3
 8008c74:	89fb      	ldrh	r3, [r7, #14]
 8008c76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	8013      	strh	r3, [r2, #0]
 8008c8a:	e14d      	b.n	8008f28 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	785b      	ldrb	r3, [r3, #1]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f040 80a5 	bne.w	8008de0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	881b      	ldrh	r3, [r3, #0]
 8008ca2:	843b      	strh	r3, [r7, #32]
 8008ca4:	8c3b      	ldrh	r3, [r7, #32]
 8008ca6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d01b      	beq.n	8008ce6 <USB_DeactivateEndpoint+0x18a>
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4413      	add	r3, r2
 8008cb8:	881b      	ldrh	r3, [r3, #0]
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cc4:	83fb      	strh	r3, [r7, #30]
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	441a      	add	r2, r3
 8008cd0:	8bfb      	ldrh	r3, [r7, #30]
 8008cd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cda:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	4413      	add	r3, r2
 8008cf0:	881b      	ldrh	r3, [r3, #0]
 8008cf2:	83bb      	strh	r3, [r7, #28]
 8008cf4:	8bbb      	ldrh	r3, [r7, #28]
 8008cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d01b      	beq.n	8008d36 <USB_DeactivateEndpoint+0x1da>
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4413      	add	r3, r2
 8008d08:	881b      	ldrh	r3, [r3, #0]
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d14:	837b      	strh	r3, [r7, #26]
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	441a      	add	r2, r3
 8008d20:	8b7b      	ldrh	r3, [r7, #26]
 8008d22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d2e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	4413      	add	r3, r2
 8008d40:	881b      	ldrh	r3, [r3, #0]
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d4c:	833b      	strh	r3, [r7, #24]
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	441a      	add	r2, r3
 8008d58:	8b3b      	ldrh	r3, [r7, #24]
 8008d5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d66:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	4413      	add	r3, r2
 8008d78:	881b      	ldrh	r3, [r3, #0]
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d84:	82fb      	strh	r3, [r7, #22]
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	441a      	add	r2, r3
 8008d90:	8afb      	ldrh	r3, [r7, #22]
 8008d92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	4413      	add	r3, r2
 8008db0:	881b      	ldrh	r3, [r3, #0]
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008db8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008dbc:	82bb      	strh	r3, [r7, #20]
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	441a      	add	r2, r3
 8008dc8:	8abb      	ldrh	r3, [r7, #20]
 8008dca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	8013      	strh	r3, [r2, #0]
 8008dde:	e0a3      	b.n	8008f28 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4413      	add	r3, r2
 8008dea:	881b      	ldrh	r3, [r3, #0]
 8008dec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008dee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008df0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d01b      	beq.n	8008e30 <USB_DeactivateEndpoint+0x2d4>
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	4413      	add	r3, r2
 8008e02:	881b      	ldrh	r3, [r3, #0]
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e0e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	441a      	add	r2, r3
 8008e1a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008e1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	4413      	add	r3, r2
 8008e3a:	881b      	ldrh	r3, [r3, #0]
 8008e3c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008e3e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d01b      	beq.n	8008e80 <USB_DeactivateEndpoint+0x324>
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	4413      	add	r3, r2
 8008e52:	881b      	ldrh	r3, [r3, #0]
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e5e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	441a      	add	r2, r3
 8008e6a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008e6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e78:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	4413      	add	r3, r2
 8008e8a:	881b      	ldrh	r3, [r3, #0]
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e96:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	441a      	add	r2, r3
 8008ea2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008ea4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ea8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008eac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008eb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4413      	add	r3, r2
 8008ec2:	881b      	ldrh	r3, [r3, #0]
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008eca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ece:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	441a      	add	r2, r3
 8008eda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008edc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ee0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ee4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	4413      	add	r3, r2
 8008efa:	881b      	ldrh	r3, [r3, #0]
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f06:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	441a      	add	r2, r3
 8008f12:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008f14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3734      	adds	r7, #52	@ 0x34
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr

08008f36 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b0c2      	sub	sp, #264	@ 0x108
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f44:	6018      	str	r0, [r3, #0]
 8008f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f4e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	785b      	ldrb	r3, [r3, #1]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	f040 86b7 	bne.w	8009cd0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	699a      	ldr	r2, [r3, #24]
 8008f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d908      	bls.n	8008f90 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008f7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008f8e:	e007      	b.n	8008fa0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	7b1b      	ldrb	r3, [r3, #12]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d13a      	bne.n	8009026 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	6959      	ldr	r1, [r3, #20]
 8008fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	88da      	ldrh	r2, [r3, #6]
 8008fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008fd2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008fd6:	6800      	ldr	r0, [r0, #0]
 8008fd8:	f001 fc8d 	bl	800a8f6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008fdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fe0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	613b      	str	r3, [r7, #16]
 8008fe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	613b      	str	r3, [r7, #16]
 8009000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	011a      	lsls	r2, r3, #4
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	4413      	add	r3, r2
 8009012:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009016:	60fb      	str	r3, [r7, #12]
 8009018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800901c:	b29a      	uxth	r2, r3
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	801a      	strh	r2, [r3, #0]
 8009022:	f000 be1f 	b.w	8009c64 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800902a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	78db      	ldrb	r3, [r3, #3]
 8009032:	2b02      	cmp	r3, #2
 8009034:	f040 8462 	bne.w	80098fc <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800903c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	6a1a      	ldr	r2, [r3, #32]
 8009044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	429a      	cmp	r2, r3
 8009052:	f240 83df 	bls.w	8009814 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800905a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	4413      	add	r3, r2
 8009070:	881b      	ldrh	r3, [r3, #0]
 8009072:	b29b      	uxth	r3, r3
 8009074:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009078:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800907c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8009080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009084:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800908e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	441a      	add	r2, r3
 800909a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800909e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090a6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80090aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80090b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	6a1a      	ldr	r2, [r3, #32]
 80090be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090c2:	1ad2      	subs	r2, r2, r3
 80090c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80090d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	4413      	add	r3, r2
 80090ea:	881b      	ldrh	r3, [r3, #0]
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f000 81c7 	beq.w	8009486 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80090f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	633b      	str	r3, [r7, #48]	@ 0x30
 8009104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	785b      	ldrb	r3, [r3, #1]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d177      	bne.n	8009204 <USB_EPStartXfer+0x2ce>
 8009114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009118:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009124:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800912e:	b29b      	uxth	r3, r3
 8009130:	461a      	mov	r2, r3
 8009132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009134:	4413      	add	r3, r2
 8009136:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800913c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	011a      	lsls	r2, r3, #4
 8009146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009148:	4413      	add	r3, r2
 800914a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800914e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009152:	881b      	ldrh	r3, [r3, #0]
 8009154:	b29b      	uxth	r3, r3
 8009156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800915a:	b29a      	uxth	r2, r3
 800915c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800915e:	801a      	strh	r2, [r3, #0]
 8009160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009164:	2b00      	cmp	r3, #0
 8009166:	d10a      	bne.n	800917e <USB_EPStartXfer+0x248>
 8009168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800916a:	881b      	ldrh	r3, [r3, #0]
 800916c:	b29b      	uxth	r3, r3
 800916e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009176:	b29a      	uxth	r2, r3
 8009178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800917a:	801a      	strh	r2, [r3, #0]
 800917c:	e067      	b.n	800924e <USB_EPStartXfer+0x318>
 800917e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009182:	2b3e      	cmp	r3, #62	@ 0x3e
 8009184:	d81c      	bhi.n	80091c0 <USB_EPStartXfer+0x28a>
 8009186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800918a:	085b      	lsrs	r3, r3, #1
 800918c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009194:	f003 0301 	and.w	r3, r3, #1
 8009198:	2b00      	cmp	r3, #0
 800919a:	d004      	beq.n	80091a6 <USB_EPStartXfer+0x270>
 800919c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80091a0:	3301      	adds	r3, #1
 80091a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80091a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a8:	881b      	ldrh	r3, [r3, #0]
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	029b      	lsls	r3, r3, #10
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	4313      	orrs	r3, r2
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091bc:	801a      	strh	r2, [r3, #0]
 80091be:	e046      	b.n	800924e <USB_EPStartXfer+0x318>
 80091c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091c4:	095b      	lsrs	r3, r3, #5
 80091c6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80091ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091ce:	f003 031f 	and.w	r3, r3, #31
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d104      	bne.n	80091e0 <USB_EPStartXfer+0x2aa>
 80091d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80091da:	3b01      	subs	r3, #1
 80091dc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80091e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e2:	881b      	ldrh	r3, [r3, #0]
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	029b      	lsls	r3, r3, #10
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	4313      	orrs	r3, r2
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009200:	801a      	strh	r2, [r3, #0]
 8009202:	e024      	b.n	800924e <USB_EPStartXfer+0x318>
 8009204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	785b      	ldrb	r3, [r3, #1]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d11c      	bne.n	800924e <USB_EPStartXfer+0x318>
 8009214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009218:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009222:	b29b      	uxth	r3, r3
 8009224:	461a      	mov	r2, r3
 8009226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009228:	4413      	add	r3, r2
 800922a:	633b      	str	r3, [r7, #48]	@ 0x30
 800922c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	011a      	lsls	r2, r3, #4
 800923a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800923c:	4413      	add	r3, r2
 800923e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009242:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009248:	b29a      	uxth	r2, r3
 800924a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800924c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800924e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009252:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	895b      	ldrh	r3, [r3, #10]
 800925a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800925e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009262:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	6959      	ldr	r1, [r3, #20]
 800926a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800926e:	b29b      	uxth	r3, r3
 8009270:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009274:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009278:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800927c:	6800      	ldr	r0, [r0, #0]
 800927e:	f001 fb3a 	bl	800a8f6 <USB_WritePMA>
            ep->xfer_buff += len;
 8009282:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009286:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	695a      	ldr	r2, [r3, #20]
 800928e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009292:	441a      	add	r2, r3
 8009294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80092a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	6a1a      	ldr	r2, [r3, #32]
 80092ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d90f      	bls.n	80092dc <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80092bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	6a1a      	ldr	r2, [r3, #32]
 80092c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092cc:	1ad2      	subs	r2, r2, r3
 80092ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	621a      	str	r2, [r3, #32]
 80092da:	e00e      	b.n	80092fa <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80092dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	6a1b      	ldr	r3, [r3, #32]
 80092e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80092ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2200      	movs	r2, #0
 80092f8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80092fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	785b      	ldrb	r3, [r3, #1]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d177      	bne.n	80093fa <USB_EPStartXfer+0x4c4>
 800930a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800930e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	61bb      	str	r3, [r7, #24]
 8009316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800931a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009324:	b29b      	uxth	r3, r3
 8009326:	461a      	mov	r2, r3
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	4413      	add	r3, r2
 800932c:	61bb      	str	r3, [r7, #24]
 800932e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009332:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	011a      	lsls	r2, r3, #4
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	4413      	add	r3, r2
 8009340:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009344:	617b      	str	r3, [r7, #20]
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	881b      	ldrh	r3, [r3, #0]
 800934a:	b29b      	uxth	r3, r3
 800934c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009350:	b29a      	uxth	r2, r3
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	801a      	strh	r2, [r3, #0]
 8009356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800935a:	2b00      	cmp	r3, #0
 800935c:	d10a      	bne.n	8009374 <USB_EPStartXfer+0x43e>
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	881b      	ldrh	r3, [r3, #0]
 8009362:	b29b      	uxth	r3, r3
 8009364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800936c:	b29a      	uxth	r2, r3
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	801a      	strh	r2, [r3, #0]
 8009372:	e06d      	b.n	8009450 <USB_EPStartXfer+0x51a>
 8009374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009378:	2b3e      	cmp	r3, #62	@ 0x3e
 800937a:	d81c      	bhi.n	80093b6 <USB_EPStartXfer+0x480>
 800937c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009380:	085b      	lsrs	r3, r3, #1
 8009382:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800938a:	f003 0301 	and.w	r3, r3, #1
 800938e:	2b00      	cmp	r3, #0
 8009390:	d004      	beq.n	800939c <USB_EPStartXfer+0x466>
 8009392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009396:	3301      	adds	r3, #1
 8009398:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	881b      	ldrh	r3, [r3, #0]
 80093a0:	b29a      	uxth	r2, r3
 80093a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	029b      	lsls	r3, r3, #10
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	4313      	orrs	r3, r2
 80093ae:	b29a      	uxth	r2, r3
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	801a      	strh	r2, [r3, #0]
 80093b4:	e04c      	b.n	8009450 <USB_EPStartXfer+0x51a>
 80093b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093ba:	095b      	lsrs	r3, r3, #5
 80093bc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80093c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093c4:	f003 031f 	and.w	r3, r3, #31
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d104      	bne.n	80093d6 <USB_EPStartXfer+0x4a0>
 80093cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093d0:	3b01      	subs	r3, #1
 80093d2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	881b      	ldrh	r3, [r3, #0]
 80093da:	b29a      	uxth	r2, r3
 80093dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	029b      	lsls	r3, r3, #10
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	4313      	orrs	r3, r2
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	801a      	strh	r2, [r3, #0]
 80093f8:	e02a      	b.n	8009450 <USB_EPStartXfer+0x51a>
 80093fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	785b      	ldrb	r3, [r3, #1]
 8009406:	2b01      	cmp	r3, #1
 8009408:	d122      	bne.n	8009450 <USB_EPStartXfer+0x51a>
 800940a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800940e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	623b      	str	r3, [r7, #32]
 8009416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800941a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009424:	b29b      	uxth	r3, r3
 8009426:	461a      	mov	r2, r3
 8009428:	6a3b      	ldr	r3, [r7, #32]
 800942a:	4413      	add	r3, r2
 800942c:	623b      	str	r3, [r7, #32]
 800942e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009432:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	011a      	lsls	r2, r3, #4
 800943c:	6a3b      	ldr	r3, [r7, #32]
 800943e:	4413      	add	r3, r2
 8009440:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009444:	61fb      	str	r3, [r7, #28]
 8009446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800944a:	b29a      	uxth	r2, r3
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009454:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	891b      	ldrh	r3, [r3, #8]
 800945c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009464:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	6959      	ldr	r1, [r3, #20]
 800946c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009470:	b29b      	uxth	r3, r3
 8009472:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009476:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800947a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800947e:	6800      	ldr	r0, [r0, #0]
 8009480:	f001 fa39 	bl	800a8f6 <USB_WritePMA>
 8009484:	e3ee      	b.n	8009c64 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800948a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	785b      	ldrb	r3, [r3, #1]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d177      	bne.n	8009586 <USB_EPStartXfer+0x650>
 8009496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800949a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	461a      	mov	r2, r3
 80094b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094b6:	4413      	add	r3, r2
 80094b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	011a      	lsls	r2, r3, #4
 80094c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094ca:	4413      	add	r3, r2
 80094cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80094d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80094d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094d4:	881b      	ldrh	r3, [r3, #0]
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094dc:	b29a      	uxth	r2, r3
 80094de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094e0:	801a      	strh	r2, [r3, #0]
 80094e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10a      	bne.n	8009500 <USB_EPStartXfer+0x5ca>
 80094ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094ec:	881b      	ldrh	r3, [r3, #0]
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094f8:	b29a      	uxth	r2, r3
 80094fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094fc:	801a      	strh	r2, [r3, #0]
 80094fe:	e06d      	b.n	80095dc <USB_EPStartXfer+0x6a6>
 8009500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009504:	2b3e      	cmp	r3, #62	@ 0x3e
 8009506:	d81c      	bhi.n	8009542 <USB_EPStartXfer+0x60c>
 8009508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800950c:	085b      	lsrs	r3, r3, #1
 800950e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009516:	f003 0301 	and.w	r3, r3, #1
 800951a:	2b00      	cmp	r3, #0
 800951c:	d004      	beq.n	8009528 <USB_EPStartXfer+0x5f2>
 800951e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009522:	3301      	adds	r3, #1
 8009524:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800952a:	881b      	ldrh	r3, [r3, #0]
 800952c:	b29a      	uxth	r2, r3
 800952e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009532:	b29b      	uxth	r3, r3
 8009534:	029b      	lsls	r3, r3, #10
 8009536:	b29b      	uxth	r3, r3
 8009538:	4313      	orrs	r3, r2
 800953a:	b29a      	uxth	r2, r3
 800953c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800953e:	801a      	strh	r2, [r3, #0]
 8009540:	e04c      	b.n	80095dc <USB_EPStartXfer+0x6a6>
 8009542:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009546:	095b      	lsrs	r3, r3, #5
 8009548:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800954c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009550:	f003 031f 	and.w	r3, r3, #31
 8009554:	2b00      	cmp	r3, #0
 8009556:	d104      	bne.n	8009562 <USB_EPStartXfer+0x62c>
 8009558:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800955c:	3b01      	subs	r3, #1
 800955e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009562:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009564:	881b      	ldrh	r3, [r3, #0]
 8009566:	b29a      	uxth	r2, r3
 8009568:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800956c:	b29b      	uxth	r3, r3
 800956e:	029b      	lsls	r3, r3, #10
 8009570:	b29b      	uxth	r3, r3
 8009572:	4313      	orrs	r3, r2
 8009574:	b29b      	uxth	r3, r3
 8009576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800957a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800957e:	b29a      	uxth	r2, r3
 8009580:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009582:	801a      	strh	r2, [r3, #0]
 8009584:	e02a      	b.n	80095dc <USB_EPStartXfer+0x6a6>
 8009586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800958a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	785b      	ldrb	r3, [r3, #1]
 8009592:	2b01      	cmp	r3, #1
 8009594:	d122      	bne.n	80095dc <USB_EPStartXfer+0x6a6>
 8009596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800959a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80095a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	461a      	mov	r2, r3
 80095b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095b6:	4413      	add	r3, r2
 80095b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80095ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	011a      	lsls	r2, r3, #4
 80095c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095ca:	4413      	add	r3, r2
 80095cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80095d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095d6:	b29a      	uxth	r2, r3
 80095d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80095dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	891b      	ldrh	r3, [r3, #8]
 80095e8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	6959      	ldr	r1, [r3, #20]
 80095f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009602:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009606:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800960a:	6800      	ldr	r0, [r0, #0]
 800960c:	f001 f973 	bl	800a8f6 <USB_WritePMA>
            ep->xfer_buff += len;
 8009610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	695a      	ldr	r2, [r3, #20]
 800961c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009620:	441a      	add	r2, r3
 8009622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800962e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009632:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	6a1a      	ldr	r2, [r3, #32]
 800963a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800963e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	429a      	cmp	r2, r3
 8009648:	d90f      	bls.n	800966a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800964a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800964e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	6a1a      	ldr	r2, [r3, #32]
 8009656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800965a:	1ad2      	subs	r2, r2, r3
 800965c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	621a      	str	r2, [r3, #32]
 8009668:	e00e      	b.n	8009688 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800966a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800966e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	6a1b      	ldr	r3, [r3, #32]
 8009676:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800967a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800967e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2200      	movs	r2, #0
 8009686:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800968c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	643b      	str	r3, [r7, #64]	@ 0x40
 8009694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009698:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	785b      	ldrb	r3, [r3, #1]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d177      	bne.n	8009794 <USB_EPStartXfer+0x85e>
 80096a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80096b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096be:	b29b      	uxth	r3, r3
 80096c0:	461a      	mov	r2, r3
 80096c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c4:	4413      	add	r3, r2
 80096c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80096c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	011a      	lsls	r2, r3, #4
 80096d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d8:	4413      	add	r3, r2
 80096da:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80096de:	637b      	str	r3, [r7, #52]	@ 0x34
 80096e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096e2:	881b      	ldrh	r3, [r3, #0]
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096ee:	801a      	strh	r2, [r3, #0]
 80096f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d10a      	bne.n	800970e <USB_EPStartXfer+0x7d8>
 80096f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096fa:	881b      	ldrh	r3, [r3, #0]
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009706:	b29a      	uxth	r2, r3
 8009708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800970a:	801a      	strh	r2, [r3, #0]
 800970c:	e067      	b.n	80097de <USB_EPStartXfer+0x8a8>
 800970e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009712:	2b3e      	cmp	r3, #62	@ 0x3e
 8009714:	d81c      	bhi.n	8009750 <USB_EPStartXfer+0x81a>
 8009716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800971a:	085b      	lsrs	r3, r3, #1
 800971c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009724:	f003 0301 	and.w	r3, r3, #1
 8009728:	2b00      	cmp	r3, #0
 800972a:	d004      	beq.n	8009736 <USB_EPStartXfer+0x800>
 800972c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009730:	3301      	adds	r3, #1
 8009732:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009738:	881b      	ldrh	r3, [r3, #0]
 800973a:	b29a      	uxth	r2, r3
 800973c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009740:	b29b      	uxth	r3, r3
 8009742:	029b      	lsls	r3, r3, #10
 8009744:	b29b      	uxth	r3, r3
 8009746:	4313      	orrs	r3, r2
 8009748:	b29a      	uxth	r2, r3
 800974a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800974c:	801a      	strh	r2, [r3, #0]
 800974e:	e046      	b.n	80097de <USB_EPStartXfer+0x8a8>
 8009750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009754:	095b      	lsrs	r3, r3, #5
 8009756:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800975a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800975e:	f003 031f 	and.w	r3, r3, #31
 8009762:	2b00      	cmp	r3, #0
 8009764:	d104      	bne.n	8009770 <USB_EPStartXfer+0x83a>
 8009766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800976a:	3b01      	subs	r3, #1
 800976c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009772:	881b      	ldrh	r3, [r3, #0]
 8009774:	b29a      	uxth	r2, r3
 8009776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800977a:	b29b      	uxth	r3, r3
 800977c:	029b      	lsls	r3, r3, #10
 800977e:	b29b      	uxth	r3, r3
 8009780:	4313      	orrs	r3, r2
 8009782:	b29b      	uxth	r3, r3
 8009784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800978c:	b29a      	uxth	r2, r3
 800978e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009790:	801a      	strh	r2, [r3, #0]
 8009792:	e024      	b.n	80097de <USB_EPStartXfer+0x8a8>
 8009794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	785b      	ldrb	r3, [r3, #1]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d11c      	bne.n	80097de <USB_EPStartXfer+0x8a8>
 80097a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	461a      	mov	r2, r3
 80097b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097b8:	4413      	add	r3, r2
 80097ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80097bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	011a      	lsls	r2, r3, #4
 80097ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097cc:	4413      	add	r3, r2
 80097ce:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80097d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097d8:	b29a      	uxth	r2, r3
 80097da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80097de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	895b      	ldrh	r3, [r3, #10]
 80097ea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	6959      	ldr	r1, [r3, #20]
 80097fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097fe:	b29b      	uxth	r3, r3
 8009800:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009804:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009808:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800980c:	6800      	ldr	r0, [r0, #0]
 800980e:	f001 f872 	bl	800a8f6 <USB_WritePMA>
 8009812:	e227      	b.n	8009c64 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	6a1b      	ldr	r3, [r3, #32]
 8009820:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009828:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009832:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4413      	add	r3, r2
 800983e:	881b      	ldrh	r3, [r3, #0]
 8009840:	b29b      	uxth	r3, r3
 8009842:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800984a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800984e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009852:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800985c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	441a      	add	r2, r3
 8009868:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800986c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009870:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009874:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800987c:	b29b      	uxth	r3, r3
 800987e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009884:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800988c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009890:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800989a:	b29b      	uxth	r3, r3
 800989c:	461a      	mov	r2, r3
 800989e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098a0:	4413      	add	r3, r2
 80098a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80098a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	011a      	lsls	r2, r3, #4
 80098b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098b4:	4413      	add	r3, r2
 80098b6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80098ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80098bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098c0:	b29a      	uxth	r2, r3
 80098c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80098c4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80098c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	891b      	ldrh	r3, [r3, #8]
 80098d2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80098d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	6959      	ldr	r1, [r3, #20]
 80098e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80098ec:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80098f0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80098f4:	6800      	ldr	r0, [r0, #0]
 80098f6:	f000 fffe 	bl	800a8f6 <USB_WritePMA>
 80098fa:	e1b3      	b.n	8009c64 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80098fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	6a1a      	ldr	r2, [r3, #32]
 8009908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800990c:	1ad2      	subs	r2, r2, r3
 800990e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009912:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800991a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800991e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	4413      	add	r3, r2
 8009934:	881b      	ldrh	r3, [r3, #0]
 8009936:	b29b      	uxth	r3, r3
 8009938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800993c:	2b00      	cmp	r3, #0
 800993e:	f000 80c6 	beq.w	8009ace <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009946:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	673b      	str	r3, [r7, #112]	@ 0x70
 800994e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009952:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	785b      	ldrb	r3, [r3, #1]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d177      	bne.n	8009a4e <USB_EPStartXfer+0xb18>
 800995e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009962:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	66bb      	str	r3, [r7, #104]	@ 0x68
 800996a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800996e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009978:	b29b      	uxth	r3, r3
 800997a:	461a      	mov	r2, r3
 800997c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800997e:	4413      	add	r3, r2
 8009980:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009986:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	011a      	lsls	r2, r3, #4
 8009990:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009992:	4413      	add	r3, r2
 8009994:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009998:	667b      	str	r3, [r7, #100]	@ 0x64
 800999a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800999c:	881b      	ldrh	r3, [r3, #0]
 800999e:	b29b      	uxth	r3, r3
 80099a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80099a8:	801a      	strh	r2, [r3, #0]
 80099aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d10a      	bne.n	80099c8 <USB_EPStartXfer+0xa92>
 80099b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80099b4:	881b      	ldrh	r3, [r3, #0]
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80099c4:	801a      	strh	r2, [r3, #0]
 80099c6:	e067      	b.n	8009a98 <USB_EPStartXfer+0xb62>
 80099c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80099ce:	d81c      	bhi.n	8009a0a <USB_EPStartXfer+0xad4>
 80099d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099d4:	085b      	lsrs	r3, r3, #1
 80099d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80099da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099de:	f003 0301 	and.w	r3, r3, #1
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d004      	beq.n	80099f0 <USB_EPStartXfer+0xaba>
 80099e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80099ea:	3301      	adds	r3, #1
 80099ec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80099f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80099f2:	881b      	ldrh	r3, [r3, #0]
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	029b      	lsls	r3, r3, #10
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	4313      	orrs	r3, r2
 8009a02:	b29a      	uxth	r2, r3
 8009a04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a06:	801a      	strh	r2, [r3, #0]
 8009a08:	e046      	b.n	8009a98 <USB_EPStartXfer+0xb62>
 8009a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a0e:	095b      	lsrs	r3, r3, #5
 8009a10:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a18:	f003 031f 	and.w	r3, r3, #31
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d104      	bne.n	8009a2a <USB_EPStartXfer+0xaf4>
 8009a20:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009a24:	3b01      	subs	r3, #1
 8009a26:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009a2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a2c:	881b      	ldrh	r3, [r3, #0]
 8009a2e:	b29a      	uxth	r2, r3
 8009a30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	029b      	lsls	r3, r3, #10
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a4a:	801a      	strh	r2, [r3, #0]
 8009a4c:	e024      	b.n	8009a98 <USB_EPStartXfer+0xb62>
 8009a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	785b      	ldrb	r3, [r3, #1]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d11c      	bne.n	8009a98 <USB_EPStartXfer+0xb62>
 8009a5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	461a      	mov	r2, r3
 8009a70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a72:	4413      	add	r3, r2
 8009a74:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	011a      	lsls	r2, r3, #4
 8009a84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a86:	4413      	add	r3, r2
 8009a88:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009a8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a92:	b29a      	uxth	r2, r3
 8009a94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a96:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009a98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	895b      	ldrh	r3, [r3, #10]
 8009aa4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	6959      	ldr	r1, [r3, #20]
 8009ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009abe:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009ac2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009ac6:	6800      	ldr	r0, [r0, #0]
 8009ac8:	f000 ff15 	bl	800a8f6 <USB_WritePMA>
 8009acc:	e0ca      	b.n	8009c64 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ad2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	785b      	ldrb	r3, [r3, #1]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d177      	bne.n	8009bce <USB_EPStartXfer+0xc98>
 8009ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ae2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	461a      	mov	r2, r3
 8009afc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009afe:	4413      	add	r3, r2
 8009b00:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	011a      	lsls	r2, r3, #4
 8009b10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009b12:	4413      	add	r3, r2
 8009b14:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009b18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009b1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b1c:	881b      	ldrh	r3, [r3, #0]
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b28:	801a      	strh	r2, [r3, #0]
 8009b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d10a      	bne.n	8009b48 <USB_EPStartXfer+0xc12>
 8009b32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b34:	881b      	ldrh	r3, [r3, #0]
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b44:	801a      	strh	r2, [r3, #0]
 8009b46:	e073      	b.n	8009c30 <USB_EPStartXfer+0xcfa>
 8009b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b4e:	d81c      	bhi.n	8009b8a <USB_EPStartXfer+0xc54>
 8009b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b54:	085b      	lsrs	r3, r3, #1
 8009b56:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b5e:	f003 0301 	and.w	r3, r3, #1
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d004      	beq.n	8009b70 <USB_EPStartXfer+0xc3a>
 8009b66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009b70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b72:	881b      	ldrh	r3, [r3, #0]
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	029b      	lsls	r3, r3, #10
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	4313      	orrs	r3, r2
 8009b82:	b29a      	uxth	r2, r3
 8009b84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b86:	801a      	strh	r2, [r3, #0]
 8009b88:	e052      	b.n	8009c30 <USB_EPStartXfer+0xcfa>
 8009b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b8e:	095b      	lsrs	r3, r3, #5
 8009b90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b98:	f003 031f 	and.w	r3, r3, #31
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d104      	bne.n	8009baa <USB_EPStartXfer+0xc74>
 8009ba0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009baa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009bac:	881b      	ldrh	r3, [r3, #0]
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	029b      	lsls	r3, r3, #10
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bc6:	b29a      	uxth	r2, r3
 8009bc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009bca:	801a      	strh	r2, [r3, #0]
 8009bcc:	e030      	b.n	8009c30 <USB_EPStartXfer+0xcfa>
 8009bce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	785b      	ldrb	r3, [r3, #1]
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d128      	bne.n	8009c30 <USB_EPStartXfer+0xcfa>
 8009bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009be2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009c02:	4413      	add	r3, r2
 8009c04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	011a      	lsls	r2, r3, #4
 8009c16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009c1a:	4413      	add	r3, r2
 8009c1c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009c20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009c2e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009c30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	891b      	ldrh	r3, [r3, #8]
 8009c3c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	6959      	ldr	r1, [r3, #20]
 8009c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009c56:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009c5a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009c5e:	6800      	ldr	r0, [r0, #0]
 8009c60:	f000 fe49 	bl	800a8f6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	4413      	add	r3, r2
 8009c7e:	881b      	ldrh	r3, [r3, #0]
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c8a:	817b      	strh	r3, [r7, #10]
 8009c8c:	897b      	ldrh	r3, [r7, #10]
 8009c8e:	f083 0310 	eor.w	r3, r3, #16
 8009c92:	817b      	strh	r3, [r7, #10]
 8009c94:	897b      	ldrh	r3, [r7, #10]
 8009c96:	f083 0320 	eor.w	r3, r3, #32
 8009c9a:	817b      	strh	r3, [r7, #10]
 8009c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ca0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009caa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	441a      	add	r2, r3
 8009cb6:	897b      	ldrh	r3, [r7, #10]
 8009cb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009cbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009cc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009cc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	8013      	strh	r3, [r2, #0]
 8009ccc:	f000 bcdf 	b.w	800a68e <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	7b1b      	ldrb	r3, [r3, #12]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	f040 80bc 	bne.w	8009e5a <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ce6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	699a      	ldr	r2, [r3, #24]
 8009cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d917      	bls.n	8009d2e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	691b      	ldr	r3, [r3, #16]
 8009d0a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8009d0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	699a      	ldr	r2, [r3, #24]
 8009d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d1e:	1ad2      	subs	r2, r2, r3
 8009d20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	619a      	str	r2, [r3, #24]
 8009d2c:	e00e      	b.n	8009d4c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8009d2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	699b      	ldr	r3, [r3, #24]
 8009d3a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8009d3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009d5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009d70:	4413      	add	r3, r2
 8009d72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	011a      	lsls	r2, r3, #4
 8009d84:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009d88:	4413      	add	r3, r2
 8009d8a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009d8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009d96:	881b      	ldrh	r3, [r3, #0]
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d9e:	b29a      	uxth	r2, r3
 8009da0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009da4:	801a      	strh	r2, [r3, #0]
 8009da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d10d      	bne.n	8009dca <USB_EPStartXfer+0xe94>
 8009dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009db2:	881b      	ldrh	r3, [r3, #0]
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dbe:	b29a      	uxth	r2, r3
 8009dc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009dc4:	801a      	strh	r2, [r3, #0]
 8009dc6:	f000 bc28 	b.w	800a61a <USB_EPStartXfer+0x16e4>
 8009dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dce:	2b3e      	cmp	r3, #62	@ 0x3e
 8009dd0:	d81f      	bhi.n	8009e12 <USB_EPStartXfer+0xedc>
 8009dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dd6:	085b      	lsrs	r3, r3, #1
 8009dd8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009de0:	f003 0301 	and.w	r3, r3, #1
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d004      	beq.n	8009df2 <USB_EPStartXfer+0xebc>
 8009de8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009dec:	3301      	adds	r3, #1
 8009dee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009df2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009df6:	881b      	ldrh	r3, [r3, #0]
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	029b      	lsls	r3, r3, #10
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	4313      	orrs	r3, r2
 8009e06:	b29a      	uxth	r2, r3
 8009e08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e0c:	801a      	strh	r2, [r3, #0]
 8009e0e:	f000 bc04 	b.w	800a61a <USB_EPStartXfer+0x16e4>
 8009e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e16:	095b      	lsrs	r3, r3, #5
 8009e18:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e20:	f003 031f 	and.w	r3, r3, #31
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d104      	bne.n	8009e32 <USB_EPStartXfer+0xefc>
 8009e28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009e32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e36:	881b      	ldrh	r3, [r3, #0]
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	029b      	lsls	r3, r3, #10
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	4313      	orrs	r3, r2
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e50:	b29a      	uxth	r2, r3
 8009e52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e56:	801a      	strh	r2, [r3, #0]
 8009e58:	e3df      	b.n	800a61a <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009e5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	78db      	ldrb	r3, [r3, #3]
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	f040 8218 	bne.w	800a29c <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	785b      	ldrb	r3, [r3, #1]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f040 809d 	bne.w	8009fb8 <USB_EPStartXfer+0x1082>
 8009e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009e8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ea2:	4413      	add	r3, r2
 8009ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009eac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	011a      	lsls	r2, r3, #4
 8009eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009eba:	4413      	add	r3, r2
 8009ebc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009ec0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009ec4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009ec8:	881b      	ldrh	r3, [r3, #0]
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ed0:	b29a      	uxth	r2, r3
 8009ed2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009ed6:	801a      	strh	r2, [r3, #0]
 8009ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	691b      	ldr	r3, [r3, #16]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d10c      	bne.n	8009f02 <USB_EPStartXfer+0xfcc>
 8009ee8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009eec:	881b      	ldrh	r3, [r3, #0]
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ef4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ef8:	b29a      	uxth	r2, r3
 8009efa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009efe:	801a      	strh	r2, [r3, #0]
 8009f00:	e08f      	b.n	800a022 <USB_EPStartXfer+0x10ec>
 8009f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f10:	d826      	bhi.n	8009f60 <USB_EPStartXfer+0x102a>
 8009f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	691b      	ldr	r3, [r3, #16]
 8009f1e:	085b      	lsrs	r3, r3, #1
 8009f20:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	f003 0301 	and.w	r3, r3, #1
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d004      	beq.n	8009f42 <USB_EPStartXfer+0x100c>
 8009f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009f42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f46:	881b      	ldrh	r3, [r3, #0]
 8009f48:	b29a      	uxth	r2, r3
 8009f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	029b      	lsls	r3, r3, #10
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	4313      	orrs	r3, r2
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f5c:	801a      	strh	r2, [r3, #0]
 8009f5e:	e060      	b.n	800a022 <USB_EPStartXfer+0x10ec>
 8009f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	691b      	ldr	r3, [r3, #16]
 8009f6c:	095b      	lsrs	r3, r3, #5
 8009f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	691b      	ldr	r3, [r3, #16]
 8009f7e:	f003 031f 	and.w	r3, r3, #31
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d104      	bne.n	8009f90 <USB_EPStartXfer+0x105a>
 8009f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009f90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f94:	881b      	ldrh	r3, [r3, #0]
 8009f96:	b29a      	uxth	r2, r3
 8009f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	029b      	lsls	r3, r3, #10
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fae:	b29a      	uxth	r2, r3
 8009fb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009fb4:	801a      	strh	r2, [r3, #0]
 8009fb6:	e034      	b.n	800a022 <USB_EPStartXfer+0x10ec>
 8009fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	785b      	ldrb	r3, [r3, #1]
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d12c      	bne.n	800a022 <USB_EPStartXfer+0x10ec>
 8009fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009fd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009fec:	4413      	add	r3, r2
 8009fee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009ff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ff6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	011a      	lsls	r2, r3, #4
 800a000:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a004:	4413      	add	r3, r2
 800a006:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a00a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a00e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a012:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	b29a      	uxth	r2, r3
 800a01c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a020:	801a      	strh	r2, [r3, #0]
 800a022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a026:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a030:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a034:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	785b      	ldrb	r3, [r3, #1]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	f040 809d 	bne.w	800a17c <USB_EPStartXfer+0x1246>
 800a042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a046:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a054:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a05e:	b29b      	uxth	r3, r3
 800a060:	461a      	mov	r2, r3
 800a062:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a066:	4413      	add	r3, r2
 800a068:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a06c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	011a      	lsls	r2, r3, #4
 800a07a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a07e:	4413      	add	r3, r2
 800a080:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a084:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a088:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a08c:	881b      	ldrh	r3, [r3, #0]
 800a08e:	b29b      	uxth	r3, r3
 800a090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a094:	b29a      	uxth	r2, r3
 800a096:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a09a:	801a      	strh	r2, [r3, #0]
 800a09c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	691b      	ldr	r3, [r3, #16]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10c      	bne.n	800a0c6 <USB_EPStartXfer+0x1190>
 800a0ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a0b0:	881b      	ldrh	r3, [r3, #0]
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0bc:	b29a      	uxth	r2, r3
 800a0be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a0c2:	801a      	strh	r2, [r3, #0]
 800a0c4:	e088      	b.n	800a1d8 <USB_EPStartXfer+0x12a2>
 800a0c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	2b3e      	cmp	r3, #62	@ 0x3e
 800a0d4:	d826      	bhi.n	800a124 <USB_EPStartXfer+0x11ee>
 800a0d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	085b      	lsrs	r3, r3, #1
 800a0e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a0e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	691b      	ldr	r3, [r3, #16]
 800a0f4:	f003 0301 	and.w	r3, r3, #1
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d004      	beq.n	800a106 <USB_EPStartXfer+0x11d0>
 800a0fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a100:	3301      	adds	r3, #1
 800a102:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a106:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a10a:	881b      	ldrh	r3, [r3, #0]
 800a10c:	b29a      	uxth	r2, r3
 800a10e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a112:	b29b      	uxth	r3, r3
 800a114:	029b      	lsls	r3, r3, #10
 800a116:	b29b      	uxth	r3, r3
 800a118:	4313      	orrs	r3, r2
 800a11a:	b29a      	uxth	r2, r3
 800a11c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a120:	801a      	strh	r2, [r3, #0]
 800a122:	e059      	b.n	800a1d8 <USB_EPStartXfer+0x12a2>
 800a124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	691b      	ldr	r3, [r3, #16]
 800a130:	095b      	lsrs	r3, r3, #5
 800a132:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a13a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	691b      	ldr	r3, [r3, #16]
 800a142:	f003 031f 	and.w	r3, r3, #31
 800a146:	2b00      	cmp	r3, #0
 800a148:	d104      	bne.n	800a154 <USB_EPStartXfer+0x121e>
 800a14a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a14e:	3b01      	subs	r3, #1
 800a150:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a154:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a158:	881b      	ldrh	r3, [r3, #0]
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a160:	b29b      	uxth	r3, r3
 800a162:	029b      	lsls	r3, r3, #10
 800a164:	b29b      	uxth	r3, r3
 800a166:	4313      	orrs	r3, r2
 800a168:	b29b      	uxth	r3, r3
 800a16a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a16e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a172:	b29a      	uxth	r2, r3
 800a174:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a178:	801a      	strh	r2, [r3, #0]
 800a17a:	e02d      	b.n	800a1d8 <USB_EPStartXfer+0x12a2>
 800a17c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a180:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	785b      	ldrb	r3, [r3, #1]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d125      	bne.n	800a1d8 <USB_EPStartXfer+0x12a2>
 800a18c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a190:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	461a      	mov	r2, r3
 800a19e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a1a2:	4413      	add	r3, r2
 800a1a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a1a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	011a      	lsls	r2, r3, #4
 800a1b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a1ba:	4413      	add	r3, r2
 800a1bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a1c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a1c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	691b      	ldr	r3, [r3, #16]
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a1d6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a1d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	69db      	ldr	r3, [r3, #28]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	f000 8218 	beq.w	800a61a <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a1ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	4413      	add	r3, r2
 800a204:	881b      	ldrh	r3, [r3, #0]
 800a206:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a20a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a20e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a212:	2b00      	cmp	r3, #0
 800a214:	d005      	beq.n	800a222 <USB_EPStartXfer+0x12ec>
 800a216:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a21a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d10d      	bne.n	800a23e <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a222:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a226:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f040 81f5 	bne.w	800a61a <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a230:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a238:	2b00      	cmp	r3, #0
 800a23a:	f040 81ee 	bne.w	800a61a <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a23e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a242:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a24c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	4413      	add	r3, r2
 800a258:	881b      	ldrh	r3, [r3, #0]
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a260:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a264:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800a268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a26c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	441a      	add	r2, r3
 800a282:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800a286:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a28a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a28e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a292:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a296:	b29b      	uxth	r3, r3
 800a298:	8013      	strh	r3, [r2, #0]
 800a29a:	e1be      	b.n	800a61a <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a29c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	78db      	ldrb	r3, [r3, #3]
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	f040 81b4 	bne.w	800a616 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a2ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	699a      	ldr	r2, [r3, #24]
 800a2ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	691b      	ldr	r3, [r3, #16]
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d917      	bls.n	800a2fa <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800a2ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800a2da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	699a      	ldr	r2, [r3, #24]
 800a2e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2ea:	1ad2      	subs	r2, r2, r3
 800a2ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	619a      	str	r2, [r3, #24]
 800a2f8:	e00e      	b.n	800a318 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800a2fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	699b      	ldr	r3, [r3, #24]
 800a306:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800a30a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a30e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2200      	movs	r2, #0
 800a316:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a31c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	785b      	ldrb	r3, [r3, #1]
 800a324:	2b00      	cmp	r3, #0
 800a326:	f040 8085 	bne.w	800a434 <USB_EPStartXfer+0x14fe>
 800a32a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a32e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a33c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a346:	b29b      	uxth	r3, r3
 800a348:	461a      	mov	r2, r3
 800a34a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a34e:	4413      	add	r3, r2
 800a350:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	011a      	lsls	r2, r3, #4
 800a362:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a366:	4413      	add	r3, r2
 800a368:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a36c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a370:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a374:	881b      	ldrh	r3, [r3, #0]
 800a376:	b29b      	uxth	r3, r3
 800a378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a382:	801a      	strh	r2, [r3, #0]
 800a384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d10c      	bne.n	800a3a6 <USB_EPStartXfer+0x1470>
 800a38c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a390:	881b      	ldrh	r3, [r3, #0]
 800a392:	b29b      	uxth	r3, r3
 800a394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a39c:	b29a      	uxth	r2, r3
 800a39e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a3a2:	801a      	strh	r2, [r3, #0]
 800a3a4:	e077      	b.n	800a496 <USB_EPStartXfer+0x1560>
 800a3a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3aa:	2b3e      	cmp	r3, #62	@ 0x3e
 800a3ac:	d81e      	bhi.n	800a3ec <USB_EPStartXfer+0x14b6>
 800a3ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3b2:	085b      	lsrs	r3, r3, #1
 800a3b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a3b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3bc:	f003 0301 	and.w	r3, r3, #1
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d004      	beq.n	800a3ce <USB_EPStartXfer+0x1498>
 800a3c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a3ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a3d2:	881b      	ldrh	r3, [r3, #0]
 800a3d4:	b29a      	uxth	r2, r3
 800a3d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	029b      	lsls	r3, r3, #10
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	b29a      	uxth	r2, r3
 800a3e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a3e8:	801a      	strh	r2, [r3, #0]
 800a3ea:	e054      	b.n	800a496 <USB_EPStartXfer+0x1560>
 800a3ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3f0:	095b      	lsrs	r3, r3, #5
 800a3f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a3f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3fa:	f003 031f 	and.w	r3, r3, #31
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d104      	bne.n	800a40c <USB_EPStartXfer+0x14d6>
 800a402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a406:	3b01      	subs	r3, #1
 800a408:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a40c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a410:	881b      	ldrh	r3, [r3, #0]
 800a412:	b29a      	uxth	r2, r3
 800a414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a418:	b29b      	uxth	r3, r3
 800a41a:	029b      	lsls	r3, r3, #10
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	4313      	orrs	r3, r2
 800a420:	b29b      	uxth	r3, r3
 800a422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a42a:	b29a      	uxth	r2, r3
 800a42c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a430:	801a      	strh	r2, [r3, #0]
 800a432:	e030      	b.n	800a496 <USB_EPStartXfer+0x1560>
 800a434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	785b      	ldrb	r3, [r3, #1]
 800a440:	2b01      	cmp	r3, #1
 800a442:	d128      	bne.n	800a496 <USB_EPStartXfer+0x1560>
 800a444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a448:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a456:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a460:	b29b      	uxth	r3, r3
 800a462:	461a      	mov	r2, r3
 800a464:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a468:	4413      	add	r3, r2
 800a46a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a46e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a472:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	011a      	lsls	r2, r3, #4
 800a47c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a480:	4413      	add	r3, r2
 800a482:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a486:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a48a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a48e:	b29a      	uxth	r2, r3
 800a490:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a494:	801a      	strh	r2, [r3, #0]
 800a496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a49a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a4a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	785b      	ldrb	r3, [r3, #1]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	f040 8085 	bne.w	800a5c0 <USB_EPStartXfer+0x168a>
 800a4b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a4c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a4da:	4413      	add	r3, r2
 800a4dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a4e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	011a      	lsls	r2, r3, #4
 800a4ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a4f2:	4413      	add	r3, r2
 800a4f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a4f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a4fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a500:	881b      	ldrh	r3, [r3, #0]
 800a502:	b29b      	uxth	r3, r3
 800a504:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a508:	b29a      	uxth	r2, r3
 800a50a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a50e:	801a      	strh	r2, [r3, #0]
 800a510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a514:	2b00      	cmp	r3, #0
 800a516:	d10c      	bne.n	800a532 <USB_EPStartXfer+0x15fc>
 800a518:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a51c:	881b      	ldrh	r3, [r3, #0]
 800a51e:	b29b      	uxth	r3, r3
 800a520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a528:	b29a      	uxth	r2, r3
 800a52a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a52e:	801a      	strh	r2, [r3, #0]
 800a530:	e073      	b.n	800a61a <USB_EPStartXfer+0x16e4>
 800a532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a536:	2b3e      	cmp	r3, #62	@ 0x3e
 800a538:	d81e      	bhi.n	800a578 <USB_EPStartXfer+0x1642>
 800a53a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a53e:	085b      	lsrs	r3, r3, #1
 800a540:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a548:	f003 0301 	and.w	r3, r3, #1
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d004      	beq.n	800a55a <USB_EPStartXfer+0x1624>
 800a550:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a554:	3301      	adds	r3, #1
 800a556:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a55a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a55e:	881b      	ldrh	r3, [r3, #0]
 800a560:	b29a      	uxth	r2, r3
 800a562:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a566:	b29b      	uxth	r3, r3
 800a568:	029b      	lsls	r3, r3, #10
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	4313      	orrs	r3, r2
 800a56e:	b29a      	uxth	r2, r3
 800a570:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a574:	801a      	strh	r2, [r3, #0]
 800a576:	e050      	b.n	800a61a <USB_EPStartXfer+0x16e4>
 800a578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a57c:	095b      	lsrs	r3, r3, #5
 800a57e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a586:	f003 031f 	and.w	r3, r3, #31
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d104      	bne.n	800a598 <USB_EPStartXfer+0x1662>
 800a58e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a592:	3b01      	subs	r3, #1
 800a594:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a598:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a59c:	881b      	ldrh	r3, [r3, #0]
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	029b      	lsls	r3, r3, #10
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5b6:	b29a      	uxth	r2, r3
 800a5b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a5bc:	801a      	strh	r2, [r3, #0]
 800a5be:	e02c      	b.n	800a61a <USB_EPStartXfer+0x16e4>
 800a5c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	785b      	ldrb	r3, [r3, #1]
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d124      	bne.n	800a61a <USB_EPStartXfer+0x16e4>
 800a5d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a5e6:	4413      	add	r3, r2
 800a5e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a5ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	011a      	lsls	r2, r3, #4
 800a5fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a5fe:	4413      	add	r3, r2
 800a600:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a604:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a60c:	b29a      	uxth	r2, r3
 800a60e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a612:	801a      	strh	r2, [r3, #0]
 800a614:	e001      	b.n	800a61a <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800a616:	2301      	movs	r3, #1
 800a618:	e03a      	b.n	800a690 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a61a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a61e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a628:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	009b      	lsls	r3, r3, #2
 800a632:	4413      	add	r3, r2
 800a634:	881b      	ldrh	r3, [r3, #0]
 800a636:	b29b      	uxth	r3, r3
 800a638:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a63c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a640:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a644:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a648:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a64c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a650:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a654:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a658:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a65c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a660:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a66a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	441a      	add	r2, r3
 800a676:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a67a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a67e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a682:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a68e:	2300      	movs	r3, #0
}
 800a690:	4618      	mov	r0, r3
 800a692:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a69a:	b480      	push	{r7}
 800a69c:	b085      	sub	sp, #20
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
 800a6a2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	785b      	ldrb	r3, [r3, #1]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d020      	beq.n	800a6ee <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	4413      	add	r3, r2
 800a6b6:	881b      	ldrh	r3, [r3, #0]
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6c2:	81bb      	strh	r3, [r7, #12]
 800a6c4:	89bb      	ldrh	r3, [r7, #12]
 800a6c6:	f083 0310 	eor.w	r3, r3, #16
 800a6ca:	81bb      	strh	r3, [r7, #12]
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	441a      	add	r2, r3
 800a6d6:	89bb      	ldrh	r3, [r7, #12]
 800a6d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a6e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	8013      	strh	r3, [r2, #0]
 800a6ec:	e01f      	b.n	800a72e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	4413      	add	r3, r2
 800a6f8:	881b      	ldrh	r3, [r3, #0]
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a700:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a704:	81fb      	strh	r3, [r7, #14]
 800a706:	89fb      	ldrh	r3, [r7, #14]
 800a708:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a70c:	81fb      	strh	r3, [r7, #14]
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	441a      	add	r2, r3
 800a718:	89fb      	ldrh	r3, [r7, #14]
 800a71a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a71e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a722:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	3714      	adds	r7, #20
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b087      	sub	sp, #28
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	7b1b      	ldrb	r3, [r3, #12]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	f040 809d 	bne.w	800a88a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	785b      	ldrb	r3, [r3, #1]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d04c      	beq.n	800a7f2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	4413      	add	r3, r2
 800a762:	881b      	ldrh	r3, [r3, #0]
 800a764:	823b      	strh	r3, [r7, #16]
 800a766:	8a3b      	ldrh	r3, [r7, #16]
 800a768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d01b      	beq.n	800a7a8 <USB_EPClearStall+0x6c>
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	4413      	add	r3, r2
 800a77a:	881b      	ldrh	r3, [r3, #0]
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a786:	81fb      	strh	r3, [r7, #14]
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	441a      	add	r2, r3
 800a792:	89fb      	ldrh	r3, [r7, #14]
 800a794:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a798:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a79c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	78db      	ldrb	r3, [r3, #3]
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d06c      	beq.n	800a88a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	4413      	add	r3, r2
 800a7ba:	881b      	ldrh	r3, [r3, #0]
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a7c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7c6:	81bb      	strh	r3, [r7, #12]
 800a7c8:	89bb      	ldrh	r3, [r7, #12]
 800a7ca:	f083 0320 	eor.w	r3, r3, #32
 800a7ce:	81bb      	strh	r3, [r7, #12]
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	441a      	add	r2, r3
 800a7da:	89bb      	ldrh	r3, [r7, #12]
 800a7dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	8013      	strh	r3, [r2, #0]
 800a7f0:	e04b      	b.n	800a88a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	4413      	add	r3, r2
 800a7fc:	881b      	ldrh	r3, [r3, #0]
 800a7fe:	82fb      	strh	r3, [r7, #22]
 800a800:	8afb      	ldrh	r3, [r7, #22]
 800a802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a806:	2b00      	cmp	r3, #0
 800a808:	d01b      	beq.n	800a842 <USB_EPClearStall+0x106>
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	4413      	add	r3, r2
 800a814:	881b      	ldrh	r3, [r3, #0]
 800a816:	b29b      	uxth	r3, r3
 800a818:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a81c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a820:	82bb      	strh	r3, [r7, #20]
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	441a      	add	r2, r3
 800a82c:	8abb      	ldrh	r3, [r7, #20]
 800a82e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a832:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a836:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a83a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a83e:	b29b      	uxth	r3, r3
 800a840:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	009b      	lsls	r3, r3, #2
 800a84a:	4413      	add	r3, r2
 800a84c:	881b      	ldrh	r3, [r3, #0]
 800a84e:	b29b      	uxth	r3, r3
 800a850:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a854:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a858:	827b      	strh	r3, [r7, #18]
 800a85a:	8a7b      	ldrh	r3, [r7, #18]
 800a85c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a860:	827b      	strh	r3, [r7, #18]
 800a862:	8a7b      	ldrh	r3, [r7, #18]
 800a864:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a868:	827b      	strh	r3, [r7, #18]
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	441a      	add	r2, r3
 800a874:	8a7b      	ldrh	r3, [r7, #18]
 800a876:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a87a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a87e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a886:	b29b      	uxth	r3, r3
 800a888:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a88a:	2300      	movs	r3, #0
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	371c      	adds	r7, #28
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a8a4:	78fb      	ldrb	r3, [r7, #3]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d103      	bne.n	800a8b2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2280      	movs	r2, #128	@ 0x80
 800a8ae:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	370c      	adds	r7, #12
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a8c8:	2300      	movs	r3, #0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	370c      	adds	r7, #12
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr

0800a8d6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a8d6:	b480      	push	{r7}
 800a8d8:	b085      	sub	sp, #20
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3714      	adds	r7, #20
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr

0800a8f6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a8f6:	b480      	push	{r7}
 800a8f8:	b08b      	sub	sp, #44	@ 0x2c
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	60f8      	str	r0, [r7, #12]
 800a8fe:	60b9      	str	r1, [r7, #8]
 800a900:	4611      	mov	r1, r2
 800a902:	461a      	mov	r2, r3
 800a904:	460b      	mov	r3, r1
 800a906:	80fb      	strh	r3, [r7, #6]
 800a908:	4613      	mov	r3, r2
 800a90a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a90c:	88bb      	ldrh	r3, [r7, #4]
 800a90e:	3301      	adds	r3, #1
 800a910:	085b      	lsrs	r3, r3, #1
 800a912:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a91c:	88fb      	ldrh	r3, [r7, #6]
 800a91e:	005a      	lsls	r2, r3, #1
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	4413      	add	r3, r2
 800a924:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a928:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a92e:	e01e      	b.n	800a96e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a936:	69fb      	ldr	r3, [r7, #28]
 800a938:	3301      	adds	r3, #1
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	021b      	lsls	r3, r3, #8
 800a93e:	b21a      	sxth	r2, r3
 800a940:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a944:	4313      	orrs	r3, r2
 800a946:	b21b      	sxth	r3, r3
 800a948:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a94a:	6a3b      	ldr	r3, [r7, #32]
 800a94c:	8a7a      	ldrh	r2, [r7, #18]
 800a94e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a950:	6a3b      	ldr	r3, [r7, #32]
 800a952:	3302      	adds	r3, #2
 800a954:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a956:	6a3b      	ldr	r3, [r7, #32]
 800a958:	3302      	adds	r3, #2
 800a95a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800a95c:	69fb      	ldr	r3, [r7, #28]
 800a95e:	3301      	adds	r3, #1
 800a960:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	3301      	adds	r3, #1
 800a966:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a96a:	3b01      	subs	r3, #1
 800a96c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a970:	2b00      	cmp	r3, #0
 800a972:	d1dd      	bne.n	800a930 <USB_WritePMA+0x3a>
  }
}
 800a974:	bf00      	nop
 800a976:	bf00      	nop
 800a978:	372c      	adds	r7, #44	@ 0x2c
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr

0800a982 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a982:	b480      	push	{r7}
 800a984:	b08b      	sub	sp, #44	@ 0x2c
 800a986:	af00      	add	r7, sp, #0
 800a988:	60f8      	str	r0, [r7, #12]
 800a98a:	60b9      	str	r1, [r7, #8]
 800a98c:	4611      	mov	r1, r2
 800a98e:	461a      	mov	r2, r3
 800a990:	460b      	mov	r3, r1
 800a992:	80fb      	strh	r3, [r7, #6]
 800a994:	4613      	mov	r3, r2
 800a996:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a998:	88bb      	ldrh	r3, [r7, #4]
 800a99a:	085b      	lsrs	r3, r3, #1
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a9a8:	88fb      	ldrh	r3, [r7, #6]
 800a9aa:	005a      	lsls	r2, r3, #1
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	4413      	add	r3, r2
 800a9b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a9b4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a9b6:	69bb      	ldr	r3, [r7, #24]
 800a9b8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9ba:	e01b      	b.n	800a9f4 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a9bc:	6a3b      	ldr	r3, [r7, #32]
 800a9be:	881b      	ldrh	r3, [r3, #0]
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a9c4:	6a3b      	ldr	r3, [r7, #32]
 800a9c6:	3302      	adds	r3, #2
 800a9c8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	b2da      	uxtb	r2, r3
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	0a1b      	lsrs	r3, r3, #8
 800a9dc:	b2da      	uxtb	r2, r3
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a9e2:	69fb      	ldr	r3, [r7, #28]
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a9e8:	6a3b      	ldr	r3, [r7, #32]
 800a9ea:	3302      	adds	r3, #2
 800a9ec:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800a9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d1e0      	bne.n	800a9bc <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a9fa:	88bb      	ldrh	r3, [r7, #4]
 800a9fc:	f003 0301 	and.w	r3, r3, #1
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d007      	beq.n	800aa16 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800aa06:	6a3b      	ldr	r3, [r7, #32]
 800aa08:	881b      	ldrh	r3, [r3, #0]
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	b2da      	uxtb	r2, r3
 800aa12:	69fb      	ldr	r3, [r7, #28]
 800aa14:	701a      	strb	r2, [r3, #0]
  }
}
 800aa16:	bf00      	nop
 800aa18:	372c      	adds	r7, #44	@ 0x2c
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr

0800aa22 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b084      	sub	sp, #16
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 800aa32:	2302      	movs	r3, #2
 800aa34:	2203      	movs	r2, #3
 800aa36:	2181      	movs	r1, #129	@ 0x81
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f001 fd98 	bl	800c56e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2201      	movs	r2, #1
 800aa42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800aa44:	2302      	movs	r3, #2
 800aa46:	2203      	movs	r2, #3
 800aa48:	2101      	movs	r1, #1
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f001 fd8f 	bl	800c56e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800aa58:	2024      	movs	r0, #36	@ 0x24
 800aa5a:	f001 fe9d 	bl	800c798 <USBD_static_malloc>
 800aa5e:	4602      	mov	r2, r0
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d102      	bne.n	800aa76 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 800aa70:	2301      	movs	r3, #1
 800aa72:	73fb      	strb	r3, [r7, #15]
 800aa74:	e012      	b.n	800aa9c <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa7c:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	2200      	movs	r2, #0
 800aa82:	f883 2020 	strb.w	r2, [r3, #32]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800aa90:	68ba      	ldr	r2, [r7, #8]
 800aa92:	230d      	movs	r3, #13
 800aa94:	2101      	movs	r1, #1
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f001 fe5a 	bl	800c750 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 800aa9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3710      	adds	r7, #16
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b082      	sub	sp, #8
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
 800aaae:	460b      	mov	r3, r1
 800aab0:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800aab2:	2181      	movs	r1, #129	@ 0x81
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f001 fd80 	bl	800c5ba <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2200      	movs	r2, #0
 800aabe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800aac0:	2101      	movs	r1, #1
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f001 fd79 	bl	800c5ba <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00e      	beq.n	800aaf8 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaea:	4618      	mov	r0, r3
 800aaec:	f001 fe62 	bl	800c7b4 <USBD_static_free>
    pdev->pClassData = NULL;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }
  return USBD_OK;
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3708      	adds	r7, #8
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
	...

0800ab04 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b088      	sub	sp, #32
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab14:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800ab16:	2300      	movs	r3, #0
 800ab18:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 800ab22:	2300      	movs	r3, #0
 800ab24:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d051      	beq.n	800abd6 <USBD_CUSTOM_HID_Setup+0xd2>
 800ab32:	2b20      	cmp	r3, #32
 800ab34:	f040 80d8 	bne.w	800ace8 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	785b      	ldrb	r3, [r3, #1]
 800ab3c:	3b02      	subs	r3, #2
 800ab3e:	2b09      	cmp	r3, #9
 800ab40:	d841      	bhi.n	800abc6 <USBD_CUSTOM_HID_Setup+0xc2>
 800ab42:	a201      	add	r2, pc, #4	@ (adr r2, 800ab48 <USBD_CUSTOM_HID_Setup+0x44>)
 800ab44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab48:	0800aba1 	.word	0x0800aba1
 800ab4c:	0800ab7f 	.word	0x0800ab7f
 800ab50:	0800abc7 	.word	0x0800abc7
 800ab54:	0800abc7 	.word	0x0800abc7
 800ab58:	0800abc7 	.word	0x0800abc7
 800ab5c:	0800abc7 	.word	0x0800abc7
 800ab60:	0800abc7 	.word	0x0800abc7
 800ab64:	0800abb1 	.word	0x0800abb1
 800ab68:	0800ab8f 	.word	0x0800ab8f
 800ab6c:	0800ab71 	.word	0x0800ab71
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	885b      	ldrh	r3, [r3, #2]
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	461a      	mov	r2, r3
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	611a      	str	r2, [r3, #16]
          break;
 800ab7c:	e02a      	b.n	800abd4 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	3310      	adds	r3, #16
 800ab82:	2201      	movs	r2, #1
 800ab84:	4619      	mov	r1, r3
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f001 f9a4 	bl	800bed4 <USBD_CtlSendData>
          break;
 800ab8c:	e022      	b.n	800abd4 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	885b      	ldrh	r3, [r3, #2]
 800ab92:	0a1b      	lsrs	r3, r3, #8
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	461a      	mov	r2, r3
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	615a      	str	r2, [r3, #20]
          break;
 800ab9e:	e019      	b.n	800abd4 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	3314      	adds	r3, #20
 800aba4:	2201      	movs	r2, #1
 800aba6:	4619      	mov	r1, r3
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f001 f993 	bl	800bed4 <USBD_CtlSendData>
          break;
 800abae:	e011      	b.n	800abd4 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	2201      	movs	r2, #1
 800abb4:	61da      	str	r2, [r3, #28]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800abb6:	6939      	ldr	r1, [r7, #16]
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	88db      	ldrh	r3, [r3, #6]
 800abbc:	461a      	mov	r2, r3
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f001 f9b6 	bl	800bf30 <USBD_CtlPrepareRx>
          break;
 800abc4:	e006      	b.n	800abd4 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 800abc6:	6839      	ldr	r1, [r7, #0]
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f001 f918 	bl	800bdfe <USBD_CtlError>
          ret = USBD_FAIL;
 800abce:	2302      	movs	r3, #2
 800abd0:	75fb      	strb	r3, [r7, #23]
          break;
 800abd2:	bf00      	nop
      }
      break;
 800abd4:	e08f      	b.n	800acf6 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	785b      	ldrb	r3, [r3, #1]
 800abda:	2b0b      	cmp	r3, #11
 800abdc:	d87c      	bhi.n	800acd8 <USBD_CUSTOM_HID_Setup+0x1d4>
 800abde:	a201      	add	r2, pc, #4	@ (adr r2, 800abe4 <USBD_CUSTOM_HID_Setup+0xe0>)
 800abe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe4:	0800ac15 	.word	0x0800ac15
 800abe8:	0800acd9 	.word	0x0800acd9
 800abec:	0800acd9 	.word	0x0800acd9
 800abf0:	0800acd9 	.word	0x0800acd9
 800abf4:	0800acd9 	.word	0x0800acd9
 800abf8:	0800acd9 	.word	0x0800acd9
 800abfc:	0800ac3d 	.word	0x0800ac3d
 800ac00:	0800acd9 	.word	0x0800acd9
 800ac04:	0800acd9 	.word	0x0800acd9
 800ac08:	0800acd9 	.word	0x0800acd9
 800ac0c:	0800ac8b 	.word	0x0800ac8b
 800ac10:	0800acb3 	.word	0x0800acb3
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac1a:	2b03      	cmp	r3, #3
 800ac1c:	d107      	bne.n	800ac2e <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800ac1e:	f107 030e 	add.w	r3, r7, #14
 800ac22:	2202      	movs	r2, #2
 800ac24:	4619      	mov	r1, r3
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f001 f954 	bl	800bed4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac2c:	e05b      	b.n	800ace6 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800ac2e:	6839      	ldr	r1, [r7, #0]
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f001 f8e4 	bl	800bdfe <USBD_CtlError>
            ret = USBD_FAIL;
 800ac36:	2302      	movs	r3, #2
 800ac38:	75fb      	strb	r3, [r7, #23]
          break;
 800ac3a:	e054      	b.n	800ace6 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	885b      	ldrh	r3, [r3, #2]
 800ac40:	0a1b      	lsrs	r3, r3, #8
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	2b22      	cmp	r3, #34	@ 0x22
 800ac46:	d10b      	bne.n	800ac60 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	88db      	ldrh	r3, [r3, #6]
 800ac4c:	2b23      	cmp	r3, #35	@ 0x23
 800ac4e:	bf28      	it	cs
 800ac50:	2323      	movcs	r3, #35	@ 0x23
 800ac52:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	61bb      	str	r3, [r7, #24]
 800ac5e:	e00d      	b.n	800ac7c <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	885b      	ldrh	r3, [r3, #2]
 800ac64:	0a1b      	lsrs	r3, r3, #8
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	2b21      	cmp	r3, #33	@ 0x21
 800ac6a:	d107      	bne.n	800ac7c <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800ac6c:	4b24      	ldr	r3, [pc, #144]	@ (800ad00 <USBD_CUSTOM_HID_Setup+0x1fc>)
 800ac6e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	88db      	ldrh	r3, [r3, #6]
 800ac74:	2b09      	cmp	r3, #9
 800ac76:	bf28      	it	cs
 800ac78:	2309      	movcs	r3, #9
 800ac7a:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 800ac7c:	8bfb      	ldrh	r3, [r7, #30]
 800ac7e:	461a      	mov	r2, r3
 800ac80:	69b9      	ldr	r1, [r7, #24]
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f001 f926 	bl	800bed4 <USBD_CtlSendData>
          break;
 800ac88:	e02d      	b.n	800ace6 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac90:	2b03      	cmp	r3, #3
 800ac92:	d107      	bne.n	800aca4 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	3318      	adds	r3, #24
 800ac98:	2201      	movs	r2, #1
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f001 f919 	bl	800bed4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aca2:	e020      	b.n	800ace6 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800aca4:	6839      	ldr	r1, [r7, #0]
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f001 f8a9 	bl	800bdfe <USBD_CtlError>
            ret = USBD_FAIL;
 800acac:	2302      	movs	r3, #2
 800acae:	75fb      	strb	r3, [r7, #23]
          break;
 800acb0:	e019      	b.n	800ace6 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acb8:	2b03      	cmp	r3, #3
 800acba:	d106      	bne.n	800acca <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	885b      	ldrh	r3, [r3, #2]
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	461a      	mov	r2, r3
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	619a      	str	r2, [r3, #24]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800acc8:	e00d      	b.n	800ace6 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800acca:	6839      	ldr	r1, [r7, #0]
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f001 f896 	bl	800bdfe <USBD_CtlError>
            ret = USBD_FAIL;
 800acd2:	2302      	movs	r3, #2
 800acd4:	75fb      	strb	r3, [r7, #23]
          break;
 800acd6:	e006      	b.n	800ace6 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 800acd8:	6839      	ldr	r1, [r7, #0]
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f001 f88f 	bl	800bdfe <USBD_CtlError>
          ret = USBD_FAIL;
 800ace0:	2302      	movs	r3, #2
 800ace2:	75fb      	strb	r3, [r7, #23]
          break;
 800ace4:	bf00      	nop
      }
      break;
 800ace6:	e006      	b.n	800acf6 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 800ace8:	6839      	ldr	r1, [r7, #0]
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f001 f887 	bl	800bdfe <USBD_CtlError>
      ret = USBD_FAIL;
 800acf0:	2302      	movs	r3, #2
 800acf2:	75fb      	strb	r3, [r7, #23]
      break;
 800acf4:	bf00      	nop
  }
  return ret;
 800acf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3720      	adds	r7, #32
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	200000c8 	.word	0x200000c8

0800ad04 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b086      	sub	sp, #24
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	60b9      	str	r1, [r7, #8]
 800ad0e:	4613      	mov	r3, r2
 800ad10:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad18:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad20:	2b03      	cmp	r3, #3
 800ad22:	d111      	bne.n	800ad48 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d10a      	bne.n	800ad44 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	2201      	movs	r2, #1
 800ad32:	f883 2020 	strb.w	r2, [r3, #32]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800ad36:	88fb      	ldrh	r3, [r7, #6]
 800ad38:	68ba      	ldr	r2, [r7, #8]
 800ad3a:	2181      	movs	r1, #129	@ 0x81
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	f001 fce4 	bl	800c70a <USBD_LL_Transmit>
 800ad42:	e001      	b.n	800ad48 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 800ad44:	2301      	movs	r3, #1
 800ad46:	e000      	b.n	800ad4a <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 800ad48:	2300      	movs	r3, #0
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3718      	adds	r7, #24
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
	...

0800ad54 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2229      	movs	r2, #41	@ 0x29
 800ad60:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800ad62:	4b03      	ldr	r3, [pc, #12]	@ (800ad70 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr
 800ad70:	20000044 	.word	0x20000044

0800ad74 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b083      	sub	sp, #12
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2229      	movs	r2, #41	@ 0x29
 800ad80:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800ad82:	4b03      	ldr	r3, [pc, #12]	@ (800ad90 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	370c      	adds	r7, #12
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr
 800ad90:	20000070 	.word	0x20000070

0800ad94 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2229      	movs	r2, #41	@ 0x29
 800ada0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800ada2:	4b03      	ldr	r3, [pc, #12]	@ (800adb0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	370c      	adds	r7, #12
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr
 800adb0:	2000009c 	.word	0x2000009c

0800adb4 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b083      	sub	sp, #12
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	460b      	mov	r3, r1
 800adbe:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adc6:	2200      	movs	r2, #0
 800adc8:	f883 2020 	strb.w	r2, [r3, #32]

  return USBD_OK;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	370c      	adds	r7, #12
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr

0800adda <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 800adda:	b580      	push	{r7, lr}
 800addc:	b084      	sub	sp, #16
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
 800ade2:	460b      	mov	r3, r1
 800ade4:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adec:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	68fa      	ldr	r2, [r7, #12]
 800adf8:	7810      	ldrb	r0, [r2, #0]
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	7852      	ldrb	r2, [r2, #1]
 800adfe:	4611      	mov	r1, r2
 800ae00:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800ae02:	68fa      	ldr	r2, [r7, #12]
 800ae04:	230d      	movs	r3, #13
 800ae06:	2101      	movs	r1, #1
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f001 fca1 	bl	800c750 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 800ae0e:	2300      	movs	r3, #0
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3710      	adds	r7, #16
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae26:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	69db      	ldr	r3, [r3, #28]
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d10c      	bne.n	800ae4a <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	7810      	ldrb	r0, [r2, #0]
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	7852      	ldrb	r2, [r2, #1]
 800ae40:	4611      	mov	r1, r2
 800ae42:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2200      	movs	r2, #0
 800ae48:	61da      	str	r2, [r3, #28]
  }

  return USBD_OK;
 800ae4a:	2300      	movs	r3, #0
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3710      	adds	r7, #16
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	220a      	movs	r2, #10
 800ae60:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800ae62:	4b03      	ldr	r3, [pc, #12]	@ (800ae70 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr
 800ae70:	200000d4 	.word	0x200000d4

0800ae74 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800ae7e:	2302      	movs	r3, #2
 800ae80:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d005      	beq.n	800ae94 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	683a      	ldr	r2, [r7, #0]
 800ae8c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800ae90:	2300      	movs	r3, #0
 800ae92:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ae94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3714      	adds	r7, #20
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr

0800aea2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b084      	sub	sp, #16
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	60f8      	str	r0, [r7, #12]
 800aeaa:	60b9      	str	r1, [r7, #8]
 800aeac:	4613      	mov	r3, r2
 800aeae:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d101      	bne.n	800aeba <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800aeb6:	2302      	movs	r3, #2
 800aeb8:	e01a      	b.n	800aef0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d003      	beq.n	800aecc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d003      	beq.n	800aeda <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	68ba      	ldr	r2, [r7, #8]
 800aed6:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2201      	movs	r2, #1
 800aede:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	79fa      	ldrb	r2, [r7, #7]
 800aee6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	f001 fad5 	bl	800c498 <USBD_LL_Init>

  return USBD_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3710      	adds	r7, #16
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b085      	sub	sp, #20
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800af02:	2300      	movs	r3, #0
 800af04:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d006      	beq.n	800af1a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	683a      	ldr	r2, [r7, #0]
 800af10:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800af14:	2300      	movs	r3, #0
 800af16:	73fb      	strb	r3, [r7, #15]
 800af18:	e001      	b.n	800af1e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800af1a:	2302      	movs	r3, #2
 800af1c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800af1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af20:	4618      	mov	r0, r3
 800af22:	3714      	adds	r7, #20
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b082      	sub	sp, #8
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f001 faff 	bl	800c538 <USBD_LL_Start>

  return USBD_OK;
 800af3a:	2300      	movs	r3, #0
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3708      	adds	r7, #8
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	370c      	adds	r7, #12
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr

0800af5a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b084      	sub	sp, #16
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
 800af62:	460b      	mov	r3, r1
 800af64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800af66:	2302      	movs	r3, #2
 800af68:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af70:	2b00      	cmp	r3, #0
 800af72:	d00c      	beq.n	800af8e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	78fa      	ldrb	r2, [r7, #3]
 800af7e:	4611      	mov	r1, r2
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	4798      	blx	r3
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	d101      	bne.n	800af8e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800af8a:	2300      	movs	r3, #0
 800af8c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800af8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af90:	4618      	mov	r0, r3
 800af92:	3710      	adds	r7, #16
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	460b      	mov	r3, r1
 800afa2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	78fa      	ldrb	r2, [r7, #3]
 800afae:	4611      	mov	r1, r2
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	4798      	blx	r3

  return USBD_OK;
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3708      	adds	r7, #8
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b082      	sub	sp, #8
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
 800afc6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800afce:	6839      	ldr	r1, [r7, #0]
 800afd0:	4618      	mov	r0, r3
 800afd2:	f000 feda 	bl	800bd8a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2201      	movs	r2, #1
 800afda:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800afe4:	461a      	mov	r2, r3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800aff2:	f003 031f 	and.w	r3, r3, #31
 800aff6:	2b02      	cmp	r3, #2
 800aff8:	d016      	beq.n	800b028 <USBD_LL_SetupStage+0x6a>
 800affa:	2b02      	cmp	r3, #2
 800affc:	d81c      	bhi.n	800b038 <USBD_LL_SetupStage+0x7a>
 800affe:	2b00      	cmp	r3, #0
 800b000:	d002      	beq.n	800b008 <USBD_LL_SetupStage+0x4a>
 800b002:	2b01      	cmp	r3, #1
 800b004:	d008      	beq.n	800b018 <USBD_LL_SetupStage+0x5a>
 800b006:	e017      	b.n	800b038 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b00e:	4619      	mov	r1, r3
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 f9cd 	bl	800b3b0 <USBD_StdDevReq>
      break;
 800b016:	e01a      	b.n	800b04e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b01e:	4619      	mov	r1, r3
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f000 fa2f 	bl	800b484 <USBD_StdItfReq>
      break;
 800b026:	e012      	b.n	800b04e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b02e:	4619      	mov	r1, r3
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 fa6f 	bl	800b514 <USBD_StdEPReq>
      break;
 800b036:	e00a      	b.n	800b04e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b03e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b042:	b2db      	uxtb	r3, r3
 800b044:	4619      	mov	r1, r3
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f001 fad6 	bl	800c5f8 <USBD_LL_StallEP>
      break;
 800b04c:	bf00      	nop
  }

  return USBD_OK;
 800b04e:	2300      	movs	r3, #0
}
 800b050:	4618      	mov	r0, r3
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b086      	sub	sp, #24
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	460b      	mov	r3, r1
 800b062:	607a      	str	r2, [r7, #4]
 800b064:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b066:	7afb      	ldrb	r3, [r7, #11]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d14b      	bne.n	800b104 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b072:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b07a:	2b03      	cmp	r3, #3
 800b07c:	d134      	bne.n	800b0e8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	68da      	ldr	r2, [r3, #12]
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	691b      	ldr	r3, [r3, #16]
 800b086:	429a      	cmp	r2, r3
 800b088:	d919      	bls.n	800b0be <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	68da      	ldr	r2, [r3, #12]
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	691b      	ldr	r3, [r3, #16]
 800b092:	1ad2      	subs	r2, r2, r3
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	68da      	ldr	r2, [r3, #12]
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d203      	bcs.n	800b0ac <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	e002      	b.n	800b0b2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	6879      	ldr	r1, [r7, #4]
 800b0b6:	68f8      	ldr	r0, [r7, #12]
 800b0b8:	f000 ff58 	bl	800bf6c <USBD_CtlContinueRx>
 800b0bc:	e038      	b.n	800b130 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0c4:	691b      	ldr	r3, [r3, #16]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d00a      	beq.n	800b0e0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b0d0:	2b03      	cmp	r3, #3
 800b0d2:	d105      	bne.n	800b0e0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0da:	691b      	ldr	r3, [r3, #16]
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b0e0:	68f8      	ldr	r0, [r7, #12]
 800b0e2:	f000 ff55 	bl	800bf90 <USBD_CtlSendStatus>
 800b0e6:	e023      	b.n	800b130 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b0ee:	2b05      	cmp	r3, #5
 800b0f0:	d11e      	bne.n	800b130 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b0fa:	2100      	movs	r1, #0
 800b0fc:	68f8      	ldr	r0, [r7, #12]
 800b0fe:	f001 fa7b 	bl	800c5f8 <USBD_LL_StallEP>
 800b102:	e015      	b.n	800b130 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b10a:	699b      	ldr	r3, [r3, #24]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d00d      	beq.n	800b12c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b116:	2b03      	cmp	r3, #3
 800b118:	d108      	bne.n	800b12c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b120:	699b      	ldr	r3, [r3, #24]
 800b122:	7afa      	ldrb	r2, [r7, #11]
 800b124:	4611      	mov	r1, r2
 800b126:	68f8      	ldr	r0, [r7, #12]
 800b128:	4798      	blx	r3
 800b12a:	e001      	b.n	800b130 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b12c:	2302      	movs	r3, #2
 800b12e:	e000      	b.n	800b132 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b130:	2300      	movs	r3, #0
}
 800b132:	4618      	mov	r0, r3
 800b134:	3718      	adds	r7, #24
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b086      	sub	sp, #24
 800b13e:	af00      	add	r7, sp, #0
 800b140:	60f8      	str	r0, [r7, #12]
 800b142:	460b      	mov	r3, r1
 800b144:	607a      	str	r2, [r7, #4]
 800b146:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b148:	7afb      	ldrb	r3, [r7, #11]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d17f      	bne.n	800b24e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	3314      	adds	r3, #20
 800b152:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b15a:	2b02      	cmp	r3, #2
 800b15c:	d15c      	bne.n	800b218 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	68da      	ldr	r2, [r3, #12]
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	691b      	ldr	r3, [r3, #16]
 800b166:	429a      	cmp	r2, r3
 800b168:	d915      	bls.n	800b196 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	68da      	ldr	r2, [r3, #12]
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	691b      	ldr	r3, [r3, #16]
 800b172:	1ad2      	subs	r2, r2, r3
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	461a      	mov	r2, r3
 800b180:	6879      	ldr	r1, [r7, #4]
 800b182:	68f8      	ldr	r0, [r7, #12]
 800b184:	f000 fec2 	bl	800bf0c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b188:	2300      	movs	r3, #0
 800b18a:	2200      	movs	r2, #0
 800b18c:	2100      	movs	r1, #0
 800b18e:	68f8      	ldr	r0, [r7, #12]
 800b190:	f001 fade 	bl	800c750 <USBD_LL_PrepareReceive>
 800b194:	e04e      	b.n	800b234 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	697a      	ldr	r2, [r7, #20]
 800b19c:	6912      	ldr	r2, [r2, #16]
 800b19e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1a2:	fb01 f202 	mul.w	r2, r1, r2
 800b1a6:	1a9b      	subs	r3, r3, r2
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d11c      	bne.n	800b1e6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	689a      	ldr	r2, [r3, #8]
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d316      	bcc.n	800b1e6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	689a      	ldr	r2, [r3, #8]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d20f      	bcs.n	800b1e6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	68f8      	ldr	r0, [r7, #12]
 800b1cc:	f000 fe9e 	bl	800bf0c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b1d8:	2300      	movs	r3, #0
 800b1da:	2200      	movs	r2, #0
 800b1dc:	2100      	movs	r1, #0
 800b1de:	68f8      	ldr	r0, [r7, #12]
 800b1e0:	f001 fab6 	bl	800c750 <USBD_LL_PrepareReceive>
 800b1e4:	e026      	b.n	800b234 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d00a      	beq.n	800b208 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b1f8:	2b03      	cmp	r3, #3
 800b1fa:	d105      	bne.n	800b208 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	68f8      	ldr	r0, [r7, #12]
 800b206:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b208:	2180      	movs	r1, #128	@ 0x80
 800b20a:	68f8      	ldr	r0, [r7, #12]
 800b20c:	f001 f9f4 	bl	800c5f8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b210:	68f8      	ldr	r0, [r7, #12]
 800b212:	f000 fed0 	bl	800bfb6 <USBD_CtlReceiveStatus>
 800b216:	e00d      	b.n	800b234 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b21e:	2b04      	cmp	r3, #4
 800b220:	d004      	beq.n	800b22c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d103      	bne.n	800b234 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b22c:	2180      	movs	r1, #128	@ 0x80
 800b22e:	68f8      	ldr	r0, [r7, #12]
 800b230:	f001 f9e2 	bl	800c5f8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d11d      	bne.n	800b27a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	f7ff fe80 	bl	800af44 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2200      	movs	r2, #0
 800b248:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b24c:	e015      	b.n	800b27a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b254:	695b      	ldr	r3, [r3, #20]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d00d      	beq.n	800b276 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b260:	2b03      	cmp	r3, #3
 800b262:	d108      	bne.n	800b276 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b26a:	695b      	ldr	r3, [r3, #20]
 800b26c:	7afa      	ldrb	r2, [r7, #11]
 800b26e:	4611      	mov	r1, r2
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	4798      	blx	r3
 800b274:	e001      	b.n	800b27a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b276:	2302      	movs	r3, #2
 800b278:	e000      	b.n	800b27c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3718      	adds	r7, #24
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b28c:	2340      	movs	r3, #64	@ 0x40
 800b28e:	2200      	movs	r2, #0
 800b290:	2100      	movs	r1, #0
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f001 f96b 	bl	800c56e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2201      	movs	r2, #1
 800b29c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2240      	movs	r2, #64	@ 0x40
 800b2a4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b2a8:	2340      	movs	r3, #64	@ 0x40
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	2180      	movs	r1, #128	@ 0x80
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f001 f95d 	bl	800c56e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2240      	movs	r2, #64	@ 0x40
 800b2be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d009      	beq.n	800b2fc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	6852      	ldr	r2, [r2, #4]
 800b2f4:	b2d2      	uxtb	r2, r2
 800b2f6:	4611      	mov	r1, r2
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	4798      	blx	r3
  }

  return USBD_OK;
 800b2fc:	2300      	movs	r3, #0
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3708      	adds	r7, #8
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}

0800b306 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b306:	b480      	push	{r7}
 800b308:	b083      	sub	sp, #12
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
 800b30e:	460b      	mov	r3, r1
 800b310:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	78fa      	ldrb	r2, [r7, #3]
 800b316:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b318:	2300      	movs	r3, #0
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	370c      	adds	r7, #12
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr

0800b326 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b326:	b480      	push	{r7}
 800b328:	b083      	sub	sp, #12
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2204      	movs	r2, #4
 800b33e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b342:	2300      	movs	r3, #0
}
 800b344:	4618      	mov	r0, r3
 800b346:	370c      	adds	r7, #12
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b35e:	2b04      	cmp	r3, #4
 800b360:	d105      	bne.n	800b36e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b36e:	2300      	movs	r3, #0
}
 800b370:	4618      	mov	r0, r3
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b082      	sub	sp, #8
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b38a:	2b03      	cmp	r3, #3
 800b38c:	d10b      	bne.n	800b3a6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b394:	69db      	ldr	r3, [r3, #28]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d005      	beq.n	800b3a6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3a0:	69db      	ldr	r3, [r3, #28]
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3708      	adds	r7, #8
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	781b      	ldrb	r3, [r3, #0]
 800b3c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b3c6:	2b40      	cmp	r3, #64	@ 0x40
 800b3c8:	d005      	beq.n	800b3d6 <USBD_StdDevReq+0x26>
 800b3ca:	2b40      	cmp	r3, #64	@ 0x40
 800b3cc:	d84f      	bhi.n	800b46e <USBD_StdDevReq+0xbe>
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d009      	beq.n	800b3e6 <USBD_StdDevReq+0x36>
 800b3d2:	2b20      	cmp	r3, #32
 800b3d4:	d14b      	bne.n	800b46e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3dc:	689b      	ldr	r3, [r3, #8]
 800b3de:	6839      	ldr	r1, [r7, #0]
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	4798      	blx	r3
      break;
 800b3e4:	e048      	b.n	800b478 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	785b      	ldrb	r3, [r3, #1]
 800b3ea:	2b09      	cmp	r3, #9
 800b3ec:	d839      	bhi.n	800b462 <USBD_StdDevReq+0xb2>
 800b3ee:	a201      	add	r2, pc, #4	@ (adr r2, 800b3f4 <USBD_StdDevReq+0x44>)
 800b3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f4:	0800b445 	.word	0x0800b445
 800b3f8:	0800b459 	.word	0x0800b459
 800b3fc:	0800b463 	.word	0x0800b463
 800b400:	0800b44f 	.word	0x0800b44f
 800b404:	0800b463 	.word	0x0800b463
 800b408:	0800b427 	.word	0x0800b427
 800b40c:	0800b41d 	.word	0x0800b41d
 800b410:	0800b463 	.word	0x0800b463
 800b414:	0800b43b 	.word	0x0800b43b
 800b418:	0800b431 	.word	0x0800b431
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b41c:	6839      	ldr	r1, [r7, #0]
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 f9dc 	bl	800b7dc <USBD_GetDescriptor>
          break;
 800b424:	e022      	b.n	800b46c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b426:	6839      	ldr	r1, [r7, #0]
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 fb3f 	bl	800baac <USBD_SetAddress>
          break;
 800b42e:	e01d      	b.n	800b46c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b430:	6839      	ldr	r1, [r7, #0]
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 fb7e 	bl	800bb34 <USBD_SetConfig>
          break;
 800b438:	e018      	b.n	800b46c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b43a:	6839      	ldr	r1, [r7, #0]
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f000 fc07 	bl	800bc50 <USBD_GetConfig>
          break;
 800b442:	e013      	b.n	800b46c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b444:	6839      	ldr	r1, [r7, #0]
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 fc37 	bl	800bcba <USBD_GetStatus>
          break;
 800b44c:	e00e      	b.n	800b46c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b44e:	6839      	ldr	r1, [r7, #0]
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 fc65 	bl	800bd20 <USBD_SetFeature>
          break;
 800b456:	e009      	b.n	800b46c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b458:	6839      	ldr	r1, [r7, #0]
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 fc74 	bl	800bd48 <USBD_ClrFeature>
          break;
 800b460:	e004      	b.n	800b46c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b462:	6839      	ldr	r1, [r7, #0]
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 fcca 	bl	800bdfe <USBD_CtlError>
          break;
 800b46a:	bf00      	nop
      }
      break;
 800b46c:	e004      	b.n	800b478 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b46e:	6839      	ldr	r1, [r7, #0]
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 fcc4 	bl	800bdfe <USBD_CtlError>
      break;
 800b476:	bf00      	nop
  }

  return ret;
 800b478:	7bfb      	ldrb	r3, [r7, #15]
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3710      	adds	r7, #16
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
 800b482:	bf00      	nop

0800b484 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b48e:	2300      	movs	r3, #0
 800b490:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	781b      	ldrb	r3, [r3, #0]
 800b496:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b49a:	2b40      	cmp	r3, #64	@ 0x40
 800b49c:	d005      	beq.n	800b4aa <USBD_StdItfReq+0x26>
 800b49e:	2b40      	cmp	r3, #64	@ 0x40
 800b4a0:	d82e      	bhi.n	800b500 <USBD_StdItfReq+0x7c>
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d001      	beq.n	800b4aa <USBD_StdItfReq+0x26>
 800b4a6:	2b20      	cmp	r3, #32
 800b4a8:	d12a      	bne.n	800b500 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4b0:	3b01      	subs	r3, #1
 800b4b2:	2b02      	cmp	r3, #2
 800b4b4:	d81d      	bhi.n	800b4f2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	889b      	ldrh	r3, [r3, #4]
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d813      	bhi.n	800b4e8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4c6:	689b      	ldr	r3, [r3, #8]
 800b4c8:	6839      	ldr	r1, [r7, #0]
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	4798      	blx	r3
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	88db      	ldrh	r3, [r3, #6]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d110      	bne.n	800b4fc <USBD_StdItfReq+0x78>
 800b4da:	7bfb      	ldrb	r3, [r7, #15]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d10d      	bne.n	800b4fc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 fd55 	bl	800bf90 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b4e6:	e009      	b.n	800b4fc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b4e8:	6839      	ldr	r1, [r7, #0]
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f000 fc87 	bl	800bdfe <USBD_CtlError>
          break;
 800b4f0:	e004      	b.n	800b4fc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b4f2:	6839      	ldr	r1, [r7, #0]
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 fc82 	bl	800bdfe <USBD_CtlError>
          break;
 800b4fa:	e000      	b.n	800b4fe <USBD_StdItfReq+0x7a>
          break;
 800b4fc:	bf00      	nop
      }
      break;
 800b4fe:	e004      	b.n	800b50a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b500:	6839      	ldr	r1, [r7, #0]
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 fc7b 	bl	800bdfe <USBD_CtlError>
      break;
 800b508:	bf00      	nop
  }

  return USBD_OK;
 800b50a:	2300      	movs	r3, #0
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3710      	adds	r7, #16
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b51e:	2300      	movs	r3, #0
 800b520:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	889b      	ldrh	r3, [r3, #4]
 800b526:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b530:	2b40      	cmp	r3, #64	@ 0x40
 800b532:	d007      	beq.n	800b544 <USBD_StdEPReq+0x30>
 800b534:	2b40      	cmp	r3, #64	@ 0x40
 800b536:	f200 8146 	bhi.w	800b7c6 <USBD_StdEPReq+0x2b2>
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d00a      	beq.n	800b554 <USBD_StdEPReq+0x40>
 800b53e:	2b20      	cmp	r3, #32
 800b540:	f040 8141 	bne.w	800b7c6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	6839      	ldr	r1, [r7, #0]
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	4798      	blx	r3
      break;
 800b552:	e13d      	b.n	800b7d0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b55c:	2b20      	cmp	r3, #32
 800b55e:	d10a      	bne.n	800b576 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	6839      	ldr	r1, [r7, #0]
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	4798      	blx	r3
 800b56e:	4603      	mov	r3, r0
 800b570:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b572:	7bfb      	ldrb	r3, [r7, #15]
 800b574:	e12d      	b.n	800b7d2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	785b      	ldrb	r3, [r3, #1]
 800b57a:	2b03      	cmp	r3, #3
 800b57c:	d007      	beq.n	800b58e <USBD_StdEPReq+0x7a>
 800b57e:	2b03      	cmp	r3, #3
 800b580:	f300 811b 	bgt.w	800b7ba <USBD_StdEPReq+0x2a6>
 800b584:	2b00      	cmp	r3, #0
 800b586:	d072      	beq.n	800b66e <USBD_StdEPReq+0x15a>
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d03a      	beq.n	800b602 <USBD_StdEPReq+0xee>
 800b58c:	e115      	b.n	800b7ba <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b594:	2b02      	cmp	r3, #2
 800b596:	d002      	beq.n	800b59e <USBD_StdEPReq+0x8a>
 800b598:	2b03      	cmp	r3, #3
 800b59a:	d015      	beq.n	800b5c8 <USBD_StdEPReq+0xb4>
 800b59c:	e02b      	b.n	800b5f6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b59e:	7bbb      	ldrb	r3, [r7, #14]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d00c      	beq.n	800b5be <USBD_StdEPReq+0xaa>
 800b5a4:	7bbb      	ldrb	r3, [r7, #14]
 800b5a6:	2b80      	cmp	r3, #128	@ 0x80
 800b5a8:	d009      	beq.n	800b5be <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b5aa:	7bbb      	ldrb	r3, [r7, #14]
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f001 f822 	bl	800c5f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b5b4:	2180      	movs	r1, #128	@ 0x80
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f001 f81e 	bl	800c5f8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b5bc:	e020      	b.n	800b600 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b5be:	6839      	ldr	r1, [r7, #0]
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 fc1c 	bl	800bdfe <USBD_CtlError>
              break;
 800b5c6:	e01b      	b.n	800b600 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	885b      	ldrh	r3, [r3, #2]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d10e      	bne.n	800b5ee <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b5d0:	7bbb      	ldrb	r3, [r7, #14]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d00b      	beq.n	800b5ee <USBD_StdEPReq+0xda>
 800b5d6:	7bbb      	ldrb	r3, [r7, #14]
 800b5d8:	2b80      	cmp	r3, #128	@ 0x80
 800b5da:	d008      	beq.n	800b5ee <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	88db      	ldrh	r3, [r3, #6]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d104      	bne.n	800b5ee <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b5e4:	7bbb      	ldrb	r3, [r7, #14]
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f001 f805 	bl	800c5f8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 fcce 	bl	800bf90 <USBD_CtlSendStatus>

              break;
 800b5f4:	e004      	b.n	800b600 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b5f6:	6839      	ldr	r1, [r7, #0]
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 fc00 	bl	800bdfe <USBD_CtlError>
              break;
 800b5fe:	bf00      	nop
          }
          break;
 800b600:	e0e0      	b.n	800b7c4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b608:	2b02      	cmp	r3, #2
 800b60a:	d002      	beq.n	800b612 <USBD_StdEPReq+0xfe>
 800b60c:	2b03      	cmp	r3, #3
 800b60e:	d015      	beq.n	800b63c <USBD_StdEPReq+0x128>
 800b610:	e026      	b.n	800b660 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b612:	7bbb      	ldrb	r3, [r7, #14]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d00c      	beq.n	800b632 <USBD_StdEPReq+0x11e>
 800b618:	7bbb      	ldrb	r3, [r7, #14]
 800b61a:	2b80      	cmp	r3, #128	@ 0x80
 800b61c:	d009      	beq.n	800b632 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b61e:	7bbb      	ldrb	r3, [r7, #14]
 800b620:	4619      	mov	r1, r3
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 ffe8 	bl	800c5f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b628:	2180      	movs	r1, #128	@ 0x80
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f000 ffe4 	bl	800c5f8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b630:	e01c      	b.n	800b66c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b632:	6839      	ldr	r1, [r7, #0]
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 fbe2 	bl	800bdfe <USBD_CtlError>
              break;
 800b63a:	e017      	b.n	800b66c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	885b      	ldrh	r3, [r3, #2]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d112      	bne.n	800b66a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b644:	7bbb      	ldrb	r3, [r7, #14]
 800b646:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d004      	beq.n	800b658 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b64e:	7bbb      	ldrb	r3, [r7, #14]
 800b650:	4619      	mov	r1, r3
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 ffef 	bl	800c636 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 fc99 	bl	800bf90 <USBD_CtlSendStatus>
              }
              break;
 800b65e:	e004      	b.n	800b66a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b660:	6839      	ldr	r1, [r7, #0]
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 fbcb 	bl	800bdfe <USBD_CtlError>
              break;
 800b668:	e000      	b.n	800b66c <USBD_StdEPReq+0x158>
              break;
 800b66a:	bf00      	nop
          }
          break;
 800b66c:	e0aa      	b.n	800b7c4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b674:	2b02      	cmp	r3, #2
 800b676:	d002      	beq.n	800b67e <USBD_StdEPReq+0x16a>
 800b678:	2b03      	cmp	r3, #3
 800b67a:	d032      	beq.n	800b6e2 <USBD_StdEPReq+0x1ce>
 800b67c:	e097      	b.n	800b7ae <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b67e:	7bbb      	ldrb	r3, [r7, #14]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d007      	beq.n	800b694 <USBD_StdEPReq+0x180>
 800b684:	7bbb      	ldrb	r3, [r7, #14]
 800b686:	2b80      	cmp	r3, #128	@ 0x80
 800b688:	d004      	beq.n	800b694 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b68a:	6839      	ldr	r1, [r7, #0]
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 fbb6 	bl	800bdfe <USBD_CtlError>
                break;
 800b692:	e091      	b.n	800b7b8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b694:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	da0b      	bge.n	800b6b4 <USBD_StdEPReq+0x1a0>
 800b69c:	7bbb      	ldrb	r3, [r7, #14]
 800b69e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	4413      	add	r3, r2
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	3310      	adds	r3, #16
 800b6ac:	687a      	ldr	r2, [r7, #4]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	3304      	adds	r3, #4
 800b6b2:	e00b      	b.n	800b6cc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b6b4:	7bbb      	ldrb	r3, [r7, #14]
 800b6b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6ba:	4613      	mov	r3, r2
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	4413      	add	r3, r2
 800b6c0:	009b      	lsls	r3, r3, #2
 800b6c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	3304      	adds	r3, #4
 800b6cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	2202      	movs	r2, #2
 800b6d8:	4619      	mov	r1, r3
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 fbfa 	bl	800bed4 <USBD_CtlSendData>
              break;
 800b6e0:	e06a      	b.n	800b7b8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b6e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	da11      	bge.n	800b70e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b6ea:	7bbb      	ldrb	r3, [r7, #14]
 800b6ec:	f003 020f 	and.w	r2, r3, #15
 800b6f0:	6879      	ldr	r1, [r7, #4]
 800b6f2:	4613      	mov	r3, r2
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	4413      	add	r3, r2
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	440b      	add	r3, r1
 800b6fc:	3318      	adds	r3, #24
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d117      	bne.n	800b734 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b704:	6839      	ldr	r1, [r7, #0]
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 fb79 	bl	800bdfe <USBD_CtlError>
                  break;
 800b70c:	e054      	b.n	800b7b8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b70e:	7bbb      	ldrb	r3, [r7, #14]
 800b710:	f003 020f 	and.w	r2, r3, #15
 800b714:	6879      	ldr	r1, [r7, #4]
 800b716:	4613      	mov	r3, r2
 800b718:	009b      	lsls	r3, r3, #2
 800b71a:	4413      	add	r3, r2
 800b71c:	009b      	lsls	r3, r3, #2
 800b71e:	440b      	add	r3, r1
 800b720:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d104      	bne.n	800b734 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b72a:	6839      	ldr	r1, [r7, #0]
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 fb66 	bl	800bdfe <USBD_CtlError>
                  break;
 800b732:	e041      	b.n	800b7b8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b734:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	da0b      	bge.n	800b754 <USBD_StdEPReq+0x240>
 800b73c:	7bbb      	ldrb	r3, [r7, #14]
 800b73e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b742:	4613      	mov	r3, r2
 800b744:	009b      	lsls	r3, r3, #2
 800b746:	4413      	add	r3, r2
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	3310      	adds	r3, #16
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	4413      	add	r3, r2
 800b750:	3304      	adds	r3, #4
 800b752:	e00b      	b.n	800b76c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b754:	7bbb      	ldrb	r3, [r7, #14]
 800b756:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b75a:	4613      	mov	r3, r2
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	4413      	add	r3, r2
 800b760:	009b      	lsls	r3, r3, #2
 800b762:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	4413      	add	r3, r2
 800b76a:	3304      	adds	r3, #4
 800b76c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b76e:	7bbb      	ldrb	r3, [r7, #14]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d002      	beq.n	800b77a <USBD_StdEPReq+0x266>
 800b774:	7bbb      	ldrb	r3, [r7, #14]
 800b776:	2b80      	cmp	r3, #128	@ 0x80
 800b778:	d103      	bne.n	800b782 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	2200      	movs	r2, #0
 800b77e:	601a      	str	r2, [r3, #0]
 800b780:	e00e      	b.n	800b7a0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b782:	7bbb      	ldrb	r3, [r7, #14]
 800b784:	4619      	mov	r1, r3
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 ff74 	bl	800c674 <USBD_LL_IsStallEP>
 800b78c:	4603      	mov	r3, r0
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d003      	beq.n	800b79a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	2201      	movs	r2, #1
 800b796:	601a      	str	r2, [r3, #0]
 800b798:	e002      	b.n	800b7a0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	2200      	movs	r2, #0
 800b79e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	2202      	movs	r2, #2
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 fb94 	bl	800bed4 <USBD_CtlSendData>
              break;
 800b7ac:	e004      	b.n	800b7b8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b7ae:	6839      	ldr	r1, [r7, #0]
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 fb24 	bl	800bdfe <USBD_CtlError>
              break;
 800b7b6:	bf00      	nop
          }
          break;
 800b7b8:	e004      	b.n	800b7c4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b7ba:	6839      	ldr	r1, [r7, #0]
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f000 fb1e 	bl	800bdfe <USBD_CtlError>
          break;
 800b7c2:	bf00      	nop
      }
      break;
 800b7c4:	e004      	b.n	800b7d0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b7c6:	6839      	ldr	r1, [r7, #0]
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 fb18 	bl	800bdfe <USBD_CtlError>
      break;
 800b7ce:	bf00      	nop
  }

  return ret;
 800b7d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3710      	adds	r7, #16
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}
	...

0800b7dc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	885b      	ldrh	r3, [r3, #2]
 800b7f6:	0a1b      	lsrs	r3, r3, #8
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	3b01      	subs	r3, #1
 800b7fc:	2b06      	cmp	r3, #6
 800b7fe:	f200 8128 	bhi.w	800ba52 <USBD_GetDescriptor+0x276>
 800b802:	a201      	add	r2, pc, #4	@ (adr r2, 800b808 <USBD_GetDescriptor+0x2c>)
 800b804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b808:	0800b825 	.word	0x0800b825
 800b80c:	0800b83d 	.word	0x0800b83d
 800b810:	0800b87d 	.word	0x0800b87d
 800b814:	0800ba53 	.word	0x0800ba53
 800b818:	0800ba53 	.word	0x0800ba53
 800b81c:	0800b9f3 	.word	0x0800b9f3
 800b820:	0800ba1f 	.word	0x0800ba1f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	687a      	ldr	r2, [r7, #4]
 800b82e:	7c12      	ldrb	r2, [r2, #16]
 800b830:	f107 0108 	add.w	r1, r7, #8
 800b834:	4610      	mov	r0, r2
 800b836:	4798      	blx	r3
 800b838:	60f8      	str	r0, [r7, #12]
      break;
 800b83a:	e112      	b.n	800ba62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	7c1b      	ldrb	r3, [r3, #16]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d10d      	bne.n	800b860 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b84a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b84c:	f107 0208 	add.w	r2, r7, #8
 800b850:	4610      	mov	r0, r2
 800b852:	4798      	blx	r3
 800b854:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	3301      	adds	r3, #1
 800b85a:	2202      	movs	r2, #2
 800b85c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b85e:	e100      	b.n	800ba62 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b868:	f107 0208 	add.w	r2, r7, #8
 800b86c:	4610      	mov	r0, r2
 800b86e:	4798      	blx	r3
 800b870:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	3301      	adds	r3, #1
 800b876:	2202      	movs	r2, #2
 800b878:	701a      	strb	r2, [r3, #0]
      break;
 800b87a:	e0f2      	b.n	800ba62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	885b      	ldrh	r3, [r3, #2]
 800b880:	b2db      	uxtb	r3, r3
 800b882:	2b05      	cmp	r3, #5
 800b884:	f200 80ac 	bhi.w	800b9e0 <USBD_GetDescriptor+0x204>
 800b888:	a201      	add	r2, pc, #4	@ (adr r2, 800b890 <USBD_GetDescriptor+0xb4>)
 800b88a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b88e:	bf00      	nop
 800b890:	0800b8a9 	.word	0x0800b8a9
 800b894:	0800b8dd 	.word	0x0800b8dd
 800b898:	0800b911 	.word	0x0800b911
 800b89c:	0800b945 	.word	0x0800b945
 800b8a0:	0800b979 	.word	0x0800b979
 800b8a4:	0800b9ad 	.word	0x0800b9ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d00b      	beq.n	800b8cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	7c12      	ldrb	r2, [r2, #16]
 800b8c0:	f107 0108 	add.w	r1, r7, #8
 800b8c4:	4610      	mov	r0, r2
 800b8c6:	4798      	blx	r3
 800b8c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8ca:	e091      	b.n	800b9f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8cc:	6839      	ldr	r1, [r7, #0]
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 fa95 	bl	800bdfe <USBD_CtlError>
            err++;
 800b8d4:	7afb      	ldrb	r3, [r7, #11]
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	72fb      	strb	r3, [r7, #11]
          break;
 800b8da:	e089      	b.n	800b9f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d00b      	beq.n	800b900 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b8ee:	689b      	ldr	r3, [r3, #8]
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	7c12      	ldrb	r2, [r2, #16]
 800b8f4:	f107 0108 	add.w	r1, r7, #8
 800b8f8:	4610      	mov	r0, r2
 800b8fa:	4798      	blx	r3
 800b8fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8fe:	e077      	b.n	800b9f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b900:	6839      	ldr	r1, [r7, #0]
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 fa7b 	bl	800bdfe <USBD_CtlError>
            err++;
 800b908:	7afb      	ldrb	r3, [r7, #11]
 800b90a:	3301      	adds	r3, #1
 800b90c:	72fb      	strb	r3, [r7, #11]
          break;
 800b90e:	e06f      	b.n	800b9f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d00b      	beq.n	800b934 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	7c12      	ldrb	r2, [r2, #16]
 800b928:	f107 0108 	add.w	r1, r7, #8
 800b92c:	4610      	mov	r0, r2
 800b92e:	4798      	blx	r3
 800b930:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b932:	e05d      	b.n	800b9f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b934:	6839      	ldr	r1, [r7, #0]
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f000 fa61 	bl	800bdfe <USBD_CtlError>
            err++;
 800b93c:	7afb      	ldrb	r3, [r7, #11]
 800b93e:	3301      	adds	r3, #1
 800b940:	72fb      	strb	r3, [r7, #11]
          break;
 800b942:	e055      	b.n	800b9f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b94a:	691b      	ldr	r3, [r3, #16]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d00b      	beq.n	800b968 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b956:	691b      	ldr	r3, [r3, #16]
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	7c12      	ldrb	r2, [r2, #16]
 800b95c:	f107 0108 	add.w	r1, r7, #8
 800b960:	4610      	mov	r0, r2
 800b962:	4798      	blx	r3
 800b964:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b966:	e043      	b.n	800b9f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b968:	6839      	ldr	r1, [r7, #0]
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 fa47 	bl	800bdfe <USBD_CtlError>
            err++;
 800b970:	7afb      	ldrb	r3, [r7, #11]
 800b972:	3301      	adds	r3, #1
 800b974:	72fb      	strb	r3, [r7, #11]
          break;
 800b976:	e03b      	b.n	800b9f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b97e:	695b      	ldr	r3, [r3, #20]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d00b      	beq.n	800b99c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b98a:	695b      	ldr	r3, [r3, #20]
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	7c12      	ldrb	r2, [r2, #16]
 800b990:	f107 0108 	add.w	r1, r7, #8
 800b994:	4610      	mov	r0, r2
 800b996:	4798      	blx	r3
 800b998:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b99a:	e029      	b.n	800b9f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b99c:	6839      	ldr	r1, [r7, #0]
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f000 fa2d 	bl	800bdfe <USBD_CtlError>
            err++;
 800b9a4:	7afb      	ldrb	r3, [r7, #11]
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	72fb      	strb	r3, [r7, #11]
          break;
 800b9aa:	e021      	b.n	800b9f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b9b2:	699b      	ldr	r3, [r3, #24]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d00b      	beq.n	800b9d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b9be:	699b      	ldr	r3, [r3, #24]
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	7c12      	ldrb	r2, [r2, #16]
 800b9c4:	f107 0108 	add.w	r1, r7, #8
 800b9c8:	4610      	mov	r0, r2
 800b9ca:	4798      	blx	r3
 800b9cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9ce:	e00f      	b.n	800b9f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b9d0:	6839      	ldr	r1, [r7, #0]
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 fa13 	bl	800bdfe <USBD_CtlError>
            err++;
 800b9d8:	7afb      	ldrb	r3, [r7, #11]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	72fb      	strb	r3, [r7, #11]
          break;
 800b9de:	e007      	b.n	800b9f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b9e0:	6839      	ldr	r1, [r7, #0]
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 fa0b 	bl	800bdfe <USBD_CtlError>
          err++;
 800b9e8:	7afb      	ldrb	r3, [r7, #11]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b9ee:	e038      	b.n	800ba62 <USBD_GetDescriptor+0x286>
 800b9f0:	e037      	b.n	800ba62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	7c1b      	ldrb	r3, [r3, #16]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d109      	bne.n	800ba0e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba02:	f107 0208 	add.w	r2, r7, #8
 800ba06:	4610      	mov	r0, r2
 800ba08:	4798      	blx	r3
 800ba0a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba0c:	e029      	b.n	800ba62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ba0e:	6839      	ldr	r1, [r7, #0]
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f000 f9f4 	bl	800bdfe <USBD_CtlError>
        err++;
 800ba16:	7afb      	ldrb	r3, [r7, #11]
 800ba18:	3301      	adds	r3, #1
 800ba1a:	72fb      	strb	r3, [r7, #11]
      break;
 800ba1c:	e021      	b.n	800ba62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	7c1b      	ldrb	r3, [r3, #16]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d10d      	bne.n	800ba42 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba2e:	f107 0208 	add.w	r2, r7, #8
 800ba32:	4610      	mov	r0, r2
 800ba34:	4798      	blx	r3
 800ba36:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	2207      	movs	r2, #7
 800ba3e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba40:	e00f      	b.n	800ba62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ba42:	6839      	ldr	r1, [r7, #0]
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 f9da 	bl	800bdfe <USBD_CtlError>
        err++;
 800ba4a:	7afb      	ldrb	r3, [r7, #11]
 800ba4c:	3301      	adds	r3, #1
 800ba4e:	72fb      	strb	r3, [r7, #11]
      break;
 800ba50:	e007      	b.n	800ba62 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ba52:	6839      	ldr	r1, [r7, #0]
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 f9d2 	bl	800bdfe <USBD_CtlError>
      err++;
 800ba5a:	7afb      	ldrb	r3, [r7, #11]
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	72fb      	strb	r3, [r7, #11]
      break;
 800ba60:	bf00      	nop
  }

  if (err != 0U)
 800ba62:	7afb      	ldrb	r3, [r7, #11]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d11c      	bne.n	800baa2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ba68:	893b      	ldrh	r3, [r7, #8]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d011      	beq.n	800ba92 <USBD_GetDescriptor+0x2b6>
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	88db      	ldrh	r3, [r3, #6]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d00d      	beq.n	800ba92 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	88da      	ldrh	r2, [r3, #6]
 800ba7a:	893b      	ldrh	r3, [r7, #8]
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	bf28      	it	cs
 800ba80:	4613      	movcs	r3, r2
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ba86:	893b      	ldrh	r3, [r7, #8]
 800ba88:	461a      	mov	r2, r3
 800ba8a:	68f9      	ldr	r1, [r7, #12]
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 fa21 	bl	800bed4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	88db      	ldrh	r3, [r3, #6]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d104      	bne.n	800baa4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 fa78 	bl	800bf90 <USBD_CtlSendStatus>
 800baa0:	e000      	b.n	800baa4 <USBD_GetDescriptor+0x2c8>
    return;
 800baa2:	bf00      	nop
    }
  }
}
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop

0800baac <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	889b      	ldrh	r3, [r3, #4]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d130      	bne.n	800bb20 <USBD_SetAddress+0x74>
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	88db      	ldrh	r3, [r3, #6]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d12c      	bne.n	800bb20 <USBD_SetAddress+0x74>
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	885b      	ldrh	r3, [r3, #2]
 800baca:	2b7f      	cmp	r3, #127	@ 0x7f
 800bacc:	d828      	bhi.n	800bb20 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	885b      	ldrh	r3, [r3, #2]
 800bad2:	b2db      	uxtb	r3, r3
 800bad4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bad8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bae0:	2b03      	cmp	r3, #3
 800bae2:	d104      	bne.n	800baee <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800bae4:	6839      	ldr	r1, [r7, #0]
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 f989 	bl	800bdfe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800baec:	e01d      	b.n	800bb2a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	7bfa      	ldrb	r2, [r7, #15]
 800baf2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800baf6:	7bfb      	ldrb	r3, [r7, #15]
 800baf8:	4619      	mov	r1, r3
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f000 fde6 	bl	800c6cc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f000 fa45 	bl	800bf90 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bb06:	7bfb      	ldrb	r3, [r7, #15]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d004      	beq.n	800bb16 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2202      	movs	r2, #2
 800bb10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb14:	e009      	b.n	800bb2a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2201      	movs	r2, #1
 800bb1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb1e:	e004      	b.n	800bb2a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bb20:	6839      	ldr	r1, [r7, #0]
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 f96b 	bl	800bdfe <USBD_CtlError>
  }
}
 800bb28:	bf00      	nop
 800bb2a:	bf00      	nop
 800bb2c:	3710      	adds	r7, #16
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
	...

0800bb34 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	885b      	ldrh	r3, [r3, #2]
 800bb42:	b2da      	uxtb	r2, r3
 800bb44:	4b41      	ldr	r3, [pc, #260]	@ (800bc4c <USBD_SetConfig+0x118>)
 800bb46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bb48:	4b40      	ldr	r3, [pc, #256]	@ (800bc4c <USBD_SetConfig+0x118>)
 800bb4a:	781b      	ldrb	r3, [r3, #0]
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d904      	bls.n	800bb5a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800bb50:	6839      	ldr	r1, [r7, #0]
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 f953 	bl	800bdfe <USBD_CtlError>
 800bb58:	e075      	b.n	800bc46 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb60:	2b02      	cmp	r3, #2
 800bb62:	d002      	beq.n	800bb6a <USBD_SetConfig+0x36>
 800bb64:	2b03      	cmp	r3, #3
 800bb66:	d023      	beq.n	800bbb0 <USBD_SetConfig+0x7c>
 800bb68:	e062      	b.n	800bc30 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800bb6a:	4b38      	ldr	r3, [pc, #224]	@ (800bc4c <USBD_SetConfig+0x118>)
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d01a      	beq.n	800bba8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800bb72:	4b36      	ldr	r3, [pc, #216]	@ (800bc4c <USBD_SetConfig+0x118>)
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	461a      	mov	r2, r3
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2203      	movs	r2, #3
 800bb80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bb84:	4b31      	ldr	r3, [pc, #196]	@ (800bc4c <USBD_SetConfig+0x118>)
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	4619      	mov	r1, r3
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f7ff f9e5 	bl	800af5a <USBD_SetClassConfig>
 800bb90:	4603      	mov	r3, r0
 800bb92:	2b02      	cmp	r3, #2
 800bb94:	d104      	bne.n	800bba0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800bb96:	6839      	ldr	r1, [r7, #0]
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f000 f930 	bl	800bdfe <USBD_CtlError>
            return;
 800bb9e:	e052      	b.n	800bc46 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 f9f5 	bl	800bf90 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bba6:	e04e      	b.n	800bc46 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 f9f1 	bl	800bf90 <USBD_CtlSendStatus>
        break;
 800bbae:	e04a      	b.n	800bc46 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800bbb0:	4b26      	ldr	r3, [pc, #152]	@ (800bc4c <USBD_SetConfig+0x118>)
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d112      	bne.n	800bbde <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2202      	movs	r2, #2
 800bbbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800bbc0:	4b22      	ldr	r3, [pc, #136]	@ (800bc4c <USBD_SetConfig+0x118>)
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800bbca:	4b20      	ldr	r3, [pc, #128]	@ (800bc4c <USBD_SetConfig+0x118>)
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	4619      	mov	r1, r3
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f7ff f9e1 	bl	800af98 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 f9da 	bl	800bf90 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bbdc:	e033      	b.n	800bc46 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800bbde:	4b1b      	ldr	r3, [pc, #108]	@ (800bc4c <USBD_SetConfig+0x118>)
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d01d      	beq.n	800bc28 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f7ff f9cf 	bl	800af98 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800bbfa:	4b14      	ldr	r3, [pc, #80]	@ (800bc4c <USBD_SetConfig+0x118>)
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	461a      	mov	r2, r3
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bc04:	4b11      	ldr	r3, [pc, #68]	@ (800bc4c <USBD_SetConfig+0x118>)
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	4619      	mov	r1, r3
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f7ff f9a5 	bl	800af5a <USBD_SetClassConfig>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b02      	cmp	r3, #2
 800bc14:	d104      	bne.n	800bc20 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800bc16:	6839      	ldr	r1, [r7, #0]
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f000 f8f0 	bl	800bdfe <USBD_CtlError>
            return;
 800bc1e:	e012      	b.n	800bc46 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 f9b5 	bl	800bf90 <USBD_CtlSendStatus>
        break;
 800bc26:	e00e      	b.n	800bc46 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f000 f9b1 	bl	800bf90 <USBD_CtlSendStatus>
        break;
 800bc2e:	e00a      	b.n	800bc46 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800bc30:	6839      	ldr	r1, [r7, #0]
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f000 f8e3 	bl	800bdfe <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800bc38:	4b04      	ldr	r3, [pc, #16]	@ (800bc4c <USBD_SetConfig+0x118>)
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f7ff f9aa 	bl	800af98 <USBD_ClrClassConfig>
        break;
 800bc44:	bf00      	nop
    }
  }
}
 800bc46:	3708      	adds	r7, #8
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}
 800bc4c:	20000748 	.word	0x20000748

0800bc50 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b082      	sub	sp, #8
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	88db      	ldrh	r3, [r3, #6]
 800bc5e:	2b01      	cmp	r3, #1
 800bc60:	d004      	beq.n	800bc6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bc62:	6839      	ldr	r1, [r7, #0]
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f000 f8ca 	bl	800bdfe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bc6a:	e022      	b.n	800bcb2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc72:	2b02      	cmp	r3, #2
 800bc74:	dc02      	bgt.n	800bc7c <USBD_GetConfig+0x2c>
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	dc03      	bgt.n	800bc82 <USBD_GetConfig+0x32>
 800bc7a:	e015      	b.n	800bca8 <USBD_GetConfig+0x58>
 800bc7c:	2b03      	cmp	r3, #3
 800bc7e:	d00b      	beq.n	800bc98 <USBD_GetConfig+0x48>
 800bc80:	e012      	b.n	800bca8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2200      	movs	r2, #0
 800bc86:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	3308      	adds	r3, #8
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	4619      	mov	r1, r3
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f000 f91f 	bl	800bed4 <USBD_CtlSendData>
        break;
 800bc96:	e00c      	b.n	800bcb2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	3304      	adds	r3, #4
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	4619      	mov	r1, r3
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f000 f917 	bl	800bed4 <USBD_CtlSendData>
        break;
 800bca6:	e004      	b.n	800bcb2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800bca8:	6839      	ldr	r1, [r7, #0]
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 f8a7 	bl	800bdfe <USBD_CtlError>
        break;
 800bcb0:	bf00      	nop
}
 800bcb2:	bf00      	nop
 800bcb4:	3708      	adds	r7, #8
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}

0800bcba <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	b082      	sub	sp, #8
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
 800bcc2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcca:	3b01      	subs	r3, #1
 800bccc:	2b02      	cmp	r3, #2
 800bcce:	d81e      	bhi.n	800bd0e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	88db      	ldrh	r3, [r3, #6]
 800bcd4:	2b02      	cmp	r3, #2
 800bcd6:	d004      	beq.n	800bce2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800bcd8:	6839      	ldr	r1, [r7, #0]
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 f88f 	bl	800bdfe <USBD_CtlError>
        break;
 800bce0:	e01a      	b.n	800bd18 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2201      	movs	r2, #1
 800bce6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d005      	beq.n	800bcfe <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	68db      	ldr	r3, [r3, #12]
 800bcf6:	f043 0202 	orr.w	r2, r3, #2
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	330c      	adds	r3, #12
 800bd02:	2202      	movs	r2, #2
 800bd04:	4619      	mov	r1, r3
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 f8e4 	bl	800bed4 <USBD_CtlSendData>
      break;
 800bd0c:	e004      	b.n	800bd18 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800bd0e:	6839      	ldr	r1, [r7, #0]
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f000 f874 	bl	800bdfe <USBD_CtlError>
      break;
 800bd16:	bf00      	nop
  }
}
 800bd18:	bf00      	nop
 800bd1a:	3708      	adds	r7, #8
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	885b      	ldrh	r3, [r3, #2]
 800bd2e:	2b01      	cmp	r3, #1
 800bd30:	d106      	bne.n	800bd40 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2201      	movs	r2, #1
 800bd36:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f000 f928 	bl	800bf90 <USBD_CtlSendStatus>
  }
}
 800bd40:	bf00      	nop
 800bd42:	3708      	adds	r7, #8
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd58:	3b01      	subs	r3, #1
 800bd5a:	2b02      	cmp	r3, #2
 800bd5c:	d80b      	bhi.n	800bd76 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	885b      	ldrh	r3, [r3, #2]
 800bd62:	2b01      	cmp	r3, #1
 800bd64:	d10c      	bne.n	800bd80 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 f90e 	bl	800bf90 <USBD_CtlSendStatus>
      }
      break;
 800bd74:	e004      	b.n	800bd80 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800bd76:	6839      	ldr	r1, [r7, #0]
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 f840 	bl	800bdfe <USBD_CtlError>
      break;
 800bd7e:	e000      	b.n	800bd82 <USBD_ClrFeature+0x3a>
      break;
 800bd80:	bf00      	nop
  }
}
 800bd82:	bf00      	nop
 800bd84:	3708      	adds	r7, #8
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}

0800bd8a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bd8a:	b480      	push	{r7}
 800bd8c:	b083      	sub	sp, #12
 800bd8e:	af00      	add	r7, sp, #0
 800bd90:	6078      	str	r0, [r7, #4]
 800bd92:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	781a      	ldrb	r2, [r3, #0]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	785a      	ldrb	r2, [r3, #1]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	3302      	adds	r3, #2
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	461a      	mov	r2, r3
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	3303      	adds	r3, #3
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	021b      	lsls	r3, r3, #8
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	4413      	add	r3, r2
 800bdb8:	b29a      	uxth	r2, r3
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	3304      	adds	r3, #4
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	3305      	adds	r3, #5
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	021b      	lsls	r3, r3, #8
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	4413      	add	r3, r2
 800bdd2:	b29a      	uxth	r2, r3
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	3306      	adds	r3, #6
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	461a      	mov	r2, r3
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	3307      	adds	r3, #7
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	021b      	lsls	r3, r3, #8
 800bde8:	b29b      	uxth	r3, r3
 800bdea:	4413      	add	r3, r2
 800bdec:	b29a      	uxth	r2, r3
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	80da      	strh	r2, [r3, #6]

}
 800bdf2:	bf00      	nop
 800bdf4:	370c      	adds	r7, #12
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr

0800bdfe <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800bdfe:	b580      	push	{r7, lr}
 800be00:	b082      	sub	sp, #8
 800be02:	af00      	add	r7, sp, #0
 800be04:	6078      	str	r0, [r7, #4]
 800be06:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800be08:	2180      	movs	r1, #128	@ 0x80
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 fbf4 	bl	800c5f8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800be10:	2100      	movs	r1, #0
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 fbf0 	bl	800c5f8 <USBD_LL_StallEP>
}
 800be18:	bf00      	nop
 800be1a:	3708      	adds	r7, #8
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b086      	sub	sp, #24
 800be24:	af00      	add	r7, sp, #0
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800be2c:	2300      	movs	r3, #0
 800be2e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d032      	beq.n	800be9c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800be36:	68f8      	ldr	r0, [r7, #12]
 800be38:	f000 f834 	bl	800bea4 <USBD_GetLen>
 800be3c:	4603      	mov	r3, r0
 800be3e:	3301      	adds	r3, #1
 800be40:	b29b      	uxth	r3, r3
 800be42:	005b      	lsls	r3, r3, #1
 800be44:	b29a      	uxth	r2, r3
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800be4a:	7dfb      	ldrb	r3, [r7, #23]
 800be4c:	1c5a      	adds	r2, r3, #1
 800be4e:	75fa      	strb	r2, [r7, #23]
 800be50:	461a      	mov	r2, r3
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	4413      	add	r3, r2
 800be56:	687a      	ldr	r2, [r7, #4]
 800be58:	7812      	ldrb	r2, [r2, #0]
 800be5a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800be5c:	7dfb      	ldrb	r3, [r7, #23]
 800be5e:	1c5a      	adds	r2, r3, #1
 800be60:	75fa      	strb	r2, [r7, #23]
 800be62:	461a      	mov	r2, r3
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	4413      	add	r3, r2
 800be68:	2203      	movs	r2, #3
 800be6a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800be6c:	e012      	b.n	800be94 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	1c5a      	adds	r2, r3, #1
 800be72:	60fa      	str	r2, [r7, #12]
 800be74:	7dfa      	ldrb	r2, [r7, #23]
 800be76:	1c51      	adds	r1, r2, #1
 800be78:	75f9      	strb	r1, [r7, #23]
 800be7a:	4611      	mov	r1, r2
 800be7c:	68ba      	ldr	r2, [r7, #8]
 800be7e:	440a      	add	r2, r1
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800be84:	7dfb      	ldrb	r3, [r7, #23]
 800be86:	1c5a      	adds	r2, r3, #1
 800be88:	75fa      	strb	r2, [r7, #23]
 800be8a:	461a      	mov	r2, r3
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	4413      	add	r3, r2
 800be90:	2200      	movs	r2, #0
 800be92:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d1e8      	bne.n	800be6e <USBD_GetString+0x4e>
    }
  }
}
 800be9c:	bf00      	nop
 800be9e:	3718      	adds	r7, #24
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b085      	sub	sp, #20
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800beac:	2300      	movs	r3, #0
 800beae:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800beb0:	e005      	b.n	800bebe <USBD_GetLen+0x1a>
  {
    len++;
 800beb2:	7bfb      	ldrb	r3, [r7, #15]
 800beb4:	3301      	adds	r3, #1
 800beb6:	73fb      	strb	r3, [r7, #15]
    buf++;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	3301      	adds	r3, #1
 800bebc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d1f5      	bne.n	800beb2 <USBD_GetLen+0xe>
  }

  return len;
 800bec6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3714      	adds	r7, #20
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr

0800bed4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	60b9      	str	r1, [r7, #8]
 800bede:	4613      	mov	r3, r2
 800bee0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2202      	movs	r2, #2
 800bee6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800beea:	88fa      	ldrh	r2, [r7, #6]
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bef0:	88fa      	ldrh	r2, [r7, #6]
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bef6:	88fb      	ldrh	r3, [r7, #6]
 800bef8:	68ba      	ldr	r2, [r7, #8]
 800befa:	2100      	movs	r1, #0
 800befc:	68f8      	ldr	r0, [r7, #12]
 800befe:	f000 fc04 	bl	800c70a <USBD_LL_Transmit>

  return USBD_OK;
 800bf02:	2300      	movs	r3, #0
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3710      	adds	r7, #16
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}

0800bf0c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b084      	sub	sp, #16
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	60f8      	str	r0, [r7, #12]
 800bf14:	60b9      	str	r1, [r7, #8]
 800bf16:	4613      	mov	r3, r2
 800bf18:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf1a:	88fb      	ldrh	r3, [r7, #6]
 800bf1c:	68ba      	ldr	r2, [r7, #8]
 800bf1e:	2100      	movs	r1, #0
 800bf20:	68f8      	ldr	r0, [r7, #12]
 800bf22:	f000 fbf2 	bl	800c70a <USBD_LL_Transmit>

  return USBD_OK;
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2203      	movs	r2, #3
 800bf42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800bf46:	88fa      	ldrh	r2, [r7, #6]
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800bf4e:	88fa      	ldrh	r2, [r7, #6]
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf56:	88fb      	ldrh	r3, [r7, #6]
 800bf58:	68ba      	ldr	r2, [r7, #8]
 800bf5a:	2100      	movs	r1, #0
 800bf5c:	68f8      	ldr	r0, [r7, #12]
 800bf5e:	f000 fbf7 	bl	800c750 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf62:	2300      	movs	r3, #0
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3710      	adds	r7, #16
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	60f8      	str	r0, [r7, #12]
 800bf74:	60b9      	str	r1, [r7, #8]
 800bf76:	4613      	mov	r3, r2
 800bf78:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf7a:	88fb      	ldrh	r3, [r7, #6]
 800bf7c:	68ba      	ldr	r2, [r7, #8]
 800bf7e:	2100      	movs	r1, #0
 800bf80:	68f8      	ldr	r0, [r7, #12]
 800bf82:	f000 fbe5 	bl	800c750 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf86:	2300      	movs	r3, #0
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3710      	adds	r7, #16
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2204      	movs	r2, #4
 800bf9c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	2100      	movs	r1, #0
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 fbaf 	bl	800c70a <USBD_LL_Transmit>

  return USBD_OK;
 800bfac:	2300      	movs	r3, #0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3708      	adds	r7, #8
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}

0800bfb6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bfb6:	b580      	push	{r7, lr}
 800bfb8:	b082      	sub	sp, #8
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2205      	movs	r2, #5
 800bfc2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	2200      	movs	r2, #0
 800bfca:	2100      	movs	r1, #0
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f000 fbbf 	bl	800c750 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bfd2:	2300      	movs	r3, #0
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3708      	adds	r7, #8
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	4912      	ldr	r1, [pc, #72]	@ (800c02c <MX_USB_DEVICE_Init+0x50>)
 800bfe4:	4812      	ldr	r0, [pc, #72]	@ (800c030 <MX_USB_DEVICE_Init+0x54>)
 800bfe6:	f7fe ff5c 	bl	800aea2 <USBD_Init>
 800bfea:	4603      	mov	r3, r0
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d001      	beq.n	800bff4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bff0:	f7f5 fc0c 	bl	800180c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800bff4:	490f      	ldr	r1, [pc, #60]	@ (800c034 <MX_USB_DEVICE_Init+0x58>)
 800bff6:	480e      	ldr	r0, [pc, #56]	@ (800c030 <MX_USB_DEVICE_Init+0x54>)
 800bff8:	f7fe ff7e 	bl	800aef8 <USBD_RegisterClass>
 800bffc:	4603      	mov	r3, r0
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d001      	beq.n	800c006 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c002:	f7f5 fc03 	bl	800180c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800c006:	490c      	ldr	r1, [pc, #48]	@ (800c038 <MX_USB_DEVICE_Init+0x5c>)
 800c008:	4809      	ldr	r0, [pc, #36]	@ (800c030 <MX_USB_DEVICE_Init+0x54>)
 800c00a:	f7fe ff33 	bl	800ae74 <USBD_CUSTOM_HID_RegisterInterface>
 800c00e:	4603      	mov	r3, r0
 800c010:	2b00      	cmp	r3, #0
 800c012:	d001      	beq.n	800c018 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c014:	f7f5 fbfa 	bl	800180c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c018:	4805      	ldr	r0, [pc, #20]	@ (800c030 <MX_USB_DEVICE_Init+0x54>)
 800c01a:	f7fe ff87 	bl	800af2c <USBD_Start>
 800c01e:	4603      	mov	r3, r0
 800c020:	2b00      	cmp	r3, #0
 800c022:	d001      	beq.n	800c028 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c024:	f7f5 fbf2 	bl	800180c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c028:	bf00      	nop
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	20000114 	.word	0x20000114
 800c030:	2000074c 	.word	0x2000074c
 800c034:	2000000c 	.word	0x2000000c
 800c038:	20000104 	.word	0x20000104

0800c03c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800c03c:	b480      	push	{r7}
 800c03e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c040:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c042:	4618      	mov	r0, r3
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800c04c:	b480      	push	{r7}
 800c04e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c050:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c052:	4618      	mov	r0, r3
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr

0800c05c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t *state)
{
 800c05c:	b4f0      	push	{r4, r5, r6, r7}
 800c05e:	b082      	sub	sp, #8
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */

	memcpy(report_buffer, state, 64);
 800c064:	4a0e      	ldr	r2, [pc, #56]	@ (800c0a0 <CUSTOM_HID_OutEvent_FS+0x44>)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4610      	mov	r0, r2
 800c06a:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800c06e:	4602      	mov	r2, r0
 800c070:	4619      	mov	r1, r3
 800c072:	f8d1 c000 	ldr.w	ip, [r1]
 800c076:	684e      	ldr	r6, [r1, #4]
 800c078:	688d      	ldr	r5, [r1, #8]
 800c07a:	68c9      	ldr	r1, [r1, #12]
 800c07c:	f8c2 c000 	str.w	ip, [r2]
 800c080:	6056      	str	r6, [r2, #4]
 800c082:	6095      	str	r5, [r2, #8]
 800c084:	60d1      	str	r1, [r2, #12]
 800c086:	3310      	adds	r3, #16
 800c088:	3010      	adds	r0, #16
 800c08a:	42a3      	cmp	r3, r4
 800c08c:	d1ef      	bne.n	800c06e <CUSTOM_HID_OutEvent_FS+0x12>

	flag_rx = 1;
 800c08e:	4b05      	ldr	r3, [pc, #20]	@ (800c0a4 <CUSTOM_HID_OutEvent_FS+0x48>)
 800c090:	2201      	movs	r2, #1
 800c092:	701a      	strb	r2, [r3, #0]

	return (USBD_OK);
 800c094:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c096:	4618      	mov	r0, r3
 800c098:	3708      	adds	r7, #8
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bcf0      	pop	{r4, r5, r6, r7}
 800c09e:	4770      	bx	lr
 800c0a0:	2000038c 	.word	0x2000038c
 800c0a4:	200003cd 	.word	0x200003cd

0800c0a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b083      	sub	sp, #12
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	6039      	str	r1, [r7, #0]
 800c0b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	2212      	movs	r2, #18
 800c0b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c0ba:	4b03      	ldr	r3, [pc, #12]	@ (800c0c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr
 800c0c8:	20000130 	.word	0x20000130

0800c0cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	6039      	str	r1, [r7, #0]
 800c0d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	2204      	movs	r2, #4
 800c0dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c0de:	4b03      	ldr	r3, [pc, #12]	@ (800c0ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	370c      	adds	r7, #12
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr
 800c0ec:	20000144 	.word	0x20000144

0800c0f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b082      	sub	sp, #8
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	6039      	str	r1, [r7, #0]
 800c0fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c0fc:	79fb      	ldrb	r3, [r7, #7]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d105      	bne.n	800c10e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c102:	683a      	ldr	r2, [r7, #0]
 800c104:	4907      	ldr	r1, [pc, #28]	@ (800c124 <USBD_FS_ProductStrDescriptor+0x34>)
 800c106:	4808      	ldr	r0, [pc, #32]	@ (800c128 <USBD_FS_ProductStrDescriptor+0x38>)
 800c108:	f7ff fe8a 	bl	800be20 <USBD_GetString>
 800c10c:	e004      	b.n	800c118 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c10e:	683a      	ldr	r2, [r7, #0]
 800c110:	4904      	ldr	r1, [pc, #16]	@ (800c124 <USBD_FS_ProductStrDescriptor+0x34>)
 800c112:	4805      	ldr	r0, [pc, #20]	@ (800c128 <USBD_FS_ProductStrDescriptor+0x38>)
 800c114:	f7ff fe84 	bl	800be20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c118:	4b02      	ldr	r3, [pc, #8]	@ (800c124 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3708      	adds	r7, #8
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	20000a10 	.word	0x20000a10
 800c128:	0800f218 	.word	0x0800f218

0800c12c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
 800c132:	4603      	mov	r3, r0
 800c134:	6039      	str	r1, [r7, #0]
 800c136:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c138:	683a      	ldr	r2, [r7, #0]
 800c13a:	4904      	ldr	r1, [pc, #16]	@ (800c14c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c13c:	4804      	ldr	r0, [pc, #16]	@ (800c150 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c13e:	f7ff fe6f 	bl	800be20 <USBD_GetString>
  return USBD_StrDesc;
 800c142:	4b02      	ldr	r3, [pc, #8]	@ (800c14c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c144:	4618      	mov	r0, r3
 800c146:	3708      	adds	r7, #8
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}
 800c14c:	20000a10 	.word	0x20000a10
 800c150:	0800f238 	.word	0x0800f238

0800c154 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b082      	sub	sp, #8
 800c158:	af00      	add	r7, sp, #0
 800c15a:	4603      	mov	r3, r0
 800c15c:	6039      	str	r1, [r7, #0]
 800c15e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	221a      	movs	r2, #26
 800c164:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c166:	f000 f843 	bl	800c1f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c16a:	4b02      	ldr	r3, [pc, #8]	@ (800c174 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3708      	adds	r7, #8
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}
 800c174:	20000148 	.word	0x20000148

0800c178 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	4603      	mov	r3, r0
 800c180:	6039      	str	r1, [r7, #0]
 800c182:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c184:	79fb      	ldrb	r3, [r7, #7]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d105      	bne.n	800c196 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c18a:	683a      	ldr	r2, [r7, #0]
 800c18c:	4907      	ldr	r1, [pc, #28]	@ (800c1ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800c18e:	4808      	ldr	r0, [pc, #32]	@ (800c1b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c190:	f7ff fe46 	bl	800be20 <USBD_GetString>
 800c194:	e004      	b.n	800c1a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c196:	683a      	ldr	r2, [r7, #0]
 800c198:	4904      	ldr	r1, [pc, #16]	@ (800c1ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800c19a:	4805      	ldr	r0, [pc, #20]	@ (800c1b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c19c:	f7ff fe40 	bl	800be20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1a0:	4b02      	ldr	r3, [pc, #8]	@ (800c1ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3708      	adds	r7, #8
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	20000a10 	.word	0x20000a10
 800c1b0:	0800f24c 	.word	0x0800f24c

0800c1b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b082      	sub	sp, #8
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	6039      	str	r1, [r7, #0]
 800c1be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c1c0:	79fb      	ldrb	r3, [r7, #7]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d105      	bne.n	800c1d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c1c6:	683a      	ldr	r2, [r7, #0]
 800c1c8:	4907      	ldr	r1, [pc, #28]	@ (800c1e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c1ca:	4808      	ldr	r0, [pc, #32]	@ (800c1ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c1cc:	f7ff fe28 	bl	800be20 <USBD_GetString>
 800c1d0:	e004      	b.n	800c1dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c1d2:	683a      	ldr	r2, [r7, #0]
 800c1d4:	4904      	ldr	r1, [pc, #16]	@ (800c1e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c1d6:	4805      	ldr	r0, [pc, #20]	@ (800c1ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c1d8:	f7ff fe22 	bl	800be20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1dc:	4b02      	ldr	r3, [pc, #8]	@ (800c1e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3708      	adds	r7, #8
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	20000a10 	.word	0x20000a10
 800c1ec:	0800f260 	.word	0x0800f260

0800c1f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c1f6:	4b0f      	ldr	r3, [pc, #60]	@ (800c234 <Get_SerialNum+0x44>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c1fc:	4b0e      	ldr	r3, [pc, #56]	@ (800c238 <Get_SerialNum+0x48>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c202:	4b0e      	ldr	r3, [pc, #56]	@ (800c23c <Get_SerialNum+0x4c>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c208:	68fa      	ldr	r2, [r7, #12]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	4413      	add	r3, r2
 800c20e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d009      	beq.n	800c22a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c216:	2208      	movs	r2, #8
 800c218:	4909      	ldr	r1, [pc, #36]	@ (800c240 <Get_SerialNum+0x50>)
 800c21a:	68f8      	ldr	r0, [r7, #12]
 800c21c:	f000 f814 	bl	800c248 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c220:	2204      	movs	r2, #4
 800c222:	4908      	ldr	r1, [pc, #32]	@ (800c244 <Get_SerialNum+0x54>)
 800c224:	68b8      	ldr	r0, [r7, #8]
 800c226:	f000 f80f 	bl	800c248 <IntToUnicode>
  }
}
 800c22a:	bf00      	nop
 800c22c:	3710      	adds	r7, #16
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	1ffff7ac 	.word	0x1ffff7ac
 800c238:	1ffff7b0 	.word	0x1ffff7b0
 800c23c:	1ffff7b4 	.word	0x1ffff7b4
 800c240:	2000014a 	.word	0x2000014a
 800c244:	2000015a 	.word	0x2000015a

0800c248 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c248:	b480      	push	{r7}
 800c24a:	b087      	sub	sp, #28
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	4613      	mov	r3, r2
 800c254:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c256:	2300      	movs	r3, #0
 800c258:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c25a:	2300      	movs	r3, #0
 800c25c:	75fb      	strb	r3, [r7, #23]
 800c25e:	e027      	b.n	800c2b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	0f1b      	lsrs	r3, r3, #28
 800c264:	2b09      	cmp	r3, #9
 800c266:	d80b      	bhi.n	800c280 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	0f1b      	lsrs	r3, r3, #28
 800c26c:	b2da      	uxtb	r2, r3
 800c26e:	7dfb      	ldrb	r3, [r7, #23]
 800c270:	005b      	lsls	r3, r3, #1
 800c272:	4619      	mov	r1, r3
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	440b      	add	r3, r1
 800c278:	3230      	adds	r2, #48	@ 0x30
 800c27a:	b2d2      	uxtb	r2, r2
 800c27c:	701a      	strb	r2, [r3, #0]
 800c27e:	e00a      	b.n	800c296 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	0f1b      	lsrs	r3, r3, #28
 800c284:	b2da      	uxtb	r2, r3
 800c286:	7dfb      	ldrb	r3, [r7, #23]
 800c288:	005b      	lsls	r3, r3, #1
 800c28a:	4619      	mov	r1, r3
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	440b      	add	r3, r1
 800c290:	3237      	adds	r2, #55	@ 0x37
 800c292:	b2d2      	uxtb	r2, r2
 800c294:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	011b      	lsls	r3, r3, #4
 800c29a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c29c:	7dfb      	ldrb	r3, [r7, #23]
 800c29e:	005b      	lsls	r3, r3, #1
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	68ba      	ldr	r2, [r7, #8]
 800c2a4:	4413      	add	r3, r2
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c2aa:	7dfb      	ldrb	r3, [r7, #23]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	75fb      	strb	r3, [r7, #23]
 800c2b0:	7dfa      	ldrb	r2, [r7, #23]
 800c2b2:	79fb      	ldrb	r3, [r7, #7]
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d3d3      	bcc.n	800c260 <IntToUnicode+0x18>
  }
}
 800c2b8:	bf00      	nop
 800c2ba:	bf00      	nop
 800c2bc:	371c      	adds	r7, #28
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr
	...

0800c2c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b08a      	sub	sp, #40	@ 0x28
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c2d0:	f107 0314 	add.w	r3, r7, #20
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	601a      	str	r2, [r3, #0]
 800c2d8:	605a      	str	r2, [r3, #4]
 800c2da:	609a      	str	r2, [r3, #8]
 800c2dc:	60da      	str	r2, [r3, #12]
 800c2de:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	4a1c      	ldr	r2, [pc, #112]	@ (800c358 <HAL_PCD_MspInit+0x90>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d131      	bne.n	800c34e <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c2ea:	4b1c      	ldr	r3, [pc, #112]	@ (800c35c <HAL_PCD_MspInit+0x94>)
 800c2ec:	695b      	ldr	r3, [r3, #20]
 800c2ee:	4a1b      	ldr	r2, [pc, #108]	@ (800c35c <HAL_PCD_MspInit+0x94>)
 800c2f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c2f4:	6153      	str	r3, [r2, #20]
 800c2f6:	4b19      	ldr	r3, [pc, #100]	@ (800c35c <HAL_PCD_MspInit+0x94>)
 800c2f8:	695b      	ldr	r3, [r3, #20]
 800c2fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c2fe:	613b      	str	r3, [r7, #16]
 800c300:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800c302:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c308:	2302      	movs	r3, #2
 800c30a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c30c:	2300      	movs	r3, #0
 800c30e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c310:	2303      	movs	r3, #3
 800c312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800c314:	230e      	movs	r3, #14
 800c316:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c318:	f107 0314 	add.w	r3, r7, #20
 800c31c:	4619      	mov	r1, r3
 800c31e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c322:	f7f6 fa27 	bl	8002774 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c326:	4b0d      	ldr	r3, [pc, #52]	@ (800c35c <HAL_PCD_MspInit+0x94>)
 800c328:	69db      	ldr	r3, [r3, #28]
 800c32a:	4a0c      	ldr	r2, [pc, #48]	@ (800c35c <HAL_PCD_MspInit+0x94>)
 800c32c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c330:	61d3      	str	r3, [r2, #28]
 800c332:	4b0a      	ldr	r3, [pc, #40]	@ (800c35c <HAL_PCD_MspInit+0x94>)
 800c334:	69db      	ldr	r3, [r3, #28]
 800c336:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c33a:	60fb      	str	r3, [r7, #12]
 800c33c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800c33e:	2200      	movs	r2, #0
 800c340:	2100      	movs	r1, #0
 800c342:	2014      	movs	r0, #20
 800c344:	f7f6 f9df 	bl	8002706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800c348:	2014      	movs	r0, #20
 800c34a:	f7f6 f9f8 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c34e:	bf00      	nop
 800c350:	3728      	adds	r7, #40	@ 0x28
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
 800c356:	bf00      	nop
 800c358:	40005c00 	.word	0x40005c00
 800c35c:	40021000 	.word	0x40021000

0800c360 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b082      	sub	sp, #8
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800c374:	4619      	mov	r1, r3
 800c376:	4610      	mov	r0, r2
 800c378:	f7fe fe21 	bl	800afbe <USBD_LL_SetupStage>
}
 800c37c:	bf00      	nop
 800c37e:	3708      	adds	r7, #8
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b082      	sub	sp, #8
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	460b      	mov	r3, r1
 800c38e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800c396:	78fa      	ldrb	r2, [r7, #3]
 800c398:	6879      	ldr	r1, [r7, #4]
 800c39a:	4613      	mov	r3, r2
 800c39c:	009b      	lsls	r3, r3, #2
 800c39e:	4413      	add	r3, r2
 800c3a0:	00db      	lsls	r3, r3, #3
 800c3a2:	440b      	add	r3, r1
 800c3a4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	78fb      	ldrb	r3, [r7, #3]
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	f7fe fe53 	bl	800b058 <USBD_LL_DataOutStage>
}
 800c3b2:	bf00      	nop
 800c3b4:	3708      	adds	r7, #8
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3ba:	b580      	push	{r7, lr}
 800c3bc:	b082      	sub	sp, #8
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800c3cc:	78fa      	ldrb	r2, [r7, #3]
 800c3ce:	6879      	ldr	r1, [r7, #4]
 800c3d0:	4613      	mov	r3, r2
 800c3d2:	009b      	lsls	r3, r3, #2
 800c3d4:	4413      	add	r3, r2
 800c3d6:	00db      	lsls	r3, r3, #3
 800c3d8:	440b      	add	r3, r1
 800c3da:	3324      	adds	r3, #36	@ 0x24
 800c3dc:	681a      	ldr	r2, [r3, #0]
 800c3de:	78fb      	ldrb	r3, [r7, #3]
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	f7fe feaa 	bl	800b13a <USBD_LL_DataInStage>
}
 800c3e6:	bf00      	nop
 800c3e8:	3708      	adds	r7, #8
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}

0800c3ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b082      	sub	sp, #8
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f7fe ffbd 	bl	800b37c <USBD_LL_SOF>
}
 800c402:	bf00      	nop
 800c404:	3708      	adds	r7, #8
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b084      	sub	sp, #16
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c412:	2301      	movs	r3, #1
 800c414:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	795b      	ldrb	r3, [r3, #5]
 800c41a:	2b02      	cmp	r3, #2
 800c41c:	d001      	beq.n	800c422 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c41e:	f7f5 f9f5 	bl	800180c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800c428:	7bfa      	ldrb	r2, [r7, #15]
 800c42a:	4611      	mov	r1, r2
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7fe ff6a 	bl	800b306 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800c438:	4618      	mov	r0, r3
 800c43a:	f7fe ff23 	bl	800b284 <USBD_LL_Reset>
}
 800c43e:	bf00      	nop
 800c440:	3710      	adds	r7, #16
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
	...

0800c448 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800c456:	4618      	mov	r0, r3
 800c458:	f7fe ff65 	bl	800b326 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	7a5b      	ldrb	r3, [r3, #9]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d005      	beq.n	800c470 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c464:	4b04      	ldr	r3, [pc, #16]	@ (800c478 <HAL_PCD_SuspendCallback+0x30>)
 800c466:	691b      	ldr	r3, [r3, #16]
 800c468:	4a03      	ldr	r2, [pc, #12]	@ (800c478 <HAL_PCD_SuspendCallback+0x30>)
 800c46a:	f043 0306 	orr.w	r3, r3, #6
 800c46e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c470:	bf00      	nop
 800c472:	3708      	adds	r7, #8
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}
 800c478:	e000ed00 	.word	0xe000ed00

0800c47c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7fe ff60 	bl	800b350 <USBD_LL_Resume>
}
 800c490:	bf00      	nop
 800c492:	3708      	adds	r7, #8
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c4a0:	4a23      	ldr	r2, [pc, #140]	@ (800c530 <USBD_LL_Init+0x98>)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	4a21      	ldr	r2, [pc, #132]	@ (800c530 <USBD_LL_Init+0x98>)
 800c4ac:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c4b0:	4b1f      	ldr	r3, [pc, #124]	@ (800c530 <USBD_LL_Init+0x98>)
 800c4b2:	4a20      	ldr	r2, [pc, #128]	@ (800c534 <USBD_LL_Init+0x9c>)
 800c4b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c4b6:	4b1e      	ldr	r3, [pc, #120]	@ (800c530 <USBD_LL_Init+0x98>)
 800c4b8:	2208      	movs	r2, #8
 800c4ba:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c4bc:	4b1c      	ldr	r3, [pc, #112]	@ (800c530 <USBD_LL_Init+0x98>)
 800c4be:	2202      	movs	r2, #2
 800c4c0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c4c2:	4b1b      	ldr	r3, [pc, #108]	@ (800c530 <USBD_LL_Init+0x98>)
 800c4c4:	2202      	movs	r2, #2
 800c4c6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c4c8:	4b19      	ldr	r3, [pc, #100]	@ (800c530 <USBD_LL_Init+0x98>)
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c4ce:	4b18      	ldr	r3, [pc, #96]	@ (800c530 <USBD_LL_Init+0x98>)
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c4d4:	4816      	ldr	r0, [pc, #88]	@ (800c530 <USBD_LL_Init+0x98>)
 800c4d6:	f7f7 f8de 	bl	8003696 <HAL_PCD_Init>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d001      	beq.n	800c4e4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c4e0:	f7f5 f994 	bl	800180c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c4ea:	2318      	movs	r3, #24
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	2100      	movs	r1, #0
 800c4f0:	f7f8 fd3f 	bl	8004f72 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c4fa:	2358      	movs	r3, #88	@ 0x58
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	2180      	movs	r1, #128	@ 0x80
 800c500:	f7f8 fd37 	bl	8004f72 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c50a:	2398      	movs	r3, #152	@ 0x98
 800c50c:	2200      	movs	r2, #0
 800c50e:	2181      	movs	r1, #129	@ 0x81
 800c510:	f7f8 fd2f 	bl	8004f72 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c51a:	23d8      	movs	r3, #216	@ 0xd8
 800c51c:	2200      	movs	r2, #0
 800c51e:	2101      	movs	r1, #1
 800c520:	f7f8 fd27 	bl	8004f72 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800c524:	2300      	movs	r3, #0
}
 800c526:	4618      	mov	r0, r3
 800c528:	3708      	adds	r7, #8
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	20000c10 	.word	0x20000c10
 800c534:	40005c00 	.word	0x40005c00

0800c538 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b084      	sub	sp, #16
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c540:	2300      	movs	r3, #0
 800c542:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c544:	2300      	movs	r3, #0
 800c546:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c54e:	4618      	mov	r0, r3
 800c550:	f7f7 f968 	bl	8003824 <HAL_PCD_Start>
 800c554:	4603      	mov	r3, r0
 800c556:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c558:	7bfb      	ldrb	r3, [r7, #15]
 800c55a:	4618      	mov	r0, r3
 800c55c:	f000 f940 	bl	800c7e0 <USBD_Get_USB_Status>
 800c560:	4603      	mov	r3, r0
 800c562:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c564:	7bbb      	ldrb	r3, [r7, #14]
}
 800c566:	4618      	mov	r0, r3
 800c568:	3710      	adds	r7, #16
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}

0800c56e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c56e:	b580      	push	{r7, lr}
 800c570:	b084      	sub	sp, #16
 800c572:	af00      	add	r7, sp, #0
 800c574:	6078      	str	r0, [r7, #4]
 800c576:	4608      	mov	r0, r1
 800c578:	4611      	mov	r1, r2
 800c57a:	461a      	mov	r2, r3
 800c57c:	4603      	mov	r3, r0
 800c57e:	70fb      	strb	r3, [r7, #3]
 800c580:	460b      	mov	r3, r1
 800c582:	70bb      	strb	r3, [r7, #2]
 800c584:	4613      	mov	r3, r2
 800c586:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c588:	2300      	movs	r3, #0
 800c58a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c58c:	2300      	movs	r3, #0
 800c58e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c596:	78bb      	ldrb	r3, [r7, #2]
 800c598:	883a      	ldrh	r2, [r7, #0]
 800c59a:	78f9      	ldrb	r1, [r7, #3]
 800c59c:	f7f7 fa60 	bl	8003a60 <HAL_PCD_EP_Open>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5a4:	7bfb      	ldrb	r3, [r7, #15]
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f000 f91a 	bl	800c7e0 <USBD_Get_USB_Status>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3710      	adds	r7, #16
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}

0800c5ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5ba:	b580      	push	{r7, lr}
 800c5bc:	b084      	sub	sp, #16
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
 800c5c2:	460b      	mov	r3, r1
 800c5c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c5d4:	78fa      	ldrb	r2, [r7, #3]
 800c5d6:	4611      	mov	r1, r2
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7f7 fa9e 	bl	8003b1a <HAL_PCD_EP_Close>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5e2:	7bfb      	ldrb	r3, [r7, #15]
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f000 f8fb 	bl	800c7e0 <USBD_Get_USB_Status>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3710      	adds	r7, #16
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	460b      	mov	r3, r1
 800c602:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c604:	2300      	movs	r3, #0
 800c606:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c608:	2300      	movs	r3, #0
 800c60a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c612:	78fa      	ldrb	r2, [r7, #3]
 800c614:	4611      	mov	r1, r2
 800c616:	4618      	mov	r0, r3
 800c618:	f7f7 fb2f 	bl	8003c7a <HAL_PCD_EP_SetStall>
 800c61c:	4603      	mov	r3, r0
 800c61e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c620:	7bfb      	ldrb	r3, [r7, #15]
 800c622:	4618      	mov	r0, r3
 800c624:	f000 f8dc 	bl	800c7e0 <USBD_Get_USB_Status>
 800c628:	4603      	mov	r3, r0
 800c62a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c62c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3710      	adds	r7, #16
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}

0800c636 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c636:	b580      	push	{r7, lr}
 800c638:	b084      	sub	sp, #16
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
 800c63e:	460b      	mov	r3, r1
 800c640:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c642:	2300      	movs	r3, #0
 800c644:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c646:	2300      	movs	r3, #0
 800c648:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c650:	78fa      	ldrb	r2, [r7, #3]
 800c652:	4611      	mov	r1, r2
 800c654:	4618      	mov	r0, r3
 800c656:	f7f7 fb62 	bl	8003d1e <HAL_PCD_EP_ClrStall>
 800c65a:	4603      	mov	r3, r0
 800c65c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c65e:	7bfb      	ldrb	r3, [r7, #15]
 800c660:	4618      	mov	r0, r3
 800c662:	f000 f8bd 	bl	800c7e0 <USBD_Get_USB_Status>
 800c666:	4603      	mov	r3, r0
 800c668:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c66a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3710      	adds	r7, #16
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}

0800c674 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c674:	b480      	push	{r7}
 800c676:	b085      	sub	sp, #20
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	460b      	mov	r3, r1
 800c67e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c686:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c688:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	da0b      	bge.n	800c6a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c690:	78fb      	ldrb	r3, [r7, #3]
 800c692:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c696:	68f9      	ldr	r1, [r7, #12]
 800c698:	4613      	mov	r3, r2
 800c69a:	009b      	lsls	r3, r3, #2
 800c69c:	4413      	add	r3, r2
 800c69e:	00db      	lsls	r3, r3, #3
 800c6a0:	440b      	add	r3, r1
 800c6a2:	3312      	adds	r3, #18
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	e00b      	b.n	800c6c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c6a8:	78fb      	ldrb	r3, [r7, #3]
 800c6aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c6ae:	68f9      	ldr	r1, [r7, #12]
 800c6b0:	4613      	mov	r3, r2
 800c6b2:	009b      	lsls	r3, r3, #2
 800c6b4:	4413      	add	r3, r2
 800c6b6:	00db      	lsls	r3, r3, #3
 800c6b8:	440b      	add	r3, r1
 800c6ba:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800c6be:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3714      	adds	r7, #20
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr

0800c6cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b084      	sub	sp, #16
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	460b      	mov	r3, r1
 800c6d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c6e6:	78fa      	ldrb	r2, [r7, #3]
 800c6e8:	4611      	mov	r1, r2
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7f7 f994 	bl	8003a18 <HAL_PCD_SetAddress>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6f4:	7bfb      	ldrb	r3, [r7, #15]
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f000 f872 	bl	800c7e0 <USBD_Get_USB_Status>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c700:	7bbb      	ldrb	r3, [r7, #14]
}
 800c702:	4618      	mov	r0, r3
 800c704:	3710      	adds	r7, #16
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}

0800c70a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b086      	sub	sp, #24
 800c70e:	af00      	add	r7, sp, #0
 800c710:	60f8      	str	r0, [r7, #12]
 800c712:	607a      	str	r2, [r7, #4]
 800c714:	461a      	mov	r2, r3
 800c716:	460b      	mov	r3, r1
 800c718:	72fb      	strb	r3, [r7, #11]
 800c71a:	4613      	mov	r3, r2
 800c71c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c71e:	2300      	movs	r3, #0
 800c720:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c722:	2300      	movs	r3, #0
 800c724:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c72c:	893b      	ldrh	r3, [r7, #8]
 800c72e:	7af9      	ldrb	r1, [r7, #11]
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	f7f7 fa6b 	bl	8003c0c <HAL_PCD_EP_Transmit>
 800c736:	4603      	mov	r3, r0
 800c738:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c73a:	7dfb      	ldrb	r3, [r7, #23]
 800c73c:	4618      	mov	r0, r3
 800c73e:	f000 f84f 	bl	800c7e0 <USBD_Get_USB_Status>
 800c742:	4603      	mov	r3, r0
 800c744:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c746:	7dbb      	ldrb	r3, [r7, #22]
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3718      	adds	r7, #24
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b086      	sub	sp, #24
 800c754:	af00      	add	r7, sp, #0
 800c756:	60f8      	str	r0, [r7, #12]
 800c758:	607a      	str	r2, [r7, #4]
 800c75a:	461a      	mov	r2, r3
 800c75c:	460b      	mov	r3, r1
 800c75e:	72fb      	strb	r3, [r7, #11]
 800c760:	4613      	mov	r3, r2
 800c762:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c764:	2300      	movs	r3, #0
 800c766:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c768:	2300      	movs	r3, #0
 800c76a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c772:	893b      	ldrh	r3, [r7, #8]
 800c774:	7af9      	ldrb	r1, [r7, #11]
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	f7f7 fa17 	bl	8003baa <HAL_PCD_EP_Receive>
 800c77c:	4603      	mov	r3, r0
 800c77e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c780:	7dfb      	ldrb	r3, [r7, #23]
 800c782:	4618      	mov	r0, r3
 800c784:	f000 f82c 	bl	800c7e0 <USBD_Get_USB_Status>
 800c788:	4603      	mov	r3, r0
 800c78a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c78c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3718      	adds	r7, #24
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
	...

0800c798 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c798:	b480      	push	{r7}
 800c79a:	b083      	sub	sp, #12
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800c7a0:	4b03      	ldr	r3, [pc, #12]	@ (800c7b0 <USBD_static_malloc+0x18>)
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	370c      	adds	r7, #12
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ac:	4770      	bx	lr
 800c7ae:	bf00      	nop
 800c7b0:	20000ee4 	.word	0x20000ee4

0800c7b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b083      	sub	sp, #12
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]

}
 800c7bc:	bf00      	nop
 800c7be:	370c      	adds	r7, #12
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c6:	4770      	bx	lr

0800c7c8 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b083      	sub	sp, #12
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	460b      	mov	r3, r1
 800c7d2:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c7d4:	bf00      	nop
 800c7d6:	370c      	adds	r7, #12
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr

0800c7e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b085      	sub	sp, #20
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c7ee:	79fb      	ldrb	r3, [r7, #7]
 800c7f0:	2b03      	cmp	r3, #3
 800c7f2:	d817      	bhi.n	800c824 <USBD_Get_USB_Status+0x44>
 800c7f4:	a201      	add	r2, pc, #4	@ (adr r2, 800c7fc <USBD_Get_USB_Status+0x1c>)
 800c7f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7fa:	bf00      	nop
 800c7fc:	0800c80d 	.word	0x0800c80d
 800c800:	0800c813 	.word	0x0800c813
 800c804:	0800c819 	.word	0x0800c819
 800c808:	0800c81f 	.word	0x0800c81f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c80c:	2300      	movs	r3, #0
 800c80e:	73fb      	strb	r3, [r7, #15]
    break;
 800c810:	e00b      	b.n	800c82a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c812:	2302      	movs	r3, #2
 800c814:	73fb      	strb	r3, [r7, #15]
    break;
 800c816:	e008      	b.n	800c82a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c818:	2301      	movs	r3, #1
 800c81a:	73fb      	strb	r3, [r7, #15]
    break;
 800c81c:	e005      	b.n	800c82a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c81e:	2302      	movs	r3, #2
 800c820:	73fb      	strb	r3, [r7, #15]
    break;
 800c822:	e002      	b.n	800c82a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c824:	2302      	movs	r3, #2
 800c826:	73fb      	strb	r3, [r7, #15]
    break;
 800c828:	bf00      	nop
  }
  return usb_status;
 800c82a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3714      	adds	r7, #20
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr

0800c838 <__cvt>:
 800c838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c83c:	ec57 6b10 	vmov	r6, r7, d0
 800c840:	2f00      	cmp	r7, #0
 800c842:	460c      	mov	r4, r1
 800c844:	4619      	mov	r1, r3
 800c846:	463b      	mov	r3, r7
 800c848:	bfbb      	ittet	lt
 800c84a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c84e:	461f      	movlt	r7, r3
 800c850:	2300      	movge	r3, #0
 800c852:	232d      	movlt	r3, #45	@ 0x2d
 800c854:	700b      	strb	r3, [r1, #0]
 800c856:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c858:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c85c:	4691      	mov	r9, r2
 800c85e:	f023 0820 	bic.w	r8, r3, #32
 800c862:	bfbc      	itt	lt
 800c864:	4632      	movlt	r2, r6
 800c866:	4616      	movlt	r6, r2
 800c868:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c86c:	d005      	beq.n	800c87a <__cvt+0x42>
 800c86e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c872:	d100      	bne.n	800c876 <__cvt+0x3e>
 800c874:	3401      	adds	r4, #1
 800c876:	2102      	movs	r1, #2
 800c878:	e000      	b.n	800c87c <__cvt+0x44>
 800c87a:	2103      	movs	r1, #3
 800c87c:	ab03      	add	r3, sp, #12
 800c87e:	9301      	str	r3, [sp, #4]
 800c880:	ab02      	add	r3, sp, #8
 800c882:	9300      	str	r3, [sp, #0]
 800c884:	ec47 6b10 	vmov	d0, r6, r7
 800c888:	4653      	mov	r3, sl
 800c88a:	4622      	mov	r2, r4
 800c88c:	f000 ff3c 	bl	800d708 <_dtoa_r>
 800c890:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c894:	4605      	mov	r5, r0
 800c896:	d119      	bne.n	800c8cc <__cvt+0x94>
 800c898:	f019 0f01 	tst.w	r9, #1
 800c89c:	d00e      	beq.n	800c8bc <__cvt+0x84>
 800c89e:	eb00 0904 	add.w	r9, r0, r4
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	4630      	mov	r0, r6
 800c8a8:	4639      	mov	r1, r7
 800c8aa:	f7f4 f90d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8ae:	b108      	cbz	r0, 800c8b4 <__cvt+0x7c>
 800c8b0:	f8cd 900c 	str.w	r9, [sp, #12]
 800c8b4:	2230      	movs	r2, #48	@ 0x30
 800c8b6:	9b03      	ldr	r3, [sp, #12]
 800c8b8:	454b      	cmp	r3, r9
 800c8ba:	d31e      	bcc.n	800c8fa <__cvt+0xc2>
 800c8bc:	9b03      	ldr	r3, [sp, #12]
 800c8be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c8c0:	1b5b      	subs	r3, r3, r5
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	6013      	str	r3, [r2, #0]
 800c8c6:	b004      	add	sp, #16
 800c8c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c8d0:	eb00 0904 	add.w	r9, r0, r4
 800c8d4:	d1e5      	bne.n	800c8a2 <__cvt+0x6a>
 800c8d6:	7803      	ldrb	r3, [r0, #0]
 800c8d8:	2b30      	cmp	r3, #48	@ 0x30
 800c8da:	d10a      	bne.n	800c8f2 <__cvt+0xba>
 800c8dc:	2200      	movs	r2, #0
 800c8de:	2300      	movs	r3, #0
 800c8e0:	4630      	mov	r0, r6
 800c8e2:	4639      	mov	r1, r7
 800c8e4:	f7f4 f8f0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8e8:	b918      	cbnz	r0, 800c8f2 <__cvt+0xba>
 800c8ea:	f1c4 0401 	rsb	r4, r4, #1
 800c8ee:	f8ca 4000 	str.w	r4, [sl]
 800c8f2:	f8da 3000 	ldr.w	r3, [sl]
 800c8f6:	4499      	add	r9, r3
 800c8f8:	e7d3      	b.n	800c8a2 <__cvt+0x6a>
 800c8fa:	1c59      	adds	r1, r3, #1
 800c8fc:	9103      	str	r1, [sp, #12]
 800c8fe:	701a      	strb	r2, [r3, #0]
 800c900:	e7d9      	b.n	800c8b6 <__cvt+0x7e>

0800c902 <__exponent>:
 800c902:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c904:	2900      	cmp	r1, #0
 800c906:	bfba      	itte	lt
 800c908:	4249      	neglt	r1, r1
 800c90a:	232d      	movlt	r3, #45	@ 0x2d
 800c90c:	232b      	movge	r3, #43	@ 0x2b
 800c90e:	2909      	cmp	r1, #9
 800c910:	7002      	strb	r2, [r0, #0]
 800c912:	7043      	strb	r3, [r0, #1]
 800c914:	dd29      	ble.n	800c96a <__exponent+0x68>
 800c916:	f10d 0307 	add.w	r3, sp, #7
 800c91a:	461d      	mov	r5, r3
 800c91c:	270a      	movs	r7, #10
 800c91e:	461a      	mov	r2, r3
 800c920:	fbb1 f6f7 	udiv	r6, r1, r7
 800c924:	fb07 1416 	mls	r4, r7, r6, r1
 800c928:	3430      	adds	r4, #48	@ 0x30
 800c92a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c92e:	460c      	mov	r4, r1
 800c930:	2c63      	cmp	r4, #99	@ 0x63
 800c932:	f103 33ff 	add.w	r3, r3, #4294967295
 800c936:	4631      	mov	r1, r6
 800c938:	dcf1      	bgt.n	800c91e <__exponent+0x1c>
 800c93a:	3130      	adds	r1, #48	@ 0x30
 800c93c:	1e94      	subs	r4, r2, #2
 800c93e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c942:	1c41      	adds	r1, r0, #1
 800c944:	4623      	mov	r3, r4
 800c946:	42ab      	cmp	r3, r5
 800c948:	d30a      	bcc.n	800c960 <__exponent+0x5e>
 800c94a:	f10d 0309 	add.w	r3, sp, #9
 800c94e:	1a9b      	subs	r3, r3, r2
 800c950:	42ac      	cmp	r4, r5
 800c952:	bf88      	it	hi
 800c954:	2300      	movhi	r3, #0
 800c956:	3302      	adds	r3, #2
 800c958:	4403      	add	r3, r0
 800c95a:	1a18      	subs	r0, r3, r0
 800c95c:	b003      	add	sp, #12
 800c95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c960:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c964:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c968:	e7ed      	b.n	800c946 <__exponent+0x44>
 800c96a:	2330      	movs	r3, #48	@ 0x30
 800c96c:	3130      	adds	r1, #48	@ 0x30
 800c96e:	7083      	strb	r3, [r0, #2]
 800c970:	70c1      	strb	r1, [r0, #3]
 800c972:	1d03      	adds	r3, r0, #4
 800c974:	e7f1      	b.n	800c95a <__exponent+0x58>
	...

0800c978 <_printf_float>:
 800c978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c97c:	b08d      	sub	sp, #52	@ 0x34
 800c97e:	460c      	mov	r4, r1
 800c980:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c984:	4616      	mov	r6, r2
 800c986:	461f      	mov	r7, r3
 800c988:	4605      	mov	r5, r0
 800c98a:	f000 fdad 	bl	800d4e8 <_localeconv_r>
 800c98e:	6803      	ldr	r3, [r0, #0]
 800c990:	9304      	str	r3, [sp, #16]
 800c992:	4618      	mov	r0, r3
 800c994:	f7f3 fc6c 	bl	8000270 <strlen>
 800c998:	2300      	movs	r3, #0
 800c99a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c99c:	f8d8 3000 	ldr.w	r3, [r8]
 800c9a0:	9005      	str	r0, [sp, #20]
 800c9a2:	3307      	adds	r3, #7
 800c9a4:	f023 0307 	bic.w	r3, r3, #7
 800c9a8:	f103 0208 	add.w	r2, r3, #8
 800c9ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c9b0:	f8d4 b000 	ldr.w	fp, [r4]
 800c9b4:	f8c8 2000 	str.w	r2, [r8]
 800c9b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c9bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c9c0:	9307      	str	r3, [sp, #28]
 800c9c2:	f8cd 8018 	str.w	r8, [sp, #24]
 800c9c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c9ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9ce:	4b9c      	ldr	r3, [pc, #624]	@ (800cc40 <_printf_float+0x2c8>)
 800c9d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c9d4:	f7f4 f8aa 	bl	8000b2c <__aeabi_dcmpun>
 800c9d8:	bb70      	cbnz	r0, 800ca38 <_printf_float+0xc0>
 800c9da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9de:	4b98      	ldr	r3, [pc, #608]	@ (800cc40 <_printf_float+0x2c8>)
 800c9e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c9e4:	f7f4 f884 	bl	8000af0 <__aeabi_dcmple>
 800c9e8:	bb30      	cbnz	r0, 800ca38 <_printf_float+0xc0>
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	4640      	mov	r0, r8
 800c9f0:	4649      	mov	r1, r9
 800c9f2:	f7f4 f873 	bl	8000adc <__aeabi_dcmplt>
 800c9f6:	b110      	cbz	r0, 800c9fe <_printf_float+0x86>
 800c9f8:	232d      	movs	r3, #45	@ 0x2d
 800c9fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c9fe:	4a91      	ldr	r2, [pc, #580]	@ (800cc44 <_printf_float+0x2cc>)
 800ca00:	4b91      	ldr	r3, [pc, #580]	@ (800cc48 <_printf_float+0x2d0>)
 800ca02:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ca06:	bf94      	ite	ls
 800ca08:	4690      	movls	r8, r2
 800ca0a:	4698      	movhi	r8, r3
 800ca0c:	2303      	movs	r3, #3
 800ca0e:	6123      	str	r3, [r4, #16]
 800ca10:	f02b 0304 	bic.w	r3, fp, #4
 800ca14:	6023      	str	r3, [r4, #0]
 800ca16:	f04f 0900 	mov.w	r9, #0
 800ca1a:	9700      	str	r7, [sp, #0]
 800ca1c:	4633      	mov	r3, r6
 800ca1e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ca20:	4621      	mov	r1, r4
 800ca22:	4628      	mov	r0, r5
 800ca24:	f000 f9d2 	bl	800cdcc <_printf_common>
 800ca28:	3001      	adds	r0, #1
 800ca2a:	f040 808d 	bne.w	800cb48 <_printf_float+0x1d0>
 800ca2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca32:	b00d      	add	sp, #52	@ 0x34
 800ca34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca38:	4642      	mov	r2, r8
 800ca3a:	464b      	mov	r3, r9
 800ca3c:	4640      	mov	r0, r8
 800ca3e:	4649      	mov	r1, r9
 800ca40:	f7f4 f874 	bl	8000b2c <__aeabi_dcmpun>
 800ca44:	b140      	cbz	r0, 800ca58 <_printf_float+0xe0>
 800ca46:	464b      	mov	r3, r9
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	bfbc      	itt	lt
 800ca4c:	232d      	movlt	r3, #45	@ 0x2d
 800ca4e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ca52:	4a7e      	ldr	r2, [pc, #504]	@ (800cc4c <_printf_float+0x2d4>)
 800ca54:	4b7e      	ldr	r3, [pc, #504]	@ (800cc50 <_printf_float+0x2d8>)
 800ca56:	e7d4      	b.n	800ca02 <_printf_float+0x8a>
 800ca58:	6863      	ldr	r3, [r4, #4]
 800ca5a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ca5e:	9206      	str	r2, [sp, #24]
 800ca60:	1c5a      	adds	r2, r3, #1
 800ca62:	d13b      	bne.n	800cadc <_printf_float+0x164>
 800ca64:	2306      	movs	r3, #6
 800ca66:	6063      	str	r3, [r4, #4]
 800ca68:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	6022      	str	r2, [r4, #0]
 800ca70:	9303      	str	r3, [sp, #12]
 800ca72:	ab0a      	add	r3, sp, #40	@ 0x28
 800ca74:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ca78:	ab09      	add	r3, sp, #36	@ 0x24
 800ca7a:	9300      	str	r3, [sp, #0]
 800ca7c:	6861      	ldr	r1, [r4, #4]
 800ca7e:	ec49 8b10 	vmov	d0, r8, r9
 800ca82:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ca86:	4628      	mov	r0, r5
 800ca88:	f7ff fed6 	bl	800c838 <__cvt>
 800ca8c:	9b06      	ldr	r3, [sp, #24]
 800ca8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ca90:	2b47      	cmp	r3, #71	@ 0x47
 800ca92:	4680      	mov	r8, r0
 800ca94:	d129      	bne.n	800caea <_printf_float+0x172>
 800ca96:	1cc8      	adds	r0, r1, #3
 800ca98:	db02      	blt.n	800caa0 <_printf_float+0x128>
 800ca9a:	6863      	ldr	r3, [r4, #4]
 800ca9c:	4299      	cmp	r1, r3
 800ca9e:	dd41      	ble.n	800cb24 <_printf_float+0x1ac>
 800caa0:	f1aa 0a02 	sub.w	sl, sl, #2
 800caa4:	fa5f fa8a 	uxtb.w	sl, sl
 800caa8:	3901      	subs	r1, #1
 800caaa:	4652      	mov	r2, sl
 800caac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cab0:	9109      	str	r1, [sp, #36]	@ 0x24
 800cab2:	f7ff ff26 	bl	800c902 <__exponent>
 800cab6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cab8:	1813      	adds	r3, r2, r0
 800caba:	2a01      	cmp	r2, #1
 800cabc:	4681      	mov	r9, r0
 800cabe:	6123      	str	r3, [r4, #16]
 800cac0:	dc02      	bgt.n	800cac8 <_printf_float+0x150>
 800cac2:	6822      	ldr	r2, [r4, #0]
 800cac4:	07d2      	lsls	r2, r2, #31
 800cac6:	d501      	bpl.n	800cacc <_printf_float+0x154>
 800cac8:	3301      	adds	r3, #1
 800caca:	6123      	str	r3, [r4, #16]
 800cacc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d0a2      	beq.n	800ca1a <_printf_float+0xa2>
 800cad4:	232d      	movs	r3, #45	@ 0x2d
 800cad6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cada:	e79e      	b.n	800ca1a <_printf_float+0xa2>
 800cadc:	9a06      	ldr	r2, [sp, #24]
 800cade:	2a47      	cmp	r2, #71	@ 0x47
 800cae0:	d1c2      	bne.n	800ca68 <_printf_float+0xf0>
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d1c0      	bne.n	800ca68 <_printf_float+0xf0>
 800cae6:	2301      	movs	r3, #1
 800cae8:	e7bd      	b.n	800ca66 <_printf_float+0xee>
 800caea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800caee:	d9db      	bls.n	800caa8 <_printf_float+0x130>
 800caf0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800caf4:	d118      	bne.n	800cb28 <_printf_float+0x1b0>
 800caf6:	2900      	cmp	r1, #0
 800caf8:	6863      	ldr	r3, [r4, #4]
 800cafa:	dd0b      	ble.n	800cb14 <_printf_float+0x19c>
 800cafc:	6121      	str	r1, [r4, #16]
 800cafe:	b913      	cbnz	r3, 800cb06 <_printf_float+0x18e>
 800cb00:	6822      	ldr	r2, [r4, #0]
 800cb02:	07d0      	lsls	r0, r2, #31
 800cb04:	d502      	bpl.n	800cb0c <_printf_float+0x194>
 800cb06:	3301      	adds	r3, #1
 800cb08:	440b      	add	r3, r1
 800cb0a:	6123      	str	r3, [r4, #16]
 800cb0c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cb0e:	f04f 0900 	mov.w	r9, #0
 800cb12:	e7db      	b.n	800cacc <_printf_float+0x154>
 800cb14:	b913      	cbnz	r3, 800cb1c <_printf_float+0x1a4>
 800cb16:	6822      	ldr	r2, [r4, #0]
 800cb18:	07d2      	lsls	r2, r2, #31
 800cb1a:	d501      	bpl.n	800cb20 <_printf_float+0x1a8>
 800cb1c:	3302      	adds	r3, #2
 800cb1e:	e7f4      	b.n	800cb0a <_printf_float+0x192>
 800cb20:	2301      	movs	r3, #1
 800cb22:	e7f2      	b.n	800cb0a <_printf_float+0x192>
 800cb24:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cb28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb2a:	4299      	cmp	r1, r3
 800cb2c:	db05      	blt.n	800cb3a <_printf_float+0x1c2>
 800cb2e:	6823      	ldr	r3, [r4, #0]
 800cb30:	6121      	str	r1, [r4, #16]
 800cb32:	07d8      	lsls	r0, r3, #31
 800cb34:	d5ea      	bpl.n	800cb0c <_printf_float+0x194>
 800cb36:	1c4b      	adds	r3, r1, #1
 800cb38:	e7e7      	b.n	800cb0a <_printf_float+0x192>
 800cb3a:	2900      	cmp	r1, #0
 800cb3c:	bfd4      	ite	le
 800cb3e:	f1c1 0202 	rsble	r2, r1, #2
 800cb42:	2201      	movgt	r2, #1
 800cb44:	4413      	add	r3, r2
 800cb46:	e7e0      	b.n	800cb0a <_printf_float+0x192>
 800cb48:	6823      	ldr	r3, [r4, #0]
 800cb4a:	055a      	lsls	r2, r3, #21
 800cb4c:	d407      	bmi.n	800cb5e <_printf_float+0x1e6>
 800cb4e:	6923      	ldr	r3, [r4, #16]
 800cb50:	4642      	mov	r2, r8
 800cb52:	4631      	mov	r1, r6
 800cb54:	4628      	mov	r0, r5
 800cb56:	47b8      	blx	r7
 800cb58:	3001      	adds	r0, #1
 800cb5a:	d12b      	bne.n	800cbb4 <_printf_float+0x23c>
 800cb5c:	e767      	b.n	800ca2e <_printf_float+0xb6>
 800cb5e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cb62:	f240 80dd 	bls.w	800cd20 <_printf_float+0x3a8>
 800cb66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	f7f3 ffab 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb72:	2800      	cmp	r0, #0
 800cb74:	d033      	beq.n	800cbde <_printf_float+0x266>
 800cb76:	4a37      	ldr	r2, [pc, #220]	@ (800cc54 <_printf_float+0x2dc>)
 800cb78:	2301      	movs	r3, #1
 800cb7a:	4631      	mov	r1, r6
 800cb7c:	4628      	mov	r0, r5
 800cb7e:	47b8      	blx	r7
 800cb80:	3001      	adds	r0, #1
 800cb82:	f43f af54 	beq.w	800ca2e <_printf_float+0xb6>
 800cb86:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cb8a:	4543      	cmp	r3, r8
 800cb8c:	db02      	blt.n	800cb94 <_printf_float+0x21c>
 800cb8e:	6823      	ldr	r3, [r4, #0]
 800cb90:	07d8      	lsls	r0, r3, #31
 800cb92:	d50f      	bpl.n	800cbb4 <_printf_float+0x23c>
 800cb94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb98:	4631      	mov	r1, r6
 800cb9a:	4628      	mov	r0, r5
 800cb9c:	47b8      	blx	r7
 800cb9e:	3001      	adds	r0, #1
 800cba0:	f43f af45 	beq.w	800ca2e <_printf_float+0xb6>
 800cba4:	f04f 0900 	mov.w	r9, #0
 800cba8:	f108 38ff 	add.w	r8, r8, #4294967295
 800cbac:	f104 0a1a 	add.w	sl, r4, #26
 800cbb0:	45c8      	cmp	r8, r9
 800cbb2:	dc09      	bgt.n	800cbc8 <_printf_float+0x250>
 800cbb4:	6823      	ldr	r3, [r4, #0]
 800cbb6:	079b      	lsls	r3, r3, #30
 800cbb8:	f100 8103 	bmi.w	800cdc2 <_printf_float+0x44a>
 800cbbc:	68e0      	ldr	r0, [r4, #12]
 800cbbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cbc0:	4298      	cmp	r0, r3
 800cbc2:	bfb8      	it	lt
 800cbc4:	4618      	movlt	r0, r3
 800cbc6:	e734      	b.n	800ca32 <_printf_float+0xba>
 800cbc8:	2301      	movs	r3, #1
 800cbca:	4652      	mov	r2, sl
 800cbcc:	4631      	mov	r1, r6
 800cbce:	4628      	mov	r0, r5
 800cbd0:	47b8      	blx	r7
 800cbd2:	3001      	adds	r0, #1
 800cbd4:	f43f af2b 	beq.w	800ca2e <_printf_float+0xb6>
 800cbd8:	f109 0901 	add.w	r9, r9, #1
 800cbdc:	e7e8      	b.n	800cbb0 <_printf_float+0x238>
 800cbde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	dc39      	bgt.n	800cc58 <_printf_float+0x2e0>
 800cbe4:	4a1b      	ldr	r2, [pc, #108]	@ (800cc54 <_printf_float+0x2dc>)
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	4631      	mov	r1, r6
 800cbea:	4628      	mov	r0, r5
 800cbec:	47b8      	blx	r7
 800cbee:	3001      	adds	r0, #1
 800cbf0:	f43f af1d 	beq.w	800ca2e <_printf_float+0xb6>
 800cbf4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cbf8:	ea59 0303 	orrs.w	r3, r9, r3
 800cbfc:	d102      	bne.n	800cc04 <_printf_float+0x28c>
 800cbfe:	6823      	ldr	r3, [r4, #0]
 800cc00:	07d9      	lsls	r1, r3, #31
 800cc02:	d5d7      	bpl.n	800cbb4 <_printf_float+0x23c>
 800cc04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc08:	4631      	mov	r1, r6
 800cc0a:	4628      	mov	r0, r5
 800cc0c:	47b8      	blx	r7
 800cc0e:	3001      	adds	r0, #1
 800cc10:	f43f af0d 	beq.w	800ca2e <_printf_float+0xb6>
 800cc14:	f04f 0a00 	mov.w	sl, #0
 800cc18:	f104 0b1a 	add.w	fp, r4, #26
 800cc1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc1e:	425b      	negs	r3, r3
 800cc20:	4553      	cmp	r3, sl
 800cc22:	dc01      	bgt.n	800cc28 <_printf_float+0x2b0>
 800cc24:	464b      	mov	r3, r9
 800cc26:	e793      	b.n	800cb50 <_printf_float+0x1d8>
 800cc28:	2301      	movs	r3, #1
 800cc2a:	465a      	mov	r2, fp
 800cc2c:	4631      	mov	r1, r6
 800cc2e:	4628      	mov	r0, r5
 800cc30:	47b8      	blx	r7
 800cc32:	3001      	adds	r0, #1
 800cc34:	f43f aefb 	beq.w	800ca2e <_printf_float+0xb6>
 800cc38:	f10a 0a01 	add.w	sl, sl, #1
 800cc3c:	e7ee      	b.n	800cc1c <_printf_float+0x2a4>
 800cc3e:	bf00      	nop
 800cc40:	7fefffff 	.word	0x7fefffff
 800cc44:	0800f2b0 	.word	0x0800f2b0
 800cc48:	0800f2b4 	.word	0x0800f2b4
 800cc4c:	0800f2b8 	.word	0x0800f2b8
 800cc50:	0800f2bc 	.word	0x0800f2bc
 800cc54:	0800f2c0 	.word	0x0800f2c0
 800cc58:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cc5a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cc5e:	4553      	cmp	r3, sl
 800cc60:	bfa8      	it	ge
 800cc62:	4653      	movge	r3, sl
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	4699      	mov	r9, r3
 800cc68:	dc36      	bgt.n	800ccd8 <_printf_float+0x360>
 800cc6a:	f04f 0b00 	mov.w	fp, #0
 800cc6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc72:	f104 021a 	add.w	r2, r4, #26
 800cc76:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cc78:	9306      	str	r3, [sp, #24]
 800cc7a:	eba3 0309 	sub.w	r3, r3, r9
 800cc7e:	455b      	cmp	r3, fp
 800cc80:	dc31      	bgt.n	800cce6 <_printf_float+0x36e>
 800cc82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc84:	459a      	cmp	sl, r3
 800cc86:	dc3a      	bgt.n	800ccfe <_printf_float+0x386>
 800cc88:	6823      	ldr	r3, [r4, #0]
 800cc8a:	07da      	lsls	r2, r3, #31
 800cc8c:	d437      	bmi.n	800ccfe <_printf_float+0x386>
 800cc8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc90:	ebaa 0903 	sub.w	r9, sl, r3
 800cc94:	9b06      	ldr	r3, [sp, #24]
 800cc96:	ebaa 0303 	sub.w	r3, sl, r3
 800cc9a:	4599      	cmp	r9, r3
 800cc9c:	bfa8      	it	ge
 800cc9e:	4699      	movge	r9, r3
 800cca0:	f1b9 0f00 	cmp.w	r9, #0
 800cca4:	dc33      	bgt.n	800cd0e <_printf_float+0x396>
 800cca6:	f04f 0800 	mov.w	r8, #0
 800ccaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ccae:	f104 0b1a 	add.w	fp, r4, #26
 800ccb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccb4:	ebaa 0303 	sub.w	r3, sl, r3
 800ccb8:	eba3 0309 	sub.w	r3, r3, r9
 800ccbc:	4543      	cmp	r3, r8
 800ccbe:	f77f af79 	ble.w	800cbb4 <_printf_float+0x23c>
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	465a      	mov	r2, fp
 800ccc6:	4631      	mov	r1, r6
 800ccc8:	4628      	mov	r0, r5
 800ccca:	47b8      	blx	r7
 800cccc:	3001      	adds	r0, #1
 800ccce:	f43f aeae 	beq.w	800ca2e <_printf_float+0xb6>
 800ccd2:	f108 0801 	add.w	r8, r8, #1
 800ccd6:	e7ec      	b.n	800ccb2 <_printf_float+0x33a>
 800ccd8:	4642      	mov	r2, r8
 800ccda:	4631      	mov	r1, r6
 800ccdc:	4628      	mov	r0, r5
 800ccde:	47b8      	blx	r7
 800cce0:	3001      	adds	r0, #1
 800cce2:	d1c2      	bne.n	800cc6a <_printf_float+0x2f2>
 800cce4:	e6a3      	b.n	800ca2e <_printf_float+0xb6>
 800cce6:	2301      	movs	r3, #1
 800cce8:	4631      	mov	r1, r6
 800ccea:	4628      	mov	r0, r5
 800ccec:	9206      	str	r2, [sp, #24]
 800ccee:	47b8      	blx	r7
 800ccf0:	3001      	adds	r0, #1
 800ccf2:	f43f ae9c 	beq.w	800ca2e <_printf_float+0xb6>
 800ccf6:	9a06      	ldr	r2, [sp, #24]
 800ccf8:	f10b 0b01 	add.w	fp, fp, #1
 800ccfc:	e7bb      	b.n	800cc76 <_printf_float+0x2fe>
 800ccfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd02:	4631      	mov	r1, r6
 800cd04:	4628      	mov	r0, r5
 800cd06:	47b8      	blx	r7
 800cd08:	3001      	adds	r0, #1
 800cd0a:	d1c0      	bne.n	800cc8e <_printf_float+0x316>
 800cd0c:	e68f      	b.n	800ca2e <_printf_float+0xb6>
 800cd0e:	9a06      	ldr	r2, [sp, #24]
 800cd10:	464b      	mov	r3, r9
 800cd12:	4442      	add	r2, r8
 800cd14:	4631      	mov	r1, r6
 800cd16:	4628      	mov	r0, r5
 800cd18:	47b8      	blx	r7
 800cd1a:	3001      	adds	r0, #1
 800cd1c:	d1c3      	bne.n	800cca6 <_printf_float+0x32e>
 800cd1e:	e686      	b.n	800ca2e <_printf_float+0xb6>
 800cd20:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cd24:	f1ba 0f01 	cmp.w	sl, #1
 800cd28:	dc01      	bgt.n	800cd2e <_printf_float+0x3b6>
 800cd2a:	07db      	lsls	r3, r3, #31
 800cd2c:	d536      	bpl.n	800cd9c <_printf_float+0x424>
 800cd2e:	2301      	movs	r3, #1
 800cd30:	4642      	mov	r2, r8
 800cd32:	4631      	mov	r1, r6
 800cd34:	4628      	mov	r0, r5
 800cd36:	47b8      	blx	r7
 800cd38:	3001      	adds	r0, #1
 800cd3a:	f43f ae78 	beq.w	800ca2e <_printf_float+0xb6>
 800cd3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd42:	4631      	mov	r1, r6
 800cd44:	4628      	mov	r0, r5
 800cd46:	47b8      	blx	r7
 800cd48:	3001      	adds	r0, #1
 800cd4a:	f43f ae70 	beq.w	800ca2e <_printf_float+0xb6>
 800cd4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cd52:	2200      	movs	r2, #0
 800cd54:	2300      	movs	r3, #0
 800cd56:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd5a:	f7f3 feb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd5e:	b9c0      	cbnz	r0, 800cd92 <_printf_float+0x41a>
 800cd60:	4653      	mov	r3, sl
 800cd62:	f108 0201 	add.w	r2, r8, #1
 800cd66:	4631      	mov	r1, r6
 800cd68:	4628      	mov	r0, r5
 800cd6a:	47b8      	blx	r7
 800cd6c:	3001      	adds	r0, #1
 800cd6e:	d10c      	bne.n	800cd8a <_printf_float+0x412>
 800cd70:	e65d      	b.n	800ca2e <_printf_float+0xb6>
 800cd72:	2301      	movs	r3, #1
 800cd74:	465a      	mov	r2, fp
 800cd76:	4631      	mov	r1, r6
 800cd78:	4628      	mov	r0, r5
 800cd7a:	47b8      	blx	r7
 800cd7c:	3001      	adds	r0, #1
 800cd7e:	f43f ae56 	beq.w	800ca2e <_printf_float+0xb6>
 800cd82:	f108 0801 	add.w	r8, r8, #1
 800cd86:	45d0      	cmp	r8, sl
 800cd88:	dbf3      	blt.n	800cd72 <_printf_float+0x3fa>
 800cd8a:	464b      	mov	r3, r9
 800cd8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cd90:	e6df      	b.n	800cb52 <_printf_float+0x1da>
 800cd92:	f04f 0800 	mov.w	r8, #0
 800cd96:	f104 0b1a 	add.w	fp, r4, #26
 800cd9a:	e7f4      	b.n	800cd86 <_printf_float+0x40e>
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	4642      	mov	r2, r8
 800cda0:	e7e1      	b.n	800cd66 <_printf_float+0x3ee>
 800cda2:	2301      	movs	r3, #1
 800cda4:	464a      	mov	r2, r9
 800cda6:	4631      	mov	r1, r6
 800cda8:	4628      	mov	r0, r5
 800cdaa:	47b8      	blx	r7
 800cdac:	3001      	adds	r0, #1
 800cdae:	f43f ae3e 	beq.w	800ca2e <_printf_float+0xb6>
 800cdb2:	f108 0801 	add.w	r8, r8, #1
 800cdb6:	68e3      	ldr	r3, [r4, #12]
 800cdb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cdba:	1a5b      	subs	r3, r3, r1
 800cdbc:	4543      	cmp	r3, r8
 800cdbe:	dcf0      	bgt.n	800cda2 <_printf_float+0x42a>
 800cdc0:	e6fc      	b.n	800cbbc <_printf_float+0x244>
 800cdc2:	f04f 0800 	mov.w	r8, #0
 800cdc6:	f104 0919 	add.w	r9, r4, #25
 800cdca:	e7f4      	b.n	800cdb6 <_printf_float+0x43e>

0800cdcc <_printf_common>:
 800cdcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdd0:	4616      	mov	r6, r2
 800cdd2:	4698      	mov	r8, r3
 800cdd4:	688a      	ldr	r2, [r1, #8]
 800cdd6:	690b      	ldr	r3, [r1, #16]
 800cdd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cddc:	4293      	cmp	r3, r2
 800cdde:	bfb8      	it	lt
 800cde0:	4613      	movlt	r3, r2
 800cde2:	6033      	str	r3, [r6, #0]
 800cde4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cde8:	4607      	mov	r7, r0
 800cdea:	460c      	mov	r4, r1
 800cdec:	b10a      	cbz	r2, 800cdf2 <_printf_common+0x26>
 800cdee:	3301      	adds	r3, #1
 800cdf0:	6033      	str	r3, [r6, #0]
 800cdf2:	6823      	ldr	r3, [r4, #0]
 800cdf4:	0699      	lsls	r1, r3, #26
 800cdf6:	bf42      	ittt	mi
 800cdf8:	6833      	ldrmi	r3, [r6, #0]
 800cdfa:	3302      	addmi	r3, #2
 800cdfc:	6033      	strmi	r3, [r6, #0]
 800cdfe:	6825      	ldr	r5, [r4, #0]
 800ce00:	f015 0506 	ands.w	r5, r5, #6
 800ce04:	d106      	bne.n	800ce14 <_printf_common+0x48>
 800ce06:	f104 0a19 	add.w	sl, r4, #25
 800ce0a:	68e3      	ldr	r3, [r4, #12]
 800ce0c:	6832      	ldr	r2, [r6, #0]
 800ce0e:	1a9b      	subs	r3, r3, r2
 800ce10:	42ab      	cmp	r3, r5
 800ce12:	dc26      	bgt.n	800ce62 <_printf_common+0x96>
 800ce14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ce18:	6822      	ldr	r2, [r4, #0]
 800ce1a:	3b00      	subs	r3, #0
 800ce1c:	bf18      	it	ne
 800ce1e:	2301      	movne	r3, #1
 800ce20:	0692      	lsls	r2, r2, #26
 800ce22:	d42b      	bmi.n	800ce7c <_printf_common+0xb0>
 800ce24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ce28:	4641      	mov	r1, r8
 800ce2a:	4638      	mov	r0, r7
 800ce2c:	47c8      	blx	r9
 800ce2e:	3001      	adds	r0, #1
 800ce30:	d01e      	beq.n	800ce70 <_printf_common+0xa4>
 800ce32:	6823      	ldr	r3, [r4, #0]
 800ce34:	6922      	ldr	r2, [r4, #16]
 800ce36:	f003 0306 	and.w	r3, r3, #6
 800ce3a:	2b04      	cmp	r3, #4
 800ce3c:	bf02      	ittt	eq
 800ce3e:	68e5      	ldreq	r5, [r4, #12]
 800ce40:	6833      	ldreq	r3, [r6, #0]
 800ce42:	1aed      	subeq	r5, r5, r3
 800ce44:	68a3      	ldr	r3, [r4, #8]
 800ce46:	bf0c      	ite	eq
 800ce48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce4c:	2500      	movne	r5, #0
 800ce4e:	4293      	cmp	r3, r2
 800ce50:	bfc4      	itt	gt
 800ce52:	1a9b      	subgt	r3, r3, r2
 800ce54:	18ed      	addgt	r5, r5, r3
 800ce56:	2600      	movs	r6, #0
 800ce58:	341a      	adds	r4, #26
 800ce5a:	42b5      	cmp	r5, r6
 800ce5c:	d11a      	bne.n	800ce94 <_printf_common+0xc8>
 800ce5e:	2000      	movs	r0, #0
 800ce60:	e008      	b.n	800ce74 <_printf_common+0xa8>
 800ce62:	2301      	movs	r3, #1
 800ce64:	4652      	mov	r2, sl
 800ce66:	4641      	mov	r1, r8
 800ce68:	4638      	mov	r0, r7
 800ce6a:	47c8      	blx	r9
 800ce6c:	3001      	adds	r0, #1
 800ce6e:	d103      	bne.n	800ce78 <_printf_common+0xac>
 800ce70:	f04f 30ff 	mov.w	r0, #4294967295
 800ce74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce78:	3501      	adds	r5, #1
 800ce7a:	e7c6      	b.n	800ce0a <_printf_common+0x3e>
 800ce7c:	18e1      	adds	r1, r4, r3
 800ce7e:	1c5a      	adds	r2, r3, #1
 800ce80:	2030      	movs	r0, #48	@ 0x30
 800ce82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ce86:	4422      	add	r2, r4
 800ce88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ce8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ce90:	3302      	adds	r3, #2
 800ce92:	e7c7      	b.n	800ce24 <_printf_common+0x58>
 800ce94:	2301      	movs	r3, #1
 800ce96:	4622      	mov	r2, r4
 800ce98:	4641      	mov	r1, r8
 800ce9a:	4638      	mov	r0, r7
 800ce9c:	47c8      	blx	r9
 800ce9e:	3001      	adds	r0, #1
 800cea0:	d0e6      	beq.n	800ce70 <_printf_common+0xa4>
 800cea2:	3601      	adds	r6, #1
 800cea4:	e7d9      	b.n	800ce5a <_printf_common+0x8e>
	...

0800cea8 <_printf_i>:
 800cea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ceac:	7e0f      	ldrb	r7, [r1, #24]
 800ceae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ceb0:	2f78      	cmp	r7, #120	@ 0x78
 800ceb2:	4691      	mov	r9, r2
 800ceb4:	4680      	mov	r8, r0
 800ceb6:	460c      	mov	r4, r1
 800ceb8:	469a      	mov	sl, r3
 800ceba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cebe:	d807      	bhi.n	800ced0 <_printf_i+0x28>
 800cec0:	2f62      	cmp	r7, #98	@ 0x62
 800cec2:	d80a      	bhi.n	800ceda <_printf_i+0x32>
 800cec4:	2f00      	cmp	r7, #0
 800cec6:	f000 80d2 	beq.w	800d06e <_printf_i+0x1c6>
 800ceca:	2f58      	cmp	r7, #88	@ 0x58
 800cecc:	f000 80b9 	beq.w	800d042 <_printf_i+0x19a>
 800ced0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ced4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ced8:	e03a      	b.n	800cf50 <_printf_i+0xa8>
 800ceda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cede:	2b15      	cmp	r3, #21
 800cee0:	d8f6      	bhi.n	800ced0 <_printf_i+0x28>
 800cee2:	a101      	add	r1, pc, #4	@ (adr r1, 800cee8 <_printf_i+0x40>)
 800cee4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cee8:	0800cf41 	.word	0x0800cf41
 800ceec:	0800cf55 	.word	0x0800cf55
 800cef0:	0800ced1 	.word	0x0800ced1
 800cef4:	0800ced1 	.word	0x0800ced1
 800cef8:	0800ced1 	.word	0x0800ced1
 800cefc:	0800ced1 	.word	0x0800ced1
 800cf00:	0800cf55 	.word	0x0800cf55
 800cf04:	0800ced1 	.word	0x0800ced1
 800cf08:	0800ced1 	.word	0x0800ced1
 800cf0c:	0800ced1 	.word	0x0800ced1
 800cf10:	0800ced1 	.word	0x0800ced1
 800cf14:	0800d055 	.word	0x0800d055
 800cf18:	0800cf7f 	.word	0x0800cf7f
 800cf1c:	0800d00f 	.word	0x0800d00f
 800cf20:	0800ced1 	.word	0x0800ced1
 800cf24:	0800ced1 	.word	0x0800ced1
 800cf28:	0800d077 	.word	0x0800d077
 800cf2c:	0800ced1 	.word	0x0800ced1
 800cf30:	0800cf7f 	.word	0x0800cf7f
 800cf34:	0800ced1 	.word	0x0800ced1
 800cf38:	0800ced1 	.word	0x0800ced1
 800cf3c:	0800d017 	.word	0x0800d017
 800cf40:	6833      	ldr	r3, [r6, #0]
 800cf42:	1d1a      	adds	r2, r3, #4
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	6032      	str	r2, [r6, #0]
 800cf48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cf4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cf50:	2301      	movs	r3, #1
 800cf52:	e09d      	b.n	800d090 <_printf_i+0x1e8>
 800cf54:	6833      	ldr	r3, [r6, #0]
 800cf56:	6820      	ldr	r0, [r4, #0]
 800cf58:	1d19      	adds	r1, r3, #4
 800cf5a:	6031      	str	r1, [r6, #0]
 800cf5c:	0606      	lsls	r6, r0, #24
 800cf5e:	d501      	bpl.n	800cf64 <_printf_i+0xbc>
 800cf60:	681d      	ldr	r5, [r3, #0]
 800cf62:	e003      	b.n	800cf6c <_printf_i+0xc4>
 800cf64:	0645      	lsls	r5, r0, #25
 800cf66:	d5fb      	bpl.n	800cf60 <_printf_i+0xb8>
 800cf68:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cf6c:	2d00      	cmp	r5, #0
 800cf6e:	da03      	bge.n	800cf78 <_printf_i+0xd0>
 800cf70:	232d      	movs	r3, #45	@ 0x2d
 800cf72:	426d      	negs	r5, r5
 800cf74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf78:	4859      	ldr	r0, [pc, #356]	@ (800d0e0 <_printf_i+0x238>)
 800cf7a:	230a      	movs	r3, #10
 800cf7c:	e011      	b.n	800cfa2 <_printf_i+0xfa>
 800cf7e:	6821      	ldr	r1, [r4, #0]
 800cf80:	6833      	ldr	r3, [r6, #0]
 800cf82:	0608      	lsls	r0, r1, #24
 800cf84:	f853 5b04 	ldr.w	r5, [r3], #4
 800cf88:	d402      	bmi.n	800cf90 <_printf_i+0xe8>
 800cf8a:	0649      	lsls	r1, r1, #25
 800cf8c:	bf48      	it	mi
 800cf8e:	b2ad      	uxthmi	r5, r5
 800cf90:	2f6f      	cmp	r7, #111	@ 0x6f
 800cf92:	4853      	ldr	r0, [pc, #332]	@ (800d0e0 <_printf_i+0x238>)
 800cf94:	6033      	str	r3, [r6, #0]
 800cf96:	bf14      	ite	ne
 800cf98:	230a      	movne	r3, #10
 800cf9a:	2308      	moveq	r3, #8
 800cf9c:	2100      	movs	r1, #0
 800cf9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cfa2:	6866      	ldr	r6, [r4, #4]
 800cfa4:	60a6      	str	r6, [r4, #8]
 800cfa6:	2e00      	cmp	r6, #0
 800cfa8:	bfa2      	ittt	ge
 800cfaa:	6821      	ldrge	r1, [r4, #0]
 800cfac:	f021 0104 	bicge.w	r1, r1, #4
 800cfb0:	6021      	strge	r1, [r4, #0]
 800cfb2:	b90d      	cbnz	r5, 800cfb8 <_printf_i+0x110>
 800cfb4:	2e00      	cmp	r6, #0
 800cfb6:	d04b      	beq.n	800d050 <_printf_i+0x1a8>
 800cfb8:	4616      	mov	r6, r2
 800cfba:	fbb5 f1f3 	udiv	r1, r5, r3
 800cfbe:	fb03 5711 	mls	r7, r3, r1, r5
 800cfc2:	5dc7      	ldrb	r7, [r0, r7]
 800cfc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cfc8:	462f      	mov	r7, r5
 800cfca:	42bb      	cmp	r3, r7
 800cfcc:	460d      	mov	r5, r1
 800cfce:	d9f4      	bls.n	800cfba <_printf_i+0x112>
 800cfd0:	2b08      	cmp	r3, #8
 800cfd2:	d10b      	bne.n	800cfec <_printf_i+0x144>
 800cfd4:	6823      	ldr	r3, [r4, #0]
 800cfd6:	07df      	lsls	r7, r3, #31
 800cfd8:	d508      	bpl.n	800cfec <_printf_i+0x144>
 800cfda:	6923      	ldr	r3, [r4, #16]
 800cfdc:	6861      	ldr	r1, [r4, #4]
 800cfde:	4299      	cmp	r1, r3
 800cfe0:	bfde      	ittt	le
 800cfe2:	2330      	movle	r3, #48	@ 0x30
 800cfe4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cfe8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cfec:	1b92      	subs	r2, r2, r6
 800cfee:	6122      	str	r2, [r4, #16]
 800cff0:	f8cd a000 	str.w	sl, [sp]
 800cff4:	464b      	mov	r3, r9
 800cff6:	aa03      	add	r2, sp, #12
 800cff8:	4621      	mov	r1, r4
 800cffa:	4640      	mov	r0, r8
 800cffc:	f7ff fee6 	bl	800cdcc <_printf_common>
 800d000:	3001      	adds	r0, #1
 800d002:	d14a      	bne.n	800d09a <_printf_i+0x1f2>
 800d004:	f04f 30ff 	mov.w	r0, #4294967295
 800d008:	b004      	add	sp, #16
 800d00a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d00e:	6823      	ldr	r3, [r4, #0]
 800d010:	f043 0320 	orr.w	r3, r3, #32
 800d014:	6023      	str	r3, [r4, #0]
 800d016:	4833      	ldr	r0, [pc, #204]	@ (800d0e4 <_printf_i+0x23c>)
 800d018:	2778      	movs	r7, #120	@ 0x78
 800d01a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d01e:	6823      	ldr	r3, [r4, #0]
 800d020:	6831      	ldr	r1, [r6, #0]
 800d022:	061f      	lsls	r7, r3, #24
 800d024:	f851 5b04 	ldr.w	r5, [r1], #4
 800d028:	d402      	bmi.n	800d030 <_printf_i+0x188>
 800d02a:	065f      	lsls	r7, r3, #25
 800d02c:	bf48      	it	mi
 800d02e:	b2ad      	uxthmi	r5, r5
 800d030:	6031      	str	r1, [r6, #0]
 800d032:	07d9      	lsls	r1, r3, #31
 800d034:	bf44      	itt	mi
 800d036:	f043 0320 	orrmi.w	r3, r3, #32
 800d03a:	6023      	strmi	r3, [r4, #0]
 800d03c:	b11d      	cbz	r5, 800d046 <_printf_i+0x19e>
 800d03e:	2310      	movs	r3, #16
 800d040:	e7ac      	b.n	800cf9c <_printf_i+0xf4>
 800d042:	4827      	ldr	r0, [pc, #156]	@ (800d0e0 <_printf_i+0x238>)
 800d044:	e7e9      	b.n	800d01a <_printf_i+0x172>
 800d046:	6823      	ldr	r3, [r4, #0]
 800d048:	f023 0320 	bic.w	r3, r3, #32
 800d04c:	6023      	str	r3, [r4, #0]
 800d04e:	e7f6      	b.n	800d03e <_printf_i+0x196>
 800d050:	4616      	mov	r6, r2
 800d052:	e7bd      	b.n	800cfd0 <_printf_i+0x128>
 800d054:	6833      	ldr	r3, [r6, #0]
 800d056:	6825      	ldr	r5, [r4, #0]
 800d058:	6961      	ldr	r1, [r4, #20]
 800d05a:	1d18      	adds	r0, r3, #4
 800d05c:	6030      	str	r0, [r6, #0]
 800d05e:	062e      	lsls	r6, r5, #24
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	d501      	bpl.n	800d068 <_printf_i+0x1c0>
 800d064:	6019      	str	r1, [r3, #0]
 800d066:	e002      	b.n	800d06e <_printf_i+0x1c6>
 800d068:	0668      	lsls	r0, r5, #25
 800d06a:	d5fb      	bpl.n	800d064 <_printf_i+0x1bc>
 800d06c:	8019      	strh	r1, [r3, #0]
 800d06e:	2300      	movs	r3, #0
 800d070:	6123      	str	r3, [r4, #16]
 800d072:	4616      	mov	r6, r2
 800d074:	e7bc      	b.n	800cff0 <_printf_i+0x148>
 800d076:	6833      	ldr	r3, [r6, #0]
 800d078:	1d1a      	adds	r2, r3, #4
 800d07a:	6032      	str	r2, [r6, #0]
 800d07c:	681e      	ldr	r6, [r3, #0]
 800d07e:	6862      	ldr	r2, [r4, #4]
 800d080:	2100      	movs	r1, #0
 800d082:	4630      	mov	r0, r6
 800d084:	f7f3 f8a4 	bl	80001d0 <memchr>
 800d088:	b108      	cbz	r0, 800d08e <_printf_i+0x1e6>
 800d08a:	1b80      	subs	r0, r0, r6
 800d08c:	6060      	str	r0, [r4, #4]
 800d08e:	6863      	ldr	r3, [r4, #4]
 800d090:	6123      	str	r3, [r4, #16]
 800d092:	2300      	movs	r3, #0
 800d094:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d098:	e7aa      	b.n	800cff0 <_printf_i+0x148>
 800d09a:	6923      	ldr	r3, [r4, #16]
 800d09c:	4632      	mov	r2, r6
 800d09e:	4649      	mov	r1, r9
 800d0a0:	4640      	mov	r0, r8
 800d0a2:	47d0      	blx	sl
 800d0a4:	3001      	adds	r0, #1
 800d0a6:	d0ad      	beq.n	800d004 <_printf_i+0x15c>
 800d0a8:	6823      	ldr	r3, [r4, #0]
 800d0aa:	079b      	lsls	r3, r3, #30
 800d0ac:	d413      	bmi.n	800d0d6 <_printf_i+0x22e>
 800d0ae:	68e0      	ldr	r0, [r4, #12]
 800d0b0:	9b03      	ldr	r3, [sp, #12]
 800d0b2:	4298      	cmp	r0, r3
 800d0b4:	bfb8      	it	lt
 800d0b6:	4618      	movlt	r0, r3
 800d0b8:	e7a6      	b.n	800d008 <_printf_i+0x160>
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	4632      	mov	r2, r6
 800d0be:	4649      	mov	r1, r9
 800d0c0:	4640      	mov	r0, r8
 800d0c2:	47d0      	blx	sl
 800d0c4:	3001      	adds	r0, #1
 800d0c6:	d09d      	beq.n	800d004 <_printf_i+0x15c>
 800d0c8:	3501      	adds	r5, #1
 800d0ca:	68e3      	ldr	r3, [r4, #12]
 800d0cc:	9903      	ldr	r1, [sp, #12]
 800d0ce:	1a5b      	subs	r3, r3, r1
 800d0d0:	42ab      	cmp	r3, r5
 800d0d2:	dcf2      	bgt.n	800d0ba <_printf_i+0x212>
 800d0d4:	e7eb      	b.n	800d0ae <_printf_i+0x206>
 800d0d6:	2500      	movs	r5, #0
 800d0d8:	f104 0619 	add.w	r6, r4, #25
 800d0dc:	e7f5      	b.n	800d0ca <_printf_i+0x222>
 800d0de:	bf00      	nop
 800d0e0:	0800f2c2 	.word	0x0800f2c2
 800d0e4:	0800f2d3 	.word	0x0800f2d3

0800d0e8 <std>:
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	b510      	push	{r4, lr}
 800d0ec:	4604      	mov	r4, r0
 800d0ee:	e9c0 3300 	strd	r3, r3, [r0]
 800d0f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d0f6:	6083      	str	r3, [r0, #8]
 800d0f8:	8181      	strh	r1, [r0, #12]
 800d0fa:	6643      	str	r3, [r0, #100]	@ 0x64
 800d0fc:	81c2      	strh	r2, [r0, #14]
 800d0fe:	6183      	str	r3, [r0, #24]
 800d100:	4619      	mov	r1, r3
 800d102:	2208      	movs	r2, #8
 800d104:	305c      	adds	r0, #92	@ 0x5c
 800d106:	f000 f9e7 	bl	800d4d8 <memset>
 800d10a:	4b0d      	ldr	r3, [pc, #52]	@ (800d140 <std+0x58>)
 800d10c:	6263      	str	r3, [r4, #36]	@ 0x24
 800d10e:	4b0d      	ldr	r3, [pc, #52]	@ (800d144 <std+0x5c>)
 800d110:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d112:	4b0d      	ldr	r3, [pc, #52]	@ (800d148 <std+0x60>)
 800d114:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d116:	4b0d      	ldr	r3, [pc, #52]	@ (800d14c <std+0x64>)
 800d118:	6323      	str	r3, [r4, #48]	@ 0x30
 800d11a:	4b0d      	ldr	r3, [pc, #52]	@ (800d150 <std+0x68>)
 800d11c:	6224      	str	r4, [r4, #32]
 800d11e:	429c      	cmp	r4, r3
 800d120:	d006      	beq.n	800d130 <std+0x48>
 800d122:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d126:	4294      	cmp	r4, r2
 800d128:	d002      	beq.n	800d130 <std+0x48>
 800d12a:	33d0      	adds	r3, #208	@ 0xd0
 800d12c:	429c      	cmp	r4, r3
 800d12e:	d105      	bne.n	800d13c <std+0x54>
 800d130:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d138:	f000 ba4a 	b.w	800d5d0 <__retarget_lock_init_recursive>
 800d13c:	bd10      	pop	{r4, pc}
 800d13e:	bf00      	nop
 800d140:	0800d329 	.word	0x0800d329
 800d144:	0800d34b 	.word	0x0800d34b
 800d148:	0800d383 	.word	0x0800d383
 800d14c:	0800d3a7 	.word	0x0800d3a7
 800d150:	20000f0c 	.word	0x20000f0c

0800d154 <stdio_exit_handler>:
 800d154:	4a02      	ldr	r2, [pc, #8]	@ (800d160 <stdio_exit_handler+0xc>)
 800d156:	4903      	ldr	r1, [pc, #12]	@ (800d164 <stdio_exit_handler+0x10>)
 800d158:	4803      	ldr	r0, [pc, #12]	@ (800d168 <stdio_exit_handler+0x14>)
 800d15a:	f000 b869 	b.w	800d230 <_fwalk_sglue>
 800d15e:	bf00      	nop
 800d160:	20000164 	.word	0x20000164
 800d164:	0800ef21 	.word	0x0800ef21
 800d168:	20000174 	.word	0x20000174

0800d16c <cleanup_stdio>:
 800d16c:	6841      	ldr	r1, [r0, #4]
 800d16e:	4b0c      	ldr	r3, [pc, #48]	@ (800d1a0 <cleanup_stdio+0x34>)
 800d170:	4299      	cmp	r1, r3
 800d172:	b510      	push	{r4, lr}
 800d174:	4604      	mov	r4, r0
 800d176:	d001      	beq.n	800d17c <cleanup_stdio+0x10>
 800d178:	f001 fed2 	bl	800ef20 <_fflush_r>
 800d17c:	68a1      	ldr	r1, [r4, #8]
 800d17e:	4b09      	ldr	r3, [pc, #36]	@ (800d1a4 <cleanup_stdio+0x38>)
 800d180:	4299      	cmp	r1, r3
 800d182:	d002      	beq.n	800d18a <cleanup_stdio+0x1e>
 800d184:	4620      	mov	r0, r4
 800d186:	f001 fecb 	bl	800ef20 <_fflush_r>
 800d18a:	68e1      	ldr	r1, [r4, #12]
 800d18c:	4b06      	ldr	r3, [pc, #24]	@ (800d1a8 <cleanup_stdio+0x3c>)
 800d18e:	4299      	cmp	r1, r3
 800d190:	d004      	beq.n	800d19c <cleanup_stdio+0x30>
 800d192:	4620      	mov	r0, r4
 800d194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d198:	f001 bec2 	b.w	800ef20 <_fflush_r>
 800d19c:	bd10      	pop	{r4, pc}
 800d19e:	bf00      	nop
 800d1a0:	20000f0c 	.word	0x20000f0c
 800d1a4:	20000f74 	.word	0x20000f74
 800d1a8:	20000fdc 	.word	0x20000fdc

0800d1ac <global_stdio_init.part.0>:
 800d1ac:	b510      	push	{r4, lr}
 800d1ae:	4b0b      	ldr	r3, [pc, #44]	@ (800d1dc <global_stdio_init.part.0+0x30>)
 800d1b0:	4c0b      	ldr	r4, [pc, #44]	@ (800d1e0 <global_stdio_init.part.0+0x34>)
 800d1b2:	4a0c      	ldr	r2, [pc, #48]	@ (800d1e4 <global_stdio_init.part.0+0x38>)
 800d1b4:	601a      	str	r2, [r3, #0]
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	2104      	movs	r1, #4
 800d1bc:	f7ff ff94 	bl	800d0e8 <std>
 800d1c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	2109      	movs	r1, #9
 800d1c8:	f7ff ff8e 	bl	800d0e8 <std>
 800d1cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d1d0:	2202      	movs	r2, #2
 800d1d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1d6:	2112      	movs	r1, #18
 800d1d8:	f7ff bf86 	b.w	800d0e8 <std>
 800d1dc:	20001044 	.word	0x20001044
 800d1e0:	20000f0c 	.word	0x20000f0c
 800d1e4:	0800d155 	.word	0x0800d155

0800d1e8 <__sfp_lock_acquire>:
 800d1e8:	4801      	ldr	r0, [pc, #4]	@ (800d1f0 <__sfp_lock_acquire+0x8>)
 800d1ea:	f000 b9f2 	b.w	800d5d2 <__retarget_lock_acquire_recursive>
 800d1ee:	bf00      	nop
 800d1f0:	2000104d 	.word	0x2000104d

0800d1f4 <__sfp_lock_release>:
 800d1f4:	4801      	ldr	r0, [pc, #4]	@ (800d1fc <__sfp_lock_release+0x8>)
 800d1f6:	f000 b9ed 	b.w	800d5d4 <__retarget_lock_release_recursive>
 800d1fa:	bf00      	nop
 800d1fc:	2000104d 	.word	0x2000104d

0800d200 <__sinit>:
 800d200:	b510      	push	{r4, lr}
 800d202:	4604      	mov	r4, r0
 800d204:	f7ff fff0 	bl	800d1e8 <__sfp_lock_acquire>
 800d208:	6a23      	ldr	r3, [r4, #32]
 800d20a:	b11b      	cbz	r3, 800d214 <__sinit+0x14>
 800d20c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d210:	f7ff bff0 	b.w	800d1f4 <__sfp_lock_release>
 800d214:	4b04      	ldr	r3, [pc, #16]	@ (800d228 <__sinit+0x28>)
 800d216:	6223      	str	r3, [r4, #32]
 800d218:	4b04      	ldr	r3, [pc, #16]	@ (800d22c <__sinit+0x2c>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d1f5      	bne.n	800d20c <__sinit+0xc>
 800d220:	f7ff ffc4 	bl	800d1ac <global_stdio_init.part.0>
 800d224:	e7f2      	b.n	800d20c <__sinit+0xc>
 800d226:	bf00      	nop
 800d228:	0800d16d 	.word	0x0800d16d
 800d22c:	20001044 	.word	0x20001044

0800d230 <_fwalk_sglue>:
 800d230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d234:	4607      	mov	r7, r0
 800d236:	4688      	mov	r8, r1
 800d238:	4614      	mov	r4, r2
 800d23a:	2600      	movs	r6, #0
 800d23c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d240:	f1b9 0901 	subs.w	r9, r9, #1
 800d244:	d505      	bpl.n	800d252 <_fwalk_sglue+0x22>
 800d246:	6824      	ldr	r4, [r4, #0]
 800d248:	2c00      	cmp	r4, #0
 800d24a:	d1f7      	bne.n	800d23c <_fwalk_sglue+0xc>
 800d24c:	4630      	mov	r0, r6
 800d24e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d252:	89ab      	ldrh	r3, [r5, #12]
 800d254:	2b01      	cmp	r3, #1
 800d256:	d907      	bls.n	800d268 <_fwalk_sglue+0x38>
 800d258:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d25c:	3301      	adds	r3, #1
 800d25e:	d003      	beq.n	800d268 <_fwalk_sglue+0x38>
 800d260:	4629      	mov	r1, r5
 800d262:	4638      	mov	r0, r7
 800d264:	47c0      	blx	r8
 800d266:	4306      	orrs	r6, r0
 800d268:	3568      	adds	r5, #104	@ 0x68
 800d26a:	e7e9      	b.n	800d240 <_fwalk_sglue+0x10>

0800d26c <_puts_r>:
 800d26c:	6a03      	ldr	r3, [r0, #32]
 800d26e:	b570      	push	{r4, r5, r6, lr}
 800d270:	6884      	ldr	r4, [r0, #8]
 800d272:	4605      	mov	r5, r0
 800d274:	460e      	mov	r6, r1
 800d276:	b90b      	cbnz	r3, 800d27c <_puts_r+0x10>
 800d278:	f7ff ffc2 	bl	800d200 <__sinit>
 800d27c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d27e:	07db      	lsls	r3, r3, #31
 800d280:	d405      	bmi.n	800d28e <_puts_r+0x22>
 800d282:	89a3      	ldrh	r3, [r4, #12]
 800d284:	0598      	lsls	r0, r3, #22
 800d286:	d402      	bmi.n	800d28e <_puts_r+0x22>
 800d288:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d28a:	f000 f9a2 	bl	800d5d2 <__retarget_lock_acquire_recursive>
 800d28e:	89a3      	ldrh	r3, [r4, #12]
 800d290:	0719      	lsls	r1, r3, #28
 800d292:	d502      	bpl.n	800d29a <_puts_r+0x2e>
 800d294:	6923      	ldr	r3, [r4, #16]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d135      	bne.n	800d306 <_puts_r+0x9a>
 800d29a:	4621      	mov	r1, r4
 800d29c:	4628      	mov	r0, r5
 800d29e:	f000 f8c5 	bl	800d42c <__swsetup_r>
 800d2a2:	b380      	cbz	r0, 800d306 <_puts_r+0x9a>
 800d2a4:	f04f 35ff 	mov.w	r5, #4294967295
 800d2a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d2aa:	07da      	lsls	r2, r3, #31
 800d2ac:	d405      	bmi.n	800d2ba <_puts_r+0x4e>
 800d2ae:	89a3      	ldrh	r3, [r4, #12]
 800d2b0:	059b      	lsls	r3, r3, #22
 800d2b2:	d402      	bmi.n	800d2ba <_puts_r+0x4e>
 800d2b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2b6:	f000 f98d 	bl	800d5d4 <__retarget_lock_release_recursive>
 800d2ba:	4628      	mov	r0, r5
 800d2bc:	bd70      	pop	{r4, r5, r6, pc}
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	da04      	bge.n	800d2cc <_puts_r+0x60>
 800d2c2:	69a2      	ldr	r2, [r4, #24]
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	dc17      	bgt.n	800d2f8 <_puts_r+0x8c>
 800d2c8:	290a      	cmp	r1, #10
 800d2ca:	d015      	beq.n	800d2f8 <_puts_r+0x8c>
 800d2cc:	6823      	ldr	r3, [r4, #0]
 800d2ce:	1c5a      	adds	r2, r3, #1
 800d2d0:	6022      	str	r2, [r4, #0]
 800d2d2:	7019      	strb	r1, [r3, #0]
 800d2d4:	68a3      	ldr	r3, [r4, #8]
 800d2d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d2da:	3b01      	subs	r3, #1
 800d2dc:	60a3      	str	r3, [r4, #8]
 800d2de:	2900      	cmp	r1, #0
 800d2e0:	d1ed      	bne.n	800d2be <_puts_r+0x52>
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	da11      	bge.n	800d30a <_puts_r+0x9e>
 800d2e6:	4622      	mov	r2, r4
 800d2e8:	210a      	movs	r1, #10
 800d2ea:	4628      	mov	r0, r5
 800d2ec:	f000 f85f 	bl	800d3ae <__swbuf_r>
 800d2f0:	3001      	adds	r0, #1
 800d2f2:	d0d7      	beq.n	800d2a4 <_puts_r+0x38>
 800d2f4:	250a      	movs	r5, #10
 800d2f6:	e7d7      	b.n	800d2a8 <_puts_r+0x3c>
 800d2f8:	4622      	mov	r2, r4
 800d2fa:	4628      	mov	r0, r5
 800d2fc:	f000 f857 	bl	800d3ae <__swbuf_r>
 800d300:	3001      	adds	r0, #1
 800d302:	d1e7      	bne.n	800d2d4 <_puts_r+0x68>
 800d304:	e7ce      	b.n	800d2a4 <_puts_r+0x38>
 800d306:	3e01      	subs	r6, #1
 800d308:	e7e4      	b.n	800d2d4 <_puts_r+0x68>
 800d30a:	6823      	ldr	r3, [r4, #0]
 800d30c:	1c5a      	adds	r2, r3, #1
 800d30e:	6022      	str	r2, [r4, #0]
 800d310:	220a      	movs	r2, #10
 800d312:	701a      	strb	r2, [r3, #0]
 800d314:	e7ee      	b.n	800d2f4 <_puts_r+0x88>
	...

0800d318 <puts>:
 800d318:	4b02      	ldr	r3, [pc, #8]	@ (800d324 <puts+0xc>)
 800d31a:	4601      	mov	r1, r0
 800d31c:	6818      	ldr	r0, [r3, #0]
 800d31e:	f7ff bfa5 	b.w	800d26c <_puts_r>
 800d322:	bf00      	nop
 800d324:	20000170 	.word	0x20000170

0800d328 <__sread>:
 800d328:	b510      	push	{r4, lr}
 800d32a:	460c      	mov	r4, r1
 800d32c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d330:	f000 f900 	bl	800d534 <_read_r>
 800d334:	2800      	cmp	r0, #0
 800d336:	bfab      	itete	ge
 800d338:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d33a:	89a3      	ldrhlt	r3, [r4, #12]
 800d33c:	181b      	addge	r3, r3, r0
 800d33e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d342:	bfac      	ite	ge
 800d344:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d346:	81a3      	strhlt	r3, [r4, #12]
 800d348:	bd10      	pop	{r4, pc}

0800d34a <__swrite>:
 800d34a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d34e:	461f      	mov	r7, r3
 800d350:	898b      	ldrh	r3, [r1, #12]
 800d352:	05db      	lsls	r3, r3, #23
 800d354:	4605      	mov	r5, r0
 800d356:	460c      	mov	r4, r1
 800d358:	4616      	mov	r6, r2
 800d35a:	d505      	bpl.n	800d368 <__swrite+0x1e>
 800d35c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d360:	2302      	movs	r3, #2
 800d362:	2200      	movs	r2, #0
 800d364:	f000 f8d4 	bl	800d510 <_lseek_r>
 800d368:	89a3      	ldrh	r3, [r4, #12]
 800d36a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d36e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d372:	81a3      	strh	r3, [r4, #12]
 800d374:	4632      	mov	r2, r6
 800d376:	463b      	mov	r3, r7
 800d378:	4628      	mov	r0, r5
 800d37a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d37e:	f000 b8eb 	b.w	800d558 <_write_r>

0800d382 <__sseek>:
 800d382:	b510      	push	{r4, lr}
 800d384:	460c      	mov	r4, r1
 800d386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d38a:	f000 f8c1 	bl	800d510 <_lseek_r>
 800d38e:	1c43      	adds	r3, r0, #1
 800d390:	89a3      	ldrh	r3, [r4, #12]
 800d392:	bf15      	itete	ne
 800d394:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d396:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d39a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d39e:	81a3      	strheq	r3, [r4, #12]
 800d3a0:	bf18      	it	ne
 800d3a2:	81a3      	strhne	r3, [r4, #12]
 800d3a4:	bd10      	pop	{r4, pc}

0800d3a6 <__sclose>:
 800d3a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3aa:	f000 b8a1 	b.w	800d4f0 <_close_r>

0800d3ae <__swbuf_r>:
 800d3ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3b0:	460e      	mov	r6, r1
 800d3b2:	4614      	mov	r4, r2
 800d3b4:	4605      	mov	r5, r0
 800d3b6:	b118      	cbz	r0, 800d3c0 <__swbuf_r+0x12>
 800d3b8:	6a03      	ldr	r3, [r0, #32]
 800d3ba:	b90b      	cbnz	r3, 800d3c0 <__swbuf_r+0x12>
 800d3bc:	f7ff ff20 	bl	800d200 <__sinit>
 800d3c0:	69a3      	ldr	r3, [r4, #24]
 800d3c2:	60a3      	str	r3, [r4, #8]
 800d3c4:	89a3      	ldrh	r3, [r4, #12]
 800d3c6:	071a      	lsls	r2, r3, #28
 800d3c8:	d501      	bpl.n	800d3ce <__swbuf_r+0x20>
 800d3ca:	6923      	ldr	r3, [r4, #16]
 800d3cc:	b943      	cbnz	r3, 800d3e0 <__swbuf_r+0x32>
 800d3ce:	4621      	mov	r1, r4
 800d3d0:	4628      	mov	r0, r5
 800d3d2:	f000 f82b 	bl	800d42c <__swsetup_r>
 800d3d6:	b118      	cbz	r0, 800d3e0 <__swbuf_r+0x32>
 800d3d8:	f04f 37ff 	mov.w	r7, #4294967295
 800d3dc:	4638      	mov	r0, r7
 800d3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3e0:	6823      	ldr	r3, [r4, #0]
 800d3e2:	6922      	ldr	r2, [r4, #16]
 800d3e4:	1a98      	subs	r0, r3, r2
 800d3e6:	6963      	ldr	r3, [r4, #20]
 800d3e8:	b2f6      	uxtb	r6, r6
 800d3ea:	4283      	cmp	r3, r0
 800d3ec:	4637      	mov	r7, r6
 800d3ee:	dc05      	bgt.n	800d3fc <__swbuf_r+0x4e>
 800d3f0:	4621      	mov	r1, r4
 800d3f2:	4628      	mov	r0, r5
 800d3f4:	f001 fd94 	bl	800ef20 <_fflush_r>
 800d3f8:	2800      	cmp	r0, #0
 800d3fa:	d1ed      	bne.n	800d3d8 <__swbuf_r+0x2a>
 800d3fc:	68a3      	ldr	r3, [r4, #8]
 800d3fe:	3b01      	subs	r3, #1
 800d400:	60a3      	str	r3, [r4, #8]
 800d402:	6823      	ldr	r3, [r4, #0]
 800d404:	1c5a      	adds	r2, r3, #1
 800d406:	6022      	str	r2, [r4, #0]
 800d408:	701e      	strb	r6, [r3, #0]
 800d40a:	6962      	ldr	r2, [r4, #20]
 800d40c:	1c43      	adds	r3, r0, #1
 800d40e:	429a      	cmp	r2, r3
 800d410:	d004      	beq.n	800d41c <__swbuf_r+0x6e>
 800d412:	89a3      	ldrh	r3, [r4, #12]
 800d414:	07db      	lsls	r3, r3, #31
 800d416:	d5e1      	bpl.n	800d3dc <__swbuf_r+0x2e>
 800d418:	2e0a      	cmp	r6, #10
 800d41a:	d1df      	bne.n	800d3dc <__swbuf_r+0x2e>
 800d41c:	4621      	mov	r1, r4
 800d41e:	4628      	mov	r0, r5
 800d420:	f001 fd7e 	bl	800ef20 <_fflush_r>
 800d424:	2800      	cmp	r0, #0
 800d426:	d0d9      	beq.n	800d3dc <__swbuf_r+0x2e>
 800d428:	e7d6      	b.n	800d3d8 <__swbuf_r+0x2a>
	...

0800d42c <__swsetup_r>:
 800d42c:	b538      	push	{r3, r4, r5, lr}
 800d42e:	4b29      	ldr	r3, [pc, #164]	@ (800d4d4 <__swsetup_r+0xa8>)
 800d430:	4605      	mov	r5, r0
 800d432:	6818      	ldr	r0, [r3, #0]
 800d434:	460c      	mov	r4, r1
 800d436:	b118      	cbz	r0, 800d440 <__swsetup_r+0x14>
 800d438:	6a03      	ldr	r3, [r0, #32]
 800d43a:	b90b      	cbnz	r3, 800d440 <__swsetup_r+0x14>
 800d43c:	f7ff fee0 	bl	800d200 <__sinit>
 800d440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d444:	0719      	lsls	r1, r3, #28
 800d446:	d422      	bmi.n	800d48e <__swsetup_r+0x62>
 800d448:	06da      	lsls	r2, r3, #27
 800d44a:	d407      	bmi.n	800d45c <__swsetup_r+0x30>
 800d44c:	2209      	movs	r2, #9
 800d44e:	602a      	str	r2, [r5, #0]
 800d450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d454:	81a3      	strh	r3, [r4, #12]
 800d456:	f04f 30ff 	mov.w	r0, #4294967295
 800d45a:	e033      	b.n	800d4c4 <__swsetup_r+0x98>
 800d45c:	0758      	lsls	r0, r3, #29
 800d45e:	d512      	bpl.n	800d486 <__swsetup_r+0x5a>
 800d460:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d462:	b141      	cbz	r1, 800d476 <__swsetup_r+0x4a>
 800d464:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d468:	4299      	cmp	r1, r3
 800d46a:	d002      	beq.n	800d472 <__swsetup_r+0x46>
 800d46c:	4628      	mov	r0, r5
 800d46e:	f000 ff0f 	bl	800e290 <_free_r>
 800d472:	2300      	movs	r3, #0
 800d474:	6363      	str	r3, [r4, #52]	@ 0x34
 800d476:	89a3      	ldrh	r3, [r4, #12]
 800d478:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d47c:	81a3      	strh	r3, [r4, #12]
 800d47e:	2300      	movs	r3, #0
 800d480:	6063      	str	r3, [r4, #4]
 800d482:	6923      	ldr	r3, [r4, #16]
 800d484:	6023      	str	r3, [r4, #0]
 800d486:	89a3      	ldrh	r3, [r4, #12]
 800d488:	f043 0308 	orr.w	r3, r3, #8
 800d48c:	81a3      	strh	r3, [r4, #12]
 800d48e:	6923      	ldr	r3, [r4, #16]
 800d490:	b94b      	cbnz	r3, 800d4a6 <__swsetup_r+0x7a>
 800d492:	89a3      	ldrh	r3, [r4, #12]
 800d494:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d49c:	d003      	beq.n	800d4a6 <__swsetup_r+0x7a>
 800d49e:	4621      	mov	r1, r4
 800d4a0:	4628      	mov	r0, r5
 800d4a2:	f001 fd8b 	bl	800efbc <__smakebuf_r>
 800d4a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4aa:	f013 0201 	ands.w	r2, r3, #1
 800d4ae:	d00a      	beq.n	800d4c6 <__swsetup_r+0x9a>
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	60a2      	str	r2, [r4, #8]
 800d4b4:	6962      	ldr	r2, [r4, #20]
 800d4b6:	4252      	negs	r2, r2
 800d4b8:	61a2      	str	r2, [r4, #24]
 800d4ba:	6922      	ldr	r2, [r4, #16]
 800d4bc:	b942      	cbnz	r2, 800d4d0 <__swsetup_r+0xa4>
 800d4be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d4c2:	d1c5      	bne.n	800d450 <__swsetup_r+0x24>
 800d4c4:	bd38      	pop	{r3, r4, r5, pc}
 800d4c6:	0799      	lsls	r1, r3, #30
 800d4c8:	bf58      	it	pl
 800d4ca:	6962      	ldrpl	r2, [r4, #20]
 800d4cc:	60a2      	str	r2, [r4, #8]
 800d4ce:	e7f4      	b.n	800d4ba <__swsetup_r+0x8e>
 800d4d0:	2000      	movs	r0, #0
 800d4d2:	e7f7      	b.n	800d4c4 <__swsetup_r+0x98>
 800d4d4:	20000170 	.word	0x20000170

0800d4d8 <memset>:
 800d4d8:	4402      	add	r2, r0
 800d4da:	4603      	mov	r3, r0
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d100      	bne.n	800d4e2 <memset+0xa>
 800d4e0:	4770      	bx	lr
 800d4e2:	f803 1b01 	strb.w	r1, [r3], #1
 800d4e6:	e7f9      	b.n	800d4dc <memset+0x4>

0800d4e8 <_localeconv_r>:
 800d4e8:	4800      	ldr	r0, [pc, #0]	@ (800d4ec <_localeconv_r+0x4>)
 800d4ea:	4770      	bx	lr
 800d4ec:	200002b0 	.word	0x200002b0

0800d4f0 <_close_r>:
 800d4f0:	b538      	push	{r3, r4, r5, lr}
 800d4f2:	4d06      	ldr	r5, [pc, #24]	@ (800d50c <_close_r+0x1c>)
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	4604      	mov	r4, r0
 800d4f8:	4608      	mov	r0, r1
 800d4fa:	602b      	str	r3, [r5, #0]
 800d4fc:	f7f4 fc0e 	bl	8001d1c <_close>
 800d500:	1c43      	adds	r3, r0, #1
 800d502:	d102      	bne.n	800d50a <_close_r+0x1a>
 800d504:	682b      	ldr	r3, [r5, #0]
 800d506:	b103      	cbz	r3, 800d50a <_close_r+0x1a>
 800d508:	6023      	str	r3, [r4, #0]
 800d50a:	bd38      	pop	{r3, r4, r5, pc}
 800d50c:	20001048 	.word	0x20001048

0800d510 <_lseek_r>:
 800d510:	b538      	push	{r3, r4, r5, lr}
 800d512:	4d07      	ldr	r5, [pc, #28]	@ (800d530 <_lseek_r+0x20>)
 800d514:	4604      	mov	r4, r0
 800d516:	4608      	mov	r0, r1
 800d518:	4611      	mov	r1, r2
 800d51a:	2200      	movs	r2, #0
 800d51c:	602a      	str	r2, [r5, #0]
 800d51e:	461a      	mov	r2, r3
 800d520:	f7f4 fc23 	bl	8001d6a <_lseek>
 800d524:	1c43      	adds	r3, r0, #1
 800d526:	d102      	bne.n	800d52e <_lseek_r+0x1e>
 800d528:	682b      	ldr	r3, [r5, #0]
 800d52a:	b103      	cbz	r3, 800d52e <_lseek_r+0x1e>
 800d52c:	6023      	str	r3, [r4, #0]
 800d52e:	bd38      	pop	{r3, r4, r5, pc}
 800d530:	20001048 	.word	0x20001048

0800d534 <_read_r>:
 800d534:	b538      	push	{r3, r4, r5, lr}
 800d536:	4d07      	ldr	r5, [pc, #28]	@ (800d554 <_read_r+0x20>)
 800d538:	4604      	mov	r4, r0
 800d53a:	4608      	mov	r0, r1
 800d53c:	4611      	mov	r1, r2
 800d53e:	2200      	movs	r2, #0
 800d540:	602a      	str	r2, [r5, #0]
 800d542:	461a      	mov	r2, r3
 800d544:	f7f4 fbb1 	bl	8001caa <_read>
 800d548:	1c43      	adds	r3, r0, #1
 800d54a:	d102      	bne.n	800d552 <_read_r+0x1e>
 800d54c:	682b      	ldr	r3, [r5, #0]
 800d54e:	b103      	cbz	r3, 800d552 <_read_r+0x1e>
 800d550:	6023      	str	r3, [r4, #0]
 800d552:	bd38      	pop	{r3, r4, r5, pc}
 800d554:	20001048 	.word	0x20001048

0800d558 <_write_r>:
 800d558:	b538      	push	{r3, r4, r5, lr}
 800d55a:	4d07      	ldr	r5, [pc, #28]	@ (800d578 <_write_r+0x20>)
 800d55c:	4604      	mov	r4, r0
 800d55e:	4608      	mov	r0, r1
 800d560:	4611      	mov	r1, r2
 800d562:	2200      	movs	r2, #0
 800d564:	602a      	str	r2, [r5, #0]
 800d566:	461a      	mov	r2, r3
 800d568:	f7f4 fbbc 	bl	8001ce4 <_write>
 800d56c:	1c43      	adds	r3, r0, #1
 800d56e:	d102      	bne.n	800d576 <_write_r+0x1e>
 800d570:	682b      	ldr	r3, [r5, #0]
 800d572:	b103      	cbz	r3, 800d576 <_write_r+0x1e>
 800d574:	6023      	str	r3, [r4, #0]
 800d576:	bd38      	pop	{r3, r4, r5, pc}
 800d578:	20001048 	.word	0x20001048

0800d57c <__errno>:
 800d57c:	4b01      	ldr	r3, [pc, #4]	@ (800d584 <__errno+0x8>)
 800d57e:	6818      	ldr	r0, [r3, #0]
 800d580:	4770      	bx	lr
 800d582:	bf00      	nop
 800d584:	20000170 	.word	0x20000170

0800d588 <__libc_init_array>:
 800d588:	b570      	push	{r4, r5, r6, lr}
 800d58a:	4d0d      	ldr	r5, [pc, #52]	@ (800d5c0 <__libc_init_array+0x38>)
 800d58c:	4c0d      	ldr	r4, [pc, #52]	@ (800d5c4 <__libc_init_array+0x3c>)
 800d58e:	1b64      	subs	r4, r4, r5
 800d590:	10a4      	asrs	r4, r4, #2
 800d592:	2600      	movs	r6, #0
 800d594:	42a6      	cmp	r6, r4
 800d596:	d109      	bne.n	800d5ac <__libc_init_array+0x24>
 800d598:	4d0b      	ldr	r5, [pc, #44]	@ (800d5c8 <__libc_init_array+0x40>)
 800d59a:	4c0c      	ldr	r4, [pc, #48]	@ (800d5cc <__libc_init_array+0x44>)
 800d59c:	f001 fe2c 	bl	800f1f8 <_init>
 800d5a0:	1b64      	subs	r4, r4, r5
 800d5a2:	10a4      	asrs	r4, r4, #2
 800d5a4:	2600      	movs	r6, #0
 800d5a6:	42a6      	cmp	r6, r4
 800d5a8:	d105      	bne.n	800d5b6 <__libc_init_array+0x2e>
 800d5aa:	bd70      	pop	{r4, r5, r6, pc}
 800d5ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5b0:	4798      	blx	r3
 800d5b2:	3601      	adds	r6, #1
 800d5b4:	e7ee      	b.n	800d594 <__libc_init_array+0xc>
 800d5b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5ba:	4798      	blx	r3
 800d5bc:	3601      	adds	r6, #1
 800d5be:	e7f2      	b.n	800d5a6 <__libc_init_array+0x1e>
 800d5c0:	0800f628 	.word	0x0800f628
 800d5c4:	0800f628 	.word	0x0800f628
 800d5c8:	0800f628 	.word	0x0800f628
 800d5cc:	0800f62c 	.word	0x0800f62c

0800d5d0 <__retarget_lock_init_recursive>:
 800d5d0:	4770      	bx	lr

0800d5d2 <__retarget_lock_acquire_recursive>:
 800d5d2:	4770      	bx	lr

0800d5d4 <__retarget_lock_release_recursive>:
 800d5d4:	4770      	bx	lr

0800d5d6 <memcpy>:
 800d5d6:	440a      	add	r2, r1
 800d5d8:	4291      	cmp	r1, r2
 800d5da:	f100 33ff 	add.w	r3, r0, #4294967295
 800d5de:	d100      	bne.n	800d5e2 <memcpy+0xc>
 800d5e0:	4770      	bx	lr
 800d5e2:	b510      	push	{r4, lr}
 800d5e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d5ec:	4291      	cmp	r1, r2
 800d5ee:	d1f9      	bne.n	800d5e4 <memcpy+0xe>
 800d5f0:	bd10      	pop	{r4, pc}

0800d5f2 <quorem>:
 800d5f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f6:	6903      	ldr	r3, [r0, #16]
 800d5f8:	690c      	ldr	r4, [r1, #16]
 800d5fa:	42a3      	cmp	r3, r4
 800d5fc:	4607      	mov	r7, r0
 800d5fe:	db7e      	blt.n	800d6fe <quorem+0x10c>
 800d600:	3c01      	subs	r4, #1
 800d602:	f101 0814 	add.w	r8, r1, #20
 800d606:	00a3      	lsls	r3, r4, #2
 800d608:	f100 0514 	add.w	r5, r0, #20
 800d60c:	9300      	str	r3, [sp, #0]
 800d60e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d612:	9301      	str	r3, [sp, #4]
 800d614:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d618:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d61c:	3301      	adds	r3, #1
 800d61e:	429a      	cmp	r2, r3
 800d620:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d624:	fbb2 f6f3 	udiv	r6, r2, r3
 800d628:	d32e      	bcc.n	800d688 <quorem+0x96>
 800d62a:	f04f 0a00 	mov.w	sl, #0
 800d62e:	46c4      	mov	ip, r8
 800d630:	46ae      	mov	lr, r5
 800d632:	46d3      	mov	fp, sl
 800d634:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d638:	b298      	uxth	r0, r3
 800d63a:	fb06 a000 	mla	r0, r6, r0, sl
 800d63e:	0c02      	lsrs	r2, r0, #16
 800d640:	0c1b      	lsrs	r3, r3, #16
 800d642:	fb06 2303 	mla	r3, r6, r3, r2
 800d646:	f8de 2000 	ldr.w	r2, [lr]
 800d64a:	b280      	uxth	r0, r0
 800d64c:	b292      	uxth	r2, r2
 800d64e:	1a12      	subs	r2, r2, r0
 800d650:	445a      	add	r2, fp
 800d652:	f8de 0000 	ldr.w	r0, [lr]
 800d656:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d65a:	b29b      	uxth	r3, r3
 800d65c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d660:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d664:	b292      	uxth	r2, r2
 800d666:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d66a:	45e1      	cmp	r9, ip
 800d66c:	f84e 2b04 	str.w	r2, [lr], #4
 800d670:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d674:	d2de      	bcs.n	800d634 <quorem+0x42>
 800d676:	9b00      	ldr	r3, [sp, #0]
 800d678:	58eb      	ldr	r3, [r5, r3]
 800d67a:	b92b      	cbnz	r3, 800d688 <quorem+0x96>
 800d67c:	9b01      	ldr	r3, [sp, #4]
 800d67e:	3b04      	subs	r3, #4
 800d680:	429d      	cmp	r5, r3
 800d682:	461a      	mov	r2, r3
 800d684:	d32f      	bcc.n	800d6e6 <quorem+0xf4>
 800d686:	613c      	str	r4, [r7, #16]
 800d688:	4638      	mov	r0, r7
 800d68a:	f001 f97b 	bl	800e984 <__mcmp>
 800d68e:	2800      	cmp	r0, #0
 800d690:	db25      	blt.n	800d6de <quorem+0xec>
 800d692:	4629      	mov	r1, r5
 800d694:	2000      	movs	r0, #0
 800d696:	f858 2b04 	ldr.w	r2, [r8], #4
 800d69a:	f8d1 c000 	ldr.w	ip, [r1]
 800d69e:	fa1f fe82 	uxth.w	lr, r2
 800d6a2:	fa1f f38c 	uxth.w	r3, ip
 800d6a6:	eba3 030e 	sub.w	r3, r3, lr
 800d6aa:	4403      	add	r3, r0
 800d6ac:	0c12      	lsrs	r2, r2, #16
 800d6ae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d6b2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6bc:	45c1      	cmp	r9, r8
 800d6be:	f841 3b04 	str.w	r3, [r1], #4
 800d6c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d6c6:	d2e6      	bcs.n	800d696 <quorem+0xa4>
 800d6c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d6cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d6d0:	b922      	cbnz	r2, 800d6dc <quorem+0xea>
 800d6d2:	3b04      	subs	r3, #4
 800d6d4:	429d      	cmp	r5, r3
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	d30b      	bcc.n	800d6f2 <quorem+0x100>
 800d6da:	613c      	str	r4, [r7, #16]
 800d6dc:	3601      	adds	r6, #1
 800d6de:	4630      	mov	r0, r6
 800d6e0:	b003      	add	sp, #12
 800d6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6e6:	6812      	ldr	r2, [r2, #0]
 800d6e8:	3b04      	subs	r3, #4
 800d6ea:	2a00      	cmp	r2, #0
 800d6ec:	d1cb      	bne.n	800d686 <quorem+0x94>
 800d6ee:	3c01      	subs	r4, #1
 800d6f0:	e7c6      	b.n	800d680 <quorem+0x8e>
 800d6f2:	6812      	ldr	r2, [r2, #0]
 800d6f4:	3b04      	subs	r3, #4
 800d6f6:	2a00      	cmp	r2, #0
 800d6f8:	d1ef      	bne.n	800d6da <quorem+0xe8>
 800d6fa:	3c01      	subs	r4, #1
 800d6fc:	e7ea      	b.n	800d6d4 <quorem+0xe2>
 800d6fe:	2000      	movs	r0, #0
 800d700:	e7ee      	b.n	800d6e0 <quorem+0xee>
 800d702:	0000      	movs	r0, r0
 800d704:	0000      	movs	r0, r0
	...

0800d708 <_dtoa_r>:
 800d708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d70c:	69c7      	ldr	r7, [r0, #28]
 800d70e:	b099      	sub	sp, #100	@ 0x64
 800d710:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d714:	ec55 4b10 	vmov	r4, r5, d0
 800d718:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d71a:	9109      	str	r1, [sp, #36]	@ 0x24
 800d71c:	4683      	mov	fp, r0
 800d71e:	920e      	str	r2, [sp, #56]	@ 0x38
 800d720:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d722:	b97f      	cbnz	r7, 800d744 <_dtoa_r+0x3c>
 800d724:	2010      	movs	r0, #16
 800d726:	f000 fdfd 	bl	800e324 <malloc>
 800d72a:	4602      	mov	r2, r0
 800d72c:	f8cb 001c 	str.w	r0, [fp, #28]
 800d730:	b920      	cbnz	r0, 800d73c <_dtoa_r+0x34>
 800d732:	4ba7      	ldr	r3, [pc, #668]	@ (800d9d0 <_dtoa_r+0x2c8>)
 800d734:	21ef      	movs	r1, #239	@ 0xef
 800d736:	48a7      	ldr	r0, [pc, #668]	@ (800d9d4 <_dtoa_r+0x2cc>)
 800d738:	f001 fcae 	bl	800f098 <__assert_func>
 800d73c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d740:	6007      	str	r7, [r0, #0]
 800d742:	60c7      	str	r7, [r0, #12]
 800d744:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d748:	6819      	ldr	r1, [r3, #0]
 800d74a:	b159      	cbz	r1, 800d764 <_dtoa_r+0x5c>
 800d74c:	685a      	ldr	r2, [r3, #4]
 800d74e:	604a      	str	r2, [r1, #4]
 800d750:	2301      	movs	r3, #1
 800d752:	4093      	lsls	r3, r2
 800d754:	608b      	str	r3, [r1, #8]
 800d756:	4658      	mov	r0, fp
 800d758:	f000 feda 	bl	800e510 <_Bfree>
 800d75c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d760:	2200      	movs	r2, #0
 800d762:	601a      	str	r2, [r3, #0]
 800d764:	1e2b      	subs	r3, r5, #0
 800d766:	bfb9      	ittee	lt
 800d768:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d76c:	9303      	strlt	r3, [sp, #12]
 800d76e:	2300      	movge	r3, #0
 800d770:	6033      	strge	r3, [r6, #0]
 800d772:	9f03      	ldr	r7, [sp, #12]
 800d774:	4b98      	ldr	r3, [pc, #608]	@ (800d9d8 <_dtoa_r+0x2d0>)
 800d776:	bfbc      	itt	lt
 800d778:	2201      	movlt	r2, #1
 800d77a:	6032      	strlt	r2, [r6, #0]
 800d77c:	43bb      	bics	r3, r7
 800d77e:	d112      	bne.n	800d7a6 <_dtoa_r+0x9e>
 800d780:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d782:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d786:	6013      	str	r3, [r2, #0]
 800d788:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d78c:	4323      	orrs	r3, r4
 800d78e:	f000 854d 	beq.w	800e22c <_dtoa_r+0xb24>
 800d792:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d794:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d9ec <_dtoa_r+0x2e4>
 800d798:	2b00      	cmp	r3, #0
 800d79a:	f000 854f 	beq.w	800e23c <_dtoa_r+0xb34>
 800d79e:	f10a 0303 	add.w	r3, sl, #3
 800d7a2:	f000 bd49 	b.w	800e238 <_dtoa_r+0xb30>
 800d7a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	ec51 0b17 	vmov	r0, r1, d7
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d7b6:	f7f3 f987 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7ba:	4680      	mov	r8, r0
 800d7bc:	b158      	cbz	r0, 800d7d6 <_dtoa_r+0xce>
 800d7be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	6013      	str	r3, [r2, #0]
 800d7c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d7c6:	b113      	cbz	r3, 800d7ce <_dtoa_r+0xc6>
 800d7c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d7ca:	4b84      	ldr	r3, [pc, #528]	@ (800d9dc <_dtoa_r+0x2d4>)
 800d7cc:	6013      	str	r3, [r2, #0]
 800d7ce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d9f0 <_dtoa_r+0x2e8>
 800d7d2:	f000 bd33 	b.w	800e23c <_dtoa_r+0xb34>
 800d7d6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d7da:	aa16      	add	r2, sp, #88	@ 0x58
 800d7dc:	a917      	add	r1, sp, #92	@ 0x5c
 800d7de:	4658      	mov	r0, fp
 800d7e0:	f001 f980 	bl	800eae4 <__d2b>
 800d7e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d7e8:	4681      	mov	r9, r0
 800d7ea:	2e00      	cmp	r6, #0
 800d7ec:	d077      	beq.n	800d8de <_dtoa_r+0x1d6>
 800d7ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d7f0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d7f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d7f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d7fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d800:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d804:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d808:	4619      	mov	r1, r3
 800d80a:	2200      	movs	r2, #0
 800d80c:	4b74      	ldr	r3, [pc, #464]	@ (800d9e0 <_dtoa_r+0x2d8>)
 800d80e:	f7f2 fd3b 	bl	8000288 <__aeabi_dsub>
 800d812:	a369      	add	r3, pc, #420	@ (adr r3, 800d9b8 <_dtoa_r+0x2b0>)
 800d814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d818:	f7f2 feee 	bl	80005f8 <__aeabi_dmul>
 800d81c:	a368      	add	r3, pc, #416	@ (adr r3, 800d9c0 <_dtoa_r+0x2b8>)
 800d81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d822:	f7f2 fd33 	bl	800028c <__adddf3>
 800d826:	4604      	mov	r4, r0
 800d828:	4630      	mov	r0, r6
 800d82a:	460d      	mov	r5, r1
 800d82c:	f7f2 fe7a 	bl	8000524 <__aeabi_i2d>
 800d830:	a365      	add	r3, pc, #404	@ (adr r3, 800d9c8 <_dtoa_r+0x2c0>)
 800d832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d836:	f7f2 fedf 	bl	80005f8 <__aeabi_dmul>
 800d83a:	4602      	mov	r2, r0
 800d83c:	460b      	mov	r3, r1
 800d83e:	4620      	mov	r0, r4
 800d840:	4629      	mov	r1, r5
 800d842:	f7f2 fd23 	bl	800028c <__adddf3>
 800d846:	4604      	mov	r4, r0
 800d848:	460d      	mov	r5, r1
 800d84a:	f7f3 f985 	bl	8000b58 <__aeabi_d2iz>
 800d84e:	2200      	movs	r2, #0
 800d850:	4607      	mov	r7, r0
 800d852:	2300      	movs	r3, #0
 800d854:	4620      	mov	r0, r4
 800d856:	4629      	mov	r1, r5
 800d858:	f7f3 f940 	bl	8000adc <__aeabi_dcmplt>
 800d85c:	b140      	cbz	r0, 800d870 <_dtoa_r+0x168>
 800d85e:	4638      	mov	r0, r7
 800d860:	f7f2 fe60 	bl	8000524 <__aeabi_i2d>
 800d864:	4622      	mov	r2, r4
 800d866:	462b      	mov	r3, r5
 800d868:	f7f3 f92e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d86c:	b900      	cbnz	r0, 800d870 <_dtoa_r+0x168>
 800d86e:	3f01      	subs	r7, #1
 800d870:	2f16      	cmp	r7, #22
 800d872:	d851      	bhi.n	800d918 <_dtoa_r+0x210>
 800d874:	4b5b      	ldr	r3, [pc, #364]	@ (800d9e4 <_dtoa_r+0x2dc>)
 800d876:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d87e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d882:	f7f3 f92b 	bl	8000adc <__aeabi_dcmplt>
 800d886:	2800      	cmp	r0, #0
 800d888:	d048      	beq.n	800d91c <_dtoa_r+0x214>
 800d88a:	3f01      	subs	r7, #1
 800d88c:	2300      	movs	r3, #0
 800d88e:	9312      	str	r3, [sp, #72]	@ 0x48
 800d890:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d892:	1b9b      	subs	r3, r3, r6
 800d894:	1e5a      	subs	r2, r3, #1
 800d896:	bf44      	itt	mi
 800d898:	f1c3 0801 	rsbmi	r8, r3, #1
 800d89c:	2300      	movmi	r3, #0
 800d89e:	9208      	str	r2, [sp, #32]
 800d8a0:	bf54      	ite	pl
 800d8a2:	f04f 0800 	movpl.w	r8, #0
 800d8a6:	9308      	strmi	r3, [sp, #32]
 800d8a8:	2f00      	cmp	r7, #0
 800d8aa:	db39      	blt.n	800d920 <_dtoa_r+0x218>
 800d8ac:	9b08      	ldr	r3, [sp, #32]
 800d8ae:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d8b0:	443b      	add	r3, r7
 800d8b2:	9308      	str	r3, [sp, #32]
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d8b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8ba:	2b09      	cmp	r3, #9
 800d8bc:	d864      	bhi.n	800d988 <_dtoa_r+0x280>
 800d8be:	2b05      	cmp	r3, #5
 800d8c0:	bfc4      	itt	gt
 800d8c2:	3b04      	subgt	r3, #4
 800d8c4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d8c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8c8:	f1a3 0302 	sub.w	r3, r3, #2
 800d8cc:	bfcc      	ite	gt
 800d8ce:	2400      	movgt	r4, #0
 800d8d0:	2401      	movle	r4, #1
 800d8d2:	2b03      	cmp	r3, #3
 800d8d4:	d863      	bhi.n	800d99e <_dtoa_r+0x296>
 800d8d6:	e8df f003 	tbb	[pc, r3]
 800d8da:	372a      	.short	0x372a
 800d8dc:	5535      	.short	0x5535
 800d8de:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d8e2:	441e      	add	r6, r3
 800d8e4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d8e8:	2b20      	cmp	r3, #32
 800d8ea:	bfc1      	itttt	gt
 800d8ec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d8f0:	409f      	lslgt	r7, r3
 800d8f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d8f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d8fa:	bfd6      	itet	le
 800d8fc:	f1c3 0320 	rsble	r3, r3, #32
 800d900:	ea47 0003 	orrgt.w	r0, r7, r3
 800d904:	fa04 f003 	lslle.w	r0, r4, r3
 800d908:	f7f2 fdfc 	bl	8000504 <__aeabi_ui2d>
 800d90c:	2201      	movs	r2, #1
 800d90e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d912:	3e01      	subs	r6, #1
 800d914:	9214      	str	r2, [sp, #80]	@ 0x50
 800d916:	e777      	b.n	800d808 <_dtoa_r+0x100>
 800d918:	2301      	movs	r3, #1
 800d91a:	e7b8      	b.n	800d88e <_dtoa_r+0x186>
 800d91c:	9012      	str	r0, [sp, #72]	@ 0x48
 800d91e:	e7b7      	b.n	800d890 <_dtoa_r+0x188>
 800d920:	427b      	negs	r3, r7
 800d922:	930a      	str	r3, [sp, #40]	@ 0x28
 800d924:	2300      	movs	r3, #0
 800d926:	eba8 0807 	sub.w	r8, r8, r7
 800d92a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d92c:	e7c4      	b.n	800d8b8 <_dtoa_r+0x1b0>
 800d92e:	2300      	movs	r3, #0
 800d930:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d932:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d934:	2b00      	cmp	r3, #0
 800d936:	dc35      	bgt.n	800d9a4 <_dtoa_r+0x29c>
 800d938:	2301      	movs	r3, #1
 800d93a:	9300      	str	r3, [sp, #0]
 800d93c:	9307      	str	r3, [sp, #28]
 800d93e:	461a      	mov	r2, r3
 800d940:	920e      	str	r2, [sp, #56]	@ 0x38
 800d942:	e00b      	b.n	800d95c <_dtoa_r+0x254>
 800d944:	2301      	movs	r3, #1
 800d946:	e7f3      	b.n	800d930 <_dtoa_r+0x228>
 800d948:	2300      	movs	r3, #0
 800d94a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d94c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d94e:	18fb      	adds	r3, r7, r3
 800d950:	9300      	str	r3, [sp, #0]
 800d952:	3301      	adds	r3, #1
 800d954:	2b01      	cmp	r3, #1
 800d956:	9307      	str	r3, [sp, #28]
 800d958:	bfb8      	it	lt
 800d95a:	2301      	movlt	r3, #1
 800d95c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d960:	2100      	movs	r1, #0
 800d962:	2204      	movs	r2, #4
 800d964:	f102 0514 	add.w	r5, r2, #20
 800d968:	429d      	cmp	r5, r3
 800d96a:	d91f      	bls.n	800d9ac <_dtoa_r+0x2a4>
 800d96c:	6041      	str	r1, [r0, #4]
 800d96e:	4658      	mov	r0, fp
 800d970:	f000 fd8e 	bl	800e490 <_Balloc>
 800d974:	4682      	mov	sl, r0
 800d976:	2800      	cmp	r0, #0
 800d978:	d13c      	bne.n	800d9f4 <_dtoa_r+0x2ec>
 800d97a:	4b1b      	ldr	r3, [pc, #108]	@ (800d9e8 <_dtoa_r+0x2e0>)
 800d97c:	4602      	mov	r2, r0
 800d97e:	f240 11af 	movw	r1, #431	@ 0x1af
 800d982:	e6d8      	b.n	800d736 <_dtoa_r+0x2e>
 800d984:	2301      	movs	r3, #1
 800d986:	e7e0      	b.n	800d94a <_dtoa_r+0x242>
 800d988:	2401      	movs	r4, #1
 800d98a:	2300      	movs	r3, #0
 800d98c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d98e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d990:	f04f 33ff 	mov.w	r3, #4294967295
 800d994:	9300      	str	r3, [sp, #0]
 800d996:	9307      	str	r3, [sp, #28]
 800d998:	2200      	movs	r2, #0
 800d99a:	2312      	movs	r3, #18
 800d99c:	e7d0      	b.n	800d940 <_dtoa_r+0x238>
 800d99e:	2301      	movs	r3, #1
 800d9a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d9a2:	e7f5      	b.n	800d990 <_dtoa_r+0x288>
 800d9a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9a6:	9300      	str	r3, [sp, #0]
 800d9a8:	9307      	str	r3, [sp, #28]
 800d9aa:	e7d7      	b.n	800d95c <_dtoa_r+0x254>
 800d9ac:	3101      	adds	r1, #1
 800d9ae:	0052      	lsls	r2, r2, #1
 800d9b0:	e7d8      	b.n	800d964 <_dtoa_r+0x25c>
 800d9b2:	bf00      	nop
 800d9b4:	f3af 8000 	nop.w
 800d9b8:	636f4361 	.word	0x636f4361
 800d9bc:	3fd287a7 	.word	0x3fd287a7
 800d9c0:	8b60c8b3 	.word	0x8b60c8b3
 800d9c4:	3fc68a28 	.word	0x3fc68a28
 800d9c8:	509f79fb 	.word	0x509f79fb
 800d9cc:	3fd34413 	.word	0x3fd34413
 800d9d0:	0800f2f1 	.word	0x0800f2f1
 800d9d4:	0800f308 	.word	0x0800f308
 800d9d8:	7ff00000 	.word	0x7ff00000
 800d9dc:	0800f2c1 	.word	0x0800f2c1
 800d9e0:	3ff80000 	.word	0x3ff80000
 800d9e4:	0800f400 	.word	0x0800f400
 800d9e8:	0800f360 	.word	0x0800f360
 800d9ec:	0800f2ed 	.word	0x0800f2ed
 800d9f0:	0800f2c0 	.word	0x0800f2c0
 800d9f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d9f8:	6018      	str	r0, [r3, #0]
 800d9fa:	9b07      	ldr	r3, [sp, #28]
 800d9fc:	2b0e      	cmp	r3, #14
 800d9fe:	f200 80a4 	bhi.w	800db4a <_dtoa_r+0x442>
 800da02:	2c00      	cmp	r4, #0
 800da04:	f000 80a1 	beq.w	800db4a <_dtoa_r+0x442>
 800da08:	2f00      	cmp	r7, #0
 800da0a:	dd33      	ble.n	800da74 <_dtoa_r+0x36c>
 800da0c:	4bad      	ldr	r3, [pc, #692]	@ (800dcc4 <_dtoa_r+0x5bc>)
 800da0e:	f007 020f 	and.w	r2, r7, #15
 800da12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da16:	ed93 7b00 	vldr	d7, [r3]
 800da1a:	05f8      	lsls	r0, r7, #23
 800da1c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800da20:	ea4f 1427 	mov.w	r4, r7, asr #4
 800da24:	d516      	bpl.n	800da54 <_dtoa_r+0x34c>
 800da26:	4ba8      	ldr	r3, [pc, #672]	@ (800dcc8 <_dtoa_r+0x5c0>)
 800da28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800da2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800da30:	f7f2 ff0c 	bl	800084c <__aeabi_ddiv>
 800da34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da38:	f004 040f 	and.w	r4, r4, #15
 800da3c:	2603      	movs	r6, #3
 800da3e:	4da2      	ldr	r5, [pc, #648]	@ (800dcc8 <_dtoa_r+0x5c0>)
 800da40:	b954      	cbnz	r4, 800da58 <_dtoa_r+0x350>
 800da42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da4a:	f7f2 feff 	bl	800084c <__aeabi_ddiv>
 800da4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da52:	e028      	b.n	800daa6 <_dtoa_r+0x39e>
 800da54:	2602      	movs	r6, #2
 800da56:	e7f2      	b.n	800da3e <_dtoa_r+0x336>
 800da58:	07e1      	lsls	r1, r4, #31
 800da5a:	d508      	bpl.n	800da6e <_dtoa_r+0x366>
 800da5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da60:	e9d5 2300 	ldrd	r2, r3, [r5]
 800da64:	f7f2 fdc8 	bl	80005f8 <__aeabi_dmul>
 800da68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da6c:	3601      	adds	r6, #1
 800da6e:	1064      	asrs	r4, r4, #1
 800da70:	3508      	adds	r5, #8
 800da72:	e7e5      	b.n	800da40 <_dtoa_r+0x338>
 800da74:	f000 80d2 	beq.w	800dc1c <_dtoa_r+0x514>
 800da78:	427c      	negs	r4, r7
 800da7a:	4b92      	ldr	r3, [pc, #584]	@ (800dcc4 <_dtoa_r+0x5bc>)
 800da7c:	4d92      	ldr	r5, [pc, #584]	@ (800dcc8 <_dtoa_r+0x5c0>)
 800da7e:	f004 020f 	and.w	r2, r4, #15
 800da82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800da8e:	f7f2 fdb3 	bl	80005f8 <__aeabi_dmul>
 800da92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da96:	1124      	asrs	r4, r4, #4
 800da98:	2300      	movs	r3, #0
 800da9a:	2602      	movs	r6, #2
 800da9c:	2c00      	cmp	r4, #0
 800da9e:	f040 80b2 	bne.w	800dc06 <_dtoa_r+0x4fe>
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d1d3      	bne.n	800da4e <_dtoa_r+0x346>
 800daa6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800daa8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800daac:	2b00      	cmp	r3, #0
 800daae:	f000 80b7 	beq.w	800dc20 <_dtoa_r+0x518>
 800dab2:	4b86      	ldr	r3, [pc, #536]	@ (800dccc <_dtoa_r+0x5c4>)
 800dab4:	2200      	movs	r2, #0
 800dab6:	4620      	mov	r0, r4
 800dab8:	4629      	mov	r1, r5
 800daba:	f7f3 f80f 	bl	8000adc <__aeabi_dcmplt>
 800dabe:	2800      	cmp	r0, #0
 800dac0:	f000 80ae 	beq.w	800dc20 <_dtoa_r+0x518>
 800dac4:	9b07      	ldr	r3, [sp, #28]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	f000 80aa 	beq.w	800dc20 <_dtoa_r+0x518>
 800dacc:	9b00      	ldr	r3, [sp, #0]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	dd37      	ble.n	800db42 <_dtoa_r+0x43a>
 800dad2:	1e7b      	subs	r3, r7, #1
 800dad4:	9304      	str	r3, [sp, #16]
 800dad6:	4620      	mov	r0, r4
 800dad8:	4b7d      	ldr	r3, [pc, #500]	@ (800dcd0 <_dtoa_r+0x5c8>)
 800dada:	2200      	movs	r2, #0
 800dadc:	4629      	mov	r1, r5
 800dade:	f7f2 fd8b 	bl	80005f8 <__aeabi_dmul>
 800dae2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dae6:	9c00      	ldr	r4, [sp, #0]
 800dae8:	3601      	adds	r6, #1
 800daea:	4630      	mov	r0, r6
 800daec:	f7f2 fd1a 	bl	8000524 <__aeabi_i2d>
 800daf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800daf4:	f7f2 fd80 	bl	80005f8 <__aeabi_dmul>
 800daf8:	4b76      	ldr	r3, [pc, #472]	@ (800dcd4 <_dtoa_r+0x5cc>)
 800dafa:	2200      	movs	r2, #0
 800dafc:	f7f2 fbc6 	bl	800028c <__adddf3>
 800db00:	4605      	mov	r5, r0
 800db02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800db06:	2c00      	cmp	r4, #0
 800db08:	f040 808d 	bne.w	800dc26 <_dtoa_r+0x51e>
 800db0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db10:	4b71      	ldr	r3, [pc, #452]	@ (800dcd8 <_dtoa_r+0x5d0>)
 800db12:	2200      	movs	r2, #0
 800db14:	f7f2 fbb8 	bl	8000288 <__aeabi_dsub>
 800db18:	4602      	mov	r2, r0
 800db1a:	460b      	mov	r3, r1
 800db1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800db20:	462a      	mov	r2, r5
 800db22:	4633      	mov	r3, r6
 800db24:	f7f2 fff8 	bl	8000b18 <__aeabi_dcmpgt>
 800db28:	2800      	cmp	r0, #0
 800db2a:	f040 828b 	bne.w	800e044 <_dtoa_r+0x93c>
 800db2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db32:	462a      	mov	r2, r5
 800db34:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800db38:	f7f2 ffd0 	bl	8000adc <__aeabi_dcmplt>
 800db3c:	2800      	cmp	r0, #0
 800db3e:	f040 8128 	bne.w	800dd92 <_dtoa_r+0x68a>
 800db42:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800db46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800db4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	f2c0 815a 	blt.w	800de06 <_dtoa_r+0x6fe>
 800db52:	2f0e      	cmp	r7, #14
 800db54:	f300 8157 	bgt.w	800de06 <_dtoa_r+0x6fe>
 800db58:	4b5a      	ldr	r3, [pc, #360]	@ (800dcc4 <_dtoa_r+0x5bc>)
 800db5a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800db5e:	ed93 7b00 	vldr	d7, [r3]
 800db62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db64:	2b00      	cmp	r3, #0
 800db66:	ed8d 7b00 	vstr	d7, [sp]
 800db6a:	da03      	bge.n	800db74 <_dtoa_r+0x46c>
 800db6c:	9b07      	ldr	r3, [sp, #28]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	f340 8101 	ble.w	800dd76 <_dtoa_r+0x66e>
 800db74:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800db78:	4656      	mov	r6, sl
 800db7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db7e:	4620      	mov	r0, r4
 800db80:	4629      	mov	r1, r5
 800db82:	f7f2 fe63 	bl	800084c <__aeabi_ddiv>
 800db86:	f7f2 ffe7 	bl	8000b58 <__aeabi_d2iz>
 800db8a:	4680      	mov	r8, r0
 800db8c:	f7f2 fcca 	bl	8000524 <__aeabi_i2d>
 800db90:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db94:	f7f2 fd30 	bl	80005f8 <__aeabi_dmul>
 800db98:	4602      	mov	r2, r0
 800db9a:	460b      	mov	r3, r1
 800db9c:	4620      	mov	r0, r4
 800db9e:	4629      	mov	r1, r5
 800dba0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800dba4:	f7f2 fb70 	bl	8000288 <__aeabi_dsub>
 800dba8:	f806 4b01 	strb.w	r4, [r6], #1
 800dbac:	9d07      	ldr	r5, [sp, #28]
 800dbae:	eba6 040a 	sub.w	r4, r6, sl
 800dbb2:	42a5      	cmp	r5, r4
 800dbb4:	4602      	mov	r2, r0
 800dbb6:	460b      	mov	r3, r1
 800dbb8:	f040 8117 	bne.w	800ddea <_dtoa_r+0x6e2>
 800dbbc:	f7f2 fb66 	bl	800028c <__adddf3>
 800dbc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dbc4:	4604      	mov	r4, r0
 800dbc6:	460d      	mov	r5, r1
 800dbc8:	f7f2 ffa6 	bl	8000b18 <__aeabi_dcmpgt>
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	f040 80f9 	bne.w	800ddc4 <_dtoa_r+0x6bc>
 800dbd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dbd6:	4620      	mov	r0, r4
 800dbd8:	4629      	mov	r1, r5
 800dbda:	f7f2 ff75 	bl	8000ac8 <__aeabi_dcmpeq>
 800dbde:	b118      	cbz	r0, 800dbe8 <_dtoa_r+0x4e0>
 800dbe0:	f018 0f01 	tst.w	r8, #1
 800dbe4:	f040 80ee 	bne.w	800ddc4 <_dtoa_r+0x6bc>
 800dbe8:	4649      	mov	r1, r9
 800dbea:	4658      	mov	r0, fp
 800dbec:	f000 fc90 	bl	800e510 <_Bfree>
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	7033      	strb	r3, [r6, #0]
 800dbf4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dbf6:	3701      	adds	r7, #1
 800dbf8:	601f      	str	r7, [r3, #0]
 800dbfa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	f000 831d 	beq.w	800e23c <_dtoa_r+0xb34>
 800dc02:	601e      	str	r6, [r3, #0]
 800dc04:	e31a      	b.n	800e23c <_dtoa_r+0xb34>
 800dc06:	07e2      	lsls	r2, r4, #31
 800dc08:	d505      	bpl.n	800dc16 <_dtoa_r+0x50e>
 800dc0a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dc0e:	f7f2 fcf3 	bl	80005f8 <__aeabi_dmul>
 800dc12:	3601      	adds	r6, #1
 800dc14:	2301      	movs	r3, #1
 800dc16:	1064      	asrs	r4, r4, #1
 800dc18:	3508      	adds	r5, #8
 800dc1a:	e73f      	b.n	800da9c <_dtoa_r+0x394>
 800dc1c:	2602      	movs	r6, #2
 800dc1e:	e742      	b.n	800daa6 <_dtoa_r+0x39e>
 800dc20:	9c07      	ldr	r4, [sp, #28]
 800dc22:	9704      	str	r7, [sp, #16]
 800dc24:	e761      	b.n	800daea <_dtoa_r+0x3e2>
 800dc26:	4b27      	ldr	r3, [pc, #156]	@ (800dcc4 <_dtoa_r+0x5bc>)
 800dc28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dc2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dc2e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dc32:	4454      	add	r4, sl
 800dc34:	2900      	cmp	r1, #0
 800dc36:	d053      	beq.n	800dce0 <_dtoa_r+0x5d8>
 800dc38:	4928      	ldr	r1, [pc, #160]	@ (800dcdc <_dtoa_r+0x5d4>)
 800dc3a:	2000      	movs	r0, #0
 800dc3c:	f7f2 fe06 	bl	800084c <__aeabi_ddiv>
 800dc40:	4633      	mov	r3, r6
 800dc42:	462a      	mov	r2, r5
 800dc44:	f7f2 fb20 	bl	8000288 <__aeabi_dsub>
 800dc48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800dc4c:	4656      	mov	r6, sl
 800dc4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc52:	f7f2 ff81 	bl	8000b58 <__aeabi_d2iz>
 800dc56:	4605      	mov	r5, r0
 800dc58:	f7f2 fc64 	bl	8000524 <__aeabi_i2d>
 800dc5c:	4602      	mov	r2, r0
 800dc5e:	460b      	mov	r3, r1
 800dc60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc64:	f7f2 fb10 	bl	8000288 <__aeabi_dsub>
 800dc68:	3530      	adds	r5, #48	@ 0x30
 800dc6a:	4602      	mov	r2, r0
 800dc6c:	460b      	mov	r3, r1
 800dc6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dc72:	f806 5b01 	strb.w	r5, [r6], #1
 800dc76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dc7a:	f7f2 ff2f 	bl	8000adc <__aeabi_dcmplt>
 800dc7e:	2800      	cmp	r0, #0
 800dc80:	d171      	bne.n	800dd66 <_dtoa_r+0x65e>
 800dc82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dc86:	4911      	ldr	r1, [pc, #68]	@ (800dccc <_dtoa_r+0x5c4>)
 800dc88:	2000      	movs	r0, #0
 800dc8a:	f7f2 fafd 	bl	8000288 <__aeabi_dsub>
 800dc8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dc92:	f7f2 ff23 	bl	8000adc <__aeabi_dcmplt>
 800dc96:	2800      	cmp	r0, #0
 800dc98:	f040 8095 	bne.w	800ddc6 <_dtoa_r+0x6be>
 800dc9c:	42a6      	cmp	r6, r4
 800dc9e:	f43f af50 	beq.w	800db42 <_dtoa_r+0x43a>
 800dca2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800dca6:	4b0a      	ldr	r3, [pc, #40]	@ (800dcd0 <_dtoa_r+0x5c8>)
 800dca8:	2200      	movs	r2, #0
 800dcaa:	f7f2 fca5 	bl	80005f8 <__aeabi_dmul>
 800dcae:	4b08      	ldr	r3, [pc, #32]	@ (800dcd0 <_dtoa_r+0x5c8>)
 800dcb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dcba:	f7f2 fc9d 	bl	80005f8 <__aeabi_dmul>
 800dcbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcc2:	e7c4      	b.n	800dc4e <_dtoa_r+0x546>
 800dcc4:	0800f400 	.word	0x0800f400
 800dcc8:	0800f3d8 	.word	0x0800f3d8
 800dccc:	3ff00000 	.word	0x3ff00000
 800dcd0:	40240000 	.word	0x40240000
 800dcd4:	401c0000 	.word	0x401c0000
 800dcd8:	40140000 	.word	0x40140000
 800dcdc:	3fe00000 	.word	0x3fe00000
 800dce0:	4631      	mov	r1, r6
 800dce2:	4628      	mov	r0, r5
 800dce4:	f7f2 fc88 	bl	80005f8 <__aeabi_dmul>
 800dce8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800dcec:	9415      	str	r4, [sp, #84]	@ 0x54
 800dcee:	4656      	mov	r6, sl
 800dcf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dcf4:	f7f2 ff30 	bl	8000b58 <__aeabi_d2iz>
 800dcf8:	4605      	mov	r5, r0
 800dcfa:	f7f2 fc13 	bl	8000524 <__aeabi_i2d>
 800dcfe:	4602      	mov	r2, r0
 800dd00:	460b      	mov	r3, r1
 800dd02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd06:	f7f2 fabf 	bl	8000288 <__aeabi_dsub>
 800dd0a:	3530      	adds	r5, #48	@ 0x30
 800dd0c:	f806 5b01 	strb.w	r5, [r6], #1
 800dd10:	4602      	mov	r2, r0
 800dd12:	460b      	mov	r3, r1
 800dd14:	42a6      	cmp	r6, r4
 800dd16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dd1a:	f04f 0200 	mov.w	r2, #0
 800dd1e:	d124      	bne.n	800dd6a <_dtoa_r+0x662>
 800dd20:	4bac      	ldr	r3, [pc, #688]	@ (800dfd4 <_dtoa_r+0x8cc>)
 800dd22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800dd26:	f7f2 fab1 	bl	800028c <__adddf3>
 800dd2a:	4602      	mov	r2, r0
 800dd2c:	460b      	mov	r3, r1
 800dd2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd32:	f7f2 fef1 	bl	8000b18 <__aeabi_dcmpgt>
 800dd36:	2800      	cmp	r0, #0
 800dd38:	d145      	bne.n	800ddc6 <_dtoa_r+0x6be>
 800dd3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dd3e:	49a5      	ldr	r1, [pc, #660]	@ (800dfd4 <_dtoa_r+0x8cc>)
 800dd40:	2000      	movs	r0, #0
 800dd42:	f7f2 faa1 	bl	8000288 <__aeabi_dsub>
 800dd46:	4602      	mov	r2, r0
 800dd48:	460b      	mov	r3, r1
 800dd4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd4e:	f7f2 fec5 	bl	8000adc <__aeabi_dcmplt>
 800dd52:	2800      	cmp	r0, #0
 800dd54:	f43f aef5 	beq.w	800db42 <_dtoa_r+0x43a>
 800dd58:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800dd5a:	1e73      	subs	r3, r6, #1
 800dd5c:	9315      	str	r3, [sp, #84]	@ 0x54
 800dd5e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dd62:	2b30      	cmp	r3, #48	@ 0x30
 800dd64:	d0f8      	beq.n	800dd58 <_dtoa_r+0x650>
 800dd66:	9f04      	ldr	r7, [sp, #16]
 800dd68:	e73e      	b.n	800dbe8 <_dtoa_r+0x4e0>
 800dd6a:	4b9b      	ldr	r3, [pc, #620]	@ (800dfd8 <_dtoa_r+0x8d0>)
 800dd6c:	f7f2 fc44 	bl	80005f8 <__aeabi_dmul>
 800dd70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd74:	e7bc      	b.n	800dcf0 <_dtoa_r+0x5e8>
 800dd76:	d10c      	bne.n	800dd92 <_dtoa_r+0x68a>
 800dd78:	4b98      	ldr	r3, [pc, #608]	@ (800dfdc <_dtoa_r+0x8d4>)
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd80:	f7f2 fc3a 	bl	80005f8 <__aeabi_dmul>
 800dd84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd88:	f7f2 febc 	bl	8000b04 <__aeabi_dcmpge>
 800dd8c:	2800      	cmp	r0, #0
 800dd8e:	f000 8157 	beq.w	800e040 <_dtoa_r+0x938>
 800dd92:	2400      	movs	r4, #0
 800dd94:	4625      	mov	r5, r4
 800dd96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd98:	43db      	mvns	r3, r3
 800dd9a:	9304      	str	r3, [sp, #16]
 800dd9c:	4656      	mov	r6, sl
 800dd9e:	2700      	movs	r7, #0
 800dda0:	4621      	mov	r1, r4
 800dda2:	4658      	mov	r0, fp
 800dda4:	f000 fbb4 	bl	800e510 <_Bfree>
 800dda8:	2d00      	cmp	r5, #0
 800ddaa:	d0dc      	beq.n	800dd66 <_dtoa_r+0x65e>
 800ddac:	b12f      	cbz	r7, 800ddba <_dtoa_r+0x6b2>
 800ddae:	42af      	cmp	r7, r5
 800ddb0:	d003      	beq.n	800ddba <_dtoa_r+0x6b2>
 800ddb2:	4639      	mov	r1, r7
 800ddb4:	4658      	mov	r0, fp
 800ddb6:	f000 fbab 	bl	800e510 <_Bfree>
 800ddba:	4629      	mov	r1, r5
 800ddbc:	4658      	mov	r0, fp
 800ddbe:	f000 fba7 	bl	800e510 <_Bfree>
 800ddc2:	e7d0      	b.n	800dd66 <_dtoa_r+0x65e>
 800ddc4:	9704      	str	r7, [sp, #16]
 800ddc6:	4633      	mov	r3, r6
 800ddc8:	461e      	mov	r6, r3
 800ddca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ddce:	2a39      	cmp	r2, #57	@ 0x39
 800ddd0:	d107      	bne.n	800dde2 <_dtoa_r+0x6da>
 800ddd2:	459a      	cmp	sl, r3
 800ddd4:	d1f8      	bne.n	800ddc8 <_dtoa_r+0x6c0>
 800ddd6:	9a04      	ldr	r2, [sp, #16]
 800ddd8:	3201      	adds	r2, #1
 800ddda:	9204      	str	r2, [sp, #16]
 800dddc:	2230      	movs	r2, #48	@ 0x30
 800ddde:	f88a 2000 	strb.w	r2, [sl]
 800dde2:	781a      	ldrb	r2, [r3, #0]
 800dde4:	3201      	adds	r2, #1
 800dde6:	701a      	strb	r2, [r3, #0]
 800dde8:	e7bd      	b.n	800dd66 <_dtoa_r+0x65e>
 800ddea:	4b7b      	ldr	r3, [pc, #492]	@ (800dfd8 <_dtoa_r+0x8d0>)
 800ddec:	2200      	movs	r2, #0
 800ddee:	f7f2 fc03 	bl	80005f8 <__aeabi_dmul>
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	460d      	mov	r5, r1
 800ddfa:	f7f2 fe65 	bl	8000ac8 <__aeabi_dcmpeq>
 800ddfe:	2800      	cmp	r0, #0
 800de00:	f43f aebb 	beq.w	800db7a <_dtoa_r+0x472>
 800de04:	e6f0      	b.n	800dbe8 <_dtoa_r+0x4e0>
 800de06:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800de08:	2a00      	cmp	r2, #0
 800de0a:	f000 80db 	beq.w	800dfc4 <_dtoa_r+0x8bc>
 800de0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de10:	2a01      	cmp	r2, #1
 800de12:	f300 80bf 	bgt.w	800df94 <_dtoa_r+0x88c>
 800de16:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800de18:	2a00      	cmp	r2, #0
 800de1a:	f000 80b7 	beq.w	800df8c <_dtoa_r+0x884>
 800de1e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800de22:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800de24:	4646      	mov	r6, r8
 800de26:	9a08      	ldr	r2, [sp, #32]
 800de28:	2101      	movs	r1, #1
 800de2a:	441a      	add	r2, r3
 800de2c:	4658      	mov	r0, fp
 800de2e:	4498      	add	r8, r3
 800de30:	9208      	str	r2, [sp, #32]
 800de32:	f000 fc21 	bl	800e678 <__i2b>
 800de36:	4605      	mov	r5, r0
 800de38:	b15e      	cbz	r6, 800de52 <_dtoa_r+0x74a>
 800de3a:	9b08      	ldr	r3, [sp, #32]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	dd08      	ble.n	800de52 <_dtoa_r+0x74a>
 800de40:	42b3      	cmp	r3, r6
 800de42:	9a08      	ldr	r2, [sp, #32]
 800de44:	bfa8      	it	ge
 800de46:	4633      	movge	r3, r6
 800de48:	eba8 0803 	sub.w	r8, r8, r3
 800de4c:	1af6      	subs	r6, r6, r3
 800de4e:	1ad3      	subs	r3, r2, r3
 800de50:	9308      	str	r3, [sp, #32]
 800de52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de54:	b1f3      	cbz	r3, 800de94 <_dtoa_r+0x78c>
 800de56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de58:	2b00      	cmp	r3, #0
 800de5a:	f000 80b7 	beq.w	800dfcc <_dtoa_r+0x8c4>
 800de5e:	b18c      	cbz	r4, 800de84 <_dtoa_r+0x77c>
 800de60:	4629      	mov	r1, r5
 800de62:	4622      	mov	r2, r4
 800de64:	4658      	mov	r0, fp
 800de66:	f000 fcc7 	bl	800e7f8 <__pow5mult>
 800de6a:	464a      	mov	r2, r9
 800de6c:	4601      	mov	r1, r0
 800de6e:	4605      	mov	r5, r0
 800de70:	4658      	mov	r0, fp
 800de72:	f000 fc17 	bl	800e6a4 <__multiply>
 800de76:	4649      	mov	r1, r9
 800de78:	9004      	str	r0, [sp, #16]
 800de7a:	4658      	mov	r0, fp
 800de7c:	f000 fb48 	bl	800e510 <_Bfree>
 800de80:	9b04      	ldr	r3, [sp, #16]
 800de82:	4699      	mov	r9, r3
 800de84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de86:	1b1a      	subs	r2, r3, r4
 800de88:	d004      	beq.n	800de94 <_dtoa_r+0x78c>
 800de8a:	4649      	mov	r1, r9
 800de8c:	4658      	mov	r0, fp
 800de8e:	f000 fcb3 	bl	800e7f8 <__pow5mult>
 800de92:	4681      	mov	r9, r0
 800de94:	2101      	movs	r1, #1
 800de96:	4658      	mov	r0, fp
 800de98:	f000 fbee 	bl	800e678 <__i2b>
 800de9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de9e:	4604      	mov	r4, r0
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	f000 81cf 	beq.w	800e244 <_dtoa_r+0xb3c>
 800dea6:	461a      	mov	r2, r3
 800dea8:	4601      	mov	r1, r0
 800deaa:	4658      	mov	r0, fp
 800deac:	f000 fca4 	bl	800e7f8 <__pow5mult>
 800deb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800deb2:	2b01      	cmp	r3, #1
 800deb4:	4604      	mov	r4, r0
 800deb6:	f300 8095 	bgt.w	800dfe4 <_dtoa_r+0x8dc>
 800deba:	9b02      	ldr	r3, [sp, #8]
 800debc:	2b00      	cmp	r3, #0
 800debe:	f040 8087 	bne.w	800dfd0 <_dtoa_r+0x8c8>
 800dec2:	9b03      	ldr	r3, [sp, #12]
 800dec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dec8:	2b00      	cmp	r3, #0
 800deca:	f040 8089 	bne.w	800dfe0 <_dtoa_r+0x8d8>
 800dece:	9b03      	ldr	r3, [sp, #12]
 800ded0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ded4:	0d1b      	lsrs	r3, r3, #20
 800ded6:	051b      	lsls	r3, r3, #20
 800ded8:	b12b      	cbz	r3, 800dee6 <_dtoa_r+0x7de>
 800deda:	9b08      	ldr	r3, [sp, #32]
 800dedc:	3301      	adds	r3, #1
 800dede:	9308      	str	r3, [sp, #32]
 800dee0:	f108 0801 	add.w	r8, r8, #1
 800dee4:	2301      	movs	r3, #1
 800dee6:	930a      	str	r3, [sp, #40]	@ 0x28
 800dee8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800deea:	2b00      	cmp	r3, #0
 800deec:	f000 81b0 	beq.w	800e250 <_dtoa_r+0xb48>
 800def0:	6923      	ldr	r3, [r4, #16]
 800def2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800def6:	6918      	ldr	r0, [r3, #16]
 800def8:	f000 fb72 	bl	800e5e0 <__hi0bits>
 800defc:	f1c0 0020 	rsb	r0, r0, #32
 800df00:	9b08      	ldr	r3, [sp, #32]
 800df02:	4418      	add	r0, r3
 800df04:	f010 001f 	ands.w	r0, r0, #31
 800df08:	d077      	beq.n	800dffa <_dtoa_r+0x8f2>
 800df0a:	f1c0 0320 	rsb	r3, r0, #32
 800df0e:	2b04      	cmp	r3, #4
 800df10:	dd6b      	ble.n	800dfea <_dtoa_r+0x8e2>
 800df12:	9b08      	ldr	r3, [sp, #32]
 800df14:	f1c0 001c 	rsb	r0, r0, #28
 800df18:	4403      	add	r3, r0
 800df1a:	4480      	add	r8, r0
 800df1c:	4406      	add	r6, r0
 800df1e:	9308      	str	r3, [sp, #32]
 800df20:	f1b8 0f00 	cmp.w	r8, #0
 800df24:	dd05      	ble.n	800df32 <_dtoa_r+0x82a>
 800df26:	4649      	mov	r1, r9
 800df28:	4642      	mov	r2, r8
 800df2a:	4658      	mov	r0, fp
 800df2c:	f000 fcbe 	bl	800e8ac <__lshift>
 800df30:	4681      	mov	r9, r0
 800df32:	9b08      	ldr	r3, [sp, #32]
 800df34:	2b00      	cmp	r3, #0
 800df36:	dd05      	ble.n	800df44 <_dtoa_r+0x83c>
 800df38:	4621      	mov	r1, r4
 800df3a:	461a      	mov	r2, r3
 800df3c:	4658      	mov	r0, fp
 800df3e:	f000 fcb5 	bl	800e8ac <__lshift>
 800df42:	4604      	mov	r4, r0
 800df44:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800df46:	2b00      	cmp	r3, #0
 800df48:	d059      	beq.n	800dffe <_dtoa_r+0x8f6>
 800df4a:	4621      	mov	r1, r4
 800df4c:	4648      	mov	r0, r9
 800df4e:	f000 fd19 	bl	800e984 <__mcmp>
 800df52:	2800      	cmp	r0, #0
 800df54:	da53      	bge.n	800dffe <_dtoa_r+0x8f6>
 800df56:	1e7b      	subs	r3, r7, #1
 800df58:	9304      	str	r3, [sp, #16]
 800df5a:	4649      	mov	r1, r9
 800df5c:	2300      	movs	r3, #0
 800df5e:	220a      	movs	r2, #10
 800df60:	4658      	mov	r0, fp
 800df62:	f000 faf7 	bl	800e554 <__multadd>
 800df66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df68:	4681      	mov	r9, r0
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	f000 8172 	beq.w	800e254 <_dtoa_r+0xb4c>
 800df70:	2300      	movs	r3, #0
 800df72:	4629      	mov	r1, r5
 800df74:	220a      	movs	r2, #10
 800df76:	4658      	mov	r0, fp
 800df78:	f000 faec 	bl	800e554 <__multadd>
 800df7c:	9b00      	ldr	r3, [sp, #0]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	4605      	mov	r5, r0
 800df82:	dc67      	bgt.n	800e054 <_dtoa_r+0x94c>
 800df84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df86:	2b02      	cmp	r3, #2
 800df88:	dc41      	bgt.n	800e00e <_dtoa_r+0x906>
 800df8a:	e063      	b.n	800e054 <_dtoa_r+0x94c>
 800df8c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800df8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800df92:	e746      	b.n	800de22 <_dtoa_r+0x71a>
 800df94:	9b07      	ldr	r3, [sp, #28]
 800df96:	1e5c      	subs	r4, r3, #1
 800df98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df9a:	42a3      	cmp	r3, r4
 800df9c:	bfbf      	itttt	lt
 800df9e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dfa0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dfa2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800dfa4:	1ae3      	sublt	r3, r4, r3
 800dfa6:	bfb4      	ite	lt
 800dfa8:	18d2      	addlt	r2, r2, r3
 800dfaa:	1b1c      	subge	r4, r3, r4
 800dfac:	9b07      	ldr	r3, [sp, #28]
 800dfae:	bfbc      	itt	lt
 800dfb0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800dfb2:	2400      	movlt	r4, #0
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	bfb5      	itete	lt
 800dfb8:	eba8 0603 	sublt.w	r6, r8, r3
 800dfbc:	9b07      	ldrge	r3, [sp, #28]
 800dfbe:	2300      	movlt	r3, #0
 800dfc0:	4646      	movge	r6, r8
 800dfc2:	e730      	b.n	800de26 <_dtoa_r+0x71e>
 800dfc4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dfc6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800dfc8:	4646      	mov	r6, r8
 800dfca:	e735      	b.n	800de38 <_dtoa_r+0x730>
 800dfcc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dfce:	e75c      	b.n	800de8a <_dtoa_r+0x782>
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	e788      	b.n	800dee6 <_dtoa_r+0x7de>
 800dfd4:	3fe00000 	.word	0x3fe00000
 800dfd8:	40240000 	.word	0x40240000
 800dfdc:	40140000 	.word	0x40140000
 800dfe0:	9b02      	ldr	r3, [sp, #8]
 800dfe2:	e780      	b.n	800dee6 <_dtoa_r+0x7de>
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	930a      	str	r3, [sp, #40]	@ 0x28
 800dfe8:	e782      	b.n	800def0 <_dtoa_r+0x7e8>
 800dfea:	d099      	beq.n	800df20 <_dtoa_r+0x818>
 800dfec:	9a08      	ldr	r2, [sp, #32]
 800dfee:	331c      	adds	r3, #28
 800dff0:	441a      	add	r2, r3
 800dff2:	4498      	add	r8, r3
 800dff4:	441e      	add	r6, r3
 800dff6:	9208      	str	r2, [sp, #32]
 800dff8:	e792      	b.n	800df20 <_dtoa_r+0x818>
 800dffa:	4603      	mov	r3, r0
 800dffc:	e7f6      	b.n	800dfec <_dtoa_r+0x8e4>
 800dffe:	9b07      	ldr	r3, [sp, #28]
 800e000:	9704      	str	r7, [sp, #16]
 800e002:	2b00      	cmp	r3, #0
 800e004:	dc20      	bgt.n	800e048 <_dtoa_r+0x940>
 800e006:	9300      	str	r3, [sp, #0]
 800e008:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e00a:	2b02      	cmp	r3, #2
 800e00c:	dd1e      	ble.n	800e04c <_dtoa_r+0x944>
 800e00e:	9b00      	ldr	r3, [sp, #0]
 800e010:	2b00      	cmp	r3, #0
 800e012:	f47f aec0 	bne.w	800dd96 <_dtoa_r+0x68e>
 800e016:	4621      	mov	r1, r4
 800e018:	2205      	movs	r2, #5
 800e01a:	4658      	mov	r0, fp
 800e01c:	f000 fa9a 	bl	800e554 <__multadd>
 800e020:	4601      	mov	r1, r0
 800e022:	4604      	mov	r4, r0
 800e024:	4648      	mov	r0, r9
 800e026:	f000 fcad 	bl	800e984 <__mcmp>
 800e02a:	2800      	cmp	r0, #0
 800e02c:	f77f aeb3 	ble.w	800dd96 <_dtoa_r+0x68e>
 800e030:	4656      	mov	r6, sl
 800e032:	2331      	movs	r3, #49	@ 0x31
 800e034:	f806 3b01 	strb.w	r3, [r6], #1
 800e038:	9b04      	ldr	r3, [sp, #16]
 800e03a:	3301      	adds	r3, #1
 800e03c:	9304      	str	r3, [sp, #16]
 800e03e:	e6ae      	b.n	800dd9e <_dtoa_r+0x696>
 800e040:	9c07      	ldr	r4, [sp, #28]
 800e042:	9704      	str	r7, [sp, #16]
 800e044:	4625      	mov	r5, r4
 800e046:	e7f3      	b.n	800e030 <_dtoa_r+0x928>
 800e048:	9b07      	ldr	r3, [sp, #28]
 800e04a:	9300      	str	r3, [sp, #0]
 800e04c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e04e:	2b00      	cmp	r3, #0
 800e050:	f000 8104 	beq.w	800e25c <_dtoa_r+0xb54>
 800e054:	2e00      	cmp	r6, #0
 800e056:	dd05      	ble.n	800e064 <_dtoa_r+0x95c>
 800e058:	4629      	mov	r1, r5
 800e05a:	4632      	mov	r2, r6
 800e05c:	4658      	mov	r0, fp
 800e05e:	f000 fc25 	bl	800e8ac <__lshift>
 800e062:	4605      	mov	r5, r0
 800e064:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e066:	2b00      	cmp	r3, #0
 800e068:	d05a      	beq.n	800e120 <_dtoa_r+0xa18>
 800e06a:	6869      	ldr	r1, [r5, #4]
 800e06c:	4658      	mov	r0, fp
 800e06e:	f000 fa0f 	bl	800e490 <_Balloc>
 800e072:	4606      	mov	r6, r0
 800e074:	b928      	cbnz	r0, 800e082 <_dtoa_r+0x97a>
 800e076:	4b84      	ldr	r3, [pc, #528]	@ (800e288 <_dtoa_r+0xb80>)
 800e078:	4602      	mov	r2, r0
 800e07a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e07e:	f7ff bb5a 	b.w	800d736 <_dtoa_r+0x2e>
 800e082:	692a      	ldr	r2, [r5, #16]
 800e084:	3202      	adds	r2, #2
 800e086:	0092      	lsls	r2, r2, #2
 800e088:	f105 010c 	add.w	r1, r5, #12
 800e08c:	300c      	adds	r0, #12
 800e08e:	f7ff faa2 	bl	800d5d6 <memcpy>
 800e092:	2201      	movs	r2, #1
 800e094:	4631      	mov	r1, r6
 800e096:	4658      	mov	r0, fp
 800e098:	f000 fc08 	bl	800e8ac <__lshift>
 800e09c:	f10a 0301 	add.w	r3, sl, #1
 800e0a0:	9307      	str	r3, [sp, #28]
 800e0a2:	9b00      	ldr	r3, [sp, #0]
 800e0a4:	4453      	add	r3, sl
 800e0a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e0a8:	9b02      	ldr	r3, [sp, #8]
 800e0aa:	f003 0301 	and.w	r3, r3, #1
 800e0ae:	462f      	mov	r7, r5
 800e0b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800e0b2:	4605      	mov	r5, r0
 800e0b4:	9b07      	ldr	r3, [sp, #28]
 800e0b6:	4621      	mov	r1, r4
 800e0b8:	3b01      	subs	r3, #1
 800e0ba:	4648      	mov	r0, r9
 800e0bc:	9300      	str	r3, [sp, #0]
 800e0be:	f7ff fa98 	bl	800d5f2 <quorem>
 800e0c2:	4639      	mov	r1, r7
 800e0c4:	9002      	str	r0, [sp, #8]
 800e0c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e0ca:	4648      	mov	r0, r9
 800e0cc:	f000 fc5a 	bl	800e984 <__mcmp>
 800e0d0:	462a      	mov	r2, r5
 800e0d2:	9008      	str	r0, [sp, #32]
 800e0d4:	4621      	mov	r1, r4
 800e0d6:	4658      	mov	r0, fp
 800e0d8:	f000 fc70 	bl	800e9bc <__mdiff>
 800e0dc:	68c2      	ldr	r2, [r0, #12]
 800e0de:	4606      	mov	r6, r0
 800e0e0:	bb02      	cbnz	r2, 800e124 <_dtoa_r+0xa1c>
 800e0e2:	4601      	mov	r1, r0
 800e0e4:	4648      	mov	r0, r9
 800e0e6:	f000 fc4d 	bl	800e984 <__mcmp>
 800e0ea:	4602      	mov	r2, r0
 800e0ec:	4631      	mov	r1, r6
 800e0ee:	4658      	mov	r0, fp
 800e0f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800e0f2:	f000 fa0d 	bl	800e510 <_Bfree>
 800e0f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e0fa:	9e07      	ldr	r6, [sp, #28]
 800e0fc:	ea43 0102 	orr.w	r1, r3, r2
 800e100:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e102:	4319      	orrs	r1, r3
 800e104:	d110      	bne.n	800e128 <_dtoa_r+0xa20>
 800e106:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e10a:	d029      	beq.n	800e160 <_dtoa_r+0xa58>
 800e10c:	9b08      	ldr	r3, [sp, #32]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	dd02      	ble.n	800e118 <_dtoa_r+0xa10>
 800e112:	9b02      	ldr	r3, [sp, #8]
 800e114:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e118:	9b00      	ldr	r3, [sp, #0]
 800e11a:	f883 8000 	strb.w	r8, [r3]
 800e11e:	e63f      	b.n	800dda0 <_dtoa_r+0x698>
 800e120:	4628      	mov	r0, r5
 800e122:	e7bb      	b.n	800e09c <_dtoa_r+0x994>
 800e124:	2201      	movs	r2, #1
 800e126:	e7e1      	b.n	800e0ec <_dtoa_r+0x9e4>
 800e128:	9b08      	ldr	r3, [sp, #32]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	db04      	blt.n	800e138 <_dtoa_r+0xa30>
 800e12e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e130:	430b      	orrs	r3, r1
 800e132:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e134:	430b      	orrs	r3, r1
 800e136:	d120      	bne.n	800e17a <_dtoa_r+0xa72>
 800e138:	2a00      	cmp	r2, #0
 800e13a:	dded      	ble.n	800e118 <_dtoa_r+0xa10>
 800e13c:	4649      	mov	r1, r9
 800e13e:	2201      	movs	r2, #1
 800e140:	4658      	mov	r0, fp
 800e142:	f000 fbb3 	bl	800e8ac <__lshift>
 800e146:	4621      	mov	r1, r4
 800e148:	4681      	mov	r9, r0
 800e14a:	f000 fc1b 	bl	800e984 <__mcmp>
 800e14e:	2800      	cmp	r0, #0
 800e150:	dc03      	bgt.n	800e15a <_dtoa_r+0xa52>
 800e152:	d1e1      	bne.n	800e118 <_dtoa_r+0xa10>
 800e154:	f018 0f01 	tst.w	r8, #1
 800e158:	d0de      	beq.n	800e118 <_dtoa_r+0xa10>
 800e15a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e15e:	d1d8      	bne.n	800e112 <_dtoa_r+0xa0a>
 800e160:	9a00      	ldr	r2, [sp, #0]
 800e162:	2339      	movs	r3, #57	@ 0x39
 800e164:	7013      	strb	r3, [r2, #0]
 800e166:	4633      	mov	r3, r6
 800e168:	461e      	mov	r6, r3
 800e16a:	3b01      	subs	r3, #1
 800e16c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e170:	2a39      	cmp	r2, #57	@ 0x39
 800e172:	d052      	beq.n	800e21a <_dtoa_r+0xb12>
 800e174:	3201      	adds	r2, #1
 800e176:	701a      	strb	r2, [r3, #0]
 800e178:	e612      	b.n	800dda0 <_dtoa_r+0x698>
 800e17a:	2a00      	cmp	r2, #0
 800e17c:	dd07      	ble.n	800e18e <_dtoa_r+0xa86>
 800e17e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e182:	d0ed      	beq.n	800e160 <_dtoa_r+0xa58>
 800e184:	9a00      	ldr	r2, [sp, #0]
 800e186:	f108 0301 	add.w	r3, r8, #1
 800e18a:	7013      	strb	r3, [r2, #0]
 800e18c:	e608      	b.n	800dda0 <_dtoa_r+0x698>
 800e18e:	9b07      	ldr	r3, [sp, #28]
 800e190:	9a07      	ldr	r2, [sp, #28]
 800e192:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e196:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e198:	4293      	cmp	r3, r2
 800e19a:	d028      	beq.n	800e1ee <_dtoa_r+0xae6>
 800e19c:	4649      	mov	r1, r9
 800e19e:	2300      	movs	r3, #0
 800e1a0:	220a      	movs	r2, #10
 800e1a2:	4658      	mov	r0, fp
 800e1a4:	f000 f9d6 	bl	800e554 <__multadd>
 800e1a8:	42af      	cmp	r7, r5
 800e1aa:	4681      	mov	r9, r0
 800e1ac:	f04f 0300 	mov.w	r3, #0
 800e1b0:	f04f 020a 	mov.w	r2, #10
 800e1b4:	4639      	mov	r1, r7
 800e1b6:	4658      	mov	r0, fp
 800e1b8:	d107      	bne.n	800e1ca <_dtoa_r+0xac2>
 800e1ba:	f000 f9cb 	bl	800e554 <__multadd>
 800e1be:	4607      	mov	r7, r0
 800e1c0:	4605      	mov	r5, r0
 800e1c2:	9b07      	ldr	r3, [sp, #28]
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	9307      	str	r3, [sp, #28]
 800e1c8:	e774      	b.n	800e0b4 <_dtoa_r+0x9ac>
 800e1ca:	f000 f9c3 	bl	800e554 <__multadd>
 800e1ce:	4629      	mov	r1, r5
 800e1d0:	4607      	mov	r7, r0
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	220a      	movs	r2, #10
 800e1d6:	4658      	mov	r0, fp
 800e1d8:	f000 f9bc 	bl	800e554 <__multadd>
 800e1dc:	4605      	mov	r5, r0
 800e1de:	e7f0      	b.n	800e1c2 <_dtoa_r+0xaba>
 800e1e0:	9b00      	ldr	r3, [sp, #0]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	bfcc      	ite	gt
 800e1e6:	461e      	movgt	r6, r3
 800e1e8:	2601      	movle	r6, #1
 800e1ea:	4456      	add	r6, sl
 800e1ec:	2700      	movs	r7, #0
 800e1ee:	4649      	mov	r1, r9
 800e1f0:	2201      	movs	r2, #1
 800e1f2:	4658      	mov	r0, fp
 800e1f4:	f000 fb5a 	bl	800e8ac <__lshift>
 800e1f8:	4621      	mov	r1, r4
 800e1fa:	4681      	mov	r9, r0
 800e1fc:	f000 fbc2 	bl	800e984 <__mcmp>
 800e200:	2800      	cmp	r0, #0
 800e202:	dcb0      	bgt.n	800e166 <_dtoa_r+0xa5e>
 800e204:	d102      	bne.n	800e20c <_dtoa_r+0xb04>
 800e206:	f018 0f01 	tst.w	r8, #1
 800e20a:	d1ac      	bne.n	800e166 <_dtoa_r+0xa5e>
 800e20c:	4633      	mov	r3, r6
 800e20e:	461e      	mov	r6, r3
 800e210:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e214:	2a30      	cmp	r2, #48	@ 0x30
 800e216:	d0fa      	beq.n	800e20e <_dtoa_r+0xb06>
 800e218:	e5c2      	b.n	800dda0 <_dtoa_r+0x698>
 800e21a:	459a      	cmp	sl, r3
 800e21c:	d1a4      	bne.n	800e168 <_dtoa_r+0xa60>
 800e21e:	9b04      	ldr	r3, [sp, #16]
 800e220:	3301      	adds	r3, #1
 800e222:	9304      	str	r3, [sp, #16]
 800e224:	2331      	movs	r3, #49	@ 0x31
 800e226:	f88a 3000 	strb.w	r3, [sl]
 800e22a:	e5b9      	b.n	800dda0 <_dtoa_r+0x698>
 800e22c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e22e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e28c <_dtoa_r+0xb84>
 800e232:	b11b      	cbz	r3, 800e23c <_dtoa_r+0xb34>
 800e234:	f10a 0308 	add.w	r3, sl, #8
 800e238:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e23a:	6013      	str	r3, [r2, #0]
 800e23c:	4650      	mov	r0, sl
 800e23e:	b019      	add	sp, #100	@ 0x64
 800e240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e246:	2b01      	cmp	r3, #1
 800e248:	f77f ae37 	ble.w	800deba <_dtoa_r+0x7b2>
 800e24c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e24e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e250:	2001      	movs	r0, #1
 800e252:	e655      	b.n	800df00 <_dtoa_r+0x7f8>
 800e254:	9b00      	ldr	r3, [sp, #0]
 800e256:	2b00      	cmp	r3, #0
 800e258:	f77f aed6 	ble.w	800e008 <_dtoa_r+0x900>
 800e25c:	4656      	mov	r6, sl
 800e25e:	4621      	mov	r1, r4
 800e260:	4648      	mov	r0, r9
 800e262:	f7ff f9c6 	bl	800d5f2 <quorem>
 800e266:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e26a:	f806 8b01 	strb.w	r8, [r6], #1
 800e26e:	9b00      	ldr	r3, [sp, #0]
 800e270:	eba6 020a 	sub.w	r2, r6, sl
 800e274:	4293      	cmp	r3, r2
 800e276:	ddb3      	ble.n	800e1e0 <_dtoa_r+0xad8>
 800e278:	4649      	mov	r1, r9
 800e27a:	2300      	movs	r3, #0
 800e27c:	220a      	movs	r2, #10
 800e27e:	4658      	mov	r0, fp
 800e280:	f000 f968 	bl	800e554 <__multadd>
 800e284:	4681      	mov	r9, r0
 800e286:	e7ea      	b.n	800e25e <_dtoa_r+0xb56>
 800e288:	0800f360 	.word	0x0800f360
 800e28c:	0800f2e4 	.word	0x0800f2e4

0800e290 <_free_r>:
 800e290:	b538      	push	{r3, r4, r5, lr}
 800e292:	4605      	mov	r5, r0
 800e294:	2900      	cmp	r1, #0
 800e296:	d041      	beq.n	800e31c <_free_r+0x8c>
 800e298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e29c:	1f0c      	subs	r4, r1, #4
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	bfb8      	it	lt
 800e2a2:	18e4      	addlt	r4, r4, r3
 800e2a4:	f000 f8e8 	bl	800e478 <__malloc_lock>
 800e2a8:	4a1d      	ldr	r2, [pc, #116]	@ (800e320 <_free_r+0x90>)
 800e2aa:	6813      	ldr	r3, [r2, #0]
 800e2ac:	b933      	cbnz	r3, 800e2bc <_free_r+0x2c>
 800e2ae:	6063      	str	r3, [r4, #4]
 800e2b0:	6014      	str	r4, [r2, #0]
 800e2b2:	4628      	mov	r0, r5
 800e2b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2b8:	f000 b8e4 	b.w	800e484 <__malloc_unlock>
 800e2bc:	42a3      	cmp	r3, r4
 800e2be:	d908      	bls.n	800e2d2 <_free_r+0x42>
 800e2c0:	6820      	ldr	r0, [r4, #0]
 800e2c2:	1821      	adds	r1, r4, r0
 800e2c4:	428b      	cmp	r3, r1
 800e2c6:	bf01      	itttt	eq
 800e2c8:	6819      	ldreq	r1, [r3, #0]
 800e2ca:	685b      	ldreq	r3, [r3, #4]
 800e2cc:	1809      	addeq	r1, r1, r0
 800e2ce:	6021      	streq	r1, [r4, #0]
 800e2d0:	e7ed      	b.n	800e2ae <_free_r+0x1e>
 800e2d2:	461a      	mov	r2, r3
 800e2d4:	685b      	ldr	r3, [r3, #4]
 800e2d6:	b10b      	cbz	r3, 800e2dc <_free_r+0x4c>
 800e2d8:	42a3      	cmp	r3, r4
 800e2da:	d9fa      	bls.n	800e2d2 <_free_r+0x42>
 800e2dc:	6811      	ldr	r1, [r2, #0]
 800e2de:	1850      	adds	r0, r2, r1
 800e2e0:	42a0      	cmp	r0, r4
 800e2e2:	d10b      	bne.n	800e2fc <_free_r+0x6c>
 800e2e4:	6820      	ldr	r0, [r4, #0]
 800e2e6:	4401      	add	r1, r0
 800e2e8:	1850      	adds	r0, r2, r1
 800e2ea:	4283      	cmp	r3, r0
 800e2ec:	6011      	str	r1, [r2, #0]
 800e2ee:	d1e0      	bne.n	800e2b2 <_free_r+0x22>
 800e2f0:	6818      	ldr	r0, [r3, #0]
 800e2f2:	685b      	ldr	r3, [r3, #4]
 800e2f4:	6053      	str	r3, [r2, #4]
 800e2f6:	4408      	add	r0, r1
 800e2f8:	6010      	str	r0, [r2, #0]
 800e2fa:	e7da      	b.n	800e2b2 <_free_r+0x22>
 800e2fc:	d902      	bls.n	800e304 <_free_r+0x74>
 800e2fe:	230c      	movs	r3, #12
 800e300:	602b      	str	r3, [r5, #0]
 800e302:	e7d6      	b.n	800e2b2 <_free_r+0x22>
 800e304:	6820      	ldr	r0, [r4, #0]
 800e306:	1821      	adds	r1, r4, r0
 800e308:	428b      	cmp	r3, r1
 800e30a:	bf04      	itt	eq
 800e30c:	6819      	ldreq	r1, [r3, #0]
 800e30e:	685b      	ldreq	r3, [r3, #4]
 800e310:	6063      	str	r3, [r4, #4]
 800e312:	bf04      	itt	eq
 800e314:	1809      	addeq	r1, r1, r0
 800e316:	6021      	streq	r1, [r4, #0]
 800e318:	6054      	str	r4, [r2, #4]
 800e31a:	e7ca      	b.n	800e2b2 <_free_r+0x22>
 800e31c:	bd38      	pop	{r3, r4, r5, pc}
 800e31e:	bf00      	nop
 800e320:	20001054 	.word	0x20001054

0800e324 <malloc>:
 800e324:	4b02      	ldr	r3, [pc, #8]	@ (800e330 <malloc+0xc>)
 800e326:	4601      	mov	r1, r0
 800e328:	6818      	ldr	r0, [r3, #0]
 800e32a:	f000 b825 	b.w	800e378 <_malloc_r>
 800e32e:	bf00      	nop
 800e330:	20000170 	.word	0x20000170

0800e334 <sbrk_aligned>:
 800e334:	b570      	push	{r4, r5, r6, lr}
 800e336:	4e0f      	ldr	r6, [pc, #60]	@ (800e374 <sbrk_aligned+0x40>)
 800e338:	460c      	mov	r4, r1
 800e33a:	6831      	ldr	r1, [r6, #0]
 800e33c:	4605      	mov	r5, r0
 800e33e:	b911      	cbnz	r1, 800e346 <sbrk_aligned+0x12>
 800e340:	f000 fe9a 	bl	800f078 <_sbrk_r>
 800e344:	6030      	str	r0, [r6, #0]
 800e346:	4621      	mov	r1, r4
 800e348:	4628      	mov	r0, r5
 800e34a:	f000 fe95 	bl	800f078 <_sbrk_r>
 800e34e:	1c43      	adds	r3, r0, #1
 800e350:	d103      	bne.n	800e35a <sbrk_aligned+0x26>
 800e352:	f04f 34ff 	mov.w	r4, #4294967295
 800e356:	4620      	mov	r0, r4
 800e358:	bd70      	pop	{r4, r5, r6, pc}
 800e35a:	1cc4      	adds	r4, r0, #3
 800e35c:	f024 0403 	bic.w	r4, r4, #3
 800e360:	42a0      	cmp	r0, r4
 800e362:	d0f8      	beq.n	800e356 <sbrk_aligned+0x22>
 800e364:	1a21      	subs	r1, r4, r0
 800e366:	4628      	mov	r0, r5
 800e368:	f000 fe86 	bl	800f078 <_sbrk_r>
 800e36c:	3001      	adds	r0, #1
 800e36e:	d1f2      	bne.n	800e356 <sbrk_aligned+0x22>
 800e370:	e7ef      	b.n	800e352 <sbrk_aligned+0x1e>
 800e372:	bf00      	nop
 800e374:	20001050 	.word	0x20001050

0800e378 <_malloc_r>:
 800e378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e37c:	1ccd      	adds	r5, r1, #3
 800e37e:	f025 0503 	bic.w	r5, r5, #3
 800e382:	3508      	adds	r5, #8
 800e384:	2d0c      	cmp	r5, #12
 800e386:	bf38      	it	cc
 800e388:	250c      	movcc	r5, #12
 800e38a:	2d00      	cmp	r5, #0
 800e38c:	4606      	mov	r6, r0
 800e38e:	db01      	blt.n	800e394 <_malloc_r+0x1c>
 800e390:	42a9      	cmp	r1, r5
 800e392:	d904      	bls.n	800e39e <_malloc_r+0x26>
 800e394:	230c      	movs	r3, #12
 800e396:	6033      	str	r3, [r6, #0]
 800e398:	2000      	movs	r0, #0
 800e39a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e39e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e474 <_malloc_r+0xfc>
 800e3a2:	f000 f869 	bl	800e478 <__malloc_lock>
 800e3a6:	f8d8 3000 	ldr.w	r3, [r8]
 800e3aa:	461c      	mov	r4, r3
 800e3ac:	bb44      	cbnz	r4, 800e400 <_malloc_r+0x88>
 800e3ae:	4629      	mov	r1, r5
 800e3b0:	4630      	mov	r0, r6
 800e3b2:	f7ff ffbf 	bl	800e334 <sbrk_aligned>
 800e3b6:	1c43      	adds	r3, r0, #1
 800e3b8:	4604      	mov	r4, r0
 800e3ba:	d158      	bne.n	800e46e <_malloc_r+0xf6>
 800e3bc:	f8d8 4000 	ldr.w	r4, [r8]
 800e3c0:	4627      	mov	r7, r4
 800e3c2:	2f00      	cmp	r7, #0
 800e3c4:	d143      	bne.n	800e44e <_malloc_r+0xd6>
 800e3c6:	2c00      	cmp	r4, #0
 800e3c8:	d04b      	beq.n	800e462 <_malloc_r+0xea>
 800e3ca:	6823      	ldr	r3, [r4, #0]
 800e3cc:	4639      	mov	r1, r7
 800e3ce:	4630      	mov	r0, r6
 800e3d0:	eb04 0903 	add.w	r9, r4, r3
 800e3d4:	f000 fe50 	bl	800f078 <_sbrk_r>
 800e3d8:	4581      	cmp	r9, r0
 800e3da:	d142      	bne.n	800e462 <_malloc_r+0xea>
 800e3dc:	6821      	ldr	r1, [r4, #0]
 800e3de:	1a6d      	subs	r5, r5, r1
 800e3e0:	4629      	mov	r1, r5
 800e3e2:	4630      	mov	r0, r6
 800e3e4:	f7ff ffa6 	bl	800e334 <sbrk_aligned>
 800e3e8:	3001      	adds	r0, #1
 800e3ea:	d03a      	beq.n	800e462 <_malloc_r+0xea>
 800e3ec:	6823      	ldr	r3, [r4, #0]
 800e3ee:	442b      	add	r3, r5
 800e3f0:	6023      	str	r3, [r4, #0]
 800e3f2:	f8d8 3000 	ldr.w	r3, [r8]
 800e3f6:	685a      	ldr	r2, [r3, #4]
 800e3f8:	bb62      	cbnz	r2, 800e454 <_malloc_r+0xdc>
 800e3fa:	f8c8 7000 	str.w	r7, [r8]
 800e3fe:	e00f      	b.n	800e420 <_malloc_r+0xa8>
 800e400:	6822      	ldr	r2, [r4, #0]
 800e402:	1b52      	subs	r2, r2, r5
 800e404:	d420      	bmi.n	800e448 <_malloc_r+0xd0>
 800e406:	2a0b      	cmp	r2, #11
 800e408:	d917      	bls.n	800e43a <_malloc_r+0xc2>
 800e40a:	1961      	adds	r1, r4, r5
 800e40c:	42a3      	cmp	r3, r4
 800e40e:	6025      	str	r5, [r4, #0]
 800e410:	bf18      	it	ne
 800e412:	6059      	strne	r1, [r3, #4]
 800e414:	6863      	ldr	r3, [r4, #4]
 800e416:	bf08      	it	eq
 800e418:	f8c8 1000 	streq.w	r1, [r8]
 800e41c:	5162      	str	r2, [r4, r5]
 800e41e:	604b      	str	r3, [r1, #4]
 800e420:	4630      	mov	r0, r6
 800e422:	f000 f82f 	bl	800e484 <__malloc_unlock>
 800e426:	f104 000b 	add.w	r0, r4, #11
 800e42a:	1d23      	adds	r3, r4, #4
 800e42c:	f020 0007 	bic.w	r0, r0, #7
 800e430:	1ac2      	subs	r2, r0, r3
 800e432:	bf1c      	itt	ne
 800e434:	1a1b      	subne	r3, r3, r0
 800e436:	50a3      	strne	r3, [r4, r2]
 800e438:	e7af      	b.n	800e39a <_malloc_r+0x22>
 800e43a:	6862      	ldr	r2, [r4, #4]
 800e43c:	42a3      	cmp	r3, r4
 800e43e:	bf0c      	ite	eq
 800e440:	f8c8 2000 	streq.w	r2, [r8]
 800e444:	605a      	strne	r2, [r3, #4]
 800e446:	e7eb      	b.n	800e420 <_malloc_r+0xa8>
 800e448:	4623      	mov	r3, r4
 800e44a:	6864      	ldr	r4, [r4, #4]
 800e44c:	e7ae      	b.n	800e3ac <_malloc_r+0x34>
 800e44e:	463c      	mov	r4, r7
 800e450:	687f      	ldr	r7, [r7, #4]
 800e452:	e7b6      	b.n	800e3c2 <_malloc_r+0x4a>
 800e454:	461a      	mov	r2, r3
 800e456:	685b      	ldr	r3, [r3, #4]
 800e458:	42a3      	cmp	r3, r4
 800e45a:	d1fb      	bne.n	800e454 <_malloc_r+0xdc>
 800e45c:	2300      	movs	r3, #0
 800e45e:	6053      	str	r3, [r2, #4]
 800e460:	e7de      	b.n	800e420 <_malloc_r+0xa8>
 800e462:	230c      	movs	r3, #12
 800e464:	6033      	str	r3, [r6, #0]
 800e466:	4630      	mov	r0, r6
 800e468:	f000 f80c 	bl	800e484 <__malloc_unlock>
 800e46c:	e794      	b.n	800e398 <_malloc_r+0x20>
 800e46e:	6005      	str	r5, [r0, #0]
 800e470:	e7d6      	b.n	800e420 <_malloc_r+0xa8>
 800e472:	bf00      	nop
 800e474:	20001054 	.word	0x20001054

0800e478 <__malloc_lock>:
 800e478:	4801      	ldr	r0, [pc, #4]	@ (800e480 <__malloc_lock+0x8>)
 800e47a:	f7ff b8aa 	b.w	800d5d2 <__retarget_lock_acquire_recursive>
 800e47e:	bf00      	nop
 800e480:	2000104c 	.word	0x2000104c

0800e484 <__malloc_unlock>:
 800e484:	4801      	ldr	r0, [pc, #4]	@ (800e48c <__malloc_unlock+0x8>)
 800e486:	f7ff b8a5 	b.w	800d5d4 <__retarget_lock_release_recursive>
 800e48a:	bf00      	nop
 800e48c:	2000104c 	.word	0x2000104c

0800e490 <_Balloc>:
 800e490:	b570      	push	{r4, r5, r6, lr}
 800e492:	69c6      	ldr	r6, [r0, #28]
 800e494:	4604      	mov	r4, r0
 800e496:	460d      	mov	r5, r1
 800e498:	b976      	cbnz	r6, 800e4b8 <_Balloc+0x28>
 800e49a:	2010      	movs	r0, #16
 800e49c:	f7ff ff42 	bl	800e324 <malloc>
 800e4a0:	4602      	mov	r2, r0
 800e4a2:	61e0      	str	r0, [r4, #28]
 800e4a4:	b920      	cbnz	r0, 800e4b0 <_Balloc+0x20>
 800e4a6:	4b18      	ldr	r3, [pc, #96]	@ (800e508 <_Balloc+0x78>)
 800e4a8:	4818      	ldr	r0, [pc, #96]	@ (800e50c <_Balloc+0x7c>)
 800e4aa:	216b      	movs	r1, #107	@ 0x6b
 800e4ac:	f000 fdf4 	bl	800f098 <__assert_func>
 800e4b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e4b4:	6006      	str	r6, [r0, #0]
 800e4b6:	60c6      	str	r6, [r0, #12]
 800e4b8:	69e6      	ldr	r6, [r4, #28]
 800e4ba:	68f3      	ldr	r3, [r6, #12]
 800e4bc:	b183      	cbz	r3, 800e4e0 <_Balloc+0x50>
 800e4be:	69e3      	ldr	r3, [r4, #28]
 800e4c0:	68db      	ldr	r3, [r3, #12]
 800e4c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e4c6:	b9b8      	cbnz	r0, 800e4f8 <_Balloc+0x68>
 800e4c8:	2101      	movs	r1, #1
 800e4ca:	fa01 f605 	lsl.w	r6, r1, r5
 800e4ce:	1d72      	adds	r2, r6, #5
 800e4d0:	0092      	lsls	r2, r2, #2
 800e4d2:	4620      	mov	r0, r4
 800e4d4:	f000 fdfe 	bl	800f0d4 <_calloc_r>
 800e4d8:	b160      	cbz	r0, 800e4f4 <_Balloc+0x64>
 800e4da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e4de:	e00e      	b.n	800e4fe <_Balloc+0x6e>
 800e4e0:	2221      	movs	r2, #33	@ 0x21
 800e4e2:	2104      	movs	r1, #4
 800e4e4:	4620      	mov	r0, r4
 800e4e6:	f000 fdf5 	bl	800f0d4 <_calloc_r>
 800e4ea:	69e3      	ldr	r3, [r4, #28]
 800e4ec:	60f0      	str	r0, [r6, #12]
 800e4ee:	68db      	ldr	r3, [r3, #12]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d1e4      	bne.n	800e4be <_Balloc+0x2e>
 800e4f4:	2000      	movs	r0, #0
 800e4f6:	bd70      	pop	{r4, r5, r6, pc}
 800e4f8:	6802      	ldr	r2, [r0, #0]
 800e4fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e4fe:	2300      	movs	r3, #0
 800e500:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e504:	e7f7      	b.n	800e4f6 <_Balloc+0x66>
 800e506:	bf00      	nop
 800e508:	0800f2f1 	.word	0x0800f2f1
 800e50c:	0800f371 	.word	0x0800f371

0800e510 <_Bfree>:
 800e510:	b570      	push	{r4, r5, r6, lr}
 800e512:	69c6      	ldr	r6, [r0, #28]
 800e514:	4605      	mov	r5, r0
 800e516:	460c      	mov	r4, r1
 800e518:	b976      	cbnz	r6, 800e538 <_Bfree+0x28>
 800e51a:	2010      	movs	r0, #16
 800e51c:	f7ff ff02 	bl	800e324 <malloc>
 800e520:	4602      	mov	r2, r0
 800e522:	61e8      	str	r0, [r5, #28]
 800e524:	b920      	cbnz	r0, 800e530 <_Bfree+0x20>
 800e526:	4b09      	ldr	r3, [pc, #36]	@ (800e54c <_Bfree+0x3c>)
 800e528:	4809      	ldr	r0, [pc, #36]	@ (800e550 <_Bfree+0x40>)
 800e52a:	218f      	movs	r1, #143	@ 0x8f
 800e52c:	f000 fdb4 	bl	800f098 <__assert_func>
 800e530:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e534:	6006      	str	r6, [r0, #0]
 800e536:	60c6      	str	r6, [r0, #12]
 800e538:	b13c      	cbz	r4, 800e54a <_Bfree+0x3a>
 800e53a:	69eb      	ldr	r3, [r5, #28]
 800e53c:	6862      	ldr	r2, [r4, #4]
 800e53e:	68db      	ldr	r3, [r3, #12]
 800e540:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e544:	6021      	str	r1, [r4, #0]
 800e546:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e54a:	bd70      	pop	{r4, r5, r6, pc}
 800e54c:	0800f2f1 	.word	0x0800f2f1
 800e550:	0800f371 	.word	0x0800f371

0800e554 <__multadd>:
 800e554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e558:	690d      	ldr	r5, [r1, #16]
 800e55a:	4607      	mov	r7, r0
 800e55c:	460c      	mov	r4, r1
 800e55e:	461e      	mov	r6, r3
 800e560:	f101 0c14 	add.w	ip, r1, #20
 800e564:	2000      	movs	r0, #0
 800e566:	f8dc 3000 	ldr.w	r3, [ip]
 800e56a:	b299      	uxth	r1, r3
 800e56c:	fb02 6101 	mla	r1, r2, r1, r6
 800e570:	0c1e      	lsrs	r6, r3, #16
 800e572:	0c0b      	lsrs	r3, r1, #16
 800e574:	fb02 3306 	mla	r3, r2, r6, r3
 800e578:	b289      	uxth	r1, r1
 800e57a:	3001      	adds	r0, #1
 800e57c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e580:	4285      	cmp	r5, r0
 800e582:	f84c 1b04 	str.w	r1, [ip], #4
 800e586:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e58a:	dcec      	bgt.n	800e566 <__multadd+0x12>
 800e58c:	b30e      	cbz	r6, 800e5d2 <__multadd+0x7e>
 800e58e:	68a3      	ldr	r3, [r4, #8]
 800e590:	42ab      	cmp	r3, r5
 800e592:	dc19      	bgt.n	800e5c8 <__multadd+0x74>
 800e594:	6861      	ldr	r1, [r4, #4]
 800e596:	4638      	mov	r0, r7
 800e598:	3101      	adds	r1, #1
 800e59a:	f7ff ff79 	bl	800e490 <_Balloc>
 800e59e:	4680      	mov	r8, r0
 800e5a0:	b928      	cbnz	r0, 800e5ae <__multadd+0x5a>
 800e5a2:	4602      	mov	r2, r0
 800e5a4:	4b0c      	ldr	r3, [pc, #48]	@ (800e5d8 <__multadd+0x84>)
 800e5a6:	480d      	ldr	r0, [pc, #52]	@ (800e5dc <__multadd+0x88>)
 800e5a8:	21ba      	movs	r1, #186	@ 0xba
 800e5aa:	f000 fd75 	bl	800f098 <__assert_func>
 800e5ae:	6922      	ldr	r2, [r4, #16]
 800e5b0:	3202      	adds	r2, #2
 800e5b2:	f104 010c 	add.w	r1, r4, #12
 800e5b6:	0092      	lsls	r2, r2, #2
 800e5b8:	300c      	adds	r0, #12
 800e5ba:	f7ff f80c 	bl	800d5d6 <memcpy>
 800e5be:	4621      	mov	r1, r4
 800e5c0:	4638      	mov	r0, r7
 800e5c2:	f7ff ffa5 	bl	800e510 <_Bfree>
 800e5c6:	4644      	mov	r4, r8
 800e5c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e5cc:	3501      	adds	r5, #1
 800e5ce:	615e      	str	r6, [r3, #20]
 800e5d0:	6125      	str	r5, [r4, #16]
 800e5d2:	4620      	mov	r0, r4
 800e5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5d8:	0800f360 	.word	0x0800f360
 800e5dc:	0800f371 	.word	0x0800f371

0800e5e0 <__hi0bits>:
 800e5e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	bf36      	itet	cc
 800e5e8:	0403      	lslcc	r3, r0, #16
 800e5ea:	2000      	movcs	r0, #0
 800e5ec:	2010      	movcc	r0, #16
 800e5ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e5f2:	bf3c      	itt	cc
 800e5f4:	021b      	lslcc	r3, r3, #8
 800e5f6:	3008      	addcc	r0, #8
 800e5f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e5fc:	bf3c      	itt	cc
 800e5fe:	011b      	lslcc	r3, r3, #4
 800e600:	3004      	addcc	r0, #4
 800e602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e606:	bf3c      	itt	cc
 800e608:	009b      	lslcc	r3, r3, #2
 800e60a:	3002      	addcc	r0, #2
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	db05      	blt.n	800e61c <__hi0bits+0x3c>
 800e610:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e614:	f100 0001 	add.w	r0, r0, #1
 800e618:	bf08      	it	eq
 800e61a:	2020      	moveq	r0, #32
 800e61c:	4770      	bx	lr

0800e61e <__lo0bits>:
 800e61e:	6803      	ldr	r3, [r0, #0]
 800e620:	4602      	mov	r2, r0
 800e622:	f013 0007 	ands.w	r0, r3, #7
 800e626:	d00b      	beq.n	800e640 <__lo0bits+0x22>
 800e628:	07d9      	lsls	r1, r3, #31
 800e62a:	d421      	bmi.n	800e670 <__lo0bits+0x52>
 800e62c:	0798      	lsls	r0, r3, #30
 800e62e:	bf49      	itett	mi
 800e630:	085b      	lsrmi	r3, r3, #1
 800e632:	089b      	lsrpl	r3, r3, #2
 800e634:	2001      	movmi	r0, #1
 800e636:	6013      	strmi	r3, [r2, #0]
 800e638:	bf5c      	itt	pl
 800e63a:	6013      	strpl	r3, [r2, #0]
 800e63c:	2002      	movpl	r0, #2
 800e63e:	4770      	bx	lr
 800e640:	b299      	uxth	r1, r3
 800e642:	b909      	cbnz	r1, 800e648 <__lo0bits+0x2a>
 800e644:	0c1b      	lsrs	r3, r3, #16
 800e646:	2010      	movs	r0, #16
 800e648:	b2d9      	uxtb	r1, r3
 800e64a:	b909      	cbnz	r1, 800e650 <__lo0bits+0x32>
 800e64c:	3008      	adds	r0, #8
 800e64e:	0a1b      	lsrs	r3, r3, #8
 800e650:	0719      	lsls	r1, r3, #28
 800e652:	bf04      	itt	eq
 800e654:	091b      	lsreq	r3, r3, #4
 800e656:	3004      	addeq	r0, #4
 800e658:	0799      	lsls	r1, r3, #30
 800e65a:	bf04      	itt	eq
 800e65c:	089b      	lsreq	r3, r3, #2
 800e65e:	3002      	addeq	r0, #2
 800e660:	07d9      	lsls	r1, r3, #31
 800e662:	d403      	bmi.n	800e66c <__lo0bits+0x4e>
 800e664:	085b      	lsrs	r3, r3, #1
 800e666:	f100 0001 	add.w	r0, r0, #1
 800e66a:	d003      	beq.n	800e674 <__lo0bits+0x56>
 800e66c:	6013      	str	r3, [r2, #0]
 800e66e:	4770      	bx	lr
 800e670:	2000      	movs	r0, #0
 800e672:	4770      	bx	lr
 800e674:	2020      	movs	r0, #32
 800e676:	4770      	bx	lr

0800e678 <__i2b>:
 800e678:	b510      	push	{r4, lr}
 800e67a:	460c      	mov	r4, r1
 800e67c:	2101      	movs	r1, #1
 800e67e:	f7ff ff07 	bl	800e490 <_Balloc>
 800e682:	4602      	mov	r2, r0
 800e684:	b928      	cbnz	r0, 800e692 <__i2b+0x1a>
 800e686:	4b05      	ldr	r3, [pc, #20]	@ (800e69c <__i2b+0x24>)
 800e688:	4805      	ldr	r0, [pc, #20]	@ (800e6a0 <__i2b+0x28>)
 800e68a:	f240 1145 	movw	r1, #325	@ 0x145
 800e68e:	f000 fd03 	bl	800f098 <__assert_func>
 800e692:	2301      	movs	r3, #1
 800e694:	6144      	str	r4, [r0, #20]
 800e696:	6103      	str	r3, [r0, #16]
 800e698:	bd10      	pop	{r4, pc}
 800e69a:	bf00      	nop
 800e69c:	0800f360 	.word	0x0800f360
 800e6a0:	0800f371 	.word	0x0800f371

0800e6a4 <__multiply>:
 800e6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6a8:	4614      	mov	r4, r2
 800e6aa:	690a      	ldr	r2, [r1, #16]
 800e6ac:	6923      	ldr	r3, [r4, #16]
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	bfa8      	it	ge
 800e6b2:	4623      	movge	r3, r4
 800e6b4:	460f      	mov	r7, r1
 800e6b6:	bfa4      	itt	ge
 800e6b8:	460c      	movge	r4, r1
 800e6ba:	461f      	movge	r7, r3
 800e6bc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e6c0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e6c4:	68a3      	ldr	r3, [r4, #8]
 800e6c6:	6861      	ldr	r1, [r4, #4]
 800e6c8:	eb0a 0609 	add.w	r6, sl, r9
 800e6cc:	42b3      	cmp	r3, r6
 800e6ce:	b085      	sub	sp, #20
 800e6d0:	bfb8      	it	lt
 800e6d2:	3101      	addlt	r1, #1
 800e6d4:	f7ff fedc 	bl	800e490 <_Balloc>
 800e6d8:	b930      	cbnz	r0, 800e6e8 <__multiply+0x44>
 800e6da:	4602      	mov	r2, r0
 800e6dc:	4b44      	ldr	r3, [pc, #272]	@ (800e7f0 <__multiply+0x14c>)
 800e6de:	4845      	ldr	r0, [pc, #276]	@ (800e7f4 <__multiply+0x150>)
 800e6e0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e6e4:	f000 fcd8 	bl	800f098 <__assert_func>
 800e6e8:	f100 0514 	add.w	r5, r0, #20
 800e6ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e6f0:	462b      	mov	r3, r5
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	4543      	cmp	r3, r8
 800e6f6:	d321      	bcc.n	800e73c <__multiply+0x98>
 800e6f8:	f107 0114 	add.w	r1, r7, #20
 800e6fc:	f104 0214 	add.w	r2, r4, #20
 800e700:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e704:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e708:	9302      	str	r3, [sp, #8]
 800e70a:	1b13      	subs	r3, r2, r4
 800e70c:	3b15      	subs	r3, #21
 800e70e:	f023 0303 	bic.w	r3, r3, #3
 800e712:	3304      	adds	r3, #4
 800e714:	f104 0715 	add.w	r7, r4, #21
 800e718:	42ba      	cmp	r2, r7
 800e71a:	bf38      	it	cc
 800e71c:	2304      	movcc	r3, #4
 800e71e:	9301      	str	r3, [sp, #4]
 800e720:	9b02      	ldr	r3, [sp, #8]
 800e722:	9103      	str	r1, [sp, #12]
 800e724:	428b      	cmp	r3, r1
 800e726:	d80c      	bhi.n	800e742 <__multiply+0x9e>
 800e728:	2e00      	cmp	r6, #0
 800e72a:	dd03      	ble.n	800e734 <__multiply+0x90>
 800e72c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e730:	2b00      	cmp	r3, #0
 800e732:	d05b      	beq.n	800e7ec <__multiply+0x148>
 800e734:	6106      	str	r6, [r0, #16]
 800e736:	b005      	add	sp, #20
 800e738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e73c:	f843 2b04 	str.w	r2, [r3], #4
 800e740:	e7d8      	b.n	800e6f4 <__multiply+0x50>
 800e742:	f8b1 a000 	ldrh.w	sl, [r1]
 800e746:	f1ba 0f00 	cmp.w	sl, #0
 800e74a:	d024      	beq.n	800e796 <__multiply+0xf2>
 800e74c:	f104 0e14 	add.w	lr, r4, #20
 800e750:	46a9      	mov	r9, r5
 800e752:	f04f 0c00 	mov.w	ip, #0
 800e756:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e75a:	f8d9 3000 	ldr.w	r3, [r9]
 800e75e:	fa1f fb87 	uxth.w	fp, r7
 800e762:	b29b      	uxth	r3, r3
 800e764:	fb0a 330b 	mla	r3, sl, fp, r3
 800e768:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e76c:	f8d9 7000 	ldr.w	r7, [r9]
 800e770:	4463      	add	r3, ip
 800e772:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e776:	fb0a c70b 	mla	r7, sl, fp, ip
 800e77a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e77e:	b29b      	uxth	r3, r3
 800e780:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e784:	4572      	cmp	r2, lr
 800e786:	f849 3b04 	str.w	r3, [r9], #4
 800e78a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e78e:	d8e2      	bhi.n	800e756 <__multiply+0xb2>
 800e790:	9b01      	ldr	r3, [sp, #4]
 800e792:	f845 c003 	str.w	ip, [r5, r3]
 800e796:	9b03      	ldr	r3, [sp, #12]
 800e798:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e79c:	3104      	adds	r1, #4
 800e79e:	f1b9 0f00 	cmp.w	r9, #0
 800e7a2:	d021      	beq.n	800e7e8 <__multiply+0x144>
 800e7a4:	682b      	ldr	r3, [r5, #0]
 800e7a6:	f104 0c14 	add.w	ip, r4, #20
 800e7aa:	46ae      	mov	lr, r5
 800e7ac:	f04f 0a00 	mov.w	sl, #0
 800e7b0:	f8bc b000 	ldrh.w	fp, [ip]
 800e7b4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e7b8:	fb09 770b 	mla	r7, r9, fp, r7
 800e7bc:	4457      	add	r7, sl
 800e7be:	b29b      	uxth	r3, r3
 800e7c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e7c4:	f84e 3b04 	str.w	r3, [lr], #4
 800e7c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e7cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e7d0:	f8be 3000 	ldrh.w	r3, [lr]
 800e7d4:	fb09 330a 	mla	r3, r9, sl, r3
 800e7d8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e7dc:	4562      	cmp	r2, ip
 800e7de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e7e2:	d8e5      	bhi.n	800e7b0 <__multiply+0x10c>
 800e7e4:	9f01      	ldr	r7, [sp, #4]
 800e7e6:	51eb      	str	r3, [r5, r7]
 800e7e8:	3504      	adds	r5, #4
 800e7ea:	e799      	b.n	800e720 <__multiply+0x7c>
 800e7ec:	3e01      	subs	r6, #1
 800e7ee:	e79b      	b.n	800e728 <__multiply+0x84>
 800e7f0:	0800f360 	.word	0x0800f360
 800e7f4:	0800f371 	.word	0x0800f371

0800e7f8 <__pow5mult>:
 800e7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7fc:	4615      	mov	r5, r2
 800e7fe:	f012 0203 	ands.w	r2, r2, #3
 800e802:	4607      	mov	r7, r0
 800e804:	460e      	mov	r6, r1
 800e806:	d007      	beq.n	800e818 <__pow5mult+0x20>
 800e808:	4c25      	ldr	r4, [pc, #148]	@ (800e8a0 <__pow5mult+0xa8>)
 800e80a:	3a01      	subs	r2, #1
 800e80c:	2300      	movs	r3, #0
 800e80e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e812:	f7ff fe9f 	bl	800e554 <__multadd>
 800e816:	4606      	mov	r6, r0
 800e818:	10ad      	asrs	r5, r5, #2
 800e81a:	d03d      	beq.n	800e898 <__pow5mult+0xa0>
 800e81c:	69fc      	ldr	r4, [r7, #28]
 800e81e:	b97c      	cbnz	r4, 800e840 <__pow5mult+0x48>
 800e820:	2010      	movs	r0, #16
 800e822:	f7ff fd7f 	bl	800e324 <malloc>
 800e826:	4602      	mov	r2, r0
 800e828:	61f8      	str	r0, [r7, #28]
 800e82a:	b928      	cbnz	r0, 800e838 <__pow5mult+0x40>
 800e82c:	4b1d      	ldr	r3, [pc, #116]	@ (800e8a4 <__pow5mult+0xac>)
 800e82e:	481e      	ldr	r0, [pc, #120]	@ (800e8a8 <__pow5mult+0xb0>)
 800e830:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e834:	f000 fc30 	bl	800f098 <__assert_func>
 800e838:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e83c:	6004      	str	r4, [r0, #0]
 800e83e:	60c4      	str	r4, [r0, #12]
 800e840:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e844:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e848:	b94c      	cbnz	r4, 800e85e <__pow5mult+0x66>
 800e84a:	f240 2171 	movw	r1, #625	@ 0x271
 800e84e:	4638      	mov	r0, r7
 800e850:	f7ff ff12 	bl	800e678 <__i2b>
 800e854:	2300      	movs	r3, #0
 800e856:	f8c8 0008 	str.w	r0, [r8, #8]
 800e85a:	4604      	mov	r4, r0
 800e85c:	6003      	str	r3, [r0, #0]
 800e85e:	f04f 0900 	mov.w	r9, #0
 800e862:	07eb      	lsls	r3, r5, #31
 800e864:	d50a      	bpl.n	800e87c <__pow5mult+0x84>
 800e866:	4631      	mov	r1, r6
 800e868:	4622      	mov	r2, r4
 800e86a:	4638      	mov	r0, r7
 800e86c:	f7ff ff1a 	bl	800e6a4 <__multiply>
 800e870:	4631      	mov	r1, r6
 800e872:	4680      	mov	r8, r0
 800e874:	4638      	mov	r0, r7
 800e876:	f7ff fe4b 	bl	800e510 <_Bfree>
 800e87a:	4646      	mov	r6, r8
 800e87c:	106d      	asrs	r5, r5, #1
 800e87e:	d00b      	beq.n	800e898 <__pow5mult+0xa0>
 800e880:	6820      	ldr	r0, [r4, #0]
 800e882:	b938      	cbnz	r0, 800e894 <__pow5mult+0x9c>
 800e884:	4622      	mov	r2, r4
 800e886:	4621      	mov	r1, r4
 800e888:	4638      	mov	r0, r7
 800e88a:	f7ff ff0b 	bl	800e6a4 <__multiply>
 800e88e:	6020      	str	r0, [r4, #0]
 800e890:	f8c0 9000 	str.w	r9, [r0]
 800e894:	4604      	mov	r4, r0
 800e896:	e7e4      	b.n	800e862 <__pow5mult+0x6a>
 800e898:	4630      	mov	r0, r6
 800e89a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e89e:	bf00      	nop
 800e8a0:	0800f3cc 	.word	0x0800f3cc
 800e8a4:	0800f2f1 	.word	0x0800f2f1
 800e8a8:	0800f371 	.word	0x0800f371

0800e8ac <__lshift>:
 800e8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8b0:	460c      	mov	r4, r1
 800e8b2:	6849      	ldr	r1, [r1, #4]
 800e8b4:	6923      	ldr	r3, [r4, #16]
 800e8b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e8ba:	68a3      	ldr	r3, [r4, #8]
 800e8bc:	4607      	mov	r7, r0
 800e8be:	4691      	mov	r9, r2
 800e8c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e8c4:	f108 0601 	add.w	r6, r8, #1
 800e8c8:	42b3      	cmp	r3, r6
 800e8ca:	db0b      	blt.n	800e8e4 <__lshift+0x38>
 800e8cc:	4638      	mov	r0, r7
 800e8ce:	f7ff fddf 	bl	800e490 <_Balloc>
 800e8d2:	4605      	mov	r5, r0
 800e8d4:	b948      	cbnz	r0, 800e8ea <__lshift+0x3e>
 800e8d6:	4602      	mov	r2, r0
 800e8d8:	4b28      	ldr	r3, [pc, #160]	@ (800e97c <__lshift+0xd0>)
 800e8da:	4829      	ldr	r0, [pc, #164]	@ (800e980 <__lshift+0xd4>)
 800e8dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e8e0:	f000 fbda 	bl	800f098 <__assert_func>
 800e8e4:	3101      	adds	r1, #1
 800e8e6:	005b      	lsls	r3, r3, #1
 800e8e8:	e7ee      	b.n	800e8c8 <__lshift+0x1c>
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	f100 0114 	add.w	r1, r0, #20
 800e8f0:	f100 0210 	add.w	r2, r0, #16
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	4553      	cmp	r3, sl
 800e8f8:	db33      	blt.n	800e962 <__lshift+0xb6>
 800e8fa:	6920      	ldr	r0, [r4, #16]
 800e8fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e900:	f104 0314 	add.w	r3, r4, #20
 800e904:	f019 091f 	ands.w	r9, r9, #31
 800e908:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e90c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e910:	d02b      	beq.n	800e96a <__lshift+0xbe>
 800e912:	f1c9 0e20 	rsb	lr, r9, #32
 800e916:	468a      	mov	sl, r1
 800e918:	2200      	movs	r2, #0
 800e91a:	6818      	ldr	r0, [r3, #0]
 800e91c:	fa00 f009 	lsl.w	r0, r0, r9
 800e920:	4310      	orrs	r0, r2
 800e922:	f84a 0b04 	str.w	r0, [sl], #4
 800e926:	f853 2b04 	ldr.w	r2, [r3], #4
 800e92a:	459c      	cmp	ip, r3
 800e92c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e930:	d8f3      	bhi.n	800e91a <__lshift+0x6e>
 800e932:	ebac 0304 	sub.w	r3, ip, r4
 800e936:	3b15      	subs	r3, #21
 800e938:	f023 0303 	bic.w	r3, r3, #3
 800e93c:	3304      	adds	r3, #4
 800e93e:	f104 0015 	add.w	r0, r4, #21
 800e942:	4584      	cmp	ip, r0
 800e944:	bf38      	it	cc
 800e946:	2304      	movcc	r3, #4
 800e948:	50ca      	str	r2, [r1, r3]
 800e94a:	b10a      	cbz	r2, 800e950 <__lshift+0xa4>
 800e94c:	f108 0602 	add.w	r6, r8, #2
 800e950:	3e01      	subs	r6, #1
 800e952:	4638      	mov	r0, r7
 800e954:	612e      	str	r6, [r5, #16]
 800e956:	4621      	mov	r1, r4
 800e958:	f7ff fdda 	bl	800e510 <_Bfree>
 800e95c:	4628      	mov	r0, r5
 800e95e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e962:	f842 0f04 	str.w	r0, [r2, #4]!
 800e966:	3301      	adds	r3, #1
 800e968:	e7c5      	b.n	800e8f6 <__lshift+0x4a>
 800e96a:	3904      	subs	r1, #4
 800e96c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e970:	f841 2f04 	str.w	r2, [r1, #4]!
 800e974:	459c      	cmp	ip, r3
 800e976:	d8f9      	bhi.n	800e96c <__lshift+0xc0>
 800e978:	e7ea      	b.n	800e950 <__lshift+0xa4>
 800e97a:	bf00      	nop
 800e97c:	0800f360 	.word	0x0800f360
 800e980:	0800f371 	.word	0x0800f371

0800e984 <__mcmp>:
 800e984:	690a      	ldr	r2, [r1, #16]
 800e986:	4603      	mov	r3, r0
 800e988:	6900      	ldr	r0, [r0, #16]
 800e98a:	1a80      	subs	r0, r0, r2
 800e98c:	b530      	push	{r4, r5, lr}
 800e98e:	d10e      	bne.n	800e9ae <__mcmp+0x2a>
 800e990:	3314      	adds	r3, #20
 800e992:	3114      	adds	r1, #20
 800e994:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e998:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e99c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e9a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e9a4:	4295      	cmp	r5, r2
 800e9a6:	d003      	beq.n	800e9b0 <__mcmp+0x2c>
 800e9a8:	d205      	bcs.n	800e9b6 <__mcmp+0x32>
 800e9aa:	f04f 30ff 	mov.w	r0, #4294967295
 800e9ae:	bd30      	pop	{r4, r5, pc}
 800e9b0:	42a3      	cmp	r3, r4
 800e9b2:	d3f3      	bcc.n	800e99c <__mcmp+0x18>
 800e9b4:	e7fb      	b.n	800e9ae <__mcmp+0x2a>
 800e9b6:	2001      	movs	r0, #1
 800e9b8:	e7f9      	b.n	800e9ae <__mcmp+0x2a>
	...

0800e9bc <__mdiff>:
 800e9bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c0:	4689      	mov	r9, r1
 800e9c2:	4606      	mov	r6, r0
 800e9c4:	4611      	mov	r1, r2
 800e9c6:	4648      	mov	r0, r9
 800e9c8:	4614      	mov	r4, r2
 800e9ca:	f7ff ffdb 	bl	800e984 <__mcmp>
 800e9ce:	1e05      	subs	r5, r0, #0
 800e9d0:	d112      	bne.n	800e9f8 <__mdiff+0x3c>
 800e9d2:	4629      	mov	r1, r5
 800e9d4:	4630      	mov	r0, r6
 800e9d6:	f7ff fd5b 	bl	800e490 <_Balloc>
 800e9da:	4602      	mov	r2, r0
 800e9dc:	b928      	cbnz	r0, 800e9ea <__mdiff+0x2e>
 800e9de:	4b3f      	ldr	r3, [pc, #252]	@ (800eadc <__mdiff+0x120>)
 800e9e0:	f240 2137 	movw	r1, #567	@ 0x237
 800e9e4:	483e      	ldr	r0, [pc, #248]	@ (800eae0 <__mdiff+0x124>)
 800e9e6:	f000 fb57 	bl	800f098 <__assert_func>
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e9f0:	4610      	mov	r0, r2
 800e9f2:	b003      	add	sp, #12
 800e9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9f8:	bfbc      	itt	lt
 800e9fa:	464b      	movlt	r3, r9
 800e9fc:	46a1      	movlt	r9, r4
 800e9fe:	4630      	mov	r0, r6
 800ea00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ea04:	bfba      	itte	lt
 800ea06:	461c      	movlt	r4, r3
 800ea08:	2501      	movlt	r5, #1
 800ea0a:	2500      	movge	r5, #0
 800ea0c:	f7ff fd40 	bl	800e490 <_Balloc>
 800ea10:	4602      	mov	r2, r0
 800ea12:	b918      	cbnz	r0, 800ea1c <__mdiff+0x60>
 800ea14:	4b31      	ldr	r3, [pc, #196]	@ (800eadc <__mdiff+0x120>)
 800ea16:	f240 2145 	movw	r1, #581	@ 0x245
 800ea1a:	e7e3      	b.n	800e9e4 <__mdiff+0x28>
 800ea1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ea20:	6926      	ldr	r6, [r4, #16]
 800ea22:	60c5      	str	r5, [r0, #12]
 800ea24:	f109 0310 	add.w	r3, r9, #16
 800ea28:	f109 0514 	add.w	r5, r9, #20
 800ea2c:	f104 0e14 	add.w	lr, r4, #20
 800ea30:	f100 0b14 	add.w	fp, r0, #20
 800ea34:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ea38:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ea3c:	9301      	str	r3, [sp, #4]
 800ea3e:	46d9      	mov	r9, fp
 800ea40:	f04f 0c00 	mov.w	ip, #0
 800ea44:	9b01      	ldr	r3, [sp, #4]
 800ea46:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ea4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ea4e:	9301      	str	r3, [sp, #4]
 800ea50:	fa1f f38a 	uxth.w	r3, sl
 800ea54:	4619      	mov	r1, r3
 800ea56:	b283      	uxth	r3, r0
 800ea58:	1acb      	subs	r3, r1, r3
 800ea5a:	0c00      	lsrs	r0, r0, #16
 800ea5c:	4463      	add	r3, ip
 800ea5e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ea62:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ea66:	b29b      	uxth	r3, r3
 800ea68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ea6c:	4576      	cmp	r6, lr
 800ea6e:	f849 3b04 	str.w	r3, [r9], #4
 800ea72:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ea76:	d8e5      	bhi.n	800ea44 <__mdiff+0x88>
 800ea78:	1b33      	subs	r3, r6, r4
 800ea7a:	3b15      	subs	r3, #21
 800ea7c:	f023 0303 	bic.w	r3, r3, #3
 800ea80:	3415      	adds	r4, #21
 800ea82:	3304      	adds	r3, #4
 800ea84:	42a6      	cmp	r6, r4
 800ea86:	bf38      	it	cc
 800ea88:	2304      	movcc	r3, #4
 800ea8a:	441d      	add	r5, r3
 800ea8c:	445b      	add	r3, fp
 800ea8e:	461e      	mov	r6, r3
 800ea90:	462c      	mov	r4, r5
 800ea92:	4544      	cmp	r4, r8
 800ea94:	d30e      	bcc.n	800eab4 <__mdiff+0xf8>
 800ea96:	f108 0103 	add.w	r1, r8, #3
 800ea9a:	1b49      	subs	r1, r1, r5
 800ea9c:	f021 0103 	bic.w	r1, r1, #3
 800eaa0:	3d03      	subs	r5, #3
 800eaa2:	45a8      	cmp	r8, r5
 800eaa4:	bf38      	it	cc
 800eaa6:	2100      	movcc	r1, #0
 800eaa8:	440b      	add	r3, r1
 800eaaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eaae:	b191      	cbz	r1, 800ead6 <__mdiff+0x11a>
 800eab0:	6117      	str	r7, [r2, #16]
 800eab2:	e79d      	b.n	800e9f0 <__mdiff+0x34>
 800eab4:	f854 1b04 	ldr.w	r1, [r4], #4
 800eab8:	46e6      	mov	lr, ip
 800eaba:	0c08      	lsrs	r0, r1, #16
 800eabc:	fa1c fc81 	uxtah	ip, ip, r1
 800eac0:	4471      	add	r1, lr
 800eac2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800eac6:	b289      	uxth	r1, r1
 800eac8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800eacc:	f846 1b04 	str.w	r1, [r6], #4
 800ead0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ead4:	e7dd      	b.n	800ea92 <__mdiff+0xd6>
 800ead6:	3f01      	subs	r7, #1
 800ead8:	e7e7      	b.n	800eaaa <__mdiff+0xee>
 800eada:	bf00      	nop
 800eadc:	0800f360 	.word	0x0800f360
 800eae0:	0800f371 	.word	0x0800f371

0800eae4 <__d2b>:
 800eae4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eae8:	460f      	mov	r7, r1
 800eaea:	2101      	movs	r1, #1
 800eaec:	ec59 8b10 	vmov	r8, r9, d0
 800eaf0:	4616      	mov	r6, r2
 800eaf2:	f7ff fccd 	bl	800e490 <_Balloc>
 800eaf6:	4604      	mov	r4, r0
 800eaf8:	b930      	cbnz	r0, 800eb08 <__d2b+0x24>
 800eafa:	4602      	mov	r2, r0
 800eafc:	4b23      	ldr	r3, [pc, #140]	@ (800eb8c <__d2b+0xa8>)
 800eafe:	4824      	ldr	r0, [pc, #144]	@ (800eb90 <__d2b+0xac>)
 800eb00:	f240 310f 	movw	r1, #783	@ 0x30f
 800eb04:	f000 fac8 	bl	800f098 <__assert_func>
 800eb08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800eb0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eb10:	b10d      	cbz	r5, 800eb16 <__d2b+0x32>
 800eb12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800eb16:	9301      	str	r3, [sp, #4]
 800eb18:	f1b8 0300 	subs.w	r3, r8, #0
 800eb1c:	d023      	beq.n	800eb66 <__d2b+0x82>
 800eb1e:	4668      	mov	r0, sp
 800eb20:	9300      	str	r3, [sp, #0]
 800eb22:	f7ff fd7c 	bl	800e61e <__lo0bits>
 800eb26:	e9dd 1200 	ldrd	r1, r2, [sp]
 800eb2a:	b1d0      	cbz	r0, 800eb62 <__d2b+0x7e>
 800eb2c:	f1c0 0320 	rsb	r3, r0, #32
 800eb30:	fa02 f303 	lsl.w	r3, r2, r3
 800eb34:	430b      	orrs	r3, r1
 800eb36:	40c2      	lsrs	r2, r0
 800eb38:	6163      	str	r3, [r4, #20]
 800eb3a:	9201      	str	r2, [sp, #4]
 800eb3c:	9b01      	ldr	r3, [sp, #4]
 800eb3e:	61a3      	str	r3, [r4, #24]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	bf0c      	ite	eq
 800eb44:	2201      	moveq	r2, #1
 800eb46:	2202      	movne	r2, #2
 800eb48:	6122      	str	r2, [r4, #16]
 800eb4a:	b1a5      	cbz	r5, 800eb76 <__d2b+0x92>
 800eb4c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800eb50:	4405      	add	r5, r0
 800eb52:	603d      	str	r5, [r7, #0]
 800eb54:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800eb58:	6030      	str	r0, [r6, #0]
 800eb5a:	4620      	mov	r0, r4
 800eb5c:	b003      	add	sp, #12
 800eb5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb62:	6161      	str	r1, [r4, #20]
 800eb64:	e7ea      	b.n	800eb3c <__d2b+0x58>
 800eb66:	a801      	add	r0, sp, #4
 800eb68:	f7ff fd59 	bl	800e61e <__lo0bits>
 800eb6c:	9b01      	ldr	r3, [sp, #4]
 800eb6e:	6163      	str	r3, [r4, #20]
 800eb70:	3020      	adds	r0, #32
 800eb72:	2201      	movs	r2, #1
 800eb74:	e7e8      	b.n	800eb48 <__d2b+0x64>
 800eb76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eb7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800eb7e:	6038      	str	r0, [r7, #0]
 800eb80:	6918      	ldr	r0, [r3, #16]
 800eb82:	f7ff fd2d 	bl	800e5e0 <__hi0bits>
 800eb86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eb8a:	e7e5      	b.n	800eb58 <__d2b+0x74>
 800eb8c:	0800f360 	.word	0x0800f360
 800eb90:	0800f371 	.word	0x0800f371

0800eb94 <__sfputc_r>:
 800eb94:	6893      	ldr	r3, [r2, #8]
 800eb96:	3b01      	subs	r3, #1
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	b410      	push	{r4}
 800eb9c:	6093      	str	r3, [r2, #8]
 800eb9e:	da08      	bge.n	800ebb2 <__sfputc_r+0x1e>
 800eba0:	6994      	ldr	r4, [r2, #24]
 800eba2:	42a3      	cmp	r3, r4
 800eba4:	db01      	blt.n	800ebaa <__sfputc_r+0x16>
 800eba6:	290a      	cmp	r1, #10
 800eba8:	d103      	bne.n	800ebb2 <__sfputc_r+0x1e>
 800ebaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ebae:	f7fe bbfe 	b.w	800d3ae <__swbuf_r>
 800ebb2:	6813      	ldr	r3, [r2, #0]
 800ebb4:	1c58      	adds	r0, r3, #1
 800ebb6:	6010      	str	r0, [r2, #0]
 800ebb8:	7019      	strb	r1, [r3, #0]
 800ebba:	4608      	mov	r0, r1
 800ebbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ebc0:	4770      	bx	lr

0800ebc2 <__sfputs_r>:
 800ebc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebc4:	4606      	mov	r6, r0
 800ebc6:	460f      	mov	r7, r1
 800ebc8:	4614      	mov	r4, r2
 800ebca:	18d5      	adds	r5, r2, r3
 800ebcc:	42ac      	cmp	r4, r5
 800ebce:	d101      	bne.n	800ebd4 <__sfputs_r+0x12>
 800ebd0:	2000      	movs	r0, #0
 800ebd2:	e007      	b.n	800ebe4 <__sfputs_r+0x22>
 800ebd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebd8:	463a      	mov	r2, r7
 800ebda:	4630      	mov	r0, r6
 800ebdc:	f7ff ffda 	bl	800eb94 <__sfputc_r>
 800ebe0:	1c43      	adds	r3, r0, #1
 800ebe2:	d1f3      	bne.n	800ebcc <__sfputs_r+0xa>
 800ebe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ebe8 <_vfiprintf_r>:
 800ebe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebec:	460d      	mov	r5, r1
 800ebee:	b09d      	sub	sp, #116	@ 0x74
 800ebf0:	4614      	mov	r4, r2
 800ebf2:	4698      	mov	r8, r3
 800ebf4:	4606      	mov	r6, r0
 800ebf6:	b118      	cbz	r0, 800ec00 <_vfiprintf_r+0x18>
 800ebf8:	6a03      	ldr	r3, [r0, #32]
 800ebfa:	b90b      	cbnz	r3, 800ec00 <_vfiprintf_r+0x18>
 800ebfc:	f7fe fb00 	bl	800d200 <__sinit>
 800ec00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec02:	07d9      	lsls	r1, r3, #31
 800ec04:	d405      	bmi.n	800ec12 <_vfiprintf_r+0x2a>
 800ec06:	89ab      	ldrh	r3, [r5, #12]
 800ec08:	059a      	lsls	r2, r3, #22
 800ec0a:	d402      	bmi.n	800ec12 <_vfiprintf_r+0x2a>
 800ec0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec0e:	f7fe fce0 	bl	800d5d2 <__retarget_lock_acquire_recursive>
 800ec12:	89ab      	ldrh	r3, [r5, #12]
 800ec14:	071b      	lsls	r3, r3, #28
 800ec16:	d501      	bpl.n	800ec1c <_vfiprintf_r+0x34>
 800ec18:	692b      	ldr	r3, [r5, #16]
 800ec1a:	b99b      	cbnz	r3, 800ec44 <_vfiprintf_r+0x5c>
 800ec1c:	4629      	mov	r1, r5
 800ec1e:	4630      	mov	r0, r6
 800ec20:	f7fe fc04 	bl	800d42c <__swsetup_r>
 800ec24:	b170      	cbz	r0, 800ec44 <_vfiprintf_r+0x5c>
 800ec26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec28:	07dc      	lsls	r4, r3, #31
 800ec2a:	d504      	bpl.n	800ec36 <_vfiprintf_r+0x4e>
 800ec2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec30:	b01d      	add	sp, #116	@ 0x74
 800ec32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec36:	89ab      	ldrh	r3, [r5, #12]
 800ec38:	0598      	lsls	r0, r3, #22
 800ec3a:	d4f7      	bmi.n	800ec2c <_vfiprintf_r+0x44>
 800ec3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec3e:	f7fe fcc9 	bl	800d5d4 <__retarget_lock_release_recursive>
 800ec42:	e7f3      	b.n	800ec2c <_vfiprintf_r+0x44>
 800ec44:	2300      	movs	r3, #0
 800ec46:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec48:	2320      	movs	r3, #32
 800ec4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ec4e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec52:	2330      	movs	r3, #48	@ 0x30
 800ec54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ee04 <_vfiprintf_r+0x21c>
 800ec58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ec5c:	f04f 0901 	mov.w	r9, #1
 800ec60:	4623      	mov	r3, r4
 800ec62:	469a      	mov	sl, r3
 800ec64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec68:	b10a      	cbz	r2, 800ec6e <_vfiprintf_r+0x86>
 800ec6a:	2a25      	cmp	r2, #37	@ 0x25
 800ec6c:	d1f9      	bne.n	800ec62 <_vfiprintf_r+0x7a>
 800ec6e:	ebba 0b04 	subs.w	fp, sl, r4
 800ec72:	d00b      	beq.n	800ec8c <_vfiprintf_r+0xa4>
 800ec74:	465b      	mov	r3, fp
 800ec76:	4622      	mov	r2, r4
 800ec78:	4629      	mov	r1, r5
 800ec7a:	4630      	mov	r0, r6
 800ec7c:	f7ff ffa1 	bl	800ebc2 <__sfputs_r>
 800ec80:	3001      	adds	r0, #1
 800ec82:	f000 80a7 	beq.w	800edd4 <_vfiprintf_r+0x1ec>
 800ec86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec88:	445a      	add	r2, fp
 800ec8a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec8c:	f89a 3000 	ldrb.w	r3, [sl]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	f000 809f 	beq.w	800edd4 <_vfiprintf_r+0x1ec>
 800ec96:	2300      	movs	r3, #0
 800ec98:	f04f 32ff 	mov.w	r2, #4294967295
 800ec9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eca0:	f10a 0a01 	add.w	sl, sl, #1
 800eca4:	9304      	str	r3, [sp, #16]
 800eca6:	9307      	str	r3, [sp, #28]
 800eca8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ecac:	931a      	str	r3, [sp, #104]	@ 0x68
 800ecae:	4654      	mov	r4, sl
 800ecb0:	2205      	movs	r2, #5
 800ecb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecb6:	4853      	ldr	r0, [pc, #332]	@ (800ee04 <_vfiprintf_r+0x21c>)
 800ecb8:	f7f1 fa8a 	bl	80001d0 <memchr>
 800ecbc:	9a04      	ldr	r2, [sp, #16]
 800ecbe:	b9d8      	cbnz	r0, 800ecf8 <_vfiprintf_r+0x110>
 800ecc0:	06d1      	lsls	r1, r2, #27
 800ecc2:	bf44      	itt	mi
 800ecc4:	2320      	movmi	r3, #32
 800ecc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ecca:	0713      	lsls	r3, r2, #28
 800eccc:	bf44      	itt	mi
 800ecce:	232b      	movmi	r3, #43	@ 0x2b
 800ecd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ecd4:	f89a 3000 	ldrb.w	r3, [sl]
 800ecd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800ecda:	d015      	beq.n	800ed08 <_vfiprintf_r+0x120>
 800ecdc:	9a07      	ldr	r2, [sp, #28]
 800ecde:	4654      	mov	r4, sl
 800ece0:	2000      	movs	r0, #0
 800ece2:	f04f 0c0a 	mov.w	ip, #10
 800ece6:	4621      	mov	r1, r4
 800ece8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecec:	3b30      	subs	r3, #48	@ 0x30
 800ecee:	2b09      	cmp	r3, #9
 800ecf0:	d94b      	bls.n	800ed8a <_vfiprintf_r+0x1a2>
 800ecf2:	b1b0      	cbz	r0, 800ed22 <_vfiprintf_r+0x13a>
 800ecf4:	9207      	str	r2, [sp, #28]
 800ecf6:	e014      	b.n	800ed22 <_vfiprintf_r+0x13a>
 800ecf8:	eba0 0308 	sub.w	r3, r0, r8
 800ecfc:	fa09 f303 	lsl.w	r3, r9, r3
 800ed00:	4313      	orrs	r3, r2
 800ed02:	9304      	str	r3, [sp, #16]
 800ed04:	46a2      	mov	sl, r4
 800ed06:	e7d2      	b.n	800ecae <_vfiprintf_r+0xc6>
 800ed08:	9b03      	ldr	r3, [sp, #12]
 800ed0a:	1d19      	adds	r1, r3, #4
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	9103      	str	r1, [sp, #12]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	bfbb      	ittet	lt
 800ed14:	425b      	neglt	r3, r3
 800ed16:	f042 0202 	orrlt.w	r2, r2, #2
 800ed1a:	9307      	strge	r3, [sp, #28]
 800ed1c:	9307      	strlt	r3, [sp, #28]
 800ed1e:	bfb8      	it	lt
 800ed20:	9204      	strlt	r2, [sp, #16]
 800ed22:	7823      	ldrb	r3, [r4, #0]
 800ed24:	2b2e      	cmp	r3, #46	@ 0x2e
 800ed26:	d10a      	bne.n	800ed3e <_vfiprintf_r+0x156>
 800ed28:	7863      	ldrb	r3, [r4, #1]
 800ed2a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed2c:	d132      	bne.n	800ed94 <_vfiprintf_r+0x1ac>
 800ed2e:	9b03      	ldr	r3, [sp, #12]
 800ed30:	1d1a      	adds	r2, r3, #4
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	9203      	str	r2, [sp, #12]
 800ed36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ed3a:	3402      	adds	r4, #2
 800ed3c:	9305      	str	r3, [sp, #20]
 800ed3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ee14 <_vfiprintf_r+0x22c>
 800ed42:	7821      	ldrb	r1, [r4, #0]
 800ed44:	2203      	movs	r2, #3
 800ed46:	4650      	mov	r0, sl
 800ed48:	f7f1 fa42 	bl	80001d0 <memchr>
 800ed4c:	b138      	cbz	r0, 800ed5e <_vfiprintf_r+0x176>
 800ed4e:	9b04      	ldr	r3, [sp, #16]
 800ed50:	eba0 000a 	sub.w	r0, r0, sl
 800ed54:	2240      	movs	r2, #64	@ 0x40
 800ed56:	4082      	lsls	r2, r0
 800ed58:	4313      	orrs	r3, r2
 800ed5a:	3401      	adds	r4, #1
 800ed5c:	9304      	str	r3, [sp, #16]
 800ed5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed62:	4829      	ldr	r0, [pc, #164]	@ (800ee08 <_vfiprintf_r+0x220>)
 800ed64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ed68:	2206      	movs	r2, #6
 800ed6a:	f7f1 fa31 	bl	80001d0 <memchr>
 800ed6e:	2800      	cmp	r0, #0
 800ed70:	d03f      	beq.n	800edf2 <_vfiprintf_r+0x20a>
 800ed72:	4b26      	ldr	r3, [pc, #152]	@ (800ee0c <_vfiprintf_r+0x224>)
 800ed74:	bb1b      	cbnz	r3, 800edbe <_vfiprintf_r+0x1d6>
 800ed76:	9b03      	ldr	r3, [sp, #12]
 800ed78:	3307      	adds	r3, #7
 800ed7a:	f023 0307 	bic.w	r3, r3, #7
 800ed7e:	3308      	adds	r3, #8
 800ed80:	9303      	str	r3, [sp, #12]
 800ed82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed84:	443b      	add	r3, r7
 800ed86:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed88:	e76a      	b.n	800ec60 <_vfiprintf_r+0x78>
 800ed8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed8e:	460c      	mov	r4, r1
 800ed90:	2001      	movs	r0, #1
 800ed92:	e7a8      	b.n	800ece6 <_vfiprintf_r+0xfe>
 800ed94:	2300      	movs	r3, #0
 800ed96:	3401      	adds	r4, #1
 800ed98:	9305      	str	r3, [sp, #20]
 800ed9a:	4619      	mov	r1, r3
 800ed9c:	f04f 0c0a 	mov.w	ip, #10
 800eda0:	4620      	mov	r0, r4
 800eda2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eda6:	3a30      	subs	r2, #48	@ 0x30
 800eda8:	2a09      	cmp	r2, #9
 800edaa:	d903      	bls.n	800edb4 <_vfiprintf_r+0x1cc>
 800edac:	2b00      	cmp	r3, #0
 800edae:	d0c6      	beq.n	800ed3e <_vfiprintf_r+0x156>
 800edb0:	9105      	str	r1, [sp, #20]
 800edb2:	e7c4      	b.n	800ed3e <_vfiprintf_r+0x156>
 800edb4:	fb0c 2101 	mla	r1, ip, r1, r2
 800edb8:	4604      	mov	r4, r0
 800edba:	2301      	movs	r3, #1
 800edbc:	e7f0      	b.n	800eda0 <_vfiprintf_r+0x1b8>
 800edbe:	ab03      	add	r3, sp, #12
 800edc0:	9300      	str	r3, [sp, #0]
 800edc2:	462a      	mov	r2, r5
 800edc4:	4b12      	ldr	r3, [pc, #72]	@ (800ee10 <_vfiprintf_r+0x228>)
 800edc6:	a904      	add	r1, sp, #16
 800edc8:	4630      	mov	r0, r6
 800edca:	f7fd fdd5 	bl	800c978 <_printf_float>
 800edce:	4607      	mov	r7, r0
 800edd0:	1c78      	adds	r0, r7, #1
 800edd2:	d1d6      	bne.n	800ed82 <_vfiprintf_r+0x19a>
 800edd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800edd6:	07d9      	lsls	r1, r3, #31
 800edd8:	d405      	bmi.n	800ede6 <_vfiprintf_r+0x1fe>
 800edda:	89ab      	ldrh	r3, [r5, #12]
 800eddc:	059a      	lsls	r2, r3, #22
 800edde:	d402      	bmi.n	800ede6 <_vfiprintf_r+0x1fe>
 800ede0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ede2:	f7fe fbf7 	bl	800d5d4 <__retarget_lock_release_recursive>
 800ede6:	89ab      	ldrh	r3, [r5, #12]
 800ede8:	065b      	lsls	r3, r3, #25
 800edea:	f53f af1f 	bmi.w	800ec2c <_vfiprintf_r+0x44>
 800edee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800edf0:	e71e      	b.n	800ec30 <_vfiprintf_r+0x48>
 800edf2:	ab03      	add	r3, sp, #12
 800edf4:	9300      	str	r3, [sp, #0]
 800edf6:	462a      	mov	r2, r5
 800edf8:	4b05      	ldr	r3, [pc, #20]	@ (800ee10 <_vfiprintf_r+0x228>)
 800edfa:	a904      	add	r1, sp, #16
 800edfc:	4630      	mov	r0, r6
 800edfe:	f7fe f853 	bl	800cea8 <_printf_i>
 800ee02:	e7e4      	b.n	800edce <_vfiprintf_r+0x1e6>
 800ee04:	0800f4c8 	.word	0x0800f4c8
 800ee08:	0800f4d2 	.word	0x0800f4d2
 800ee0c:	0800c979 	.word	0x0800c979
 800ee10:	0800ebc3 	.word	0x0800ebc3
 800ee14:	0800f4ce 	.word	0x0800f4ce

0800ee18 <__sflush_r>:
 800ee18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ee1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee20:	0716      	lsls	r6, r2, #28
 800ee22:	4605      	mov	r5, r0
 800ee24:	460c      	mov	r4, r1
 800ee26:	d454      	bmi.n	800eed2 <__sflush_r+0xba>
 800ee28:	684b      	ldr	r3, [r1, #4]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	dc02      	bgt.n	800ee34 <__sflush_r+0x1c>
 800ee2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	dd48      	ble.n	800eec6 <__sflush_r+0xae>
 800ee34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ee36:	2e00      	cmp	r6, #0
 800ee38:	d045      	beq.n	800eec6 <__sflush_r+0xae>
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ee40:	682f      	ldr	r7, [r5, #0]
 800ee42:	6a21      	ldr	r1, [r4, #32]
 800ee44:	602b      	str	r3, [r5, #0]
 800ee46:	d030      	beq.n	800eeaa <__sflush_r+0x92>
 800ee48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ee4a:	89a3      	ldrh	r3, [r4, #12]
 800ee4c:	0759      	lsls	r1, r3, #29
 800ee4e:	d505      	bpl.n	800ee5c <__sflush_r+0x44>
 800ee50:	6863      	ldr	r3, [r4, #4]
 800ee52:	1ad2      	subs	r2, r2, r3
 800ee54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ee56:	b10b      	cbz	r3, 800ee5c <__sflush_r+0x44>
 800ee58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ee5a:	1ad2      	subs	r2, r2, r3
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ee60:	6a21      	ldr	r1, [r4, #32]
 800ee62:	4628      	mov	r0, r5
 800ee64:	47b0      	blx	r6
 800ee66:	1c43      	adds	r3, r0, #1
 800ee68:	89a3      	ldrh	r3, [r4, #12]
 800ee6a:	d106      	bne.n	800ee7a <__sflush_r+0x62>
 800ee6c:	6829      	ldr	r1, [r5, #0]
 800ee6e:	291d      	cmp	r1, #29
 800ee70:	d82b      	bhi.n	800eeca <__sflush_r+0xb2>
 800ee72:	4a2a      	ldr	r2, [pc, #168]	@ (800ef1c <__sflush_r+0x104>)
 800ee74:	410a      	asrs	r2, r1
 800ee76:	07d6      	lsls	r6, r2, #31
 800ee78:	d427      	bmi.n	800eeca <__sflush_r+0xb2>
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	6062      	str	r2, [r4, #4]
 800ee7e:	04d9      	lsls	r1, r3, #19
 800ee80:	6922      	ldr	r2, [r4, #16]
 800ee82:	6022      	str	r2, [r4, #0]
 800ee84:	d504      	bpl.n	800ee90 <__sflush_r+0x78>
 800ee86:	1c42      	adds	r2, r0, #1
 800ee88:	d101      	bne.n	800ee8e <__sflush_r+0x76>
 800ee8a:	682b      	ldr	r3, [r5, #0]
 800ee8c:	b903      	cbnz	r3, 800ee90 <__sflush_r+0x78>
 800ee8e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ee90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ee92:	602f      	str	r7, [r5, #0]
 800ee94:	b1b9      	cbz	r1, 800eec6 <__sflush_r+0xae>
 800ee96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ee9a:	4299      	cmp	r1, r3
 800ee9c:	d002      	beq.n	800eea4 <__sflush_r+0x8c>
 800ee9e:	4628      	mov	r0, r5
 800eea0:	f7ff f9f6 	bl	800e290 <_free_r>
 800eea4:	2300      	movs	r3, #0
 800eea6:	6363      	str	r3, [r4, #52]	@ 0x34
 800eea8:	e00d      	b.n	800eec6 <__sflush_r+0xae>
 800eeaa:	2301      	movs	r3, #1
 800eeac:	4628      	mov	r0, r5
 800eeae:	47b0      	blx	r6
 800eeb0:	4602      	mov	r2, r0
 800eeb2:	1c50      	adds	r0, r2, #1
 800eeb4:	d1c9      	bne.n	800ee4a <__sflush_r+0x32>
 800eeb6:	682b      	ldr	r3, [r5, #0]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d0c6      	beq.n	800ee4a <__sflush_r+0x32>
 800eebc:	2b1d      	cmp	r3, #29
 800eebe:	d001      	beq.n	800eec4 <__sflush_r+0xac>
 800eec0:	2b16      	cmp	r3, #22
 800eec2:	d11e      	bne.n	800ef02 <__sflush_r+0xea>
 800eec4:	602f      	str	r7, [r5, #0]
 800eec6:	2000      	movs	r0, #0
 800eec8:	e022      	b.n	800ef10 <__sflush_r+0xf8>
 800eeca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eece:	b21b      	sxth	r3, r3
 800eed0:	e01b      	b.n	800ef0a <__sflush_r+0xf2>
 800eed2:	690f      	ldr	r7, [r1, #16]
 800eed4:	2f00      	cmp	r7, #0
 800eed6:	d0f6      	beq.n	800eec6 <__sflush_r+0xae>
 800eed8:	0793      	lsls	r3, r2, #30
 800eeda:	680e      	ldr	r6, [r1, #0]
 800eedc:	bf08      	it	eq
 800eede:	694b      	ldreq	r3, [r1, #20]
 800eee0:	600f      	str	r7, [r1, #0]
 800eee2:	bf18      	it	ne
 800eee4:	2300      	movne	r3, #0
 800eee6:	eba6 0807 	sub.w	r8, r6, r7
 800eeea:	608b      	str	r3, [r1, #8]
 800eeec:	f1b8 0f00 	cmp.w	r8, #0
 800eef0:	dde9      	ble.n	800eec6 <__sflush_r+0xae>
 800eef2:	6a21      	ldr	r1, [r4, #32]
 800eef4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800eef6:	4643      	mov	r3, r8
 800eef8:	463a      	mov	r2, r7
 800eefa:	4628      	mov	r0, r5
 800eefc:	47b0      	blx	r6
 800eefe:	2800      	cmp	r0, #0
 800ef00:	dc08      	bgt.n	800ef14 <__sflush_r+0xfc>
 800ef02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef0a:	81a3      	strh	r3, [r4, #12]
 800ef0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef14:	4407      	add	r7, r0
 800ef16:	eba8 0800 	sub.w	r8, r8, r0
 800ef1a:	e7e7      	b.n	800eeec <__sflush_r+0xd4>
 800ef1c:	dfbffffe 	.word	0xdfbffffe

0800ef20 <_fflush_r>:
 800ef20:	b538      	push	{r3, r4, r5, lr}
 800ef22:	690b      	ldr	r3, [r1, #16]
 800ef24:	4605      	mov	r5, r0
 800ef26:	460c      	mov	r4, r1
 800ef28:	b913      	cbnz	r3, 800ef30 <_fflush_r+0x10>
 800ef2a:	2500      	movs	r5, #0
 800ef2c:	4628      	mov	r0, r5
 800ef2e:	bd38      	pop	{r3, r4, r5, pc}
 800ef30:	b118      	cbz	r0, 800ef3a <_fflush_r+0x1a>
 800ef32:	6a03      	ldr	r3, [r0, #32]
 800ef34:	b90b      	cbnz	r3, 800ef3a <_fflush_r+0x1a>
 800ef36:	f7fe f963 	bl	800d200 <__sinit>
 800ef3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d0f3      	beq.n	800ef2a <_fflush_r+0xa>
 800ef42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ef44:	07d0      	lsls	r0, r2, #31
 800ef46:	d404      	bmi.n	800ef52 <_fflush_r+0x32>
 800ef48:	0599      	lsls	r1, r3, #22
 800ef4a:	d402      	bmi.n	800ef52 <_fflush_r+0x32>
 800ef4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef4e:	f7fe fb40 	bl	800d5d2 <__retarget_lock_acquire_recursive>
 800ef52:	4628      	mov	r0, r5
 800ef54:	4621      	mov	r1, r4
 800ef56:	f7ff ff5f 	bl	800ee18 <__sflush_r>
 800ef5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ef5c:	07da      	lsls	r2, r3, #31
 800ef5e:	4605      	mov	r5, r0
 800ef60:	d4e4      	bmi.n	800ef2c <_fflush_r+0xc>
 800ef62:	89a3      	ldrh	r3, [r4, #12]
 800ef64:	059b      	lsls	r3, r3, #22
 800ef66:	d4e1      	bmi.n	800ef2c <_fflush_r+0xc>
 800ef68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef6a:	f7fe fb33 	bl	800d5d4 <__retarget_lock_release_recursive>
 800ef6e:	e7dd      	b.n	800ef2c <_fflush_r+0xc>

0800ef70 <__swhatbuf_r>:
 800ef70:	b570      	push	{r4, r5, r6, lr}
 800ef72:	460c      	mov	r4, r1
 800ef74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef78:	2900      	cmp	r1, #0
 800ef7a:	b096      	sub	sp, #88	@ 0x58
 800ef7c:	4615      	mov	r5, r2
 800ef7e:	461e      	mov	r6, r3
 800ef80:	da0d      	bge.n	800ef9e <__swhatbuf_r+0x2e>
 800ef82:	89a3      	ldrh	r3, [r4, #12]
 800ef84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ef88:	f04f 0100 	mov.w	r1, #0
 800ef8c:	bf14      	ite	ne
 800ef8e:	2340      	movne	r3, #64	@ 0x40
 800ef90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ef94:	2000      	movs	r0, #0
 800ef96:	6031      	str	r1, [r6, #0]
 800ef98:	602b      	str	r3, [r5, #0]
 800ef9a:	b016      	add	sp, #88	@ 0x58
 800ef9c:	bd70      	pop	{r4, r5, r6, pc}
 800ef9e:	466a      	mov	r2, sp
 800efa0:	f000 f848 	bl	800f034 <_fstat_r>
 800efa4:	2800      	cmp	r0, #0
 800efa6:	dbec      	blt.n	800ef82 <__swhatbuf_r+0x12>
 800efa8:	9901      	ldr	r1, [sp, #4]
 800efaa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800efae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800efb2:	4259      	negs	r1, r3
 800efb4:	4159      	adcs	r1, r3
 800efb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800efba:	e7eb      	b.n	800ef94 <__swhatbuf_r+0x24>

0800efbc <__smakebuf_r>:
 800efbc:	898b      	ldrh	r3, [r1, #12]
 800efbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800efc0:	079d      	lsls	r5, r3, #30
 800efc2:	4606      	mov	r6, r0
 800efc4:	460c      	mov	r4, r1
 800efc6:	d507      	bpl.n	800efd8 <__smakebuf_r+0x1c>
 800efc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800efcc:	6023      	str	r3, [r4, #0]
 800efce:	6123      	str	r3, [r4, #16]
 800efd0:	2301      	movs	r3, #1
 800efd2:	6163      	str	r3, [r4, #20]
 800efd4:	b003      	add	sp, #12
 800efd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efd8:	ab01      	add	r3, sp, #4
 800efda:	466a      	mov	r2, sp
 800efdc:	f7ff ffc8 	bl	800ef70 <__swhatbuf_r>
 800efe0:	9f00      	ldr	r7, [sp, #0]
 800efe2:	4605      	mov	r5, r0
 800efe4:	4639      	mov	r1, r7
 800efe6:	4630      	mov	r0, r6
 800efe8:	f7ff f9c6 	bl	800e378 <_malloc_r>
 800efec:	b948      	cbnz	r0, 800f002 <__smakebuf_r+0x46>
 800efee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eff2:	059a      	lsls	r2, r3, #22
 800eff4:	d4ee      	bmi.n	800efd4 <__smakebuf_r+0x18>
 800eff6:	f023 0303 	bic.w	r3, r3, #3
 800effa:	f043 0302 	orr.w	r3, r3, #2
 800effe:	81a3      	strh	r3, [r4, #12]
 800f000:	e7e2      	b.n	800efc8 <__smakebuf_r+0xc>
 800f002:	89a3      	ldrh	r3, [r4, #12]
 800f004:	6020      	str	r0, [r4, #0]
 800f006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f00a:	81a3      	strh	r3, [r4, #12]
 800f00c:	9b01      	ldr	r3, [sp, #4]
 800f00e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f012:	b15b      	cbz	r3, 800f02c <__smakebuf_r+0x70>
 800f014:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f018:	4630      	mov	r0, r6
 800f01a:	f000 f81d 	bl	800f058 <_isatty_r>
 800f01e:	b128      	cbz	r0, 800f02c <__smakebuf_r+0x70>
 800f020:	89a3      	ldrh	r3, [r4, #12]
 800f022:	f023 0303 	bic.w	r3, r3, #3
 800f026:	f043 0301 	orr.w	r3, r3, #1
 800f02a:	81a3      	strh	r3, [r4, #12]
 800f02c:	89a3      	ldrh	r3, [r4, #12]
 800f02e:	431d      	orrs	r5, r3
 800f030:	81a5      	strh	r5, [r4, #12]
 800f032:	e7cf      	b.n	800efd4 <__smakebuf_r+0x18>

0800f034 <_fstat_r>:
 800f034:	b538      	push	{r3, r4, r5, lr}
 800f036:	4d07      	ldr	r5, [pc, #28]	@ (800f054 <_fstat_r+0x20>)
 800f038:	2300      	movs	r3, #0
 800f03a:	4604      	mov	r4, r0
 800f03c:	4608      	mov	r0, r1
 800f03e:	4611      	mov	r1, r2
 800f040:	602b      	str	r3, [r5, #0]
 800f042:	f7f2 fe77 	bl	8001d34 <_fstat>
 800f046:	1c43      	adds	r3, r0, #1
 800f048:	d102      	bne.n	800f050 <_fstat_r+0x1c>
 800f04a:	682b      	ldr	r3, [r5, #0]
 800f04c:	b103      	cbz	r3, 800f050 <_fstat_r+0x1c>
 800f04e:	6023      	str	r3, [r4, #0]
 800f050:	bd38      	pop	{r3, r4, r5, pc}
 800f052:	bf00      	nop
 800f054:	20001048 	.word	0x20001048

0800f058 <_isatty_r>:
 800f058:	b538      	push	{r3, r4, r5, lr}
 800f05a:	4d06      	ldr	r5, [pc, #24]	@ (800f074 <_isatty_r+0x1c>)
 800f05c:	2300      	movs	r3, #0
 800f05e:	4604      	mov	r4, r0
 800f060:	4608      	mov	r0, r1
 800f062:	602b      	str	r3, [r5, #0]
 800f064:	f7f2 fe76 	bl	8001d54 <_isatty>
 800f068:	1c43      	adds	r3, r0, #1
 800f06a:	d102      	bne.n	800f072 <_isatty_r+0x1a>
 800f06c:	682b      	ldr	r3, [r5, #0]
 800f06e:	b103      	cbz	r3, 800f072 <_isatty_r+0x1a>
 800f070:	6023      	str	r3, [r4, #0]
 800f072:	bd38      	pop	{r3, r4, r5, pc}
 800f074:	20001048 	.word	0x20001048

0800f078 <_sbrk_r>:
 800f078:	b538      	push	{r3, r4, r5, lr}
 800f07a:	4d06      	ldr	r5, [pc, #24]	@ (800f094 <_sbrk_r+0x1c>)
 800f07c:	2300      	movs	r3, #0
 800f07e:	4604      	mov	r4, r0
 800f080:	4608      	mov	r0, r1
 800f082:	602b      	str	r3, [r5, #0]
 800f084:	f7f2 fe7e 	bl	8001d84 <_sbrk>
 800f088:	1c43      	adds	r3, r0, #1
 800f08a:	d102      	bne.n	800f092 <_sbrk_r+0x1a>
 800f08c:	682b      	ldr	r3, [r5, #0]
 800f08e:	b103      	cbz	r3, 800f092 <_sbrk_r+0x1a>
 800f090:	6023      	str	r3, [r4, #0]
 800f092:	bd38      	pop	{r3, r4, r5, pc}
 800f094:	20001048 	.word	0x20001048

0800f098 <__assert_func>:
 800f098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f09a:	4614      	mov	r4, r2
 800f09c:	461a      	mov	r2, r3
 800f09e:	4b09      	ldr	r3, [pc, #36]	@ (800f0c4 <__assert_func+0x2c>)
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	4605      	mov	r5, r0
 800f0a4:	68d8      	ldr	r0, [r3, #12]
 800f0a6:	b954      	cbnz	r4, 800f0be <__assert_func+0x26>
 800f0a8:	4b07      	ldr	r3, [pc, #28]	@ (800f0c8 <__assert_func+0x30>)
 800f0aa:	461c      	mov	r4, r3
 800f0ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f0b0:	9100      	str	r1, [sp, #0]
 800f0b2:	462b      	mov	r3, r5
 800f0b4:	4905      	ldr	r1, [pc, #20]	@ (800f0cc <__assert_func+0x34>)
 800f0b6:	f000 f841 	bl	800f13c <fiprintf>
 800f0ba:	f000 f851 	bl	800f160 <abort>
 800f0be:	4b04      	ldr	r3, [pc, #16]	@ (800f0d0 <__assert_func+0x38>)
 800f0c0:	e7f4      	b.n	800f0ac <__assert_func+0x14>
 800f0c2:	bf00      	nop
 800f0c4:	20000170 	.word	0x20000170
 800f0c8:	0800f51e 	.word	0x0800f51e
 800f0cc:	0800f4f0 	.word	0x0800f4f0
 800f0d0:	0800f4e3 	.word	0x0800f4e3

0800f0d4 <_calloc_r>:
 800f0d4:	b570      	push	{r4, r5, r6, lr}
 800f0d6:	fba1 5402 	umull	r5, r4, r1, r2
 800f0da:	b93c      	cbnz	r4, 800f0ec <_calloc_r+0x18>
 800f0dc:	4629      	mov	r1, r5
 800f0de:	f7ff f94b 	bl	800e378 <_malloc_r>
 800f0e2:	4606      	mov	r6, r0
 800f0e4:	b928      	cbnz	r0, 800f0f2 <_calloc_r+0x1e>
 800f0e6:	2600      	movs	r6, #0
 800f0e8:	4630      	mov	r0, r6
 800f0ea:	bd70      	pop	{r4, r5, r6, pc}
 800f0ec:	220c      	movs	r2, #12
 800f0ee:	6002      	str	r2, [r0, #0]
 800f0f0:	e7f9      	b.n	800f0e6 <_calloc_r+0x12>
 800f0f2:	462a      	mov	r2, r5
 800f0f4:	4621      	mov	r1, r4
 800f0f6:	f7fe f9ef 	bl	800d4d8 <memset>
 800f0fa:	e7f5      	b.n	800f0e8 <_calloc_r+0x14>

0800f0fc <__ascii_mbtowc>:
 800f0fc:	b082      	sub	sp, #8
 800f0fe:	b901      	cbnz	r1, 800f102 <__ascii_mbtowc+0x6>
 800f100:	a901      	add	r1, sp, #4
 800f102:	b142      	cbz	r2, 800f116 <__ascii_mbtowc+0x1a>
 800f104:	b14b      	cbz	r3, 800f11a <__ascii_mbtowc+0x1e>
 800f106:	7813      	ldrb	r3, [r2, #0]
 800f108:	600b      	str	r3, [r1, #0]
 800f10a:	7812      	ldrb	r2, [r2, #0]
 800f10c:	1e10      	subs	r0, r2, #0
 800f10e:	bf18      	it	ne
 800f110:	2001      	movne	r0, #1
 800f112:	b002      	add	sp, #8
 800f114:	4770      	bx	lr
 800f116:	4610      	mov	r0, r2
 800f118:	e7fb      	b.n	800f112 <__ascii_mbtowc+0x16>
 800f11a:	f06f 0001 	mvn.w	r0, #1
 800f11e:	e7f8      	b.n	800f112 <__ascii_mbtowc+0x16>

0800f120 <__ascii_wctomb>:
 800f120:	4603      	mov	r3, r0
 800f122:	4608      	mov	r0, r1
 800f124:	b141      	cbz	r1, 800f138 <__ascii_wctomb+0x18>
 800f126:	2aff      	cmp	r2, #255	@ 0xff
 800f128:	d904      	bls.n	800f134 <__ascii_wctomb+0x14>
 800f12a:	228a      	movs	r2, #138	@ 0x8a
 800f12c:	601a      	str	r2, [r3, #0]
 800f12e:	f04f 30ff 	mov.w	r0, #4294967295
 800f132:	4770      	bx	lr
 800f134:	700a      	strb	r2, [r1, #0]
 800f136:	2001      	movs	r0, #1
 800f138:	4770      	bx	lr
	...

0800f13c <fiprintf>:
 800f13c:	b40e      	push	{r1, r2, r3}
 800f13e:	b503      	push	{r0, r1, lr}
 800f140:	4601      	mov	r1, r0
 800f142:	ab03      	add	r3, sp, #12
 800f144:	4805      	ldr	r0, [pc, #20]	@ (800f15c <fiprintf+0x20>)
 800f146:	f853 2b04 	ldr.w	r2, [r3], #4
 800f14a:	6800      	ldr	r0, [r0, #0]
 800f14c:	9301      	str	r3, [sp, #4]
 800f14e:	f7ff fd4b 	bl	800ebe8 <_vfiprintf_r>
 800f152:	b002      	add	sp, #8
 800f154:	f85d eb04 	ldr.w	lr, [sp], #4
 800f158:	b003      	add	sp, #12
 800f15a:	4770      	bx	lr
 800f15c:	20000170 	.word	0x20000170

0800f160 <abort>:
 800f160:	b508      	push	{r3, lr}
 800f162:	2006      	movs	r0, #6
 800f164:	f000 f82c 	bl	800f1c0 <raise>
 800f168:	2001      	movs	r0, #1
 800f16a:	f7f2 fd93 	bl	8001c94 <_exit>

0800f16e <_raise_r>:
 800f16e:	291f      	cmp	r1, #31
 800f170:	b538      	push	{r3, r4, r5, lr}
 800f172:	4605      	mov	r5, r0
 800f174:	460c      	mov	r4, r1
 800f176:	d904      	bls.n	800f182 <_raise_r+0x14>
 800f178:	2316      	movs	r3, #22
 800f17a:	6003      	str	r3, [r0, #0]
 800f17c:	f04f 30ff 	mov.w	r0, #4294967295
 800f180:	bd38      	pop	{r3, r4, r5, pc}
 800f182:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f184:	b112      	cbz	r2, 800f18c <_raise_r+0x1e>
 800f186:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f18a:	b94b      	cbnz	r3, 800f1a0 <_raise_r+0x32>
 800f18c:	4628      	mov	r0, r5
 800f18e:	f000 f831 	bl	800f1f4 <_getpid_r>
 800f192:	4622      	mov	r2, r4
 800f194:	4601      	mov	r1, r0
 800f196:	4628      	mov	r0, r5
 800f198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f19c:	f000 b818 	b.w	800f1d0 <_kill_r>
 800f1a0:	2b01      	cmp	r3, #1
 800f1a2:	d00a      	beq.n	800f1ba <_raise_r+0x4c>
 800f1a4:	1c59      	adds	r1, r3, #1
 800f1a6:	d103      	bne.n	800f1b0 <_raise_r+0x42>
 800f1a8:	2316      	movs	r3, #22
 800f1aa:	6003      	str	r3, [r0, #0]
 800f1ac:	2001      	movs	r0, #1
 800f1ae:	e7e7      	b.n	800f180 <_raise_r+0x12>
 800f1b0:	2100      	movs	r1, #0
 800f1b2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f1b6:	4620      	mov	r0, r4
 800f1b8:	4798      	blx	r3
 800f1ba:	2000      	movs	r0, #0
 800f1bc:	e7e0      	b.n	800f180 <_raise_r+0x12>
	...

0800f1c0 <raise>:
 800f1c0:	4b02      	ldr	r3, [pc, #8]	@ (800f1cc <raise+0xc>)
 800f1c2:	4601      	mov	r1, r0
 800f1c4:	6818      	ldr	r0, [r3, #0]
 800f1c6:	f7ff bfd2 	b.w	800f16e <_raise_r>
 800f1ca:	bf00      	nop
 800f1cc:	20000170 	.word	0x20000170

0800f1d0 <_kill_r>:
 800f1d0:	b538      	push	{r3, r4, r5, lr}
 800f1d2:	4d07      	ldr	r5, [pc, #28]	@ (800f1f0 <_kill_r+0x20>)
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	4604      	mov	r4, r0
 800f1d8:	4608      	mov	r0, r1
 800f1da:	4611      	mov	r1, r2
 800f1dc:	602b      	str	r3, [r5, #0]
 800f1de:	f7f2 fd49 	bl	8001c74 <_kill>
 800f1e2:	1c43      	adds	r3, r0, #1
 800f1e4:	d102      	bne.n	800f1ec <_kill_r+0x1c>
 800f1e6:	682b      	ldr	r3, [r5, #0]
 800f1e8:	b103      	cbz	r3, 800f1ec <_kill_r+0x1c>
 800f1ea:	6023      	str	r3, [r4, #0]
 800f1ec:	bd38      	pop	{r3, r4, r5, pc}
 800f1ee:	bf00      	nop
 800f1f0:	20001048 	.word	0x20001048

0800f1f4 <_getpid_r>:
 800f1f4:	f7f2 bd36 	b.w	8001c64 <_getpid>

0800f1f8 <_init>:
 800f1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1fa:	bf00      	nop
 800f1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1fe:	bc08      	pop	{r3}
 800f200:	469e      	mov	lr, r3
 800f202:	4770      	bx	lr

0800f204 <_fini>:
 800f204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f206:	bf00      	nop
 800f208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f20a:	bc08      	pop	{r3}
 800f20c:	469e      	mov	lr, r3
 800f20e:	4770      	bx	lr
