
Force Feedback Yoke.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4e4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  0800d688  0800d688  0000e688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da78  0800da78  0000f2d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800da78  0800da78  0000ea78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da80  0800da80  0000f2d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da80  0800da80  0000ea80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800da84  0800da84  0000ea84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d4  20000000  0800da88  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f04  200002d4  0800dd5c  0000f2d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011d8  0800dd5c  000101d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f2d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001db5b  00000000  00000000  0000f304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d7e  00000000  00000000  0002ce5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f8  00000000  00000000  00031be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013d5  00000000  00000000  000335d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c03b  00000000  00000000  000349ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000225cc  00000000  00000000  000509e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098234  00000000  00000000  00072fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010b1e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ac0  00000000  00000000  0010b22c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  00112cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d4 	.word	0x200002d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d66c 	.word	0x0800d66c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d8 	.word	0x200002d8
 80001dc:	0800d66c 	.word	0x0800d66c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <ButtonInit>:
#include "button.h"
#include <stddef.h>

void ButtonInit(Button_t *button, int (*ButtonReadState)(Button_t *button)) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]

	button->ButtonReadState = ButtonReadState;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	601a      	str	r2, [r3, #0]
	button->ButtonStateChangedCallback = NULL;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	605a      	str	r2, [r3, #4]

	button->state = BUTTON_STATE_IDLE;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	741a      	strb	r2, [r3, #16]
	button->pressed = false;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	721a      	strb	r2, [r3, #8]
	button->previouslyPressed = button->pressed;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	7a1a      	ldrb	r2, [r3, #8]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	725a      	strb	r2, [r3, #9]
	button->steadyCount = 0;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]


}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <ButtonIsPressed>:

bool ButtonIsPressed(Button_t *button) {
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	return button->pressed;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	7a1b      	ldrb	r3, [r3, #8]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <ButtonSetStateChangedCallback>:
	// Update previous state for next iteration
	button->previouslyPressed = readingPressed;
}

void ButtonSetStateChangedCallback(Button_t *button,
		void (*ButtonStateChangedCallback)(Button_t *button)) {
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
	button->ButtonStateChangedCallback = ButtonStateChangedCallback;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <EncoderInit>:
 *      Author: Jennyston
 */

#include "encoder.h"

void EncoderInit(Encoder_t *encoder, EncoderInterface_t interface) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	e883 0006 	stmia.w	r3, {r1, r2}
	encoder->interface = interface;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f30:	e882 0003 	stmia.w	r2, {r0, r1}

	encoder->countPerRev = ENCODER_DEFAULT_COUNT_PER_REV;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f3a:	611a      	str	r2, [r3, #16]
	encoder->totalCount = GetEncoderSensorCount();
 8000f3c:	f001 f8ec 	bl	8002118 <GetEncoderSensorCount>
 8000f40:	4602      	mov	r2, r0
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	609a      	str	r2, [r3, #8]
	encoder->prevHardCount = encoder->totalCount;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	60da      	str	r2, [r3, #12]
	encoder->speed = 0;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	615a      	str	r2, [r3, #20]
}
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <EncoderGetCount>:

int EncoderGetCount(Encoder_t *encoder) {
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
	return encoder->totalCount;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <FFBInit>:

#include "utilities/utilities.h"
#include "force_feedback_controller.h"
#include "delay.h"

void FFBInit(FFBController_t *ffb, Motor_t *motor, Encoder_t *encoder) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
	ffb->state = FFB_STOPPED;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2200      	movs	r2, #0
 8000f88:	731a      	strb	r2, [r3, #12]
	ffb->homingState = FFB_UNHOMED;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	735a      	strb	r2, [r3, #13]

	ffb->motor = motor;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	601a      	str	r2, [r3, #0]
	ffb->encoder = encoder;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	609a      	str	r2, [r3, #8]

	ffb->constantGain = 0;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	615a      	str	r2, [r3, #20]
	ffb->periodicGain = 0;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
	ffb->springGain = 165;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4a20      	ldr	r2, [pc, #128]	@ (8001030 <FFBInit+0xb8>)
 8000fb0:	61da      	str	r2, [r3, #28]
	ffb->damperGain = 2;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fb8:	621a      	str	r2, [r3, #32]

	ffb->gain = 1;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000fc0:	611a      	str	r2, [r3, #16]
	ffb->motorKtConstant = 0.0265;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8001034 <FFBInit+0xbc>)
 8000fc6:	605a      	str	r2, [r3, #4]
	ffb->lockAngle = 90;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4a1b      	ldr	r2, [pc, #108]	@ (8001038 <FFBInit+0xc0>)
 8000fcc:	625a      	str	r2, [r3, #36]	@ 0x24

	// Initialize all forces to 0
	FFBSetConstantStrength(ffb, 0);
 8000fce:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 800103c <FFBInit+0xc4>
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f000 f834 	bl	8001040 <FFBSetConstantStrength>
	FFBPeriodicInit(&ffb->param.periodic, 0, 0, 0);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	332c      	adds	r3, #44	@ 0x2c
 8000fdc:	ed9f 1a17 	vldr	s2, [pc, #92]	@ 800103c <FFBInit+0xc4>
 8000fe0:	eddf 0a16 	vldr	s1, [pc, #88]	@ 800103c <FFBInit+0xc4>
 8000fe4:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800103c <FFBInit+0xc4>
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f863 	bl	80010b4 <FFBPeriodicInit>
	FFBSpringParam_t spring = {
 8000fee:	f04f 0300 	mov.w	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	f04f 0300 	mov.w	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
			.offset = 0,
			.strength = 0,
			.minimumSpringForce = 0
	};
	FFBSetSpringParams(ffb, spring);
 8001000:	edd7 6a05 	vldr	s13, [r7, #20]
 8001004:	ed97 7a06 	vldr	s14, [r7, #24]
 8001008:	edd7 7a07 	vldr	s15, [r7, #28]
 800100c:	eeb0 0a66 	vmov.f32	s0, s13
 8001010:	eef0 0a47 	vmov.f32	s1, s14
 8001014:	eeb0 1a67 	vmov.f32	s2, s15
 8001018:	68f8      	ldr	r0, [r7, #12]
 800101a:	f000 f820 	bl	800105e <FFBSetSpringParams>
	FFBSetDamper(ffb, 0);
 800101e:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800103c <FFBInit+0xc4>
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f000 f837 	bl	8001096 <FFBSetDamper>
}
 8001028:	bf00      	nop
 800102a:	3720      	adds	r7, #32
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	43250000 	.word	0x43250000
 8001034:	3cd91687 	.word	0x3cd91687
 8001038:	42b40000 	.word	0x42b40000
 800103c:	00000000 	.word	0x00000000

08001040 <FFBSetConstantStrength>:

void FFBSetConstantStrength(FFBController_t *ffb, float constantStrength) {
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	ed87 0a00 	vstr	s0, [r7]
	ffb->param.constantStrength = constantStrength;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	683a      	ldr	r2, [r7, #0]
 8001050:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <FFBSetSpringParams>:

void FFBSetPeriodicParams(FFBController_t *ffb, FFBPeriodicParam_t periodic) {
	ffb->param.periodic = periodic;
}

void FFBSetSpringParams(FFBController_t *ffb, FFBSpringParam_t spring) {
 800105e:	b480      	push	{r7}
 8001060:	b085      	sub	sp, #20
 8001062:	af00      	add	r7, sp, #0
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	eef0 6a40 	vmov.f32	s13, s0
 800106a:	eeb0 7a60 	vmov.f32	s14, s1
 800106e:	eef0 7a41 	vmov.f32	s15, s2
 8001072:	edc7 6a00 	vstr	s13, [r7]
 8001076:	ed87 7a01 	vstr	s14, [r7, #4]
 800107a:	edc7 7a02 	vstr	s15, [r7, #8]
	ffb->param.spring = spring;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	333c      	adds	r3, #60	@ 0x3c
 8001082:	463a      	mov	r2, r7
 8001084:	ca07      	ldmia	r2, {r0, r1, r2}
 8001086:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800108a:	bf00      	nop
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <FFBSetDamper>:

void FFBSetDamper(FFBController_t *ffb, float damperStrength) {
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	ed87 0a00 	vstr	s0, [r7]
	ffb->param.damperStrength = damperStrength;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <FFBPeriodicInit>:
#include <math.h>

#define PI 3.141592653589793f

void FFBPeriodicInit(FFBPeriodicParam_t *peri, float amplitude, float frequency,
		float offset) {
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	ed87 0a02 	vstr	s0, [r7, #8]
 80010c0:	edc7 0a01 	vstr	s1, [r7, #4]
 80010c4:	ed87 1a00 	vstr	s2, [r7]
	// Initialize FFB periodic parameters
	peri->amplitude = amplitude;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	601a      	str	r2, [r3, #0]
	peri->frequency = frequency;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	605a      	str	r2, [r3, #4]
	peri->offset = offset;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	683a      	ldr	r2, [r7, #0]
 80010d8:	609a      	str	r2, [r3, #8]

	// Reset time to 0
	peri->time = 0;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <MotorInit>:

#include "motor.h"
#include "utilities/utilities.h"
#include <stdbool.h>

void MotorInit(Motor_t *motor, MotorInterface_t interface) {
 80010ec:	b490      	push	{r4, r7}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	4638      	mov	r0, r7
 80010f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	motor->interface = interface;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	461c      	mov	r4, r3
 80010fe:	463b      	mov	r3, r7
 8001100:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001104:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bc90      	pop	{r4, r7}
 8001110:	4770      	bx	lr

08001112 <UsbReportInit>:

#include "usb_report.h"
#include <string.h>


void UsbReportInit(UsbReport_t *report, PacketParser_t *parser) {
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	6039      	str	r1, [r7, #0]
	report->reportId = 0;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]

	// Clear report data
	memset(report->data, 0, USB_REPORT_MAX_SIZE);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3301      	adds	r3, #1
 8001126:	2240      	movs	r2, #64	@ 0x40
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f00a fc12 	bl	800b954 <memset>

	report->currentParseIndex = 0;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	//report->endianness = inEndian;
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <UsbReportLoad>:

void UsbReportLoad(UsbReport_t *report, uint8_t *buffer, uint16_t size) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	4613      	mov	r3, r2
 800114c:	80fb      	strh	r3, [r7, #6]
	// First index contains report id
	report->reportId = *buffer;
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	781a      	ldrb	r2, [r3, #0]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	701a      	strb	r2, [r3, #0]

	// Following indices store data
	// Copy to report data
	memcpy(report->data, buffer+1, size-1);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	1c58      	adds	r0, r3, #1
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	1c59      	adds	r1, r3, #1
 800115e:	88fb      	ldrh	r3, [r7, #6]
 8001160:	3b01      	subs	r3, #1
 8001162:	461a      	mov	r2, r3
 8001164:	f00a fc75 	bl	800ba52 <memcpy>

	report->currentParseIndex = 0;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2200      	movs	r2, #0
 800116c:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <UsbReportParseNextFloat>:
	report->currentParseIndex += sizeof(uint32_t);

	return value;
}

float UsbReportParseNextFloat(UsbReport_t *report) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	uint8_t *data = report->data + report->currentParseIndex;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3301      	adds	r3, #1
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	f8b2 2042 	ldrh.w	r2, [r2, #66]	@ 0x42
 800118a:	4413      	add	r3, r2
 800118c:	60fb      	str	r3, [r7, #12]
	float value;
	ParseBytesEndian(&value, data, sizeof(float), report->endianness);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001194:	f107 0008 	add.w	r0, r7, #8
 8001198:	2204      	movs	r2, #4
 800119a:	68f9      	ldr	r1, [r7, #12]
 800119c:	f000 f810 	bl	80011c0 <ParseBytesEndian>

	// Increment parse index for next parse
	report->currentParseIndex += sizeof(float);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80011a6:	3304      	adds	r3, #4
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

	return value;
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	ee07 3a90 	vmov	s15, r3
}
 80011b6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <ParseBytesEndian>:

void ParseBytesEndian(void *dest, uint8_t *source, uint8_t length,
		int endianess) {
 80011c0:	b480      	push	{r7}
 80011c2:	b087      	sub	sp, #28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	4613      	mov	r3, r2
 80011ce:	71fb      	strb	r3, [r7, #7]
	// Parse based on endianess
	switch(endianess) {
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d018      	beq.n	8001208 <ParseBytesEndian+0x48>
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d128      	bne.n	800122e <ParseBytesEndian+0x6e>
		case USB_REPORT_IN_BIG_ENDIAN:
			for(int i = 0; i < length; i++) {
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	e00d      	b.n	80011fe <ParseBytesEndian+0x3e>
				*((uint8_t *)dest+i) = *(source + length-i-1);
 80011e2:	79fa      	ldrb	r2, [r7, #7]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	3b01      	subs	r3, #1
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	441a      	add	r2, r3
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	68f9      	ldr	r1, [r7, #12]
 80011f2:	440b      	add	r3, r1
 80011f4:	7812      	ldrb	r2, [r2, #0]
 80011f6:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < length; i++) {
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	3301      	adds	r3, #1
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	429a      	cmp	r2, r3
 8001204:	dbed      	blt.n	80011e2 <ParseBytesEndian+0x22>
			}
			break;
 8001206:	e013      	b.n	8001230 <ParseBytesEndian+0x70>
		case USB_REPORT_IN_LITTLE_ENDIAN:
			for(int i = 0; i < length; i++) {
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	e00a      	b.n	8001224 <ParseBytesEndian+0x64>
				*((uint8_t *)dest+i) = *(source+i);
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	68ba      	ldr	r2, [r7, #8]
 8001212:	441a      	add	r2, r3
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	68f9      	ldr	r1, [r7, #12]
 8001218:	440b      	add	r3, r1
 800121a:	7812      	ldrb	r2, [r2, #0]
 800121c:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < length; i++) {
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	3301      	adds	r3, #1
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	429a      	cmp	r2, r3
 800122a:	dbf0      	blt.n	800120e <ParseBytesEndian+0x4e>
			}
			break;
 800122c:	e000      	b.n	8001230 <ParseBytesEndian+0x70>
		default:
			// Invalid condition
			break;
 800122e:	bf00      	nop
	}
}
 8001230:	bf00      	nop
 8001232:	371c      	adds	r7, #28
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <Constrain>:
int32_t Map(int32_t in, int32_t inMin, int32_t inMax, int32_t outMin,
		int32_t outMax) {
	return (((int64_t)(in - inMin)*(outMax - outMin))/(inMax - inMin)) + outMin;
}

int32_t Constrain(int32_t value, int32_t min, int32_t max) {
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
	if(value < min) {
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	429a      	cmp	r2, r3
 800124e:	da01      	bge.n	8001254 <Constrain+0x18>
		return min;
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	e006      	b.n	8001262 <Constrain+0x26>
	}
	else if(value > max) {
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	429a      	cmp	r2, r3
 800125a:	dd01      	ble.n	8001260 <Constrain+0x24>
		return max;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	e000      	b.n	8001262 <Constrain+0x26>
	}
	else {
		return value;
 8001260:	68fb      	ldr	r3, [r7, #12]
	}
}
 8001262:	4618      	mov	r0, r3
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <ButtonStateChangedCallback>:
// Private function prototypes
void ProcessEncoders(int deltaTimeUs);
void CommandLineMode(void);

// Callbacks
void ButtonStateChangedCallback(Button_t *button) {
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
	if(button == &btnAccept) {
		// Add implementation for accept button here
	}
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <ButtonReadState>:

int ButtonReadState(Button_t *button) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	if(button == &btnAccept) {
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a0c      	ldr	r2, [pc, #48]	@ (80012c0 <ButtonReadState+0x3c>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d10f      	bne.n	80012b4 <ButtonReadState+0x30>
		if(ButtonIsPressed(&btnAccept)) {
 8001294:	480a      	ldr	r0, [pc, #40]	@ (80012c0 <ButtonReadState+0x3c>)
 8001296:	f7ff fe25 	bl	8000ee4 <ButtonIsPressed>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d009      	beq.n	80012b4 <ButtonReadState+0x30>
			return GPIOGetState(&gpioAccept) == GPIO_HIGH ? 1 : 0;
 80012a0:	4808      	ldr	r0, [pc, #32]	@ (80012c4 <ButtonReadState+0x40>)
 80012a2:	f001 f8eb 	bl	800247c <GPIOGetState>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	bf0c      	ite	eq
 80012ac:	2301      	moveq	r3, #1
 80012ae:	2300      	movne	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	e000      	b.n	80012b6 <ButtonReadState+0x32>
		}
	}

	return 0;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200003c0 	.word	0x200003c0
 80012c4:	200004b8 	.word	0x200004b8

080012c8 <ApplicationInit>:

void ApplicationInit(void) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0


	UsbReportInit(&usbReport, USB_REPORT_IN_LITTLE_ENDIAN);
 80012cc:	2100      	movs	r1, #0
 80012ce:	480f      	ldr	r0, [pc, #60]	@ (800130c <ApplicationInit+0x44>)
 80012d0:	f7ff ff1f 	bl	8001112 <UsbReportInit>

	ButtonInit(&btnAccept, &ButtonReadState);
 80012d4:	490e      	ldr	r1, [pc, #56]	@ (8001310 <ApplicationInit+0x48>)
 80012d6:	480f      	ldr	r0, [pc, #60]	@ (8001314 <ApplicationInit+0x4c>)
 80012d8:	f7ff fde6 	bl	8000ea8 <ButtonInit>

	FFBInit(&ffbPitch, &pitchMotor, &pitchEncoder);
 80012dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001318 <ApplicationInit+0x50>)
 80012de:	490f      	ldr	r1, [pc, #60]	@ (800131c <ApplicationInit+0x54>)
 80012e0:	480f      	ldr	r0, [pc, #60]	@ (8001320 <ApplicationInit+0x58>)
 80012e2:	f7ff fe49 	bl	8000f78 <FFBInit>
	FFBInit(&ffbRoll, &rollMotor, &rollEncoder);
 80012e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001324 <ApplicationInit+0x5c>)
 80012e8:	490f      	ldr	r1, [pc, #60]	@ (8001328 <ApplicationInit+0x60>)
 80012ea:	4810      	ldr	r0, [pc, #64]	@ (800132c <ApplicationInit+0x64>)
 80012ec:	f7ff fe44 	bl	8000f78 <FFBInit>

	printf("Ready!\r\n");
 80012f0:	480f      	ldr	r0, [pc, #60]	@ (8001330 <ApplicationInit+0x68>)
 80012f2:	f00a fa4f 	bl	800b794 <puts>
//	}
//	while(!ButtonIsPressed(&btnAccept)) {
//	}

	// Register callback for future presses
	ButtonSetStateChangedCallback(&btnAccept, &ButtonStateChangedCallback);
 80012f6:	490f      	ldr	r1, [pc, #60]	@ (8001334 <ApplicationInit+0x6c>)
 80012f8:	4806      	ldr	r0, [pc, #24]	@ (8001314 <ApplicationInit+0x4c>)
 80012fa:	f7ff fdff 	bl	8000efc <ButtonSetStateChangedCallback>

	// Indicate application is running
	GPIOSetState(&gpioStatus, GPIO_HIGH);
 80012fe:	2100      	movs	r1, #0
 8001300:	480d      	ldr	r0, [pc, #52]	@ (8001338 <ApplicationInit+0x70>)
 8001302:	f001 f8d7 	bl	80024b4 <GPIOSetState>
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000378 	.word	0x20000378
 8001310:	08001285 	.word	0x08001285
 8001314:	200003c0 	.word	0x200003c0
 8001318:	20000470 	.word	0x20000470
 800131c:	200004a0 	.word	0x200004a0
 8001320:	200003d4 	.word	0x200003d4
 8001324:	20000488 	.word	0x20000488
 8001328:	200004ac 	.word	0x200004ac
 800132c:	20000420 	.word	0x20000420
 8001330:	0800d688 	.word	0x0800d688
 8001334:	0800126f 	.word	0x0800126f
 8001338:	200004c0 	.word	0x200004c0

0800133c <ApplicationRun>:

void ApplicationRun(void) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0

	int32_t periFrequency = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
	float periAmplitude = 0.0f;
 8001346:	f04f 0300 	mov.w	r3, #0
 800134a:	60bb      	str	r3, [r7, #8]
	float sprStrength = 0.0f;
 800134c:	f04f 0300 	mov.w	r3, #0
 8001350:	607b      	str	r3, [r7, #4]

	// Application is now running in loop
	appRunning = true;
 8001352:	4b39      	ldr	r3, [pc, #228]	@ (8001438 <ApplicationRun+0xfc>)
 8001354:	2201      	movs	r2, #1
 8001356:	701a      	strb	r2, [r3, #0]
	while(1) {
		if(flag_rx == 1){
 8001358:	4b38      	ldr	r3, [pc, #224]	@ (800143c <ApplicationRun+0x100>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d148      	bne.n	80013f2 <ApplicationRun+0xb6>

			flag_rx = 0;
 8001360:	4b36      	ldr	r3, [pc, #216]	@ (800143c <ApplicationRun+0x100>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]

			UsbReportLoad(&usbReport, report_buffer,
 8001366:	220d      	movs	r2, #13
 8001368:	4935      	ldr	r1, [pc, #212]	@ (8001440 <ApplicationRun+0x104>)
 800136a:	4836      	ldr	r0, [pc, #216]	@ (8001444 <ApplicationRun+0x108>)
 800136c:	f7ff fee8 	bl	8001140 <UsbReportLoad>
					USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
			sprStrength = UsbReportParseNextFloat(&usbReport);
 8001370:	4834      	ldr	r0, [pc, #208]	@ (8001444 <ApplicationRun+0x108>)
 8001372:	f7ff ff01 	bl	8001178 <UsbReportParseNextFloat>
 8001376:	ed87 0a01 	vstr	s0, [r7, #4]
			periAmplitude = UsbReportParseNextFloat(&usbReport);
 800137a:	4832      	ldr	r0, [pc, #200]	@ (8001444 <ApplicationRun+0x108>)
 800137c:	f7ff fefc 	bl	8001178 <UsbReportParseNextFloat>
 8001380:	ed87 0a02 	vstr	s0, [r7, #8]
			periFrequency = UsbReportParseNextFloat(&usbReport);
 8001384:	482f      	ldr	r0, [pc, #188]	@ (8001444 <ApplicationRun+0x108>)
 8001386:	f7ff fef7 	bl	8001178 <UsbReportParseNextFloat>
 800138a:	eef0 7a40 	vmov.f32	s15, s0
 800138e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001392:	ee17 3a90 	vmov	r3, s15
 8001396:	60fb      	str	r3, [r7, #12]

			// Prepare and send aileron axis
					  int16_t aileron = (int16_t)Constrain(((
							  EncoderGetCount(&rollEncoder)/4095.0f) *
 8001398:	482b      	ldr	r0, [pc, #172]	@ (8001448 <ApplicationRun+0x10c>)
 800139a:	f7ff fde0 	bl	8000f5e <EncoderGetCount>
 800139e:	ee07 0a90 	vmov	s15, r0
 80013a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013a6:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800144c <ApplicationRun+0x110>
 80013aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ae:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001450 <ApplicationRun+0x114>
 80013b2:	ee67 7a87 	vmul.f32	s15, s15, s14
					  int16_t aileron = (int16_t)Constrain(((
 80013b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ba:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80013be:	4925      	ldr	r1, [pc, #148]	@ (8001454 <ApplicationRun+0x118>)
 80013c0:	ee17 0a90 	vmov	r0, s15
 80013c4:	f7ff ff3a 	bl	800123c <Constrain>
 80013c8:	4603      	mov	r3, r0
 80013ca:	807b      	strh	r3, [r7, #2]
							  32767), -32767, 32767);

			// Set report ID to 1
			reportTxBuffer[0] = 0x01;
 80013cc:	4b22      	ldr	r3, [pc, #136]	@ (8001458 <ApplicationRun+0x11c>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
			reportTxBuffer[1] = aileron & 0xFF;
 80013d2:	887b      	ldrh	r3, [r7, #2]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4b20      	ldr	r3, [pc, #128]	@ (8001458 <ApplicationRun+0x11c>)
 80013d8:	705a      	strb	r2, [r3, #1]
			reportTxBuffer[2] = aileron >> 8;
 80013da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013de:	121b      	asrs	r3, r3, #8
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001458 <ApplicationRun+0x11c>)
 80013e6:	709a      	strb	r2, [r3, #2]

			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, reportTxBuffer, 3);
 80013e8:	2203      	movs	r2, #3
 80013ea:	491b      	ldr	r1, [pc, #108]	@ (8001458 <ApplicationRun+0x11c>)
 80013ec:	481b      	ldr	r0, [pc, #108]	@ (800145c <ApplicationRun+0x120>)
 80013ee:	f007 fb95 	bl	8008b1c <USBD_CUSTOM_HID_SendReport>
		}

		if(flag == 1) {
 80013f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001460 <ApplicationRun+0x124>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d107      	bne.n	800140a <ApplicationRun+0xce>
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, txBuffer, 64);
 80013fa:	2240      	movs	r2, #64	@ 0x40
 80013fc:	4919      	ldr	r1, [pc, #100]	@ (8001464 <ApplicationRun+0x128>)
 80013fe:	4817      	ldr	r0, [pc, #92]	@ (800145c <ApplicationRun+0x120>)
 8001400:	f007 fb8c 	bl	8008b1c <USBD_CUSTOM_HID_SendReport>

			flag = 0;
 8001404:	4b16      	ldr	r3, [pc, #88]	@ (8001460 <ApplicationRun+0x124>)
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
		}

		angle = (EncoderGetCount(&rollEncoder)/49152.0f)*360.0f;
 800140a:	480f      	ldr	r0, [pc, #60]	@ (8001448 <ApplicationRun+0x10c>)
 800140c:	f7ff fda7 	bl	8000f5e <EncoderGetCount>
 8001410:	ee07 0a90 	vmov	s15, r0
 8001414:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001418:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001468 <ApplicationRun+0x12c>
 800141c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001420:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800146c <ApplicationRun+0x130>
 8001424:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001428:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <ApplicationRun+0x134>)
 800142a:	edc3 7a00 	vstr	s15, [r3]

		HAL_Delay(5);
 800142e:	2005      	movs	r0, #5
 8001430:	f001 f8f8 	bl	8002624 <HAL_Delay>
		if(flag_rx == 1){
 8001434:	e790      	b.n	8001358 <ApplicationRun+0x1c>
 8001436:	bf00      	nop
 8001438:	200003be 	.word	0x200003be
 800143c:	20000375 	.word	0x20000375
 8001440:	20000334 	.word	0x20000334
 8001444:	20000378 	.word	0x20000378
 8001448:	20000488 	.word	0x20000488
 800144c:	457ff000 	.word	0x457ff000
 8001450:	46fffe00 	.word	0x46fffe00
 8001454:	ffff8001 	.word	0xffff8001
 8001458:	200002f0 	.word	0x200002f0
 800145c:	200006a4 	.word	0x200006a4
 8001460:	20000374 	.word	0x20000374
 8001464:	200002f4 	.word	0x200002f4
 8001468:	47400000 	.word	0x47400000
 800146c:	43b40000 	.word	0x43b40000
 8001470:	2000046c 	.word	0x2000046c

08001474 <BspInit>:
void SetupEncoders(void);
void SetupMotors(void);
void SetupButtons(void);
void SetupLEDs(void);

void BspInit(void) {
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	SetupEncoders();
 8001478:	f000 f812 	bl	80014a0 <SetupEncoders>
	SetupMotors();
 800147c:	f000 f844 	bl	8001508 <SetupMotors>
	SetupButtons();
 8001480:	f000 f876 	bl	8001570 <SetupButtons>
	SetupLEDs();
 8001484:	f000 f882 	bl	800158c <SetupLEDs>

	// --- Timer setup ----
	// Motor PWM timer
	HAL_TIM_Base_Start_IT(&htim3);
 8001488:	4803      	ldr	r0, [pc, #12]	@ (8001498 <BspInit+0x24>)
 800148a:	f004 fa91 	bl	80059b0 <HAL_TIM_Base_Start_IT>
	// Update timer
	HAL_TIM_Base_Start_IT(&htim10);
 800148e:	4803      	ldr	r0, [pc, #12]	@ (800149c <BspInit+0x28>)
 8001490:	f004 fa8e 	bl	80059b0 <HAL_TIM_Base_Start_IT>
	// Control loop timer
	//HAL_TIM_Base_Start_IT(&htim11);
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200005c0 	.word	0x200005c0
 800149c:	20000608 	.word	0x20000608

080014a0 <SetupEncoders>:

void SetupEncoders(void) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
	// Pitch
	AS5600Init(&pitchAS5600, &hi2c1);
 80014a6:	4912      	ldr	r1, [pc, #72]	@ (80014f0 <SetupEncoders+0x50>)
 80014a8:	4812      	ldr	r0, [pc, #72]	@ (80014f4 <SetupEncoders+0x54>)
 80014aa:	f000 fdb9 	bl	8002020 <AS5600Init>
	EncoderInterface_t pitchEncoderI;
	AS5600InterfaceInit(&pitchEncoderI, &pitchAS5600);
 80014ae:	f107 0308 	add.w	r3, r7, #8
 80014b2:	4910      	ldr	r1, [pc, #64]	@ (80014f4 <SetupEncoders+0x54>)
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 fe1b 	bl	80020f0 <AS5600InterfaceInit>
	EncoderInit(&pitchEncoder, pitchEncoderI);
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	e893 0006 	ldmia.w	r3, {r1, r2}
 80014c2:	480d      	ldr	r0, [pc, #52]	@ (80014f8 <SetupEncoders+0x58>)
 80014c4:	f7ff fd28 	bl	8000f18 <EncoderInit>

	// Roll
	AS5600Init(&rollAS5600, &hi2c3);
 80014c8:	490c      	ldr	r1, [pc, #48]	@ (80014fc <SetupEncoders+0x5c>)
 80014ca:	480d      	ldr	r0, [pc, #52]	@ (8001500 <SetupEncoders+0x60>)
 80014cc:	f000 fda8 	bl	8002020 <AS5600Init>
	EncoderInterface_t rollEncoderI;
	AS5600InterfaceInit(&rollEncoderI, &rollAS5600);
 80014d0:	463b      	mov	r3, r7
 80014d2:	490b      	ldr	r1, [pc, #44]	@ (8001500 <SetupEncoders+0x60>)
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 fe0b 	bl	80020f0 <AS5600InterfaceInit>
	EncoderInit(&rollEncoder, rollEncoderI);
 80014da:	463b      	mov	r3, r7
 80014dc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80014e0:	4808      	ldr	r0, [pc, #32]	@ (8001504 <SetupEncoders+0x64>)
 80014e2:	f7ff fd19 	bl	8000f18 <EncoderInit>
}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000518 	.word	0x20000518
 80014f4:	200004c8 	.word	0x200004c8
 80014f8:	20000470 	.word	0x20000470
 80014fc:	2000056c 	.word	0x2000056c
 8001500:	200004cc 	.word	0x200004cc
 8001504:	20000488 	.word	0x20000488

08001508 <SetupMotors>:

void SetupMotors(void) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
	// Pitch
	// Initialize driver
	BTS7960Init(&pitchDriver, &htim3, TIM_PITCH_F_CH, TIM_PITCH_R_CH);
 800150e:	2304      	movs	r3, #4
 8001510:	2200      	movs	r2, #0
 8001512:	4912      	ldr	r1, [pc, #72]	@ (800155c <SetupMotors+0x54>)
 8001514:	4812      	ldr	r0, [pc, #72]	@ (8001560 <SetupMotors+0x58>)
 8001516:	f000 fe0d 	bl	8002134 <BTS7960Init>

	// Set up interface
	MotorInterface_t pitchMotorI;
	BTS7960InterfaceInit(&pitchMotorI, &pitchDriver);
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	4910      	ldr	r1, [pc, #64]	@ (8001560 <SetupMotors+0x58>)
 8001520:	4618      	mov	r0, r3
 8001522:	f000 ff63 	bl	80023ec <BTS7960InterfaceInit>

	// Initialize motor
	MotorInit(&pitchMotor, pitchMotorI);
 8001526:	f107 030c 	add.w	r3, r7, #12
 800152a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800152c:	480d      	ldr	r0, [pc, #52]	@ (8001564 <SetupMotors+0x5c>)
 800152e:	f7ff fddd 	bl	80010ec <MotorInit>

	// Roll
	// Initialize driver
	BTS7960Init(&rollDriver, &htim3, TIM_ROLL_F_CH, TIM_ROLL_R_CH);
 8001532:	230c      	movs	r3, #12
 8001534:	2208      	movs	r2, #8
 8001536:	4909      	ldr	r1, [pc, #36]	@ (800155c <SetupMotors+0x54>)
 8001538:	480b      	ldr	r0, [pc, #44]	@ (8001568 <SetupMotors+0x60>)
 800153a:	f000 fdfb 	bl	8002134 <BTS7960Init>

	// Set up interface
	MotorInterface_t rollMotorI;
	BTS7960InterfaceInit(&rollMotorI, &rollDriver);
 800153e:	463b      	mov	r3, r7
 8001540:	4909      	ldr	r1, [pc, #36]	@ (8001568 <SetupMotors+0x60>)
 8001542:	4618      	mov	r0, r3
 8001544:	f000 ff52 	bl	80023ec <BTS7960InterfaceInit>

	// Initialize motor
	MotorInit(&rollMotor, rollMotorI);
 8001548:	463b      	mov	r3, r7
 800154a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800154c:	4807      	ldr	r0, [pc, #28]	@ (800156c <SetupMotors+0x64>)
 800154e:	f7ff fdcd 	bl	80010ec <MotorInit>
}
 8001552:	bf00      	nop
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200005c0 	.word	0x200005c0
 8001560:	200004d0 	.word	0x200004d0
 8001564:	200004a0 	.word	0x200004a0
 8001568:	200004f4 	.word	0x200004f4
 800156c:	200004ac 	.word	0x200004ac

08001570 <SetupButtons>:

void SetupButtons(void) {
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
	GPIOInit(&gpioAccept, BUTTON_ACCEPT_GPIO_Port, BUTTON_ACCEPT_Pin);
 8001574:	2201      	movs	r2, #1
 8001576:	4903      	ldr	r1, [pc, #12]	@ (8001584 <SetupButtons+0x14>)
 8001578:	4803      	ldr	r0, [pc, #12]	@ (8001588 <SetupButtons+0x18>)
 800157a:	f000 ff6c 	bl	8002456 <GPIOInit>
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40020000 	.word	0x40020000
 8001588:	200004b8 	.word	0x200004b8

0800158c <SetupLEDs>:

void SetupLEDs(void) {
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	GPIOInit(&gpioStatus, STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8001590:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001594:	4902      	ldr	r1, [pc, #8]	@ (80015a0 <SetupLEDs+0x14>)
 8001596:	4803      	ldr	r0, [pc, #12]	@ (80015a4 <SetupLEDs+0x18>)
 8001598:	f000 ff5d 	bl	8002456 <GPIOInit>
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40020800 	.word	0x40020800
 80015a4:	200004c0 	.word	0x200004c0

080015a8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80015b0:	1d39      	adds	r1, r7, #4
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	2201      	movs	r2, #1
 80015b8:	4803      	ldr	r0, [pc, #12]	@ (80015c8 <__io_putchar+0x20>)
 80015ba:	f005 f8db 	bl	8006774 <HAL_UART_Transmit>
  return ch;
 80015be:	687b      	ldr	r3, [r7, #4]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000650 	.word	0x20000650

080015cc <__io_getchar>:

GETCHAR_PROTOTYPE
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart1);
 80015d6:	2300      	movs	r3, #0
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <__io_getchar+0x48>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	603b      	str	r3, [r7, #0]
 80015e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <__io_getchar+0x48>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	603b      	str	r3, [r7, #0]
 80015ea:	683b      	ldr	r3, [r7, #0]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80015ec:	1df9      	adds	r1, r7, #7
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
 80015f2:	2201      	movs	r2, #1
 80015f4:	4807      	ldr	r0, [pc, #28]	@ (8001614 <__io_getchar+0x48>)
 80015f6:	f005 f948 	bl	800688a <HAL_UART_Receive>
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80015fa:	1df9      	adds	r1, r7, #7
 80015fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001600:	2201      	movs	r2, #1
 8001602:	4804      	ldr	r0, [pc, #16]	@ (8001614 <__io_getchar+0x48>)
 8001604:	f005 f8b6 	bl	8006774 <HAL_UART_Transmit>
  return ch;
 8001608:	79fb      	ldrb	r3, [r7, #7]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000650 	.word	0x20000650

08001618 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	if(htim == &htim10) {
		//ApplicationUpdate(1000);
	}
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001630:	f000 ff86 	bl	8002540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001634:	f000 f816 	bl	8001664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001638:	f000 f9be 	bl	80019b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800163c:	f000 f87a 	bl	8001734 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001640:	f000 f8a6 	bl	8001790 <MX_I2C3_Init>
  MX_TIM3_Init();
 8001644:	f000 f8d2 	bl	80017ec <MX_TIM3_Init>
  MX_TIM10_Init();
 8001648:	f000 f968 	bl	800191c <MX_TIM10_Init>
  MX_USART1_UART_Init();
 800164c:	f000 f98a 	bl	8001964 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8001650:	f008 febe 	bl	800a3d0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  BspInit();
 8001654:	f7ff ff0e 	bl	8001474 <BspInit>
  ApplicationInit();
 8001658:	f7ff fe36 	bl	80012c8 <ApplicationInit>
  ApplicationRun();
 800165c:	f7ff fe6e 	bl	800133c <ApplicationRun>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <main+0x34>

08001664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b094      	sub	sp, #80	@ 0x50
 8001668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166a:	f107 0320 	add.w	r3, r7, #32
 800166e:	2230      	movs	r2, #48	@ 0x30
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f00a f96e 	bl	800b954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001688:	2300      	movs	r3, #0
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	4b27      	ldr	r3, [pc, #156]	@ (800172c <SystemClock_Config+0xc8>)
 800168e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001690:	4a26      	ldr	r2, [pc, #152]	@ (800172c <SystemClock_Config+0xc8>)
 8001692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001696:	6413      	str	r3, [r2, #64]	@ 0x40
 8001698:	4b24      	ldr	r3, [pc, #144]	@ (800172c <SystemClock_Config+0xc8>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a4:	2300      	movs	r3, #0
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	4b21      	ldr	r3, [pc, #132]	@ (8001730 <SystemClock_Config+0xcc>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a20      	ldr	r2, [pc, #128]	@ (8001730 <SystemClock_Config+0xcc>)
 80016ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001730 <SystemClock_Config+0xcc>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016c0:	2301      	movs	r3, #1
 80016c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ca:	2302      	movs	r3, #2
 80016cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80016d4:	2319      	movs	r3, #25
 80016d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80016d8:	23c0      	movs	r3, #192	@ 0xc0
 80016da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016dc:	2302      	movs	r3, #2
 80016de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016e0:	2304      	movs	r3, #4
 80016e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e4:	f107 0320 	add.w	r3, r7, #32
 80016e8:	4618      	mov	r0, r3
 80016ea:	f003 fcb9 	bl	8005060 <HAL_RCC_OscConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016f4:	f000 f9ce 	bl	8001a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f8:	230f      	movs	r3, #15
 80016fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016fc:	2302      	movs	r3, #2
 80016fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001704:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001708:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	2103      	movs	r1, #3
 8001714:	4618      	mov	r0, r3
 8001716:	f003 ff1b 	bl	8005550 <HAL_RCC_ClockConfig>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001720:	f000 f9b8 	bl	8001a94 <Error_Handler>
  }
}
 8001724:	bf00      	nop
 8001726:	3750      	adds	r7, #80	@ 0x50
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40023800 	.word	0x40023800
 8001730:	40007000 	.word	0x40007000

08001734 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001738:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <MX_I2C1_Init+0x50>)
 800173a:	4a13      	ldr	r2, [pc, #76]	@ (8001788 <MX_I2C1_Init+0x54>)
 800173c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800173e:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <MX_I2C1_Init+0x50>)
 8001740:	4a12      	ldr	r2, [pc, #72]	@ (800178c <MX_I2C1_Init+0x58>)
 8001742:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001744:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <MX_I2C1_Init+0x50>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800174a:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <MX_I2C1_Init+0x50>)
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001750:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <MX_I2C1_Init+0x50>)
 8001752:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001756:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001758:	4b0a      	ldr	r3, [pc, #40]	@ (8001784 <MX_I2C1_Init+0x50>)
 800175a:	2200      	movs	r2, #0
 800175c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800175e:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <MX_I2C1_Init+0x50>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001764:	4b07      	ldr	r3, [pc, #28]	@ (8001784 <MX_I2C1_Init+0x50>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800176a:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <MX_I2C1_Init+0x50>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001770:	4804      	ldr	r0, [pc, #16]	@ (8001784 <MX_I2C1_Init+0x50>)
 8001772:	f001 fa43 	bl	8002bfc <HAL_I2C_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800177c:	f000 f98a 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000518 	.word	0x20000518
 8001788:	40005400 	.word	0x40005400
 800178c:	000186a0 	.word	0x000186a0

08001790 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001794:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <MX_I2C3_Init+0x50>)
 8001796:	4a13      	ldr	r2, [pc, #76]	@ (80017e4 <MX_I2C3_Init+0x54>)
 8001798:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800179a:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <MX_I2C3_Init+0x50>)
 800179c:	4a12      	ldr	r2, [pc, #72]	@ (80017e8 <MX_I2C3_Init+0x58>)
 800179e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	@ (80017e0 <MX_I2C3_Init+0x50>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	@ (80017e0 <MX_I2C3_Init+0x50>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	@ (80017e0 <MX_I2C3_Init+0x50>)
 80017ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017b2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017b4:	4b0a      	ldr	r3, [pc, #40]	@ (80017e0 <MX_I2C3_Init+0x50>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80017ba:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <MX_I2C3_Init+0x50>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017c0:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <MX_I2C3_Init+0x50>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017c6:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <MX_I2C3_Init+0x50>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017cc:	4804      	ldr	r0, [pc, #16]	@ (80017e0 <MX_I2C3_Init+0x50>)
 80017ce:	f001 fa15 	bl	8002bfc <HAL_I2C_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80017d8:	f000 f95c 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	2000056c 	.word	0x2000056c
 80017e4:	40005c00 	.word	0x40005c00
 80017e8:	000186a0 	.word	0x000186a0

080017ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08e      	sub	sp, #56	@ 0x38
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001800:	f107 0320 	add.w	r3, r7, #32
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
 8001818:	615a      	str	r2, [r3, #20]
 800181a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800181c:	4b3d      	ldr	r3, [pc, #244]	@ (8001914 <MX_TIM3_Init+0x128>)
 800181e:	4a3e      	ldr	r2, [pc, #248]	@ (8001918 <MX_TIM3_Init+0x12c>)
 8001820:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001822:	4b3c      	ldr	r3, [pc, #240]	@ (8001914 <MX_TIM3_Init+0x128>)
 8001824:	2200      	movs	r2, #0
 8001826:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001828:	4b3a      	ldr	r3, [pc, #232]	@ (8001914 <MX_TIM3_Init+0x128>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4800-1;
 800182e:	4b39      	ldr	r3, [pc, #228]	@ (8001914 <MX_TIM3_Init+0x128>)
 8001830:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8001834:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001836:	4b37      	ldr	r3, [pc, #220]	@ (8001914 <MX_TIM3_Init+0x128>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800183c:	4b35      	ldr	r3, [pc, #212]	@ (8001914 <MX_TIM3_Init+0x128>)
 800183e:	2280      	movs	r2, #128	@ 0x80
 8001840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001842:	4834      	ldr	r0, [pc, #208]	@ (8001914 <MX_TIM3_Init+0x128>)
 8001844:	f004 f864 	bl	8005910 <HAL_TIM_Base_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800184e:	f000 f921 	bl	8001a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001852:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001856:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001858:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800185c:	4619      	mov	r1, r3
 800185e:	482d      	ldr	r0, [pc, #180]	@ (8001914 <MX_TIM3_Init+0x128>)
 8001860:	f004 fb14 	bl	8005e8c <HAL_TIM_ConfigClockSource>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800186a:	f000 f913 	bl	8001a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800186e:	4829      	ldr	r0, [pc, #164]	@ (8001914 <MX_TIM3_Init+0x128>)
 8001870:	f004 f900 	bl	8005a74 <HAL_TIM_PWM_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800187a:	f000 f90b 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187e:	2300      	movs	r3, #0
 8001880:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001886:	f107 0320 	add.w	r3, r7, #32
 800188a:	4619      	mov	r1, r3
 800188c:	4821      	ldr	r0, [pc, #132]	@ (8001914 <MX_TIM3_Init+0x128>)
 800188e:	f004 fe9f 	bl	80065d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001898:	f000 f8fc 	bl	8001a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800189c:	2360      	movs	r3, #96	@ 0x60
 800189e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	2200      	movs	r2, #0
 80018b0:	4619      	mov	r1, r3
 80018b2:	4818      	ldr	r0, [pc, #96]	@ (8001914 <MX_TIM3_Init+0x128>)
 80018b4:	f004 fa28 	bl	8005d08 <HAL_TIM_PWM_ConfigChannel>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80018be:	f000 f8e9 	bl	8001a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	2204      	movs	r2, #4
 80018c6:	4619      	mov	r1, r3
 80018c8:	4812      	ldr	r0, [pc, #72]	@ (8001914 <MX_TIM3_Init+0x128>)
 80018ca:	f004 fa1d 	bl	8005d08 <HAL_TIM_PWM_ConfigChannel>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80018d4:	f000 f8de 	bl	8001a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	2208      	movs	r2, #8
 80018dc:	4619      	mov	r1, r3
 80018de:	480d      	ldr	r0, [pc, #52]	@ (8001914 <MX_TIM3_Init+0x128>)
 80018e0:	f004 fa12 	bl	8005d08 <HAL_TIM_PWM_ConfigChannel>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80018ea:	f000 f8d3 	bl	8001a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	220c      	movs	r2, #12
 80018f2:	4619      	mov	r1, r3
 80018f4:	4807      	ldr	r0, [pc, #28]	@ (8001914 <MX_TIM3_Init+0x128>)
 80018f6:	f004 fa07 	bl	8005d08 <HAL_TIM_PWM_ConfigChannel>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001900:	f000 f8c8 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001904:	4803      	ldr	r0, [pc, #12]	@ (8001914 <MX_TIM3_Init+0x128>)
 8001906:	f000 f9cd 	bl	8001ca4 <HAL_TIM_MspPostInit>

}
 800190a:	bf00      	nop
 800190c:	3738      	adds	r7, #56	@ 0x38
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200005c0 	.word	0x200005c0
 8001918:	40000400 	.word	0x40000400

0800191c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001920:	4b0e      	ldr	r3, [pc, #56]	@ (800195c <MX_TIM10_Init+0x40>)
 8001922:	4a0f      	ldr	r2, [pc, #60]	@ (8001960 <MX_TIM10_Init+0x44>)
 8001924:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 96-1;
 8001926:	4b0d      	ldr	r3, [pc, #52]	@ (800195c <MX_TIM10_Init+0x40>)
 8001928:	225f      	movs	r2, #95	@ 0x5f
 800192a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192c:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <MX_TIM10_Init+0x40>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000;
 8001932:	4b0a      	ldr	r3, [pc, #40]	@ (800195c <MX_TIM10_Init+0x40>)
 8001934:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001938:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193a:	4b08      	ldr	r3, [pc, #32]	@ (800195c <MX_TIM10_Init+0x40>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001940:	4b06      	ldr	r3, [pc, #24]	@ (800195c <MX_TIM10_Init+0x40>)
 8001942:	2280      	movs	r2, #128	@ 0x80
 8001944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001946:	4805      	ldr	r0, [pc, #20]	@ (800195c <MX_TIM10_Init+0x40>)
 8001948:	f003 ffe2 	bl	8005910 <HAL_TIM_Base_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001952:	f000 f89f 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000608 	.word	0x20000608
 8001960:	40014400 	.word	0x40014400

08001964 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001968:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 800196a:	4a12      	ldr	r2, [pc, #72]	@ (80019b4 <MX_USART1_UART_Init+0x50>)
 800196c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800196e:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001970:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001974:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001976:	4b0e      	ldr	r3, [pc, #56]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800197c:	4b0c      	ldr	r3, [pc, #48]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001982:	4b0b      	ldr	r3, [pc, #44]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001988:	4b09      	ldr	r3, [pc, #36]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 800198a:	220c      	movs	r2, #12
 800198c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198e:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001994:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800199a:	4805      	ldr	r0, [pc, #20]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 800199c:	f004 fe9a 	bl	80066d4 <HAL_UART_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019a6:	f000 f875 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000650 	.word	0x20000650
 80019b4:	40011000 	.word	0x40011000

080019b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	@ 0x28
 80019bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
 80019cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001a88 <MX_GPIO_Init+0xd0>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	4a2c      	ldr	r2, [pc, #176]	@ (8001a88 <MX_GPIO_Init+0xd0>)
 80019d8:	f043 0304 	orr.w	r3, r3, #4
 80019dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019de:	4b2a      	ldr	r3, [pc, #168]	@ (8001a88 <MX_GPIO_Init+0xd0>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	4b26      	ldr	r3, [pc, #152]	@ (8001a88 <MX_GPIO_Init+0xd0>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a25      	ldr	r2, [pc, #148]	@ (8001a88 <MX_GPIO_Init+0xd0>)
 80019f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b23      	ldr	r3, [pc, #140]	@ (8001a88 <MX_GPIO_Init+0xd0>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001a88 <MX_GPIO_Init+0xd0>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	4a1e      	ldr	r2, [pc, #120]	@ (8001a88 <MX_GPIO_Init+0xd0>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a16:	4b1c      	ldr	r3, [pc, #112]	@ (8001a88 <MX_GPIO_Init+0xd0>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	4b18      	ldr	r3, [pc, #96]	@ (8001a88 <MX_GPIO_Init+0xd0>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	4a17      	ldr	r2, [pc, #92]	@ (8001a88 <MX_GPIO_Init+0xd0>)
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a32:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <MX_GPIO_Init+0xd0>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a44:	4811      	ldr	r0, [pc, #68]	@ (8001a8c <MX_GPIO_Init+0xd4>)
 8001a46:	f001 f8bf 	bl	8002bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STATUS_LED_Pin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 8001a4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a50:	2301      	movs	r3, #1
 8001a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	4619      	mov	r1, r3
 8001a62:	480a      	ldr	r0, [pc, #40]	@ (8001a8c <MX_GPIO_Init+0xd4>)
 8001a64:	f000 ff14 	bl	8002890 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_ACCEPT_Pin */
  GPIO_InitStruct.Pin = BUTTON_ACCEPT_Pin;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a70:	2302      	movs	r3, #2
 8001a72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_ACCEPT_GPIO_Port, &GPIO_InitStruct);
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4805      	ldr	r0, [pc, #20]	@ (8001a90 <MX_GPIO_Init+0xd8>)
 8001a7c:	f000 ff08 	bl	8002890 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a80:	bf00      	nop
 8001a82:	3728      	adds	r7, #40	@ 0x28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020800 	.word	0x40020800
 8001a90:	40020000 	.word	0x40020000

08001a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a98:	b672      	cpsid	i
}
 8001a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <Error_Handler+0x8>

08001aa0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	4b10      	ldr	r3, [pc, #64]	@ (8001aec <HAL_MspInit+0x4c>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aae:	4a0f      	ldr	r2, [pc, #60]	@ (8001aec <HAL_MspInit+0x4c>)
 8001ab0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ab4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8001aec <HAL_MspInit+0x4c>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	603b      	str	r3, [r7, #0]
 8001ac6:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <HAL_MspInit+0x4c>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	4a08      	ldr	r2, [pc, #32]	@ (8001aec <HAL_MspInit+0x4c>)
 8001acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad2:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <HAL_MspInit+0x4c>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800

08001af0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08c      	sub	sp, #48	@ 0x30
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 031c 	add.w	r3, r7, #28
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a41      	ldr	r2, [pc, #260]	@ (8001c14 <HAL_I2C_MspInit+0x124>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d12c      	bne.n	8001b6c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
 8001b16:	4b40      	ldr	r3, [pc, #256]	@ (8001c18 <HAL_I2C_MspInit+0x128>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	4a3f      	ldr	r2, [pc, #252]	@ (8001c18 <HAL_I2C_MspInit+0x128>)
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b22:	4b3d      	ldr	r3, [pc, #244]	@ (8001c18 <HAL_I2C_MspInit+0x128>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	61bb      	str	r3, [r7, #24]
 8001b2c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b2e:	23c0      	movs	r3, #192	@ 0xc0
 8001b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b32:	2312      	movs	r3, #18
 8001b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b3e:	2304      	movs	r3, #4
 8001b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b42:	f107 031c 	add.w	r3, r7, #28
 8001b46:	4619      	mov	r1, r3
 8001b48:	4834      	ldr	r0, [pc, #208]	@ (8001c1c <HAL_I2C_MspInit+0x12c>)
 8001b4a:	f000 fea1 	bl	8002890 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	4b31      	ldr	r3, [pc, #196]	@ (8001c18 <HAL_I2C_MspInit+0x128>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	4a30      	ldr	r2, [pc, #192]	@ (8001c18 <HAL_I2C_MspInit+0x128>)
 8001b58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b5e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c18 <HAL_I2C_MspInit+0x128>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001b6a:	e04f      	b.n	8001c0c <HAL_I2C_MspInit+0x11c>
  else if(hi2c->Instance==I2C3)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a2b      	ldr	r2, [pc, #172]	@ (8001c20 <HAL_I2C_MspInit+0x130>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d14a      	bne.n	8001c0c <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	4b27      	ldr	r3, [pc, #156]	@ (8001c18 <HAL_I2C_MspInit+0x128>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	4a26      	ldr	r2, [pc, #152]	@ (8001c18 <HAL_I2C_MspInit+0x128>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b86:	4b24      	ldr	r3, [pc, #144]	@ (8001c18 <HAL_I2C_MspInit+0x128>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b20      	ldr	r3, [pc, #128]	@ (8001c18 <HAL_I2C_MspInit+0x128>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8001c18 <HAL_I2C_MspInit+0x128>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c18 <HAL_I2C_MspInit+0x128>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb4:	2312      	movs	r3, #18
 8001bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4816      	ldr	r0, [pc, #88]	@ (8001c24 <HAL_I2C_MspInit+0x134>)
 8001bcc:	f000 fe60 	bl	8002890 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bd0:	2310      	movs	r3, #16
 8001bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd4:	2312      	movs	r3, #18
 8001bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8001be0:	2309      	movs	r3, #9
 8001be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be4:	f107 031c 	add.w	r3, r7, #28
 8001be8:	4619      	mov	r1, r3
 8001bea:	480c      	ldr	r0, [pc, #48]	@ (8001c1c <HAL_I2C_MspInit+0x12c>)
 8001bec:	f000 fe50 	bl	8002890 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	4b08      	ldr	r3, [pc, #32]	@ (8001c18 <HAL_I2C_MspInit+0x128>)
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf8:	4a07      	ldr	r2, [pc, #28]	@ (8001c18 <HAL_I2C_MspInit+0x128>)
 8001bfa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001bfe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c00:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <HAL_I2C_MspInit+0x128>)
 8001c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
}
 8001c0c:	bf00      	nop
 8001c0e:	3730      	adds	r7, #48	@ 0x30
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40005400 	.word	0x40005400
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40020400 	.word	0x40020400
 8001c20:	40005c00 	.word	0x40005c00
 8001c24:	40020000 	.word	0x40020000

08001c28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a18      	ldr	r2, [pc, #96]	@ (8001c98 <HAL_TIM_Base_MspInit+0x70>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d10e      	bne.n	8001c58 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	4b17      	ldr	r3, [pc, #92]	@ (8001c9c <HAL_TIM_Base_MspInit+0x74>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	4a16      	ldr	r2, [pc, #88]	@ (8001c9c <HAL_TIM_Base_MspInit+0x74>)
 8001c44:	f043 0302 	orr.w	r3, r3, #2
 8001c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c4a:	4b14      	ldr	r3, [pc, #80]	@ (8001c9c <HAL_TIM_Base_MspInit+0x74>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001c56:	e01a      	b.n	8001c8e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a10      	ldr	r2, [pc, #64]	@ (8001ca0 <HAL_TIM_Base_MspInit+0x78>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d115      	bne.n	8001c8e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	4b0d      	ldr	r3, [pc, #52]	@ (8001c9c <HAL_TIM_Base_MspInit+0x74>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6a:	4a0c      	ldr	r2, [pc, #48]	@ (8001c9c <HAL_TIM_Base_MspInit+0x74>)
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c72:	4b0a      	ldr	r3, [pc, #40]	@ (8001c9c <HAL_TIM_Base_MspInit+0x74>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2100      	movs	r1, #0
 8001c82:	2019      	movs	r0, #25
 8001c84:	f000 fdcd 	bl	8002822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c88:	2019      	movs	r0, #25
 8001c8a:	f000 fde6 	bl	800285a <HAL_NVIC_EnableIRQ>
}
 8001c8e:	bf00      	nop
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40000400 	.word	0x40000400
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40014400 	.word	0x40014400

08001ca4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	@ 0x28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a21      	ldr	r2, [pc, #132]	@ (8001d48 <HAL_TIM_MspPostInit+0xa4>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d13b      	bne.n	8001d3e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	4b20      	ldr	r3, [pc, #128]	@ (8001d4c <HAL_TIM_MspPostInit+0xa8>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cce:	4a1f      	ldr	r2, [pc, #124]	@ (8001d4c <HAL_TIM_MspPostInit+0xa8>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d4c <HAL_TIM_MspPostInit+0xa8>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b19      	ldr	r3, [pc, #100]	@ (8001d4c <HAL_TIM_MspPostInit+0xa8>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	4a18      	ldr	r2, [pc, #96]	@ (8001d4c <HAL_TIM_MspPostInit+0xa8>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf2:	4b16      	ldr	r3, [pc, #88]	@ (8001d4c <HAL_TIM_MspPostInit+0xa8>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_PITCH_F_PWM_Pin|MOTOR_PITCH_R_PWM_Pin;
 8001cfe:	23c0      	movs	r3, #192	@ 0xc0
 8001d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	480d      	ldr	r0, [pc, #52]	@ (8001d50 <HAL_TIM_MspPostInit+0xac>)
 8001d1a:	f000 fdb9 	bl	8002890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_ROLL_F_PWM_Pin|MOTOR_ROLL_R_PWM_Pin;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	4806      	ldr	r0, [pc, #24]	@ (8001d54 <HAL_TIM_MspPostInit+0xb0>)
 8001d3a:	f000 fda9 	bl	8002890 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d3e:	bf00      	nop
 8001d40:	3728      	adds	r7, #40	@ 0x28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40000400 	.word	0x40000400
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40020000 	.word	0x40020000
 8001d54:	40020400 	.word	0x40020400

08001d58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	@ 0x28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a19      	ldr	r2, [pc, #100]	@ (8001ddc <HAL_UART_MspInit+0x84>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d12c      	bne.n	8001dd4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	4b18      	ldr	r3, [pc, #96]	@ (8001de0 <HAL_UART_MspInit+0x88>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d82:	4a17      	ldr	r2, [pc, #92]	@ (8001de0 <HAL_UART_MspInit+0x88>)
 8001d84:	f043 0310 	orr.w	r3, r3, #16
 8001d88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d8a:	4b15      	ldr	r3, [pc, #84]	@ (8001de0 <HAL_UART_MspInit+0x88>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8e:	f003 0310 	and.w	r3, r3, #16
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <HAL_UART_MspInit+0x88>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	4a10      	ldr	r2, [pc, #64]	@ (8001de0 <HAL_UART_MspInit+0x88>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da6:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <HAL_UART_MspInit+0x88>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001db2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dc4:	2307      	movs	r3, #7
 8001dc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4805      	ldr	r0, [pc, #20]	@ (8001de4 <HAL_UART_MspInit+0x8c>)
 8001dd0:	f000 fd5e 	bl	8002890 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001dd4:	bf00      	nop
 8001dd6:	3728      	adds	r7, #40	@ 0x28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40011000 	.word	0x40011000
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40020000 	.word	0x40020000

08001de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <NMI_Handler+0x4>

08001df0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df4:	bf00      	nop
 8001df6:	e7fd      	b.n	8001df4 <HardFault_Handler+0x4>

08001df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dfc:	bf00      	nop
 8001dfe:	e7fd      	b.n	8001dfc <MemManage_Handler+0x4>

08001e00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e04:	bf00      	nop
 8001e06:	e7fd      	b.n	8001e04 <BusFault_Handler+0x4>

08001e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e0c:	bf00      	nop
 8001e0e:	e7fd      	b.n	8001e0c <UsageFault_Handler+0x4>

08001e10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e3e:	f000 fbd1 	bl	80025e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001e4c:	4802      	ldr	r0, [pc, #8]	@ (8001e58 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e4e:	f003 fe6a 	bl	8005b26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000608 	.word	0x20000608

08001e5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e60:	4802      	ldr	r0, [pc, #8]	@ (8001e6c <OTG_FS_IRQHandler+0x10>)
 8001e62:	f002 f809 	bl	8003e78 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000b80 	.word	0x20000b80

08001e70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return 1;
 8001e74:	2301      	movs	r3, #1
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <_kill>:

int _kill(int pid, int sig)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e8a:	f009 fdb5 	bl	800b9f8 <__errno>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2216      	movs	r2, #22
 8001e92:	601a      	str	r2, [r3, #0]
  return -1;
 8001e94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <_exit>:

void _exit (int status)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ffe7 	bl	8001e80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eb2:	bf00      	nop
 8001eb4:	e7fd      	b.n	8001eb2 <_exit+0x12>

08001eb6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	e00a      	b.n	8001ede <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ec8:	f7ff fb80 	bl	80015cc <__io_getchar>
 8001ecc:	4601      	mov	r1, r0
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	60ba      	str	r2, [r7, #8]
 8001ed4:	b2ca      	uxtb	r2, r1
 8001ed6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	3301      	adds	r3, #1
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	dbf0      	blt.n	8001ec8 <_read+0x12>
  }

  return len;
 8001ee6:	687b      	ldr	r3, [r7, #4]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	e009      	b.n	8001f16 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	60ba      	str	r2, [r7, #8]
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fb4c 	bl	80015a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	3301      	adds	r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	dbf1      	blt.n	8001f02 <_write+0x12>
  }
  return len;
 8001f1e:	687b      	ldr	r3, [r7, #4]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <_close>:

int _close(int file)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f50:	605a      	str	r2, [r3, #4]
  return 0;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <_isatty>:

int _isatty(int file)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f68:	2301      	movs	r3, #1
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b085      	sub	sp, #20
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f98:	4a14      	ldr	r2, [pc, #80]	@ (8001fec <_sbrk+0x5c>)
 8001f9a:	4b15      	ldr	r3, [pc, #84]	@ (8001ff0 <_sbrk+0x60>)
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fa4:	4b13      	ldr	r3, [pc, #76]	@ (8001ff4 <_sbrk+0x64>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d102      	bne.n	8001fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fac:	4b11      	ldr	r3, [pc, #68]	@ (8001ff4 <_sbrk+0x64>)
 8001fae:	4a12      	ldr	r2, [pc, #72]	@ (8001ff8 <_sbrk+0x68>)
 8001fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fb2:	4b10      	ldr	r3, [pc, #64]	@ (8001ff4 <_sbrk+0x64>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d207      	bcs.n	8001fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fc0:	f009 fd1a 	bl	800b9f8 <__errno>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fca:	f04f 33ff 	mov.w	r3, #4294967295
 8001fce:	e009      	b.n	8001fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fd0:	4b08      	ldr	r3, [pc, #32]	@ (8001ff4 <_sbrk+0x64>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fd6:	4b07      	ldr	r3, [pc, #28]	@ (8001ff4 <_sbrk+0x64>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	4a05      	ldr	r2, [pc, #20]	@ (8001ff4 <_sbrk+0x64>)
 8001fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20020000 	.word	0x20020000
 8001ff0:	00000400 	.word	0x00000400
 8001ff4:	20000698 	.word	0x20000698
 8001ff8:	200011d8 	.word	0x200011d8

08001ffc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002000:	4b06      	ldr	r3, [pc, #24]	@ (800201c <SystemInit+0x20>)
 8002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002006:	4a05      	ldr	r2, [pc, #20]	@ (800201c <SystemInit+0x20>)
 8002008:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800200c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <AS5600Init>:
static uint8_t ReadRegister(AS5600_t *device, AS5600Reg reg);
static void ReadRegisterBurst(AS5600_t *device, AS5600Reg reg, uint8_t *data,
		uint8_t length);
static uint16_t ReadRegister16(AS5600_t *device, AS5600Reg reg);

void AS5600Init(AS5600_t *device, I2C_HandleTypeDef *hi2c) {
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
	device->hi2c = hi2c;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	601a      	str	r2, [r3, #0]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <AS5600GetAngle>:

uint8_t AS5600GetStatus(AS5600_t *device) {
	return ReadRegister(device, AS5600_STATUS);
}

uint16_t AS5600GetAngle(AS5600_t *device) {
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	return ReadRegister16(device, AS5600_RAW_ANGLE_1);
 8002044:	210c      	movs	r1, #12
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f833 	bl	80020b2 <ReadRegister16>
 800204c:	4603      	mov	r3, r0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <ReadRegisterBurst>:

	return data;
}

static void ReadRegisterBurst(AS5600_t *device, AS5600Reg reg, uint8_t *data,
		uint8_t length) {
 8002056:	b580      	push	{r7, lr}
 8002058:	b088      	sub	sp, #32
 800205a:	af02      	add	r7, sp, #8
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	607a      	str	r2, [r7, #4]
 8002060:	461a      	mov	r2, r3
 8002062:	460b      	mov	r3, r1
 8002064:	72fb      	strb	r3, [r7, #11]
 8002066:	4613      	mov	r3, r2
 8002068:	72bb      	strb	r3, [r7, #10]

	HAL_StatusTypeDef status;
	// Transmit register to access.
	status = HAL_I2C_Master_Transmit(device->hi2c, AS5600_I2C_ADDR, (uint8_t *)&reg, 1,
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6818      	ldr	r0, [r3, #0]
 800206e:	f107 020b 	add.w	r2, r7, #11
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2301      	movs	r3, #1
 800207a:	216c      	movs	r1, #108	@ 0x6c
 800207c:	f000 ff02 	bl	8002e84 <HAL_I2C_Master_Transmit>
 8002080:	4603      	mov	r3, r0
 8002082:	75fb      	strb	r3, [r7, #23]
			HAL_MAX_DELAY);
	if(status != HAL_OK) {
 8002084:	7dfb      	ldrb	r3, [r7, #23]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10f      	bne.n	80020aa <ReadRegisterBurst+0x54>
		return 0xFF;
	}

	// Receive data from specified register for specified length.
	status = HAL_I2C_Master_Receive(device->hi2c, AS5600_I2C_ADDR, data, length,
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	7abb      	ldrb	r3, [r7, #10]
 8002090:	b29b      	uxth	r3, r3
 8002092:	f04f 32ff 	mov.w	r2, #4294967295
 8002096:	9200      	str	r2, [sp, #0]
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	216c      	movs	r1, #108	@ 0x6c
 800209c:	f000 fff0 	bl	8003080 <HAL_I2C_Master_Receive>
 80020a0:	4603      	mov	r3, r0
 80020a2:	75fb      	strb	r3, [r7, #23]
			HAL_MAX_DELAY);
	if(status != HAL_OK) {
 80020a4:	7dfb      	ldrb	r3, [r7, #23]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	e000      	b.n	80020ac <ReadRegisterBurst+0x56>
		return 0xFF;
 80020aa:	bf00      	nop
		return 0xFF;
	}
}
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <ReadRegister16>:

static uint16_t ReadRegister16(AS5600_t *device, AS5600Reg reg) {
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b084      	sub	sp, #16
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	460b      	mov	r3, r1
 80020bc:	70fb      	strb	r3, [r7, #3]
	uint16_t data;
	ReadRegisterBurst(device, reg, (uint8_t *)&data, 2);
 80020be:	f107 020c 	add.w	r2, r7, #12
 80020c2:	78f9      	ldrb	r1, [r7, #3]
 80020c4:	2302      	movs	r3, #2
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff ffc5 	bl	8002056 <ReadRegisterBurst>

	//swap byte order (to little endian)
	uint8_t temp = (uint8_t)(data >> 8);
 80020cc:	89bb      	ldrh	r3, [r7, #12]
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	73fb      	strb	r3, [r7, #15]
	data = (data << 8) | temp;
 80020d4:	89bb      	ldrh	r3, [r7, #12]
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	b21a      	sxth	r2, r3
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	b21b      	sxth	r3, r3
 80020de:	4313      	orrs	r3, r2
 80020e0:	b21b      	sxth	r3, r3
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	81bb      	strh	r3, [r7, #12]

	return data;
 80020e6:	89bb      	ldrh	r3, [r7, #12]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <AS5600InterfaceInit>:

// Private function prototypes
int GetEncoderSensorCount(EncoderInterface_t *interface);


void AS5600InterfaceInit(EncoderInterface_t *interface, AS5600_t *hwEncoder) {
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
	interface->hardwareEncoder = hwEncoder;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	601a      	str	r2, [r3, #0]
	interface->GetEncoderSensorCount = &GetEncoderSensorCount;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a04      	ldr	r2, [pc, #16]	@ (8002114 <AS5600InterfaceInit+0x24>)
 8002104:	605a      	str	r2, [r3, #4]
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	08002119 	.word	0x08002119

08002118 <GetEncoderSensorCount>:

int GetEncoderSensorCount(EncoderInterface_t *interface) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	return AS5600GetAngle((AS5600_t *)interface->hardwareEncoder);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff89 	bl	800203c <AS5600GetAngle>
 800212a:	4603      	mov	r3, r0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <BTS7960Init>:
	// Ensure motor is powered off for safety
	BTS7960SetPower(driver, 0);
}

void BTS7960Init(BTS7960_t *driver, TIM_HandleTypeDef *htim,
		uint32_t forwardPwmCh, uint32_t reversePwmCh) {
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
	driver->enableInit = false;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
	driver->htim = htim;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	615a      	str	r2, [r3, #20]
	driver->forwardPwmCh = forwardPwmCh;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	619a      	str	r2, [r3, #24]
	driver->reversePwmCh = reversePwmCh;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	61da      	str	r2, [r3, #28]

	// Ensure motor is powered off for safety
	BTS7960SetPower(driver, 0);
 800215a:	2100      	movs	r1, #0
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 f805 	bl	800216c <BTS7960SetPower>
}
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <BTS7960SetPower>:

void BTS7960SetPower(BTS7960_t *driver, int power) {
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
	driver->power = Constrain(power, -BTS7690_MAX_PWM_POWER,
 8002176:	f640 125f 	movw	r2, #2399	@ 0x95f
 800217a:	498b      	ldr	r1, [pc, #556]	@ (80023a8 <BTS7960SetPower+0x23c>)
 800217c:	6838      	ldr	r0, [r7, #0]
 800217e:	f7ff f85d 	bl	800123c <Constrain>
 8002182:	4602      	mov	r2, r0
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	621a      	str	r2, [r3, #32]
			BTS7690_MAX_PWM_POWER);

	// Determine direction signals
	if(driver->power > 0) {
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	2b00      	cmp	r3, #0
 800218e:	dd5d      	ble.n	800224c <BTS7960SetPower+0xe0>
		if(driver->enableInit) {
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00b      	beq.n	80021b0 <BTS7960SetPower+0x44>
			GPIOSetState(&driver->forwardEn, GPIO_HIGH);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3304      	adds	r3, #4
 800219c:	2100      	movs	r1, #0
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f988 	bl	80024b4 <GPIOSetState>
			GPIOSetState(&driver->reverseEn, GPIO_LOW);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	330c      	adds	r3, #12
 80021a8:	2101      	movs	r1, #1
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 f982 	bl	80024b4 <GPIOSetState>
		}
		__HAL_TIM_SET_COMPARE(driver->htim, driver->forwardPwmCh,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d106      	bne.n	80021c6 <BTS7960SetPower+0x5a>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a1a      	ldr	r2, [r3, #32]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	635a      	str	r2, [r3, #52]	@ 0x34
 80021c4:	e01e      	b.n	8002204 <BTS7960SetPower+0x98>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d107      	bne.n	80021de <BTS7960SetPower+0x72>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a19      	ldr	r1, [r3, #32]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	460b      	mov	r3, r1
 80021da:	6393      	str	r3, [r2, #56]	@ 0x38
 80021dc:	e012      	b.n	8002204 <BTS7960SetPower+0x98>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d107      	bne.n	80021f6 <BTS7960SetPower+0x8a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a19      	ldr	r1, [r3, #32]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	460b      	mov	r3, r1
 80021f2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80021f4:	e006      	b.n	8002204 <BTS7960SetPower+0x98>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a19      	ldr	r1, [r3, #32]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	460b      	mov	r3, r1
 8002202:	6413      	str	r3, [r2, #64]	@ 0x40
				driver->power);
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d105      	bne.n	8002218 <BTS7960SetPower+0xac>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2200      	movs	r2, #0
 8002214:	635a      	str	r2, [r3, #52]	@ 0x34
		}

		__HAL_TIM_SET_COMPARE(driver->htim, driver->forwardPwmCh, 0);
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
	}
}
 8002216:	e0d9      	b.n	80023cc <BTS7960SetPower+0x260>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	2b04      	cmp	r3, #4
 800221e:	d105      	bne.n	800222c <BTS7960SetPower+0xc0>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	2300      	movs	r3, #0
 8002228:	6393      	str	r3, [r2, #56]	@ 0x38
 800222a:	e0cf      	b.n	80023cc <BTS7960SetPower+0x260>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	2b08      	cmp	r3, #8
 8002232:	d105      	bne.n	8002240 <BTS7960SetPower+0xd4>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	2300      	movs	r3, #0
 800223c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800223e:	e0c5      	b.n	80023cc <BTS7960SetPower+0x260>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	2300      	movs	r3, #0
 8002248:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800224a:	e0bf      	b.n	80023cc <BTS7960SetPower+0x260>
	else if(driver->power < 0) {
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	2b00      	cmp	r3, #0
 8002252:	da61      	bge.n	8002318 <BTS7960SetPower+0x1ac>
		if(driver->enableInit) {
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00b      	beq.n	8002274 <BTS7960SetPower+0x108>
			GPIOSetState(&driver->forwardEn, GPIO_LOW);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3304      	adds	r3, #4
 8002260:	2101      	movs	r1, #1
 8002262:	4618      	mov	r0, r3
 8002264:	f000 f926 	bl	80024b4 <GPIOSetState>
			GPIOSetState(&driver->reverseEn, GPIO_HIGH);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	330c      	adds	r3, #12
 800226c:	2100      	movs	r1, #0
 800226e:	4618      	mov	r0, r3
 8002270:	f000 f920 	bl	80024b4 <GPIOSetState>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->forwardPwmCh, 0);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d105      	bne.n	8002288 <BTS7960SetPower+0x11c>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2200      	movs	r2, #0
 8002284:	635a      	str	r2, [r3, #52]	@ 0x34
 8002286:	e018      	b.n	80022ba <BTS7960SetPower+0x14e>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	2b04      	cmp	r3, #4
 800228e:	d105      	bne.n	800229c <BTS7960SetPower+0x130>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	2300      	movs	r3, #0
 8002298:	6393      	str	r3, [r2, #56]	@ 0x38
 800229a:	e00e      	b.n	80022ba <BTS7960SetPower+0x14e>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d105      	bne.n	80022b0 <BTS7960SetPower+0x144>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	2300      	movs	r3, #0
 80022ac:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80022ae:	e004      	b.n	80022ba <BTS7960SetPower+0x14e>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	2300      	movs	r3, #0
 80022b8:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d107      	bne.n	80022d2 <BTS7960SetPower+0x166>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	425a      	negs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80022d0:	e07c      	b.n	80023cc <BTS7960SetPower+0x260>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh,
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d108      	bne.n	80022ec <BTS7960SetPower+0x180>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	4259      	negs	r1, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	460b      	mov	r3, r1
 80022e8:	6393      	str	r3, [r2, #56]	@ 0x38
 80022ea:	e06f      	b.n	80023cc <BTS7960SetPower+0x260>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d108      	bne.n	8002306 <BTS7960SetPower+0x19a>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4259      	negs	r1, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	460b      	mov	r3, r1
 8002302:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002304:	e062      	b.n	80023cc <BTS7960SetPower+0x260>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	4259      	negs	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	460b      	mov	r3, r1
 8002314:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002316:	e059      	b.n	80023cc <BTS7960SetPower+0x260>
		if(driver->enableInit) {
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00b      	beq.n	8002338 <BTS7960SetPower+0x1cc>
			GPIOSetState(&driver->forwardEn, GPIO_LOW);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3304      	adds	r3, #4
 8002324:	2101      	movs	r1, #1
 8002326:	4618      	mov	r0, r3
 8002328:	f000 f8c4 	bl	80024b4 <GPIOSetState>
			GPIOSetState(&driver->reverseEn, GPIO_LOW);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	330c      	adds	r3, #12
 8002330:	2101      	movs	r1, #1
 8002332:	4618      	mov	r0, r3
 8002334:	f000 f8be 	bl	80024b4 <GPIOSetState>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->forwardPwmCh, 0);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d105      	bne.n	800234c <BTS7960SetPower+0x1e0>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2200      	movs	r2, #0
 8002348:	635a      	str	r2, [r3, #52]	@ 0x34
 800234a:	e018      	b.n	800237e <BTS7960SetPower+0x212>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	2b04      	cmp	r3, #4
 8002352:	d105      	bne.n	8002360 <BTS7960SetPower+0x1f4>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	2300      	movs	r3, #0
 800235c:	6393      	str	r3, [r2, #56]	@ 0x38
 800235e:	e00e      	b.n	800237e <BTS7960SetPower+0x212>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	2b08      	cmp	r3, #8
 8002366:	d105      	bne.n	8002374 <BTS7960SetPower+0x208>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	2300      	movs	r3, #0
 8002370:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002372:	e004      	b.n	800237e <BTS7960SetPower+0x212>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	2300      	movs	r3, #0
 800237c:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d105      	bne.n	8002392 <BTS7960SetPower+0x226>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2200      	movs	r2, #0
 800238e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002390:	e01c      	b.n	80023cc <BTS7960SetPower+0x260>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	2b04      	cmp	r3, #4
 8002398:	d108      	bne.n	80023ac <BTS7960SetPower+0x240>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	2300      	movs	r3, #0
 80023a2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80023a4:	e012      	b.n	80023cc <BTS7960SetPower+0x260>
 80023a6:	bf00      	nop
 80023a8:	fffff6a1 	.word	0xfffff6a1
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	2b08      	cmp	r3, #8
 80023b2:	d105      	bne.n	80023c0 <BTS7960SetPower+0x254>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	2300      	movs	r3, #0
 80023bc:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80023be:	e005      	b.n	80023cc <BTS7960SetPower+0x260>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	2300      	movs	r3, #0
 80023c8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80023ca:	e7ff      	b.n	80023cc <BTS7960SetPower+0x260>
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <BTS7960GetPower>:

int BTS7960GetPower(BTS7960_t *driver) {
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
	return driver->power;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a1b      	ldr	r3, [r3, #32]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <BTS7960InterfaceInit>:

// Private function prototypes
int MotorIGetPower(MotorInterface_t *interface);
void MotorISetPower(MotorInterface_t *interface, int power);

void BTS7960InterfaceInit(MotorInterface_t *interface, BTS7960_t *driver) {
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
	interface->hardwareMotor = driver;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	601a      	str	r2, [r3, #0]
	interface->MotorGetPower = &MotorIGetPower;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a05      	ldr	r2, [pc, #20]	@ (8002414 <BTS7960InterfaceInit+0x28>)
 8002400:	605a      	str	r2, [r3, #4]
	interface->MotorSetPower = &MotorISetPower;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a04      	ldr	r2, [pc, #16]	@ (8002418 <BTS7960InterfaceInit+0x2c>)
 8002406:	609a      	str	r2, [r3, #8]
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	0800241d 	.word	0x0800241d
 8002418:	08002439 	.word	0x08002439

0800241c <MotorIGetPower>:

int MotorIGetPower(MotorInterface_t *interface) {
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
	return BTS7960GetPower((BTS7960_t *)interface->hardwareMotor);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ffd3 	bl	80023d4 <BTS7960GetPower>
 800242e:	4603      	mov	r3, r0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <MotorISetPower>:

void MotorISetPower(MotorInterface_t *interface, int power) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
	BTS7960SetPower((BTS7960_t *)interface->hardwareMotor, power);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6839      	ldr	r1, [r7, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fe8f 	bl	800216c <BTS7960SetPower>
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <GPIOInit>:
 *      Author: Jennyston
 */

#include "peripherals/gpio.h"

void GPIOInit(GPIO_t *gpio, GPIO_TypeDef *port, uint16_t pin) {
 8002456:	b480      	push	{r7}
 8002458:	b085      	sub	sp, #20
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	4613      	mov	r3, r2
 8002462:	80fb      	strh	r3, [r7, #6]
	gpio->port = port;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	601a      	str	r2, [r3, #0]
	gpio->pin = pin;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	88fa      	ldrh	r2, [r7, #6]
 800246e:	809a      	strh	r2, [r3, #4]
//	gpio->hcomp = NULL;
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <GPIOGetState>:
//	gpio->port = NULL;
//	gpio->pin = 0;
//	gpio->hcomp = hcomp;
//}

GPIOState GPIOGetState(GPIO_t *gpio) {
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	if(gpio->port != NULL) {
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00e      	beq.n	80024aa <GPIOGetState+0x2e>
		return HAL_GPIO_ReadPin(gpio->port, gpio->pin) == GPIO_PIN_SET ?
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	889b      	ldrh	r3, [r3, #4]
 8002494:	4619      	mov	r1, r3
 8002496:	4610      	mov	r0, r2
 8002498:	f000 fb7e 	bl	8002b98 <HAL_GPIO_ReadPin>
 800249c:	4603      	mov	r3, r0
				GPIO_HIGH : GPIO_LOW;
 800249e:	2b01      	cmp	r3, #1
 80024a0:	bf14      	ite	ne
 80024a2:	2301      	movne	r3, #1
 80024a4:	2300      	moveq	r3, #0
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	e000      	b.n	80024ac <GPIOGetState+0x30>
//	else if (gpio->hcomp != NULL) {
//		return HAL_COMP_GetOutputLevel(gpio->hcomp) == COMP_OUTPUTLEVEL_HIGH ?
//				GPIO_HIGH : GPIO_LOW;
//	}
	else {
		return GPIO_LOW;
 80024aa:	2301      	movs	r3, #1
	}
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <GPIOSetState>:

void GPIOSetState(GPIO_t *gpio, GPIOState state) {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	70fb      	strb	r3, [r7, #3]
	if(gpio->port != NULL) {
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00c      	beq.n	80024e2 <GPIOSetState+0x2e>
		HAL_GPIO_WritePin(gpio->port, gpio->pin, state == GPIO_HIGH ?
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	8899      	ldrh	r1, [r3, #4]
 80024d0:	78fb      	ldrb	r3, [r7, #3]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	bf0c      	ite	eq
 80024d6:	2301      	moveq	r3, #1
 80024d8:	2300      	movne	r3, #0
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	f000 fb73 	bl	8002bc8 <HAL_GPIO_WritePin>
				GPIO_PIN_SET : GPIO_PIN_RESET);
	}
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002524 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024f0:	f7ff fd84 	bl	8001ffc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024f4:	480c      	ldr	r0, [pc, #48]	@ (8002528 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024f6:	490d      	ldr	r1, [pc, #52]	@ (800252c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002530 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024fc:	e002      	b.n	8002504 <LoopCopyDataInit>

080024fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002502:	3304      	adds	r3, #4

08002504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002508:	d3f9      	bcc.n	80024fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800250a:	4a0a      	ldr	r2, [pc, #40]	@ (8002534 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800250c:	4c0a      	ldr	r4, [pc, #40]	@ (8002538 <LoopFillZerobss+0x22>)
  movs r3, #0
 800250e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002510:	e001      	b.n	8002516 <LoopFillZerobss>

08002512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002514:	3204      	adds	r2, #4

08002516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002518:	d3fb      	bcc.n	8002512 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800251a:	f009 fa73 	bl	800ba04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800251e:	f7ff f885 	bl	800162c <main>
  bx  lr    
 8002522:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002524:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800252c:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8002530:	0800da88 	.word	0x0800da88
  ldr r2, =_sbss
 8002534:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8002538:	200011d8 	.word	0x200011d8

0800253c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800253c:	e7fe      	b.n	800253c <ADC_IRQHandler>
	...

08002540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002544:	4b0e      	ldr	r3, [pc, #56]	@ (8002580 <HAL_Init+0x40>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a0d      	ldr	r2, [pc, #52]	@ (8002580 <HAL_Init+0x40>)
 800254a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800254e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002550:	4b0b      	ldr	r3, [pc, #44]	@ (8002580 <HAL_Init+0x40>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a0a      	ldr	r2, [pc, #40]	@ (8002580 <HAL_Init+0x40>)
 8002556:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800255a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800255c:	4b08      	ldr	r3, [pc, #32]	@ (8002580 <HAL_Init+0x40>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a07      	ldr	r2, [pc, #28]	@ (8002580 <HAL_Init+0x40>)
 8002562:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002566:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002568:	2003      	movs	r0, #3
 800256a:	f000 f94f 	bl	800280c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800256e:	200f      	movs	r0, #15
 8002570:	f000 f808 	bl	8002584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002574:	f7ff fa94 	bl	8001aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40023c00 	.word	0x40023c00

08002584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800258c:	4b12      	ldr	r3, [pc, #72]	@ (80025d8 <HAL_InitTick+0x54>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	4b12      	ldr	r3, [pc, #72]	@ (80025dc <HAL_InitTick+0x58>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	4619      	mov	r1, r3
 8002596:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800259a:	fbb3 f3f1 	udiv	r3, r3, r1
 800259e:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 f967 	bl	8002876 <HAL_SYSTICK_Config>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e00e      	b.n	80025d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b0f      	cmp	r3, #15
 80025b6:	d80a      	bhi.n	80025ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025b8:	2200      	movs	r2, #0
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	f04f 30ff 	mov.w	r0, #4294967295
 80025c0:	f000 f92f 	bl	8002822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025c4:	4a06      	ldr	r2, [pc, #24]	@ (80025e0 <HAL_InitTick+0x5c>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	e000      	b.n	80025d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000000 	.word	0x20000000
 80025dc:	20000008 	.word	0x20000008
 80025e0:	20000004 	.word	0x20000004

080025e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025e8:	4b06      	ldr	r3, [pc, #24]	@ (8002604 <HAL_IncTick+0x20>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <HAL_IncTick+0x24>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4413      	add	r3, r2
 80025f4:	4a04      	ldr	r2, [pc, #16]	@ (8002608 <HAL_IncTick+0x24>)
 80025f6:	6013      	str	r3, [r2, #0]
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	20000008 	.word	0x20000008
 8002608:	2000069c 	.word	0x2000069c

0800260c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return uwTick;
 8002610:	4b03      	ldr	r3, [pc, #12]	@ (8002620 <HAL_GetTick+0x14>)
 8002612:	681b      	ldr	r3, [r3, #0]
}
 8002614:	4618      	mov	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	2000069c 	.word	0x2000069c

08002624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800262c:	f7ff ffee 	bl	800260c <HAL_GetTick>
 8002630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263c:	d005      	beq.n	800264a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800263e:	4b0a      	ldr	r3, [pc, #40]	@ (8002668 <HAL_Delay+0x44>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4413      	add	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800264a:	bf00      	nop
 800264c:	f7ff ffde 	bl	800260c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	429a      	cmp	r2, r3
 800265a:	d8f7      	bhi.n	800264c <HAL_Delay+0x28>
  {
  }
}
 800265c:	bf00      	nop
 800265e:	bf00      	nop
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000008 	.word	0x20000008

0800266c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800267c:	4b0c      	ldr	r3, [pc, #48]	@ (80026b0 <__NVIC_SetPriorityGrouping+0x44>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002688:	4013      	ands	r3, r2
 800268a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002694:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002698:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800269c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800269e:	4a04      	ldr	r2, [pc, #16]	@ (80026b0 <__NVIC_SetPriorityGrouping+0x44>)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	60d3      	str	r3, [r2, #12]
}
 80026a4:	bf00      	nop
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b8:	4b04      	ldr	r3, [pc, #16]	@ (80026cc <__NVIC_GetPriorityGrouping+0x18>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	f003 0307 	and.w	r3, r3, #7
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	db0b      	blt.n	80026fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	f003 021f 	and.w	r2, r3, #31
 80026e8:	4907      	ldr	r1, [pc, #28]	@ (8002708 <__NVIC_EnableIRQ+0x38>)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	095b      	lsrs	r3, r3, #5
 80026f0:	2001      	movs	r0, #1
 80026f2:	fa00 f202 	lsl.w	r2, r0, r2
 80026f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	e000e100 	.word	0xe000e100

0800270c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	6039      	str	r1, [r7, #0]
 8002716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271c:	2b00      	cmp	r3, #0
 800271e:	db0a      	blt.n	8002736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	b2da      	uxtb	r2, r3
 8002724:	490c      	ldr	r1, [pc, #48]	@ (8002758 <__NVIC_SetPriority+0x4c>)
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	0112      	lsls	r2, r2, #4
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	440b      	add	r3, r1
 8002730:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002734:	e00a      	b.n	800274c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4908      	ldr	r1, [pc, #32]	@ (800275c <__NVIC_SetPriority+0x50>)
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	3b04      	subs	r3, #4
 8002744:	0112      	lsls	r2, r2, #4
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	440b      	add	r3, r1
 800274a:	761a      	strb	r2, [r3, #24]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000e100 	.word	0xe000e100
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002760:	b480      	push	{r7}
 8002762:	b089      	sub	sp, #36	@ 0x24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f1c3 0307 	rsb	r3, r3, #7
 800277a:	2b04      	cmp	r3, #4
 800277c:	bf28      	it	cs
 800277e:	2304      	movcs	r3, #4
 8002780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3304      	adds	r3, #4
 8002786:	2b06      	cmp	r3, #6
 8002788:	d902      	bls.n	8002790 <NVIC_EncodePriority+0x30>
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3b03      	subs	r3, #3
 800278e:	e000      	b.n	8002792 <NVIC_EncodePriority+0x32>
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002794:	f04f 32ff 	mov.w	r2, #4294967295
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43da      	mvns	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	401a      	ands	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	fa01 f303 	lsl.w	r3, r1, r3
 80027b2:	43d9      	mvns	r1, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	4313      	orrs	r3, r2
         );
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3724      	adds	r7, #36	@ 0x24
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027d8:	d301      	bcc.n	80027de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027da:	2301      	movs	r3, #1
 80027dc:	e00f      	b.n	80027fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027de:	4a0a      	ldr	r2, [pc, #40]	@ (8002808 <SysTick_Config+0x40>)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027e6:	210f      	movs	r1, #15
 80027e8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ec:	f7ff ff8e 	bl	800270c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027f0:	4b05      	ldr	r3, [pc, #20]	@ (8002808 <SysTick_Config+0x40>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f6:	4b04      	ldr	r3, [pc, #16]	@ (8002808 <SysTick_Config+0x40>)
 80027f8:	2207      	movs	r2, #7
 80027fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	e000e010 	.word	0xe000e010

0800280c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff ff29 	bl	800266c <__NVIC_SetPriorityGrouping>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002822:	b580      	push	{r7, lr}
 8002824:	b086      	sub	sp, #24
 8002826:	af00      	add	r7, sp, #0
 8002828:	4603      	mov	r3, r0
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002834:	f7ff ff3e 	bl	80026b4 <__NVIC_GetPriorityGrouping>
 8002838:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	68b9      	ldr	r1, [r7, #8]
 800283e:	6978      	ldr	r0, [r7, #20]
 8002840:	f7ff ff8e 	bl	8002760 <NVIC_EncodePriority>
 8002844:	4602      	mov	r2, r0
 8002846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800284a:	4611      	mov	r1, r2
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ff5d 	bl	800270c <__NVIC_SetPriority>
}
 8002852:	bf00      	nop
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	4603      	mov	r3, r0
 8002862:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff ff31 	bl	80026d0 <__NVIC_EnableIRQ>
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7ff ffa2 	bl	80027c8 <SysTick_Config>
 8002884:	4603      	mov	r3, r0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002890:	b480      	push	{r7}
 8002892:	b089      	sub	sp, #36	@ 0x24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028a6:	2300      	movs	r3, #0
 80028a8:	61fb      	str	r3, [r7, #28]
 80028aa:	e159      	b.n	8002b60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028ac:	2201      	movs	r2, #1
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	4013      	ands	r3, r2
 80028be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	f040 8148 	bne.w	8002b5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d005      	beq.n	80028e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d130      	bne.n	8002944 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	2203      	movs	r2, #3
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4013      	ands	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4313      	orrs	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002918:	2201      	movs	r2, #1
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f003 0201 	and.w	r2, r3, #1
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 0303 	and.w	r3, r3, #3
 800294c:	2b03      	cmp	r3, #3
 800294e:	d017      	beq.n	8002980 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	2203      	movs	r2, #3
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d123      	bne.n	80029d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	08da      	lsrs	r2, r3, #3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3208      	adds	r2, #8
 8002994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002998:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	220f      	movs	r2, #15
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	691a      	ldr	r2, [r3, #16]
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	08da      	lsrs	r2, r3, #3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3208      	adds	r2, #8
 80029ce:	69b9      	ldr	r1, [r7, #24]
 80029d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	2203      	movs	r2, #3
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	43db      	mvns	r3, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4013      	ands	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0203 	and.w	r2, r3, #3
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 80a2 	beq.w	8002b5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	4b57      	ldr	r3, [pc, #348]	@ (8002b78 <HAL_GPIO_Init+0x2e8>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1e:	4a56      	ldr	r2, [pc, #344]	@ (8002b78 <HAL_GPIO_Init+0x2e8>)
 8002a20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a24:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a26:	4b54      	ldr	r3, [pc, #336]	@ (8002b78 <HAL_GPIO_Init+0x2e8>)
 8002a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a32:	4a52      	ldr	r2, [pc, #328]	@ (8002b7c <HAL_GPIO_Init+0x2ec>)
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	089b      	lsrs	r3, r3, #2
 8002a38:	3302      	adds	r3, #2
 8002a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	220f      	movs	r2, #15
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4013      	ands	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a49      	ldr	r2, [pc, #292]	@ (8002b80 <HAL_GPIO_Init+0x2f0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d019      	beq.n	8002a92 <HAL_GPIO_Init+0x202>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a48      	ldr	r2, [pc, #288]	@ (8002b84 <HAL_GPIO_Init+0x2f4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d013      	beq.n	8002a8e <HAL_GPIO_Init+0x1fe>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a47      	ldr	r2, [pc, #284]	@ (8002b88 <HAL_GPIO_Init+0x2f8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00d      	beq.n	8002a8a <HAL_GPIO_Init+0x1fa>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a46      	ldr	r2, [pc, #280]	@ (8002b8c <HAL_GPIO_Init+0x2fc>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d007      	beq.n	8002a86 <HAL_GPIO_Init+0x1f6>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a45      	ldr	r2, [pc, #276]	@ (8002b90 <HAL_GPIO_Init+0x300>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d101      	bne.n	8002a82 <HAL_GPIO_Init+0x1f2>
 8002a7e:	2304      	movs	r3, #4
 8002a80:	e008      	b.n	8002a94 <HAL_GPIO_Init+0x204>
 8002a82:	2307      	movs	r3, #7
 8002a84:	e006      	b.n	8002a94 <HAL_GPIO_Init+0x204>
 8002a86:	2303      	movs	r3, #3
 8002a88:	e004      	b.n	8002a94 <HAL_GPIO_Init+0x204>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e002      	b.n	8002a94 <HAL_GPIO_Init+0x204>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <HAL_GPIO_Init+0x204>
 8002a92:	2300      	movs	r3, #0
 8002a94:	69fa      	ldr	r2, [r7, #28]
 8002a96:	f002 0203 	and.w	r2, r2, #3
 8002a9a:	0092      	lsls	r2, r2, #2
 8002a9c:	4093      	lsls	r3, r2
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aa4:	4935      	ldr	r1, [pc, #212]	@ (8002b7c <HAL_GPIO_Init+0x2ec>)
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	089b      	lsrs	r3, r3, #2
 8002aaa:	3302      	adds	r3, #2
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ab2:	4b38      	ldr	r3, [pc, #224]	@ (8002b94 <HAL_GPIO_Init+0x304>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ad6:	4a2f      	ldr	r2, [pc, #188]	@ (8002b94 <HAL_GPIO_Init+0x304>)
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002adc:	4b2d      	ldr	r3, [pc, #180]	@ (8002b94 <HAL_GPIO_Init+0x304>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b00:	4a24      	ldr	r2, [pc, #144]	@ (8002b94 <HAL_GPIO_Init+0x304>)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b06:	4b23      	ldr	r3, [pc, #140]	@ (8002b94 <HAL_GPIO_Init+0x304>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4013      	ands	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b2a:	4a1a      	ldr	r2, [pc, #104]	@ (8002b94 <HAL_GPIO_Init+0x304>)
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b30:	4b18      	ldr	r3, [pc, #96]	@ (8002b94 <HAL_GPIO_Init+0x304>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b54:	4a0f      	ldr	r2, [pc, #60]	@ (8002b94 <HAL_GPIO_Init+0x304>)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	61fb      	str	r3, [r7, #28]
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	2b0f      	cmp	r3, #15
 8002b64:	f67f aea2 	bls.w	80028ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b68:	bf00      	nop
 8002b6a:	bf00      	nop
 8002b6c:	3724      	adds	r7, #36	@ 0x24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40013800 	.word	0x40013800
 8002b80:	40020000 	.word	0x40020000
 8002b84:	40020400 	.word	0x40020400
 8002b88:	40020800 	.word	0x40020800
 8002b8c:	40020c00 	.word	0x40020c00
 8002b90:	40021000 	.word	0x40021000
 8002b94:	40013c00 	.word	0x40013c00

08002b98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	887b      	ldrh	r3, [r7, #2]
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
 8002bb4:	e001      	b.n	8002bba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	807b      	strh	r3, [r7, #2]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bd8:	787b      	ldrb	r3, [r7, #1]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bde:	887a      	ldrh	r2, [r7, #2]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002be4:	e003      	b.n	8002bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002be6:	887b      	ldrh	r3, [r7, #2]
 8002be8:	041a      	lsls	r2, r3, #16
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	619a      	str	r2, [r3, #24]
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e12b      	b.n	8002e66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fe ff64 	bl	8001af0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2224      	movs	r2, #36	@ 0x24
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0201 	bic.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c60:	f002 fe2e 	bl	80058c0 <HAL_RCC_GetPCLK1Freq>
 8002c64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	4a81      	ldr	r2, [pc, #516]	@ (8002e70 <HAL_I2C_Init+0x274>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d807      	bhi.n	8002c80 <HAL_I2C_Init+0x84>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4a80      	ldr	r2, [pc, #512]	@ (8002e74 <HAL_I2C_Init+0x278>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	bf94      	ite	ls
 8002c78:	2301      	movls	r3, #1
 8002c7a:	2300      	movhi	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	e006      	b.n	8002c8e <HAL_I2C_Init+0x92>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4a7d      	ldr	r2, [pc, #500]	@ (8002e78 <HAL_I2C_Init+0x27c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	bf94      	ite	ls
 8002c88:	2301      	movls	r3, #1
 8002c8a:	2300      	movhi	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e0e7      	b.n	8002e66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4a78      	ldr	r2, [pc, #480]	@ (8002e7c <HAL_I2C_Init+0x280>)
 8002c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9e:	0c9b      	lsrs	r3, r3, #18
 8002ca0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	4a6a      	ldr	r2, [pc, #424]	@ (8002e70 <HAL_I2C_Init+0x274>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d802      	bhi.n	8002cd0 <HAL_I2C_Init+0xd4>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	e009      	b.n	8002ce4 <HAL_I2C_Init+0xe8>
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002cd6:	fb02 f303 	mul.w	r3, r2, r3
 8002cda:	4a69      	ldr	r2, [pc, #420]	@ (8002e80 <HAL_I2C_Init+0x284>)
 8002cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce0:	099b      	lsrs	r3, r3, #6
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002cf6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	495c      	ldr	r1, [pc, #368]	@ (8002e70 <HAL_I2C_Init+0x274>)
 8002d00:	428b      	cmp	r3, r1
 8002d02:	d819      	bhi.n	8002d38 <HAL_I2C_Init+0x13c>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	1e59      	subs	r1, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d12:	1c59      	adds	r1, r3, #1
 8002d14:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d18:	400b      	ands	r3, r1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <HAL_I2C_Init+0x138>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1e59      	subs	r1, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d32:	e051      	b.n	8002dd8 <HAL_I2C_Init+0x1dc>
 8002d34:	2304      	movs	r3, #4
 8002d36:	e04f      	b.n	8002dd8 <HAL_I2C_Init+0x1dc>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d111      	bne.n	8002d64 <HAL_I2C_Init+0x168>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	1e58      	subs	r0, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6859      	ldr	r1, [r3, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	440b      	add	r3, r1
 8002d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d52:	3301      	adds	r3, #1
 8002d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	bf0c      	ite	eq
 8002d5c:	2301      	moveq	r3, #1
 8002d5e:	2300      	movne	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	e012      	b.n	8002d8a <HAL_I2C_Init+0x18e>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1e58      	subs	r0, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6859      	ldr	r1, [r3, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	0099      	lsls	r1, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	bf0c      	ite	eq
 8002d84:	2301      	moveq	r3, #1
 8002d86:	2300      	movne	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_I2C_Init+0x196>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e022      	b.n	8002dd8 <HAL_I2C_Init+0x1dc>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10e      	bne.n	8002db8 <HAL_I2C_Init+0x1bc>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	1e58      	subs	r0, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6859      	ldr	r1, [r3, #4]
 8002da2:	460b      	mov	r3, r1
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	440b      	add	r3, r1
 8002da8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dac:	3301      	adds	r3, #1
 8002dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002db6:	e00f      	b.n	8002dd8 <HAL_I2C_Init+0x1dc>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	1e58      	subs	r0, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6859      	ldr	r1, [r3, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	0099      	lsls	r1, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dce:	3301      	adds	r3, #1
 8002dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	6809      	ldr	r1, [r1, #0]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69da      	ldr	r2, [r3, #28]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002e06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6911      	ldr	r1, [r2, #16]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68d2      	ldr	r2, [r2, #12]
 8002e12:	4311      	orrs	r1, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	000186a0 	.word	0x000186a0
 8002e74:	001e847f 	.word	0x001e847f
 8002e78:	003d08ff 	.word	0x003d08ff
 8002e7c:	431bde83 	.word	0x431bde83
 8002e80:	10624dd3 	.word	0x10624dd3

08002e84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af02      	add	r7, sp, #8
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	460b      	mov	r3, r1
 8002e92:	817b      	strh	r3, [r7, #10]
 8002e94:	4613      	mov	r3, r2
 8002e96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e98:	f7ff fbb8 	bl	800260c <HAL_GetTick>
 8002e9c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	f040 80e0 	bne.w	800306c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	2319      	movs	r3, #25
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	4970      	ldr	r1, [pc, #448]	@ (8003078 <HAL_I2C_Master_Transmit+0x1f4>)
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 fc64 	bl	8003784 <I2C_WaitOnFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e0d3      	b.n	800306e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_I2C_Master_Transmit+0x50>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e0cc      	b.n	800306e <HAL_I2C_Master_Transmit+0x1ea>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d007      	beq.n	8002efa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0201 	orr.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2221      	movs	r2, #33	@ 0x21
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2210      	movs	r2, #16
 8002f16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	893a      	ldrh	r2, [r7, #8]
 8002f2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4a50      	ldr	r2, [pc, #320]	@ (800307c <HAL_I2C_Master_Transmit+0x1f8>)
 8002f3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f3c:	8979      	ldrh	r1, [r7, #10]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	6a3a      	ldr	r2, [r7, #32]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 face 	bl	80034e4 <I2C_MasterRequestWrite>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e08d      	b.n	800306e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f52:	2300      	movs	r3, #0
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f68:	e066      	b.n	8003038 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	6a39      	ldr	r1, [r7, #32]
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 fd22 	bl	80039b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00d      	beq.n	8002f96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d107      	bne.n	8002f92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e06b      	b.n	800306e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9a:	781a      	ldrb	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d11b      	bne.n	800300c <HAL_I2C_Master_Transmit+0x188>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d017      	beq.n	800300c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe0:	781a      	ldrb	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	6a39      	ldr	r1, [r7, #32]
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 fd19 	bl	8003a48 <I2C_WaitOnBTFFlagUntilTimeout>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00d      	beq.n	8003038 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003020:	2b04      	cmp	r3, #4
 8003022:	d107      	bne.n	8003034 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003032:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e01a      	b.n	800306e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800303c:	2b00      	cmp	r3, #0
 800303e:	d194      	bne.n	8002f6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800304e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	e000      	b.n	800306e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800306c:	2302      	movs	r3, #2
  }
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	00100002 	.word	0x00100002
 800307c:	ffff0000 	.word	0xffff0000

08003080 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08c      	sub	sp, #48	@ 0x30
 8003084:	af02      	add	r7, sp, #8
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	607a      	str	r2, [r7, #4]
 800308a:	461a      	mov	r2, r3
 800308c:	460b      	mov	r3, r1
 800308e:	817b      	strh	r3, [r7, #10]
 8003090:	4613      	mov	r3, r2
 8003092:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003094:	f7ff faba 	bl	800260c <HAL_GetTick>
 8003098:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b20      	cmp	r3, #32
 80030a4:	f040 8217 	bne.w	80034d6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	2319      	movs	r3, #25
 80030ae:	2201      	movs	r2, #1
 80030b0:	497c      	ldr	r1, [pc, #496]	@ (80032a4 <HAL_I2C_Master_Receive+0x224>)
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 fb66 	bl	8003784 <I2C_WaitOnFlagUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80030be:	2302      	movs	r3, #2
 80030c0:	e20a      	b.n	80034d8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_I2C_Master_Receive+0x50>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e203      	b.n	80034d8 <HAL_I2C_Master_Receive+0x458>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d007      	beq.n	80030f6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 0201 	orr.w	r2, r2, #1
 80030f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003104:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2222      	movs	r2, #34	@ 0x22
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2210      	movs	r2, #16
 8003112:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	893a      	ldrh	r2, [r7, #8]
 8003126:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	4a5c      	ldr	r2, [pc, #368]	@ (80032a8 <HAL_I2C_Master_Receive+0x228>)
 8003136:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003138:	8979      	ldrh	r1, [r7, #10]
 800313a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 fa52 	bl	80035e8 <I2C_MasterRequestRead>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e1c4      	b.n	80034d8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003152:	2b00      	cmp	r3, #0
 8003154:	d113      	bne.n	800317e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003156:	2300      	movs	r3, #0
 8003158:	623b      	str	r3, [r7, #32]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	623b      	str	r3, [r7, #32]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	623b      	str	r3, [r7, #32]
 800316a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	e198      	b.n	80034b0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003182:	2b01      	cmp	r3, #1
 8003184:	d11b      	bne.n	80031be <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003194:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	61fb      	str	r3, [r7, #28]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	61fb      	str	r3, [r7, #28]
 80031aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	e178      	b.n	80034b0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d11b      	bne.n	80031fe <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031e6:	2300      	movs	r3, #0
 80031e8:	61bb      	str	r3, [r7, #24]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	61bb      	str	r3, [r7, #24]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	61bb      	str	r3, [r7, #24]
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	e158      	b.n	80034b0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800320c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003224:	e144      	b.n	80034b0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322a:	2b03      	cmp	r3, #3
 800322c:	f200 80f1 	bhi.w	8003412 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003234:	2b01      	cmp	r3, #1
 8003236:	d123      	bne.n	8003280 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800323a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 fc4b 	bl	8003ad8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e145      	b.n	80034d8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691a      	ldr	r2, [r3, #16]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003274:	b29b      	uxth	r3, r3
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800327e:	e117      	b.n	80034b0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003284:	2b02      	cmp	r3, #2
 8003286:	d14e      	bne.n	8003326 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328e:	2200      	movs	r2, #0
 8003290:	4906      	ldr	r1, [pc, #24]	@ (80032ac <HAL_I2C_Master_Receive+0x22c>)
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 fa76 	bl	8003784 <I2C_WaitOnFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d008      	beq.n	80032b0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e11a      	b.n	80034d8 <HAL_I2C_Master_Receive+0x458>
 80032a2:	bf00      	nop
 80032a4:	00100002 	.word	0x00100002
 80032a8:	ffff0000 	.word	0xffff0000
 80032ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691a      	ldr	r2, [r3, #16]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	3b01      	subs	r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800330e:	3b01      	subs	r3, #1
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003324:	e0c4      	b.n	80034b0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800332c:	2200      	movs	r2, #0
 800332e:	496c      	ldr	r1, [pc, #432]	@ (80034e0 <HAL_I2C_Master_Receive+0x460>)
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 fa27 	bl	8003784 <I2C_WaitOnFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e0cb      	b.n	80034d8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800334e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691a      	ldr	r2, [r3, #16]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336c:	3b01      	subs	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003378:	b29b      	uxth	r3, r3
 800337a:	3b01      	subs	r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003388:	2200      	movs	r2, #0
 800338a:	4955      	ldr	r1, [pc, #340]	@ (80034e0 <HAL_I2C_Master_Receive+0x460>)
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 f9f9 	bl	8003784 <I2C_WaitOnFlagUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e09d      	b.n	80034d8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003406:	b29b      	uxth	r3, r3
 8003408:	3b01      	subs	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003410:	e04e      	b.n	80034b0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003414:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 fb5e 	bl	8003ad8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e058      	b.n	80034d8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800344e:	b29b      	uxth	r3, r3
 8003450:	3b01      	subs	r3, #1
 8003452:	b29a      	uxth	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b04      	cmp	r3, #4
 8003464:	d124      	bne.n	80034b0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800346a:	2b03      	cmp	r3, #3
 800346c:	d107      	bne.n	800347e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800347c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800349a:	3b01      	subs	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f47f aeb6 	bne.w	8003226 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	e000      	b.n	80034d8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80034d6:	2302      	movs	r3, #2
  }
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3728      	adds	r7, #40	@ 0x28
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	00010004 	.word	0x00010004

080034e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	607a      	str	r2, [r7, #4]
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	460b      	mov	r3, r1
 80034f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d006      	beq.n	800350e <I2C_MasterRequestWrite+0x2a>
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d003      	beq.n	800350e <I2C_MasterRequestWrite+0x2a>
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800350c:	d108      	bne.n	8003520 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	e00b      	b.n	8003538 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003524:	2b12      	cmp	r3, #18
 8003526:	d107      	bne.n	8003538 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003536:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f91d 	bl	8003784 <I2C_WaitOnFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00d      	beq.n	800356c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800355a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800355e:	d103      	bne.n	8003568 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003566:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e035      	b.n	80035d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003574:	d108      	bne.n	8003588 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003576:	897b      	ldrh	r3, [r7, #10]
 8003578:	b2db      	uxtb	r3, r3
 800357a:	461a      	mov	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003584:	611a      	str	r2, [r3, #16]
 8003586:	e01b      	b.n	80035c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003588:	897b      	ldrh	r3, [r7, #10]
 800358a:	11db      	asrs	r3, r3, #7
 800358c:	b2db      	uxtb	r3, r3
 800358e:	f003 0306 	and.w	r3, r3, #6
 8003592:	b2db      	uxtb	r3, r3
 8003594:	f063 030f 	orn	r3, r3, #15
 8003598:	b2da      	uxtb	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	490e      	ldr	r1, [pc, #56]	@ (80035e0 <I2C_MasterRequestWrite+0xfc>)
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 f966 	bl	8003878 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e010      	b.n	80035d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035b6:	897b      	ldrh	r3, [r7, #10]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	4907      	ldr	r1, [pc, #28]	@ (80035e4 <I2C_MasterRequestWrite+0x100>)
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f956 	bl	8003878 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	00010008 	.word	0x00010008
 80035e4:	00010002 	.word	0x00010002

080035e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	607a      	str	r2, [r7, #4]
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	460b      	mov	r3, r1
 80035f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800360c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2b08      	cmp	r3, #8
 8003612:	d006      	beq.n	8003622 <I2C_MasterRequestRead+0x3a>
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d003      	beq.n	8003622 <I2C_MasterRequestRead+0x3a>
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003620:	d108      	bne.n	8003634 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	e00b      	b.n	800364c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003638:	2b11      	cmp	r3, #17
 800363a:	d107      	bne.n	800364c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800364a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 f893 	bl	8003784 <I2C_WaitOnFlagUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00d      	beq.n	8003680 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800366e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003672:	d103      	bne.n	800367c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800367a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e079      	b.n	8003774 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003688:	d108      	bne.n	800369c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800368a:	897b      	ldrh	r3, [r7, #10]
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	b2da      	uxtb	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	611a      	str	r2, [r3, #16]
 800369a:	e05f      	b.n	800375c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800369c:	897b      	ldrh	r3, [r7, #10]
 800369e:	11db      	asrs	r3, r3, #7
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	f003 0306 	and.w	r3, r3, #6
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	f063 030f 	orn	r3, r3, #15
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4930      	ldr	r1, [pc, #192]	@ (800377c <I2C_MasterRequestRead+0x194>)
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f8dc 	bl	8003878 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e054      	b.n	8003774 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036ca:	897b      	ldrh	r3, [r7, #10]
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	4929      	ldr	r1, [pc, #164]	@ (8003780 <I2C_MasterRequestRead+0x198>)
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 f8cc 	bl	8003878 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e044      	b.n	8003774 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	613b      	str	r3, [r7, #16]
 80036fe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800370e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 f831 	bl	8003784 <I2C_WaitOnFlagUntilTimeout>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00d      	beq.n	8003744 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003736:	d103      	bne.n	8003740 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800373e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e017      	b.n	8003774 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003744:	897b      	ldrh	r3, [r7, #10]
 8003746:	11db      	asrs	r3, r3, #7
 8003748:	b2db      	uxtb	r3, r3
 800374a:	f003 0306 	and.w	r3, r3, #6
 800374e:	b2db      	uxtb	r3, r3
 8003750:	f063 030e 	orn	r3, r3, #14
 8003754:	b2da      	uxtb	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	4907      	ldr	r1, [pc, #28]	@ (8003780 <I2C_MasterRequestRead+0x198>)
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f888 	bl	8003878 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	00010008 	.word	0x00010008
 8003780:	00010002 	.word	0x00010002

08003784 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	4613      	mov	r3, r2
 8003792:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003794:	e048      	b.n	8003828 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379c:	d044      	beq.n	8003828 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379e:	f7fe ff35 	bl	800260c <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d302      	bcc.n	80037b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d139      	bne.n	8003828 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	0c1b      	lsrs	r3, r3, #16
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d10d      	bne.n	80037da <I2C_WaitOnFlagUntilTimeout+0x56>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	43da      	mvns	r2, r3
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	4013      	ands	r3, r2
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	bf0c      	ite	eq
 80037d0:	2301      	moveq	r3, #1
 80037d2:	2300      	movne	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	461a      	mov	r2, r3
 80037d8:	e00c      	b.n	80037f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	43da      	mvns	r2, r3
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	4013      	ands	r3, r2
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	bf0c      	ite	eq
 80037ec:	2301      	moveq	r3, #1
 80037ee:	2300      	movne	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	461a      	mov	r2, r3
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d116      	bne.n	8003828 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003814:	f043 0220 	orr.w	r2, r3, #32
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e023      	b.n	8003870 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	0c1b      	lsrs	r3, r3, #16
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b01      	cmp	r3, #1
 8003830:	d10d      	bne.n	800384e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	43da      	mvns	r2, r3
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	4013      	ands	r3, r2
 800383e:	b29b      	uxth	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	bf0c      	ite	eq
 8003844:	2301      	moveq	r3, #1
 8003846:	2300      	movne	r3, #0
 8003848:	b2db      	uxtb	r3, r3
 800384a:	461a      	mov	r2, r3
 800384c:	e00c      	b.n	8003868 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	43da      	mvns	r2, r3
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	4013      	ands	r3, r2
 800385a:	b29b      	uxth	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	bf0c      	ite	eq
 8003860:	2301      	moveq	r3, #1
 8003862:	2300      	movne	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	461a      	mov	r2, r3
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	429a      	cmp	r2, r3
 800386c:	d093      	beq.n	8003796 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
 8003884:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003886:	e071      	b.n	800396c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003892:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003896:	d123      	bne.n	80038e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038cc:	f043 0204 	orr.w	r2, r3, #4
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e067      	b.n	80039b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e6:	d041      	beq.n	800396c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e8:	f7fe fe90 	bl	800260c <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d302      	bcc.n	80038fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d136      	bne.n	800396c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	0c1b      	lsrs	r3, r3, #16
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b01      	cmp	r3, #1
 8003906:	d10c      	bne.n	8003922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	43da      	mvns	r2, r3
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	4013      	ands	r3, r2
 8003914:	b29b      	uxth	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	bf14      	ite	ne
 800391a:	2301      	movne	r3, #1
 800391c:	2300      	moveq	r3, #0
 800391e:	b2db      	uxtb	r3, r3
 8003920:	e00b      	b.n	800393a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	43da      	mvns	r2, r3
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	4013      	ands	r3, r2
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	bf14      	ite	ne
 8003934:	2301      	movne	r3, #1
 8003936:	2300      	moveq	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d016      	beq.n	800396c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003958:	f043 0220 	orr.w	r2, r3, #32
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e021      	b.n	80039b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	0c1b      	lsrs	r3, r3, #16
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b01      	cmp	r3, #1
 8003974:	d10c      	bne.n	8003990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	43da      	mvns	r2, r3
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	4013      	ands	r3, r2
 8003982:	b29b      	uxth	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	bf14      	ite	ne
 8003988:	2301      	movne	r3, #1
 800398a:	2300      	moveq	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	e00b      	b.n	80039a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	43da      	mvns	r2, r3
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4013      	ands	r3, r2
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	bf14      	ite	ne
 80039a2:	2301      	movne	r3, #1
 80039a4:	2300      	moveq	r3, #0
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f47f af6d 	bne.w	8003888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039c4:	e034      	b.n	8003a30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f8e3 	bl	8003b92 <I2C_IsAcknowledgeFailed>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e034      	b.n	8003a40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039dc:	d028      	beq.n	8003a30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039de:	f7fe fe15 	bl	800260c <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d302      	bcc.n	80039f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d11d      	bne.n	8003a30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039fe:	2b80      	cmp	r3, #128	@ 0x80
 8003a00:	d016      	beq.n	8003a30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1c:	f043 0220 	orr.w	r2, r3, #32
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e007      	b.n	8003a40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a3a:	2b80      	cmp	r3, #128	@ 0x80
 8003a3c:	d1c3      	bne.n	80039c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a54:	e034      	b.n	8003ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 f89b 	bl	8003b92 <I2C_IsAcknowledgeFailed>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e034      	b.n	8003ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6c:	d028      	beq.n	8003ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a6e:	f7fe fdcd 	bl	800260c <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d302      	bcc.n	8003a84 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d11d      	bne.n	8003ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d016      	beq.n	8003ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aac:	f043 0220 	orr.w	r2, r3, #32
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e007      	b.n	8003ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d1c3      	bne.n	8003a56 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ae4:	e049      	b.n	8003b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	f003 0310 	and.w	r3, r3, #16
 8003af0:	2b10      	cmp	r3, #16
 8003af2:	d119      	bne.n	8003b28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0210 	mvn.w	r2, #16
 8003afc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e030      	b.n	8003b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b28:	f7fe fd70 	bl	800260c <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d302      	bcc.n	8003b3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d11d      	bne.n	8003b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b48:	2b40      	cmp	r3, #64	@ 0x40
 8003b4a:	d016      	beq.n	8003b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b66:	f043 0220 	orr.w	r2, r3, #32
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e007      	b.n	8003b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b84:	2b40      	cmp	r3, #64	@ 0x40
 8003b86:	d1ae      	bne.n	8003ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ba4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ba8:	d11b      	bne.n	8003be2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003bb2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	f043 0204 	orr.w	r2, r3, #4
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e101      	b.n	8003e06 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d106      	bne.n	8003c22 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f006 fd51 	bl	800a6c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2203      	movs	r2, #3
 8003c26:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c30:	d102      	bne.n	8003c38 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f003 fb02 	bl	8007246 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	7c1a      	ldrb	r2, [r3, #16]
 8003c4a:	f88d 2000 	strb.w	r2, [sp]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c52:	f003 f9e1 	bl	8007018 <USB_CoreInit>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0ce      	b.n	8003e06 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f003 fafa 	bl	8007268 <USB_SetCurrentMode>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d005      	beq.n	8003c86 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e0bf      	b.n	8003e06 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c86:	2300      	movs	r3, #0
 8003c88:	73fb      	strb	r3, [r7, #15]
 8003c8a:	e04a      	b.n	8003d22 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c8c:	7bfa      	ldrb	r2, [r7, #15]
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	4613      	mov	r3, r2
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	4413      	add	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	3315      	adds	r3, #21
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ca0:	7bfa      	ldrb	r2, [r7, #15]
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	3314      	adds	r3, #20
 8003cb0:	7bfa      	ldrb	r2, [r7, #15]
 8003cb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003cb4:	7bfa      	ldrb	r2, [r7, #15]
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
 8003cb8:	b298      	uxth	r0, r3
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	332e      	adds	r3, #46	@ 0x2e
 8003cc8:	4602      	mov	r2, r0
 8003cca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ccc:	7bfa      	ldrb	r2, [r7, #15]
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	3318      	adds	r3, #24
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ce0:	7bfa      	ldrb	r2, [r7, #15]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	4413      	add	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	331c      	adds	r3, #28
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003cf4:	7bfa      	ldrb	r2, [r7, #15]
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	3320      	adds	r3, #32
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d08:	7bfa      	ldrb	r2, [r7, #15]
 8003d0a:	6879      	ldr	r1, [r7, #4]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	3324      	adds	r3, #36	@ 0x24
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	73fb      	strb	r3, [r7, #15]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	791b      	ldrb	r3, [r3, #4]
 8003d26:	7bfa      	ldrb	r2, [r7, #15]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d3af      	bcc.n	8003c8c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	73fb      	strb	r3, [r7, #15]
 8003d30:	e044      	b.n	8003dbc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d32:	7bfa      	ldrb	r2, [r7, #15]
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	4413      	add	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	440b      	add	r3, r1
 8003d40:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003d44:	2200      	movs	r2, #0
 8003d46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d48:	7bfa      	ldrb	r2, [r7, #15]
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	4413      	add	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003d5a:	7bfa      	ldrb	r2, [r7, #15]
 8003d5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d5e:	7bfa      	ldrb	r2, [r7, #15]
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	4613      	mov	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	4413      	add	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	440b      	add	r3, r1
 8003d6c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003d70:	2200      	movs	r2, #0
 8003d72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d74:	7bfa      	ldrb	r2, [r7, #15]
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d8a:	7bfa      	ldrb	r2, [r7, #15]
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	4413      	add	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003da0:	7bfa      	ldrb	r2, [r7, #15]
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	4613      	mov	r3, r2
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
 8003db8:	3301      	adds	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	791b      	ldrb	r3, [r3, #4]
 8003dc0:	7bfa      	ldrb	r2, [r7, #15]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d3b5      	bcc.n	8003d32 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	7c1a      	ldrb	r2, [r3, #16]
 8003dce:	f88d 2000 	strb.w	r2, [sp]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dd6:	f003 fa93 	bl	8007300 <USB_DevInit>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d005      	beq.n	8003dec <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e00c      	b.n	8003e06 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f004 fad7 	bl	80083b2 <USB_DevDisconnect>

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b084      	sub	sp, #16
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_PCD_Start+0x1c>
 8003e26:	2302      	movs	r3, #2
 8003e28:	e022      	b.n	8003e70 <HAL_PCD_Start+0x62>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d009      	beq.n	8003e52 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d105      	bne.n	8003e52 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f003 f9e4 	bl	8007224 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f004 fa85 	bl	8008370 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003e78:	b590      	push	{r4, r7, lr}
 8003e7a:	b08d      	sub	sp, #52	@ 0x34
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f004 fb43 	bl	800851a <USB_GetMode>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f040 848c 	bne.w	80047b4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f004 faa7 	bl	80083f4 <USB_ReadInterrupts>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 8482 	beq.w	80047b2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	0a1b      	lsrs	r3, r3, #8
 8003eb8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f004 fa94 	bl	80083f4 <USB_ReadInterrupts>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d107      	bne.n	8003ee6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695a      	ldr	r2, [r3, #20]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f002 0202 	and.w	r2, r2, #2
 8003ee4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f004 fa82 	bl	80083f4 <USB_ReadInterrupts>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b10      	cmp	r3, #16
 8003ef8:	d161      	bne.n	8003fbe <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	699a      	ldr	r2, [r3, #24]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0210 	bic.w	r2, r2, #16
 8003f08:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	f003 020f 	and.w	r2, r3, #15
 8003f16:	4613      	mov	r3, r2
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	4413      	add	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	4413      	add	r3, r2
 8003f26:	3304      	adds	r3, #4
 8003f28:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	0c5b      	lsrs	r3, r3, #17
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d124      	bne.n	8003f80 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d035      	beq.n	8003fae <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	6a38      	ldr	r0, [r7, #32]
 8003f56:	f004 f8b9 	bl	80080cc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	091b      	lsrs	r3, r3, #4
 8003f62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f66:	441a      	add	r2, r3
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	695a      	ldr	r2, [r3, #20]
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	091b      	lsrs	r3, r3, #4
 8003f74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f78:	441a      	add	r2, r3
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	615a      	str	r2, [r3, #20]
 8003f7e:	e016      	b.n	8003fae <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	0c5b      	lsrs	r3, r3, #17
 8003f84:	f003 030f 	and.w	r3, r3, #15
 8003f88:	2b06      	cmp	r3, #6
 8003f8a:	d110      	bne.n	8003fae <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f92:	2208      	movs	r2, #8
 8003f94:	4619      	mov	r1, r3
 8003f96:	6a38      	ldr	r0, [r7, #32]
 8003f98:	f004 f898 	bl	80080cc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	695a      	ldr	r2, [r3, #20]
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	091b      	lsrs	r3, r3, #4
 8003fa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fa8:	441a      	add	r2, r3
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	699a      	ldr	r2, [r3, #24]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f042 0210 	orr.w	r2, r2, #16
 8003fbc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f004 fa16 	bl	80083f4 <USB_ReadInterrupts>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fce:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003fd2:	f040 80a7 	bne.w	8004124 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f004 fa1b 	bl	800841a <USB_ReadDevAllOutEpInterrupt>
 8003fe4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003fe6:	e099      	b.n	800411c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 808e 	beq.w	8004110 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	4611      	mov	r1, r2
 8003ffe:	4618      	mov	r0, r3
 8004000:	f004 fa3f 	bl	8008482 <USB_ReadDevOutEPInterrupt>
 8004004:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00c      	beq.n	800402a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800401c:	461a      	mov	r2, r3
 800401e:	2301      	movs	r3, #1
 8004020:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004022:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 fe89 	bl	8004d3c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00c      	beq.n	800404e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	4413      	add	r3, r2
 800403c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004040:	461a      	mov	r2, r3
 8004042:	2308      	movs	r3, #8
 8004044:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004046:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 ff5f 	bl	8004f0c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f003 0310 	and.w	r3, r3, #16
 8004054:	2b00      	cmp	r3, #0
 8004056:	d008      	beq.n	800406a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004064:	461a      	mov	r2, r3
 8004066:	2310      	movs	r3, #16
 8004068:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d030      	beq.n	80040d6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800407c:	2b80      	cmp	r3, #128	@ 0x80
 800407e:	d109      	bne.n	8004094 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	69fa      	ldr	r2, [r7, #28]
 800408a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800408e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004092:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004096:	4613      	mov	r3, r2
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	4413      	add	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	4413      	add	r3, r2
 80040a6:	3304      	adds	r3, #4
 80040a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	78db      	ldrb	r3, [r3, #3]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d108      	bne.n	80040c4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2200      	movs	r2, #0
 80040b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80040b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	4619      	mov	r1, r3
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f006 fbfc 	bl	800a8bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80040c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040d0:	461a      	mov	r2, r3
 80040d2:	2302      	movs	r3, #2
 80040d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d008      	beq.n	80040f2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ec:	461a      	mov	r2, r3
 80040ee:	2320      	movs	r3, #32
 80040f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d009      	beq.n	8004110 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80040fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fe:	015a      	lsls	r2, r3, #5
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	4413      	add	r3, r2
 8004104:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004108:	461a      	mov	r2, r3
 800410a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800410e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004112:	3301      	adds	r3, #1
 8004114:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004118:	085b      	lsrs	r3, r3, #1
 800411a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800411c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411e:	2b00      	cmp	r3, #0
 8004120:	f47f af62 	bne.w	8003fe8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f004 f963 	bl	80083f4 <USB_ReadInterrupts>
 800412e:	4603      	mov	r3, r0
 8004130:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004134:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004138:	f040 80db 	bne.w	80042f2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f004 f984 	bl	800844e <USB_ReadDevAllInEpInterrupt>
 8004146:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800414c:	e0cd      	b.n	80042ea <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800414e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 80c2 	beq.w	80042de <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	4611      	mov	r1, r2
 8004164:	4618      	mov	r0, r3
 8004166:	f004 f9aa 	bl	80084be <USB_ReadDevInEPInterrupt>
 800416a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d057      	beq.n	8004226 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004178:	f003 030f 	and.w	r3, r3, #15
 800417c:	2201      	movs	r2, #1
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800418a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	43db      	mvns	r3, r3
 8004190:	69f9      	ldr	r1, [r7, #28]
 8004192:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004196:	4013      	ands	r3, r2
 8004198:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800419a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041a6:	461a      	mov	r2, r3
 80041a8:	2301      	movs	r3, #1
 80041aa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	799b      	ldrb	r3, [r3, #6]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d132      	bne.n	800421a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041b8:	4613      	mov	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	4413      	add	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	440b      	add	r3, r1
 80041c2:	3320      	adds	r3, #32
 80041c4:	6819      	ldr	r1, [r3, #0]
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ca:	4613      	mov	r3, r2
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4403      	add	r3, r0
 80041d4:	331c      	adds	r3, #28
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4419      	add	r1, r3
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041de:	4613      	mov	r3, r2
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	4413      	add	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4403      	add	r3, r0
 80041e8:	3320      	adds	r3, #32
 80041ea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80041ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d113      	bne.n	800421a <HAL_PCD_IRQHandler+0x3a2>
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041f6:	4613      	mov	r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	440b      	add	r3, r1
 8004200:	3324      	adds	r3, #36	@ 0x24
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d108      	bne.n	800421a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6818      	ldr	r0, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004212:	461a      	mov	r2, r3
 8004214:	2101      	movs	r1, #1
 8004216:	f004 f9b1 	bl	800857c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421c:	b2db      	uxtb	r3, r3
 800421e:	4619      	mov	r1, r3
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f006 fad0 	bl	800a7c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	4413      	add	r3, r2
 8004238:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800423c:	461a      	mov	r2, r3
 800423e:	2308      	movs	r3, #8
 8004240:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	2b00      	cmp	r3, #0
 800424a:	d008      	beq.n	800425e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800424c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004258:	461a      	mov	r2, r3
 800425a:	2310      	movs	r3, #16
 800425c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004264:	2b00      	cmp	r3, #0
 8004266:	d008      	beq.n	800427a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	4413      	add	r3, r2
 8004270:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004274:	461a      	mov	r2, r3
 8004276:	2340      	movs	r3, #64	@ 0x40
 8004278:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d023      	beq.n	80042cc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004284:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004286:	6a38      	ldr	r0, [r7, #32]
 8004288:	f003 f99e 	bl	80075c8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800428c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800428e:	4613      	mov	r3, r2
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	4413      	add	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	3310      	adds	r3, #16
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	4413      	add	r3, r2
 800429c:	3304      	adds	r3, #4
 800429e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	78db      	ldrb	r3, [r3, #3]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d108      	bne.n	80042ba <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	2200      	movs	r2, #0
 80042ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80042ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	4619      	mov	r1, r3
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f006 fb13 	bl	800a8e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80042ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042c6:	461a      	mov	r2, r3
 80042c8:	2302      	movs	r3, #2
 80042ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80042d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 fca3 	bl	8004c24 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80042de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e0:	3301      	adds	r3, #1
 80042e2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80042e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e6:	085b      	lsrs	r3, r3, #1
 80042e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80042ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f47f af2e 	bne.w	800414e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f004 f87c 	bl	80083f4 <USB_ReadInterrupts>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004302:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004306:	d122      	bne.n	800434e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	69fa      	ldr	r2, [r7, #28]
 8004312:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004316:	f023 0301 	bic.w	r3, r3, #1
 800431a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004322:	2b01      	cmp	r3, #1
 8004324:	d108      	bne.n	8004338 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800432e:	2100      	movs	r1, #0
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 fe89 	bl	8005048 <HAL_PCDEx_LPM_Callback>
 8004336:	e002      	b.n	800433e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f006 fab1 	bl	800a8a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695a      	ldr	r2, [r3, #20]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800434c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4618      	mov	r0, r3
 8004354:	f004 f84e 	bl	80083f4 <USB_ReadInterrupts>
 8004358:	4603      	mov	r3, r0
 800435a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800435e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004362:	d112      	bne.n	800438a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b01      	cmp	r3, #1
 8004372:	d102      	bne.n	800437a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f006 fa6d 	bl	800a854 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	695a      	ldr	r2, [r3, #20]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004388:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f004 f830 	bl	80083f4 <USB_ReadInterrupts>
 8004394:	4603      	mov	r3, r0
 8004396:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800439a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800439e:	f040 80b7 	bne.w	8004510 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	69fa      	ldr	r2, [r7, #28]
 80043ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043b0:	f023 0301 	bic.w	r3, r3, #1
 80043b4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2110      	movs	r1, #16
 80043bc:	4618      	mov	r0, r3
 80043be:	f003 f903 	bl	80075c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043c2:	2300      	movs	r3, #0
 80043c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043c6:	e046      	b.n	8004456 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80043c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043d4:	461a      	mov	r2, r3
 80043d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80043da:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80043dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043ec:	0151      	lsls	r1, r2, #5
 80043ee:	69fa      	ldr	r2, [r7, #28]
 80043f0:	440a      	add	r2, r1
 80043f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80043fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80043fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004408:	461a      	mov	r2, r3
 800440a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800440e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004420:	0151      	lsls	r1, r2, #5
 8004422:	69fa      	ldr	r2, [r7, #28]
 8004424:	440a      	add	r2, r1
 8004426:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800442a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800442e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004440:	0151      	lsls	r1, r2, #5
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	440a      	add	r2, r1
 8004446:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800444a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800444e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004452:	3301      	adds	r3, #1
 8004454:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	791b      	ldrb	r3, [r3, #4]
 800445a:	461a      	mov	r2, r3
 800445c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800445e:	4293      	cmp	r3, r2
 8004460:	d3b2      	bcc.n	80043c8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004470:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004474:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	7bdb      	ldrb	r3, [r3, #15]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d016      	beq.n	80044ac <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004484:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004488:	69fa      	ldr	r2, [r7, #28]
 800448a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800448e:	f043 030b 	orr.w	r3, r3, #11
 8004492:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800449c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449e:	69fa      	ldr	r2, [r7, #28]
 80044a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044a4:	f043 030b 	orr.w	r3, r3, #11
 80044a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80044aa:	e015      	b.n	80044d8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	69fa      	ldr	r2, [r7, #28]
 80044b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80044be:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80044c2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044d2:	f043 030b 	orr.w	r3, r3, #11
 80044d6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69fa      	ldr	r2, [r7, #28]
 80044e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044e6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80044ea:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6818      	ldr	r0, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80044fa:	461a      	mov	r2, r3
 80044fc:	f004 f83e 	bl	800857c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695a      	ldr	r2, [r3, #20]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800450e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4618      	mov	r0, r3
 8004516:	f003 ff6d 	bl	80083f4 <USB_ReadInterrupts>
 800451a:	4603      	mov	r3, r0
 800451c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004520:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004524:	d123      	bne.n	800456e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f004 f803 	bl	8008536 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f003 f8c0 	bl	80076ba <USB_GetDevSpeed>
 800453a:	4603      	mov	r3, r0
 800453c:	461a      	mov	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681c      	ldr	r4, [r3, #0]
 8004546:	f001 f9af 	bl	80058a8 <HAL_RCC_GetHCLKFreq>
 800454a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004550:	461a      	mov	r2, r3
 8004552:	4620      	mov	r0, r4
 8004554:	f002 fdc4 	bl	80070e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f006 f95c 	bl	800a816 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695a      	ldr	r2, [r3, #20]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800456c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f003 ff3e 	bl	80083f4 <USB_ReadInterrupts>
 8004578:	4603      	mov	r3, r0
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b08      	cmp	r3, #8
 8004580:	d10a      	bne.n	8004598 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f006 f939 	bl	800a7fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695a      	ldr	r2, [r3, #20]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f002 0208 	and.w	r2, r2, #8
 8004596:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f003 ff29 	bl	80083f4 <USB_ReadInterrupts>
 80045a2:	4603      	mov	r3, r0
 80045a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045a8:	2b80      	cmp	r3, #128	@ 0x80
 80045aa:	d123      	bne.n	80045f4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045b8:	2301      	movs	r3, #1
 80045ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80045bc:	e014      	b.n	80045e8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045c2:	4613      	mov	r3, r2
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	4413      	add	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	440b      	add	r3, r1
 80045cc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d105      	bne.n	80045e2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80045d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	4619      	mov	r1, r3
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 faf0 	bl	8004bc2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	3301      	adds	r3, #1
 80045e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	791b      	ldrb	r3, [r3, #4]
 80045ec:	461a      	mov	r2, r3
 80045ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d3e4      	bcc.n	80045be <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f003 fefb 	bl	80083f4 <USB_ReadInterrupts>
 80045fe:	4603      	mov	r3, r0
 8004600:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004604:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004608:	d13c      	bne.n	8004684 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800460a:	2301      	movs	r3, #1
 800460c:	627b      	str	r3, [r7, #36]	@ 0x24
 800460e:	e02b      	b.n	8004668 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004620:	6879      	ldr	r1, [r7, #4]
 8004622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004624:	4613      	mov	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	4413      	add	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	3318      	adds	r3, #24
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d115      	bne.n	8004662 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004636:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004638:	2b00      	cmp	r3, #0
 800463a:	da12      	bge.n	8004662 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004640:	4613      	mov	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	3317      	adds	r3, #23
 800464c:	2201      	movs	r2, #1
 800464e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004652:	b2db      	uxtb	r3, r3
 8004654:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004658:	b2db      	uxtb	r3, r3
 800465a:	4619      	mov	r1, r3
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 fab0 	bl	8004bc2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004664:	3301      	adds	r3, #1
 8004666:	627b      	str	r3, [r7, #36]	@ 0x24
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	791b      	ldrb	r3, [r3, #4]
 800466c:	461a      	mov	r2, r3
 800466e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004670:	4293      	cmp	r3, r2
 8004672:	d3cd      	bcc.n	8004610 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695a      	ldr	r2, [r3, #20]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004682:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f003 feb3 	bl	80083f4 <USB_ReadInterrupts>
 800468e:	4603      	mov	r3, r0
 8004690:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004694:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004698:	d156      	bne.n	8004748 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800469a:	2301      	movs	r3, #1
 800469c:	627b      	str	r3, [r7, #36]	@ 0x24
 800469e:	e045      	b.n	800472c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80046a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b4:	4613      	mov	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	4413      	add	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d12e      	bne.n	8004726 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80046c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	da2b      	bge.n	8004726 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80046da:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80046de:	429a      	cmp	r2, r3
 80046e0:	d121      	bne.n	8004726 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046e6:	4613      	mov	r3, r2
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	4413      	add	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	440b      	add	r3, r1
 80046f0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80046f4:	2201      	movs	r2, #1
 80046f6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10a      	bne.n	8004726 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800471e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004722:	6053      	str	r3, [r2, #4]
            break;
 8004724:	e008      	b.n	8004738 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	3301      	adds	r3, #1
 800472a:	627b      	str	r3, [r7, #36]	@ 0x24
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	791b      	ldrb	r3, [r3, #4]
 8004730:	461a      	mov	r2, r3
 8004732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004734:	4293      	cmp	r3, r2
 8004736:	d3b3      	bcc.n	80046a0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695a      	ldr	r2, [r3, #20]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004746:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f003 fe51 	bl	80083f4 <USB_ReadInterrupts>
 8004752:	4603      	mov	r3, r0
 8004754:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800475c:	d10a      	bne.n	8004774 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f006 f8d0 	bl	800a904 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695a      	ldr	r2, [r3, #20]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004772:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4618      	mov	r0, r3
 800477a:	f003 fe3b 	bl	80083f4 <USB_ReadInterrupts>
 800477e:	4603      	mov	r3, r0
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b04      	cmp	r3, #4
 8004786:	d115      	bne.n	80047b4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	f003 0304 	and.w	r3, r3, #4
 8004796:	2b00      	cmp	r3, #0
 8004798:	d002      	beq.n	80047a0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f006 f8c0 	bl	800a920 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6859      	ldr	r1, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	605a      	str	r2, [r3, #4]
 80047b0:	e000      	b.n	80047b4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80047b2:	bf00      	nop
    }
  }
}
 80047b4:	3734      	adds	r7, #52	@ 0x34
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd90      	pop	{r4, r7, pc}

080047ba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b082      	sub	sp, #8
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	460b      	mov	r3, r1
 80047c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_PCD_SetAddress+0x1a>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e012      	b.n	80047fa <HAL_PCD_SetAddress+0x40>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	78fa      	ldrb	r2, [r7, #3]
 80047e0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	78fa      	ldrb	r2, [r7, #3]
 80047e8:	4611      	mov	r1, r2
 80047ea:	4618      	mov	r0, r3
 80047ec:	f003 fd9a 	bl	8008324 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b084      	sub	sp, #16
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	4608      	mov	r0, r1
 800480c:	4611      	mov	r1, r2
 800480e:	461a      	mov	r2, r3
 8004810:	4603      	mov	r3, r0
 8004812:	70fb      	strb	r3, [r7, #3]
 8004814:	460b      	mov	r3, r1
 8004816:	803b      	strh	r3, [r7, #0]
 8004818:	4613      	mov	r3, r2
 800481a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004820:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004824:	2b00      	cmp	r3, #0
 8004826:	da0f      	bge.n	8004848 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	f003 020f 	and.w	r2, r3, #15
 800482e:	4613      	mov	r3, r2
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	4413      	add	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	3310      	adds	r3, #16
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	4413      	add	r3, r2
 800483c:	3304      	adds	r3, #4
 800483e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2201      	movs	r2, #1
 8004844:	705a      	strb	r2, [r3, #1]
 8004846:	e00f      	b.n	8004868 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	f003 020f 	and.w	r2, r3, #15
 800484e:	4613      	mov	r3, r2
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	4413      	add	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	4413      	add	r3, r2
 800485e:	3304      	adds	r3, #4
 8004860:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004868:	78fb      	ldrb	r3, [r7, #3]
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	b2da      	uxtb	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004874:	883a      	ldrh	r2, [r7, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	78ba      	ldrb	r2, [r7, #2]
 800487e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	785b      	ldrb	r3, [r3, #1]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d004      	beq.n	8004892 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	461a      	mov	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004892:	78bb      	ldrb	r3, [r7, #2]
 8004894:	2b02      	cmp	r3, #2
 8004896:	d102      	bne.n	800489e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d101      	bne.n	80048ac <HAL_PCD_EP_Open+0xaa>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e00e      	b.n	80048ca <HAL_PCD_EP_Open+0xc8>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68f9      	ldr	r1, [r7, #12]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f002 ff22 	bl	8007704 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80048c8:	7afb      	ldrb	r3, [r7, #11]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b084      	sub	sp, #16
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	460b      	mov	r3, r1
 80048dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80048de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	da0f      	bge.n	8004906 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048e6:	78fb      	ldrb	r3, [r7, #3]
 80048e8:	f003 020f 	and.w	r2, r3, #15
 80048ec:	4613      	mov	r3, r2
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	3310      	adds	r3, #16
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	4413      	add	r3, r2
 80048fa:	3304      	adds	r3, #4
 80048fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2201      	movs	r2, #1
 8004902:	705a      	strb	r2, [r3, #1]
 8004904:	e00f      	b.n	8004926 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004906:	78fb      	ldrb	r3, [r7, #3]
 8004908:	f003 020f 	and.w	r2, r3, #15
 800490c:	4613      	mov	r3, r2
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	4413      	add	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	4413      	add	r3, r2
 800491c:	3304      	adds	r3, #4
 800491e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004926:	78fb      	ldrb	r3, [r7, #3]
 8004928:	f003 030f 	and.w	r3, r3, #15
 800492c:	b2da      	uxtb	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004938:	2b01      	cmp	r3, #1
 800493a:	d101      	bne.n	8004940 <HAL_PCD_EP_Close+0x6e>
 800493c:	2302      	movs	r3, #2
 800493e:	e00e      	b.n	800495e <HAL_PCD_EP_Close+0x8c>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68f9      	ldr	r1, [r7, #12]
 800494e:	4618      	mov	r0, r3
 8004950:	f002 ff60 	bl	8007814 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b086      	sub	sp, #24
 800496a:	af00      	add	r7, sp, #0
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	607a      	str	r2, [r7, #4]
 8004970:	603b      	str	r3, [r7, #0]
 8004972:	460b      	mov	r3, r1
 8004974:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004976:	7afb      	ldrb	r3, [r7, #11]
 8004978:	f003 020f 	and.w	r2, r3, #15
 800497c:	4613      	mov	r3, r2
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	4413      	add	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	4413      	add	r3, r2
 800498c:	3304      	adds	r3, #4
 800498e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	2200      	movs	r2, #0
 80049a0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2200      	movs	r2, #0
 80049a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049a8:	7afb      	ldrb	r3, [r7, #11]
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	b2da      	uxtb	r2, r3
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	799b      	ldrb	r3, [r3, #6]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d102      	bne.n	80049c2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6818      	ldr	r0, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	799b      	ldrb	r3, [r3, #6]
 80049ca:	461a      	mov	r2, r3
 80049cc:	6979      	ldr	r1, [r7, #20]
 80049ce:	f002 fffd 	bl	80079cc <USB_EPStartXfer>

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	607a      	str	r2, [r7, #4]
 80049e6:	603b      	str	r3, [r7, #0]
 80049e8:	460b      	mov	r3, r1
 80049ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049ec:	7afb      	ldrb	r3, [r7, #11]
 80049ee:	f003 020f 	and.w	r2, r3, #15
 80049f2:	4613      	mov	r3, r2
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	4413      	add	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	3310      	adds	r3, #16
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4413      	add	r3, r2
 8004a00:	3304      	adds	r3, #4
 8004a02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	2200      	movs	r2, #0
 8004a14:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a1c:	7afb      	ldrb	r3, [r7, #11]
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	799b      	ldrb	r3, [r3, #6]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d102      	bne.n	8004a36 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	799b      	ldrb	r3, [r3, #6]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	6979      	ldr	r1, [r7, #20]
 8004a42:	f002 ffc3 	bl	80079cc <USB_EPStartXfer>

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004a5c:	78fb      	ldrb	r3, [r7, #3]
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	7912      	ldrb	r2, [r2, #4]
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d901      	bls.n	8004a6e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e04f      	b.n	8004b0e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	da0f      	bge.n	8004a96 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a76:	78fb      	ldrb	r3, [r7, #3]
 8004a78:	f003 020f 	and.w	r2, r3, #15
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	4413      	add	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	3310      	adds	r3, #16
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	4413      	add	r3, r2
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2201      	movs	r2, #1
 8004a92:	705a      	strb	r2, [r3, #1]
 8004a94:	e00d      	b.n	8004ab2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a96:	78fa      	ldrb	r2, [r7, #3]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	4413      	add	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d101      	bne.n	8004ad2 <HAL_PCD_EP_SetStall+0x82>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e01d      	b.n	8004b0e <HAL_PCD_EP_SetStall+0xbe>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68f9      	ldr	r1, [r7, #12]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f003 fb4b 	bl	800817c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ae6:	78fb      	ldrb	r3, [r7, #3]
 8004ae8:	f003 030f 	and.w	r3, r3, #15
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d109      	bne.n	8004b04 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6818      	ldr	r0, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	7999      	ldrb	r1, [r3, #6]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004afe:	461a      	mov	r2, r3
 8004b00:	f003 fd3c 	bl	800857c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	460b      	mov	r3, r1
 8004b20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004b22:	78fb      	ldrb	r3, [r7, #3]
 8004b24:	f003 030f 	and.w	r3, r3, #15
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	7912      	ldrb	r2, [r2, #4]
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d901      	bls.n	8004b34 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e042      	b.n	8004bba <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	da0f      	bge.n	8004b5c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b3c:	78fb      	ldrb	r3, [r7, #3]
 8004b3e:	f003 020f 	and.w	r2, r3, #15
 8004b42:	4613      	mov	r3, r2
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	4413      	add	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	3310      	adds	r3, #16
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	4413      	add	r3, r2
 8004b50:	3304      	adds	r3, #4
 8004b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2201      	movs	r2, #1
 8004b58:	705a      	strb	r2, [r3, #1]
 8004b5a:	e00f      	b.n	8004b7c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b5c:	78fb      	ldrb	r3, [r7, #3]
 8004b5e:	f003 020f 	and.w	r2, r3, #15
 8004b62:	4613      	mov	r3, r2
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	4413      	add	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	4413      	add	r3, r2
 8004b72:	3304      	adds	r3, #4
 8004b74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b82:	78fb      	ldrb	r3, [r7, #3]
 8004b84:	f003 030f 	and.w	r3, r3, #15
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d101      	bne.n	8004b9c <HAL_PCD_EP_ClrStall+0x86>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e00e      	b.n	8004bba <HAL_PCD_EP_ClrStall+0xa4>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68f9      	ldr	r1, [r7, #12]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f003 fb54 	bl	8008258 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b084      	sub	sp, #16
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	460b      	mov	r3, r1
 8004bcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004bce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	da0c      	bge.n	8004bf0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bd6:	78fb      	ldrb	r3, [r7, #3]
 8004bd8:	f003 020f 	and.w	r2, r3, #15
 8004bdc:	4613      	mov	r3, r2
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	3310      	adds	r3, #16
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	4413      	add	r3, r2
 8004bea:	3304      	adds	r3, #4
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	e00c      	b.n	8004c0a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bf0:	78fb      	ldrb	r3, [r7, #3]
 8004bf2:	f003 020f 	and.w	r2, r3, #15
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4413      	add	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	4413      	add	r3, r2
 8004c06:	3304      	adds	r3, #4
 8004c08:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68f9      	ldr	r1, [r7, #12]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f003 f973 	bl	8007efc <USB_EPStopXfer>
 8004c16:	4603      	mov	r3, r0
 8004c18:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004c1a:	7afb      	ldrb	r3, [r7, #11]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08a      	sub	sp, #40	@ 0x28
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	4413      	add	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	3310      	adds	r3, #16
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	4413      	add	r3, r2
 8004c48:	3304      	adds	r3, #4
 8004c4a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	695a      	ldr	r2, [r3, #20]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d901      	bls.n	8004c5c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e06b      	b.n	8004d34 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	69fa      	ldr	r2, [r7, #28]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d902      	bls.n	8004c78 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	3303      	adds	r3, #3
 8004c7c:	089b      	lsrs	r3, r3, #2
 8004c7e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c80:	e02a      	b.n	8004cd8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	691a      	ldr	r2, [r3, #16]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	69fa      	ldr	r2, [r7, #28]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d902      	bls.n	8004c9e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	3303      	adds	r3, #3
 8004ca2:	089b      	lsrs	r3, r3, #2
 8004ca4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	68d9      	ldr	r1, [r3, #12]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	4603      	mov	r3, r0
 8004cba:	6978      	ldr	r0, [r7, #20]
 8004cbc:	f003 f9c8 	bl	8008050 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	68da      	ldr	r2, [r3, #12]
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	441a      	add	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	695a      	ldr	r2, [r3, #20]
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	441a      	add	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d809      	bhi.n	8004d02 <PCD_WriteEmptyTxFifo+0xde>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	695a      	ldr	r2, [r3, #20]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d203      	bcs.n	8004d02 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1bf      	bne.n	8004c82 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	691a      	ldr	r2, [r3, #16]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d811      	bhi.n	8004d32 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	f003 030f 	and.w	r3, r3, #15
 8004d14:	2201      	movs	r2, #1
 8004d16:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	43db      	mvns	r3, r3
 8004d28:	6939      	ldr	r1, [r7, #16]
 8004d2a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d2e:	4013      	ands	r3, r2
 8004d30:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3720      	adds	r7, #32
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b088      	sub	sp, #32
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	333c      	adds	r3, #60	@ 0x3c
 8004d54:	3304      	adds	r3, #4
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	799b      	ldrb	r3, [r3, #6]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d17b      	bne.n	8004e6a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	f003 0308 	and.w	r3, r3, #8
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d015      	beq.n	8004da8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	4a61      	ldr	r2, [pc, #388]	@ (8004f04 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	f240 80b9 	bls.w	8004ef8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 80b3 	beq.w	8004ef8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d9e:	461a      	mov	r2, r3
 8004da0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004da4:	6093      	str	r3, [r2, #8]
 8004da6:	e0a7      	b.n	8004ef8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f003 0320 	and.w	r3, r3, #32
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d009      	beq.n	8004dc6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	2320      	movs	r3, #32
 8004dc2:	6093      	str	r3, [r2, #8]
 8004dc4:	e098      	b.n	8004ef8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f040 8093 	bne.w	8004ef8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	4a4b      	ldr	r2, [pc, #300]	@ (8004f04 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d90f      	bls.n	8004dfa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00a      	beq.n	8004dfa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004df0:	461a      	mov	r2, r3
 8004df2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004df6:	6093      	str	r3, [r2, #8]
 8004df8:	e07e      	b.n	8004ef8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	4413      	add	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6a1a      	ldr	r2, [r3, #32]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	0159      	lsls	r1, r3, #5
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	440b      	add	r3, r1
 8004e1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e26:	1ad2      	subs	r2, r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d114      	bne.n	8004e5c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d109      	bne.n	8004e4e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6818      	ldr	r0, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e44:	461a      	mov	r2, r3
 8004e46:	2101      	movs	r1, #1
 8004e48:	f003 fb98 	bl	800857c <USB_EP0_OutStart>
 8004e4c:	e006      	b.n	8004e5c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	441a      	add	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	4619      	mov	r1, r3
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f005 fc94 	bl	800a790 <HAL_PCD_DataOutStageCallback>
 8004e68:	e046      	b.n	8004ef8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	4a26      	ldr	r2, [pc, #152]	@ (8004f08 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d124      	bne.n	8004ebc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00a      	beq.n	8004e92 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e88:	461a      	mov	r2, r3
 8004e8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e8e:	6093      	str	r3, [r2, #8]
 8004e90:	e032      	b.n	8004ef8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f003 0320 	and.w	r3, r3, #32
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d008      	beq.n	8004eae <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	2320      	movs	r3, #32
 8004eac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f005 fc6b 	bl	800a790 <HAL_PCD_DataOutStageCallback>
 8004eba:	e01d      	b.n	8004ef8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d114      	bne.n	8004eec <PCD_EP_OutXfrComplete_int+0x1b0>
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	4413      	add	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	440b      	add	r3, r1
 8004ed0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d108      	bne.n	8004eec <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6818      	ldr	r0, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	f003 fb48 	bl	800857c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f005 fc4c 	bl	800a790 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3720      	adds	r7, #32
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	4f54300a 	.word	0x4f54300a
 8004f08:	4f54310a 	.word	0x4f54310a

08004f0c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	333c      	adds	r3, #60	@ 0x3c
 8004f24:	3304      	adds	r3, #4
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4a15      	ldr	r2, [pc, #84]	@ (8004f94 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d90e      	bls.n	8004f60 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d009      	beq.n	8004f60 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f58:	461a      	mov	r2, r3
 8004f5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f5e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f005 fc03 	bl	800a76c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4a0a      	ldr	r2, [pc, #40]	@ (8004f94 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d90c      	bls.n	8004f88 <PCD_EP_OutSetupPacket_int+0x7c>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	799b      	ldrb	r3, [r3, #6]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d108      	bne.n	8004f88 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6818      	ldr	r0, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f80:	461a      	mov	r2, r3
 8004f82:	2101      	movs	r1, #1
 8004f84:	f003 fafa 	bl	800857c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	4f54300a 	.word	0x4f54300a

08004f98 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	70fb      	strb	r3, [r7, #3]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d107      	bne.n	8004fc6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004fb6:	883b      	ldrh	r3, [r7, #0]
 8004fb8:	0419      	lsls	r1, r3, #16
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004fc4:	e028      	b.n	8005018 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fcc:	0c1b      	lsrs	r3, r3, #16
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	73fb      	strb	r3, [r7, #15]
 8004fd8:	e00d      	b.n	8004ff6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	7bfb      	ldrb	r3, [r7, #15]
 8004fe0:	3340      	adds	r3, #64	@ 0x40
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	0c1b      	lsrs	r3, r3, #16
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	4413      	add	r3, r2
 8004fee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	73fb      	strb	r3, [r7, #15]
 8004ff6:	7bfa      	ldrb	r2, [r7, #15]
 8004ff8:	78fb      	ldrb	r3, [r7, #3]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d3ec      	bcc.n	8004fda <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005000:	883b      	ldrh	r3, [r7, #0]
 8005002:	0418      	lsls	r0, r3, #16
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6819      	ldr	r1, [r3, #0]
 8005008:	78fb      	ldrb	r3, [r7, #3]
 800500a:	3b01      	subs	r3, #1
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	4302      	orrs	r2, r0
 8005010:	3340      	adds	r3, #64	@ 0x40
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	440b      	add	r3, r1
 8005016:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	460b      	mov	r3, r1
 8005030:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	887a      	ldrh	r2, [r7, #2]
 8005038:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	460b      	mov	r3, r1
 8005052:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e267      	b.n	8005542 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d075      	beq.n	800516a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800507e:	4b88      	ldr	r3, [pc, #544]	@ (80052a0 <HAL_RCC_OscConfig+0x240>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 030c 	and.w	r3, r3, #12
 8005086:	2b04      	cmp	r3, #4
 8005088:	d00c      	beq.n	80050a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800508a:	4b85      	ldr	r3, [pc, #532]	@ (80052a0 <HAL_RCC_OscConfig+0x240>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005092:	2b08      	cmp	r3, #8
 8005094:	d112      	bne.n	80050bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005096:	4b82      	ldr	r3, [pc, #520]	@ (80052a0 <HAL_RCC_OscConfig+0x240>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800509e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050a2:	d10b      	bne.n	80050bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050a4:	4b7e      	ldr	r3, [pc, #504]	@ (80052a0 <HAL_RCC_OscConfig+0x240>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d05b      	beq.n	8005168 <HAL_RCC_OscConfig+0x108>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d157      	bne.n	8005168 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e242      	b.n	8005542 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050c4:	d106      	bne.n	80050d4 <HAL_RCC_OscConfig+0x74>
 80050c6:	4b76      	ldr	r3, [pc, #472]	@ (80052a0 <HAL_RCC_OscConfig+0x240>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a75      	ldr	r2, [pc, #468]	@ (80052a0 <HAL_RCC_OscConfig+0x240>)
 80050cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	e01d      	b.n	8005110 <HAL_RCC_OscConfig+0xb0>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050dc:	d10c      	bne.n	80050f8 <HAL_RCC_OscConfig+0x98>
 80050de:	4b70      	ldr	r3, [pc, #448]	@ (80052a0 <HAL_RCC_OscConfig+0x240>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a6f      	ldr	r2, [pc, #444]	@ (80052a0 <HAL_RCC_OscConfig+0x240>)
 80050e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	4b6d      	ldr	r3, [pc, #436]	@ (80052a0 <HAL_RCC_OscConfig+0x240>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a6c      	ldr	r2, [pc, #432]	@ (80052a0 <HAL_RCC_OscConfig+0x240>)
 80050f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	e00b      	b.n	8005110 <HAL_RCC_OscConfig+0xb0>
 80050f8:	4b69      	ldr	r3, [pc, #420]	@ (80052a0 <HAL_RCC_OscConfig+0x240>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a68      	ldr	r2, [pc, #416]	@ (80052a0 <HAL_RCC_OscConfig+0x240>)
 80050fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	4b66      	ldr	r3, [pc, #408]	@ (80052a0 <HAL_RCC_OscConfig+0x240>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a65      	ldr	r2, [pc, #404]	@ (80052a0 <HAL_RCC_OscConfig+0x240>)
 800510a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800510e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d013      	beq.n	8005140 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005118:	f7fd fa78 	bl	800260c <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005120:	f7fd fa74 	bl	800260c <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b64      	cmp	r3, #100	@ 0x64
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e207      	b.n	8005542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005132:	4b5b      	ldr	r3, [pc, #364]	@ (80052a0 <HAL_RCC_OscConfig+0x240>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0f0      	beq.n	8005120 <HAL_RCC_OscConfig+0xc0>
 800513e:	e014      	b.n	800516a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005140:	f7fd fa64 	bl	800260c <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005148:	f7fd fa60 	bl	800260c <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b64      	cmp	r3, #100	@ 0x64
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e1f3      	b.n	8005542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800515a:	4b51      	ldr	r3, [pc, #324]	@ (80052a0 <HAL_RCC_OscConfig+0x240>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1f0      	bne.n	8005148 <HAL_RCC_OscConfig+0xe8>
 8005166:	e000      	b.n	800516a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d063      	beq.n	800523e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005176:	4b4a      	ldr	r3, [pc, #296]	@ (80052a0 <HAL_RCC_OscConfig+0x240>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f003 030c 	and.w	r3, r3, #12
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00b      	beq.n	800519a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005182:	4b47      	ldr	r3, [pc, #284]	@ (80052a0 <HAL_RCC_OscConfig+0x240>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800518a:	2b08      	cmp	r3, #8
 800518c:	d11c      	bne.n	80051c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800518e:	4b44      	ldr	r3, [pc, #272]	@ (80052a0 <HAL_RCC_OscConfig+0x240>)
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d116      	bne.n	80051c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800519a:	4b41      	ldr	r3, [pc, #260]	@ (80052a0 <HAL_RCC_OscConfig+0x240>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d005      	beq.n	80051b2 <HAL_RCC_OscConfig+0x152>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d001      	beq.n	80051b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e1c7      	b.n	8005542 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b2:	4b3b      	ldr	r3, [pc, #236]	@ (80052a0 <HAL_RCC_OscConfig+0x240>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	4937      	ldr	r1, [pc, #220]	@ (80052a0 <HAL_RCC_OscConfig+0x240>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051c6:	e03a      	b.n	800523e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d020      	beq.n	8005212 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051d0:	4b34      	ldr	r3, [pc, #208]	@ (80052a4 <HAL_RCC_OscConfig+0x244>)
 80051d2:	2201      	movs	r2, #1
 80051d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d6:	f7fd fa19 	bl	800260c <HAL_GetTick>
 80051da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051dc:	e008      	b.n	80051f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051de:	f7fd fa15 	bl	800260c <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e1a8      	b.n	8005542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051f0:	4b2b      	ldr	r3, [pc, #172]	@ (80052a0 <HAL_RCC_OscConfig+0x240>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0f0      	beq.n	80051de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051fc:	4b28      	ldr	r3, [pc, #160]	@ (80052a0 <HAL_RCC_OscConfig+0x240>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	4925      	ldr	r1, [pc, #148]	@ (80052a0 <HAL_RCC_OscConfig+0x240>)
 800520c:	4313      	orrs	r3, r2
 800520e:	600b      	str	r3, [r1, #0]
 8005210:	e015      	b.n	800523e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005212:	4b24      	ldr	r3, [pc, #144]	@ (80052a4 <HAL_RCC_OscConfig+0x244>)
 8005214:	2200      	movs	r2, #0
 8005216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005218:	f7fd f9f8 	bl	800260c <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005220:	f7fd f9f4 	bl	800260c <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e187      	b.n	8005542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005232:	4b1b      	ldr	r3, [pc, #108]	@ (80052a0 <HAL_RCC_OscConfig+0x240>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1f0      	bne.n	8005220 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0308 	and.w	r3, r3, #8
 8005246:	2b00      	cmp	r3, #0
 8005248:	d036      	beq.n	80052b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d016      	beq.n	8005280 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005252:	4b15      	ldr	r3, [pc, #84]	@ (80052a8 <HAL_RCC_OscConfig+0x248>)
 8005254:	2201      	movs	r2, #1
 8005256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005258:	f7fd f9d8 	bl	800260c <HAL_GetTick>
 800525c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005260:	f7fd f9d4 	bl	800260c <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e167      	b.n	8005542 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005272:	4b0b      	ldr	r3, [pc, #44]	@ (80052a0 <HAL_RCC_OscConfig+0x240>)
 8005274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0f0      	beq.n	8005260 <HAL_RCC_OscConfig+0x200>
 800527e:	e01b      	b.n	80052b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005280:	4b09      	ldr	r3, [pc, #36]	@ (80052a8 <HAL_RCC_OscConfig+0x248>)
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005286:	f7fd f9c1 	bl	800260c <HAL_GetTick>
 800528a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800528c:	e00e      	b.n	80052ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800528e:	f7fd f9bd 	bl	800260c <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d907      	bls.n	80052ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e150      	b.n	8005542 <HAL_RCC_OscConfig+0x4e2>
 80052a0:	40023800 	.word	0x40023800
 80052a4:	42470000 	.word	0x42470000
 80052a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052ac:	4b88      	ldr	r3, [pc, #544]	@ (80054d0 <HAL_RCC_OscConfig+0x470>)
 80052ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1ea      	bne.n	800528e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 8097 	beq.w	80053f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052c6:	2300      	movs	r3, #0
 80052c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ca:	4b81      	ldr	r3, [pc, #516]	@ (80054d0 <HAL_RCC_OscConfig+0x470>)
 80052cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10f      	bne.n	80052f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052d6:	2300      	movs	r3, #0
 80052d8:	60bb      	str	r3, [r7, #8]
 80052da:	4b7d      	ldr	r3, [pc, #500]	@ (80054d0 <HAL_RCC_OscConfig+0x470>)
 80052dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052de:	4a7c      	ldr	r2, [pc, #496]	@ (80054d0 <HAL_RCC_OscConfig+0x470>)
 80052e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80052e6:	4b7a      	ldr	r3, [pc, #488]	@ (80054d0 <HAL_RCC_OscConfig+0x470>)
 80052e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ee:	60bb      	str	r3, [r7, #8]
 80052f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052f2:	2301      	movs	r3, #1
 80052f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f6:	4b77      	ldr	r3, [pc, #476]	@ (80054d4 <HAL_RCC_OscConfig+0x474>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d118      	bne.n	8005334 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005302:	4b74      	ldr	r3, [pc, #464]	@ (80054d4 <HAL_RCC_OscConfig+0x474>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a73      	ldr	r2, [pc, #460]	@ (80054d4 <HAL_RCC_OscConfig+0x474>)
 8005308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800530c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800530e:	f7fd f97d 	bl	800260c <HAL_GetTick>
 8005312:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005314:	e008      	b.n	8005328 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005316:	f7fd f979 	bl	800260c <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d901      	bls.n	8005328 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e10c      	b.n	8005542 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005328:	4b6a      	ldr	r3, [pc, #424]	@ (80054d4 <HAL_RCC_OscConfig+0x474>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0f0      	beq.n	8005316 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d106      	bne.n	800534a <HAL_RCC_OscConfig+0x2ea>
 800533c:	4b64      	ldr	r3, [pc, #400]	@ (80054d0 <HAL_RCC_OscConfig+0x470>)
 800533e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005340:	4a63      	ldr	r2, [pc, #396]	@ (80054d0 <HAL_RCC_OscConfig+0x470>)
 8005342:	f043 0301 	orr.w	r3, r3, #1
 8005346:	6713      	str	r3, [r2, #112]	@ 0x70
 8005348:	e01c      	b.n	8005384 <HAL_RCC_OscConfig+0x324>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	2b05      	cmp	r3, #5
 8005350:	d10c      	bne.n	800536c <HAL_RCC_OscConfig+0x30c>
 8005352:	4b5f      	ldr	r3, [pc, #380]	@ (80054d0 <HAL_RCC_OscConfig+0x470>)
 8005354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005356:	4a5e      	ldr	r2, [pc, #376]	@ (80054d0 <HAL_RCC_OscConfig+0x470>)
 8005358:	f043 0304 	orr.w	r3, r3, #4
 800535c:	6713      	str	r3, [r2, #112]	@ 0x70
 800535e:	4b5c      	ldr	r3, [pc, #368]	@ (80054d0 <HAL_RCC_OscConfig+0x470>)
 8005360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005362:	4a5b      	ldr	r2, [pc, #364]	@ (80054d0 <HAL_RCC_OscConfig+0x470>)
 8005364:	f043 0301 	orr.w	r3, r3, #1
 8005368:	6713      	str	r3, [r2, #112]	@ 0x70
 800536a:	e00b      	b.n	8005384 <HAL_RCC_OscConfig+0x324>
 800536c:	4b58      	ldr	r3, [pc, #352]	@ (80054d0 <HAL_RCC_OscConfig+0x470>)
 800536e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005370:	4a57      	ldr	r2, [pc, #348]	@ (80054d0 <HAL_RCC_OscConfig+0x470>)
 8005372:	f023 0301 	bic.w	r3, r3, #1
 8005376:	6713      	str	r3, [r2, #112]	@ 0x70
 8005378:	4b55      	ldr	r3, [pc, #340]	@ (80054d0 <HAL_RCC_OscConfig+0x470>)
 800537a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800537c:	4a54      	ldr	r2, [pc, #336]	@ (80054d0 <HAL_RCC_OscConfig+0x470>)
 800537e:	f023 0304 	bic.w	r3, r3, #4
 8005382:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d015      	beq.n	80053b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800538c:	f7fd f93e 	bl	800260c <HAL_GetTick>
 8005390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005392:	e00a      	b.n	80053aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005394:	f7fd f93a 	bl	800260c <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e0cb      	b.n	8005542 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053aa:	4b49      	ldr	r3, [pc, #292]	@ (80054d0 <HAL_RCC_OscConfig+0x470>)
 80053ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0ee      	beq.n	8005394 <HAL_RCC_OscConfig+0x334>
 80053b6:	e014      	b.n	80053e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053b8:	f7fd f928 	bl	800260c <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053be:	e00a      	b.n	80053d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053c0:	f7fd f924 	bl	800260c <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e0b5      	b.n	8005542 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053d6:	4b3e      	ldr	r3, [pc, #248]	@ (80054d0 <HAL_RCC_OscConfig+0x470>)
 80053d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1ee      	bne.n	80053c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053e2:	7dfb      	ldrb	r3, [r7, #23]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d105      	bne.n	80053f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053e8:	4b39      	ldr	r3, [pc, #228]	@ (80054d0 <HAL_RCC_OscConfig+0x470>)
 80053ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ec:	4a38      	ldr	r2, [pc, #224]	@ (80054d0 <HAL_RCC_OscConfig+0x470>)
 80053ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 80a1 	beq.w	8005540 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053fe:	4b34      	ldr	r3, [pc, #208]	@ (80054d0 <HAL_RCC_OscConfig+0x470>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f003 030c 	and.w	r3, r3, #12
 8005406:	2b08      	cmp	r3, #8
 8005408:	d05c      	beq.n	80054c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	2b02      	cmp	r3, #2
 8005410:	d141      	bne.n	8005496 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005412:	4b31      	ldr	r3, [pc, #196]	@ (80054d8 <HAL_RCC_OscConfig+0x478>)
 8005414:	2200      	movs	r2, #0
 8005416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005418:	f7fd f8f8 	bl	800260c <HAL_GetTick>
 800541c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005420:	f7fd f8f4 	bl	800260c <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e087      	b.n	8005542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005432:	4b27      	ldr	r3, [pc, #156]	@ (80054d0 <HAL_RCC_OscConfig+0x470>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1f0      	bne.n	8005420 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69da      	ldr	r2, [r3, #28]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	431a      	orrs	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544c:	019b      	lsls	r3, r3, #6
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005454:	085b      	lsrs	r3, r3, #1
 8005456:	3b01      	subs	r3, #1
 8005458:	041b      	lsls	r3, r3, #16
 800545a:	431a      	orrs	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005460:	061b      	lsls	r3, r3, #24
 8005462:	491b      	ldr	r1, [pc, #108]	@ (80054d0 <HAL_RCC_OscConfig+0x470>)
 8005464:	4313      	orrs	r3, r2
 8005466:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005468:	4b1b      	ldr	r3, [pc, #108]	@ (80054d8 <HAL_RCC_OscConfig+0x478>)
 800546a:	2201      	movs	r2, #1
 800546c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800546e:	f7fd f8cd 	bl	800260c <HAL_GetTick>
 8005472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005474:	e008      	b.n	8005488 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005476:	f7fd f8c9 	bl	800260c <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d901      	bls.n	8005488 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e05c      	b.n	8005542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005488:	4b11      	ldr	r3, [pc, #68]	@ (80054d0 <HAL_RCC_OscConfig+0x470>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0f0      	beq.n	8005476 <HAL_RCC_OscConfig+0x416>
 8005494:	e054      	b.n	8005540 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005496:	4b10      	ldr	r3, [pc, #64]	@ (80054d8 <HAL_RCC_OscConfig+0x478>)
 8005498:	2200      	movs	r2, #0
 800549a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549c:	f7fd f8b6 	bl	800260c <HAL_GetTick>
 80054a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054a4:	f7fd f8b2 	bl	800260c <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e045      	b.n	8005542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054b6:	4b06      	ldr	r3, [pc, #24]	@ (80054d0 <HAL_RCC_OscConfig+0x470>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1f0      	bne.n	80054a4 <HAL_RCC_OscConfig+0x444>
 80054c2:	e03d      	b.n	8005540 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d107      	bne.n	80054dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e038      	b.n	8005542 <HAL_RCC_OscConfig+0x4e2>
 80054d0:	40023800 	.word	0x40023800
 80054d4:	40007000 	.word	0x40007000
 80054d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054dc:	4b1b      	ldr	r3, [pc, #108]	@ (800554c <HAL_RCC_OscConfig+0x4ec>)
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d028      	beq.n	800553c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d121      	bne.n	800553c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005502:	429a      	cmp	r2, r3
 8005504:	d11a      	bne.n	800553c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800550c:	4013      	ands	r3, r2
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005512:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005514:	4293      	cmp	r3, r2
 8005516:	d111      	bne.n	800553c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005522:	085b      	lsrs	r3, r3, #1
 8005524:	3b01      	subs	r3, #1
 8005526:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005528:	429a      	cmp	r2, r3
 800552a:	d107      	bne.n	800553c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005536:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005538:	429a      	cmp	r2, r3
 800553a:	d001      	beq.n	8005540 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e000      	b.n	8005542 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3718      	adds	r7, #24
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	40023800 	.word	0x40023800

08005550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e0cc      	b.n	80056fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005564:	4b68      	ldr	r3, [pc, #416]	@ (8005708 <HAL_RCC_ClockConfig+0x1b8>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0307 	and.w	r3, r3, #7
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	d90c      	bls.n	800558c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005572:	4b65      	ldr	r3, [pc, #404]	@ (8005708 <HAL_RCC_ClockConfig+0x1b8>)
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800557a:	4b63      	ldr	r3, [pc, #396]	@ (8005708 <HAL_RCC_ClockConfig+0x1b8>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0307 	and.w	r3, r3, #7
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	429a      	cmp	r2, r3
 8005586:	d001      	beq.n	800558c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e0b8      	b.n	80056fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d020      	beq.n	80055da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0304 	and.w	r3, r3, #4
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d005      	beq.n	80055b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055a4:	4b59      	ldr	r3, [pc, #356]	@ (800570c <HAL_RCC_ClockConfig+0x1bc>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	4a58      	ldr	r2, [pc, #352]	@ (800570c <HAL_RCC_ClockConfig+0x1bc>)
 80055aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80055ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0308 	and.w	r3, r3, #8
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d005      	beq.n	80055c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055bc:	4b53      	ldr	r3, [pc, #332]	@ (800570c <HAL_RCC_ClockConfig+0x1bc>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	4a52      	ldr	r2, [pc, #328]	@ (800570c <HAL_RCC_ClockConfig+0x1bc>)
 80055c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80055c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055c8:	4b50      	ldr	r3, [pc, #320]	@ (800570c <HAL_RCC_ClockConfig+0x1bc>)
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	494d      	ldr	r1, [pc, #308]	@ (800570c <HAL_RCC_ClockConfig+0x1bc>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d044      	beq.n	8005670 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d107      	bne.n	80055fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ee:	4b47      	ldr	r3, [pc, #284]	@ (800570c <HAL_RCC_ClockConfig+0x1bc>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d119      	bne.n	800562e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e07f      	b.n	80056fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2b02      	cmp	r3, #2
 8005604:	d003      	beq.n	800560e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800560a:	2b03      	cmp	r3, #3
 800560c:	d107      	bne.n	800561e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800560e:	4b3f      	ldr	r3, [pc, #252]	@ (800570c <HAL_RCC_ClockConfig+0x1bc>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d109      	bne.n	800562e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e06f      	b.n	80056fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800561e:	4b3b      	ldr	r3, [pc, #236]	@ (800570c <HAL_RCC_ClockConfig+0x1bc>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e067      	b.n	80056fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800562e:	4b37      	ldr	r3, [pc, #220]	@ (800570c <HAL_RCC_ClockConfig+0x1bc>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f023 0203 	bic.w	r2, r3, #3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	4934      	ldr	r1, [pc, #208]	@ (800570c <HAL_RCC_ClockConfig+0x1bc>)
 800563c:	4313      	orrs	r3, r2
 800563e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005640:	f7fc ffe4 	bl	800260c <HAL_GetTick>
 8005644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005646:	e00a      	b.n	800565e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005648:	f7fc ffe0 	bl	800260c <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005656:	4293      	cmp	r3, r2
 8005658:	d901      	bls.n	800565e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e04f      	b.n	80056fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800565e:	4b2b      	ldr	r3, [pc, #172]	@ (800570c <HAL_RCC_ClockConfig+0x1bc>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f003 020c 	and.w	r2, r3, #12
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	429a      	cmp	r2, r3
 800566e:	d1eb      	bne.n	8005648 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005670:	4b25      	ldr	r3, [pc, #148]	@ (8005708 <HAL_RCC_ClockConfig+0x1b8>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	429a      	cmp	r2, r3
 800567c:	d20c      	bcs.n	8005698 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800567e:	4b22      	ldr	r3, [pc, #136]	@ (8005708 <HAL_RCC_ClockConfig+0x1b8>)
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	b2d2      	uxtb	r2, r2
 8005684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005686:	4b20      	ldr	r3, [pc, #128]	@ (8005708 <HAL_RCC_ClockConfig+0x1b8>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0307 	and.w	r3, r3, #7
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	429a      	cmp	r2, r3
 8005692:	d001      	beq.n	8005698 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e032      	b.n	80056fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0304 	and.w	r3, r3, #4
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d008      	beq.n	80056b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056a4:	4b19      	ldr	r3, [pc, #100]	@ (800570c <HAL_RCC_ClockConfig+0x1bc>)
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	4916      	ldr	r1, [pc, #88]	@ (800570c <HAL_RCC_ClockConfig+0x1bc>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0308 	and.w	r3, r3, #8
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d009      	beq.n	80056d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056c2:	4b12      	ldr	r3, [pc, #72]	@ (800570c <HAL_RCC_ClockConfig+0x1bc>)
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	490e      	ldr	r1, [pc, #56]	@ (800570c <HAL_RCC_ClockConfig+0x1bc>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056d6:	f000 f821 	bl	800571c <HAL_RCC_GetSysClockFreq>
 80056da:	4602      	mov	r2, r0
 80056dc:	4b0b      	ldr	r3, [pc, #44]	@ (800570c <HAL_RCC_ClockConfig+0x1bc>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	091b      	lsrs	r3, r3, #4
 80056e2:	f003 030f 	and.w	r3, r3, #15
 80056e6:	490a      	ldr	r1, [pc, #40]	@ (8005710 <HAL_RCC_ClockConfig+0x1c0>)
 80056e8:	5ccb      	ldrb	r3, [r1, r3]
 80056ea:	fa22 f303 	lsr.w	r3, r2, r3
 80056ee:	4a09      	ldr	r2, [pc, #36]	@ (8005714 <HAL_RCC_ClockConfig+0x1c4>)
 80056f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056f2:	4b09      	ldr	r3, [pc, #36]	@ (8005718 <HAL_RCC_ClockConfig+0x1c8>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7fc ff44 	bl	8002584 <HAL_InitTick>

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	40023c00 	.word	0x40023c00
 800570c:	40023800 	.word	0x40023800
 8005710:	0800d6f0 	.word	0x0800d6f0
 8005714:	20000000 	.word	0x20000000
 8005718:	20000004 	.word	0x20000004

0800571c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800571c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005720:	b090      	sub	sp, #64	@ 0x40
 8005722:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005724:	2300      	movs	r3, #0
 8005726:	637b      	str	r3, [r7, #52]	@ 0x34
 8005728:	2300      	movs	r3, #0
 800572a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800572c:	2300      	movs	r3, #0
 800572e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005730:	2300      	movs	r3, #0
 8005732:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005734:	4b59      	ldr	r3, [pc, #356]	@ (800589c <HAL_RCC_GetSysClockFreq+0x180>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 030c 	and.w	r3, r3, #12
 800573c:	2b08      	cmp	r3, #8
 800573e:	d00d      	beq.n	800575c <HAL_RCC_GetSysClockFreq+0x40>
 8005740:	2b08      	cmp	r3, #8
 8005742:	f200 80a1 	bhi.w	8005888 <HAL_RCC_GetSysClockFreq+0x16c>
 8005746:	2b00      	cmp	r3, #0
 8005748:	d002      	beq.n	8005750 <HAL_RCC_GetSysClockFreq+0x34>
 800574a:	2b04      	cmp	r3, #4
 800574c:	d003      	beq.n	8005756 <HAL_RCC_GetSysClockFreq+0x3a>
 800574e:	e09b      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005750:	4b53      	ldr	r3, [pc, #332]	@ (80058a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005752:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8005754:	e09b      	b.n	800588e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005756:	4b53      	ldr	r3, [pc, #332]	@ (80058a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005758:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800575a:	e098      	b.n	800588e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800575c:	4b4f      	ldr	r3, [pc, #316]	@ (800589c <HAL_RCC_GetSysClockFreq+0x180>)
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005764:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005766:	4b4d      	ldr	r3, [pc, #308]	@ (800589c <HAL_RCC_GetSysClockFreq+0x180>)
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d028      	beq.n	80057c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005772:	4b4a      	ldr	r3, [pc, #296]	@ (800589c <HAL_RCC_GetSysClockFreq+0x180>)
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	099b      	lsrs	r3, r3, #6
 8005778:	2200      	movs	r2, #0
 800577a:	623b      	str	r3, [r7, #32]
 800577c:	627a      	str	r2, [r7, #36]	@ 0x24
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005784:	2100      	movs	r1, #0
 8005786:	4b47      	ldr	r3, [pc, #284]	@ (80058a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005788:	fb03 f201 	mul.w	r2, r3, r1
 800578c:	2300      	movs	r3, #0
 800578e:	fb00 f303 	mul.w	r3, r0, r3
 8005792:	4413      	add	r3, r2
 8005794:	4a43      	ldr	r2, [pc, #268]	@ (80058a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005796:	fba0 1202 	umull	r1, r2, r0, r2
 800579a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800579c:	460a      	mov	r2, r1
 800579e:	62ba      	str	r2, [r7, #40]	@ 0x28
 80057a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057a2:	4413      	add	r3, r2
 80057a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057a8:	2200      	movs	r2, #0
 80057aa:	61bb      	str	r3, [r7, #24]
 80057ac:	61fa      	str	r2, [r7, #28]
 80057ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80057b6:	f7fb f9ff 	bl	8000bb8 <__aeabi_uldivmod>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4613      	mov	r3, r2
 80057c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057c2:	e053      	b.n	800586c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057c4:	4b35      	ldr	r3, [pc, #212]	@ (800589c <HAL_RCC_GetSysClockFreq+0x180>)
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	099b      	lsrs	r3, r3, #6
 80057ca:	2200      	movs	r2, #0
 80057cc:	613b      	str	r3, [r7, #16]
 80057ce:	617a      	str	r2, [r7, #20]
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80057d6:	f04f 0b00 	mov.w	fp, #0
 80057da:	4652      	mov	r2, sl
 80057dc:	465b      	mov	r3, fp
 80057de:	f04f 0000 	mov.w	r0, #0
 80057e2:	f04f 0100 	mov.w	r1, #0
 80057e6:	0159      	lsls	r1, r3, #5
 80057e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057ec:	0150      	lsls	r0, r2, #5
 80057ee:	4602      	mov	r2, r0
 80057f0:	460b      	mov	r3, r1
 80057f2:	ebb2 080a 	subs.w	r8, r2, sl
 80057f6:	eb63 090b 	sbc.w	r9, r3, fp
 80057fa:	f04f 0200 	mov.w	r2, #0
 80057fe:	f04f 0300 	mov.w	r3, #0
 8005802:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005806:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800580a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800580e:	ebb2 0408 	subs.w	r4, r2, r8
 8005812:	eb63 0509 	sbc.w	r5, r3, r9
 8005816:	f04f 0200 	mov.w	r2, #0
 800581a:	f04f 0300 	mov.w	r3, #0
 800581e:	00eb      	lsls	r3, r5, #3
 8005820:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005824:	00e2      	lsls	r2, r4, #3
 8005826:	4614      	mov	r4, r2
 8005828:	461d      	mov	r5, r3
 800582a:	eb14 030a 	adds.w	r3, r4, sl
 800582e:	603b      	str	r3, [r7, #0]
 8005830:	eb45 030b 	adc.w	r3, r5, fp
 8005834:	607b      	str	r3, [r7, #4]
 8005836:	f04f 0200 	mov.w	r2, #0
 800583a:	f04f 0300 	mov.w	r3, #0
 800583e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005842:	4629      	mov	r1, r5
 8005844:	028b      	lsls	r3, r1, #10
 8005846:	4621      	mov	r1, r4
 8005848:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800584c:	4621      	mov	r1, r4
 800584e:	028a      	lsls	r2, r1, #10
 8005850:	4610      	mov	r0, r2
 8005852:	4619      	mov	r1, r3
 8005854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005856:	2200      	movs	r2, #0
 8005858:	60bb      	str	r3, [r7, #8]
 800585a:	60fa      	str	r2, [r7, #12]
 800585c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005860:	f7fb f9aa 	bl	8000bb8 <__aeabi_uldivmod>
 8005864:	4602      	mov	r2, r0
 8005866:	460b      	mov	r3, r1
 8005868:	4613      	mov	r3, r2
 800586a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800586c:	4b0b      	ldr	r3, [pc, #44]	@ (800589c <HAL_RCC_GetSysClockFreq+0x180>)
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	0c1b      	lsrs	r3, r3, #16
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	3301      	adds	r3, #1
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800587c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800587e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005880:	fbb2 f3f3 	udiv	r3, r2, r3
 8005884:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005886:	e002      	b.n	800588e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005888:	4b05      	ldr	r3, [pc, #20]	@ (80058a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800588a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800588c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800588e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005890:	4618      	mov	r0, r3
 8005892:	3740      	adds	r7, #64	@ 0x40
 8005894:	46bd      	mov	sp, r7
 8005896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800589a:	bf00      	nop
 800589c:	40023800 	.word	0x40023800
 80058a0:	00f42400 	.word	0x00f42400
 80058a4:	017d7840 	.word	0x017d7840

080058a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058a8:	b480      	push	{r7}
 80058aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058ac:	4b03      	ldr	r3, [pc, #12]	@ (80058bc <HAL_RCC_GetHCLKFreq+0x14>)
 80058ae:	681b      	ldr	r3, [r3, #0]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	20000000 	.word	0x20000000

080058c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058c4:	f7ff fff0 	bl	80058a8 <HAL_RCC_GetHCLKFreq>
 80058c8:	4602      	mov	r2, r0
 80058ca:	4b05      	ldr	r3, [pc, #20]	@ (80058e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	0a9b      	lsrs	r3, r3, #10
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	4903      	ldr	r1, [pc, #12]	@ (80058e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058d6:	5ccb      	ldrb	r3, [r1, r3]
 80058d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058dc:	4618      	mov	r0, r3
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	40023800 	.word	0x40023800
 80058e4:	0800d700 	.word	0x0800d700

080058e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058ec:	f7ff ffdc 	bl	80058a8 <HAL_RCC_GetHCLKFreq>
 80058f0:	4602      	mov	r2, r0
 80058f2:	4b05      	ldr	r3, [pc, #20]	@ (8005908 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	0b5b      	lsrs	r3, r3, #13
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	4903      	ldr	r1, [pc, #12]	@ (800590c <HAL_RCC_GetPCLK2Freq+0x24>)
 80058fe:	5ccb      	ldrb	r3, [r1, r3]
 8005900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005904:	4618      	mov	r0, r3
 8005906:	bd80      	pop	{r7, pc}
 8005908:	40023800 	.word	0x40023800
 800590c:	0800d700 	.word	0x0800d700

08005910 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e041      	b.n	80059a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d106      	bne.n	800593c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7fc f976 	bl	8001c28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3304      	adds	r3, #4
 800594c:	4619      	mov	r1, r3
 800594e:	4610      	mov	r0, r2
 8005950:	f000 fb8c 	bl	800606c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d001      	beq.n	80059c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e044      	b.n	8005a52 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68da      	ldr	r2, [r3, #12]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0201 	orr.w	r2, r2, #1
 80059de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a1e      	ldr	r2, [pc, #120]	@ (8005a60 <HAL_TIM_Base_Start_IT+0xb0>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d018      	beq.n	8005a1c <HAL_TIM_Base_Start_IT+0x6c>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059f2:	d013      	beq.n	8005a1c <HAL_TIM_Base_Start_IT+0x6c>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1a      	ldr	r2, [pc, #104]	@ (8005a64 <HAL_TIM_Base_Start_IT+0xb4>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d00e      	beq.n	8005a1c <HAL_TIM_Base_Start_IT+0x6c>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a19      	ldr	r2, [pc, #100]	@ (8005a68 <HAL_TIM_Base_Start_IT+0xb8>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d009      	beq.n	8005a1c <HAL_TIM_Base_Start_IT+0x6c>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a17      	ldr	r2, [pc, #92]	@ (8005a6c <HAL_TIM_Base_Start_IT+0xbc>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d004      	beq.n	8005a1c <HAL_TIM_Base_Start_IT+0x6c>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a16      	ldr	r2, [pc, #88]	@ (8005a70 <HAL_TIM_Base_Start_IT+0xc0>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d111      	bne.n	8005a40 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b06      	cmp	r3, #6
 8005a2c:	d010      	beq.n	8005a50 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f042 0201 	orr.w	r2, r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3e:	e007      	b.n	8005a50 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0201 	orr.w	r2, r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	40010000 	.word	0x40010000
 8005a64:	40000400 	.word	0x40000400
 8005a68:	40000800 	.word	0x40000800
 8005a6c:	40000c00 	.word	0x40000c00
 8005a70:	40014000 	.word	0x40014000

08005a74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e041      	b.n	8005b0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f839 	bl	8005b12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3304      	adds	r3, #4
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	f000 fada 	bl	800606c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b084      	sub	sp, #16
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d020      	beq.n	8005b8a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d01b      	beq.n	8005b8a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f06f 0202 	mvn.w	r2, #2
 8005b5a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	f003 0303 	and.w	r3, r3, #3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d003      	beq.n	8005b78 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fa5c 	bl	800602e <HAL_TIM_IC_CaptureCallback>
 8005b76:	e005      	b.n	8005b84 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fa4e 	bl	800601a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fa5f 	bl	8006042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f003 0304 	and.w	r3, r3, #4
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d020      	beq.n	8005bd6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f003 0304 	and.w	r3, r3, #4
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d01b      	beq.n	8005bd6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f06f 0204 	mvn.w	r2, #4
 8005ba6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 fa36 	bl	800602e <HAL_TIM_IC_CaptureCallback>
 8005bc2:	e005      	b.n	8005bd0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fa28 	bl	800601a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fa39 	bl	8006042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	f003 0308 	and.w	r3, r3, #8
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d020      	beq.n	8005c22 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f003 0308 	and.w	r3, r3, #8
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d01b      	beq.n	8005c22 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f06f 0208 	mvn.w	r2, #8
 8005bf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2204      	movs	r2, #4
 8005bf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69db      	ldr	r3, [r3, #28]
 8005c00:	f003 0303 	and.w	r3, r3, #3
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d003      	beq.n	8005c10 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fa10 	bl	800602e <HAL_TIM_IC_CaptureCallback>
 8005c0e:	e005      	b.n	8005c1c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fa02 	bl	800601a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fa13 	bl	8006042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	f003 0310 	and.w	r3, r3, #16
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d020      	beq.n	8005c6e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f003 0310 	and.w	r3, r3, #16
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d01b      	beq.n	8005c6e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f06f 0210 	mvn.w	r2, #16
 8005c3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2208      	movs	r2, #8
 8005c44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f9ea 	bl	800602e <HAL_TIM_IC_CaptureCallback>
 8005c5a:	e005      	b.n	8005c68 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f9dc 	bl	800601a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f9ed 	bl	8006042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00c      	beq.n	8005c92 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d007      	beq.n	8005c92 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f06f 0201 	mvn.w	r2, #1
 8005c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7fb fcc3 	bl	8001618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00c      	beq.n	8005cb6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d007      	beq.n	8005cb6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 fd05 	bl	80066c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00c      	beq.n	8005cda <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d007      	beq.n	8005cda <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f9be 	bl	8006056 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f003 0320 	and.w	r3, r3, #32
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00c      	beq.n	8005cfe <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f003 0320 	and.w	r3, r3, #32
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d007      	beq.n	8005cfe <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f06f 0220 	mvn.w	r2, #32
 8005cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 fcd7 	bl	80066ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cfe:	bf00      	nop
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
	...

08005d08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d14:	2300      	movs	r3, #0
 8005d16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d101      	bne.n	8005d26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d22:	2302      	movs	r3, #2
 8005d24:	e0ae      	b.n	8005e84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b0c      	cmp	r3, #12
 8005d32:	f200 809f 	bhi.w	8005e74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d36:	a201      	add	r2, pc, #4	@ (adr r2, 8005d3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3c:	08005d71 	.word	0x08005d71
 8005d40:	08005e75 	.word	0x08005e75
 8005d44:	08005e75 	.word	0x08005e75
 8005d48:	08005e75 	.word	0x08005e75
 8005d4c:	08005db1 	.word	0x08005db1
 8005d50:	08005e75 	.word	0x08005e75
 8005d54:	08005e75 	.word	0x08005e75
 8005d58:	08005e75 	.word	0x08005e75
 8005d5c:	08005df3 	.word	0x08005df3
 8005d60:	08005e75 	.word	0x08005e75
 8005d64:	08005e75 	.word	0x08005e75
 8005d68:	08005e75 	.word	0x08005e75
 8005d6c:	08005e33 	.word	0x08005e33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68b9      	ldr	r1, [r7, #8]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fa04 	bl	8006184 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699a      	ldr	r2, [r3, #24]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 0208 	orr.w	r2, r2, #8
 8005d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699a      	ldr	r2, [r3, #24]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 0204 	bic.w	r2, r2, #4
 8005d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6999      	ldr	r1, [r3, #24]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	691a      	ldr	r2, [r3, #16]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	619a      	str	r2, [r3, #24]
      break;
 8005dae:	e064      	b.n	8005e7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68b9      	ldr	r1, [r7, #8]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 fa4a 	bl	8006250 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	699a      	ldr	r2, [r3, #24]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699a      	ldr	r2, [r3, #24]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6999      	ldr	r1, [r3, #24]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	021a      	lsls	r2, r3, #8
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	619a      	str	r2, [r3, #24]
      break;
 8005df0:	e043      	b.n	8005e7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68b9      	ldr	r1, [r7, #8]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f000 fa95 	bl	8006328 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69da      	ldr	r2, [r3, #28]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f042 0208 	orr.w	r2, r2, #8
 8005e0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69da      	ldr	r2, [r3, #28]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0204 	bic.w	r2, r2, #4
 8005e1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69d9      	ldr	r1, [r3, #28]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	691a      	ldr	r2, [r3, #16]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	61da      	str	r2, [r3, #28]
      break;
 8005e30:	e023      	b.n	8005e7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68b9      	ldr	r1, [r7, #8]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 fadf 	bl	80063fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69da      	ldr	r2, [r3, #28]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69da      	ldr	r2, [r3, #28]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	69d9      	ldr	r1, [r3, #28]
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	021a      	lsls	r2, r3, #8
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	61da      	str	r2, [r3, #28]
      break;
 8005e72:	e002      	b.n	8005e7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	75fb      	strb	r3, [r7, #23]
      break;
 8005e78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3718      	adds	r7, #24
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e96:	2300      	movs	r3, #0
 8005e98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_TIM_ConfigClockSource+0x1c>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e0b4      	b.n	8006012 <HAL_TIM_ConfigClockSource+0x186>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ece:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ee0:	d03e      	beq.n	8005f60 <HAL_TIM_ConfigClockSource+0xd4>
 8005ee2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ee6:	f200 8087 	bhi.w	8005ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8005eea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eee:	f000 8086 	beq.w	8005ffe <HAL_TIM_ConfigClockSource+0x172>
 8005ef2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ef6:	d87f      	bhi.n	8005ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ef8:	2b70      	cmp	r3, #112	@ 0x70
 8005efa:	d01a      	beq.n	8005f32 <HAL_TIM_ConfigClockSource+0xa6>
 8005efc:	2b70      	cmp	r3, #112	@ 0x70
 8005efe:	d87b      	bhi.n	8005ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8005f00:	2b60      	cmp	r3, #96	@ 0x60
 8005f02:	d050      	beq.n	8005fa6 <HAL_TIM_ConfigClockSource+0x11a>
 8005f04:	2b60      	cmp	r3, #96	@ 0x60
 8005f06:	d877      	bhi.n	8005ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8005f08:	2b50      	cmp	r3, #80	@ 0x50
 8005f0a:	d03c      	beq.n	8005f86 <HAL_TIM_ConfigClockSource+0xfa>
 8005f0c:	2b50      	cmp	r3, #80	@ 0x50
 8005f0e:	d873      	bhi.n	8005ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8005f10:	2b40      	cmp	r3, #64	@ 0x40
 8005f12:	d058      	beq.n	8005fc6 <HAL_TIM_ConfigClockSource+0x13a>
 8005f14:	2b40      	cmp	r3, #64	@ 0x40
 8005f16:	d86f      	bhi.n	8005ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8005f18:	2b30      	cmp	r3, #48	@ 0x30
 8005f1a:	d064      	beq.n	8005fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8005f1c:	2b30      	cmp	r3, #48	@ 0x30
 8005f1e:	d86b      	bhi.n	8005ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8005f20:	2b20      	cmp	r3, #32
 8005f22:	d060      	beq.n	8005fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8005f24:	2b20      	cmp	r3, #32
 8005f26:	d867      	bhi.n	8005ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d05c      	beq.n	8005fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8005f2c:	2b10      	cmp	r3, #16
 8005f2e:	d05a      	beq.n	8005fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8005f30:	e062      	b.n	8005ff8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f42:	f000 fb25 	bl	8006590 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	609a      	str	r2, [r3, #8]
      break;
 8005f5e:	e04f      	b.n	8006000 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f70:	f000 fb0e 	bl	8006590 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689a      	ldr	r2, [r3, #8]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f82:	609a      	str	r2, [r3, #8]
      break;
 8005f84:	e03c      	b.n	8006000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f92:	461a      	mov	r2, r3
 8005f94:	f000 fa82 	bl	800649c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2150      	movs	r1, #80	@ 0x50
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f000 fadb 	bl	800655a <TIM_ITRx_SetConfig>
      break;
 8005fa4:	e02c      	b.n	8006000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	f000 faa1 	bl	80064fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2160      	movs	r1, #96	@ 0x60
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 facb 	bl	800655a <TIM_ITRx_SetConfig>
      break;
 8005fc4:	e01c      	b.n	8006000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f000 fa62 	bl	800649c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2140      	movs	r1, #64	@ 0x40
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f000 fabb 	bl	800655a <TIM_ITRx_SetConfig>
      break;
 8005fe4:	e00c      	b.n	8006000 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4619      	mov	r1, r3
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	f000 fab2 	bl	800655a <TIM_ITRx_SetConfig>
      break;
 8005ff6:	e003      	b.n	8006000 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8005ffc:	e000      	b.n	8006000 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ffe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006010:	7bfb      	ldrb	r3, [r7, #15]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800601a:	b480      	push	{r7}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006022:	bf00      	nop
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800604a:	bf00      	nop
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800605e:	bf00      	nop
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
	...

0800606c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a3a      	ldr	r2, [pc, #232]	@ (8006168 <TIM_Base_SetConfig+0xfc>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d00f      	beq.n	80060a4 <TIM_Base_SetConfig+0x38>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800608a:	d00b      	beq.n	80060a4 <TIM_Base_SetConfig+0x38>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a37      	ldr	r2, [pc, #220]	@ (800616c <TIM_Base_SetConfig+0x100>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d007      	beq.n	80060a4 <TIM_Base_SetConfig+0x38>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a36      	ldr	r2, [pc, #216]	@ (8006170 <TIM_Base_SetConfig+0x104>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d003      	beq.n	80060a4 <TIM_Base_SetConfig+0x38>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a35      	ldr	r2, [pc, #212]	@ (8006174 <TIM_Base_SetConfig+0x108>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d108      	bne.n	80060b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a2b      	ldr	r2, [pc, #172]	@ (8006168 <TIM_Base_SetConfig+0xfc>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d01b      	beq.n	80060f6 <TIM_Base_SetConfig+0x8a>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060c4:	d017      	beq.n	80060f6 <TIM_Base_SetConfig+0x8a>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a28      	ldr	r2, [pc, #160]	@ (800616c <TIM_Base_SetConfig+0x100>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d013      	beq.n	80060f6 <TIM_Base_SetConfig+0x8a>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a27      	ldr	r2, [pc, #156]	@ (8006170 <TIM_Base_SetConfig+0x104>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00f      	beq.n	80060f6 <TIM_Base_SetConfig+0x8a>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a26      	ldr	r2, [pc, #152]	@ (8006174 <TIM_Base_SetConfig+0x108>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d00b      	beq.n	80060f6 <TIM_Base_SetConfig+0x8a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a25      	ldr	r2, [pc, #148]	@ (8006178 <TIM_Base_SetConfig+0x10c>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d007      	beq.n	80060f6 <TIM_Base_SetConfig+0x8a>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a24      	ldr	r2, [pc, #144]	@ (800617c <TIM_Base_SetConfig+0x110>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d003      	beq.n	80060f6 <TIM_Base_SetConfig+0x8a>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a23      	ldr	r2, [pc, #140]	@ (8006180 <TIM_Base_SetConfig+0x114>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d108      	bne.n	8006108 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	4313      	orrs	r3, r2
 8006106:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	4313      	orrs	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	689a      	ldr	r2, [r3, #8]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a0e      	ldr	r2, [pc, #56]	@ (8006168 <TIM_Base_SetConfig+0xfc>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d103      	bne.n	800613c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	691a      	ldr	r2, [r3, #16]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b01      	cmp	r3, #1
 800614c:	d105      	bne.n	800615a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	f023 0201 	bic.w	r2, r3, #1
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	611a      	str	r2, [r3, #16]
  }
}
 800615a:	bf00      	nop
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	40010000 	.word	0x40010000
 800616c:	40000400 	.word	0x40000400
 8006170:	40000800 	.word	0x40000800
 8006174:	40000c00 	.word	0x40000c00
 8006178:	40014000 	.word	0x40014000
 800617c:	40014400 	.word	0x40014400
 8006180:	40014800 	.word	0x40014800

08006184 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	f023 0201 	bic.w	r2, r3, #1
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 0303 	bic.w	r3, r3, #3
 80061ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f023 0302 	bic.w	r3, r3, #2
 80061cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a1c      	ldr	r2, [pc, #112]	@ (800624c <TIM_OC1_SetConfig+0xc8>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d10c      	bne.n	80061fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f023 0308 	bic.w	r3, r3, #8
 80061e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f023 0304 	bic.w	r3, r3, #4
 80061f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a13      	ldr	r2, [pc, #76]	@ (800624c <TIM_OC1_SetConfig+0xc8>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d111      	bne.n	8006226 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	4313      	orrs	r3, r2
 800621a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	4313      	orrs	r3, r2
 8006224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	685a      	ldr	r2, [r3, #4]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	621a      	str	r2, [r3, #32]
}
 8006240:	bf00      	nop
 8006242:	371c      	adds	r7, #28
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	40010000 	.word	0x40010000

08006250 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a1b      	ldr	r3, [r3, #32]
 8006264:	f023 0210 	bic.w	r2, r3, #16
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800627e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	021b      	lsls	r3, r3, #8
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4313      	orrs	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f023 0320 	bic.w	r3, r3, #32
 800629a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	011b      	lsls	r3, r3, #4
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a1e      	ldr	r2, [pc, #120]	@ (8006324 <TIM_OC2_SetConfig+0xd4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d10d      	bne.n	80062cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	011b      	lsls	r3, r3, #4
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a15      	ldr	r2, [pc, #84]	@ (8006324 <TIM_OC2_SetConfig+0xd4>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d113      	bne.n	80062fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	621a      	str	r2, [r3, #32]
}
 8006316:	bf00      	nop
 8006318:	371c      	adds	r7, #28
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	40010000 	.word	0x40010000

08006328 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006328:	b480      	push	{r7}
 800632a:	b087      	sub	sp, #28
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	69db      	ldr	r3, [r3, #28]
 800634e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 0303 	bic.w	r3, r3, #3
 800635e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	021b      	lsls	r3, r3, #8
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	4313      	orrs	r3, r2
 800637c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a1d      	ldr	r2, [pc, #116]	@ (80063f8 <TIM_OC3_SetConfig+0xd0>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d10d      	bne.n	80063a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800638c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	021b      	lsls	r3, r3, #8
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	4313      	orrs	r3, r2
 8006398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80063a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a14      	ldr	r2, [pc, #80]	@ (80063f8 <TIM_OC3_SetConfig+0xd0>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d113      	bne.n	80063d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	011b      	lsls	r3, r3, #4
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	011b      	lsls	r3, r3, #4
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	621a      	str	r2, [r3, #32]
}
 80063ec:	bf00      	nop
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	40010000 	.word	0x40010000

080063fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800642a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	021b      	lsls	r3, r3, #8
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	4313      	orrs	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006446:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	031b      	lsls	r3, r3, #12
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	4313      	orrs	r3, r2
 8006452:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a10      	ldr	r2, [pc, #64]	@ (8006498 <TIM_OC4_SetConfig+0x9c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d109      	bne.n	8006470 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006462:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	019b      	lsls	r3, r3, #6
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	4313      	orrs	r3, r2
 800646e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	621a      	str	r2, [r3, #32]
}
 800648a:	bf00      	nop
 800648c:	371c      	adds	r7, #28
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	40010000 	.word	0x40010000

0800649c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800649c:	b480      	push	{r7}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	f023 0201 	bic.w	r2, r3, #1
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	011b      	lsls	r3, r3, #4
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f023 030a 	bic.w	r3, r3, #10
 80064d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	4313      	orrs	r3, r2
 80064e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	621a      	str	r2, [r3, #32]
}
 80064ee:	bf00      	nop
 80064f0:	371c      	adds	r7, #28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b087      	sub	sp, #28
 80064fe:	af00      	add	r7, sp, #0
 8006500:	60f8      	str	r0, [r7, #12]
 8006502:	60b9      	str	r1, [r7, #8]
 8006504:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	f023 0210 	bic.w	r2, r3, #16
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006524:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	031b      	lsls	r3, r3, #12
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	4313      	orrs	r3, r2
 800652e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006536:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	011b      	lsls	r3, r3, #4
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	4313      	orrs	r3, r2
 8006540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	621a      	str	r2, [r3, #32]
}
 800654e:	bf00      	nop
 8006550:	371c      	adds	r7, #28
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800655a:	b480      	push	{r7}
 800655c:	b085      	sub	sp, #20
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006570:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4313      	orrs	r3, r2
 8006578:	f043 0307 	orr.w	r3, r3, #7
 800657c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	609a      	str	r2, [r3, #8]
}
 8006584:	bf00      	nop
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
 800659c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	021a      	lsls	r2, r3, #8
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	431a      	orrs	r2, r3
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	609a      	str	r2, [r3, #8]
}
 80065c4:	bf00      	nop
 80065c6:	371c      	adds	r7, #28
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d101      	bne.n	80065e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065e4:	2302      	movs	r3, #2
 80065e6:	e050      	b.n	800668a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800660e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	4313      	orrs	r3, r2
 8006618:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a1c      	ldr	r2, [pc, #112]	@ (8006698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d018      	beq.n	800665e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006634:	d013      	beq.n	800665e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a18      	ldr	r2, [pc, #96]	@ (800669c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d00e      	beq.n	800665e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a16      	ldr	r2, [pc, #88]	@ (80066a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d009      	beq.n	800665e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a15      	ldr	r2, [pc, #84]	@ (80066a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d004      	beq.n	800665e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a13      	ldr	r2, [pc, #76]	@ (80066a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d10c      	bne.n	8006678 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006664:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	4313      	orrs	r3, r2
 800666e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	40010000 	.word	0x40010000
 800669c:	40000400 	.word	0x40000400
 80066a0:	40000800 	.word	0x40000800
 80066a4:	40000c00 	.word	0x40000c00
 80066a8:	40014000 	.word	0x40014000

080066ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e042      	b.n	800676c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d106      	bne.n	8006700 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7fb fb2c 	bl	8001d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2224      	movs	r2, #36	@ 0x24
 8006704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68da      	ldr	r2, [r3, #12]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006716:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fa09 	bl	8006b30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	691a      	ldr	r2, [r3, #16]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800672c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	695a      	ldr	r2, [r3, #20]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800673c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68da      	ldr	r2, [r3, #12]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800674c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2220      	movs	r2, #32
 8006758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2220      	movs	r2, #32
 8006760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b08a      	sub	sp, #40	@ 0x28
 8006778:	af02      	add	r7, sp, #8
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	603b      	str	r3, [r7, #0]
 8006780:	4613      	mov	r3, r2
 8006782:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006784:	2300      	movs	r3, #0
 8006786:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b20      	cmp	r3, #32
 8006792:	d175      	bne.n	8006880 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d002      	beq.n	80067a0 <HAL_UART_Transmit+0x2c>
 800679a:	88fb      	ldrh	r3, [r7, #6]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e06e      	b.n	8006882 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2221      	movs	r2, #33	@ 0x21
 80067ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067b2:	f7fb ff2b 	bl	800260c <HAL_GetTick>
 80067b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	88fa      	ldrh	r2, [r7, #6]
 80067bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	88fa      	ldrh	r2, [r7, #6]
 80067c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067cc:	d108      	bne.n	80067e0 <HAL_UART_Transmit+0x6c>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d104      	bne.n	80067e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80067d6:	2300      	movs	r3, #0
 80067d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	61bb      	str	r3, [r7, #24]
 80067de:	e003      	b.n	80067e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067e4:	2300      	movs	r3, #0
 80067e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067e8:	e02e      	b.n	8006848 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	2200      	movs	r2, #0
 80067f2:	2180      	movs	r1, #128	@ 0x80
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f000 f8df 	bl	80069b8 <UART_WaitOnFlagUntilTimeout>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d005      	beq.n	800680c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2220      	movs	r2, #32
 8006804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e03a      	b.n	8006882 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10b      	bne.n	800682a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	881b      	ldrh	r3, [r3, #0]
 8006816:	461a      	mov	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006820:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	3302      	adds	r3, #2
 8006826:	61bb      	str	r3, [r7, #24]
 8006828:	e007      	b.n	800683a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	781a      	ldrb	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	3301      	adds	r3, #1
 8006838:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800683e:	b29b      	uxth	r3, r3
 8006840:	3b01      	subs	r3, #1
 8006842:	b29a      	uxth	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800684c:	b29b      	uxth	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1cb      	bne.n	80067ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	2200      	movs	r2, #0
 800685a:	2140      	movs	r1, #64	@ 0x40
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f000 f8ab 	bl	80069b8 <UART_WaitOnFlagUntilTimeout>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d005      	beq.n	8006874 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2220      	movs	r2, #32
 800686c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e006      	b.n	8006882 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800687c:	2300      	movs	r3, #0
 800687e:	e000      	b.n	8006882 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006880:	2302      	movs	r3, #2
  }
}
 8006882:	4618      	mov	r0, r3
 8006884:	3720      	adds	r7, #32
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b08a      	sub	sp, #40	@ 0x28
 800688e:	af02      	add	r7, sp, #8
 8006890:	60f8      	str	r0, [r7, #12]
 8006892:	60b9      	str	r1, [r7, #8]
 8006894:	603b      	str	r3, [r7, #0]
 8006896:	4613      	mov	r3, r2
 8006898:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b20      	cmp	r3, #32
 80068a8:	f040 8081 	bne.w	80069ae <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d002      	beq.n	80068b8 <HAL_UART_Receive+0x2e>
 80068b2:	88fb      	ldrh	r3, [r7, #6]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e079      	b.n	80069b0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2222      	movs	r2, #34	@ 0x22
 80068c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068d0:	f7fb fe9c 	bl	800260c <HAL_GetTick>
 80068d4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	88fa      	ldrh	r2, [r7, #6]
 80068da:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	88fa      	ldrh	r2, [r7, #6]
 80068e0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068ea:	d108      	bne.n	80068fe <HAL_UART_Receive+0x74>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d104      	bne.n	80068fe <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80068f4:	2300      	movs	r3, #0
 80068f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	61bb      	str	r3, [r7, #24]
 80068fc:	e003      	b.n	8006906 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006902:	2300      	movs	r3, #0
 8006904:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006906:	e047      	b.n	8006998 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	2200      	movs	r2, #0
 8006910:	2120      	movs	r1, #32
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f000 f850 	bl	80069b8 <UART_WaitOnFlagUntilTimeout>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d005      	beq.n	800692a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2220      	movs	r2, #32
 8006922:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e042      	b.n	80069b0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10c      	bne.n	800694a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	b29b      	uxth	r3, r3
 8006938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800693c:	b29a      	uxth	r2, r3
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	3302      	adds	r3, #2
 8006946:	61bb      	str	r3, [r7, #24]
 8006948:	e01f      	b.n	800698a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006952:	d007      	beq.n	8006964 <HAL_UART_Receive+0xda>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10a      	bne.n	8006972 <HAL_UART_Receive+0xe8>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d106      	bne.n	8006972 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	b2da      	uxtb	r2, r3
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	701a      	strb	r2, [r3, #0]
 8006970:	e008      	b.n	8006984 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	b2db      	uxtb	r3, r3
 800697a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800697e:	b2da      	uxtb	r2, r3
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	3301      	adds	r3, #1
 8006988:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800698e:	b29b      	uxth	r3, r3
 8006990:	3b01      	subs	r3, #1
 8006992:	b29a      	uxth	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800699c:	b29b      	uxth	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1b2      	bne.n	8006908 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2220      	movs	r2, #32
 80069a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	e000      	b.n	80069b0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80069ae:	2302      	movs	r3, #2
  }
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3720      	adds	r7, #32
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	603b      	str	r3, [r7, #0]
 80069c4:	4613      	mov	r3, r2
 80069c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069c8:	e03b      	b.n	8006a42 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d0:	d037      	beq.n	8006a42 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069d2:	f7fb fe1b 	bl	800260c <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	6a3a      	ldr	r2, [r7, #32]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d302      	bcc.n	80069e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d101      	bne.n	80069ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e03a      	b.n	8006a62 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	f003 0304 	and.w	r3, r3, #4
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d023      	beq.n	8006a42 <UART_WaitOnFlagUntilTimeout+0x8a>
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	2b80      	cmp	r3, #128	@ 0x80
 80069fe:	d020      	beq.n	8006a42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2b40      	cmp	r3, #64	@ 0x40
 8006a04:	d01d      	beq.n	8006a42 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0308 	and.w	r3, r3, #8
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d116      	bne.n	8006a42 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006a14:	2300      	movs	r3, #0
 8006a16:	617b      	str	r3, [r7, #20]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	617b      	str	r3, [r7, #20]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	617b      	str	r3, [r7, #20]
 8006a28:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f000 f81d 	bl	8006a6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2208      	movs	r2, #8
 8006a34:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e00f      	b.n	8006a62 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	bf0c      	ite	eq
 8006a52:	2301      	moveq	r3, #1
 8006a54:	2300      	movne	r3, #0
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	461a      	mov	r2, r3
 8006a5a:	79fb      	ldrb	r3, [r7, #7]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d0b4      	beq.n	80069ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3718      	adds	r7, #24
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b095      	sub	sp, #84	@ 0x54
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	330c      	adds	r3, #12
 8006a78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a7c:	e853 3f00 	ldrex	r3, [r3]
 8006a80:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	330c      	adds	r3, #12
 8006a90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a92:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a9a:	e841 2300 	strex	r3, r2, [r1]
 8006a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1e5      	bne.n	8006a72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3314      	adds	r3, #20
 8006aac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	e853 3f00 	ldrex	r3, [r3]
 8006ab4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	f023 0301 	bic.w	r3, r3, #1
 8006abc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3314      	adds	r3, #20
 8006ac4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ac6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006acc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ace:	e841 2300 	strex	r3, r2, [r1]
 8006ad2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1e5      	bne.n	8006aa6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d119      	bne.n	8006b16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	330c      	adds	r3, #12
 8006ae8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	e853 3f00 	ldrex	r3, [r3]
 8006af0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	f023 0310 	bic.w	r3, r3, #16
 8006af8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	330c      	adds	r3, #12
 8006b00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b02:	61ba      	str	r2, [r7, #24]
 8006b04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	6979      	ldr	r1, [r7, #20]
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e5      	bne.n	8006ae2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006b24:	bf00      	nop
 8006b26:	3754      	adds	r7, #84	@ 0x54
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b34:	b0c0      	sub	sp, #256	@ 0x100
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b4c:	68d9      	ldr	r1, [r3, #12]
 8006b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	ea40 0301 	orr.w	r3, r0, r1
 8006b58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b5e:	689a      	ldr	r2, [r3, #8]
 8006b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	431a      	orrs	r2, r3
 8006b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	431a      	orrs	r2, r3
 8006b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006b88:	f021 010c 	bic.w	r1, r1, #12
 8006b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b96:	430b      	orrs	r3, r1
 8006b98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006baa:	6999      	ldr	r1, [r3, #24]
 8006bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	ea40 0301 	orr.w	r3, r0, r1
 8006bb6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	4b8f      	ldr	r3, [pc, #572]	@ (8006dfc <UART_SetConfig+0x2cc>)
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d005      	beq.n	8006bd0 <UART_SetConfig+0xa0>
 8006bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	4b8d      	ldr	r3, [pc, #564]	@ (8006e00 <UART_SetConfig+0x2d0>)
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d104      	bne.n	8006bda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bd0:	f7fe fe8a 	bl	80058e8 <HAL_RCC_GetPCLK2Freq>
 8006bd4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006bd8:	e003      	b.n	8006be2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bda:	f7fe fe71 	bl	80058c0 <HAL_RCC_GetPCLK1Freq>
 8006bde:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bec:	f040 810c 	bne.w	8006e08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006bfa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006bfe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006c02:	4622      	mov	r2, r4
 8006c04:	462b      	mov	r3, r5
 8006c06:	1891      	adds	r1, r2, r2
 8006c08:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006c0a:	415b      	adcs	r3, r3
 8006c0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006c12:	4621      	mov	r1, r4
 8006c14:	eb12 0801 	adds.w	r8, r2, r1
 8006c18:	4629      	mov	r1, r5
 8006c1a:	eb43 0901 	adc.w	r9, r3, r1
 8006c1e:	f04f 0200 	mov.w	r2, #0
 8006c22:	f04f 0300 	mov.w	r3, #0
 8006c26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c32:	4690      	mov	r8, r2
 8006c34:	4699      	mov	r9, r3
 8006c36:	4623      	mov	r3, r4
 8006c38:	eb18 0303 	adds.w	r3, r8, r3
 8006c3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c40:	462b      	mov	r3, r5
 8006c42:	eb49 0303 	adc.w	r3, r9, r3
 8006c46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c56:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006c5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006c5e:	460b      	mov	r3, r1
 8006c60:	18db      	adds	r3, r3, r3
 8006c62:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c64:	4613      	mov	r3, r2
 8006c66:	eb42 0303 	adc.w	r3, r2, r3
 8006c6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006c70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006c74:	f7f9 ffa0 	bl	8000bb8 <__aeabi_uldivmod>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	4b61      	ldr	r3, [pc, #388]	@ (8006e04 <UART_SetConfig+0x2d4>)
 8006c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8006c82:	095b      	lsrs	r3, r3, #5
 8006c84:	011c      	lsls	r4, r3, #4
 8006c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c90:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006c94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006c98:	4642      	mov	r2, r8
 8006c9a:	464b      	mov	r3, r9
 8006c9c:	1891      	adds	r1, r2, r2
 8006c9e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006ca0:	415b      	adcs	r3, r3
 8006ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ca4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006ca8:	4641      	mov	r1, r8
 8006caa:	eb12 0a01 	adds.w	sl, r2, r1
 8006cae:	4649      	mov	r1, r9
 8006cb0:	eb43 0b01 	adc.w	fp, r3, r1
 8006cb4:	f04f 0200 	mov.w	r2, #0
 8006cb8:	f04f 0300 	mov.w	r3, #0
 8006cbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006cc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006cc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cc8:	4692      	mov	sl, r2
 8006cca:	469b      	mov	fp, r3
 8006ccc:	4643      	mov	r3, r8
 8006cce:	eb1a 0303 	adds.w	r3, sl, r3
 8006cd2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006cd6:	464b      	mov	r3, r9
 8006cd8:	eb4b 0303 	adc.w	r3, fp, r3
 8006cdc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006cf0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	18db      	adds	r3, r3, r3
 8006cf8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	eb42 0303 	adc.w	r3, r2, r3
 8006d00:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006d06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006d0a:	f7f9 ff55 	bl	8000bb8 <__aeabi_uldivmod>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	460b      	mov	r3, r1
 8006d12:	4611      	mov	r1, r2
 8006d14:	4b3b      	ldr	r3, [pc, #236]	@ (8006e04 <UART_SetConfig+0x2d4>)
 8006d16:	fba3 2301 	umull	r2, r3, r3, r1
 8006d1a:	095b      	lsrs	r3, r3, #5
 8006d1c:	2264      	movs	r2, #100	@ 0x64
 8006d1e:	fb02 f303 	mul.w	r3, r2, r3
 8006d22:	1acb      	subs	r3, r1, r3
 8006d24:	00db      	lsls	r3, r3, #3
 8006d26:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006d2a:	4b36      	ldr	r3, [pc, #216]	@ (8006e04 <UART_SetConfig+0x2d4>)
 8006d2c:	fba3 2302 	umull	r2, r3, r3, r2
 8006d30:	095b      	lsrs	r3, r3, #5
 8006d32:	005b      	lsls	r3, r3, #1
 8006d34:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006d38:	441c      	add	r4, r3
 8006d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d44:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006d48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006d4c:	4642      	mov	r2, r8
 8006d4e:	464b      	mov	r3, r9
 8006d50:	1891      	adds	r1, r2, r2
 8006d52:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006d54:	415b      	adcs	r3, r3
 8006d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006d5c:	4641      	mov	r1, r8
 8006d5e:	1851      	adds	r1, r2, r1
 8006d60:	6339      	str	r1, [r7, #48]	@ 0x30
 8006d62:	4649      	mov	r1, r9
 8006d64:	414b      	adcs	r3, r1
 8006d66:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d68:	f04f 0200 	mov.w	r2, #0
 8006d6c:	f04f 0300 	mov.w	r3, #0
 8006d70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006d74:	4659      	mov	r1, fp
 8006d76:	00cb      	lsls	r3, r1, #3
 8006d78:	4651      	mov	r1, sl
 8006d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d7e:	4651      	mov	r1, sl
 8006d80:	00ca      	lsls	r2, r1, #3
 8006d82:	4610      	mov	r0, r2
 8006d84:	4619      	mov	r1, r3
 8006d86:	4603      	mov	r3, r0
 8006d88:	4642      	mov	r2, r8
 8006d8a:	189b      	adds	r3, r3, r2
 8006d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d90:	464b      	mov	r3, r9
 8006d92:	460a      	mov	r2, r1
 8006d94:	eb42 0303 	adc.w	r3, r2, r3
 8006d98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006da8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006dac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006db0:	460b      	mov	r3, r1
 8006db2:	18db      	adds	r3, r3, r3
 8006db4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006db6:	4613      	mov	r3, r2
 8006db8:	eb42 0303 	adc.w	r3, r2, r3
 8006dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006dc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006dc6:	f7f9 fef7 	bl	8000bb8 <__aeabi_uldivmod>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	4b0d      	ldr	r3, [pc, #52]	@ (8006e04 <UART_SetConfig+0x2d4>)
 8006dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8006dd4:	095b      	lsrs	r3, r3, #5
 8006dd6:	2164      	movs	r1, #100	@ 0x64
 8006dd8:	fb01 f303 	mul.w	r3, r1, r3
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	00db      	lsls	r3, r3, #3
 8006de0:	3332      	adds	r3, #50	@ 0x32
 8006de2:	4a08      	ldr	r2, [pc, #32]	@ (8006e04 <UART_SetConfig+0x2d4>)
 8006de4:	fba2 2303 	umull	r2, r3, r2, r3
 8006de8:	095b      	lsrs	r3, r3, #5
 8006dea:	f003 0207 	and.w	r2, r3, #7
 8006dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4422      	add	r2, r4
 8006df6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006df8:	e106      	b.n	8007008 <UART_SetConfig+0x4d8>
 8006dfa:	bf00      	nop
 8006dfc:	40011000 	.word	0x40011000
 8006e00:	40011400 	.word	0x40011400
 8006e04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e12:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006e16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006e1a:	4642      	mov	r2, r8
 8006e1c:	464b      	mov	r3, r9
 8006e1e:	1891      	adds	r1, r2, r2
 8006e20:	6239      	str	r1, [r7, #32]
 8006e22:	415b      	adcs	r3, r3
 8006e24:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e2a:	4641      	mov	r1, r8
 8006e2c:	1854      	adds	r4, r2, r1
 8006e2e:	4649      	mov	r1, r9
 8006e30:	eb43 0501 	adc.w	r5, r3, r1
 8006e34:	f04f 0200 	mov.w	r2, #0
 8006e38:	f04f 0300 	mov.w	r3, #0
 8006e3c:	00eb      	lsls	r3, r5, #3
 8006e3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e42:	00e2      	lsls	r2, r4, #3
 8006e44:	4614      	mov	r4, r2
 8006e46:	461d      	mov	r5, r3
 8006e48:	4643      	mov	r3, r8
 8006e4a:	18e3      	adds	r3, r4, r3
 8006e4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e50:	464b      	mov	r3, r9
 8006e52:	eb45 0303 	adc.w	r3, r5, r3
 8006e56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e6a:	f04f 0200 	mov.w	r2, #0
 8006e6e:	f04f 0300 	mov.w	r3, #0
 8006e72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006e76:	4629      	mov	r1, r5
 8006e78:	008b      	lsls	r3, r1, #2
 8006e7a:	4621      	mov	r1, r4
 8006e7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e80:	4621      	mov	r1, r4
 8006e82:	008a      	lsls	r2, r1, #2
 8006e84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006e88:	f7f9 fe96 	bl	8000bb8 <__aeabi_uldivmod>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	460b      	mov	r3, r1
 8006e90:	4b60      	ldr	r3, [pc, #384]	@ (8007014 <UART_SetConfig+0x4e4>)
 8006e92:	fba3 2302 	umull	r2, r3, r3, r2
 8006e96:	095b      	lsrs	r3, r3, #5
 8006e98:	011c      	lsls	r4, r3, #4
 8006e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ea4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006ea8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006eac:	4642      	mov	r2, r8
 8006eae:	464b      	mov	r3, r9
 8006eb0:	1891      	adds	r1, r2, r2
 8006eb2:	61b9      	str	r1, [r7, #24]
 8006eb4:	415b      	adcs	r3, r3
 8006eb6:	61fb      	str	r3, [r7, #28]
 8006eb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ebc:	4641      	mov	r1, r8
 8006ebe:	1851      	adds	r1, r2, r1
 8006ec0:	6139      	str	r1, [r7, #16]
 8006ec2:	4649      	mov	r1, r9
 8006ec4:	414b      	adcs	r3, r1
 8006ec6:	617b      	str	r3, [r7, #20]
 8006ec8:	f04f 0200 	mov.w	r2, #0
 8006ecc:	f04f 0300 	mov.w	r3, #0
 8006ed0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ed4:	4659      	mov	r1, fp
 8006ed6:	00cb      	lsls	r3, r1, #3
 8006ed8:	4651      	mov	r1, sl
 8006eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ede:	4651      	mov	r1, sl
 8006ee0:	00ca      	lsls	r2, r1, #3
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	4642      	mov	r2, r8
 8006eea:	189b      	adds	r3, r3, r2
 8006eec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ef0:	464b      	mov	r3, r9
 8006ef2:	460a      	mov	r2, r1
 8006ef4:	eb42 0303 	adc.w	r3, r2, r3
 8006ef8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f06:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006f08:	f04f 0200 	mov.w	r2, #0
 8006f0c:	f04f 0300 	mov.w	r3, #0
 8006f10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006f14:	4649      	mov	r1, r9
 8006f16:	008b      	lsls	r3, r1, #2
 8006f18:	4641      	mov	r1, r8
 8006f1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f1e:	4641      	mov	r1, r8
 8006f20:	008a      	lsls	r2, r1, #2
 8006f22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006f26:	f7f9 fe47 	bl	8000bb8 <__aeabi_uldivmod>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	4611      	mov	r1, r2
 8006f30:	4b38      	ldr	r3, [pc, #224]	@ (8007014 <UART_SetConfig+0x4e4>)
 8006f32:	fba3 2301 	umull	r2, r3, r3, r1
 8006f36:	095b      	lsrs	r3, r3, #5
 8006f38:	2264      	movs	r2, #100	@ 0x64
 8006f3a:	fb02 f303 	mul.w	r3, r2, r3
 8006f3e:	1acb      	subs	r3, r1, r3
 8006f40:	011b      	lsls	r3, r3, #4
 8006f42:	3332      	adds	r3, #50	@ 0x32
 8006f44:	4a33      	ldr	r2, [pc, #204]	@ (8007014 <UART_SetConfig+0x4e4>)
 8006f46:	fba2 2303 	umull	r2, r3, r2, r3
 8006f4a:	095b      	lsrs	r3, r3, #5
 8006f4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f50:	441c      	add	r4, r3
 8006f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f56:	2200      	movs	r2, #0
 8006f58:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f5a:	677a      	str	r2, [r7, #116]	@ 0x74
 8006f5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006f60:	4642      	mov	r2, r8
 8006f62:	464b      	mov	r3, r9
 8006f64:	1891      	adds	r1, r2, r2
 8006f66:	60b9      	str	r1, [r7, #8]
 8006f68:	415b      	adcs	r3, r3
 8006f6a:	60fb      	str	r3, [r7, #12]
 8006f6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f70:	4641      	mov	r1, r8
 8006f72:	1851      	adds	r1, r2, r1
 8006f74:	6039      	str	r1, [r7, #0]
 8006f76:	4649      	mov	r1, r9
 8006f78:	414b      	adcs	r3, r1
 8006f7a:	607b      	str	r3, [r7, #4]
 8006f7c:	f04f 0200 	mov.w	r2, #0
 8006f80:	f04f 0300 	mov.w	r3, #0
 8006f84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f88:	4659      	mov	r1, fp
 8006f8a:	00cb      	lsls	r3, r1, #3
 8006f8c:	4651      	mov	r1, sl
 8006f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f92:	4651      	mov	r1, sl
 8006f94:	00ca      	lsls	r2, r1, #3
 8006f96:	4610      	mov	r0, r2
 8006f98:	4619      	mov	r1, r3
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	4642      	mov	r2, r8
 8006f9e:	189b      	adds	r3, r3, r2
 8006fa0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006fa2:	464b      	mov	r3, r9
 8006fa4:	460a      	mov	r2, r1
 8006fa6:	eb42 0303 	adc.w	r3, r2, r3
 8006faa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006fb6:	667a      	str	r2, [r7, #100]	@ 0x64
 8006fb8:	f04f 0200 	mov.w	r2, #0
 8006fbc:	f04f 0300 	mov.w	r3, #0
 8006fc0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006fc4:	4649      	mov	r1, r9
 8006fc6:	008b      	lsls	r3, r1, #2
 8006fc8:	4641      	mov	r1, r8
 8006fca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fce:	4641      	mov	r1, r8
 8006fd0:	008a      	lsls	r2, r1, #2
 8006fd2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006fd6:	f7f9 fdef 	bl	8000bb8 <__aeabi_uldivmod>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	460b      	mov	r3, r1
 8006fde:	4b0d      	ldr	r3, [pc, #52]	@ (8007014 <UART_SetConfig+0x4e4>)
 8006fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8006fe4:	095b      	lsrs	r3, r3, #5
 8006fe6:	2164      	movs	r1, #100	@ 0x64
 8006fe8:	fb01 f303 	mul.w	r3, r1, r3
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	011b      	lsls	r3, r3, #4
 8006ff0:	3332      	adds	r3, #50	@ 0x32
 8006ff2:	4a08      	ldr	r2, [pc, #32]	@ (8007014 <UART_SetConfig+0x4e4>)
 8006ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff8:	095b      	lsrs	r3, r3, #5
 8006ffa:	f003 020f 	and.w	r2, r3, #15
 8006ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4422      	add	r2, r4
 8007006:	609a      	str	r2, [r3, #8]
}
 8007008:	bf00      	nop
 800700a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800700e:	46bd      	mov	sp, r7
 8007010:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007014:	51eb851f 	.word	0x51eb851f

08007018 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007018:	b084      	sub	sp, #16
 800701a:	b580      	push	{r7, lr}
 800701c:	b084      	sub	sp, #16
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
 8007022:	f107 001c 	add.w	r0, r7, #28
 8007026:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800702a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800702e:	2b01      	cmp	r3, #1
 8007030:	d123      	bne.n	800707a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007036:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007046:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800705a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800705e:	2b01      	cmp	r3, #1
 8007060:	d105      	bne.n	800706e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f001 fae2 	bl	8008638 <USB_CoreReset>
 8007074:	4603      	mov	r3, r0
 8007076:	73fb      	strb	r3, [r7, #15]
 8007078:	e01b      	b.n	80070b2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f001 fad6 	bl	8008638 <USB_CoreReset>
 800708c:	4603      	mov	r3, r0
 800708e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007090:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007094:	2b00      	cmp	r3, #0
 8007096:	d106      	bne.n	80070a6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80070a4:	e005      	b.n	80070b2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80070b2:	7fbb      	ldrb	r3, [r7, #30]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d10b      	bne.n	80070d0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f043 0206 	orr.w	r2, r3, #6
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f043 0220 	orr.w	r2, r3, #32
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070dc:	b004      	add	sp, #16
 80070de:	4770      	bx	lr

080070e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	4613      	mov	r3, r2
 80070ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80070ee:	79fb      	ldrb	r3, [r7, #7]
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d165      	bne.n	80071c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	4a41      	ldr	r2, [pc, #260]	@ (80071fc <USB_SetTurnaroundTime+0x11c>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d906      	bls.n	800710a <USB_SetTurnaroundTime+0x2a>
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	4a40      	ldr	r2, [pc, #256]	@ (8007200 <USB_SetTurnaroundTime+0x120>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d202      	bcs.n	800710a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007104:	230f      	movs	r3, #15
 8007106:	617b      	str	r3, [r7, #20]
 8007108:	e062      	b.n	80071d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	4a3c      	ldr	r2, [pc, #240]	@ (8007200 <USB_SetTurnaroundTime+0x120>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d306      	bcc.n	8007120 <USB_SetTurnaroundTime+0x40>
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	4a3b      	ldr	r2, [pc, #236]	@ (8007204 <USB_SetTurnaroundTime+0x124>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d202      	bcs.n	8007120 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800711a:	230e      	movs	r3, #14
 800711c:	617b      	str	r3, [r7, #20]
 800711e:	e057      	b.n	80071d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	4a38      	ldr	r2, [pc, #224]	@ (8007204 <USB_SetTurnaroundTime+0x124>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d306      	bcc.n	8007136 <USB_SetTurnaroundTime+0x56>
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	4a37      	ldr	r2, [pc, #220]	@ (8007208 <USB_SetTurnaroundTime+0x128>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d202      	bcs.n	8007136 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007130:	230d      	movs	r3, #13
 8007132:	617b      	str	r3, [r7, #20]
 8007134:	e04c      	b.n	80071d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	4a33      	ldr	r2, [pc, #204]	@ (8007208 <USB_SetTurnaroundTime+0x128>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d306      	bcc.n	800714c <USB_SetTurnaroundTime+0x6c>
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	4a32      	ldr	r2, [pc, #200]	@ (800720c <USB_SetTurnaroundTime+0x12c>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d802      	bhi.n	800714c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007146:	230c      	movs	r3, #12
 8007148:	617b      	str	r3, [r7, #20]
 800714a:	e041      	b.n	80071d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	4a2f      	ldr	r2, [pc, #188]	@ (800720c <USB_SetTurnaroundTime+0x12c>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d906      	bls.n	8007162 <USB_SetTurnaroundTime+0x82>
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	4a2e      	ldr	r2, [pc, #184]	@ (8007210 <USB_SetTurnaroundTime+0x130>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d802      	bhi.n	8007162 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800715c:	230b      	movs	r3, #11
 800715e:	617b      	str	r3, [r7, #20]
 8007160:	e036      	b.n	80071d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	4a2a      	ldr	r2, [pc, #168]	@ (8007210 <USB_SetTurnaroundTime+0x130>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d906      	bls.n	8007178 <USB_SetTurnaroundTime+0x98>
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	4a29      	ldr	r2, [pc, #164]	@ (8007214 <USB_SetTurnaroundTime+0x134>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d802      	bhi.n	8007178 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007172:	230a      	movs	r3, #10
 8007174:	617b      	str	r3, [r7, #20]
 8007176:	e02b      	b.n	80071d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	4a26      	ldr	r2, [pc, #152]	@ (8007214 <USB_SetTurnaroundTime+0x134>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d906      	bls.n	800718e <USB_SetTurnaroundTime+0xae>
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	4a25      	ldr	r2, [pc, #148]	@ (8007218 <USB_SetTurnaroundTime+0x138>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d202      	bcs.n	800718e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007188:	2309      	movs	r3, #9
 800718a:	617b      	str	r3, [r7, #20]
 800718c:	e020      	b.n	80071d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	4a21      	ldr	r2, [pc, #132]	@ (8007218 <USB_SetTurnaroundTime+0x138>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d306      	bcc.n	80071a4 <USB_SetTurnaroundTime+0xc4>
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	4a20      	ldr	r2, [pc, #128]	@ (800721c <USB_SetTurnaroundTime+0x13c>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d802      	bhi.n	80071a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800719e:	2308      	movs	r3, #8
 80071a0:	617b      	str	r3, [r7, #20]
 80071a2:	e015      	b.n	80071d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	4a1d      	ldr	r2, [pc, #116]	@ (800721c <USB_SetTurnaroundTime+0x13c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d906      	bls.n	80071ba <USB_SetTurnaroundTime+0xda>
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	4a1c      	ldr	r2, [pc, #112]	@ (8007220 <USB_SetTurnaroundTime+0x140>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d202      	bcs.n	80071ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80071b4:	2307      	movs	r3, #7
 80071b6:	617b      	str	r3, [r7, #20]
 80071b8:	e00a      	b.n	80071d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80071ba:	2306      	movs	r3, #6
 80071bc:	617b      	str	r3, [r7, #20]
 80071be:	e007      	b.n	80071d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80071c0:	79fb      	ldrb	r3, [r7, #7]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d102      	bne.n	80071cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80071c6:	2309      	movs	r3, #9
 80071c8:	617b      	str	r3, [r7, #20]
 80071ca:	e001      	b.n	80071d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80071cc:	2309      	movs	r3, #9
 80071ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	68da      	ldr	r2, [r3, #12]
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	029b      	lsls	r3, r3, #10
 80071e4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80071e8:	431a      	orrs	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	371c      	adds	r7, #28
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	00d8acbf 	.word	0x00d8acbf
 8007200:	00e4e1c0 	.word	0x00e4e1c0
 8007204:	00f42400 	.word	0x00f42400
 8007208:	01067380 	.word	0x01067380
 800720c:	011a499f 	.word	0x011a499f
 8007210:	01312cff 	.word	0x01312cff
 8007214:	014ca43f 	.word	0x014ca43f
 8007218:	016e3600 	.word	0x016e3600
 800721c:	01a6ab1f 	.word	0x01a6ab1f
 8007220:	01e84800 	.word	0x01e84800

08007224 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f043 0201 	orr.w	r2, r3, #1
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	370c      	adds	r7, #12
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007246:	b480      	push	{r7}
 8007248:	b083      	sub	sp, #12
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f023 0201 	bic.w	r2, r3, #1
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	460b      	mov	r3, r1
 8007272:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007274:	2300      	movs	r3, #0
 8007276:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007284:	78fb      	ldrb	r3, [r7, #3]
 8007286:	2b01      	cmp	r3, #1
 8007288:	d115      	bne.n	80072b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007296:	200a      	movs	r0, #10
 8007298:	f7fb f9c4 	bl	8002624 <HAL_Delay>
      ms += 10U;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	330a      	adds	r3, #10
 80072a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f001 f939 	bl	800851a <USB_GetMode>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d01e      	beq.n	80072ec <USB_SetCurrentMode+0x84>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2bc7      	cmp	r3, #199	@ 0xc7
 80072b2:	d9f0      	bls.n	8007296 <USB_SetCurrentMode+0x2e>
 80072b4:	e01a      	b.n	80072ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80072b6:	78fb      	ldrb	r3, [r7, #3]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d115      	bne.n	80072e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80072c8:	200a      	movs	r0, #10
 80072ca:	f7fb f9ab 	bl	8002624 <HAL_Delay>
      ms += 10U;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	330a      	adds	r3, #10
 80072d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f001 f920 	bl	800851a <USB_GetMode>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d005      	beq.n	80072ec <USB_SetCurrentMode+0x84>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2bc7      	cmp	r3, #199	@ 0xc7
 80072e4:	d9f0      	bls.n	80072c8 <USB_SetCurrentMode+0x60>
 80072e6:	e001      	b.n	80072ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e005      	b.n	80072f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2bc8      	cmp	r3, #200	@ 0xc8
 80072f0:	d101      	bne.n	80072f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e000      	b.n	80072f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007300:	b084      	sub	sp, #16
 8007302:	b580      	push	{r7, lr}
 8007304:	b086      	sub	sp, #24
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800730e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800731a:	2300      	movs	r3, #0
 800731c:	613b      	str	r3, [r7, #16]
 800731e:	e009      	b.n	8007334 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	3340      	adds	r3, #64	@ 0x40
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	2200      	movs	r2, #0
 800732c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	3301      	adds	r3, #1
 8007332:	613b      	str	r3, [r7, #16]
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	2b0e      	cmp	r3, #14
 8007338:	d9f2      	bls.n	8007320 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800733a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800733e:	2b00      	cmp	r3, #0
 8007340:	d11c      	bne.n	800737c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007350:	f043 0302 	orr.w	r3, r3, #2
 8007354:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800735a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007366:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007372:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	639a      	str	r2, [r3, #56]	@ 0x38
 800737a:	e00b      	b.n	8007394 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007380:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800738c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800739a:	461a      	mov	r2, r3
 800739c:	2300      	movs	r3, #0
 800739e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073a0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d10d      	bne.n	80073c4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80073a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d104      	bne.n	80073ba <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80073b0:	2100      	movs	r1, #0
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f968 	bl	8007688 <USB_SetDevSpeed>
 80073b8:	e008      	b.n	80073cc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80073ba:	2101      	movs	r1, #1
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 f963 	bl	8007688 <USB_SetDevSpeed>
 80073c2:	e003      	b.n	80073cc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80073c4:	2103      	movs	r1, #3
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f95e 	bl	8007688 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073cc:	2110      	movs	r1, #16
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f8fa 	bl	80075c8 <USB_FlushTxFifo>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f924 	bl	800762c <USB_FlushRxFifo>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073f4:	461a      	mov	r2, r3
 80073f6:	2300      	movs	r3, #0
 80073f8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007400:	461a      	mov	r2, r3
 8007402:	2300      	movs	r3, #0
 8007404:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800740c:	461a      	mov	r2, r3
 800740e:	2300      	movs	r3, #0
 8007410:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007412:	2300      	movs	r3, #0
 8007414:	613b      	str	r3, [r7, #16]
 8007416:	e043      	b.n	80074a0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	015a      	lsls	r2, r3, #5
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	4413      	add	r3, r2
 8007420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800742a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800742e:	d118      	bne.n	8007462 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10a      	bne.n	800744c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	4413      	add	r3, r2
 800743e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007442:	461a      	mov	r2, r3
 8007444:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007448:	6013      	str	r3, [r2, #0]
 800744a:	e013      	b.n	8007474 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4413      	add	r3, r2
 8007454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007458:	461a      	mov	r2, r3
 800745a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800745e:	6013      	str	r3, [r2, #0]
 8007460:	e008      	b.n	8007474 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	015a      	lsls	r2, r3, #5
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	4413      	add	r3, r2
 800746a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800746e:	461a      	mov	r2, r3
 8007470:	2300      	movs	r3, #0
 8007472:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4413      	add	r3, r2
 800747c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007480:	461a      	mov	r2, r3
 8007482:	2300      	movs	r3, #0
 8007484:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	015a      	lsls	r2, r3, #5
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	4413      	add	r3, r2
 800748e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007492:	461a      	mov	r2, r3
 8007494:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007498:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	3301      	adds	r3, #1
 800749e:	613b      	str	r3, [r7, #16]
 80074a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80074a4:	461a      	mov	r2, r3
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d3b5      	bcc.n	8007418 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074ac:	2300      	movs	r3, #0
 80074ae:	613b      	str	r3, [r7, #16]
 80074b0:	e043      	b.n	800753a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074c8:	d118      	bne.n	80074fc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10a      	bne.n	80074e6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	015a      	lsls	r2, r3, #5
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	4413      	add	r3, r2
 80074d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074dc:	461a      	mov	r2, r3
 80074de:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80074e2:	6013      	str	r3, [r2, #0]
 80074e4:	e013      	b.n	800750e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074f2:	461a      	mov	r2, r3
 80074f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80074f8:	6013      	str	r3, [r2, #0]
 80074fa:	e008      	b.n	800750e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	015a      	lsls	r2, r3, #5
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	4413      	add	r3, r2
 8007504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007508:	461a      	mov	r2, r3
 800750a:	2300      	movs	r3, #0
 800750c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	015a      	lsls	r2, r3, #5
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	4413      	add	r3, r2
 8007516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800751a:	461a      	mov	r2, r3
 800751c:	2300      	movs	r3, #0
 800751e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	015a      	lsls	r2, r3, #5
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	4413      	add	r3, r2
 8007528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800752c:	461a      	mov	r2, r3
 800752e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007532:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	3301      	adds	r3, #1
 8007538:	613b      	str	r3, [r7, #16]
 800753a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800753e:	461a      	mov	r2, r3
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	4293      	cmp	r3, r2
 8007544:	d3b5      	bcc.n	80074b2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007554:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007558:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007566:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007568:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800756c:	2b00      	cmp	r3, #0
 800756e:	d105      	bne.n	800757c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	f043 0210 	orr.w	r2, r3, #16
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	699a      	ldr	r2, [r3, #24]
 8007580:	4b10      	ldr	r3, [pc, #64]	@ (80075c4 <USB_DevInit+0x2c4>)
 8007582:	4313      	orrs	r3, r2
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007588:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800758c:	2b00      	cmp	r3, #0
 800758e:	d005      	beq.n	800759c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	699b      	ldr	r3, [r3, #24]
 8007594:	f043 0208 	orr.w	r2, r3, #8
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800759c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d107      	bne.n	80075b4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80075ac:	f043 0304 	orr.w	r3, r3, #4
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80075b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3718      	adds	r7, #24
 80075ba:	46bd      	mov	sp, r7
 80075bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075c0:	b004      	add	sp, #16
 80075c2:	4770      	bx	lr
 80075c4:	803c3800 	.word	0x803c3800

080075c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075d2:	2300      	movs	r3, #0
 80075d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	3301      	adds	r3, #1
 80075da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075e2:	d901      	bls.n	80075e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e01b      	b.n	8007620 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	daf2      	bge.n	80075d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80075f0:	2300      	movs	r3, #0
 80075f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	019b      	lsls	r3, r3, #6
 80075f8:	f043 0220 	orr.w	r2, r3, #32
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	3301      	adds	r3, #1
 8007604:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800760c:	d901      	bls.n	8007612 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e006      	b.n	8007620 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	f003 0320 	and.w	r3, r3, #32
 800761a:	2b20      	cmp	r3, #32
 800761c:	d0f0      	beq.n	8007600 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	3301      	adds	r3, #1
 800763c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007644:	d901      	bls.n	800764a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e018      	b.n	800767c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	2b00      	cmp	r3, #0
 8007650:	daf2      	bge.n	8007638 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007652:	2300      	movs	r3, #0
 8007654:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2210      	movs	r2, #16
 800765a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	3301      	adds	r3, #1
 8007660:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007668:	d901      	bls.n	800766e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e006      	b.n	800767c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	f003 0310 	and.w	r3, r3, #16
 8007676:	2b10      	cmp	r3, #16
 8007678:	d0f0      	beq.n	800765c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	460b      	mov	r3, r1
 8007692:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	78fb      	ldrb	r3, [r7, #3]
 80076a2:	68f9      	ldr	r1, [r7, #12]
 80076a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076a8:	4313      	orrs	r3, r2
 80076aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b087      	sub	sp, #28
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f003 0306 	and.w	r3, r3, #6
 80076d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d102      	bne.n	80076e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80076da:	2300      	movs	r3, #0
 80076dc:	75fb      	strb	r3, [r7, #23]
 80076de:	e00a      	b.n	80076f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d002      	beq.n	80076ec <USB_GetDevSpeed+0x32>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2b06      	cmp	r3, #6
 80076ea:	d102      	bne.n	80076f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80076ec:	2302      	movs	r3, #2
 80076ee:	75fb      	strb	r3, [r7, #23]
 80076f0:	e001      	b.n	80076f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80076f2:	230f      	movs	r3, #15
 80076f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80076f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	371c      	adds	r7, #28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	785b      	ldrb	r3, [r3, #1]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d13a      	bne.n	8007796 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007726:	69da      	ldr	r2, [r3, #28]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	f003 030f 	and.w	r3, r3, #15
 8007730:	2101      	movs	r1, #1
 8007732:	fa01 f303 	lsl.w	r3, r1, r3
 8007736:	b29b      	uxth	r3, r3
 8007738:	68f9      	ldr	r1, [r7, #12]
 800773a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800773e:	4313      	orrs	r3, r2
 8007740:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	015a      	lsls	r2, r3, #5
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	4413      	add	r3, r2
 800774a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d155      	bne.n	8007804 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	015a      	lsls	r2, r3, #5
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	4413      	add	r3, r2
 8007760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	791b      	ldrb	r3, [r3, #4]
 8007772:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007774:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	059b      	lsls	r3, r3, #22
 800777a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800777c:	4313      	orrs	r3, r2
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	0151      	lsls	r1, r2, #5
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	440a      	add	r2, r1
 8007786:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800778a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800778e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007792:	6013      	str	r3, [r2, #0]
 8007794:	e036      	b.n	8007804 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800779c:	69da      	ldr	r2, [r3, #28]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	f003 030f 	and.w	r3, r3, #15
 80077a6:	2101      	movs	r1, #1
 80077a8:	fa01 f303 	lsl.w	r3, r1, r3
 80077ac:	041b      	lsls	r3, r3, #16
 80077ae:	68f9      	ldr	r1, [r7, #12]
 80077b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077b4:	4313      	orrs	r3, r2
 80077b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	015a      	lsls	r2, r3, #5
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	4413      	add	r3, r2
 80077c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d11a      	bne.n	8007804 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	015a      	lsls	r2, r3, #5
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	4413      	add	r3, r2
 80077d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	791b      	ldrb	r3, [r3, #4]
 80077e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80077ea:	430b      	orrs	r3, r1
 80077ec:	4313      	orrs	r3, r2
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	0151      	lsls	r1, r2, #5
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	440a      	add	r2, r1
 80077f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007802:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3714      	adds	r7, #20
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr
	...

08007814 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	785b      	ldrb	r3, [r3, #1]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d161      	bne.n	80078f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4413      	add	r3, r2
 8007838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007842:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007846:	d11f      	bne.n	8007888 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	015a      	lsls	r2, r3, #5
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	4413      	add	r3, r2
 8007850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	0151      	lsls	r1, r2, #5
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	440a      	add	r2, r1
 800785e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007862:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007866:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	015a      	lsls	r2, r3, #5
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	4413      	add	r3, r2
 8007870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68ba      	ldr	r2, [r7, #8]
 8007878:	0151      	lsls	r1, r2, #5
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	440a      	add	r2, r1
 800787e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007882:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007886:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800788e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	f003 030f 	and.w	r3, r3, #15
 8007898:	2101      	movs	r1, #1
 800789a:	fa01 f303 	lsl.w	r3, r1, r3
 800789e:	b29b      	uxth	r3, r3
 80078a0:	43db      	mvns	r3, r3
 80078a2:	68f9      	ldr	r1, [r7, #12]
 80078a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078a8:	4013      	ands	r3, r2
 80078aa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078b2:	69da      	ldr	r2, [r3, #28]
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	f003 030f 	and.w	r3, r3, #15
 80078bc:	2101      	movs	r1, #1
 80078be:	fa01 f303 	lsl.w	r3, r1, r3
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	43db      	mvns	r3, r3
 80078c6:	68f9      	ldr	r1, [r7, #12]
 80078c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078cc:	4013      	ands	r3, r2
 80078ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	0159      	lsls	r1, r3, #5
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	440b      	add	r3, r1
 80078e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078ea:	4619      	mov	r1, r3
 80078ec:	4b35      	ldr	r3, [pc, #212]	@ (80079c4 <USB_DeactivateEndpoint+0x1b0>)
 80078ee:	4013      	ands	r3, r2
 80078f0:	600b      	str	r3, [r1, #0]
 80078f2:	e060      	b.n	80079b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007906:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800790a:	d11f      	bne.n	800794c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	015a      	lsls	r2, r3, #5
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	4413      	add	r3, r2
 8007914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	0151      	lsls	r1, r2, #5
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	440a      	add	r2, r1
 8007922:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007926:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800792a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	015a      	lsls	r2, r3, #5
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	4413      	add	r3, r2
 8007934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	0151      	lsls	r1, r2, #5
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	440a      	add	r2, r1
 8007942:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007946:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800794a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007952:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	f003 030f 	and.w	r3, r3, #15
 800795c:	2101      	movs	r1, #1
 800795e:	fa01 f303 	lsl.w	r3, r1, r3
 8007962:	041b      	lsls	r3, r3, #16
 8007964:	43db      	mvns	r3, r3
 8007966:	68f9      	ldr	r1, [r7, #12]
 8007968:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800796c:	4013      	ands	r3, r2
 800796e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007976:	69da      	ldr	r2, [r3, #28]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	f003 030f 	and.w	r3, r3, #15
 8007980:	2101      	movs	r1, #1
 8007982:	fa01 f303 	lsl.w	r3, r1, r3
 8007986:	041b      	lsls	r3, r3, #16
 8007988:	43db      	mvns	r3, r3
 800798a:	68f9      	ldr	r1, [r7, #12]
 800798c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007990:	4013      	ands	r3, r2
 8007992:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	015a      	lsls	r2, r3, #5
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	4413      	add	r3, r2
 800799c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	0159      	lsls	r1, r3, #5
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	440b      	add	r3, r1
 80079aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079ae:	4619      	mov	r1, r3
 80079b0:	4b05      	ldr	r3, [pc, #20]	@ (80079c8 <USB_DeactivateEndpoint+0x1b4>)
 80079b2:	4013      	ands	r3, r2
 80079b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr
 80079c4:	ec337800 	.word	0xec337800
 80079c8:	eff37800 	.word	0xeff37800

080079cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b08a      	sub	sp, #40	@ 0x28
 80079d0:	af02      	add	r7, sp, #8
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	4613      	mov	r3, r2
 80079d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	785b      	ldrb	r3, [r3, #1]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	f040 817a 	bne.w	8007ce2 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d132      	bne.n	8007a5c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	69ba      	ldr	r2, [r7, #24]
 8007a06:	0151      	lsls	r1, r2, #5
 8007a08:	69fa      	ldr	r2, [r7, #28]
 8007a0a:	440a      	add	r2, r1
 8007a0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a10:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007a14:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007a18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	69ba      	ldr	r2, [r7, #24]
 8007a2a:	0151      	lsls	r1, r2, #5
 8007a2c:	69fa      	ldr	r2, [r7, #28]
 8007a2e:	440a      	add	r2, r1
 8007a30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	015a      	lsls	r2, r3, #5
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	69ba      	ldr	r2, [r7, #24]
 8007a4a:	0151      	lsls	r1, r2, #5
 8007a4c:	69fa      	ldr	r2, [r7, #28]
 8007a4e:	440a      	add	r2, r1
 8007a50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a54:	0cdb      	lsrs	r3, r3, #19
 8007a56:	04db      	lsls	r3, r3, #19
 8007a58:	6113      	str	r3, [r2, #16]
 8007a5a:	e092      	b.n	8007b82 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	015a      	lsls	r2, r3, #5
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	4413      	add	r3, r2
 8007a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	69ba      	ldr	r2, [r7, #24]
 8007a6c:	0151      	lsls	r1, r2, #5
 8007a6e:	69fa      	ldr	r2, [r7, #28]
 8007a70:	440a      	add	r2, r1
 8007a72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a76:	0cdb      	lsrs	r3, r3, #19
 8007a78:	04db      	lsls	r3, r3, #19
 8007a7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	015a      	lsls	r2, r3, #5
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	69ba      	ldr	r2, [r7, #24]
 8007a8c:	0151      	lsls	r1, r2, #5
 8007a8e:	69fa      	ldr	r2, [r7, #28]
 8007a90:	440a      	add	r2, r1
 8007a92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a96:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007a9a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007a9e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d11a      	bne.n	8007adc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	691a      	ldr	r2, [r3, #16]
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d903      	bls.n	8007aba <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	689a      	ldr	r2, [r3, #8]
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	015a      	lsls	r2, r3, #5
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	69ba      	ldr	r2, [r7, #24]
 8007aca:	0151      	lsls	r1, r2, #5
 8007acc:	69fa      	ldr	r2, [r7, #28]
 8007ace:	440a      	add	r2, r1
 8007ad0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ad4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ad8:	6113      	str	r3, [r2, #16]
 8007ada:	e01b      	b.n	8007b14 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	015a      	lsls	r2, r3, #5
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ae8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	6919      	ldr	r1, [r3, #16]
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	440b      	add	r3, r1
 8007af4:	1e59      	subs	r1, r3, #1
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	fbb1 f3f3 	udiv	r3, r1, r3
 8007afe:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007b00:	4ba2      	ldr	r3, [pc, #648]	@ (8007d8c <USB_EPStartXfer+0x3c0>)
 8007b02:	400b      	ands	r3, r1
 8007b04:	69b9      	ldr	r1, [r7, #24]
 8007b06:	0148      	lsls	r0, r1, #5
 8007b08:	69f9      	ldr	r1, [r7, #28]
 8007b0a:	4401      	add	r1, r0
 8007b0c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007b10:	4313      	orrs	r3, r2
 8007b12:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	015a      	lsls	r2, r3, #5
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b20:	691a      	ldr	r2, [r3, #16]
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b2a:	69b9      	ldr	r1, [r7, #24]
 8007b2c:	0148      	lsls	r0, r1, #5
 8007b2e:	69f9      	ldr	r1, [r7, #28]
 8007b30:	4401      	add	r1, r0
 8007b32:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007b36:	4313      	orrs	r3, r2
 8007b38:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	791b      	ldrb	r3, [r3, #4]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d11f      	bne.n	8007b82 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	015a      	lsls	r2, r3, #5
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	4413      	add	r3, r2
 8007b4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	69ba      	ldr	r2, [r7, #24]
 8007b52:	0151      	lsls	r1, r2, #5
 8007b54:	69fa      	ldr	r2, [r7, #28]
 8007b56:	440a      	add	r2, r1
 8007b58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b5c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007b60:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	015a      	lsls	r2, r3, #5
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	69ba      	ldr	r2, [r7, #24]
 8007b72:	0151      	lsls	r1, r2, #5
 8007b74:	69fa      	ldr	r2, [r7, #28]
 8007b76:	440a      	add	r2, r1
 8007b78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b7c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007b80:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007b82:	79fb      	ldrb	r3, [r7, #7]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d14b      	bne.n	8007c20 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	69db      	ldr	r3, [r3, #28]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d009      	beq.n	8007ba4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	015a      	lsls	r2, r3, #5
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	4413      	add	r3, r2
 8007b98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	69db      	ldr	r3, [r3, #28]
 8007ba2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	791b      	ldrb	r3, [r3, #4]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d128      	bne.n	8007bfe <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d110      	bne.n	8007bde <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	69ba      	ldr	r2, [r7, #24]
 8007bcc:	0151      	lsls	r1, r2, #5
 8007bce:	69fa      	ldr	r2, [r7, #28]
 8007bd0:	440a      	add	r2, r1
 8007bd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bd6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007bda:	6013      	str	r3, [r2, #0]
 8007bdc:	e00f      	b.n	8007bfe <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	015a      	lsls	r2, r3, #5
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	4413      	add	r3, r2
 8007be6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	69ba      	ldr	r2, [r7, #24]
 8007bee:	0151      	lsls	r1, r2, #5
 8007bf0:	69fa      	ldr	r2, [r7, #28]
 8007bf2:	440a      	add	r2, r1
 8007bf4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bfc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	015a      	lsls	r2, r3, #5
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	4413      	add	r3, r2
 8007c06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	69ba      	ldr	r2, [r7, #24]
 8007c0e:	0151      	lsls	r1, r2, #5
 8007c10:	69fa      	ldr	r2, [r7, #28]
 8007c12:	440a      	add	r2, r1
 8007c14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c18:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007c1c:	6013      	str	r3, [r2, #0]
 8007c1e:	e165      	b.n	8007eec <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	69ba      	ldr	r2, [r7, #24]
 8007c30:	0151      	lsls	r1, r2, #5
 8007c32:	69fa      	ldr	r2, [r7, #28]
 8007c34:	440a      	add	r2, r1
 8007c36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c3a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007c3e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	791b      	ldrb	r3, [r3, #4]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d015      	beq.n	8007c74 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 814d 	beq.w	8007eec <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	f003 030f 	and.w	r3, r3, #15
 8007c62:	2101      	movs	r1, #1
 8007c64:	fa01 f303 	lsl.w	r3, r1, r3
 8007c68:	69f9      	ldr	r1, [r7, #28]
 8007c6a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	634b      	str	r3, [r1, #52]	@ 0x34
 8007c72:	e13b      	b.n	8007eec <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d110      	bne.n	8007ca6 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	015a      	lsls	r2, r3, #5
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	69ba      	ldr	r2, [r7, #24]
 8007c94:	0151      	lsls	r1, r2, #5
 8007c96:	69fa      	ldr	r2, [r7, #28]
 8007c98:	440a      	add	r2, r1
 8007c9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c9e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007ca2:	6013      	str	r3, [r2, #0]
 8007ca4:	e00f      	b.n	8007cc6 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	69ba      	ldr	r2, [r7, #24]
 8007cb6:	0151      	lsls	r1, r2, #5
 8007cb8:	69fa      	ldr	r2, [r7, #28]
 8007cba:	440a      	add	r2, r1
 8007cbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cc4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	68d9      	ldr	r1, [r3, #12]
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	781a      	ldrb	r2, [r3, #0]
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	b298      	uxth	r0, r3
 8007cd4:	79fb      	ldrb	r3, [r7, #7]
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	4603      	mov	r3, r0
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f000 f9b8 	bl	8008050 <USB_WritePacket>
 8007ce0:	e104      	b.n	8007eec <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	015a      	lsls	r2, r3, #5
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	4413      	add	r3, r2
 8007cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	0151      	lsls	r1, r2, #5
 8007cf4:	69fa      	ldr	r2, [r7, #28]
 8007cf6:	440a      	add	r2, r1
 8007cf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cfc:	0cdb      	lsrs	r3, r3, #19
 8007cfe:	04db      	lsls	r3, r3, #19
 8007d00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	015a      	lsls	r2, r3, #5
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	4413      	add	r3, r2
 8007d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	69ba      	ldr	r2, [r7, #24]
 8007d12:	0151      	lsls	r1, r2, #5
 8007d14:	69fa      	ldr	r2, [r7, #28]
 8007d16:	440a      	add	r2, r1
 8007d18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d1c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007d20:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007d24:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d131      	bne.n	8007d90 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d003      	beq.n	8007d3c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	689a      	ldr	r2, [r3, #8]
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	689a      	ldr	r2, [r3, #8]
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d50:	691a      	ldr	r2, [r3, #16]
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d5a:	69b9      	ldr	r1, [r7, #24]
 8007d5c:	0148      	lsls	r0, r1, #5
 8007d5e:	69f9      	ldr	r1, [r7, #28]
 8007d60:	4401      	add	r1, r0
 8007d62:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007d66:	4313      	orrs	r3, r2
 8007d68:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	015a      	lsls	r2, r3, #5
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	4413      	add	r3, r2
 8007d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	69ba      	ldr	r2, [r7, #24]
 8007d7a:	0151      	lsls	r1, r2, #5
 8007d7c:	69fa      	ldr	r2, [r7, #28]
 8007d7e:	440a      	add	r2, r1
 8007d80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d88:	6113      	str	r3, [r2, #16]
 8007d8a:	e061      	b.n	8007e50 <USB_EPStartXfer+0x484>
 8007d8c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d123      	bne.n	8007de0 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	015a      	lsls	r2, r3, #5
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	4413      	add	r3, r2
 8007da0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007da4:	691a      	ldr	r2, [r3, #16]
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dae:	69b9      	ldr	r1, [r7, #24]
 8007db0:	0148      	lsls	r0, r1, #5
 8007db2:	69f9      	ldr	r1, [r7, #28]
 8007db4:	4401      	add	r1, r0
 8007db6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	015a      	lsls	r2, r3, #5
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	69ba      	ldr	r2, [r7, #24]
 8007dce:	0151      	lsls	r1, r2, #5
 8007dd0:	69fa      	ldr	r2, [r7, #28]
 8007dd2:	440a      	add	r2, r1
 8007dd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dd8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ddc:	6113      	str	r3, [r2, #16]
 8007dde:	e037      	b.n	8007e50 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	691a      	ldr	r2, [r3, #16]
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	4413      	add	r3, r2
 8007dea:	1e5a      	subs	r2, r3, #1
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	8afa      	ldrh	r2, [r7, #22]
 8007dfc:	fb03 f202 	mul.w	r2, r3, r2
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	015a      	lsls	r2, r3, #5
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e10:	691a      	ldr	r2, [r3, #16]
 8007e12:	8afb      	ldrh	r3, [r7, #22]
 8007e14:	04d9      	lsls	r1, r3, #19
 8007e16:	4b38      	ldr	r3, [pc, #224]	@ (8007ef8 <USB_EPStartXfer+0x52c>)
 8007e18:	400b      	ands	r3, r1
 8007e1a:	69b9      	ldr	r1, [r7, #24]
 8007e1c:	0148      	lsls	r0, r1, #5
 8007e1e:	69f9      	ldr	r1, [r7, #28]
 8007e20:	4401      	add	r1, r0
 8007e22:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007e26:	4313      	orrs	r3, r2
 8007e28:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	015a      	lsls	r2, r3, #5
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	4413      	add	r3, r2
 8007e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e36:	691a      	ldr	r2, [r3, #16]
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	6a1b      	ldr	r3, [r3, #32]
 8007e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e40:	69b9      	ldr	r1, [r7, #24]
 8007e42:	0148      	lsls	r0, r1, #5
 8007e44:	69f9      	ldr	r1, [r7, #28]
 8007e46:	4401      	add	r1, r0
 8007e48:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007e50:	79fb      	ldrb	r3, [r7, #7]
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d10d      	bne.n	8007e72 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d009      	beq.n	8007e72 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	68d9      	ldr	r1, [r3, #12]
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	015a      	lsls	r2, r3, #5
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	4413      	add	r3, r2
 8007e6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e6e:	460a      	mov	r2, r1
 8007e70:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	791b      	ldrb	r3, [r3, #4]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d128      	bne.n	8007ecc <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d110      	bne.n	8007eac <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	015a      	lsls	r2, r3, #5
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	4413      	add	r3, r2
 8007e92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	0151      	lsls	r1, r2, #5
 8007e9c:	69fa      	ldr	r2, [r7, #28]
 8007e9e:	440a      	add	r2, r1
 8007ea0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ea4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007ea8:	6013      	str	r3, [r2, #0]
 8007eaa:	e00f      	b.n	8007ecc <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	015a      	lsls	r2, r3, #5
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	69ba      	ldr	r2, [r7, #24]
 8007ebc:	0151      	lsls	r1, r2, #5
 8007ebe:	69fa      	ldr	r2, [r7, #28]
 8007ec0:	440a      	add	r2, r1
 8007ec2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ec6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007eca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	015a      	lsls	r2, r3, #5
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	69ba      	ldr	r2, [r7, #24]
 8007edc:	0151      	lsls	r1, r2, #5
 8007ede:	69fa      	ldr	r2, [r7, #28]
 8007ee0:	440a      	add	r2, r1
 8007ee2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ee6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007eea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3720      	adds	r7, #32
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	1ff80000 	.word	0x1ff80000

08007efc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b087      	sub	sp, #28
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f06:	2300      	movs	r3, #0
 8007f08:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	785b      	ldrb	r3, [r3, #1]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d14a      	bne.n	8007fb0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	015a      	lsls	r2, r3, #5
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	4413      	add	r3, r2
 8007f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f32:	f040 8086 	bne.w	8008042 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	015a      	lsls	r2, r3, #5
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	4413      	add	r3, r2
 8007f40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	683a      	ldr	r2, [r7, #0]
 8007f48:	7812      	ldrb	r2, [r2, #0]
 8007f4a:	0151      	lsls	r1, r2, #5
 8007f4c:	693a      	ldr	r2, [r7, #16]
 8007f4e:	440a      	add	r2, r1
 8007f50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f54:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007f58:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	015a      	lsls	r2, r3, #5
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	7812      	ldrb	r2, [r2, #0]
 8007f6e:	0151      	lsls	r1, r2, #5
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	440a      	add	r2, r1
 8007f74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	3301      	adds	r3, #1
 8007f82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d902      	bls.n	8007f94 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	75fb      	strb	r3, [r7, #23]
          break;
 8007f92:	e056      	b.n	8008042 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	015a      	lsls	r2, r3, #5
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007fa8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007fac:	d0e7      	beq.n	8007f7e <USB_EPStopXfer+0x82>
 8007fae:	e048      	b.n	8008042 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	015a      	lsls	r2, r3, #5
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	4413      	add	r3, r2
 8007fba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007fc8:	d13b      	bne.n	8008042 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	015a      	lsls	r2, r3, #5
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	7812      	ldrb	r2, [r2, #0]
 8007fde:	0151      	lsls	r1, r2, #5
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	440a      	add	r2, r1
 8007fe4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fe8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007fec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	015a      	lsls	r2, r3, #5
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	7812      	ldrb	r2, [r2, #0]
 8008002:	0151      	lsls	r1, r2, #5
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	440a      	add	r2, r1
 8008008:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800800c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008010:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	3301      	adds	r3, #1
 8008016:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800801e:	4293      	cmp	r3, r2
 8008020:	d902      	bls.n	8008028 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	75fb      	strb	r3, [r7, #23]
          break;
 8008026:	e00c      	b.n	8008042 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	015a      	lsls	r2, r3, #5
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	4413      	add	r3, r2
 8008032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800803c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008040:	d0e7      	beq.n	8008012 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008042:	7dfb      	ldrb	r3, [r7, #23]
}
 8008044:	4618      	mov	r0, r3
 8008046:	371c      	adds	r7, #28
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008050:	b480      	push	{r7}
 8008052:	b089      	sub	sp, #36	@ 0x24
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	4611      	mov	r1, r2
 800805c:	461a      	mov	r2, r3
 800805e:	460b      	mov	r3, r1
 8008060:	71fb      	strb	r3, [r7, #7]
 8008062:	4613      	mov	r3, r2
 8008064:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800806e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008072:	2b00      	cmp	r3, #0
 8008074:	d123      	bne.n	80080be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008076:	88bb      	ldrh	r3, [r7, #4]
 8008078:	3303      	adds	r3, #3
 800807a:	089b      	lsrs	r3, r3, #2
 800807c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800807e:	2300      	movs	r3, #0
 8008080:	61bb      	str	r3, [r7, #24]
 8008082:	e018      	b.n	80080b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008084:	79fb      	ldrb	r3, [r7, #7]
 8008086:	031a      	lsls	r2, r3, #12
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	4413      	add	r3, r2
 800808c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008090:	461a      	mov	r2, r3
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	3301      	adds	r3, #1
 800809c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	3301      	adds	r3, #1
 80080a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	3301      	adds	r3, #1
 80080a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	3301      	adds	r3, #1
 80080ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	3301      	adds	r3, #1
 80080b4:	61bb      	str	r3, [r7, #24]
 80080b6:	69ba      	ldr	r2, [r7, #24]
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d3e2      	bcc.n	8008084 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3724      	adds	r7, #36	@ 0x24
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b08b      	sub	sp, #44	@ 0x2c
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	4613      	mov	r3, r2
 80080d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80080e2:	88fb      	ldrh	r3, [r7, #6]
 80080e4:	089b      	lsrs	r3, r3, #2
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80080ea:	88fb      	ldrh	r3, [r7, #6]
 80080ec:	f003 0303 	and.w	r3, r3, #3
 80080f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80080f2:	2300      	movs	r3, #0
 80080f4:	623b      	str	r3, [r7, #32]
 80080f6:	e014      	b.n	8008122 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008102:	601a      	str	r2, [r3, #0]
    pDest++;
 8008104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008106:	3301      	adds	r3, #1
 8008108:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800810a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810c:	3301      	adds	r3, #1
 800810e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008112:	3301      	adds	r3, #1
 8008114:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008118:	3301      	adds	r3, #1
 800811a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800811c:	6a3b      	ldr	r3, [r7, #32]
 800811e:	3301      	adds	r3, #1
 8008120:	623b      	str	r3, [r7, #32]
 8008122:	6a3a      	ldr	r2, [r7, #32]
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	429a      	cmp	r2, r3
 8008128:	d3e6      	bcc.n	80080f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800812a:	8bfb      	ldrh	r3, [r7, #30]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d01e      	beq.n	800816e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008130:	2300      	movs	r3, #0
 8008132:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800813a:	461a      	mov	r2, r3
 800813c:	f107 0310 	add.w	r3, r7, #16
 8008140:	6812      	ldr	r2, [r2, #0]
 8008142:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	6a3b      	ldr	r3, [r7, #32]
 8008148:	b2db      	uxtb	r3, r3
 800814a:	00db      	lsls	r3, r3, #3
 800814c:	fa22 f303 	lsr.w	r3, r2, r3
 8008150:	b2da      	uxtb	r2, r3
 8008152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008154:	701a      	strb	r2, [r3, #0]
      i++;
 8008156:	6a3b      	ldr	r3, [r7, #32]
 8008158:	3301      	adds	r3, #1
 800815a:	623b      	str	r3, [r7, #32]
      pDest++;
 800815c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815e:	3301      	adds	r3, #1
 8008160:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008162:	8bfb      	ldrh	r3, [r7, #30]
 8008164:	3b01      	subs	r3, #1
 8008166:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008168:	8bfb      	ldrh	r3, [r7, #30]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1ea      	bne.n	8008144 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800816e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008170:	4618      	mov	r0, r3
 8008172:	372c      	adds	r7, #44	@ 0x2c
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	785b      	ldrb	r3, [r3, #1]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d12c      	bne.n	80081f2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	db12      	blt.n	80081d0 <USB_EPSetStall+0x54>
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00f      	beq.n	80081d0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	015a      	lsls	r2, r3, #5
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	4413      	add	r3, r2
 80081b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	0151      	lsls	r1, r2, #5
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	440a      	add	r2, r1
 80081c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80081ce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	015a      	lsls	r2, r3, #5
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	4413      	add	r3, r2
 80081d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	0151      	lsls	r1, r2, #5
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	440a      	add	r2, r1
 80081e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80081ee:	6013      	str	r3, [r2, #0]
 80081f0:	e02b      	b.n	800824a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	015a      	lsls	r2, r3, #5
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	4413      	add	r3, r2
 80081fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	db12      	blt.n	800822a <USB_EPSetStall+0xae>
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00f      	beq.n	800822a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	015a      	lsls	r2, r3, #5
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	4413      	add	r3, r2
 8008212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	0151      	lsls	r1, r2, #5
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	440a      	add	r2, r1
 8008220:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008224:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008228:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	015a      	lsls	r2, r3, #5
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	4413      	add	r3, r2
 8008232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	0151      	lsls	r1, r2, #5
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	440a      	add	r2, r1
 8008240:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008244:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008248:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3714      	adds	r7, #20
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	785b      	ldrb	r3, [r3, #1]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d128      	bne.n	80082c6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	015a      	lsls	r2, r3, #5
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	4413      	add	r3, r2
 800827c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	0151      	lsls	r1, r2, #5
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	440a      	add	r2, r1
 800828a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800828e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008292:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	791b      	ldrb	r3, [r3, #4]
 8008298:	2b03      	cmp	r3, #3
 800829a:	d003      	beq.n	80082a4 <USB_EPClearStall+0x4c>
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	791b      	ldrb	r3, [r3, #4]
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d138      	bne.n	8008316 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68ba      	ldr	r2, [r7, #8]
 80082b4:	0151      	lsls	r1, r2, #5
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	440a      	add	r2, r1
 80082ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082c2:	6013      	str	r3, [r2, #0]
 80082c4:	e027      	b.n	8008316 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	015a      	lsls	r2, r3, #5
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	4413      	add	r3, r2
 80082ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	0151      	lsls	r1, r2, #5
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	440a      	add	r2, r1
 80082dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082e0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80082e4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	791b      	ldrb	r3, [r3, #4]
 80082ea:	2b03      	cmp	r3, #3
 80082ec:	d003      	beq.n	80082f6 <USB_EPClearStall+0x9e>
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	791b      	ldrb	r3, [r3, #4]
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d10f      	bne.n	8008316 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	015a      	lsls	r2, r3, #5
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	4413      	add	r3, r2
 80082fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	0151      	lsls	r1, r2, #5
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	440a      	add	r2, r1
 800830c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008314:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	460b      	mov	r3, r1
 800832e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008342:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008346:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	78fb      	ldrb	r3, [r7, #3]
 8008352:	011b      	lsls	r3, r3, #4
 8008354:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008358:	68f9      	ldr	r1, [r7, #12]
 800835a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800835e:	4313      	orrs	r3, r2
 8008360:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3714      	adds	r7, #20
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800838a:	f023 0303 	bic.w	r3, r3, #3
 800838e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800839e:	f023 0302 	bic.w	r3, r3, #2
 80083a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr

080083b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80083b2:	b480      	push	{r7}
 80083b4:	b085      	sub	sp, #20
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80083cc:	f023 0303 	bic.w	r3, r3, #3
 80083d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083e0:	f043 0302 	orr.w	r3, r3, #2
 80083e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	695b      	ldr	r3, [r3, #20]
 8008400:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	4013      	ands	r3, r2
 800840a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800840c:	68fb      	ldr	r3, [r7, #12]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800841a:	b480      	push	{r7}
 800841c:	b085      	sub	sp, #20
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008436:	69db      	ldr	r3, [r3, #28]
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	4013      	ands	r3, r2
 800843c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	0c1b      	lsrs	r3, r3, #16
}
 8008442:	4618      	mov	r0, r3
 8008444:	3714      	adds	r7, #20
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr

0800844e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800844e:	b480      	push	{r7}
 8008450:	b085      	sub	sp, #20
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800846a:	69db      	ldr	r3, [r3, #28]
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	4013      	ands	r3, r2
 8008470:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	b29b      	uxth	r3, r3
}
 8008476:	4618      	mov	r0, r3
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008482:	b480      	push	{r7}
 8008484:	b085      	sub	sp, #20
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	460b      	mov	r3, r1
 800848c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008492:	78fb      	ldrb	r3, [r7, #3]
 8008494:	015a      	lsls	r2, r3, #5
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	4413      	add	r3, r2
 800849a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	4013      	ands	r3, r2
 80084ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80084b0:	68bb      	ldr	r3, [r7, #8]
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3714      	adds	r7, #20
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr

080084be <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80084be:	b480      	push	{r7}
 80084c0:	b087      	sub	sp, #28
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
 80084c6:	460b      	mov	r3, r1
 80084c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084e0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80084e2:	78fb      	ldrb	r3, [r7, #3]
 80084e4:	f003 030f 	and.w	r3, r3, #15
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	fa22 f303 	lsr.w	r3, r2, r3
 80084ee:	01db      	lsls	r3, r3, #7
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80084f8:	78fb      	ldrb	r3, [r7, #3]
 80084fa:	015a      	lsls	r2, r3, #5
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	4413      	add	r3, r2
 8008500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	693a      	ldr	r2, [r7, #16]
 8008508:	4013      	ands	r3, r2
 800850a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800850c:	68bb      	ldr	r3, [r7, #8]
}
 800850e:	4618      	mov	r0, r3
 8008510:	371c      	adds	r7, #28
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800851a:	b480      	push	{r7}
 800851c:	b083      	sub	sp, #12
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	695b      	ldr	r3, [r3, #20]
 8008526:	f003 0301 	and.w	r3, r3, #1
}
 800852a:	4618      	mov	r0, r3
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr

08008536 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008536:	b480      	push	{r7}
 8008538:	b085      	sub	sp, #20
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008550:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008554:	f023 0307 	bic.w	r3, r3, #7
 8008558:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800856c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800857c:	b480      	push	{r7}
 800857e:	b087      	sub	sp, #28
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	460b      	mov	r3, r1
 8008586:	607a      	str	r2, [r7, #4]
 8008588:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	333c      	adds	r3, #60	@ 0x3c
 8008592:	3304      	adds	r3, #4
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	4a26      	ldr	r2, [pc, #152]	@ (8008634 <USB_EP0_OutStart+0xb8>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d90a      	bls.n	80085b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085b0:	d101      	bne.n	80085b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	e037      	b.n	8008626 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085bc:	461a      	mov	r2, r3
 80085be:	2300      	movs	r3, #0
 80085c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80085d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085e4:	f043 0318 	orr.w	r3, r3, #24
 80085e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085f8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80085fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80085fe:	7afb      	ldrb	r3, [r7, #11]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d10f      	bne.n	8008624 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800860a:	461a      	mov	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800861e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008622:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	371c      	adds	r7, #28
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	4f54300a 	.word	0x4f54300a

08008638 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008640:	2300      	movs	r3, #0
 8008642:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	3301      	adds	r3, #1
 8008648:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008650:	d901      	bls.n	8008656 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008652:	2303      	movs	r3, #3
 8008654:	e01b      	b.n	800868e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	2b00      	cmp	r3, #0
 800865c:	daf2      	bge.n	8008644 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800865e:	2300      	movs	r3, #0
 8008660:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	f043 0201 	orr.w	r2, r3, #1
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	3301      	adds	r3, #1
 8008672:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800867a:	d901      	bls.n	8008680 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800867c:	2303      	movs	r3, #3
 800867e:	e006      	b.n	800868e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	f003 0301 	and.w	r3, r3, #1
 8008688:	2b01      	cmp	r3, #1
 800868a:	d0f0      	beq.n	800866e <USB_CoreReset+0x36>

  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3714      	adds	r7, #20
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
	...

0800869c <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	460b      	mov	r3, r1
 80086a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80086a8:	2024      	movs	r0, #36	@ 0x24
 80086aa:	f002 fabf 	bl	800ac2c <USBD_static_malloc>
 80086ae:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d109      	bne.n	80086ca <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	32b0      	adds	r2, #176	@ 0xb0
 80086c0:	2100      	movs	r1, #0
 80086c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80086c6:	2302      	movs	r3, #2
 80086c8:	e08b      	b.n	80087e2 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	32b0      	adds	r2, #176	@ 0xb0
 80086d4:	68f9      	ldr	r1, [r7, #12]
 80086d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	32b0      	adds	r2, #176	@ 0xb0
 80086e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	7c1b      	ldrb	r3, [r3, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d11b      	bne.n	800872e <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80086f6:	4b3d      	ldr	r3, [pc, #244]	@ (80087ec <USBD_CUSTOM_HID_Init+0x150>)
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	f003 020f 	and.w	r2, r3, #15
 80086fe:	6879      	ldr	r1, [r7, #4]
 8008700:	4613      	mov	r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	4413      	add	r3, r2
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	440b      	add	r3, r1
 800870a:	3326      	adds	r3, #38	@ 0x26
 800870c:	2205      	movs	r2, #5
 800870e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008710:	4b37      	ldr	r3, [pc, #220]	@ (80087f0 <USBD_CUSTOM_HID_Init+0x154>)
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	f003 020f 	and.w	r2, r3, #15
 8008718:	6879      	ldr	r1, [r7, #4]
 800871a:	4613      	mov	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4413      	add	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	440b      	add	r3, r1
 8008724:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8008728:	2205      	movs	r2, #5
 800872a:	801a      	strh	r2, [r3, #0]
 800872c:	e01a      	b.n	8008764 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800872e:	4b2f      	ldr	r3, [pc, #188]	@ (80087ec <USBD_CUSTOM_HID_Init+0x150>)
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	f003 020f 	and.w	r2, r3, #15
 8008736:	6879      	ldr	r1, [r7, #4]
 8008738:	4613      	mov	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	440b      	add	r3, r1
 8008742:	3326      	adds	r3, #38	@ 0x26
 8008744:	2205      	movs	r2, #5
 8008746:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008748:	4b29      	ldr	r3, [pc, #164]	@ (80087f0 <USBD_CUSTOM_HID_Init+0x154>)
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	f003 020f 	and.w	r2, r3, #15
 8008750:	6879      	ldr	r1, [r7, #4]
 8008752:	4613      	mov	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	440b      	add	r3, r1
 800875c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8008760:	2205      	movs	r2, #5
 8008762:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8008764:	4b21      	ldr	r3, [pc, #132]	@ (80087ec <USBD_CUSTOM_HID_Init+0x150>)
 8008766:	7819      	ldrb	r1, [r3, #0]
 8008768:	2302      	movs	r3, #2
 800876a:	2203      	movs	r2, #3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f002 f94c 	bl	800aa0a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8008772:	4b1e      	ldr	r3, [pc, #120]	@ (80087ec <USBD_CUSTOM_HID_Init+0x150>)
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	f003 020f 	and.w	r2, r3, #15
 800877a:	6879      	ldr	r1, [r7, #4]
 800877c:	4613      	mov	r3, r2
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	4413      	add	r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	440b      	add	r3, r1
 8008786:	3324      	adds	r3, #36	@ 0x24
 8008788:	2201      	movs	r2, #1
 800878a:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 800878c:	4b18      	ldr	r3, [pc, #96]	@ (80087f0 <USBD_CUSTOM_HID_Init+0x154>)
 800878e:	7819      	ldrb	r1, [r3, #0]
 8008790:	2302      	movs	r3, #2
 8008792:	2203      	movs	r2, #3
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f002 f938 	bl	800aa0a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800879a:	4b15      	ldr	r3, [pc, #84]	@ (80087f0 <USBD_CUSTOM_HID_Init+0x154>)
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	f003 020f 	and.w	r2, r3, #15
 80087a2:	6879      	ldr	r1, [r7, #4]
 80087a4:	4613      	mov	r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4413      	add	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	440b      	add	r3, r1
 80087ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80087b2:	2201      	movs	r2, #1
 80087b4:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 2020 	strb.w	r2, [r3, #32]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	33b0      	adds	r3, #176	@ 0xb0
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	4413      	add	r3, r2
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80087d2:	4b07      	ldr	r3, [pc, #28]	@ (80087f0 <USBD_CUSTOM_HID_Init+0x154>)
 80087d4:	7819      	ldrb	r1, [r3, #0]
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	230d      	movs	r3, #13
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f002 fa04 	bl	800abe8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	20000086 	.word	0x20000086
 80087f0:	20000087 	.word	0x20000087

080087f4 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	460b      	mov	r3, r1
 80087fe:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8008800:	4b37      	ldr	r3, [pc, #220]	@ (80088e0 <USBD_CUSTOM_HID_DeInit+0xec>)
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	4619      	mov	r1, r3
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f002 f925 	bl	800aa56 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 800880c:	4b34      	ldr	r3, [pc, #208]	@ (80088e0 <USBD_CUSTOM_HID_DeInit+0xec>)
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	f003 020f 	and.w	r2, r3, #15
 8008814:	6879      	ldr	r1, [r7, #4]
 8008816:	4613      	mov	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	4413      	add	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	440b      	add	r3, r1
 8008820:	3324      	adds	r3, #36	@ 0x24
 8008822:	2200      	movs	r2, #0
 8008824:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8008826:	4b2e      	ldr	r3, [pc, #184]	@ (80088e0 <USBD_CUSTOM_HID_DeInit+0xec>)
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	f003 020f 	and.w	r2, r3, #15
 800882e:	6879      	ldr	r1, [r7, #4]
 8008830:	4613      	mov	r3, r2
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	4413      	add	r3, r2
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	440b      	add	r3, r1
 800883a:	3326      	adds	r3, #38	@ 0x26
 800883c:	2200      	movs	r2, #0
 800883e:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8008840:	4b28      	ldr	r3, [pc, #160]	@ (80088e4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	4619      	mov	r1, r3
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f002 f905 	bl	800aa56 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 800884c:	4b25      	ldr	r3, [pc, #148]	@ (80088e4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	f003 020f 	and.w	r2, r3, #15
 8008854:	6879      	ldr	r1, [r7, #4]
 8008856:	4613      	mov	r3, r2
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	4413      	add	r3, r2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	440b      	add	r3, r1
 8008860:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008864:	2200      	movs	r2, #0
 8008866:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8008868:	4b1e      	ldr	r3, [pc, #120]	@ (80088e4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	f003 020f 	and.w	r2, r3, #15
 8008870:	6879      	ldr	r1, [r7, #4]
 8008872:	4613      	mov	r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	4413      	add	r3, r2
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	440b      	add	r3, r1
 800887c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8008880:	2200      	movs	r2, #0
 8008882:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	32b0      	adds	r2, #176	@ 0xb0
 800888e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d01f      	beq.n	80088d6 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	33b0      	adds	r3, #176	@ 0xb0
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	32b0      	adds	r2, #176	@ 0xb0
 80088b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088b8:	4618      	mov	r0, r3
 80088ba:	f002 f9c5 	bl	800ac48 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	32b0      	adds	r2, #176	@ 0xb0
 80088c8:	2100      	movs	r1, #0
 80088ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	20000086 	.word	0x20000086
 80088e4:	20000087 	.word	0x20000087

080088e8 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b088      	sub	sp, #32
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	32b0      	adds	r2, #176	@ 0xb0
 80088fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008900:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008902:	2300      	movs	r3, #0
 8008904:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8008906:	2300      	movs	r3, #0
 8008908:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800890a:	2300      	movs	r3, #0
 800890c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d101      	bne.n	800891c <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8008918:	2303      	movs	r3, #3
 800891a:	e0f8      	b.n	8008b0e <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008924:	2b00      	cmp	r3, #0
 8008926:	d056      	beq.n	80089d6 <USBD_CUSTOM_HID_Setup+0xee>
 8008928:	2b20      	cmp	r3, #32
 800892a:	f040 80e8 	bne.w	8008afe <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	785b      	ldrb	r3, [r3, #1]
 8008932:	3b02      	subs	r3, #2
 8008934:	2b09      	cmp	r3, #9
 8008936:	d846      	bhi.n	80089c6 <USBD_CUSTOM_HID_Setup+0xde>
 8008938:	a201      	add	r2, pc, #4	@ (adr r2, 8008940 <USBD_CUSTOM_HID_Setup+0x58>)
 800893a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800893e:	bf00      	nop
 8008940:	08008999 	.word	0x08008999
 8008944:	08008977 	.word	0x08008977
 8008948:	080089c7 	.word	0x080089c7
 800894c:	080089c7 	.word	0x080089c7
 8008950:	080089c7 	.word	0x080089c7
 8008954:	080089c7 	.word	0x080089c7
 8008958:	080089c7 	.word	0x080089c7
 800895c:	080089a9 	.word	0x080089a9
 8008960:	08008987 	.word	0x08008987
 8008964:	08008969 	.word	0x08008969
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	885b      	ldrh	r3, [r3, #2]
 800896c:	b2db      	uxtb	r3, r3
 800896e:	461a      	mov	r2, r3
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	611a      	str	r2, [r3, #16]
          break;
 8008974:	e02e      	b.n	80089d4 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	3310      	adds	r3, #16
 800897a:	2201      	movs	r2, #1
 800897c:	4619      	mov	r1, r3
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f001 fca6 	bl	800a2d0 <USBD_CtlSendData>
          break;
 8008984:	e026      	b.n	80089d4 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	885b      	ldrh	r3, [r3, #2]
 800898a:	0a1b      	lsrs	r3, r3, #8
 800898c:	b29b      	uxth	r3, r3
 800898e:	b2db      	uxtb	r3, r3
 8008990:	461a      	mov	r2, r3
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	615a      	str	r2, [r3, #20]
          break;
 8008996:	e01d      	b.n	80089d4 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	3314      	adds	r3, #20
 800899c:	2201      	movs	r2, #1
 800899e:	4619      	mov	r1, r3
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f001 fc95 	bl	800a2d0 <USBD_CtlSendData>
          break;
 80089a6:	e015      	b.n	80089d4 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	2201      	movs	r2, #1
 80089ac:	61da      	str	r2, [r3, #28]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80089ae:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	88db      	ldrh	r3, [r3, #6]
 80089b4:	2b0d      	cmp	r3, #13
 80089b6:	bf28      	it	cs
 80089b8:	230d      	movcs	r3, #13
 80089ba:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80089bc:	461a      	mov	r2, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f001 fcb2 	bl	800a328 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 80089c4:	e006      	b.n	80089d4 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 80089c6:	6839      	ldr	r1, [r7, #0]
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f001 fc10 	bl	800a1ee <USBD_CtlError>
          ret = USBD_FAIL;
 80089ce:	2303      	movs	r3, #3
 80089d0:	75fb      	strb	r3, [r7, #23]
          break;
 80089d2:	bf00      	nop
      }
      break;
 80089d4:	e09a      	b.n	8008b0c <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	785b      	ldrb	r3, [r3, #1]
 80089da:	2b0b      	cmp	r3, #11
 80089dc:	f200 8086 	bhi.w	8008aec <USBD_CUSTOM_HID_Setup+0x204>
 80089e0:	a201      	add	r2, pc, #4	@ (adr r2, 80089e8 <USBD_CUSTOM_HID_Setup+0x100>)
 80089e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e6:	bf00      	nop
 80089e8:	08008a19 	.word	0x08008a19
 80089ec:	08008afb 	.word	0x08008afb
 80089f0:	08008aed 	.word	0x08008aed
 80089f4:	08008aed 	.word	0x08008aed
 80089f8:	08008aed 	.word	0x08008aed
 80089fc:	08008aed 	.word	0x08008aed
 8008a00:	08008a43 	.word	0x08008a43
 8008a04:	08008aed 	.word	0x08008aed
 8008a08:	08008aed 	.word	0x08008aed
 8008a0c:	08008aed 	.word	0x08008aed
 8008a10:	08008a9b 	.word	0x08008a9b
 8008a14:	08008ac5 	.word	0x08008ac5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	2b03      	cmp	r3, #3
 8008a22:	d107      	bne.n	8008a34 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008a24:	f107 030e 	add.w	r3, r7, #14
 8008a28:	2202      	movs	r2, #2
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f001 fc4f 	bl	800a2d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a32:	e063      	b.n	8008afc <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008a34:	6839      	ldr	r1, [r7, #0]
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f001 fbd9 	bl	800a1ee <USBD_CtlError>
            ret = USBD_FAIL;
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	75fb      	strb	r3, [r7, #23]
          break;
 8008a40:	e05c      	b.n	8008afc <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	885b      	ldrh	r3, [r3, #2]
 8008a46:	0a1b      	lsrs	r3, r3, #8
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	2b22      	cmp	r3, #34	@ 0x22
 8008a4c:	d110      	bne.n	8008a70 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	88db      	ldrh	r3, [r3, #6]
 8008a52:	2b23      	cmp	r3, #35	@ 0x23
 8008a54:	bf28      	it	cs
 8008a56:	2323      	movcs	r3, #35	@ 0x23
 8008a58:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	33b0      	adds	r3, #176	@ 0xb0
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4413      	add	r3, r2
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	61bb      	str	r3, [r7, #24]
 8008a6e:	e00d      	b.n	8008a8c <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	885b      	ldrh	r3, [r3, #2]
 8008a74:	0a1b      	lsrs	r3, r3, #8
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	2b21      	cmp	r3, #33	@ 0x21
 8008a7a:	d107      	bne.n	8008a8c <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8008a7c:	4b26      	ldr	r3, [pc, #152]	@ (8008b18 <USBD_CUSTOM_HID_Setup+0x230>)
 8008a7e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	88db      	ldrh	r3, [r3, #6]
 8008a84:	2b09      	cmp	r3, #9
 8008a86:	bf28      	it	cs
 8008a88:	2309      	movcs	r3, #9
 8008a8a:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a8c:	8bfb      	ldrh	r3, [r7, #30]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	69b9      	ldr	r1, [r7, #24]
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f001 fc1c 	bl	800a2d0 <USBD_CtlSendData>
          break;
 8008a98:	e030      	b.n	8008afc <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	2b03      	cmp	r3, #3
 8008aa4:	d107      	bne.n	8008ab6 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	3318      	adds	r3, #24
 8008aaa:	2201      	movs	r2, #1
 8008aac:	4619      	mov	r1, r3
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f001 fc0e 	bl	800a2d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ab4:	e022      	b.n	8008afc <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f001 fb98 	bl	800a1ee <USBD_CtlError>
            ret = USBD_FAIL;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	75fb      	strb	r3, [r7, #23]
          break;
 8008ac2:	e01b      	b.n	8008afc <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	2b03      	cmp	r3, #3
 8008ace:	d106      	bne.n	8008ade <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	885b      	ldrh	r3, [r3, #2]
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	619a      	str	r2, [r3, #24]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008adc:	e00e      	b.n	8008afc <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008ade:	6839      	ldr	r1, [r7, #0]
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f001 fb84 	bl	800a1ee <USBD_CtlError>
            ret = USBD_FAIL;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	75fb      	strb	r3, [r7, #23]
          break;
 8008aea:	e007      	b.n	8008afc <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f001 fb7d 	bl	800a1ee <USBD_CtlError>
          ret = USBD_FAIL;
 8008af4:	2303      	movs	r3, #3
 8008af6:	75fb      	strb	r3, [r7, #23]
          break;
 8008af8:	e000      	b.n	8008afc <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8008afa:	bf00      	nop
      }
      break;
 8008afc:	e006      	b.n	8008b0c <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8008afe:	6839      	ldr	r1, [r7, #0]
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f001 fb74 	bl	800a1ee <USBD_CtlError>
      ret = USBD_FAIL;
 8008b06:	2303      	movs	r3, #3
 8008b08:	75fb      	strb	r3, [r7, #23]
      break;
 8008b0a:	bf00      	nop
  }
  return (uint8_t)ret;
 8008b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3720      	adds	r7, #32
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	20000070 	.word	0x20000070

08008b1c <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b086      	sub	sp, #24
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	4613      	mov	r3, r2
 8008b28:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	32b0      	adds	r2, #176	@ 0xb0
 8008b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b38:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d101      	bne.n	8008b44 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008b40:	2303      	movs	r3, #3
 8008b42:	e019      	b.n	8008b78 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	2b03      	cmp	r3, #3
 8008b4e:	d112      	bne.n	8008b76 <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10b      	bne.n	8008b72 <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	f883 2020 	strb.w	r2, [r3, #32]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8008b62:	4b07      	ldr	r3, [pc, #28]	@ (8008b80 <USBD_CUSTOM_HID_SendReport+0x64>)
 8008b64:	7819      	ldrb	r1, [r3, #0]
 8008b66:	88fb      	ldrh	r3, [r7, #6]
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f002 f81b 	bl	800aba6 <USBD_LL_Transmit>
 8008b70:	e001      	b.n	8008b76 <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e000      	b.n	8008b78 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3718      	adds	r7, #24
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	20000086 	.word	0x20000086

08008b84 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008b8c:	2181      	movs	r1, #129	@ 0x81
 8008b8e:	4815      	ldr	r0, [pc, #84]	@ (8008be4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008b90:	f000 fcf7 	bl	8009582 <USBD_GetEpDesc>
 8008b94:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008b96:	2101      	movs	r1, #1
 8008b98:	4812      	ldr	r0, [pc, #72]	@ (8008be4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008b9a:	f000 fcf2 	bl	8009582 <USBD_GetEpDesc>
 8008b9e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d009      	beq.n	8008bba <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f042 0202 	orr.w	r2, r2, #2
 8008bae:	711a      	strb	r2, [r3, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2205      	movs	r2, #5
 8008bb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d009      	beq.n	8008bd4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f042 0202 	orr.w	r2, r2, #2
 8008bc8:	711a      	strb	r2, [r3, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	2205      	movs	r2, #5
 8008bd2:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2229      	movs	r2, #41	@ 0x29
 8008bd8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008bda:	4b02      	ldr	r3, [pc, #8]	@ (8008be4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	20000044 	.word	0x20000044

08008be8 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008bf0:	2181      	movs	r1, #129	@ 0x81
 8008bf2:	4815      	ldr	r0, [pc, #84]	@ (8008c48 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008bf4:	f000 fcc5 	bl	8009582 <USBD_GetEpDesc>
 8008bf8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008bfa:	2101      	movs	r1, #1
 8008bfc:	4812      	ldr	r0, [pc, #72]	@ (8008c48 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008bfe:	f000 fcc0 	bl	8009582 <USBD_GetEpDesc>
 8008c02:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d009      	beq.n	8008c1e <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f042 0202 	orr.w	r2, r2, #2
 8008c12:	711a      	strb	r2, [r3, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2205      	movs	r2, #5
 8008c1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d009      	beq.n	8008c38 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f042 0202 	orr.w	r2, r2, #2
 8008c2c:	711a      	strb	r2, [r3, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	2205      	movs	r2, #5
 8008c36:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2229      	movs	r2, #41	@ 0x29
 8008c3c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008c3e:	4b02      	ldr	r3, [pc, #8]	@ (8008c48 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	20000044 	.word	0x20000044

08008c4c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008c54:	2181      	movs	r1, #129	@ 0x81
 8008c56:	4815      	ldr	r0, [pc, #84]	@ (8008cac <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008c58:	f000 fc93 	bl	8009582 <USBD_GetEpDesc>
 8008c5c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008c5e:	2101      	movs	r1, #1
 8008c60:	4812      	ldr	r0, [pc, #72]	@ (8008cac <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008c62:	f000 fc8e 	bl	8009582 <USBD_GetEpDesc>
 8008c66:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d009      	beq.n	8008c82 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f042 0202 	orr.w	r2, r2, #2
 8008c76:	711a      	strb	r2, [r3, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2205      	movs	r2, #5
 8008c80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d009      	beq.n	8008c9c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f042 0202 	orr.w	r2, r2, #2
 8008c90:	711a      	strb	r2, [r3, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	2205      	movs	r2, #5
 8008c9a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2229      	movs	r2, #41	@ 0x29
 8008ca0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008ca2:	4b02      	ldr	r3, [pc, #8]	@ (8008cac <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	20000044 	.word	0x20000044

08008cb0 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	460b      	mov	r3, r1
 8008cba:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	32b0      	adds	r2, #176	@ 0xb0
 8008cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f883 2020 	strb.w	r2, [r3, #32]

  return (uint8_t)USBD_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	370c      	adds	r7, #12
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b084      	sub	sp, #16
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	32b0      	adds	r2, #176	@ 0xb0
 8008cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d101      	bne.n	8008d00 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e017      	b.n	8008d30 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	32b0      	adds	r2, #176	@ 0xb0
 8008d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d0e:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	33b0      	adds	r3, #176	@ 0xb0
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	4413      	add	r3, r2
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	7810      	ldrb	r0, [r2, #0]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	7852      	ldrb	r2, [r2, #1]
 8008d2a:	4611      	mov	r1, r2
 8008d2c:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3710      	adds	r7, #16
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	32b0      	adds	r2, #176	@ 0xb0
 8008d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d4e:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d101      	bne.n	8008d5a <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008d56:	2303      	movs	r3, #3
 8008d58:	e016      	b.n	8008d88 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	69db      	ldr	r3, [r3, #28]
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d111      	bne.n	8008d86 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	33b0      	adds	r3, #176	@ 0xb0
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	7810      	ldrb	r0, [r2, #0]
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	7852      	ldrb	r2, [r2, #1]
 8008d7c:	4611      	mov	r1, r2
 8008d7e:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2200      	movs	r2, #0
 8008d84:	61da      	str	r2, [r3, #28]
  }

  return (uint8_t)USBD_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3710      	adds	r7, #16
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	220a      	movs	r2, #10
 8008d9c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008d9e:	4b03      	ldr	r3, [pc, #12]	@ (8008dac <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr
 8008dac:	2000007c 	.word	0x2000007c

08008db0 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d101      	bne.n	8008dc4 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008dc0:	2303      	movs	r3, #3
 8008dc2:	e009      	b.n	8008dd8 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	33b0      	adds	r3, #176	@ 0xb0
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	4413      	add	r3, r2
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b086      	sub	sp, #24
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	4613      	mov	r3, r2
 8008df0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d101      	bne.n	8008dfc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	e01f      	b.n	8008e3c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d003      	beq.n	8008e22 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	68ba      	ldr	r2, [r7, #8]
 8008e1e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2201      	movs	r2, #1
 8008e26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	79fa      	ldrb	r2, [r7, #7]
 8008e2e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f001 fd83 	bl	800a93c <USBD_LL_Init>
 8008e36:	4603      	mov	r3, r0
 8008e38:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3718      	adds	r7, #24
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d101      	bne.n	8008e5c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	e025      	b.n	8008ea8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	32ae      	adds	r2, #174	@ 0xae
 8008e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d00f      	beq.n	8008e98 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	32ae      	adds	r2, #174	@ 0xae
 8008e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e88:	f107 020e 	add.w	r2, r7, #14
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	4798      	blx	r3
 8008e90:	4602      	mov	r2, r0
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008e9e:	1c5a      	adds	r2, r3, #1
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f001 fd8b 	bl	800a9d4 <USBD_LL_Start>
 8008ebe:	4603      	mov	r3, r0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ed0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	370c      	adds	r7, #12
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr

08008ede <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b084      	sub	sp, #16
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eea:	2300      	movs	r3, #0
 8008eec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d009      	beq.n	8008f0c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	78fa      	ldrb	r2, [r7, #3]
 8008f02:	4611      	mov	r1, r2
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	4798      	blx	r3
 8008f08:	4603      	mov	r3, r0
 8008f0a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3710      	adds	r7, #16
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b084      	sub	sp, #16
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
 8008f1e:	460b      	mov	r3, r1
 8008f20:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f22:	2300      	movs	r3, #0
 8008f24:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	78fa      	ldrb	r2, [r7, #3]
 8008f30:	4611      	mov	r1, r2
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	4798      	blx	r3
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b084      	sub	sp, #16
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008f5a:	6839      	ldr	r1, [r7, #0]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f001 f90c 	bl	800a17a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008f70:	461a      	mov	r2, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008f7e:	f003 031f 	and.w	r3, r3, #31
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	d01a      	beq.n	8008fbc <USBD_LL_SetupStage+0x72>
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d822      	bhi.n	8008fd0 <USBD_LL_SetupStage+0x86>
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d002      	beq.n	8008f94 <USBD_LL_SetupStage+0x4a>
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d00a      	beq.n	8008fa8 <USBD_LL_SetupStage+0x5e>
 8008f92:	e01d      	b.n	8008fd0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 fb63 	bl	8009668 <USBD_StdDevReq>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	73fb      	strb	r3, [r7, #15]
      break;
 8008fa6:	e020      	b.n	8008fea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008fae:	4619      	mov	r1, r3
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 fbcb 	bl	800974c <USBD_StdItfReq>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8008fba:	e016      	b.n	8008fea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 fc2d 	bl	8009824 <USBD_StdEPReq>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8008fce:	e00c      	b.n	8008fea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008fd6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	4619      	mov	r1, r3
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f001 fd58 	bl	800aa94 <USBD_LL_StallEP>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8008fe8:	bf00      	nop
  }

  return ret;
 8008fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	607a      	str	r2, [r7, #4]
 8009000:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009002:	2300      	movs	r3, #0
 8009004:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009006:	7afb      	ldrb	r3, [r7, #11]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d16e      	bne.n	80090ea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009012:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800901a:	2b03      	cmp	r3, #3
 800901c:	f040 8098 	bne.w	8009150 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	689a      	ldr	r2, [r3, #8]
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	429a      	cmp	r2, r3
 800902a:	d913      	bls.n	8009054 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	689a      	ldr	r2, [r3, #8]
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	1ad2      	subs	r2, r2, r3
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	68da      	ldr	r2, [r3, #12]
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	4293      	cmp	r3, r2
 8009044:	bf28      	it	cs
 8009046:	4613      	movcs	r3, r2
 8009048:	461a      	mov	r2, r3
 800904a:	6879      	ldr	r1, [r7, #4]
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	f001 f988 	bl	800a362 <USBD_CtlContinueRx>
 8009052:	e07d      	b.n	8009150 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800905a:	f003 031f 	and.w	r3, r3, #31
 800905e:	2b02      	cmp	r3, #2
 8009060:	d014      	beq.n	800908c <USBD_LL_DataOutStage+0x98>
 8009062:	2b02      	cmp	r3, #2
 8009064:	d81d      	bhi.n	80090a2 <USBD_LL_DataOutStage+0xae>
 8009066:	2b00      	cmp	r3, #0
 8009068:	d002      	beq.n	8009070 <USBD_LL_DataOutStage+0x7c>
 800906a:	2b01      	cmp	r3, #1
 800906c:	d003      	beq.n	8009076 <USBD_LL_DataOutStage+0x82>
 800906e:	e018      	b.n	80090a2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009070:	2300      	movs	r3, #0
 8009072:	75bb      	strb	r3, [r7, #22]
            break;
 8009074:	e018      	b.n	80090a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800907c:	b2db      	uxtb	r3, r3
 800907e:	4619      	mov	r1, r3
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f000 fa64 	bl	800954e <USBD_CoreFindIF>
 8009086:	4603      	mov	r3, r0
 8009088:	75bb      	strb	r3, [r7, #22]
            break;
 800908a:	e00d      	b.n	80090a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009092:	b2db      	uxtb	r3, r3
 8009094:	4619      	mov	r1, r3
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	f000 fa66 	bl	8009568 <USBD_CoreFindEP>
 800909c:	4603      	mov	r3, r0
 800909e:	75bb      	strb	r3, [r7, #22]
            break;
 80090a0:	e002      	b.n	80090a8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80090a2:	2300      	movs	r3, #0
 80090a4:	75bb      	strb	r3, [r7, #22]
            break;
 80090a6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80090a8:	7dbb      	ldrb	r3, [r7, #22]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d119      	bne.n	80090e2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	2b03      	cmp	r3, #3
 80090b8:	d113      	bne.n	80090e2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80090ba:	7dba      	ldrb	r2, [r7, #22]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	32ae      	adds	r2, #174	@ 0xae
 80090c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00b      	beq.n	80090e2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80090ca:	7dba      	ldrb	r2, [r7, #22]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80090d2:	7dba      	ldrb	r2, [r7, #22]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	32ae      	adds	r2, #174	@ 0xae
 80090d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f001 f94e 	bl	800a384 <USBD_CtlSendStatus>
 80090e8:	e032      	b.n	8009150 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80090ea:	7afb      	ldrb	r3, [r7, #11]
 80090ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	4619      	mov	r1, r3
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	f000 fa37 	bl	8009568 <USBD_CoreFindEP>
 80090fa:	4603      	mov	r3, r0
 80090fc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090fe:	7dbb      	ldrb	r3, [r7, #22]
 8009100:	2bff      	cmp	r3, #255	@ 0xff
 8009102:	d025      	beq.n	8009150 <USBD_LL_DataOutStage+0x15c>
 8009104:	7dbb      	ldrb	r3, [r7, #22]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d122      	bne.n	8009150 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009110:	b2db      	uxtb	r3, r3
 8009112:	2b03      	cmp	r3, #3
 8009114:	d117      	bne.n	8009146 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009116:	7dba      	ldrb	r2, [r7, #22]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	32ae      	adds	r2, #174	@ 0xae
 800911c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009120:	699b      	ldr	r3, [r3, #24]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00f      	beq.n	8009146 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009126:	7dba      	ldrb	r2, [r7, #22]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800912e:	7dba      	ldrb	r2, [r7, #22]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	32ae      	adds	r2, #174	@ 0xae
 8009134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009138:	699b      	ldr	r3, [r3, #24]
 800913a:	7afa      	ldrb	r2, [r7, #11]
 800913c:	4611      	mov	r1, r2
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	4798      	blx	r3
 8009142:	4603      	mov	r3, r0
 8009144:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009146:	7dfb      	ldrb	r3, [r7, #23]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800914c:	7dfb      	ldrb	r3, [r7, #23]
 800914e:	e000      	b.n	8009152 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3718      	adds	r7, #24
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b086      	sub	sp, #24
 800915e:	af00      	add	r7, sp, #0
 8009160:	60f8      	str	r0, [r7, #12]
 8009162:	460b      	mov	r3, r1
 8009164:	607a      	str	r2, [r7, #4]
 8009166:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009168:	7afb      	ldrb	r3, [r7, #11]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d16f      	bne.n	800924e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	3314      	adds	r3, #20
 8009172:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800917a:	2b02      	cmp	r3, #2
 800917c:	d15a      	bne.n	8009234 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	689a      	ldr	r2, [r3, #8]
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	429a      	cmp	r2, r3
 8009188:	d914      	bls.n	80091b4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	689a      	ldr	r2, [r3, #8]
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	1ad2      	subs	r2, r2, r3
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	461a      	mov	r2, r3
 800919e:	6879      	ldr	r1, [r7, #4]
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f001 f8b0 	bl	800a306 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091a6:	2300      	movs	r3, #0
 80091a8:	2200      	movs	r2, #0
 80091aa:	2100      	movs	r1, #0
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f001 fd1b 	bl	800abe8 <USBD_LL_PrepareReceive>
 80091b2:	e03f      	b.n	8009234 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	68da      	ldr	r2, [r3, #12]
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d11c      	bne.n	80091fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	685a      	ldr	r2, [r3, #4]
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d316      	bcc.n	80091fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	685a      	ldr	r2, [r3, #4]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d20f      	bcs.n	80091fa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80091da:	2200      	movs	r2, #0
 80091dc:	2100      	movs	r1, #0
 80091de:	68f8      	ldr	r0, [r7, #12]
 80091e0:	f001 f891 	bl	800a306 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091ec:	2300      	movs	r3, #0
 80091ee:	2200      	movs	r2, #0
 80091f0:	2100      	movs	r1, #0
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f001 fcf8 	bl	800abe8 <USBD_LL_PrepareReceive>
 80091f8:	e01c      	b.n	8009234 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009200:	b2db      	uxtb	r3, r3
 8009202:	2b03      	cmp	r3, #3
 8009204:	d10f      	bne.n	8009226 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d009      	beq.n	8009226 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2200      	movs	r2, #0
 8009216:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009226:	2180      	movs	r1, #128	@ 0x80
 8009228:	68f8      	ldr	r0, [r7, #12]
 800922a:	f001 fc33 	bl	800aa94 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800922e:	68f8      	ldr	r0, [r7, #12]
 8009230:	f001 f8bb 	bl	800a3aa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d03a      	beq.n	80092b4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f7ff fe42 	bl	8008ec8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2200      	movs	r2, #0
 8009248:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800924c:	e032      	b.n	80092b4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800924e:	7afb      	ldrb	r3, [r7, #11]
 8009250:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009254:	b2db      	uxtb	r3, r3
 8009256:	4619      	mov	r1, r3
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f000 f985 	bl	8009568 <USBD_CoreFindEP>
 800925e:	4603      	mov	r3, r0
 8009260:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009262:	7dfb      	ldrb	r3, [r7, #23]
 8009264:	2bff      	cmp	r3, #255	@ 0xff
 8009266:	d025      	beq.n	80092b4 <USBD_LL_DataInStage+0x15a>
 8009268:	7dfb      	ldrb	r3, [r7, #23]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d122      	bne.n	80092b4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009274:	b2db      	uxtb	r3, r3
 8009276:	2b03      	cmp	r3, #3
 8009278:	d11c      	bne.n	80092b4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800927a:	7dfa      	ldrb	r2, [r7, #23]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	32ae      	adds	r2, #174	@ 0xae
 8009280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009284:	695b      	ldr	r3, [r3, #20]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d014      	beq.n	80092b4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800928a:	7dfa      	ldrb	r2, [r7, #23]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009292:	7dfa      	ldrb	r2, [r7, #23]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	32ae      	adds	r2, #174	@ 0xae
 8009298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800929c:	695b      	ldr	r3, [r3, #20]
 800929e:	7afa      	ldrb	r2, [r7, #11]
 80092a0:	4611      	mov	r1, r2
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	4798      	blx	r3
 80092a6:	4603      	mov	r3, r0
 80092a8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80092aa:	7dbb      	ldrb	r3, [r7, #22]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d001      	beq.n	80092b4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80092b0:	7dbb      	ldrb	r3, [r7, #22]
 80092b2:	e000      	b.n	80092b6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3718      	adds	r7, #24
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b084      	sub	sp, #16
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2201      	movs	r2, #1
 80092ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d014      	beq.n	8009324 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d00e      	beq.n	8009324 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	6852      	ldr	r2, [r2, #4]
 8009312:	b2d2      	uxtb	r2, r2
 8009314:	4611      	mov	r1, r2
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	4798      	blx	r3
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d001      	beq.n	8009324 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009320:	2303      	movs	r3, #3
 8009322:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009324:	2340      	movs	r3, #64	@ 0x40
 8009326:	2200      	movs	r2, #0
 8009328:	2100      	movs	r1, #0
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f001 fb6d 	bl	800aa0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2240      	movs	r2, #64	@ 0x40
 800933c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009340:	2340      	movs	r3, #64	@ 0x40
 8009342:	2200      	movs	r2, #0
 8009344:	2180      	movs	r1, #128	@ 0x80
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f001 fb5f 	bl	800aa0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2240      	movs	r2, #64	@ 0x40
 8009356:	621a      	str	r2, [r3, #32]

  return ret;
 8009358:	7bfb      	ldrb	r3, [r7, #15]
}
 800935a:	4618      	mov	r0, r3
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009362:	b480      	push	{r7}
 8009364:	b083      	sub	sp, #12
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	460b      	mov	r3, r1
 800936c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	78fa      	ldrb	r2, [r7, #3]
 8009372:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr

08009382 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009382:	b480      	push	{r7}
 8009384:	b083      	sub	sp, #12
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009390:	b2db      	uxtb	r3, r3
 8009392:	2b04      	cmp	r3, #4
 8009394:	d006      	beq.n	80093a4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800939c:	b2da      	uxtb	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2204      	movs	r2, #4
 80093a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	370c      	adds	r7, #12
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr

080093ba <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80093ba:	b480      	push	{r7}
 80093bc:	b083      	sub	sp, #12
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	2b04      	cmp	r3, #4
 80093cc:	d106      	bne.n	80093dc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80093d4:	b2da      	uxtb	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80093dc:	2300      	movs	r3, #0
}
 80093de:	4618      	mov	r0, r3
 80093e0:	370c      	adds	r7, #12
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr

080093ea <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b082      	sub	sp, #8
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	2b03      	cmp	r3, #3
 80093fc:	d110      	bne.n	8009420 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00b      	beq.n	8009420 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800940e:	69db      	ldr	r3, [r3, #28]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d005      	beq.n	8009420 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800941a:	69db      	ldr	r3, [r3, #28]
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b082      	sub	sp, #8
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
 8009432:	460b      	mov	r3, r1
 8009434:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	32ae      	adds	r2, #174	@ 0xae
 8009440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d101      	bne.n	800944c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009448:	2303      	movs	r3, #3
 800944a:	e01c      	b.n	8009486 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009452:	b2db      	uxtb	r3, r3
 8009454:	2b03      	cmp	r3, #3
 8009456:	d115      	bne.n	8009484 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	32ae      	adds	r2, #174	@ 0xae
 8009462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009466:	6a1b      	ldr	r3, [r3, #32]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00b      	beq.n	8009484 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	32ae      	adds	r2, #174	@ 0xae
 8009476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800947a:	6a1b      	ldr	r3, [r3, #32]
 800947c:	78fa      	ldrb	r2, [r7, #3]
 800947e:	4611      	mov	r1, r2
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3708      	adds	r7, #8
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b082      	sub	sp, #8
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
 8009496:	460b      	mov	r3, r1
 8009498:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	32ae      	adds	r2, #174	@ 0xae
 80094a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d101      	bne.n	80094b0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80094ac:	2303      	movs	r3, #3
 80094ae:	e01c      	b.n	80094ea <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	2b03      	cmp	r3, #3
 80094ba:	d115      	bne.n	80094e8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	32ae      	adds	r2, #174	@ 0xae
 80094c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00b      	beq.n	80094e8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	32ae      	adds	r2, #174	@ 0xae
 80094da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094e0:	78fa      	ldrb	r2, [r7, #3]
 80094e2:	4611      	mov	r1, r2
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80094f2:	b480      	push	{r7}
 80094f4:	b083      	sub	sp, #12
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009510:	2300      	movs	r3, #0
 8009512:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00e      	beq.n	8009544 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	6852      	ldr	r2, [r2, #4]
 8009532:	b2d2      	uxtb	r2, r2
 8009534:	4611      	mov	r1, r2
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	4798      	blx	r3
 800953a:	4603      	mov	r3, r0
 800953c:	2b00      	cmp	r3, #0
 800953e:	d001      	beq.n	8009544 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009540:	2303      	movs	r3, #3
 8009542:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009544:	7bfb      	ldrb	r3, [r7, #15]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800954e:	b480      	push	{r7}
 8009550:	b083      	sub	sp, #12
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
 8009556:	460b      	mov	r3, r1
 8009558:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800955a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800955c:	4618      	mov	r0, r3
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	460b      	mov	r3, r1
 8009572:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009574:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009576:	4618      	mov	r0, r3
 8009578:	370c      	adds	r7, #12
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr

08009582 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b086      	sub	sp, #24
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	460b      	mov	r3, r1
 800958c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009596:	2300      	movs	r3, #0
 8009598:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	885b      	ldrh	r3, [r3, #2]
 800959e:	b29b      	uxth	r3, r3
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	7812      	ldrb	r2, [r2, #0]
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d91f      	bls.n	80095e8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80095ae:	e013      	b.n	80095d8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80095b0:	f107 030a 	add.w	r3, r7, #10
 80095b4:	4619      	mov	r1, r3
 80095b6:	6978      	ldr	r0, [r7, #20]
 80095b8:	f000 f81b 	bl	80095f2 <USBD_GetNextDesc>
 80095bc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	785b      	ldrb	r3, [r3, #1]
 80095c2:	2b05      	cmp	r3, #5
 80095c4:	d108      	bne.n	80095d8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	789b      	ldrb	r3, [r3, #2]
 80095ce:	78fa      	ldrb	r2, [r7, #3]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d008      	beq.n	80095e6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80095d4:	2300      	movs	r3, #0
 80095d6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	885b      	ldrh	r3, [r3, #2]
 80095dc:	b29a      	uxth	r2, r3
 80095de:	897b      	ldrh	r3, [r7, #10]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d8e5      	bhi.n	80095b0 <USBD_GetEpDesc+0x2e>
 80095e4:	e000      	b.n	80095e8 <USBD_GetEpDesc+0x66>
          break;
 80095e6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80095e8:	693b      	ldr	r3, [r7, #16]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3718      	adds	r7, #24
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80095f2:	b480      	push	{r7}
 80095f4:	b085      	sub	sp, #20
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
 80095fa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	881b      	ldrh	r3, [r3, #0]
 8009604:	68fa      	ldr	r2, [r7, #12]
 8009606:	7812      	ldrb	r2, [r2, #0]
 8009608:	4413      	add	r3, r2
 800960a:	b29a      	uxth	r2, r3
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	461a      	mov	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4413      	add	r3, r2
 800961a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800961c:	68fb      	ldr	r3, [r7, #12]
}
 800961e:	4618      	mov	r0, r3
 8009620:	3714      	adds	r7, #20
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr

0800962a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800962a:	b480      	push	{r7}
 800962c:	b087      	sub	sp, #28
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	3301      	adds	r3, #1
 8009640:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009648:	8a3b      	ldrh	r3, [r7, #16]
 800964a:	021b      	lsls	r3, r3, #8
 800964c:	b21a      	sxth	r2, r3
 800964e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009652:	4313      	orrs	r3, r2
 8009654:	b21b      	sxth	r3, r3
 8009656:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009658:	89fb      	ldrh	r3, [r7, #14]
}
 800965a:	4618      	mov	r0, r3
 800965c:	371c      	adds	r7, #28
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr
	...

08009668 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009672:	2300      	movs	r3, #0
 8009674:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800967e:	2b40      	cmp	r3, #64	@ 0x40
 8009680:	d005      	beq.n	800968e <USBD_StdDevReq+0x26>
 8009682:	2b40      	cmp	r3, #64	@ 0x40
 8009684:	d857      	bhi.n	8009736 <USBD_StdDevReq+0xce>
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00f      	beq.n	80096aa <USBD_StdDevReq+0x42>
 800968a:	2b20      	cmp	r3, #32
 800968c:	d153      	bne.n	8009736 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	32ae      	adds	r2, #174	@ 0xae
 8009698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	6839      	ldr	r1, [r7, #0]
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	4798      	blx	r3
 80096a4:	4603      	mov	r3, r0
 80096a6:	73fb      	strb	r3, [r7, #15]
      break;
 80096a8:	e04a      	b.n	8009740 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	785b      	ldrb	r3, [r3, #1]
 80096ae:	2b09      	cmp	r3, #9
 80096b0:	d83b      	bhi.n	800972a <USBD_StdDevReq+0xc2>
 80096b2:	a201      	add	r2, pc, #4	@ (adr r2, 80096b8 <USBD_StdDevReq+0x50>)
 80096b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b8:	0800970d 	.word	0x0800970d
 80096bc:	08009721 	.word	0x08009721
 80096c0:	0800972b 	.word	0x0800972b
 80096c4:	08009717 	.word	0x08009717
 80096c8:	0800972b 	.word	0x0800972b
 80096cc:	080096eb 	.word	0x080096eb
 80096d0:	080096e1 	.word	0x080096e1
 80096d4:	0800972b 	.word	0x0800972b
 80096d8:	08009703 	.word	0x08009703
 80096dc:	080096f5 	.word	0x080096f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80096e0:	6839      	ldr	r1, [r7, #0]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fa3c 	bl	8009b60 <USBD_GetDescriptor>
          break;
 80096e8:	e024      	b.n	8009734 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80096ea:	6839      	ldr	r1, [r7, #0]
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fba1 	bl	8009e34 <USBD_SetAddress>
          break;
 80096f2:	e01f      	b.n	8009734 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80096f4:	6839      	ldr	r1, [r7, #0]
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 fbe0 	bl	8009ebc <USBD_SetConfig>
 80096fc:	4603      	mov	r3, r0
 80096fe:	73fb      	strb	r3, [r7, #15]
          break;
 8009700:	e018      	b.n	8009734 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009702:	6839      	ldr	r1, [r7, #0]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 fc83 	bl	800a010 <USBD_GetConfig>
          break;
 800970a:	e013      	b.n	8009734 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800970c:	6839      	ldr	r1, [r7, #0]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fcb4 	bl	800a07c <USBD_GetStatus>
          break;
 8009714:	e00e      	b.n	8009734 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009716:	6839      	ldr	r1, [r7, #0]
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 fce3 	bl	800a0e4 <USBD_SetFeature>
          break;
 800971e:	e009      	b.n	8009734 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009720:	6839      	ldr	r1, [r7, #0]
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 fd07 	bl	800a136 <USBD_ClrFeature>
          break;
 8009728:	e004      	b.n	8009734 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800972a:	6839      	ldr	r1, [r7, #0]
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 fd5e 	bl	800a1ee <USBD_CtlError>
          break;
 8009732:	bf00      	nop
      }
      break;
 8009734:	e004      	b.n	8009740 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fd58 	bl	800a1ee <USBD_CtlError>
      break;
 800973e:	bf00      	nop
  }

  return ret;
 8009740:	7bfb      	ldrb	r3, [r7, #15]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop

0800974c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009762:	2b40      	cmp	r3, #64	@ 0x40
 8009764:	d005      	beq.n	8009772 <USBD_StdItfReq+0x26>
 8009766:	2b40      	cmp	r3, #64	@ 0x40
 8009768:	d852      	bhi.n	8009810 <USBD_StdItfReq+0xc4>
 800976a:	2b00      	cmp	r3, #0
 800976c:	d001      	beq.n	8009772 <USBD_StdItfReq+0x26>
 800976e:	2b20      	cmp	r3, #32
 8009770:	d14e      	bne.n	8009810 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009778:	b2db      	uxtb	r3, r3
 800977a:	3b01      	subs	r3, #1
 800977c:	2b02      	cmp	r3, #2
 800977e:	d840      	bhi.n	8009802 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	889b      	ldrh	r3, [r3, #4]
 8009784:	b2db      	uxtb	r3, r3
 8009786:	2b01      	cmp	r3, #1
 8009788:	d836      	bhi.n	80097f8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	889b      	ldrh	r3, [r3, #4]
 800978e:	b2db      	uxtb	r3, r3
 8009790:	4619      	mov	r1, r3
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f7ff fedb 	bl	800954e <USBD_CoreFindIF>
 8009798:	4603      	mov	r3, r0
 800979a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800979c:	7bbb      	ldrb	r3, [r7, #14]
 800979e:	2bff      	cmp	r3, #255	@ 0xff
 80097a0:	d01d      	beq.n	80097de <USBD_StdItfReq+0x92>
 80097a2:	7bbb      	ldrb	r3, [r7, #14]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d11a      	bne.n	80097de <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80097a8:	7bba      	ldrb	r2, [r7, #14]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	32ae      	adds	r2, #174	@ 0xae
 80097ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d00f      	beq.n	80097d8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80097b8:	7bba      	ldrb	r2, [r7, #14]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80097c0:	7bba      	ldrb	r2, [r7, #14]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	32ae      	adds	r2, #174	@ 0xae
 80097c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	6839      	ldr	r1, [r7, #0]
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	4798      	blx	r3
 80097d2:	4603      	mov	r3, r0
 80097d4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80097d6:	e004      	b.n	80097e2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80097d8:	2303      	movs	r3, #3
 80097da:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80097dc:	e001      	b.n	80097e2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80097de:	2303      	movs	r3, #3
 80097e0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	88db      	ldrh	r3, [r3, #6]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d110      	bne.n	800980c <USBD_StdItfReq+0xc0>
 80097ea:	7bfb      	ldrb	r3, [r7, #15]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d10d      	bne.n	800980c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 fdc7 	bl	800a384 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80097f6:	e009      	b.n	800980c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80097f8:	6839      	ldr	r1, [r7, #0]
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fcf7 	bl	800a1ee <USBD_CtlError>
          break;
 8009800:	e004      	b.n	800980c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009802:	6839      	ldr	r1, [r7, #0]
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 fcf2 	bl	800a1ee <USBD_CtlError>
          break;
 800980a:	e000      	b.n	800980e <USBD_StdItfReq+0xc2>
          break;
 800980c:	bf00      	nop
      }
      break;
 800980e:	e004      	b.n	800981a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fceb 	bl	800a1ee <USBD_CtlError>
      break;
 8009818:	bf00      	nop
  }

  return ret;
 800981a:	7bfb      	ldrb	r3, [r7, #15]
}
 800981c:	4618      	mov	r0, r3
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800982e:	2300      	movs	r3, #0
 8009830:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	889b      	ldrh	r3, [r3, #4]
 8009836:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009840:	2b40      	cmp	r3, #64	@ 0x40
 8009842:	d007      	beq.n	8009854 <USBD_StdEPReq+0x30>
 8009844:	2b40      	cmp	r3, #64	@ 0x40
 8009846:	f200 817f 	bhi.w	8009b48 <USBD_StdEPReq+0x324>
 800984a:	2b00      	cmp	r3, #0
 800984c:	d02a      	beq.n	80098a4 <USBD_StdEPReq+0x80>
 800984e:	2b20      	cmp	r3, #32
 8009850:	f040 817a 	bne.w	8009b48 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009854:	7bbb      	ldrb	r3, [r7, #14]
 8009856:	4619      	mov	r1, r3
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f7ff fe85 	bl	8009568 <USBD_CoreFindEP>
 800985e:	4603      	mov	r3, r0
 8009860:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009862:	7b7b      	ldrb	r3, [r7, #13]
 8009864:	2bff      	cmp	r3, #255	@ 0xff
 8009866:	f000 8174 	beq.w	8009b52 <USBD_StdEPReq+0x32e>
 800986a:	7b7b      	ldrb	r3, [r7, #13]
 800986c:	2b00      	cmp	r3, #0
 800986e:	f040 8170 	bne.w	8009b52 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009872:	7b7a      	ldrb	r2, [r7, #13]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800987a:	7b7a      	ldrb	r2, [r7, #13]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	32ae      	adds	r2, #174	@ 0xae
 8009880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	2b00      	cmp	r3, #0
 8009888:	f000 8163 	beq.w	8009b52 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800988c:	7b7a      	ldrb	r2, [r7, #13]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	32ae      	adds	r2, #174	@ 0xae
 8009892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	6839      	ldr	r1, [r7, #0]
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	4798      	blx	r3
 800989e:	4603      	mov	r3, r0
 80098a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80098a2:	e156      	b.n	8009b52 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	785b      	ldrb	r3, [r3, #1]
 80098a8:	2b03      	cmp	r3, #3
 80098aa:	d008      	beq.n	80098be <USBD_StdEPReq+0x9a>
 80098ac:	2b03      	cmp	r3, #3
 80098ae:	f300 8145 	bgt.w	8009b3c <USBD_StdEPReq+0x318>
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	f000 809b 	beq.w	80099ee <USBD_StdEPReq+0x1ca>
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d03c      	beq.n	8009936 <USBD_StdEPReq+0x112>
 80098bc:	e13e      	b.n	8009b3c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	d002      	beq.n	80098d0 <USBD_StdEPReq+0xac>
 80098ca:	2b03      	cmp	r3, #3
 80098cc:	d016      	beq.n	80098fc <USBD_StdEPReq+0xd8>
 80098ce:	e02c      	b.n	800992a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098d0:	7bbb      	ldrb	r3, [r7, #14]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d00d      	beq.n	80098f2 <USBD_StdEPReq+0xce>
 80098d6:	7bbb      	ldrb	r3, [r7, #14]
 80098d8:	2b80      	cmp	r3, #128	@ 0x80
 80098da:	d00a      	beq.n	80098f2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80098dc:	7bbb      	ldrb	r3, [r7, #14]
 80098de:	4619      	mov	r1, r3
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f001 f8d7 	bl	800aa94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80098e6:	2180      	movs	r1, #128	@ 0x80
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f001 f8d3 	bl	800aa94 <USBD_LL_StallEP>
 80098ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80098f0:	e020      	b.n	8009934 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80098f2:	6839      	ldr	r1, [r7, #0]
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 fc7a 	bl	800a1ee <USBD_CtlError>
              break;
 80098fa:	e01b      	b.n	8009934 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	885b      	ldrh	r3, [r3, #2]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d10e      	bne.n	8009922 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009904:	7bbb      	ldrb	r3, [r7, #14]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d00b      	beq.n	8009922 <USBD_StdEPReq+0xfe>
 800990a:	7bbb      	ldrb	r3, [r7, #14]
 800990c:	2b80      	cmp	r3, #128	@ 0x80
 800990e:	d008      	beq.n	8009922 <USBD_StdEPReq+0xfe>
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	88db      	ldrh	r3, [r3, #6]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d104      	bne.n	8009922 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009918:	7bbb      	ldrb	r3, [r7, #14]
 800991a:	4619      	mov	r1, r3
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f001 f8b9 	bl	800aa94 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 fd2e 	bl	800a384 <USBD_CtlSendStatus>

              break;
 8009928:	e004      	b.n	8009934 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800992a:	6839      	ldr	r1, [r7, #0]
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fc5e 	bl	800a1ee <USBD_CtlError>
              break;
 8009932:	bf00      	nop
          }
          break;
 8009934:	e107      	b.n	8009b46 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800993c:	b2db      	uxtb	r3, r3
 800993e:	2b02      	cmp	r3, #2
 8009940:	d002      	beq.n	8009948 <USBD_StdEPReq+0x124>
 8009942:	2b03      	cmp	r3, #3
 8009944:	d016      	beq.n	8009974 <USBD_StdEPReq+0x150>
 8009946:	e04b      	b.n	80099e0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009948:	7bbb      	ldrb	r3, [r7, #14]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d00d      	beq.n	800996a <USBD_StdEPReq+0x146>
 800994e:	7bbb      	ldrb	r3, [r7, #14]
 8009950:	2b80      	cmp	r3, #128	@ 0x80
 8009952:	d00a      	beq.n	800996a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009954:	7bbb      	ldrb	r3, [r7, #14]
 8009956:	4619      	mov	r1, r3
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f001 f89b 	bl	800aa94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800995e:	2180      	movs	r1, #128	@ 0x80
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f001 f897 	bl	800aa94 <USBD_LL_StallEP>
 8009966:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009968:	e040      	b.n	80099ec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800996a:	6839      	ldr	r1, [r7, #0]
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 fc3e 	bl	800a1ee <USBD_CtlError>
              break;
 8009972:	e03b      	b.n	80099ec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	885b      	ldrh	r3, [r3, #2]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d136      	bne.n	80099ea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800997c:	7bbb      	ldrb	r3, [r7, #14]
 800997e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009982:	2b00      	cmp	r3, #0
 8009984:	d004      	beq.n	8009990 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009986:	7bbb      	ldrb	r3, [r7, #14]
 8009988:	4619      	mov	r1, r3
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f001 f8a1 	bl	800aad2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 fcf7 	bl	800a384 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009996:	7bbb      	ldrb	r3, [r7, #14]
 8009998:	4619      	mov	r1, r3
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f7ff fde4 	bl	8009568 <USBD_CoreFindEP>
 80099a0:	4603      	mov	r3, r0
 80099a2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099a4:	7b7b      	ldrb	r3, [r7, #13]
 80099a6:	2bff      	cmp	r3, #255	@ 0xff
 80099a8:	d01f      	beq.n	80099ea <USBD_StdEPReq+0x1c6>
 80099aa:	7b7b      	ldrb	r3, [r7, #13]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d11c      	bne.n	80099ea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80099b0:	7b7a      	ldrb	r2, [r7, #13]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80099b8:	7b7a      	ldrb	r2, [r7, #13]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	32ae      	adds	r2, #174	@ 0xae
 80099be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d010      	beq.n	80099ea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80099c8:	7b7a      	ldrb	r2, [r7, #13]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	32ae      	adds	r2, #174	@ 0xae
 80099ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	6839      	ldr	r1, [r7, #0]
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	4798      	blx	r3
 80099da:	4603      	mov	r3, r0
 80099dc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80099de:	e004      	b.n	80099ea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80099e0:	6839      	ldr	r1, [r7, #0]
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 fc03 	bl	800a1ee <USBD_CtlError>
              break;
 80099e8:	e000      	b.n	80099ec <USBD_StdEPReq+0x1c8>
              break;
 80099ea:	bf00      	nop
          }
          break;
 80099ec:	e0ab      	b.n	8009b46 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	d002      	beq.n	8009a00 <USBD_StdEPReq+0x1dc>
 80099fa:	2b03      	cmp	r3, #3
 80099fc:	d032      	beq.n	8009a64 <USBD_StdEPReq+0x240>
 80099fe:	e097      	b.n	8009b30 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a00:	7bbb      	ldrb	r3, [r7, #14]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d007      	beq.n	8009a16 <USBD_StdEPReq+0x1f2>
 8009a06:	7bbb      	ldrb	r3, [r7, #14]
 8009a08:	2b80      	cmp	r3, #128	@ 0x80
 8009a0a:	d004      	beq.n	8009a16 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009a0c:	6839      	ldr	r1, [r7, #0]
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 fbed 	bl	800a1ee <USBD_CtlError>
                break;
 8009a14:	e091      	b.n	8009b3a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	da0b      	bge.n	8009a36 <USBD_StdEPReq+0x212>
 8009a1e:	7bbb      	ldrb	r3, [r7, #14]
 8009a20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a24:	4613      	mov	r3, r2
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	4413      	add	r3, r2
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	3310      	adds	r3, #16
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	4413      	add	r3, r2
 8009a32:	3304      	adds	r3, #4
 8009a34:	e00b      	b.n	8009a4e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a36:	7bbb      	ldrb	r3, [r7, #14]
 8009a38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	4413      	add	r3, r2
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	3304      	adds	r3, #4
 8009a4e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	2200      	movs	r2, #0
 8009a54:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	2202      	movs	r2, #2
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 fc37 	bl	800a2d0 <USBD_CtlSendData>
              break;
 8009a62:	e06a      	b.n	8009b3a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	da11      	bge.n	8009a90 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009a6c:	7bbb      	ldrb	r3, [r7, #14]
 8009a6e:	f003 020f 	and.w	r2, r3, #15
 8009a72:	6879      	ldr	r1, [r7, #4]
 8009a74:	4613      	mov	r3, r2
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	4413      	add	r3, r2
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	440b      	add	r3, r1
 8009a7e:	3324      	adds	r3, #36	@ 0x24
 8009a80:	881b      	ldrh	r3, [r3, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d117      	bne.n	8009ab6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009a86:	6839      	ldr	r1, [r7, #0]
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 fbb0 	bl	800a1ee <USBD_CtlError>
                  break;
 8009a8e:	e054      	b.n	8009b3a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009a90:	7bbb      	ldrb	r3, [r7, #14]
 8009a92:	f003 020f 	and.w	r2, r3, #15
 8009a96:	6879      	ldr	r1, [r7, #4]
 8009a98:	4613      	mov	r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	4413      	add	r3, r2
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	440b      	add	r3, r1
 8009aa2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009aa6:	881b      	ldrh	r3, [r3, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d104      	bne.n	8009ab6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009aac:	6839      	ldr	r1, [r7, #0]
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 fb9d 	bl	800a1ee <USBD_CtlError>
                  break;
 8009ab4:	e041      	b.n	8009b3a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ab6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	da0b      	bge.n	8009ad6 <USBD_StdEPReq+0x2b2>
 8009abe:	7bbb      	ldrb	r3, [r7, #14]
 8009ac0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	4413      	add	r3, r2
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	3310      	adds	r3, #16
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	3304      	adds	r3, #4
 8009ad4:	e00b      	b.n	8009aee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ad6:	7bbb      	ldrb	r3, [r7, #14]
 8009ad8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009adc:	4613      	mov	r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4413      	add	r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	4413      	add	r3, r2
 8009aec:	3304      	adds	r3, #4
 8009aee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009af0:	7bbb      	ldrb	r3, [r7, #14]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d002      	beq.n	8009afc <USBD_StdEPReq+0x2d8>
 8009af6:	7bbb      	ldrb	r3, [r7, #14]
 8009af8:	2b80      	cmp	r3, #128	@ 0x80
 8009afa:	d103      	bne.n	8009b04 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	2200      	movs	r2, #0
 8009b00:	601a      	str	r2, [r3, #0]
 8009b02:	e00e      	b.n	8009b22 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009b04:	7bbb      	ldrb	r3, [r7, #14]
 8009b06:	4619      	mov	r1, r3
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f001 f801 	bl	800ab10 <USBD_LL_IsStallEP>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d003      	beq.n	8009b1c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	2201      	movs	r2, #1
 8009b18:	601a      	str	r2, [r3, #0]
 8009b1a:	e002      	b.n	8009b22 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	2202      	movs	r2, #2
 8009b26:	4619      	mov	r1, r3
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 fbd1 	bl	800a2d0 <USBD_CtlSendData>
              break;
 8009b2e:	e004      	b.n	8009b3a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009b30:	6839      	ldr	r1, [r7, #0]
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 fb5b 	bl	800a1ee <USBD_CtlError>
              break;
 8009b38:	bf00      	nop
          }
          break;
 8009b3a:	e004      	b.n	8009b46 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009b3c:	6839      	ldr	r1, [r7, #0]
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fb55 	bl	800a1ee <USBD_CtlError>
          break;
 8009b44:	bf00      	nop
      }
      break;
 8009b46:	e005      	b.n	8009b54 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009b48:	6839      	ldr	r1, [r7, #0]
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 fb4f 	bl	800a1ee <USBD_CtlError>
      break;
 8009b50:	e000      	b.n	8009b54 <USBD_StdEPReq+0x330>
      break;
 8009b52:	bf00      	nop
  }

  return ret;
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
	...

08009b60 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009b72:	2300      	movs	r3, #0
 8009b74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	885b      	ldrh	r3, [r3, #2]
 8009b7a:	0a1b      	lsrs	r3, r3, #8
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	2b06      	cmp	r3, #6
 8009b82:	f200 8128 	bhi.w	8009dd6 <USBD_GetDescriptor+0x276>
 8009b86:	a201      	add	r2, pc, #4	@ (adr r2, 8009b8c <USBD_GetDescriptor+0x2c>)
 8009b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8c:	08009ba9 	.word	0x08009ba9
 8009b90:	08009bc1 	.word	0x08009bc1
 8009b94:	08009c01 	.word	0x08009c01
 8009b98:	08009dd7 	.word	0x08009dd7
 8009b9c:	08009dd7 	.word	0x08009dd7
 8009ba0:	08009d77 	.word	0x08009d77
 8009ba4:	08009da3 	.word	0x08009da3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	7c12      	ldrb	r2, [r2, #16]
 8009bb4:	f107 0108 	add.w	r1, r7, #8
 8009bb8:	4610      	mov	r0, r2
 8009bba:	4798      	blx	r3
 8009bbc:	60f8      	str	r0, [r7, #12]
      break;
 8009bbe:	e112      	b.n	8009de6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	7c1b      	ldrb	r3, [r3, #16]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d10d      	bne.n	8009be4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd0:	f107 0208 	add.w	r2, r7, #8
 8009bd4:	4610      	mov	r0, r2
 8009bd6:	4798      	blx	r3
 8009bd8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	2202      	movs	r2, #2
 8009be0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009be2:	e100      	b.n	8009de6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bec:	f107 0208 	add.w	r2, r7, #8
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	4798      	blx	r3
 8009bf4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	2202      	movs	r2, #2
 8009bfc:	701a      	strb	r2, [r3, #0]
      break;
 8009bfe:	e0f2      	b.n	8009de6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	885b      	ldrh	r3, [r3, #2]
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	2b05      	cmp	r3, #5
 8009c08:	f200 80ac 	bhi.w	8009d64 <USBD_GetDescriptor+0x204>
 8009c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c14 <USBD_GetDescriptor+0xb4>)
 8009c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c12:	bf00      	nop
 8009c14:	08009c2d 	.word	0x08009c2d
 8009c18:	08009c61 	.word	0x08009c61
 8009c1c:	08009c95 	.word	0x08009c95
 8009c20:	08009cc9 	.word	0x08009cc9
 8009c24:	08009cfd 	.word	0x08009cfd
 8009c28:	08009d31 	.word	0x08009d31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d00b      	beq.n	8009c50 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	7c12      	ldrb	r2, [r2, #16]
 8009c44:	f107 0108 	add.w	r1, r7, #8
 8009c48:	4610      	mov	r0, r2
 8009c4a:	4798      	blx	r3
 8009c4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c4e:	e091      	b.n	8009d74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c50:	6839      	ldr	r1, [r7, #0]
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 facb 	bl	800a1ee <USBD_CtlError>
            err++;
 8009c58:	7afb      	ldrb	r3, [r7, #11]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c5e:	e089      	b.n	8009d74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00b      	beq.n	8009c84 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	7c12      	ldrb	r2, [r2, #16]
 8009c78:	f107 0108 	add.w	r1, r7, #8
 8009c7c:	4610      	mov	r0, r2
 8009c7e:	4798      	blx	r3
 8009c80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c82:	e077      	b.n	8009d74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fab1 	bl	800a1ee <USBD_CtlError>
            err++;
 8009c8c:	7afb      	ldrb	r3, [r7, #11]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	72fb      	strb	r3, [r7, #11]
          break;
 8009c92:	e06f      	b.n	8009d74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d00b      	beq.n	8009cb8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	7c12      	ldrb	r2, [r2, #16]
 8009cac:	f107 0108 	add.w	r1, r7, #8
 8009cb0:	4610      	mov	r0, r2
 8009cb2:	4798      	blx	r3
 8009cb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cb6:	e05d      	b.n	8009d74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cb8:	6839      	ldr	r1, [r7, #0]
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 fa97 	bl	800a1ee <USBD_CtlError>
            err++;
 8009cc0:	7afb      	ldrb	r3, [r7, #11]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	72fb      	strb	r3, [r7, #11]
          break;
 8009cc6:	e055      	b.n	8009d74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cce:	691b      	ldr	r3, [r3, #16]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00b      	beq.n	8009cec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	7c12      	ldrb	r2, [r2, #16]
 8009ce0:	f107 0108 	add.w	r1, r7, #8
 8009ce4:	4610      	mov	r0, r2
 8009ce6:	4798      	blx	r3
 8009ce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cea:	e043      	b.n	8009d74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cec:	6839      	ldr	r1, [r7, #0]
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fa7d 	bl	800a1ee <USBD_CtlError>
            err++;
 8009cf4:	7afb      	ldrb	r3, [r7, #11]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	72fb      	strb	r3, [r7, #11]
          break;
 8009cfa:	e03b      	b.n	8009d74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d02:	695b      	ldr	r3, [r3, #20]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d00b      	beq.n	8009d20 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d0e:	695b      	ldr	r3, [r3, #20]
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	7c12      	ldrb	r2, [r2, #16]
 8009d14:	f107 0108 	add.w	r1, r7, #8
 8009d18:	4610      	mov	r0, r2
 8009d1a:	4798      	blx	r3
 8009d1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d1e:	e029      	b.n	8009d74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d20:	6839      	ldr	r1, [r7, #0]
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 fa63 	bl	800a1ee <USBD_CtlError>
            err++;
 8009d28:	7afb      	ldrb	r3, [r7, #11]
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d2e:	e021      	b.n	8009d74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d36:	699b      	ldr	r3, [r3, #24]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00b      	beq.n	8009d54 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	7c12      	ldrb	r2, [r2, #16]
 8009d48:	f107 0108 	add.w	r1, r7, #8
 8009d4c:	4610      	mov	r0, r2
 8009d4e:	4798      	blx	r3
 8009d50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d52:	e00f      	b.n	8009d74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d54:	6839      	ldr	r1, [r7, #0]
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 fa49 	bl	800a1ee <USBD_CtlError>
            err++;
 8009d5c:	7afb      	ldrb	r3, [r7, #11]
 8009d5e:	3301      	adds	r3, #1
 8009d60:	72fb      	strb	r3, [r7, #11]
          break;
 8009d62:	e007      	b.n	8009d74 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009d64:	6839      	ldr	r1, [r7, #0]
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 fa41 	bl	800a1ee <USBD_CtlError>
          err++;
 8009d6c:	7afb      	ldrb	r3, [r7, #11]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009d72:	bf00      	nop
      }
      break;
 8009d74:	e037      	b.n	8009de6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	7c1b      	ldrb	r3, [r3, #16]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d109      	bne.n	8009d92 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d86:	f107 0208 	add.w	r2, r7, #8
 8009d8a:	4610      	mov	r0, r2
 8009d8c:	4798      	blx	r3
 8009d8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d90:	e029      	b.n	8009de6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fa2a 	bl	800a1ee <USBD_CtlError>
        err++;
 8009d9a:	7afb      	ldrb	r3, [r7, #11]
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	72fb      	strb	r3, [r7, #11]
      break;
 8009da0:	e021      	b.n	8009de6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	7c1b      	ldrb	r3, [r3, #16]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10d      	bne.n	8009dc6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009db2:	f107 0208 	add.w	r2, r7, #8
 8009db6:	4610      	mov	r0, r2
 8009db8:	4798      	blx	r3
 8009dba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	2207      	movs	r2, #7
 8009dc2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dc4:	e00f      	b.n	8009de6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dc6:	6839      	ldr	r1, [r7, #0]
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 fa10 	bl	800a1ee <USBD_CtlError>
        err++;
 8009dce:	7afb      	ldrb	r3, [r7, #11]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	72fb      	strb	r3, [r7, #11]
      break;
 8009dd4:	e007      	b.n	8009de6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009dd6:	6839      	ldr	r1, [r7, #0]
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 fa08 	bl	800a1ee <USBD_CtlError>
      err++;
 8009dde:	7afb      	ldrb	r3, [r7, #11]
 8009de0:	3301      	adds	r3, #1
 8009de2:	72fb      	strb	r3, [r7, #11]
      break;
 8009de4:	bf00      	nop
  }

  if (err != 0U)
 8009de6:	7afb      	ldrb	r3, [r7, #11]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d11e      	bne.n	8009e2a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	88db      	ldrh	r3, [r3, #6]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d016      	beq.n	8009e22 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009df4:	893b      	ldrh	r3, [r7, #8]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00e      	beq.n	8009e18 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	88da      	ldrh	r2, [r3, #6]
 8009dfe:	893b      	ldrh	r3, [r7, #8]
 8009e00:	4293      	cmp	r3, r2
 8009e02:	bf28      	it	cs
 8009e04:	4613      	movcs	r3, r2
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e0a:	893b      	ldrh	r3, [r7, #8]
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	68f9      	ldr	r1, [r7, #12]
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 fa5d 	bl	800a2d0 <USBD_CtlSendData>
 8009e16:	e009      	b.n	8009e2c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009e18:	6839      	ldr	r1, [r7, #0]
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 f9e7 	bl	800a1ee <USBD_CtlError>
 8009e20:	e004      	b.n	8009e2c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 faae 	bl	800a384 <USBD_CtlSendStatus>
 8009e28:	e000      	b.n	8009e2c <USBD_GetDescriptor+0x2cc>
    return;
 8009e2a:	bf00      	nop
  }
}
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop

08009e34 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	889b      	ldrh	r3, [r3, #4]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d131      	bne.n	8009eaa <USBD_SetAddress+0x76>
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	88db      	ldrh	r3, [r3, #6]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d12d      	bne.n	8009eaa <USBD_SetAddress+0x76>
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	885b      	ldrh	r3, [r3, #2]
 8009e52:	2b7f      	cmp	r3, #127	@ 0x7f
 8009e54:	d829      	bhi.n	8009eaa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	885b      	ldrh	r3, [r3, #2]
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	2b03      	cmp	r3, #3
 8009e6c:	d104      	bne.n	8009e78 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009e6e:	6839      	ldr	r1, [r7, #0]
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 f9bc 	bl	800a1ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e76:	e01d      	b.n	8009eb4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	7bfa      	ldrb	r2, [r7, #15]
 8009e7c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009e80:	7bfb      	ldrb	r3, [r7, #15]
 8009e82:	4619      	mov	r1, r3
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 fe6f 	bl	800ab68 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 fa7a 	bl	800a384 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009e90:	7bfb      	ldrb	r3, [r7, #15]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d004      	beq.n	8009ea0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2202      	movs	r2, #2
 8009e9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e9e:	e009      	b.n	8009eb4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ea8:	e004      	b.n	8009eb4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009eaa:	6839      	ldr	r1, [r7, #0]
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 f99e 	bl	800a1ee <USBD_CtlError>
  }
}
 8009eb2:	bf00      	nop
 8009eb4:	bf00      	nop
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	885b      	ldrh	r3, [r3, #2]
 8009ece:	b2da      	uxtb	r2, r3
 8009ed0:	4b4e      	ldr	r3, [pc, #312]	@ (800a00c <USBD_SetConfig+0x150>)
 8009ed2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ed4:	4b4d      	ldr	r3, [pc, #308]	@ (800a00c <USBD_SetConfig+0x150>)
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d905      	bls.n	8009ee8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009edc:	6839      	ldr	r1, [r7, #0]
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f985 	bl	800a1ee <USBD_CtlError>
    return USBD_FAIL;
 8009ee4:	2303      	movs	r3, #3
 8009ee6:	e08c      	b.n	800a002 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d002      	beq.n	8009efa <USBD_SetConfig+0x3e>
 8009ef4:	2b03      	cmp	r3, #3
 8009ef6:	d029      	beq.n	8009f4c <USBD_SetConfig+0x90>
 8009ef8:	e075      	b.n	8009fe6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009efa:	4b44      	ldr	r3, [pc, #272]	@ (800a00c <USBD_SetConfig+0x150>)
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d020      	beq.n	8009f44 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009f02:	4b42      	ldr	r3, [pc, #264]	@ (800a00c <USBD_SetConfig+0x150>)
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	461a      	mov	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009f0c:	4b3f      	ldr	r3, [pc, #252]	@ (800a00c <USBD_SetConfig+0x150>)
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	4619      	mov	r1, r3
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f7fe ffe3 	bl	8008ede <USBD_SetClassConfig>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009f1c:	7bfb      	ldrb	r3, [r7, #15]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d008      	beq.n	8009f34 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009f22:	6839      	ldr	r1, [r7, #0]
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 f962 	bl	800a1ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2202      	movs	r2, #2
 8009f2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f32:	e065      	b.n	800a000 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 fa25 	bl	800a384 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2203      	movs	r2, #3
 8009f3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009f42:	e05d      	b.n	800a000 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 fa1d 	bl	800a384 <USBD_CtlSendStatus>
      break;
 8009f4a:	e059      	b.n	800a000 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009f4c:	4b2f      	ldr	r3, [pc, #188]	@ (800a00c <USBD_SetConfig+0x150>)
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d112      	bne.n	8009f7a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2202      	movs	r2, #2
 8009f58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800a00c <USBD_SetConfig+0x150>)
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	461a      	mov	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009f66:	4b29      	ldr	r3, [pc, #164]	@ (800a00c <USBD_SetConfig+0x150>)
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f7fe ffd2 	bl	8008f16 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 fa06 	bl	800a384 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f78:	e042      	b.n	800a000 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009f7a:	4b24      	ldr	r3, [pc, #144]	@ (800a00c <USBD_SetConfig+0x150>)
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	461a      	mov	r2, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d02a      	beq.n	8009fde <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	4619      	mov	r1, r3
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f7fe ffc0 	bl	8008f16 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009f96:	4b1d      	ldr	r3, [pc, #116]	@ (800a00c <USBD_SetConfig+0x150>)
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800a00c <USBD_SetConfig+0x150>)
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f7fe ff99 	bl	8008ede <USBD_SetClassConfig>
 8009fac:	4603      	mov	r3, r0
 8009fae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009fb0:	7bfb      	ldrb	r3, [r7, #15]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d00f      	beq.n	8009fd6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009fb6:	6839      	ldr	r1, [r7, #0]
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 f918 	bl	800a1ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f7fe ffa5 	bl	8008f16 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2202      	movs	r2, #2
 8009fd0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009fd4:	e014      	b.n	800a000 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 f9d4 	bl	800a384 <USBD_CtlSendStatus>
      break;
 8009fdc:	e010      	b.n	800a000 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 f9d0 	bl	800a384 <USBD_CtlSendStatus>
      break;
 8009fe4:	e00c      	b.n	800a000 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009fe6:	6839      	ldr	r1, [r7, #0]
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 f900 	bl	800a1ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009fee:	4b07      	ldr	r3, [pc, #28]	@ (800a00c <USBD_SetConfig+0x150>)
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f7fe ff8e 	bl	8008f16 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009ffa:	2303      	movs	r3, #3
 8009ffc:	73fb      	strb	r3, [r7, #15]
      break;
 8009ffe:	bf00      	nop
  }

  return ret;
 800a000:	7bfb      	ldrb	r3, [r7, #15]
}
 800a002:	4618      	mov	r0, r3
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	200006a0 	.word	0x200006a0

0800a010 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	88db      	ldrh	r3, [r3, #6]
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d004      	beq.n	800a02c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a022:	6839      	ldr	r1, [r7, #0]
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 f8e2 	bl	800a1ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a02a:	e023      	b.n	800a074 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a032:	b2db      	uxtb	r3, r3
 800a034:	2b02      	cmp	r3, #2
 800a036:	dc02      	bgt.n	800a03e <USBD_GetConfig+0x2e>
 800a038:	2b00      	cmp	r3, #0
 800a03a:	dc03      	bgt.n	800a044 <USBD_GetConfig+0x34>
 800a03c:	e015      	b.n	800a06a <USBD_GetConfig+0x5a>
 800a03e:	2b03      	cmp	r3, #3
 800a040:	d00b      	beq.n	800a05a <USBD_GetConfig+0x4a>
 800a042:	e012      	b.n	800a06a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	3308      	adds	r3, #8
 800a04e:	2201      	movs	r2, #1
 800a050:	4619      	mov	r1, r3
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 f93c 	bl	800a2d0 <USBD_CtlSendData>
        break;
 800a058:	e00c      	b.n	800a074 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	3304      	adds	r3, #4
 800a05e:	2201      	movs	r2, #1
 800a060:	4619      	mov	r1, r3
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f934 	bl	800a2d0 <USBD_CtlSendData>
        break;
 800a068:	e004      	b.n	800a074 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a06a:	6839      	ldr	r1, [r7, #0]
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f8be 	bl	800a1ee <USBD_CtlError>
        break;
 800a072:	bf00      	nop
}
 800a074:	bf00      	nop
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	3b01      	subs	r3, #1
 800a090:	2b02      	cmp	r3, #2
 800a092:	d81e      	bhi.n	800a0d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	88db      	ldrh	r3, [r3, #6]
 800a098:	2b02      	cmp	r3, #2
 800a09a:	d004      	beq.n	800a0a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a09c:	6839      	ldr	r1, [r7, #0]
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 f8a5 	bl	800a1ee <USBD_CtlError>
        break;
 800a0a4:	e01a      	b.n	800a0dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d005      	beq.n	800a0c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	f043 0202 	orr.w	r2, r3, #2
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	330c      	adds	r3, #12
 800a0c6:	2202      	movs	r2, #2
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 f900 	bl	800a2d0 <USBD_CtlSendData>
      break;
 800a0d0:	e004      	b.n	800a0dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a0d2:	6839      	ldr	r1, [r7, #0]
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 f88a 	bl	800a1ee <USBD_CtlError>
      break;
 800a0da:	bf00      	nop
  }
}
 800a0dc:	bf00      	nop
 800a0de:	3708      	adds	r7, #8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	885b      	ldrh	r3, [r3, #2]
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d107      	bne.n	800a106 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f940 	bl	800a384 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a104:	e013      	b.n	800a12e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	885b      	ldrh	r3, [r3, #2]
 800a10a:	2b02      	cmp	r3, #2
 800a10c:	d10b      	bne.n	800a126 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	889b      	ldrh	r3, [r3, #4]
 800a112:	0a1b      	lsrs	r3, r3, #8
 800a114:	b29b      	uxth	r3, r3
 800a116:	b2da      	uxtb	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 f930 	bl	800a384 <USBD_CtlSendStatus>
}
 800a124:	e003      	b.n	800a12e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a126:	6839      	ldr	r1, [r7, #0]
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 f860 	bl	800a1ee <USBD_CtlError>
}
 800a12e:	bf00      	nop
 800a130:	3708      	adds	r7, #8
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a136:	b580      	push	{r7, lr}
 800a138:	b082      	sub	sp, #8
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
 800a13e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a146:	b2db      	uxtb	r3, r3
 800a148:	3b01      	subs	r3, #1
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d80b      	bhi.n	800a166 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	885b      	ldrh	r3, [r3, #2]
 800a152:	2b01      	cmp	r3, #1
 800a154:	d10c      	bne.n	800a170 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 f910 	bl	800a384 <USBD_CtlSendStatus>
      }
      break;
 800a164:	e004      	b.n	800a170 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a166:	6839      	ldr	r1, [r7, #0]
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 f840 	bl	800a1ee <USBD_CtlError>
      break;
 800a16e:	e000      	b.n	800a172 <USBD_ClrFeature+0x3c>
      break;
 800a170:	bf00      	nop
  }
}
 800a172:	bf00      	nop
 800a174:	3708      	adds	r7, #8
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b084      	sub	sp, #16
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
 800a182:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	781a      	ldrb	r2, [r3, #0]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	3301      	adds	r3, #1
 800a194:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	781a      	ldrb	r2, [r3, #0]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f7ff fa40 	bl	800962a <SWAPBYTE>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	f7ff fa33 	bl	800962a <SWAPBYTE>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f7ff fa26 	bl	800962a <SWAPBYTE>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	80da      	strh	r2, [r3, #6]
}
 800a1e6:	bf00      	nop
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b082      	sub	sp, #8
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
 800a1f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1f8:	2180      	movs	r1, #128	@ 0x80
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 fc4a 	bl	800aa94 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a200:	2100      	movs	r1, #0
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 fc46 	bl	800aa94 <USBD_LL_StallEP>
}
 800a208:	bf00      	nop
 800a20a:	3708      	adds	r7, #8
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b086      	sub	sp, #24
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a21c:	2300      	movs	r3, #0
 800a21e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d036      	beq.n	800a294 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a22a:	6938      	ldr	r0, [r7, #16]
 800a22c:	f000 f836 	bl	800a29c <USBD_GetLen>
 800a230:	4603      	mov	r3, r0
 800a232:	3301      	adds	r3, #1
 800a234:	b29b      	uxth	r3, r3
 800a236:	005b      	lsls	r3, r3, #1
 800a238:	b29a      	uxth	r2, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a23e:	7dfb      	ldrb	r3, [r7, #23]
 800a240:	68ba      	ldr	r2, [r7, #8]
 800a242:	4413      	add	r3, r2
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	7812      	ldrb	r2, [r2, #0]
 800a248:	701a      	strb	r2, [r3, #0]
  idx++;
 800a24a:	7dfb      	ldrb	r3, [r7, #23]
 800a24c:	3301      	adds	r3, #1
 800a24e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a250:	7dfb      	ldrb	r3, [r7, #23]
 800a252:	68ba      	ldr	r2, [r7, #8]
 800a254:	4413      	add	r3, r2
 800a256:	2203      	movs	r2, #3
 800a258:	701a      	strb	r2, [r3, #0]
  idx++;
 800a25a:	7dfb      	ldrb	r3, [r7, #23]
 800a25c:	3301      	adds	r3, #1
 800a25e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a260:	e013      	b.n	800a28a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a262:	7dfb      	ldrb	r3, [r7, #23]
 800a264:	68ba      	ldr	r2, [r7, #8]
 800a266:	4413      	add	r3, r2
 800a268:	693a      	ldr	r2, [r7, #16]
 800a26a:	7812      	ldrb	r2, [r2, #0]
 800a26c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	3301      	adds	r3, #1
 800a272:	613b      	str	r3, [r7, #16]
    idx++;
 800a274:	7dfb      	ldrb	r3, [r7, #23]
 800a276:	3301      	adds	r3, #1
 800a278:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a27a:	7dfb      	ldrb	r3, [r7, #23]
 800a27c:	68ba      	ldr	r2, [r7, #8]
 800a27e:	4413      	add	r3, r2
 800a280:	2200      	movs	r2, #0
 800a282:	701a      	strb	r2, [r3, #0]
    idx++;
 800a284:	7dfb      	ldrb	r3, [r7, #23]
 800a286:	3301      	adds	r3, #1
 800a288:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d1e7      	bne.n	800a262 <USBD_GetString+0x52>
 800a292:	e000      	b.n	800a296 <USBD_GetString+0x86>
    return;
 800a294:	bf00      	nop
  }
}
 800a296:	3718      	adds	r7, #24
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a2ac:	e005      	b.n	800a2ba <USBD_GetLen+0x1e>
  {
    len++;
 800a2ae:	7bfb      	ldrb	r3, [r7, #15]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d1f5      	bne.n	800a2ae <USBD_GetLen+0x12>
  }

  return len;
 800a2c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3714      	adds	r7, #20
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2202      	movs	r2, #2
 800a2e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	68f8      	ldr	r0, [r7, #12]
 800a2f8:	f000 fc55 	bl	800aba6 <USBD_LL_Transmit>

  return USBD_OK;
 800a2fc:	2300      	movs	r3, #0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3710      	adds	r7, #16
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}

0800a306 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a306:	b580      	push	{r7, lr}
 800a308:	b084      	sub	sp, #16
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	60f8      	str	r0, [r7, #12]
 800a30e:	60b9      	str	r1, [r7, #8]
 800a310:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	68ba      	ldr	r2, [r7, #8]
 800a316:	2100      	movs	r1, #0
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f000 fc44 	bl	800aba6 <USBD_LL_Transmit>

  return USBD_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	3710      	adds	r7, #16
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	60b9      	str	r1, [r7, #8]
 800a332:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2203      	movs	r2, #3
 800a338:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	68ba      	ldr	r2, [r7, #8]
 800a350:	2100      	movs	r1, #0
 800a352:	68f8      	ldr	r0, [r7, #12]
 800a354:	f000 fc48 	bl	800abe8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b084      	sub	sp, #16
 800a366:	af00      	add	r7, sp, #0
 800a368:	60f8      	str	r0, [r7, #12]
 800a36a:	60b9      	str	r1, [r7, #8]
 800a36c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	68ba      	ldr	r2, [r7, #8]
 800a372:	2100      	movs	r1, #0
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f000 fc37 	bl	800abe8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a37a:	2300      	movs	r3, #0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3710      	adds	r7, #16
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2204      	movs	r2, #4
 800a390:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a394:	2300      	movs	r3, #0
 800a396:	2200      	movs	r2, #0
 800a398:	2100      	movs	r1, #0
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 fc03 	bl	800aba6 <USBD_LL_Transmit>

  return USBD_OK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3708      	adds	r7, #8
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b082      	sub	sp, #8
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2205      	movs	r2, #5
 800a3b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	2200      	movs	r2, #0
 800a3be:	2100      	movs	r1, #0
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f000 fc11 	bl	800abe8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3708      	adds	r7, #8
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	4912      	ldr	r1, [pc, #72]	@ (800a420 <MX_USB_DEVICE_Init+0x50>)
 800a3d8:	4812      	ldr	r0, [pc, #72]	@ (800a424 <MX_USB_DEVICE_Init+0x54>)
 800a3da:	f7fe fd03 	bl	8008de4 <USBD_Init>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d001      	beq.n	800a3e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a3e4:	f7f7 fb56 	bl	8001a94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800a3e8:	490f      	ldr	r1, [pc, #60]	@ (800a428 <MX_USB_DEVICE_Init+0x58>)
 800a3ea:	480e      	ldr	r0, [pc, #56]	@ (800a424 <MX_USB_DEVICE_Init+0x54>)
 800a3ec:	f7fe fd2a 	bl	8008e44 <USBD_RegisterClass>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d001      	beq.n	800a3fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a3f6:	f7f7 fb4d 	bl	8001a94 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800a3fa:	490c      	ldr	r1, [pc, #48]	@ (800a42c <MX_USB_DEVICE_Init+0x5c>)
 800a3fc:	4809      	ldr	r0, [pc, #36]	@ (800a424 <MX_USB_DEVICE_Init+0x54>)
 800a3fe:	f7fe fcd7 	bl	8008db0 <USBD_CUSTOM_HID_RegisterInterface>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d001      	beq.n	800a40c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a408:	f7f7 fb44 	bl	8001a94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a40c:	4805      	ldr	r0, [pc, #20]	@ (800a424 <MX_USB_DEVICE_Init+0x54>)
 800a40e:	f7fe fd4f 	bl	8008eb0 <USBD_Start>
 800a412:	4603      	mov	r3, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	d001      	beq.n	800a41c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a418:	f7f7 fb3c 	bl	8001a94 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a41c:	bf00      	nop
 800a41e:	bd80      	pop	{r7, pc}
 800a420:	200000bc 	.word	0x200000bc
 800a424:	200006a4 	.word	0x200006a4
 800a428:	2000000c 	.word	0x2000000c
 800a42c:	200000ac 	.word	0x200000ac

0800a430 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800a430:	b480      	push	{r7}
 800a432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a434:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a436:	4618      	mov	r0, r3
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800a440:	b480      	push	{r7}
 800a442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800a444:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a446:	4618      	mov	r0, r3
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800a450:	b4f0      	push	{r4, r5, r6, r7}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	4603      	mov	r3, r0
 800a458:	460a      	mov	r2, r1
 800a45a:	71fb      	strb	r3, [r7, #7]
 800a45c:	4613      	mov	r3, r2
 800a45e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */

	memcpy(report_buffer, state, 64);
 800a460:	79bb      	ldrb	r3, [r7, #6]
 800a462:	4a0e      	ldr	r2, [pc, #56]	@ (800a49c <CUSTOM_HID_OutEvent_FS+0x4c>)
 800a464:	4610      	mov	r0, r2
 800a466:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800a46a:	4602      	mov	r2, r0
 800a46c:	4619      	mov	r1, r3
 800a46e:	f8d1 c000 	ldr.w	ip, [r1]
 800a472:	684e      	ldr	r6, [r1, #4]
 800a474:	688d      	ldr	r5, [r1, #8]
 800a476:	68c9      	ldr	r1, [r1, #12]
 800a478:	f8c2 c000 	str.w	ip, [r2]
 800a47c:	6056      	str	r6, [r2, #4]
 800a47e:	6095      	str	r5, [r2, #8]
 800a480:	60d1      	str	r1, [r2, #12]
 800a482:	3310      	adds	r3, #16
 800a484:	3010      	adds	r0, #16
 800a486:	42a3      	cmp	r3, r4
 800a488:	d1ef      	bne.n	800a46a <CUSTOM_HID_OutEvent_FS+0x1a>

	flag_rx = 1;
 800a48a:	4b05      	ldr	r3, [pc, #20]	@ (800a4a0 <CUSTOM_HID_OutEvent_FS+0x50>)
 800a48c:	2201      	movs	r2, #1
 800a48e:	701a      	strb	r2, [r3, #0]

	return (USBD_OK);
 800a490:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a492:	4618      	mov	r0, r3
 800a494:	3708      	adds	r7, #8
 800a496:	46bd      	mov	sp, r7
 800a498:	bcf0      	pop	{r4, r5, r6, r7}
 800a49a:	4770      	bx	lr
 800a49c:	20000334 	.word	0x20000334
 800a4a0:	20000375 	.word	0x20000375

0800a4a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	6039      	str	r1, [r7, #0]
 800a4ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	2212      	movs	r2, #18
 800a4b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a4b6:	4b03      	ldr	r3, [pc, #12]	@ (800a4c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr
 800a4c4:	200000d8 	.word	0x200000d8

0800a4c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	6039      	str	r1, [r7, #0]
 800a4d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	2204      	movs	r2, #4
 800a4d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a4da:	4b03      	ldr	r3, [pc, #12]	@ (800a4e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	370c      	adds	r7, #12
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr
 800a4e8:	200000ec 	.word	0x200000ec

0800a4ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	6039      	str	r1, [r7, #0]
 800a4f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a4f8:	79fb      	ldrb	r3, [r7, #7]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d105      	bne.n	800a50a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a4fe:	683a      	ldr	r2, [r7, #0]
 800a500:	4907      	ldr	r1, [pc, #28]	@ (800a520 <USBD_FS_ProductStrDescriptor+0x34>)
 800a502:	4808      	ldr	r0, [pc, #32]	@ (800a524 <USBD_FS_ProductStrDescriptor+0x38>)
 800a504:	f7ff fe84 	bl	800a210 <USBD_GetString>
 800a508:	e004      	b.n	800a514 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a50a:	683a      	ldr	r2, [r7, #0]
 800a50c:	4904      	ldr	r1, [pc, #16]	@ (800a520 <USBD_FS_ProductStrDescriptor+0x34>)
 800a50e:	4805      	ldr	r0, [pc, #20]	@ (800a524 <USBD_FS_ProductStrDescriptor+0x38>)
 800a510:	f7ff fe7e 	bl	800a210 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a514:	4b02      	ldr	r3, [pc, #8]	@ (800a520 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a516:	4618      	mov	r0, r3
 800a518:	3708      	adds	r7, #8
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	20000980 	.word	0x20000980
 800a524:	0800d690 	.word	0x0800d690

0800a528 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	4603      	mov	r3, r0
 800a530:	6039      	str	r1, [r7, #0]
 800a532:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a534:	683a      	ldr	r2, [r7, #0]
 800a536:	4904      	ldr	r1, [pc, #16]	@ (800a548 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a538:	4804      	ldr	r0, [pc, #16]	@ (800a54c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a53a:	f7ff fe69 	bl	800a210 <USBD_GetString>
  return USBD_StrDesc;
 800a53e:	4b02      	ldr	r3, [pc, #8]	@ (800a548 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a540:	4618      	mov	r0, r3
 800a542:	3708      	adds	r7, #8
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	20000980 	.word	0x20000980
 800a54c:	0800d6b0 	.word	0x0800d6b0

0800a550 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
 800a556:	4603      	mov	r3, r0
 800a558:	6039      	str	r1, [r7, #0]
 800a55a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	221a      	movs	r2, #26
 800a560:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a562:	f000 f843 	bl	800a5ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a566:	4b02      	ldr	r3, [pc, #8]	@ (800a570 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3708      	adds	r7, #8
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	200000f0 	.word	0x200000f0

0800a574 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	4603      	mov	r3, r0
 800a57c:	6039      	str	r1, [r7, #0]
 800a57e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a580:	79fb      	ldrb	r3, [r7, #7]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d105      	bne.n	800a592 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a586:	683a      	ldr	r2, [r7, #0]
 800a588:	4907      	ldr	r1, [pc, #28]	@ (800a5a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a58a:	4808      	ldr	r0, [pc, #32]	@ (800a5ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800a58c:	f7ff fe40 	bl	800a210 <USBD_GetString>
 800a590:	e004      	b.n	800a59c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a592:	683a      	ldr	r2, [r7, #0]
 800a594:	4904      	ldr	r1, [pc, #16]	@ (800a5a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a596:	4805      	ldr	r0, [pc, #20]	@ (800a5ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800a598:	f7ff fe3a 	bl	800a210 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a59c:	4b02      	ldr	r3, [pc, #8]	@ (800a5a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3708      	adds	r7, #8
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	20000980 	.word	0x20000980
 800a5ac:	0800d6c4 	.word	0x0800d6c4

0800a5b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	6039      	str	r1, [r7, #0]
 800a5ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a5bc:	79fb      	ldrb	r3, [r7, #7]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d105      	bne.n	800a5ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a5c2:	683a      	ldr	r2, [r7, #0]
 800a5c4:	4907      	ldr	r1, [pc, #28]	@ (800a5e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a5c6:	4808      	ldr	r0, [pc, #32]	@ (800a5e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a5c8:	f7ff fe22 	bl	800a210 <USBD_GetString>
 800a5cc:	e004      	b.n	800a5d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a5ce:	683a      	ldr	r2, [r7, #0]
 800a5d0:	4904      	ldr	r1, [pc, #16]	@ (800a5e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a5d2:	4805      	ldr	r0, [pc, #20]	@ (800a5e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a5d4:	f7ff fe1c 	bl	800a210 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5d8:	4b02      	ldr	r3, [pc, #8]	@ (800a5e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3708      	adds	r7, #8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	20000980 	.word	0x20000980
 800a5e8:	0800d6d8 	.word	0x0800d6d8

0800a5ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b084      	sub	sp, #16
 800a5f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a5f2:	4b0f      	ldr	r3, [pc, #60]	@ (800a630 <Get_SerialNum+0x44>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a5f8:	4b0e      	ldr	r3, [pc, #56]	@ (800a634 <Get_SerialNum+0x48>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a5fe:	4b0e      	ldr	r3, [pc, #56]	@ (800a638 <Get_SerialNum+0x4c>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a604:	68fa      	ldr	r2, [r7, #12]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	4413      	add	r3, r2
 800a60a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d009      	beq.n	800a626 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a612:	2208      	movs	r2, #8
 800a614:	4909      	ldr	r1, [pc, #36]	@ (800a63c <Get_SerialNum+0x50>)
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f000 f814 	bl	800a644 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a61c:	2204      	movs	r2, #4
 800a61e:	4908      	ldr	r1, [pc, #32]	@ (800a640 <Get_SerialNum+0x54>)
 800a620:	68b8      	ldr	r0, [r7, #8]
 800a622:	f000 f80f 	bl	800a644 <IntToUnicode>
  }
}
 800a626:	bf00      	nop
 800a628:	3710      	adds	r7, #16
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	1fff7a10 	.word	0x1fff7a10
 800a634:	1fff7a14 	.word	0x1fff7a14
 800a638:	1fff7a18 	.word	0x1fff7a18
 800a63c:	200000f2 	.word	0x200000f2
 800a640:	20000102 	.word	0x20000102

0800a644 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a644:	b480      	push	{r7}
 800a646:	b087      	sub	sp, #28
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	4613      	mov	r3, r2
 800a650:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a652:	2300      	movs	r3, #0
 800a654:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a656:	2300      	movs	r3, #0
 800a658:	75fb      	strb	r3, [r7, #23]
 800a65a:	e027      	b.n	800a6ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	0f1b      	lsrs	r3, r3, #28
 800a660:	2b09      	cmp	r3, #9
 800a662:	d80b      	bhi.n	800a67c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	0f1b      	lsrs	r3, r3, #28
 800a668:	b2da      	uxtb	r2, r3
 800a66a:	7dfb      	ldrb	r3, [r7, #23]
 800a66c:	005b      	lsls	r3, r3, #1
 800a66e:	4619      	mov	r1, r3
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	440b      	add	r3, r1
 800a674:	3230      	adds	r2, #48	@ 0x30
 800a676:	b2d2      	uxtb	r2, r2
 800a678:	701a      	strb	r2, [r3, #0]
 800a67a:	e00a      	b.n	800a692 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	0f1b      	lsrs	r3, r3, #28
 800a680:	b2da      	uxtb	r2, r3
 800a682:	7dfb      	ldrb	r3, [r7, #23]
 800a684:	005b      	lsls	r3, r3, #1
 800a686:	4619      	mov	r1, r3
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	440b      	add	r3, r1
 800a68c:	3237      	adds	r2, #55	@ 0x37
 800a68e:	b2d2      	uxtb	r2, r2
 800a690:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	011b      	lsls	r3, r3, #4
 800a696:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a698:	7dfb      	ldrb	r3, [r7, #23]
 800a69a:	005b      	lsls	r3, r3, #1
 800a69c:	3301      	adds	r3, #1
 800a69e:	68ba      	ldr	r2, [r7, #8]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a6a6:	7dfb      	ldrb	r3, [r7, #23]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	75fb      	strb	r3, [r7, #23]
 800a6ac:	7dfa      	ldrb	r2, [r7, #23]
 800a6ae:	79fb      	ldrb	r3, [r7, #7]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d3d3      	bcc.n	800a65c <IntToUnicode+0x18>
  }
}
 800a6b4:	bf00      	nop
 800a6b6:	bf00      	nop
 800a6b8:	371c      	adds	r7, #28
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr
	...

0800a6c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b08a      	sub	sp, #40	@ 0x28
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6cc:	f107 0314 	add.w	r3, r7, #20
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	601a      	str	r2, [r3, #0]
 800a6d4:	605a      	str	r2, [r3, #4]
 800a6d6:	609a      	str	r2, [r3, #8]
 800a6d8:	60da      	str	r2, [r3, #12]
 800a6da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a6e4:	d13a      	bne.n	800a75c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	613b      	str	r3, [r7, #16]
 800a6ea:	4b1e      	ldr	r3, [pc, #120]	@ (800a764 <HAL_PCD_MspInit+0xa0>)
 800a6ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6ee:	4a1d      	ldr	r2, [pc, #116]	@ (800a764 <HAL_PCD_MspInit+0xa0>)
 800a6f0:	f043 0301 	orr.w	r3, r3, #1
 800a6f4:	6313      	str	r3, [r2, #48]	@ 0x30
 800a6f6:	4b1b      	ldr	r3, [pc, #108]	@ (800a764 <HAL_PCD_MspInit+0xa0>)
 800a6f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6fa:	f003 0301 	and.w	r3, r3, #1
 800a6fe:	613b      	str	r3, [r7, #16]
 800a700:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a702:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a708:	2302      	movs	r3, #2
 800a70a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a70c:	2300      	movs	r3, #0
 800a70e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a710:	2303      	movs	r3, #3
 800a712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a714:	230a      	movs	r3, #10
 800a716:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a718:	f107 0314 	add.w	r3, r7, #20
 800a71c:	4619      	mov	r1, r3
 800a71e:	4812      	ldr	r0, [pc, #72]	@ (800a768 <HAL_PCD_MspInit+0xa4>)
 800a720:	f7f8 f8b6 	bl	8002890 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a724:	4b0f      	ldr	r3, [pc, #60]	@ (800a764 <HAL_PCD_MspInit+0xa0>)
 800a726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a728:	4a0e      	ldr	r2, [pc, #56]	@ (800a764 <HAL_PCD_MspInit+0xa0>)
 800a72a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a72e:	6353      	str	r3, [r2, #52]	@ 0x34
 800a730:	2300      	movs	r3, #0
 800a732:	60fb      	str	r3, [r7, #12]
 800a734:	4b0b      	ldr	r3, [pc, #44]	@ (800a764 <HAL_PCD_MspInit+0xa0>)
 800a736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a738:	4a0a      	ldr	r2, [pc, #40]	@ (800a764 <HAL_PCD_MspInit+0xa0>)
 800a73a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a73e:	6453      	str	r3, [r2, #68]	@ 0x44
 800a740:	4b08      	ldr	r3, [pc, #32]	@ (800a764 <HAL_PCD_MspInit+0xa0>)
 800a742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a748:	60fb      	str	r3, [r7, #12]
 800a74a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a74c:	2200      	movs	r2, #0
 800a74e:	2100      	movs	r1, #0
 800a750:	2043      	movs	r0, #67	@ 0x43
 800a752:	f7f8 f866 	bl	8002822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a756:	2043      	movs	r0, #67	@ 0x43
 800a758:	f7f8 f87f 	bl	800285a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a75c:	bf00      	nop
 800a75e:	3728      	adds	r7, #40	@ 0x28
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	40023800 	.word	0x40023800
 800a768:	40020000 	.word	0x40020000

0800a76c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a780:	4619      	mov	r1, r3
 800a782:	4610      	mov	r0, r2
 800a784:	f7fe fbe1 	bl	8008f4a <USBD_LL_SetupStage>
}
 800a788:	bf00      	nop
 800a78a:	3708      	adds	r7, #8
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	460b      	mov	r3, r1
 800a79a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a7a2:	78fa      	ldrb	r2, [r7, #3]
 800a7a4:	6879      	ldr	r1, [r7, #4]
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	00db      	lsls	r3, r3, #3
 800a7aa:	4413      	add	r3, r2
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	440b      	add	r3, r1
 800a7b0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	78fb      	ldrb	r3, [r7, #3]
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	f7fe fc1b 	bl	8008ff4 <USBD_LL_DataOutStage>
}
 800a7be:	bf00      	nop
 800a7c0:	3708      	adds	r7, #8
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b082      	sub	sp, #8
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a7d8:	78fa      	ldrb	r2, [r7, #3]
 800a7da:	6879      	ldr	r1, [r7, #4]
 800a7dc:	4613      	mov	r3, r2
 800a7de:	00db      	lsls	r3, r3, #3
 800a7e0:	4413      	add	r3, r2
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	440b      	add	r3, r1
 800a7e6:	3320      	adds	r3, #32
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	78fb      	ldrb	r3, [r7, #3]
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	f7fe fcb4 	bl	800915a <USBD_LL_DataInStage>
}
 800a7f2:	bf00      	nop
 800a7f4:	3708      	adds	r7, #8
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}

0800a7fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7fa:	b580      	push	{r7, lr}
 800a7fc:	b082      	sub	sp, #8
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a808:	4618      	mov	r0, r3
 800a80a:	f7fe fdee 	bl	80093ea <USBD_LL_SOF>
}
 800a80e:	bf00      	nop
 800a810:	3708      	adds	r7, #8
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a816:	b580      	push	{r7, lr}
 800a818:	b084      	sub	sp, #16
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a81e:	2301      	movs	r3, #1
 800a820:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	79db      	ldrb	r3, [r3, #7]
 800a826:	2b02      	cmp	r3, #2
 800a828:	d001      	beq.n	800a82e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a82a:	f7f7 f933 	bl	8001a94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a834:	7bfa      	ldrb	r2, [r7, #15]
 800a836:	4611      	mov	r1, r2
 800a838:	4618      	mov	r0, r3
 800a83a:	f7fe fd92 	bl	8009362 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a844:	4618      	mov	r0, r3
 800a846:	f7fe fd3a 	bl	80092be <USBD_LL_Reset>
}
 800a84a:	bf00      	nop
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
	...

0800a854 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a862:	4618      	mov	r0, r3
 800a864:	f7fe fd8d 	bl	8009382 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	6812      	ldr	r2, [r2, #0]
 800a876:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a87a:	f043 0301 	orr.w	r3, r3, #1
 800a87e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	7adb      	ldrb	r3, [r3, #11]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d005      	beq.n	800a894 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a888:	4b04      	ldr	r3, [pc, #16]	@ (800a89c <HAL_PCD_SuspendCallback+0x48>)
 800a88a:	691b      	ldr	r3, [r3, #16]
 800a88c:	4a03      	ldr	r2, [pc, #12]	@ (800a89c <HAL_PCD_SuspendCallback+0x48>)
 800a88e:	f043 0306 	orr.w	r3, r3, #6
 800a892:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a894:	bf00      	nop
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	e000ed00 	.word	0xe000ed00

0800a8a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7fe fd83 	bl	80093ba <USBD_LL_Resume>
}
 800a8b4:	bf00      	nop
 800a8b6:	3708      	adds	r7, #8
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b082      	sub	sp, #8
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a8ce:	78fa      	ldrb	r2, [r7, #3]
 800a8d0:	4611      	mov	r1, r2
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7fe fddb 	bl	800948e <USBD_LL_IsoOUTIncomplete>
}
 800a8d8:	bf00      	nop
 800a8da:	3708      	adds	r7, #8
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a8f2:	78fa      	ldrb	r2, [r7, #3]
 800a8f4:	4611      	mov	r1, r2
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7fe fd97 	bl	800942a <USBD_LL_IsoINIncomplete>
}
 800a8fc:	bf00      	nop
 800a8fe:	3708      	adds	r7, #8
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a912:	4618      	mov	r0, r3
 800a914:	f7fe fded 	bl	80094f2 <USBD_LL_DevConnected>
}
 800a918:	bf00      	nop
 800a91a:	3708      	adds	r7, #8
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a92e:	4618      	mov	r0, r3
 800a930:	f7fe fdea 	bl	8009508 <USBD_LL_DevDisconnected>
}
 800a934:	bf00      	nop
 800a936:	3708      	adds	r7, #8
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d13c      	bne.n	800a9c6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a94c:	4a20      	ldr	r2, [pc, #128]	@ (800a9d0 <USBD_LL_Init+0x94>)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	4a1e      	ldr	r2, [pc, #120]	@ (800a9d0 <USBD_LL_Init+0x94>)
 800a958:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a95c:	4b1c      	ldr	r3, [pc, #112]	@ (800a9d0 <USBD_LL_Init+0x94>)
 800a95e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a962:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a964:	4b1a      	ldr	r3, [pc, #104]	@ (800a9d0 <USBD_LL_Init+0x94>)
 800a966:	2204      	movs	r2, #4
 800a968:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a96a:	4b19      	ldr	r3, [pc, #100]	@ (800a9d0 <USBD_LL_Init+0x94>)
 800a96c:	2202      	movs	r2, #2
 800a96e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a970:	4b17      	ldr	r3, [pc, #92]	@ (800a9d0 <USBD_LL_Init+0x94>)
 800a972:	2200      	movs	r2, #0
 800a974:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a976:	4b16      	ldr	r3, [pc, #88]	@ (800a9d0 <USBD_LL_Init+0x94>)
 800a978:	2202      	movs	r2, #2
 800a97a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a97c:	4b14      	ldr	r3, [pc, #80]	@ (800a9d0 <USBD_LL_Init+0x94>)
 800a97e:	2200      	movs	r2, #0
 800a980:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a982:	4b13      	ldr	r3, [pc, #76]	@ (800a9d0 <USBD_LL_Init+0x94>)
 800a984:	2200      	movs	r2, #0
 800a986:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a988:	4b11      	ldr	r3, [pc, #68]	@ (800a9d0 <USBD_LL_Init+0x94>)
 800a98a:	2200      	movs	r2, #0
 800a98c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a98e:	4b10      	ldr	r3, [pc, #64]	@ (800a9d0 <USBD_LL_Init+0x94>)
 800a990:	2200      	movs	r2, #0
 800a992:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a994:	4b0e      	ldr	r3, [pc, #56]	@ (800a9d0 <USBD_LL_Init+0x94>)
 800a996:	2200      	movs	r2, #0
 800a998:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a99a:	480d      	ldr	r0, [pc, #52]	@ (800a9d0 <USBD_LL_Init+0x94>)
 800a99c:	f7f9 f928 	bl	8003bf0 <HAL_PCD_Init>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d001      	beq.n	800a9aa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a9a6:	f7f7 f875 	bl	8001a94 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a9aa:	2180      	movs	r1, #128	@ 0x80
 800a9ac:	4808      	ldr	r0, [pc, #32]	@ (800a9d0 <USBD_LL_Init+0x94>)
 800a9ae:	f7fa fb3a 	bl	8005026 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a9b2:	2240      	movs	r2, #64	@ 0x40
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	4806      	ldr	r0, [pc, #24]	@ (800a9d0 <USBD_LL_Init+0x94>)
 800a9b8:	f7fa faee 	bl	8004f98 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a9bc:	2280      	movs	r2, #128	@ 0x80
 800a9be:	2101      	movs	r1, #1
 800a9c0:	4803      	ldr	r0, [pc, #12]	@ (800a9d0 <USBD_LL_Init+0x94>)
 800a9c2:	f7fa fae9 	bl	8004f98 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3708      	adds	r7, #8
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	20000b80 	.word	0x20000b80

0800a9d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7f9 fa0f 	bl	8003e0e <HAL_PCD_Start>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9f4:	7bfb      	ldrb	r3, [r7, #15]
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f000 f930 	bl	800ac5c <USBD_Get_USB_Status>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa00:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b084      	sub	sp, #16
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
 800aa12:	4608      	mov	r0, r1
 800aa14:	4611      	mov	r1, r2
 800aa16:	461a      	mov	r2, r3
 800aa18:	4603      	mov	r3, r0
 800aa1a:	70fb      	strb	r3, [r7, #3]
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	70bb      	strb	r3, [r7, #2]
 800aa20:	4613      	mov	r3, r2
 800aa22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa24:	2300      	movs	r3, #0
 800aa26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aa32:	78bb      	ldrb	r3, [r7, #2]
 800aa34:	883a      	ldrh	r2, [r7, #0]
 800aa36:	78f9      	ldrb	r1, [r7, #3]
 800aa38:	f7f9 fee3 	bl	8004802 <HAL_PCD_EP_Open>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa40:	7bfb      	ldrb	r3, [r7, #15]
 800aa42:	4618      	mov	r0, r3
 800aa44:	f000 f90a 	bl	800ac5c <USBD_Get_USB_Status>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3710      	adds	r7, #16
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b084      	sub	sp, #16
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
 800aa5e:	460b      	mov	r3, r1
 800aa60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa62:	2300      	movs	r3, #0
 800aa64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa66:	2300      	movs	r3, #0
 800aa68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa70:	78fa      	ldrb	r2, [r7, #3]
 800aa72:	4611      	mov	r1, r2
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7f9 ff2c 	bl	80048d2 <HAL_PCD_EP_Close>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa7e:	7bfb      	ldrb	r3, [r7, #15]
 800aa80:	4618      	mov	r0, r3
 800aa82:	f000 f8eb 	bl	800ac5c <USBD_Get_USB_Status>
 800aa86:	4603      	mov	r3, r0
 800aa88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3710      	adds	r7, #16
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aaae:	78fa      	ldrb	r2, [r7, #3]
 800aab0:	4611      	mov	r1, r2
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7f9 ffcc 	bl	8004a50 <HAL_PCD_EP_SetStall>
 800aab8:	4603      	mov	r3, r0
 800aaba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aabc:	7bfb      	ldrb	r3, [r7, #15]
 800aabe:	4618      	mov	r0, r3
 800aac0:	f000 f8cc 	bl	800ac5c <USBD_Get_USB_Status>
 800aac4:	4603      	mov	r3, r0
 800aac6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aac8:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3710      	adds	r7, #16
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b084      	sub	sp, #16
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
 800aada:	460b      	mov	r3, r1
 800aadc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aade:	2300      	movs	r3, #0
 800aae0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aae2:	2300      	movs	r3, #0
 800aae4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aaec:	78fa      	ldrb	r2, [r7, #3]
 800aaee:	4611      	mov	r1, r2
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7fa f810 	bl	8004b16 <HAL_PCD_EP_ClrStall>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aafa:	7bfb      	ldrb	r3, [r7, #15]
 800aafc:	4618      	mov	r0, r3
 800aafe:	f000 f8ad 	bl	800ac5c <USBD_Get_USB_Status>
 800ab02:	4603      	mov	r3, r0
 800ab04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab06:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3710      	adds	r7, #16
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	460b      	mov	r3, r1
 800ab1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ab24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	da0b      	bge.n	800ab44 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ab2c:	78fb      	ldrb	r3, [r7, #3]
 800ab2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab32:	68f9      	ldr	r1, [r7, #12]
 800ab34:	4613      	mov	r3, r2
 800ab36:	00db      	lsls	r3, r3, #3
 800ab38:	4413      	add	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	440b      	add	r3, r1
 800ab3e:	3316      	adds	r3, #22
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	e00b      	b.n	800ab5c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ab44:	78fb      	ldrb	r3, [r7, #3]
 800ab46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab4a:	68f9      	ldr	r1, [r7, #12]
 800ab4c:	4613      	mov	r3, r2
 800ab4e:	00db      	lsls	r3, r3, #3
 800ab50:	4413      	add	r3, r2
 800ab52:	009b      	lsls	r3, r3, #2
 800ab54:	440b      	add	r3, r1
 800ab56:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ab5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3714      	adds	r7, #20
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	460b      	mov	r3, r1
 800ab72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab74:	2300      	movs	r3, #0
 800ab76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab82:	78fa      	ldrb	r2, [r7, #3]
 800ab84:	4611      	mov	r1, r2
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7f9 fe17 	bl	80047ba <HAL_PCD_SetAddress>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab90:	7bfb      	ldrb	r3, [r7, #15]
 800ab92:	4618      	mov	r0, r3
 800ab94:	f000 f862 	bl	800ac5c <USBD_Get_USB_Status>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b086      	sub	sp, #24
 800abaa:	af00      	add	r7, sp, #0
 800abac:	60f8      	str	r0, [r7, #12]
 800abae:	607a      	str	r2, [r7, #4]
 800abb0:	603b      	str	r3, [r7, #0]
 800abb2:	460b      	mov	r3, r1
 800abb4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abb6:	2300      	movs	r3, #0
 800abb8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abba:	2300      	movs	r3, #0
 800abbc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800abc4:	7af9      	ldrb	r1, [r7, #11]
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	f7f9 ff07 	bl	80049dc <HAL_PCD_EP_Transmit>
 800abce:	4603      	mov	r3, r0
 800abd0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abd2:	7dfb      	ldrb	r3, [r7, #23]
 800abd4:	4618      	mov	r0, r3
 800abd6:	f000 f841 	bl	800ac5c <USBD_Get_USB_Status>
 800abda:	4603      	mov	r3, r0
 800abdc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800abde:	7dbb      	ldrb	r3, [r7, #22]
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3718      	adds	r7, #24
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b086      	sub	sp, #24
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	607a      	str	r2, [r7, #4]
 800abf2:	603b      	str	r3, [r7, #0]
 800abf4:	460b      	mov	r3, r1
 800abf6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abf8:	2300      	movs	r3, #0
 800abfa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abfc:	2300      	movs	r3, #0
 800abfe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ac06:	7af9      	ldrb	r1, [r7, #11]
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	f7f9 feab 	bl	8004966 <HAL_PCD_EP_Receive>
 800ac10:	4603      	mov	r3, r0
 800ac12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac14:	7dfb      	ldrb	r3, [r7, #23]
 800ac16:	4618      	mov	r0, r3
 800ac18:	f000 f820 	bl	800ac5c <USBD_Get_USB_Status>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac20:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3718      	adds	r7, #24
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
	...

0800ac2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800ac34:	4b03      	ldr	r3, [pc, #12]	@ (800ac44 <USBD_static_malloc+0x18>)
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	370c      	adds	r7, #12
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop
 800ac44:	20001064 	.word	0x20001064

0800ac48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b083      	sub	sp, #12
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]

}
 800ac50:	bf00      	nop
 800ac52:	370c      	adds	r7, #12
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b085      	sub	sp, #20
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	4603      	mov	r3, r0
 800ac64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac66:	2300      	movs	r3, #0
 800ac68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ac6a:	79fb      	ldrb	r3, [r7, #7]
 800ac6c:	2b03      	cmp	r3, #3
 800ac6e:	d817      	bhi.n	800aca0 <USBD_Get_USB_Status+0x44>
 800ac70:	a201      	add	r2, pc, #4	@ (adr r2, 800ac78 <USBD_Get_USB_Status+0x1c>)
 800ac72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac76:	bf00      	nop
 800ac78:	0800ac89 	.word	0x0800ac89
 800ac7c:	0800ac8f 	.word	0x0800ac8f
 800ac80:	0800ac95 	.word	0x0800ac95
 800ac84:	0800ac9b 	.word	0x0800ac9b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	73fb      	strb	r3, [r7, #15]
    break;
 800ac8c:	e00b      	b.n	800aca6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ac8e:	2303      	movs	r3, #3
 800ac90:	73fb      	strb	r3, [r7, #15]
    break;
 800ac92:	e008      	b.n	800aca6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac94:	2301      	movs	r3, #1
 800ac96:	73fb      	strb	r3, [r7, #15]
    break;
 800ac98:	e005      	b.n	800aca6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac9a:	2303      	movs	r3, #3
 800ac9c:	73fb      	strb	r3, [r7, #15]
    break;
 800ac9e:	e002      	b.n	800aca6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aca0:	2303      	movs	r3, #3
 800aca2:	73fb      	strb	r3, [r7, #15]
    break;
 800aca4:	bf00      	nop
  }
  return usb_status;
 800aca6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3714      	adds	r7, #20
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr

0800acb4 <__cvt>:
 800acb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acb8:	ec57 6b10 	vmov	r6, r7, d0
 800acbc:	2f00      	cmp	r7, #0
 800acbe:	460c      	mov	r4, r1
 800acc0:	4619      	mov	r1, r3
 800acc2:	463b      	mov	r3, r7
 800acc4:	bfbb      	ittet	lt
 800acc6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800acca:	461f      	movlt	r7, r3
 800accc:	2300      	movge	r3, #0
 800acce:	232d      	movlt	r3, #45	@ 0x2d
 800acd0:	700b      	strb	r3, [r1, #0]
 800acd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800acd4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800acd8:	4691      	mov	r9, r2
 800acda:	f023 0820 	bic.w	r8, r3, #32
 800acde:	bfbc      	itt	lt
 800ace0:	4632      	movlt	r2, r6
 800ace2:	4616      	movlt	r6, r2
 800ace4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ace8:	d005      	beq.n	800acf6 <__cvt+0x42>
 800acea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800acee:	d100      	bne.n	800acf2 <__cvt+0x3e>
 800acf0:	3401      	adds	r4, #1
 800acf2:	2102      	movs	r1, #2
 800acf4:	e000      	b.n	800acf8 <__cvt+0x44>
 800acf6:	2103      	movs	r1, #3
 800acf8:	ab03      	add	r3, sp, #12
 800acfa:	9301      	str	r3, [sp, #4]
 800acfc:	ab02      	add	r3, sp, #8
 800acfe:	9300      	str	r3, [sp, #0]
 800ad00:	ec47 6b10 	vmov	d0, r6, r7
 800ad04:	4653      	mov	r3, sl
 800ad06:	4622      	mov	r2, r4
 800ad08:	f000 ff3a 	bl	800bb80 <_dtoa_r>
 800ad0c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ad10:	4605      	mov	r5, r0
 800ad12:	d119      	bne.n	800ad48 <__cvt+0x94>
 800ad14:	f019 0f01 	tst.w	r9, #1
 800ad18:	d00e      	beq.n	800ad38 <__cvt+0x84>
 800ad1a:	eb00 0904 	add.w	r9, r0, r4
 800ad1e:	2200      	movs	r2, #0
 800ad20:	2300      	movs	r3, #0
 800ad22:	4630      	mov	r0, r6
 800ad24:	4639      	mov	r1, r7
 800ad26:	f7f5 fed7 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad2a:	b108      	cbz	r0, 800ad30 <__cvt+0x7c>
 800ad2c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ad30:	2230      	movs	r2, #48	@ 0x30
 800ad32:	9b03      	ldr	r3, [sp, #12]
 800ad34:	454b      	cmp	r3, r9
 800ad36:	d31e      	bcc.n	800ad76 <__cvt+0xc2>
 800ad38:	9b03      	ldr	r3, [sp, #12]
 800ad3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad3c:	1b5b      	subs	r3, r3, r5
 800ad3e:	4628      	mov	r0, r5
 800ad40:	6013      	str	r3, [r2, #0]
 800ad42:	b004      	add	sp, #16
 800ad44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ad4c:	eb00 0904 	add.w	r9, r0, r4
 800ad50:	d1e5      	bne.n	800ad1e <__cvt+0x6a>
 800ad52:	7803      	ldrb	r3, [r0, #0]
 800ad54:	2b30      	cmp	r3, #48	@ 0x30
 800ad56:	d10a      	bne.n	800ad6e <__cvt+0xba>
 800ad58:	2200      	movs	r2, #0
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	4630      	mov	r0, r6
 800ad5e:	4639      	mov	r1, r7
 800ad60:	f7f5 feba 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad64:	b918      	cbnz	r0, 800ad6e <__cvt+0xba>
 800ad66:	f1c4 0401 	rsb	r4, r4, #1
 800ad6a:	f8ca 4000 	str.w	r4, [sl]
 800ad6e:	f8da 3000 	ldr.w	r3, [sl]
 800ad72:	4499      	add	r9, r3
 800ad74:	e7d3      	b.n	800ad1e <__cvt+0x6a>
 800ad76:	1c59      	adds	r1, r3, #1
 800ad78:	9103      	str	r1, [sp, #12]
 800ad7a:	701a      	strb	r2, [r3, #0]
 800ad7c:	e7d9      	b.n	800ad32 <__cvt+0x7e>

0800ad7e <__exponent>:
 800ad7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad80:	2900      	cmp	r1, #0
 800ad82:	bfba      	itte	lt
 800ad84:	4249      	neglt	r1, r1
 800ad86:	232d      	movlt	r3, #45	@ 0x2d
 800ad88:	232b      	movge	r3, #43	@ 0x2b
 800ad8a:	2909      	cmp	r1, #9
 800ad8c:	7002      	strb	r2, [r0, #0]
 800ad8e:	7043      	strb	r3, [r0, #1]
 800ad90:	dd29      	ble.n	800ade6 <__exponent+0x68>
 800ad92:	f10d 0307 	add.w	r3, sp, #7
 800ad96:	461d      	mov	r5, r3
 800ad98:	270a      	movs	r7, #10
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	fbb1 f6f7 	udiv	r6, r1, r7
 800ada0:	fb07 1416 	mls	r4, r7, r6, r1
 800ada4:	3430      	adds	r4, #48	@ 0x30
 800ada6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800adaa:	460c      	mov	r4, r1
 800adac:	2c63      	cmp	r4, #99	@ 0x63
 800adae:	f103 33ff 	add.w	r3, r3, #4294967295
 800adb2:	4631      	mov	r1, r6
 800adb4:	dcf1      	bgt.n	800ad9a <__exponent+0x1c>
 800adb6:	3130      	adds	r1, #48	@ 0x30
 800adb8:	1e94      	subs	r4, r2, #2
 800adba:	f803 1c01 	strb.w	r1, [r3, #-1]
 800adbe:	1c41      	adds	r1, r0, #1
 800adc0:	4623      	mov	r3, r4
 800adc2:	42ab      	cmp	r3, r5
 800adc4:	d30a      	bcc.n	800addc <__exponent+0x5e>
 800adc6:	f10d 0309 	add.w	r3, sp, #9
 800adca:	1a9b      	subs	r3, r3, r2
 800adcc:	42ac      	cmp	r4, r5
 800adce:	bf88      	it	hi
 800add0:	2300      	movhi	r3, #0
 800add2:	3302      	adds	r3, #2
 800add4:	4403      	add	r3, r0
 800add6:	1a18      	subs	r0, r3, r0
 800add8:	b003      	add	sp, #12
 800adda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800addc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ade0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ade4:	e7ed      	b.n	800adc2 <__exponent+0x44>
 800ade6:	2330      	movs	r3, #48	@ 0x30
 800ade8:	3130      	adds	r1, #48	@ 0x30
 800adea:	7083      	strb	r3, [r0, #2]
 800adec:	70c1      	strb	r1, [r0, #3]
 800adee:	1d03      	adds	r3, r0, #4
 800adf0:	e7f1      	b.n	800add6 <__exponent+0x58>
	...

0800adf4 <_printf_float>:
 800adf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf8:	b08d      	sub	sp, #52	@ 0x34
 800adfa:	460c      	mov	r4, r1
 800adfc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ae00:	4616      	mov	r6, r2
 800ae02:	461f      	mov	r7, r3
 800ae04:	4605      	mov	r5, r0
 800ae06:	f000 fdad 	bl	800b964 <_localeconv_r>
 800ae0a:	6803      	ldr	r3, [r0, #0]
 800ae0c:	9304      	str	r3, [sp, #16]
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7f5 fa36 	bl	8000280 <strlen>
 800ae14:	2300      	movs	r3, #0
 800ae16:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae18:	f8d8 3000 	ldr.w	r3, [r8]
 800ae1c:	9005      	str	r0, [sp, #20]
 800ae1e:	3307      	adds	r3, #7
 800ae20:	f023 0307 	bic.w	r3, r3, #7
 800ae24:	f103 0208 	add.w	r2, r3, #8
 800ae28:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ae2c:	f8d4 b000 	ldr.w	fp, [r4]
 800ae30:	f8c8 2000 	str.w	r2, [r8]
 800ae34:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae38:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ae3c:	9307      	str	r3, [sp, #28]
 800ae3e:	f8cd 8018 	str.w	r8, [sp, #24]
 800ae42:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ae46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae4a:	4b9c      	ldr	r3, [pc, #624]	@ (800b0bc <_printf_float+0x2c8>)
 800ae4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae50:	f7f5 fe74 	bl	8000b3c <__aeabi_dcmpun>
 800ae54:	bb70      	cbnz	r0, 800aeb4 <_printf_float+0xc0>
 800ae56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae5a:	4b98      	ldr	r3, [pc, #608]	@ (800b0bc <_printf_float+0x2c8>)
 800ae5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae60:	f7f5 fe4e 	bl	8000b00 <__aeabi_dcmple>
 800ae64:	bb30      	cbnz	r0, 800aeb4 <_printf_float+0xc0>
 800ae66:	2200      	movs	r2, #0
 800ae68:	2300      	movs	r3, #0
 800ae6a:	4640      	mov	r0, r8
 800ae6c:	4649      	mov	r1, r9
 800ae6e:	f7f5 fe3d 	bl	8000aec <__aeabi_dcmplt>
 800ae72:	b110      	cbz	r0, 800ae7a <_printf_float+0x86>
 800ae74:	232d      	movs	r3, #45	@ 0x2d
 800ae76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae7a:	4a91      	ldr	r2, [pc, #580]	@ (800b0c0 <_printf_float+0x2cc>)
 800ae7c:	4b91      	ldr	r3, [pc, #580]	@ (800b0c4 <_printf_float+0x2d0>)
 800ae7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ae82:	bf94      	ite	ls
 800ae84:	4690      	movls	r8, r2
 800ae86:	4698      	movhi	r8, r3
 800ae88:	2303      	movs	r3, #3
 800ae8a:	6123      	str	r3, [r4, #16]
 800ae8c:	f02b 0304 	bic.w	r3, fp, #4
 800ae90:	6023      	str	r3, [r4, #0]
 800ae92:	f04f 0900 	mov.w	r9, #0
 800ae96:	9700      	str	r7, [sp, #0]
 800ae98:	4633      	mov	r3, r6
 800ae9a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ae9c:	4621      	mov	r1, r4
 800ae9e:	4628      	mov	r0, r5
 800aea0:	f000 f9d2 	bl	800b248 <_printf_common>
 800aea4:	3001      	adds	r0, #1
 800aea6:	f040 808d 	bne.w	800afc4 <_printf_float+0x1d0>
 800aeaa:	f04f 30ff 	mov.w	r0, #4294967295
 800aeae:	b00d      	add	sp, #52	@ 0x34
 800aeb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb4:	4642      	mov	r2, r8
 800aeb6:	464b      	mov	r3, r9
 800aeb8:	4640      	mov	r0, r8
 800aeba:	4649      	mov	r1, r9
 800aebc:	f7f5 fe3e 	bl	8000b3c <__aeabi_dcmpun>
 800aec0:	b140      	cbz	r0, 800aed4 <_printf_float+0xe0>
 800aec2:	464b      	mov	r3, r9
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	bfbc      	itt	lt
 800aec8:	232d      	movlt	r3, #45	@ 0x2d
 800aeca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800aece:	4a7e      	ldr	r2, [pc, #504]	@ (800b0c8 <_printf_float+0x2d4>)
 800aed0:	4b7e      	ldr	r3, [pc, #504]	@ (800b0cc <_printf_float+0x2d8>)
 800aed2:	e7d4      	b.n	800ae7e <_printf_float+0x8a>
 800aed4:	6863      	ldr	r3, [r4, #4]
 800aed6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800aeda:	9206      	str	r2, [sp, #24]
 800aedc:	1c5a      	adds	r2, r3, #1
 800aede:	d13b      	bne.n	800af58 <_printf_float+0x164>
 800aee0:	2306      	movs	r3, #6
 800aee2:	6063      	str	r3, [r4, #4]
 800aee4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800aee8:	2300      	movs	r3, #0
 800aeea:	6022      	str	r2, [r4, #0]
 800aeec:	9303      	str	r3, [sp, #12]
 800aeee:	ab0a      	add	r3, sp, #40	@ 0x28
 800aef0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800aef4:	ab09      	add	r3, sp, #36	@ 0x24
 800aef6:	9300      	str	r3, [sp, #0]
 800aef8:	6861      	ldr	r1, [r4, #4]
 800aefa:	ec49 8b10 	vmov	d0, r8, r9
 800aefe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800af02:	4628      	mov	r0, r5
 800af04:	f7ff fed6 	bl	800acb4 <__cvt>
 800af08:	9b06      	ldr	r3, [sp, #24]
 800af0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af0c:	2b47      	cmp	r3, #71	@ 0x47
 800af0e:	4680      	mov	r8, r0
 800af10:	d129      	bne.n	800af66 <_printf_float+0x172>
 800af12:	1cc8      	adds	r0, r1, #3
 800af14:	db02      	blt.n	800af1c <_printf_float+0x128>
 800af16:	6863      	ldr	r3, [r4, #4]
 800af18:	4299      	cmp	r1, r3
 800af1a:	dd41      	ble.n	800afa0 <_printf_float+0x1ac>
 800af1c:	f1aa 0a02 	sub.w	sl, sl, #2
 800af20:	fa5f fa8a 	uxtb.w	sl, sl
 800af24:	3901      	subs	r1, #1
 800af26:	4652      	mov	r2, sl
 800af28:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800af2c:	9109      	str	r1, [sp, #36]	@ 0x24
 800af2e:	f7ff ff26 	bl	800ad7e <__exponent>
 800af32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af34:	1813      	adds	r3, r2, r0
 800af36:	2a01      	cmp	r2, #1
 800af38:	4681      	mov	r9, r0
 800af3a:	6123      	str	r3, [r4, #16]
 800af3c:	dc02      	bgt.n	800af44 <_printf_float+0x150>
 800af3e:	6822      	ldr	r2, [r4, #0]
 800af40:	07d2      	lsls	r2, r2, #31
 800af42:	d501      	bpl.n	800af48 <_printf_float+0x154>
 800af44:	3301      	adds	r3, #1
 800af46:	6123      	str	r3, [r4, #16]
 800af48:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d0a2      	beq.n	800ae96 <_printf_float+0xa2>
 800af50:	232d      	movs	r3, #45	@ 0x2d
 800af52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af56:	e79e      	b.n	800ae96 <_printf_float+0xa2>
 800af58:	9a06      	ldr	r2, [sp, #24]
 800af5a:	2a47      	cmp	r2, #71	@ 0x47
 800af5c:	d1c2      	bne.n	800aee4 <_printf_float+0xf0>
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d1c0      	bne.n	800aee4 <_printf_float+0xf0>
 800af62:	2301      	movs	r3, #1
 800af64:	e7bd      	b.n	800aee2 <_printf_float+0xee>
 800af66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800af6a:	d9db      	bls.n	800af24 <_printf_float+0x130>
 800af6c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800af70:	d118      	bne.n	800afa4 <_printf_float+0x1b0>
 800af72:	2900      	cmp	r1, #0
 800af74:	6863      	ldr	r3, [r4, #4]
 800af76:	dd0b      	ble.n	800af90 <_printf_float+0x19c>
 800af78:	6121      	str	r1, [r4, #16]
 800af7a:	b913      	cbnz	r3, 800af82 <_printf_float+0x18e>
 800af7c:	6822      	ldr	r2, [r4, #0]
 800af7e:	07d0      	lsls	r0, r2, #31
 800af80:	d502      	bpl.n	800af88 <_printf_float+0x194>
 800af82:	3301      	adds	r3, #1
 800af84:	440b      	add	r3, r1
 800af86:	6123      	str	r3, [r4, #16]
 800af88:	65a1      	str	r1, [r4, #88]	@ 0x58
 800af8a:	f04f 0900 	mov.w	r9, #0
 800af8e:	e7db      	b.n	800af48 <_printf_float+0x154>
 800af90:	b913      	cbnz	r3, 800af98 <_printf_float+0x1a4>
 800af92:	6822      	ldr	r2, [r4, #0]
 800af94:	07d2      	lsls	r2, r2, #31
 800af96:	d501      	bpl.n	800af9c <_printf_float+0x1a8>
 800af98:	3302      	adds	r3, #2
 800af9a:	e7f4      	b.n	800af86 <_printf_float+0x192>
 800af9c:	2301      	movs	r3, #1
 800af9e:	e7f2      	b.n	800af86 <_printf_float+0x192>
 800afa0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800afa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afa6:	4299      	cmp	r1, r3
 800afa8:	db05      	blt.n	800afb6 <_printf_float+0x1c2>
 800afaa:	6823      	ldr	r3, [r4, #0]
 800afac:	6121      	str	r1, [r4, #16]
 800afae:	07d8      	lsls	r0, r3, #31
 800afb0:	d5ea      	bpl.n	800af88 <_printf_float+0x194>
 800afb2:	1c4b      	adds	r3, r1, #1
 800afb4:	e7e7      	b.n	800af86 <_printf_float+0x192>
 800afb6:	2900      	cmp	r1, #0
 800afb8:	bfd4      	ite	le
 800afba:	f1c1 0202 	rsble	r2, r1, #2
 800afbe:	2201      	movgt	r2, #1
 800afc0:	4413      	add	r3, r2
 800afc2:	e7e0      	b.n	800af86 <_printf_float+0x192>
 800afc4:	6823      	ldr	r3, [r4, #0]
 800afc6:	055a      	lsls	r2, r3, #21
 800afc8:	d407      	bmi.n	800afda <_printf_float+0x1e6>
 800afca:	6923      	ldr	r3, [r4, #16]
 800afcc:	4642      	mov	r2, r8
 800afce:	4631      	mov	r1, r6
 800afd0:	4628      	mov	r0, r5
 800afd2:	47b8      	blx	r7
 800afd4:	3001      	adds	r0, #1
 800afd6:	d12b      	bne.n	800b030 <_printf_float+0x23c>
 800afd8:	e767      	b.n	800aeaa <_printf_float+0xb6>
 800afda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800afde:	f240 80dd 	bls.w	800b19c <_printf_float+0x3a8>
 800afe2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800afe6:	2200      	movs	r2, #0
 800afe8:	2300      	movs	r3, #0
 800afea:	f7f5 fd75 	bl	8000ad8 <__aeabi_dcmpeq>
 800afee:	2800      	cmp	r0, #0
 800aff0:	d033      	beq.n	800b05a <_printf_float+0x266>
 800aff2:	4a37      	ldr	r2, [pc, #220]	@ (800b0d0 <_printf_float+0x2dc>)
 800aff4:	2301      	movs	r3, #1
 800aff6:	4631      	mov	r1, r6
 800aff8:	4628      	mov	r0, r5
 800affa:	47b8      	blx	r7
 800affc:	3001      	adds	r0, #1
 800affe:	f43f af54 	beq.w	800aeaa <_printf_float+0xb6>
 800b002:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b006:	4543      	cmp	r3, r8
 800b008:	db02      	blt.n	800b010 <_printf_float+0x21c>
 800b00a:	6823      	ldr	r3, [r4, #0]
 800b00c:	07d8      	lsls	r0, r3, #31
 800b00e:	d50f      	bpl.n	800b030 <_printf_float+0x23c>
 800b010:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b014:	4631      	mov	r1, r6
 800b016:	4628      	mov	r0, r5
 800b018:	47b8      	blx	r7
 800b01a:	3001      	adds	r0, #1
 800b01c:	f43f af45 	beq.w	800aeaa <_printf_float+0xb6>
 800b020:	f04f 0900 	mov.w	r9, #0
 800b024:	f108 38ff 	add.w	r8, r8, #4294967295
 800b028:	f104 0a1a 	add.w	sl, r4, #26
 800b02c:	45c8      	cmp	r8, r9
 800b02e:	dc09      	bgt.n	800b044 <_printf_float+0x250>
 800b030:	6823      	ldr	r3, [r4, #0]
 800b032:	079b      	lsls	r3, r3, #30
 800b034:	f100 8103 	bmi.w	800b23e <_printf_float+0x44a>
 800b038:	68e0      	ldr	r0, [r4, #12]
 800b03a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b03c:	4298      	cmp	r0, r3
 800b03e:	bfb8      	it	lt
 800b040:	4618      	movlt	r0, r3
 800b042:	e734      	b.n	800aeae <_printf_float+0xba>
 800b044:	2301      	movs	r3, #1
 800b046:	4652      	mov	r2, sl
 800b048:	4631      	mov	r1, r6
 800b04a:	4628      	mov	r0, r5
 800b04c:	47b8      	blx	r7
 800b04e:	3001      	adds	r0, #1
 800b050:	f43f af2b 	beq.w	800aeaa <_printf_float+0xb6>
 800b054:	f109 0901 	add.w	r9, r9, #1
 800b058:	e7e8      	b.n	800b02c <_printf_float+0x238>
 800b05a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	dc39      	bgt.n	800b0d4 <_printf_float+0x2e0>
 800b060:	4a1b      	ldr	r2, [pc, #108]	@ (800b0d0 <_printf_float+0x2dc>)
 800b062:	2301      	movs	r3, #1
 800b064:	4631      	mov	r1, r6
 800b066:	4628      	mov	r0, r5
 800b068:	47b8      	blx	r7
 800b06a:	3001      	adds	r0, #1
 800b06c:	f43f af1d 	beq.w	800aeaa <_printf_float+0xb6>
 800b070:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b074:	ea59 0303 	orrs.w	r3, r9, r3
 800b078:	d102      	bne.n	800b080 <_printf_float+0x28c>
 800b07a:	6823      	ldr	r3, [r4, #0]
 800b07c:	07d9      	lsls	r1, r3, #31
 800b07e:	d5d7      	bpl.n	800b030 <_printf_float+0x23c>
 800b080:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b084:	4631      	mov	r1, r6
 800b086:	4628      	mov	r0, r5
 800b088:	47b8      	blx	r7
 800b08a:	3001      	adds	r0, #1
 800b08c:	f43f af0d 	beq.w	800aeaa <_printf_float+0xb6>
 800b090:	f04f 0a00 	mov.w	sl, #0
 800b094:	f104 0b1a 	add.w	fp, r4, #26
 800b098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b09a:	425b      	negs	r3, r3
 800b09c:	4553      	cmp	r3, sl
 800b09e:	dc01      	bgt.n	800b0a4 <_printf_float+0x2b0>
 800b0a0:	464b      	mov	r3, r9
 800b0a2:	e793      	b.n	800afcc <_printf_float+0x1d8>
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	465a      	mov	r2, fp
 800b0a8:	4631      	mov	r1, r6
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	47b8      	blx	r7
 800b0ae:	3001      	adds	r0, #1
 800b0b0:	f43f aefb 	beq.w	800aeaa <_printf_float+0xb6>
 800b0b4:	f10a 0a01 	add.w	sl, sl, #1
 800b0b8:	e7ee      	b.n	800b098 <_printf_float+0x2a4>
 800b0ba:	bf00      	nop
 800b0bc:	7fefffff 	.word	0x7fefffff
 800b0c0:	0800d708 	.word	0x0800d708
 800b0c4:	0800d70c 	.word	0x0800d70c
 800b0c8:	0800d710 	.word	0x0800d710
 800b0cc:	0800d714 	.word	0x0800d714
 800b0d0:	0800d718 	.word	0x0800d718
 800b0d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b0d6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b0da:	4553      	cmp	r3, sl
 800b0dc:	bfa8      	it	ge
 800b0de:	4653      	movge	r3, sl
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	4699      	mov	r9, r3
 800b0e4:	dc36      	bgt.n	800b154 <_printf_float+0x360>
 800b0e6:	f04f 0b00 	mov.w	fp, #0
 800b0ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b0ee:	f104 021a 	add.w	r2, r4, #26
 800b0f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b0f4:	9306      	str	r3, [sp, #24]
 800b0f6:	eba3 0309 	sub.w	r3, r3, r9
 800b0fa:	455b      	cmp	r3, fp
 800b0fc:	dc31      	bgt.n	800b162 <_printf_float+0x36e>
 800b0fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b100:	459a      	cmp	sl, r3
 800b102:	dc3a      	bgt.n	800b17a <_printf_float+0x386>
 800b104:	6823      	ldr	r3, [r4, #0]
 800b106:	07da      	lsls	r2, r3, #31
 800b108:	d437      	bmi.n	800b17a <_printf_float+0x386>
 800b10a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b10c:	ebaa 0903 	sub.w	r9, sl, r3
 800b110:	9b06      	ldr	r3, [sp, #24]
 800b112:	ebaa 0303 	sub.w	r3, sl, r3
 800b116:	4599      	cmp	r9, r3
 800b118:	bfa8      	it	ge
 800b11a:	4699      	movge	r9, r3
 800b11c:	f1b9 0f00 	cmp.w	r9, #0
 800b120:	dc33      	bgt.n	800b18a <_printf_float+0x396>
 800b122:	f04f 0800 	mov.w	r8, #0
 800b126:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b12a:	f104 0b1a 	add.w	fp, r4, #26
 800b12e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b130:	ebaa 0303 	sub.w	r3, sl, r3
 800b134:	eba3 0309 	sub.w	r3, r3, r9
 800b138:	4543      	cmp	r3, r8
 800b13a:	f77f af79 	ble.w	800b030 <_printf_float+0x23c>
 800b13e:	2301      	movs	r3, #1
 800b140:	465a      	mov	r2, fp
 800b142:	4631      	mov	r1, r6
 800b144:	4628      	mov	r0, r5
 800b146:	47b8      	blx	r7
 800b148:	3001      	adds	r0, #1
 800b14a:	f43f aeae 	beq.w	800aeaa <_printf_float+0xb6>
 800b14e:	f108 0801 	add.w	r8, r8, #1
 800b152:	e7ec      	b.n	800b12e <_printf_float+0x33a>
 800b154:	4642      	mov	r2, r8
 800b156:	4631      	mov	r1, r6
 800b158:	4628      	mov	r0, r5
 800b15a:	47b8      	blx	r7
 800b15c:	3001      	adds	r0, #1
 800b15e:	d1c2      	bne.n	800b0e6 <_printf_float+0x2f2>
 800b160:	e6a3      	b.n	800aeaa <_printf_float+0xb6>
 800b162:	2301      	movs	r3, #1
 800b164:	4631      	mov	r1, r6
 800b166:	4628      	mov	r0, r5
 800b168:	9206      	str	r2, [sp, #24]
 800b16a:	47b8      	blx	r7
 800b16c:	3001      	adds	r0, #1
 800b16e:	f43f ae9c 	beq.w	800aeaa <_printf_float+0xb6>
 800b172:	9a06      	ldr	r2, [sp, #24]
 800b174:	f10b 0b01 	add.w	fp, fp, #1
 800b178:	e7bb      	b.n	800b0f2 <_printf_float+0x2fe>
 800b17a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b17e:	4631      	mov	r1, r6
 800b180:	4628      	mov	r0, r5
 800b182:	47b8      	blx	r7
 800b184:	3001      	adds	r0, #1
 800b186:	d1c0      	bne.n	800b10a <_printf_float+0x316>
 800b188:	e68f      	b.n	800aeaa <_printf_float+0xb6>
 800b18a:	9a06      	ldr	r2, [sp, #24]
 800b18c:	464b      	mov	r3, r9
 800b18e:	4442      	add	r2, r8
 800b190:	4631      	mov	r1, r6
 800b192:	4628      	mov	r0, r5
 800b194:	47b8      	blx	r7
 800b196:	3001      	adds	r0, #1
 800b198:	d1c3      	bne.n	800b122 <_printf_float+0x32e>
 800b19a:	e686      	b.n	800aeaa <_printf_float+0xb6>
 800b19c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b1a0:	f1ba 0f01 	cmp.w	sl, #1
 800b1a4:	dc01      	bgt.n	800b1aa <_printf_float+0x3b6>
 800b1a6:	07db      	lsls	r3, r3, #31
 800b1a8:	d536      	bpl.n	800b218 <_printf_float+0x424>
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	4642      	mov	r2, r8
 800b1ae:	4631      	mov	r1, r6
 800b1b0:	4628      	mov	r0, r5
 800b1b2:	47b8      	blx	r7
 800b1b4:	3001      	adds	r0, #1
 800b1b6:	f43f ae78 	beq.w	800aeaa <_printf_float+0xb6>
 800b1ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1be:	4631      	mov	r1, r6
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	47b8      	blx	r7
 800b1c4:	3001      	adds	r0, #1
 800b1c6:	f43f ae70 	beq.w	800aeaa <_printf_float+0xb6>
 800b1ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1d6:	f7f5 fc7f 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1da:	b9c0      	cbnz	r0, 800b20e <_printf_float+0x41a>
 800b1dc:	4653      	mov	r3, sl
 800b1de:	f108 0201 	add.w	r2, r8, #1
 800b1e2:	4631      	mov	r1, r6
 800b1e4:	4628      	mov	r0, r5
 800b1e6:	47b8      	blx	r7
 800b1e8:	3001      	adds	r0, #1
 800b1ea:	d10c      	bne.n	800b206 <_printf_float+0x412>
 800b1ec:	e65d      	b.n	800aeaa <_printf_float+0xb6>
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	465a      	mov	r2, fp
 800b1f2:	4631      	mov	r1, r6
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	47b8      	blx	r7
 800b1f8:	3001      	adds	r0, #1
 800b1fa:	f43f ae56 	beq.w	800aeaa <_printf_float+0xb6>
 800b1fe:	f108 0801 	add.w	r8, r8, #1
 800b202:	45d0      	cmp	r8, sl
 800b204:	dbf3      	blt.n	800b1ee <_printf_float+0x3fa>
 800b206:	464b      	mov	r3, r9
 800b208:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b20c:	e6df      	b.n	800afce <_printf_float+0x1da>
 800b20e:	f04f 0800 	mov.w	r8, #0
 800b212:	f104 0b1a 	add.w	fp, r4, #26
 800b216:	e7f4      	b.n	800b202 <_printf_float+0x40e>
 800b218:	2301      	movs	r3, #1
 800b21a:	4642      	mov	r2, r8
 800b21c:	e7e1      	b.n	800b1e2 <_printf_float+0x3ee>
 800b21e:	2301      	movs	r3, #1
 800b220:	464a      	mov	r2, r9
 800b222:	4631      	mov	r1, r6
 800b224:	4628      	mov	r0, r5
 800b226:	47b8      	blx	r7
 800b228:	3001      	adds	r0, #1
 800b22a:	f43f ae3e 	beq.w	800aeaa <_printf_float+0xb6>
 800b22e:	f108 0801 	add.w	r8, r8, #1
 800b232:	68e3      	ldr	r3, [r4, #12]
 800b234:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b236:	1a5b      	subs	r3, r3, r1
 800b238:	4543      	cmp	r3, r8
 800b23a:	dcf0      	bgt.n	800b21e <_printf_float+0x42a>
 800b23c:	e6fc      	b.n	800b038 <_printf_float+0x244>
 800b23e:	f04f 0800 	mov.w	r8, #0
 800b242:	f104 0919 	add.w	r9, r4, #25
 800b246:	e7f4      	b.n	800b232 <_printf_float+0x43e>

0800b248 <_printf_common>:
 800b248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b24c:	4616      	mov	r6, r2
 800b24e:	4698      	mov	r8, r3
 800b250:	688a      	ldr	r2, [r1, #8]
 800b252:	690b      	ldr	r3, [r1, #16]
 800b254:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b258:	4293      	cmp	r3, r2
 800b25a:	bfb8      	it	lt
 800b25c:	4613      	movlt	r3, r2
 800b25e:	6033      	str	r3, [r6, #0]
 800b260:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b264:	4607      	mov	r7, r0
 800b266:	460c      	mov	r4, r1
 800b268:	b10a      	cbz	r2, 800b26e <_printf_common+0x26>
 800b26a:	3301      	adds	r3, #1
 800b26c:	6033      	str	r3, [r6, #0]
 800b26e:	6823      	ldr	r3, [r4, #0]
 800b270:	0699      	lsls	r1, r3, #26
 800b272:	bf42      	ittt	mi
 800b274:	6833      	ldrmi	r3, [r6, #0]
 800b276:	3302      	addmi	r3, #2
 800b278:	6033      	strmi	r3, [r6, #0]
 800b27a:	6825      	ldr	r5, [r4, #0]
 800b27c:	f015 0506 	ands.w	r5, r5, #6
 800b280:	d106      	bne.n	800b290 <_printf_common+0x48>
 800b282:	f104 0a19 	add.w	sl, r4, #25
 800b286:	68e3      	ldr	r3, [r4, #12]
 800b288:	6832      	ldr	r2, [r6, #0]
 800b28a:	1a9b      	subs	r3, r3, r2
 800b28c:	42ab      	cmp	r3, r5
 800b28e:	dc26      	bgt.n	800b2de <_printf_common+0x96>
 800b290:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b294:	6822      	ldr	r2, [r4, #0]
 800b296:	3b00      	subs	r3, #0
 800b298:	bf18      	it	ne
 800b29a:	2301      	movne	r3, #1
 800b29c:	0692      	lsls	r2, r2, #26
 800b29e:	d42b      	bmi.n	800b2f8 <_printf_common+0xb0>
 800b2a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b2a4:	4641      	mov	r1, r8
 800b2a6:	4638      	mov	r0, r7
 800b2a8:	47c8      	blx	r9
 800b2aa:	3001      	adds	r0, #1
 800b2ac:	d01e      	beq.n	800b2ec <_printf_common+0xa4>
 800b2ae:	6823      	ldr	r3, [r4, #0]
 800b2b0:	6922      	ldr	r2, [r4, #16]
 800b2b2:	f003 0306 	and.w	r3, r3, #6
 800b2b6:	2b04      	cmp	r3, #4
 800b2b8:	bf02      	ittt	eq
 800b2ba:	68e5      	ldreq	r5, [r4, #12]
 800b2bc:	6833      	ldreq	r3, [r6, #0]
 800b2be:	1aed      	subeq	r5, r5, r3
 800b2c0:	68a3      	ldr	r3, [r4, #8]
 800b2c2:	bf0c      	ite	eq
 800b2c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2c8:	2500      	movne	r5, #0
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	bfc4      	itt	gt
 800b2ce:	1a9b      	subgt	r3, r3, r2
 800b2d0:	18ed      	addgt	r5, r5, r3
 800b2d2:	2600      	movs	r6, #0
 800b2d4:	341a      	adds	r4, #26
 800b2d6:	42b5      	cmp	r5, r6
 800b2d8:	d11a      	bne.n	800b310 <_printf_common+0xc8>
 800b2da:	2000      	movs	r0, #0
 800b2dc:	e008      	b.n	800b2f0 <_printf_common+0xa8>
 800b2de:	2301      	movs	r3, #1
 800b2e0:	4652      	mov	r2, sl
 800b2e2:	4641      	mov	r1, r8
 800b2e4:	4638      	mov	r0, r7
 800b2e6:	47c8      	blx	r9
 800b2e8:	3001      	adds	r0, #1
 800b2ea:	d103      	bne.n	800b2f4 <_printf_common+0xac>
 800b2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2f4:	3501      	adds	r5, #1
 800b2f6:	e7c6      	b.n	800b286 <_printf_common+0x3e>
 800b2f8:	18e1      	adds	r1, r4, r3
 800b2fa:	1c5a      	adds	r2, r3, #1
 800b2fc:	2030      	movs	r0, #48	@ 0x30
 800b2fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b302:	4422      	add	r2, r4
 800b304:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b308:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b30c:	3302      	adds	r3, #2
 800b30e:	e7c7      	b.n	800b2a0 <_printf_common+0x58>
 800b310:	2301      	movs	r3, #1
 800b312:	4622      	mov	r2, r4
 800b314:	4641      	mov	r1, r8
 800b316:	4638      	mov	r0, r7
 800b318:	47c8      	blx	r9
 800b31a:	3001      	adds	r0, #1
 800b31c:	d0e6      	beq.n	800b2ec <_printf_common+0xa4>
 800b31e:	3601      	adds	r6, #1
 800b320:	e7d9      	b.n	800b2d6 <_printf_common+0x8e>
	...

0800b324 <_printf_i>:
 800b324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b328:	7e0f      	ldrb	r7, [r1, #24]
 800b32a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b32c:	2f78      	cmp	r7, #120	@ 0x78
 800b32e:	4691      	mov	r9, r2
 800b330:	4680      	mov	r8, r0
 800b332:	460c      	mov	r4, r1
 800b334:	469a      	mov	sl, r3
 800b336:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b33a:	d807      	bhi.n	800b34c <_printf_i+0x28>
 800b33c:	2f62      	cmp	r7, #98	@ 0x62
 800b33e:	d80a      	bhi.n	800b356 <_printf_i+0x32>
 800b340:	2f00      	cmp	r7, #0
 800b342:	f000 80d2 	beq.w	800b4ea <_printf_i+0x1c6>
 800b346:	2f58      	cmp	r7, #88	@ 0x58
 800b348:	f000 80b9 	beq.w	800b4be <_printf_i+0x19a>
 800b34c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b350:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b354:	e03a      	b.n	800b3cc <_printf_i+0xa8>
 800b356:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b35a:	2b15      	cmp	r3, #21
 800b35c:	d8f6      	bhi.n	800b34c <_printf_i+0x28>
 800b35e:	a101      	add	r1, pc, #4	@ (adr r1, 800b364 <_printf_i+0x40>)
 800b360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b364:	0800b3bd 	.word	0x0800b3bd
 800b368:	0800b3d1 	.word	0x0800b3d1
 800b36c:	0800b34d 	.word	0x0800b34d
 800b370:	0800b34d 	.word	0x0800b34d
 800b374:	0800b34d 	.word	0x0800b34d
 800b378:	0800b34d 	.word	0x0800b34d
 800b37c:	0800b3d1 	.word	0x0800b3d1
 800b380:	0800b34d 	.word	0x0800b34d
 800b384:	0800b34d 	.word	0x0800b34d
 800b388:	0800b34d 	.word	0x0800b34d
 800b38c:	0800b34d 	.word	0x0800b34d
 800b390:	0800b4d1 	.word	0x0800b4d1
 800b394:	0800b3fb 	.word	0x0800b3fb
 800b398:	0800b48b 	.word	0x0800b48b
 800b39c:	0800b34d 	.word	0x0800b34d
 800b3a0:	0800b34d 	.word	0x0800b34d
 800b3a4:	0800b4f3 	.word	0x0800b4f3
 800b3a8:	0800b34d 	.word	0x0800b34d
 800b3ac:	0800b3fb 	.word	0x0800b3fb
 800b3b0:	0800b34d 	.word	0x0800b34d
 800b3b4:	0800b34d 	.word	0x0800b34d
 800b3b8:	0800b493 	.word	0x0800b493
 800b3bc:	6833      	ldr	r3, [r6, #0]
 800b3be:	1d1a      	adds	r2, r3, #4
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	6032      	str	r2, [r6, #0]
 800b3c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	e09d      	b.n	800b50c <_printf_i+0x1e8>
 800b3d0:	6833      	ldr	r3, [r6, #0]
 800b3d2:	6820      	ldr	r0, [r4, #0]
 800b3d4:	1d19      	adds	r1, r3, #4
 800b3d6:	6031      	str	r1, [r6, #0]
 800b3d8:	0606      	lsls	r6, r0, #24
 800b3da:	d501      	bpl.n	800b3e0 <_printf_i+0xbc>
 800b3dc:	681d      	ldr	r5, [r3, #0]
 800b3de:	e003      	b.n	800b3e8 <_printf_i+0xc4>
 800b3e0:	0645      	lsls	r5, r0, #25
 800b3e2:	d5fb      	bpl.n	800b3dc <_printf_i+0xb8>
 800b3e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b3e8:	2d00      	cmp	r5, #0
 800b3ea:	da03      	bge.n	800b3f4 <_printf_i+0xd0>
 800b3ec:	232d      	movs	r3, #45	@ 0x2d
 800b3ee:	426d      	negs	r5, r5
 800b3f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3f4:	4859      	ldr	r0, [pc, #356]	@ (800b55c <_printf_i+0x238>)
 800b3f6:	230a      	movs	r3, #10
 800b3f8:	e011      	b.n	800b41e <_printf_i+0xfa>
 800b3fa:	6821      	ldr	r1, [r4, #0]
 800b3fc:	6833      	ldr	r3, [r6, #0]
 800b3fe:	0608      	lsls	r0, r1, #24
 800b400:	f853 5b04 	ldr.w	r5, [r3], #4
 800b404:	d402      	bmi.n	800b40c <_printf_i+0xe8>
 800b406:	0649      	lsls	r1, r1, #25
 800b408:	bf48      	it	mi
 800b40a:	b2ad      	uxthmi	r5, r5
 800b40c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b40e:	4853      	ldr	r0, [pc, #332]	@ (800b55c <_printf_i+0x238>)
 800b410:	6033      	str	r3, [r6, #0]
 800b412:	bf14      	ite	ne
 800b414:	230a      	movne	r3, #10
 800b416:	2308      	moveq	r3, #8
 800b418:	2100      	movs	r1, #0
 800b41a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b41e:	6866      	ldr	r6, [r4, #4]
 800b420:	60a6      	str	r6, [r4, #8]
 800b422:	2e00      	cmp	r6, #0
 800b424:	bfa2      	ittt	ge
 800b426:	6821      	ldrge	r1, [r4, #0]
 800b428:	f021 0104 	bicge.w	r1, r1, #4
 800b42c:	6021      	strge	r1, [r4, #0]
 800b42e:	b90d      	cbnz	r5, 800b434 <_printf_i+0x110>
 800b430:	2e00      	cmp	r6, #0
 800b432:	d04b      	beq.n	800b4cc <_printf_i+0x1a8>
 800b434:	4616      	mov	r6, r2
 800b436:	fbb5 f1f3 	udiv	r1, r5, r3
 800b43a:	fb03 5711 	mls	r7, r3, r1, r5
 800b43e:	5dc7      	ldrb	r7, [r0, r7]
 800b440:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b444:	462f      	mov	r7, r5
 800b446:	42bb      	cmp	r3, r7
 800b448:	460d      	mov	r5, r1
 800b44a:	d9f4      	bls.n	800b436 <_printf_i+0x112>
 800b44c:	2b08      	cmp	r3, #8
 800b44e:	d10b      	bne.n	800b468 <_printf_i+0x144>
 800b450:	6823      	ldr	r3, [r4, #0]
 800b452:	07df      	lsls	r7, r3, #31
 800b454:	d508      	bpl.n	800b468 <_printf_i+0x144>
 800b456:	6923      	ldr	r3, [r4, #16]
 800b458:	6861      	ldr	r1, [r4, #4]
 800b45a:	4299      	cmp	r1, r3
 800b45c:	bfde      	ittt	le
 800b45e:	2330      	movle	r3, #48	@ 0x30
 800b460:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b464:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b468:	1b92      	subs	r2, r2, r6
 800b46a:	6122      	str	r2, [r4, #16]
 800b46c:	f8cd a000 	str.w	sl, [sp]
 800b470:	464b      	mov	r3, r9
 800b472:	aa03      	add	r2, sp, #12
 800b474:	4621      	mov	r1, r4
 800b476:	4640      	mov	r0, r8
 800b478:	f7ff fee6 	bl	800b248 <_printf_common>
 800b47c:	3001      	adds	r0, #1
 800b47e:	d14a      	bne.n	800b516 <_printf_i+0x1f2>
 800b480:	f04f 30ff 	mov.w	r0, #4294967295
 800b484:	b004      	add	sp, #16
 800b486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b48a:	6823      	ldr	r3, [r4, #0]
 800b48c:	f043 0320 	orr.w	r3, r3, #32
 800b490:	6023      	str	r3, [r4, #0]
 800b492:	4833      	ldr	r0, [pc, #204]	@ (800b560 <_printf_i+0x23c>)
 800b494:	2778      	movs	r7, #120	@ 0x78
 800b496:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b49a:	6823      	ldr	r3, [r4, #0]
 800b49c:	6831      	ldr	r1, [r6, #0]
 800b49e:	061f      	lsls	r7, r3, #24
 800b4a0:	f851 5b04 	ldr.w	r5, [r1], #4
 800b4a4:	d402      	bmi.n	800b4ac <_printf_i+0x188>
 800b4a6:	065f      	lsls	r7, r3, #25
 800b4a8:	bf48      	it	mi
 800b4aa:	b2ad      	uxthmi	r5, r5
 800b4ac:	6031      	str	r1, [r6, #0]
 800b4ae:	07d9      	lsls	r1, r3, #31
 800b4b0:	bf44      	itt	mi
 800b4b2:	f043 0320 	orrmi.w	r3, r3, #32
 800b4b6:	6023      	strmi	r3, [r4, #0]
 800b4b8:	b11d      	cbz	r5, 800b4c2 <_printf_i+0x19e>
 800b4ba:	2310      	movs	r3, #16
 800b4bc:	e7ac      	b.n	800b418 <_printf_i+0xf4>
 800b4be:	4827      	ldr	r0, [pc, #156]	@ (800b55c <_printf_i+0x238>)
 800b4c0:	e7e9      	b.n	800b496 <_printf_i+0x172>
 800b4c2:	6823      	ldr	r3, [r4, #0]
 800b4c4:	f023 0320 	bic.w	r3, r3, #32
 800b4c8:	6023      	str	r3, [r4, #0]
 800b4ca:	e7f6      	b.n	800b4ba <_printf_i+0x196>
 800b4cc:	4616      	mov	r6, r2
 800b4ce:	e7bd      	b.n	800b44c <_printf_i+0x128>
 800b4d0:	6833      	ldr	r3, [r6, #0]
 800b4d2:	6825      	ldr	r5, [r4, #0]
 800b4d4:	6961      	ldr	r1, [r4, #20]
 800b4d6:	1d18      	adds	r0, r3, #4
 800b4d8:	6030      	str	r0, [r6, #0]
 800b4da:	062e      	lsls	r6, r5, #24
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	d501      	bpl.n	800b4e4 <_printf_i+0x1c0>
 800b4e0:	6019      	str	r1, [r3, #0]
 800b4e2:	e002      	b.n	800b4ea <_printf_i+0x1c6>
 800b4e4:	0668      	lsls	r0, r5, #25
 800b4e6:	d5fb      	bpl.n	800b4e0 <_printf_i+0x1bc>
 800b4e8:	8019      	strh	r1, [r3, #0]
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	6123      	str	r3, [r4, #16]
 800b4ee:	4616      	mov	r6, r2
 800b4f0:	e7bc      	b.n	800b46c <_printf_i+0x148>
 800b4f2:	6833      	ldr	r3, [r6, #0]
 800b4f4:	1d1a      	adds	r2, r3, #4
 800b4f6:	6032      	str	r2, [r6, #0]
 800b4f8:	681e      	ldr	r6, [r3, #0]
 800b4fa:	6862      	ldr	r2, [r4, #4]
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	4630      	mov	r0, r6
 800b500:	f7f4 fe6e 	bl	80001e0 <memchr>
 800b504:	b108      	cbz	r0, 800b50a <_printf_i+0x1e6>
 800b506:	1b80      	subs	r0, r0, r6
 800b508:	6060      	str	r0, [r4, #4]
 800b50a:	6863      	ldr	r3, [r4, #4]
 800b50c:	6123      	str	r3, [r4, #16]
 800b50e:	2300      	movs	r3, #0
 800b510:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b514:	e7aa      	b.n	800b46c <_printf_i+0x148>
 800b516:	6923      	ldr	r3, [r4, #16]
 800b518:	4632      	mov	r2, r6
 800b51a:	4649      	mov	r1, r9
 800b51c:	4640      	mov	r0, r8
 800b51e:	47d0      	blx	sl
 800b520:	3001      	adds	r0, #1
 800b522:	d0ad      	beq.n	800b480 <_printf_i+0x15c>
 800b524:	6823      	ldr	r3, [r4, #0]
 800b526:	079b      	lsls	r3, r3, #30
 800b528:	d413      	bmi.n	800b552 <_printf_i+0x22e>
 800b52a:	68e0      	ldr	r0, [r4, #12]
 800b52c:	9b03      	ldr	r3, [sp, #12]
 800b52e:	4298      	cmp	r0, r3
 800b530:	bfb8      	it	lt
 800b532:	4618      	movlt	r0, r3
 800b534:	e7a6      	b.n	800b484 <_printf_i+0x160>
 800b536:	2301      	movs	r3, #1
 800b538:	4632      	mov	r2, r6
 800b53a:	4649      	mov	r1, r9
 800b53c:	4640      	mov	r0, r8
 800b53e:	47d0      	blx	sl
 800b540:	3001      	adds	r0, #1
 800b542:	d09d      	beq.n	800b480 <_printf_i+0x15c>
 800b544:	3501      	adds	r5, #1
 800b546:	68e3      	ldr	r3, [r4, #12]
 800b548:	9903      	ldr	r1, [sp, #12]
 800b54a:	1a5b      	subs	r3, r3, r1
 800b54c:	42ab      	cmp	r3, r5
 800b54e:	dcf2      	bgt.n	800b536 <_printf_i+0x212>
 800b550:	e7eb      	b.n	800b52a <_printf_i+0x206>
 800b552:	2500      	movs	r5, #0
 800b554:	f104 0619 	add.w	r6, r4, #25
 800b558:	e7f5      	b.n	800b546 <_printf_i+0x222>
 800b55a:	bf00      	nop
 800b55c:	0800d71a 	.word	0x0800d71a
 800b560:	0800d72b 	.word	0x0800d72b

0800b564 <std>:
 800b564:	2300      	movs	r3, #0
 800b566:	b510      	push	{r4, lr}
 800b568:	4604      	mov	r4, r0
 800b56a:	e9c0 3300 	strd	r3, r3, [r0]
 800b56e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b572:	6083      	str	r3, [r0, #8]
 800b574:	8181      	strh	r1, [r0, #12]
 800b576:	6643      	str	r3, [r0, #100]	@ 0x64
 800b578:	81c2      	strh	r2, [r0, #14]
 800b57a:	6183      	str	r3, [r0, #24]
 800b57c:	4619      	mov	r1, r3
 800b57e:	2208      	movs	r2, #8
 800b580:	305c      	adds	r0, #92	@ 0x5c
 800b582:	f000 f9e7 	bl	800b954 <memset>
 800b586:	4b0d      	ldr	r3, [pc, #52]	@ (800b5bc <std+0x58>)
 800b588:	6263      	str	r3, [r4, #36]	@ 0x24
 800b58a:	4b0d      	ldr	r3, [pc, #52]	@ (800b5c0 <std+0x5c>)
 800b58c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b58e:	4b0d      	ldr	r3, [pc, #52]	@ (800b5c4 <std+0x60>)
 800b590:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b592:	4b0d      	ldr	r3, [pc, #52]	@ (800b5c8 <std+0x64>)
 800b594:	6323      	str	r3, [r4, #48]	@ 0x30
 800b596:	4b0d      	ldr	r3, [pc, #52]	@ (800b5cc <std+0x68>)
 800b598:	6224      	str	r4, [r4, #32]
 800b59a:	429c      	cmp	r4, r3
 800b59c:	d006      	beq.n	800b5ac <std+0x48>
 800b59e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b5a2:	4294      	cmp	r4, r2
 800b5a4:	d002      	beq.n	800b5ac <std+0x48>
 800b5a6:	33d0      	adds	r3, #208	@ 0xd0
 800b5a8:	429c      	cmp	r4, r3
 800b5aa:	d105      	bne.n	800b5b8 <std+0x54>
 800b5ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b5b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5b4:	f000 ba4a 	b.w	800ba4c <__retarget_lock_init_recursive>
 800b5b8:	bd10      	pop	{r4, pc}
 800b5ba:	bf00      	nop
 800b5bc:	0800b7a5 	.word	0x0800b7a5
 800b5c0:	0800b7c7 	.word	0x0800b7c7
 800b5c4:	0800b7ff 	.word	0x0800b7ff
 800b5c8:	0800b823 	.word	0x0800b823
 800b5cc:	2000108c 	.word	0x2000108c

0800b5d0 <stdio_exit_handler>:
 800b5d0:	4a02      	ldr	r2, [pc, #8]	@ (800b5dc <stdio_exit_handler+0xc>)
 800b5d2:	4903      	ldr	r1, [pc, #12]	@ (800b5e0 <stdio_exit_handler+0x10>)
 800b5d4:	4803      	ldr	r0, [pc, #12]	@ (800b5e4 <stdio_exit_handler+0x14>)
 800b5d6:	f000 b869 	b.w	800b6ac <_fwalk_sglue>
 800b5da:	bf00      	nop
 800b5dc:	2000010c 	.word	0x2000010c
 800b5e0:	0800d115 	.word	0x0800d115
 800b5e4:	2000011c 	.word	0x2000011c

0800b5e8 <cleanup_stdio>:
 800b5e8:	6841      	ldr	r1, [r0, #4]
 800b5ea:	4b0c      	ldr	r3, [pc, #48]	@ (800b61c <cleanup_stdio+0x34>)
 800b5ec:	4299      	cmp	r1, r3
 800b5ee:	b510      	push	{r4, lr}
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	d001      	beq.n	800b5f8 <cleanup_stdio+0x10>
 800b5f4:	f001 fd8e 	bl	800d114 <_fflush_r>
 800b5f8:	68a1      	ldr	r1, [r4, #8]
 800b5fa:	4b09      	ldr	r3, [pc, #36]	@ (800b620 <cleanup_stdio+0x38>)
 800b5fc:	4299      	cmp	r1, r3
 800b5fe:	d002      	beq.n	800b606 <cleanup_stdio+0x1e>
 800b600:	4620      	mov	r0, r4
 800b602:	f001 fd87 	bl	800d114 <_fflush_r>
 800b606:	68e1      	ldr	r1, [r4, #12]
 800b608:	4b06      	ldr	r3, [pc, #24]	@ (800b624 <cleanup_stdio+0x3c>)
 800b60a:	4299      	cmp	r1, r3
 800b60c:	d004      	beq.n	800b618 <cleanup_stdio+0x30>
 800b60e:	4620      	mov	r0, r4
 800b610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b614:	f001 bd7e 	b.w	800d114 <_fflush_r>
 800b618:	bd10      	pop	{r4, pc}
 800b61a:	bf00      	nop
 800b61c:	2000108c 	.word	0x2000108c
 800b620:	200010f4 	.word	0x200010f4
 800b624:	2000115c 	.word	0x2000115c

0800b628 <global_stdio_init.part.0>:
 800b628:	b510      	push	{r4, lr}
 800b62a:	4b0b      	ldr	r3, [pc, #44]	@ (800b658 <global_stdio_init.part.0+0x30>)
 800b62c:	4c0b      	ldr	r4, [pc, #44]	@ (800b65c <global_stdio_init.part.0+0x34>)
 800b62e:	4a0c      	ldr	r2, [pc, #48]	@ (800b660 <global_stdio_init.part.0+0x38>)
 800b630:	601a      	str	r2, [r3, #0]
 800b632:	4620      	mov	r0, r4
 800b634:	2200      	movs	r2, #0
 800b636:	2104      	movs	r1, #4
 800b638:	f7ff ff94 	bl	800b564 <std>
 800b63c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b640:	2201      	movs	r2, #1
 800b642:	2109      	movs	r1, #9
 800b644:	f7ff ff8e 	bl	800b564 <std>
 800b648:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b64c:	2202      	movs	r2, #2
 800b64e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b652:	2112      	movs	r1, #18
 800b654:	f7ff bf86 	b.w	800b564 <std>
 800b658:	200011c4 	.word	0x200011c4
 800b65c:	2000108c 	.word	0x2000108c
 800b660:	0800b5d1 	.word	0x0800b5d1

0800b664 <__sfp_lock_acquire>:
 800b664:	4801      	ldr	r0, [pc, #4]	@ (800b66c <__sfp_lock_acquire+0x8>)
 800b666:	f000 b9f2 	b.w	800ba4e <__retarget_lock_acquire_recursive>
 800b66a:	bf00      	nop
 800b66c:	200011cd 	.word	0x200011cd

0800b670 <__sfp_lock_release>:
 800b670:	4801      	ldr	r0, [pc, #4]	@ (800b678 <__sfp_lock_release+0x8>)
 800b672:	f000 b9ed 	b.w	800ba50 <__retarget_lock_release_recursive>
 800b676:	bf00      	nop
 800b678:	200011cd 	.word	0x200011cd

0800b67c <__sinit>:
 800b67c:	b510      	push	{r4, lr}
 800b67e:	4604      	mov	r4, r0
 800b680:	f7ff fff0 	bl	800b664 <__sfp_lock_acquire>
 800b684:	6a23      	ldr	r3, [r4, #32]
 800b686:	b11b      	cbz	r3, 800b690 <__sinit+0x14>
 800b688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b68c:	f7ff bff0 	b.w	800b670 <__sfp_lock_release>
 800b690:	4b04      	ldr	r3, [pc, #16]	@ (800b6a4 <__sinit+0x28>)
 800b692:	6223      	str	r3, [r4, #32]
 800b694:	4b04      	ldr	r3, [pc, #16]	@ (800b6a8 <__sinit+0x2c>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d1f5      	bne.n	800b688 <__sinit+0xc>
 800b69c:	f7ff ffc4 	bl	800b628 <global_stdio_init.part.0>
 800b6a0:	e7f2      	b.n	800b688 <__sinit+0xc>
 800b6a2:	bf00      	nop
 800b6a4:	0800b5e9 	.word	0x0800b5e9
 800b6a8:	200011c4 	.word	0x200011c4

0800b6ac <_fwalk_sglue>:
 800b6ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6b0:	4607      	mov	r7, r0
 800b6b2:	4688      	mov	r8, r1
 800b6b4:	4614      	mov	r4, r2
 800b6b6:	2600      	movs	r6, #0
 800b6b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6bc:	f1b9 0901 	subs.w	r9, r9, #1
 800b6c0:	d505      	bpl.n	800b6ce <_fwalk_sglue+0x22>
 800b6c2:	6824      	ldr	r4, [r4, #0]
 800b6c4:	2c00      	cmp	r4, #0
 800b6c6:	d1f7      	bne.n	800b6b8 <_fwalk_sglue+0xc>
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6ce:	89ab      	ldrh	r3, [r5, #12]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d907      	bls.n	800b6e4 <_fwalk_sglue+0x38>
 800b6d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6d8:	3301      	adds	r3, #1
 800b6da:	d003      	beq.n	800b6e4 <_fwalk_sglue+0x38>
 800b6dc:	4629      	mov	r1, r5
 800b6de:	4638      	mov	r0, r7
 800b6e0:	47c0      	blx	r8
 800b6e2:	4306      	orrs	r6, r0
 800b6e4:	3568      	adds	r5, #104	@ 0x68
 800b6e6:	e7e9      	b.n	800b6bc <_fwalk_sglue+0x10>

0800b6e8 <_puts_r>:
 800b6e8:	6a03      	ldr	r3, [r0, #32]
 800b6ea:	b570      	push	{r4, r5, r6, lr}
 800b6ec:	6884      	ldr	r4, [r0, #8]
 800b6ee:	4605      	mov	r5, r0
 800b6f0:	460e      	mov	r6, r1
 800b6f2:	b90b      	cbnz	r3, 800b6f8 <_puts_r+0x10>
 800b6f4:	f7ff ffc2 	bl	800b67c <__sinit>
 800b6f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b6fa:	07db      	lsls	r3, r3, #31
 800b6fc:	d405      	bmi.n	800b70a <_puts_r+0x22>
 800b6fe:	89a3      	ldrh	r3, [r4, #12]
 800b700:	0598      	lsls	r0, r3, #22
 800b702:	d402      	bmi.n	800b70a <_puts_r+0x22>
 800b704:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b706:	f000 f9a2 	bl	800ba4e <__retarget_lock_acquire_recursive>
 800b70a:	89a3      	ldrh	r3, [r4, #12]
 800b70c:	0719      	lsls	r1, r3, #28
 800b70e:	d502      	bpl.n	800b716 <_puts_r+0x2e>
 800b710:	6923      	ldr	r3, [r4, #16]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d135      	bne.n	800b782 <_puts_r+0x9a>
 800b716:	4621      	mov	r1, r4
 800b718:	4628      	mov	r0, r5
 800b71a:	f000 f8c5 	bl	800b8a8 <__swsetup_r>
 800b71e:	b380      	cbz	r0, 800b782 <_puts_r+0x9a>
 800b720:	f04f 35ff 	mov.w	r5, #4294967295
 800b724:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b726:	07da      	lsls	r2, r3, #31
 800b728:	d405      	bmi.n	800b736 <_puts_r+0x4e>
 800b72a:	89a3      	ldrh	r3, [r4, #12]
 800b72c:	059b      	lsls	r3, r3, #22
 800b72e:	d402      	bmi.n	800b736 <_puts_r+0x4e>
 800b730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b732:	f000 f98d 	bl	800ba50 <__retarget_lock_release_recursive>
 800b736:	4628      	mov	r0, r5
 800b738:	bd70      	pop	{r4, r5, r6, pc}
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	da04      	bge.n	800b748 <_puts_r+0x60>
 800b73e:	69a2      	ldr	r2, [r4, #24]
 800b740:	429a      	cmp	r2, r3
 800b742:	dc17      	bgt.n	800b774 <_puts_r+0x8c>
 800b744:	290a      	cmp	r1, #10
 800b746:	d015      	beq.n	800b774 <_puts_r+0x8c>
 800b748:	6823      	ldr	r3, [r4, #0]
 800b74a:	1c5a      	adds	r2, r3, #1
 800b74c:	6022      	str	r2, [r4, #0]
 800b74e:	7019      	strb	r1, [r3, #0]
 800b750:	68a3      	ldr	r3, [r4, #8]
 800b752:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b756:	3b01      	subs	r3, #1
 800b758:	60a3      	str	r3, [r4, #8]
 800b75a:	2900      	cmp	r1, #0
 800b75c:	d1ed      	bne.n	800b73a <_puts_r+0x52>
 800b75e:	2b00      	cmp	r3, #0
 800b760:	da11      	bge.n	800b786 <_puts_r+0x9e>
 800b762:	4622      	mov	r2, r4
 800b764:	210a      	movs	r1, #10
 800b766:	4628      	mov	r0, r5
 800b768:	f000 f85f 	bl	800b82a <__swbuf_r>
 800b76c:	3001      	adds	r0, #1
 800b76e:	d0d7      	beq.n	800b720 <_puts_r+0x38>
 800b770:	250a      	movs	r5, #10
 800b772:	e7d7      	b.n	800b724 <_puts_r+0x3c>
 800b774:	4622      	mov	r2, r4
 800b776:	4628      	mov	r0, r5
 800b778:	f000 f857 	bl	800b82a <__swbuf_r>
 800b77c:	3001      	adds	r0, #1
 800b77e:	d1e7      	bne.n	800b750 <_puts_r+0x68>
 800b780:	e7ce      	b.n	800b720 <_puts_r+0x38>
 800b782:	3e01      	subs	r6, #1
 800b784:	e7e4      	b.n	800b750 <_puts_r+0x68>
 800b786:	6823      	ldr	r3, [r4, #0]
 800b788:	1c5a      	adds	r2, r3, #1
 800b78a:	6022      	str	r2, [r4, #0]
 800b78c:	220a      	movs	r2, #10
 800b78e:	701a      	strb	r2, [r3, #0]
 800b790:	e7ee      	b.n	800b770 <_puts_r+0x88>
	...

0800b794 <puts>:
 800b794:	4b02      	ldr	r3, [pc, #8]	@ (800b7a0 <puts+0xc>)
 800b796:	4601      	mov	r1, r0
 800b798:	6818      	ldr	r0, [r3, #0]
 800b79a:	f7ff bfa5 	b.w	800b6e8 <_puts_r>
 800b79e:	bf00      	nop
 800b7a0:	20000118 	.word	0x20000118

0800b7a4 <__sread>:
 800b7a4:	b510      	push	{r4, lr}
 800b7a6:	460c      	mov	r4, r1
 800b7a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7ac:	f000 f900 	bl	800b9b0 <_read_r>
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	bfab      	itete	ge
 800b7b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b7b6:	89a3      	ldrhlt	r3, [r4, #12]
 800b7b8:	181b      	addge	r3, r3, r0
 800b7ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b7be:	bfac      	ite	ge
 800b7c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b7c2:	81a3      	strhlt	r3, [r4, #12]
 800b7c4:	bd10      	pop	{r4, pc}

0800b7c6 <__swrite>:
 800b7c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ca:	461f      	mov	r7, r3
 800b7cc:	898b      	ldrh	r3, [r1, #12]
 800b7ce:	05db      	lsls	r3, r3, #23
 800b7d0:	4605      	mov	r5, r0
 800b7d2:	460c      	mov	r4, r1
 800b7d4:	4616      	mov	r6, r2
 800b7d6:	d505      	bpl.n	800b7e4 <__swrite+0x1e>
 800b7d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7dc:	2302      	movs	r3, #2
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f000 f8d4 	bl	800b98c <_lseek_r>
 800b7e4:	89a3      	ldrh	r3, [r4, #12]
 800b7e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b7ee:	81a3      	strh	r3, [r4, #12]
 800b7f0:	4632      	mov	r2, r6
 800b7f2:	463b      	mov	r3, r7
 800b7f4:	4628      	mov	r0, r5
 800b7f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7fa:	f000 b8eb 	b.w	800b9d4 <_write_r>

0800b7fe <__sseek>:
 800b7fe:	b510      	push	{r4, lr}
 800b800:	460c      	mov	r4, r1
 800b802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b806:	f000 f8c1 	bl	800b98c <_lseek_r>
 800b80a:	1c43      	adds	r3, r0, #1
 800b80c:	89a3      	ldrh	r3, [r4, #12]
 800b80e:	bf15      	itete	ne
 800b810:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b812:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b816:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b81a:	81a3      	strheq	r3, [r4, #12]
 800b81c:	bf18      	it	ne
 800b81e:	81a3      	strhne	r3, [r4, #12]
 800b820:	bd10      	pop	{r4, pc}

0800b822 <__sclose>:
 800b822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b826:	f000 b8a1 	b.w	800b96c <_close_r>

0800b82a <__swbuf_r>:
 800b82a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82c:	460e      	mov	r6, r1
 800b82e:	4614      	mov	r4, r2
 800b830:	4605      	mov	r5, r0
 800b832:	b118      	cbz	r0, 800b83c <__swbuf_r+0x12>
 800b834:	6a03      	ldr	r3, [r0, #32]
 800b836:	b90b      	cbnz	r3, 800b83c <__swbuf_r+0x12>
 800b838:	f7ff ff20 	bl	800b67c <__sinit>
 800b83c:	69a3      	ldr	r3, [r4, #24]
 800b83e:	60a3      	str	r3, [r4, #8]
 800b840:	89a3      	ldrh	r3, [r4, #12]
 800b842:	071a      	lsls	r2, r3, #28
 800b844:	d501      	bpl.n	800b84a <__swbuf_r+0x20>
 800b846:	6923      	ldr	r3, [r4, #16]
 800b848:	b943      	cbnz	r3, 800b85c <__swbuf_r+0x32>
 800b84a:	4621      	mov	r1, r4
 800b84c:	4628      	mov	r0, r5
 800b84e:	f000 f82b 	bl	800b8a8 <__swsetup_r>
 800b852:	b118      	cbz	r0, 800b85c <__swbuf_r+0x32>
 800b854:	f04f 37ff 	mov.w	r7, #4294967295
 800b858:	4638      	mov	r0, r7
 800b85a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b85c:	6823      	ldr	r3, [r4, #0]
 800b85e:	6922      	ldr	r2, [r4, #16]
 800b860:	1a98      	subs	r0, r3, r2
 800b862:	6963      	ldr	r3, [r4, #20]
 800b864:	b2f6      	uxtb	r6, r6
 800b866:	4283      	cmp	r3, r0
 800b868:	4637      	mov	r7, r6
 800b86a:	dc05      	bgt.n	800b878 <__swbuf_r+0x4e>
 800b86c:	4621      	mov	r1, r4
 800b86e:	4628      	mov	r0, r5
 800b870:	f001 fc50 	bl	800d114 <_fflush_r>
 800b874:	2800      	cmp	r0, #0
 800b876:	d1ed      	bne.n	800b854 <__swbuf_r+0x2a>
 800b878:	68a3      	ldr	r3, [r4, #8]
 800b87a:	3b01      	subs	r3, #1
 800b87c:	60a3      	str	r3, [r4, #8]
 800b87e:	6823      	ldr	r3, [r4, #0]
 800b880:	1c5a      	adds	r2, r3, #1
 800b882:	6022      	str	r2, [r4, #0]
 800b884:	701e      	strb	r6, [r3, #0]
 800b886:	6962      	ldr	r2, [r4, #20]
 800b888:	1c43      	adds	r3, r0, #1
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d004      	beq.n	800b898 <__swbuf_r+0x6e>
 800b88e:	89a3      	ldrh	r3, [r4, #12]
 800b890:	07db      	lsls	r3, r3, #31
 800b892:	d5e1      	bpl.n	800b858 <__swbuf_r+0x2e>
 800b894:	2e0a      	cmp	r6, #10
 800b896:	d1df      	bne.n	800b858 <__swbuf_r+0x2e>
 800b898:	4621      	mov	r1, r4
 800b89a:	4628      	mov	r0, r5
 800b89c:	f001 fc3a 	bl	800d114 <_fflush_r>
 800b8a0:	2800      	cmp	r0, #0
 800b8a2:	d0d9      	beq.n	800b858 <__swbuf_r+0x2e>
 800b8a4:	e7d6      	b.n	800b854 <__swbuf_r+0x2a>
	...

0800b8a8 <__swsetup_r>:
 800b8a8:	b538      	push	{r3, r4, r5, lr}
 800b8aa:	4b29      	ldr	r3, [pc, #164]	@ (800b950 <__swsetup_r+0xa8>)
 800b8ac:	4605      	mov	r5, r0
 800b8ae:	6818      	ldr	r0, [r3, #0]
 800b8b0:	460c      	mov	r4, r1
 800b8b2:	b118      	cbz	r0, 800b8bc <__swsetup_r+0x14>
 800b8b4:	6a03      	ldr	r3, [r0, #32]
 800b8b6:	b90b      	cbnz	r3, 800b8bc <__swsetup_r+0x14>
 800b8b8:	f7ff fee0 	bl	800b67c <__sinit>
 800b8bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8c0:	0719      	lsls	r1, r3, #28
 800b8c2:	d422      	bmi.n	800b90a <__swsetup_r+0x62>
 800b8c4:	06da      	lsls	r2, r3, #27
 800b8c6:	d407      	bmi.n	800b8d8 <__swsetup_r+0x30>
 800b8c8:	2209      	movs	r2, #9
 800b8ca:	602a      	str	r2, [r5, #0]
 800b8cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8d0:	81a3      	strh	r3, [r4, #12]
 800b8d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d6:	e033      	b.n	800b940 <__swsetup_r+0x98>
 800b8d8:	0758      	lsls	r0, r3, #29
 800b8da:	d512      	bpl.n	800b902 <__swsetup_r+0x5a>
 800b8dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8de:	b141      	cbz	r1, 800b8f2 <__swsetup_r+0x4a>
 800b8e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8e4:	4299      	cmp	r1, r3
 800b8e6:	d002      	beq.n	800b8ee <__swsetup_r+0x46>
 800b8e8:	4628      	mov	r0, r5
 800b8ea:	f000 ff0d 	bl	800c708 <_free_r>
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8f2:	89a3      	ldrh	r3, [r4, #12]
 800b8f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b8f8:	81a3      	strh	r3, [r4, #12]
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	6063      	str	r3, [r4, #4]
 800b8fe:	6923      	ldr	r3, [r4, #16]
 800b900:	6023      	str	r3, [r4, #0]
 800b902:	89a3      	ldrh	r3, [r4, #12]
 800b904:	f043 0308 	orr.w	r3, r3, #8
 800b908:	81a3      	strh	r3, [r4, #12]
 800b90a:	6923      	ldr	r3, [r4, #16]
 800b90c:	b94b      	cbnz	r3, 800b922 <__swsetup_r+0x7a>
 800b90e:	89a3      	ldrh	r3, [r4, #12]
 800b910:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b914:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b918:	d003      	beq.n	800b922 <__swsetup_r+0x7a>
 800b91a:	4621      	mov	r1, r4
 800b91c:	4628      	mov	r0, r5
 800b91e:	f001 fc47 	bl	800d1b0 <__smakebuf_r>
 800b922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b926:	f013 0201 	ands.w	r2, r3, #1
 800b92a:	d00a      	beq.n	800b942 <__swsetup_r+0x9a>
 800b92c:	2200      	movs	r2, #0
 800b92e:	60a2      	str	r2, [r4, #8]
 800b930:	6962      	ldr	r2, [r4, #20]
 800b932:	4252      	negs	r2, r2
 800b934:	61a2      	str	r2, [r4, #24]
 800b936:	6922      	ldr	r2, [r4, #16]
 800b938:	b942      	cbnz	r2, 800b94c <__swsetup_r+0xa4>
 800b93a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b93e:	d1c5      	bne.n	800b8cc <__swsetup_r+0x24>
 800b940:	bd38      	pop	{r3, r4, r5, pc}
 800b942:	0799      	lsls	r1, r3, #30
 800b944:	bf58      	it	pl
 800b946:	6962      	ldrpl	r2, [r4, #20]
 800b948:	60a2      	str	r2, [r4, #8]
 800b94a:	e7f4      	b.n	800b936 <__swsetup_r+0x8e>
 800b94c:	2000      	movs	r0, #0
 800b94e:	e7f7      	b.n	800b940 <__swsetup_r+0x98>
 800b950:	20000118 	.word	0x20000118

0800b954 <memset>:
 800b954:	4402      	add	r2, r0
 800b956:	4603      	mov	r3, r0
 800b958:	4293      	cmp	r3, r2
 800b95a:	d100      	bne.n	800b95e <memset+0xa>
 800b95c:	4770      	bx	lr
 800b95e:	f803 1b01 	strb.w	r1, [r3], #1
 800b962:	e7f9      	b.n	800b958 <memset+0x4>

0800b964 <_localeconv_r>:
 800b964:	4800      	ldr	r0, [pc, #0]	@ (800b968 <_localeconv_r+0x4>)
 800b966:	4770      	bx	lr
 800b968:	20000258 	.word	0x20000258

0800b96c <_close_r>:
 800b96c:	b538      	push	{r3, r4, r5, lr}
 800b96e:	4d06      	ldr	r5, [pc, #24]	@ (800b988 <_close_r+0x1c>)
 800b970:	2300      	movs	r3, #0
 800b972:	4604      	mov	r4, r0
 800b974:	4608      	mov	r0, r1
 800b976:	602b      	str	r3, [r5, #0]
 800b978:	f7f6 fad6 	bl	8001f28 <_close>
 800b97c:	1c43      	adds	r3, r0, #1
 800b97e:	d102      	bne.n	800b986 <_close_r+0x1a>
 800b980:	682b      	ldr	r3, [r5, #0]
 800b982:	b103      	cbz	r3, 800b986 <_close_r+0x1a>
 800b984:	6023      	str	r3, [r4, #0]
 800b986:	bd38      	pop	{r3, r4, r5, pc}
 800b988:	200011c8 	.word	0x200011c8

0800b98c <_lseek_r>:
 800b98c:	b538      	push	{r3, r4, r5, lr}
 800b98e:	4d07      	ldr	r5, [pc, #28]	@ (800b9ac <_lseek_r+0x20>)
 800b990:	4604      	mov	r4, r0
 800b992:	4608      	mov	r0, r1
 800b994:	4611      	mov	r1, r2
 800b996:	2200      	movs	r2, #0
 800b998:	602a      	str	r2, [r5, #0]
 800b99a:	461a      	mov	r2, r3
 800b99c:	f7f6 faeb 	bl	8001f76 <_lseek>
 800b9a0:	1c43      	adds	r3, r0, #1
 800b9a2:	d102      	bne.n	800b9aa <_lseek_r+0x1e>
 800b9a4:	682b      	ldr	r3, [r5, #0]
 800b9a6:	b103      	cbz	r3, 800b9aa <_lseek_r+0x1e>
 800b9a8:	6023      	str	r3, [r4, #0]
 800b9aa:	bd38      	pop	{r3, r4, r5, pc}
 800b9ac:	200011c8 	.word	0x200011c8

0800b9b0 <_read_r>:
 800b9b0:	b538      	push	{r3, r4, r5, lr}
 800b9b2:	4d07      	ldr	r5, [pc, #28]	@ (800b9d0 <_read_r+0x20>)
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	4608      	mov	r0, r1
 800b9b8:	4611      	mov	r1, r2
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	602a      	str	r2, [r5, #0]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	f7f6 fa79 	bl	8001eb6 <_read>
 800b9c4:	1c43      	adds	r3, r0, #1
 800b9c6:	d102      	bne.n	800b9ce <_read_r+0x1e>
 800b9c8:	682b      	ldr	r3, [r5, #0]
 800b9ca:	b103      	cbz	r3, 800b9ce <_read_r+0x1e>
 800b9cc:	6023      	str	r3, [r4, #0]
 800b9ce:	bd38      	pop	{r3, r4, r5, pc}
 800b9d0:	200011c8 	.word	0x200011c8

0800b9d4 <_write_r>:
 800b9d4:	b538      	push	{r3, r4, r5, lr}
 800b9d6:	4d07      	ldr	r5, [pc, #28]	@ (800b9f4 <_write_r+0x20>)
 800b9d8:	4604      	mov	r4, r0
 800b9da:	4608      	mov	r0, r1
 800b9dc:	4611      	mov	r1, r2
 800b9de:	2200      	movs	r2, #0
 800b9e0:	602a      	str	r2, [r5, #0]
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	f7f6 fa84 	bl	8001ef0 <_write>
 800b9e8:	1c43      	adds	r3, r0, #1
 800b9ea:	d102      	bne.n	800b9f2 <_write_r+0x1e>
 800b9ec:	682b      	ldr	r3, [r5, #0]
 800b9ee:	b103      	cbz	r3, 800b9f2 <_write_r+0x1e>
 800b9f0:	6023      	str	r3, [r4, #0]
 800b9f2:	bd38      	pop	{r3, r4, r5, pc}
 800b9f4:	200011c8 	.word	0x200011c8

0800b9f8 <__errno>:
 800b9f8:	4b01      	ldr	r3, [pc, #4]	@ (800ba00 <__errno+0x8>)
 800b9fa:	6818      	ldr	r0, [r3, #0]
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop
 800ba00:	20000118 	.word	0x20000118

0800ba04 <__libc_init_array>:
 800ba04:	b570      	push	{r4, r5, r6, lr}
 800ba06:	4d0d      	ldr	r5, [pc, #52]	@ (800ba3c <__libc_init_array+0x38>)
 800ba08:	4c0d      	ldr	r4, [pc, #52]	@ (800ba40 <__libc_init_array+0x3c>)
 800ba0a:	1b64      	subs	r4, r4, r5
 800ba0c:	10a4      	asrs	r4, r4, #2
 800ba0e:	2600      	movs	r6, #0
 800ba10:	42a6      	cmp	r6, r4
 800ba12:	d109      	bne.n	800ba28 <__libc_init_array+0x24>
 800ba14:	4d0b      	ldr	r5, [pc, #44]	@ (800ba44 <__libc_init_array+0x40>)
 800ba16:	4c0c      	ldr	r4, [pc, #48]	@ (800ba48 <__libc_init_array+0x44>)
 800ba18:	f001 fe28 	bl	800d66c <_init>
 800ba1c:	1b64      	subs	r4, r4, r5
 800ba1e:	10a4      	asrs	r4, r4, #2
 800ba20:	2600      	movs	r6, #0
 800ba22:	42a6      	cmp	r6, r4
 800ba24:	d105      	bne.n	800ba32 <__libc_init_array+0x2e>
 800ba26:	bd70      	pop	{r4, r5, r6, pc}
 800ba28:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba2c:	4798      	blx	r3
 800ba2e:	3601      	adds	r6, #1
 800ba30:	e7ee      	b.n	800ba10 <__libc_init_array+0xc>
 800ba32:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba36:	4798      	blx	r3
 800ba38:	3601      	adds	r6, #1
 800ba3a:	e7f2      	b.n	800ba22 <__libc_init_array+0x1e>
 800ba3c:	0800da80 	.word	0x0800da80
 800ba40:	0800da80 	.word	0x0800da80
 800ba44:	0800da80 	.word	0x0800da80
 800ba48:	0800da84 	.word	0x0800da84

0800ba4c <__retarget_lock_init_recursive>:
 800ba4c:	4770      	bx	lr

0800ba4e <__retarget_lock_acquire_recursive>:
 800ba4e:	4770      	bx	lr

0800ba50 <__retarget_lock_release_recursive>:
 800ba50:	4770      	bx	lr

0800ba52 <memcpy>:
 800ba52:	440a      	add	r2, r1
 800ba54:	4291      	cmp	r1, r2
 800ba56:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba5a:	d100      	bne.n	800ba5e <memcpy+0xc>
 800ba5c:	4770      	bx	lr
 800ba5e:	b510      	push	{r4, lr}
 800ba60:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba64:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba68:	4291      	cmp	r1, r2
 800ba6a:	d1f9      	bne.n	800ba60 <memcpy+0xe>
 800ba6c:	bd10      	pop	{r4, pc}

0800ba6e <quorem>:
 800ba6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba72:	6903      	ldr	r3, [r0, #16]
 800ba74:	690c      	ldr	r4, [r1, #16]
 800ba76:	42a3      	cmp	r3, r4
 800ba78:	4607      	mov	r7, r0
 800ba7a:	db7e      	blt.n	800bb7a <quorem+0x10c>
 800ba7c:	3c01      	subs	r4, #1
 800ba7e:	f101 0814 	add.w	r8, r1, #20
 800ba82:	00a3      	lsls	r3, r4, #2
 800ba84:	f100 0514 	add.w	r5, r0, #20
 800ba88:	9300      	str	r3, [sp, #0]
 800ba8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba8e:	9301      	str	r3, [sp, #4]
 800ba90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ba94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba98:	3301      	adds	r3, #1
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800baa0:	fbb2 f6f3 	udiv	r6, r2, r3
 800baa4:	d32e      	bcc.n	800bb04 <quorem+0x96>
 800baa6:	f04f 0a00 	mov.w	sl, #0
 800baaa:	46c4      	mov	ip, r8
 800baac:	46ae      	mov	lr, r5
 800baae:	46d3      	mov	fp, sl
 800bab0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bab4:	b298      	uxth	r0, r3
 800bab6:	fb06 a000 	mla	r0, r6, r0, sl
 800baba:	0c02      	lsrs	r2, r0, #16
 800babc:	0c1b      	lsrs	r3, r3, #16
 800babe:	fb06 2303 	mla	r3, r6, r3, r2
 800bac2:	f8de 2000 	ldr.w	r2, [lr]
 800bac6:	b280      	uxth	r0, r0
 800bac8:	b292      	uxth	r2, r2
 800baca:	1a12      	subs	r2, r2, r0
 800bacc:	445a      	add	r2, fp
 800bace:	f8de 0000 	ldr.w	r0, [lr]
 800bad2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800badc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bae0:	b292      	uxth	r2, r2
 800bae2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bae6:	45e1      	cmp	r9, ip
 800bae8:	f84e 2b04 	str.w	r2, [lr], #4
 800baec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800baf0:	d2de      	bcs.n	800bab0 <quorem+0x42>
 800baf2:	9b00      	ldr	r3, [sp, #0]
 800baf4:	58eb      	ldr	r3, [r5, r3]
 800baf6:	b92b      	cbnz	r3, 800bb04 <quorem+0x96>
 800baf8:	9b01      	ldr	r3, [sp, #4]
 800bafa:	3b04      	subs	r3, #4
 800bafc:	429d      	cmp	r5, r3
 800bafe:	461a      	mov	r2, r3
 800bb00:	d32f      	bcc.n	800bb62 <quorem+0xf4>
 800bb02:	613c      	str	r4, [r7, #16]
 800bb04:	4638      	mov	r0, r7
 800bb06:	f001 f979 	bl	800cdfc <__mcmp>
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	db25      	blt.n	800bb5a <quorem+0xec>
 800bb0e:	4629      	mov	r1, r5
 800bb10:	2000      	movs	r0, #0
 800bb12:	f858 2b04 	ldr.w	r2, [r8], #4
 800bb16:	f8d1 c000 	ldr.w	ip, [r1]
 800bb1a:	fa1f fe82 	uxth.w	lr, r2
 800bb1e:	fa1f f38c 	uxth.w	r3, ip
 800bb22:	eba3 030e 	sub.w	r3, r3, lr
 800bb26:	4403      	add	r3, r0
 800bb28:	0c12      	lsrs	r2, r2, #16
 800bb2a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bb2e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb38:	45c1      	cmp	r9, r8
 800bb3a:	f841 3b04 	str.w	r3, [r1], #4
 800bb3e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bb42:	d2e6      	bcs.n	800bb12 <quorem+0xa4>
 800bb44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb4c:	b922      	cbnz	r2, 800bb58 <quorem+0xea>
 800bb4e:	3b04      	subs	r3, #4
 800bb50:	429d      	cmp	r5, r3
 800bb52:	461a      	mov	r2, r3
 800bb54:	d30b      	bcc.n	800bb6e <quorem+0x100>
 800bb56:	613c      	str	r4, [r7, #16]
 800bb58:	3601      	adds	r6, #1
 800bb5a:	4630      	mov	r0, r6
 800bb5c:	b003      	add	sp, #12
 800bb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb62:	6812      	ldr	r2, [r2, #0]
 800bb64:	3b04      	subs	r3, #4
 800bb66:	2a00      	cmp	r2, #0
 800bb68:	d1cb      	bne.n	800bb02 <quorem+0x94>
 800bb6a:	3c01      	subs	r4, #1
 800bb6c:	e7c6      	b.n	800bafc <quorem+0x8e>
 800bb6e:	6812      	ldr	r2, [r2, #0]
 800bb70:	3b04      	subs	r3, #4
 800bb72:	2a00      	cmp	r2, #0
 800bb74:	d1ef      	bne.n	800bb56 <quorem+0xe8>
 800bb76:	3c01      	subs	r4, #1
 800bb78:	e7ea      	b.n	800bb50 <quorem+0xe2>
 800bb7a:	2000      	movs	r0, #0
 800bb7c:	e7ee      	b.n	800bb5c <quorem+0xee>
	...

0800bb80 <_dtoa_r>:
 800bb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb84:	69c7      	ldr	r7, [r0, #28]
 800bb86:	b099      	sub	sp, #100	@ 0x64
 800bb88:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bb8c:	ec55 4b10 	vmov	r4, r5, d0
 800bb90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bb92:	9109      	str	r1, [sp, #36]	@ 0x24
 800bb94:	4683      	mov	fp, r0
 800bb96:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb98:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bb9a:	b97f      	cbnz	r7, 800bbbc <_dtoa_r+0x3c>
 800bb9c:	2010      	movs	r0, #16
 800bb9e:	f000 fdfd 	bl	800c79c <malloc>
 800bba2:	4602      	mov	r2, r0
 800bba4:	f8cb 001c 	str.w	r0, [fp, #28]
 800bba8:	b920      	cbnz	r0, 800bbb4 <_dtoa_r+0x34>
 800bbaa:	4ba7      	ldr	r3, [pc, #668]	@ (800be48 <_dtoa_r+0x2c8>)
 800bbac:	21ef      	movs	r1, #239	@ 0xef
 800bbae:	48a7      	ldr	r0, [pc, #668]	@ (800be4c <_dtoa_r+0x2cc>)
 800bbb0:	f001 fb6c 	bl	800d28c <__assert_func>
 800bbb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bbb8:	6007      	str	r7, [r0, #0]
 800bbba:	60c7      	str	r7, [r0, #12]
 800bbbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bbc0:	6819      	ldr	r1, [r3, #0]
 800bbc2:	b159      	cbz	r1, 800bbdc <_dtoa_r+0x5c>
 800bbc4:	685a      	ldr	r2, [r3, #4]
 800bbc6:	604a      	str	r2, [r1, #4]
 800bbc8:	2301      	movs	r3, #1
 800bbca:	4093      	lsls	r3, r2
 800bbcc:	608b      	str	r3, [r1, #8]
 800bbce:	4658      	mov	r0, fp
 800bbd0:	f000 feda 	bl	800c988 <_Bfree>
 800bbd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	601a      	str	r2, [r3, #0]
 800bbdc:	1e2b      	subs	r3, r5, #0
 800bbde:	bfb9      	ittee	lt
 800bbe0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bbe4:	9303      	strlt	r3, [sp, #12]
 800bbe6:	2300      	movge	r3, #0
 800bbe8:	6033      	strge	r3, [r6, #0]
 800bbea:	9f03      	ldr	r7, [sp, #12]
 800bbec:	4b98      	ldr	r3, [pc, #608]	@ (800be50 <_dtoa_r+0x2d0>)
 800bbee:	bfbc      	itt	lt
 800bbf0:	2201      	movlt	r2, #1
 800bbf2:	6032      	strlt	r2, [r6, #0]
 800bbf4:	43bb      	bics	r3, r7
 800bbf6:	d112      	bne.n	800bc1e <_dtoa_r+0x9e>
 800bbf8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bbfa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bbfe:	6013      	str	r3, [r2, #0]
 800bc00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bc04:	4323      	orrs	r3, r4
 800bc06:	f000 854d 	beq.w	800c6a4 <_dtoa_r+0xb24>
 800bc0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bc0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800be64 <_dtoa_r+0x2e4>
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	f000 854f 	beq.w	800c6b4 <_dtoa_r+0xb34>
 800bc16:	f10a 0303 	add.w	r3, sl, #3
 800bc1a:	f000 bd49 	b.w	800c6b0 <_dtoa_r+0xb30>
 800bc1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc22:	2200      	movs	r2, #0
 800bc24:	ec51 0b17 	vmov	r0, r1, d7
 800bc28:	2300      	movs	r3, #0
 800bc2a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bc2e:	f7f4 ff53 	bl	8000ad8 <__aeabi_dcmpeq>
 800bc32:	4680      	mov	r8, r0
 800bc34:	b158      	cbz	r0, 800bc4e <_dtoa_r+0xce>
 800bc36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bc38:	2301      	movs	r3, #1
 800bc3a:	6013      	str	r3, [r2, #0]
 800bc3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bc3e:	b113      	cbz	r3, 800bc46 <_dtoa_r+0xc6>
 800bc40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bc42:	4b84      	ldr	r3, [pc, #528]	@ (800be54 <_dtoa_r+0x2d4>)
 800bc44:	6013      	str	r3, [r2, #0]
 800bc46:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800be68 <_dtoa_r+0x2e8>
 800bc4a:	f000 bd33 	b.w	800c6b4 <_dtoa_r+0xb34>
 800bc4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bc52:	aa16      	add	r2, sp, #88	@ 0x58
 800bc54:	a917      	add	r1, sp, #92	@ 0x5c
 800bc56:	4658      	mov	r0, fp
 800bc58:	f001 f980 	bl	800cf5c <__d2b>
 800bc5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bc60:	4681      	mov	r9, r0
 800bc62:	2e00      	cmp	r6, #0
 800bc64:	d077      	beq.n	800bd56 <_dtoa_r+0x1d6>
 800bc66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc68:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bc6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bc78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bc7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bc80:	4619      	mov	r1, r3
 800bc82:	2200      	movs	r2, #0
 800bc84:	4b74      	ldr	r3, [pc, #464]	@ (800be58 <_dtoa_r+0x2d8>)
 800bc86:	f7f4 fb07 	bl	8000298 <__aeabi_dsub>
 800bc8a:	a369      	add	r3, pc, #420	@ (adr r3, 800be30 <_dtoa_r+0x2b0>)
 800bc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc90:	f7f4 fcba 	bl	8000608 <__aeabi_dmul>
 800bc94:	a368      	add	r3, pc, #416	@ (adr r3, 800be38 <_dtoa_r+0x2b8>)
 800bc96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9a:	f7f4 faff 	bl	800029c <__adddf3>
 800bc9e:	4604      	mov	r4, r0
 800bca0:	4630      	mov	r0, r6
 800bca2:	460d      	mov	r5, r1
 800bca4:	f7f4 fc46 	bl	8000534 <__aeabi_i2d>
 800bca8:	a365      	add	r3, pc, #404	@ (adr r3, 800be40 <_dtoa_r+0x2c0>)
 800bcaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcae:	f7f4 fcab 	bl	8000608 <__aeabi_dmul>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	4629      	mov	r1, r5
 800bcba:	f7f4 faef 	bl	800029c <__adddf3>
 800bcbe:	4604      	mov	r4, r0
 800bcc0:	460d      	mov	r5, r1
 800bcc2:	f7f4 ff51 	bl	8000b68 <__aeabi_d2iz>
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	4607      	mov	r7, r0
 800bcca:	2300      	movs	r3, #0
 800bccc:	4620      	mov	r0, r4
 800bcce:	4629      	mov	r1, r5
 800bcd0:	f7f4 ff0c 	bl	8000aec <__aeabi_dcmplt>
 800bcd4:	b140      	cbz	r0, 800bce8 <_dtoa_r+0x168>
 800bcd6:	4638      	mov	r0, r7
 800bcd8:	f7f4 fc2c 	bl	8000534 <__aeabi_i2d>
 800bcdc:	4622      	mov	r2, r4
 800bcde:	462b      	mov	r3, r5
 800bce0:	f7f4 fefa 	bl	8000ad8 <__aeabi_dcmpeq>
 800bce4:	b900      	cbnz	r0, 800bce8 <_dtoa_r+0x168>
 800bce6:	3f01      	subs	r7, #1
 800bce8:	2f16      	cmp	r7, #22
 800bcea:	d851      	bhi.n	800bd90 <_dtoa_r+0x210>
 800bcec:	4b5b      	ldr	r3, [pc, #364]	@ (800be5c <_dtoa_r+0x2dc>)
 800bcee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bcfa:	f7f4 fef7 	bl	8000aec <__aeabi_dcmplt>
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	d048      	beq.n	800bd94 <_dtoa_r+0x214>
 800bd02:	3f01      	subs	r7, #1
 800bd04:	2300      	movs	r3, #0
 800bd06:	9312      	str	r3, [sp, #72]	@ 0x48
 800bd08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bd0a:	1b9b      	subs	r3, r3, r6
 800bd0c:	1e5a      	subs	r2, r3, #1
 800bd0e:	bf44      	itt	mi
 800bd10:	f1c3 0801 	rsbmi	r8, r3, #1
 800bd14:	2300      	movmi	r3, #0
 800bd16:	9208      	str	r2, [sp, #32]
 800bd18:	bf54      	ite	pl
 800bd1a:	f04f 0800 	movpl.w	r8, #0
 800bd1e:	9308      	strmi	r3, [sp, #32]
 800bd20:	2f00      	cmp	r7, #0
 800bd22:	db39      	blt.n	800bd98 <_dtoa_r+0x218>
 800bd24:	9b08      	ldr	r3, [sp, #32]
 800bd26:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bd28:	443b      	add	r3, r7
 800bd2a:	9308      	str	r3, [sp, #32]
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd32:	2b09      	cmp	r3, #9
 800bd34:	d864      	bhi.n	800be00 <_dtoa_r+0x280>
 800bd36:	2b05      	cmp	r3, #5
 800bd38:	bfc4      	itt	gt
 800bd3a:	3b04      	subgt	r3, #4
 800bd3c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bd3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd40:	f1a3 0302 	sub.w	r3, r3, #2
 800bd44:	bfcc      	ite	gt
 800bd46:	2400      	movgt	r4, #0
 800bd48:	2401      	movle	r4, #1
 800bd4a:	2b03      	cmp	r3, #3
 800bd4c:	d863      	bhi.n	800be16 <_dtoa_r+0x296>
 800bd4e:	e8df f003 	tbb	[pc, r3]
 800bd52:	372a      	.short	0x372a
 800bd54:	5535      	.short	0x5535
 800bd56:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bd5a:	441e      	add	r6, r3
 800bd5c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bd60:	2b20      	cmp	r3, #32
 800bd62:	bfc1      	itttt	gt
 800bd64:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bd68:	409f      	lslgt	r7, r3
 800bd6a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bd6e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bd72:	bfd6      	itet	le
 800bd74:	f1c3 0320 	rsble	r3, r3, #32
 800bd78:	ea47 0003 	orrgt.w	r0, r7, r3
 800bd7c:	fa04 f003 	lslle.w	r0, r4, r3
 800bd80:	f7f4 fbc8 	bl	8000514 <__aeabi_ui2d>
 800bd84:	2201      	movs	r2, #1
 800bd86:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bd8a:	3e01      	subs	r6, #1
 800bd8c:	9214      	str	r2, [sp, #80]	@ 0x50
 800bd8e:	e777      	b.n	800bc80 <_dtoa_r+0x100>
 800bd90:	2301      	movs	r3, #1
 800bd92:	e7b8      	b.n	800bd06 <_dtoa_r+0x186>
 800bd94:	9012      	str	r0, [sp, #72]	@ 0x48
 800bd96:	e7b7      	b.n	800bd08 <_dtoa_r+0x188>
 800bd98:	427b      	negs	r3, r7
 800bd9a:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	eba8 0807 	sub.w	r8, r8, r7
 800bda2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bda4:	e7c4      	b.n	800bd30 <_dtoa_r+0x1b0>
 800bda6:	2300      	movs	r3, #0
 800bda8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bdaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	dc35      	bgt.n	800be1c <_dtoa_r+0x29c>
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	9300      	str	r3, [sp, #0]
 800bdb4:	9307      	str	r3, [sp, #28]
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	920e      	str	r2, [sp, #56]	@ 0x38
 800bdba:	e00b      	b.n	800bdd4 <_dtoa_r+0x254>
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	e7f3      	b.n	800bda8 <_dtoa_r+0x228>
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bdc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdc6:	18fb      	adds	r3, r7, r3
 800bdc8:	9300      	str	r3, [sp, #0]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	9307      	str	r3, [sp, #28]
 800bdd0:	bfb8      	it	lt
 800bdd2:	2301      	movlt	r3, #1
 800bdd4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bdd8:	2100      	movs	r1, #0
 800bdda:	2204      	movs	r2, #4
 800bddc:	f102 0514 	add.w	r5, r2, #20
 800bde0:	429d      	cmp	r5, r3
 800bde2:	d91f      	bls.n	800be24 <_dtoa_r+0x2a4>
 800bde4:	6041      	str	r1, [r0, #4]
 800bde6:	4658      	mov	r0, fp
 800bde8:	f000 fd8e 	bl	800c908 <_Balloc>
 800bdec:	4682      	mov	sl, r0
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	d13c      	bne.n	800be6c <_dtoa_r+0x2ec>
 800bdf2:	4b1b      	ldr	r3, [pc, #108]	@ (800be60 <_dtoa_r+0x2e0>)
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	f240 11af 	movw	r1, #431	@ 0x1af
 800bdfa:	e6d8      	b.n	800bbae <_dtoa_r+0x2e>
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	e7e0      	b.n	800bdc2 <_dtoa_r+0x242>
 800be00:	2401      	movs	r4, #1
 800be02:	2300      	movs	r3, #0
 800be04:	9309      	str	r3, [sp, #36]	@ 0x24
 800be06:	940b      	str	r4, [sp, #44]	@ 0x2c
 800be08:	f04f 33ff 	mov.w	r3, #4294967295
 800be0c:	9300      	str	r3, [sp, #0]
 800be0e:	9307      	str	r3, [sp, #28]
 800be10:	2200      	movs	r2, #0
 800be12:	2312      	movs	r3, #18
 800be14:	e7d0      	b.n	800bdb8 <_dtoa_r+0x238>
 800be16:	2301      	movs	r3, #1
 800be18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be1a:	e7f5      	b.n	800be08 <_dtoa_r+0x288>
 800be1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be1e:	9300      	str	r3, [sp, #0]
 800be20:	9307      	str	r3, [sp, #28]
 800be22:	e7d7      	b.n	800bdd4 <_dtoa_r+0x254>
 800be24:	3101      	adds	r1, #1
 800be26:	0052      	lsls	r2, r2, #1
 800be28:	e7d8      	b.n	800bddc <_dtoa_r+0x25c>
 800be2a:	bf00      	nop
 800be2c:	f3af 8000 	nop.w
 800be30:	636f4361 	.word	0x636f4361
 800be34:	3fd287a7 	.word	0x3fd287a7
 800be38:	8b60c8b3 	.word	0x8b60c8b3
 800be3c:	3fc68a28 	.word	0x3fc68a28
 800be40:	509f79fb 	.word	0x509f79fb
 800be44:	3fd34413 	.word	0x3fd34413
 800be48:	0800d749 	.word	0x0800d749
 800be4c:	0800d760 	.word	0x0800d760
 800be50:	7ff00000 	.word	0x7ff00000
 800be54:	0800d719 	.word	0x0800d719
 800be58:	3ff80000 	.word	0x3ff80000
 800be5c:	0800d858 	.word	0x0800d858
 800be60:	0800d7b8 	.word	0x0800d7b8
 800be64:	0800d745 	.word	0x0800d745
 800be68:	0800d718 	.word	0x0800d718
 800be6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800be70:	6018      	str	r0, [r3, #0]
 800be72:	9b07      	ldr	r3, [sp, #28]
 800be74:	2b0e      	cmp	r3, #14
 800be76:	f200 80a4 	bhi.w	800bfc2 <_dtoa_r+0x442>
 800be7a:	2c00      	cmp	r4, #0
 800be7c:	f000 80a1 	beq.w	800bfc2 <_dtoa_r+0x442>
 800be80:	2f00      	cmp	r7, #0
 800be82:	dd33      	ble.n	800beec <_dtoa_r+0x36c>
 800be84:	4bad      	ldr	r3, [pc, #692]	@ (800c13c <_dtoa_r+0x5bc>)
 800be86:	f007 020f 	and.w	r2, r7, #15
 800be8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be8e:	ed93 7b00 	vldr	d7, [r3]
 800be92:	05f8      	lsls	r0, r7, #23
 800be94:	ed8d 7b04 	vstr	d7, [sp, #16]
 800be98:	ea4f 1427 	mov.w	r4, r7, asr #4
 800be9c:	d516      	bpl.n	800becc <_dtoa_r+0x34c>
 800be9e:	4ba8      	ldr	r3, [pc, #672]	@ (800c140 <_dtoa_r+0x5c0>)
 800bea0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bea4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bea8:	f7f4 fcd8 	bl	800085c <__aeabi_ddiv>
 800beac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800beb0:	f004 040f 	and.w	r4, r4, #15
 800beb4:	2603      	movs	r6, #3
 800beb6:	4da2      	ldr	r5, [pc, #648]	@ (800c140 <_dtoa_r+0x5c0>)
 800beb8:	b954      	cbnz	r4, 800bed0 <_dtoa_r+0x350>
 800beba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bec2:	f7f4 fccb 	bl	800085c <__aeabi_ddiv>
 800bec6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800beca:	e028      	b.n	800bf1e <_dtoa_r+0x39e>
 800becc:	2602      	movs	r6, #2
 800bece:	e7f2      	b.n	800beb6 <_dtoa_r+0x336>
 800bed0:	07e1      	lsls	r1, r4, #31
 800bed2:	d508      	bpl.n	800bee6 <_dtoa_r+0x366>
 800bed4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bed8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bedc:	f7f4 fb94 	bl	8000608 <__aeabi_dmul>
 800bee0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bee4:	3601      	adds	r6, #1
 800bee6:	1064      	asrs	r4, r4, #1
 800bee8:	3508      	adds	r5, #8
 800beea:	e7e5      	b.n	800beb8 <_dtoa_r+0x338>
 800beec:	f000 80d2 	beq.w	800c094 <_dtoa_r+0x514>
 800bef0:	427c      	negs	r4, r7
 800bef2:	4b92      	ldr	r3, [pc, #584]	@ (800c13c <_dtoa_r+0x5bc>)
 800bef4:	4d92      	ldr	r5, [pc, #584]	@ (800c140 <_dtoa_r+0x5c0>)
 800bef6:	f004 020f 	and.w	r2, r4, #15
 800befa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800befe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf06:	f7f4 fb7f 	bl	8000608 <__aeabi_dmul>
 800bf0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf0e:	1124      	asrs	r4, r4, #4
 800bf10:	2300      	movs	r3, #0
 800bf12:	2602      	movs	r6, #2
 800bf14:	2c00      	cmp	r4, #0
 800bf16:	f040 80b2 	bne.w	800c07e <_dtoa_r+0x4fe>
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d1d3      	bne.n	800bec6 <_dtoa_r+0x346>
 800bf1e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bf20:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	f000 80b7 	beq.w	800c098 <_dtoa_r+0x518>
 800bf2a:	4b86      	ldr	r3, [pc, #536]	@ (800c144 <_dtoa_r+0x5c4>)
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	4620      	mov	r0, r4
 800bf30:	4629      	mov	r1, r5
 800bf32:	f7f4 fddb 	bl	8000aec <__aeabi_dcmplt>
 800bf36:	2800      	cmp	r0, #0
 800bf38:	f000 80ae 	beq.w	800c098 <_dtoa_r+0x518>
 800bf3c:	9b07      	ldr	r3, [sp, #28]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	f000 80aa 	beq.w	800c098 <_dtoa_r+0x518>
 800bf44:	9b00      	ldr	r3, [sp, #0]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	dd37      	ble.n	800bfba <_dtoa_r+0x43a>
 800bf4a:	1e7b      	subs	r3, r7, #1
 800bf4c:	9304      	str	r3, [sp, #16]
 800bf4e:	4620      	mov	r0, r4
 800bf50:	4b7d      	ldr	r3, [pc, #500]	@ (800c148 <_dtoa_r+0x5c8>)
 800bf52:	2200      	movs	r2, #0
 800bf54:	4629      	mov	r1, r5
 800bf56:	f7f4 fb57 	bl	8000608 <__aeabi_dmul>
 800bf5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf5e:	9c00      	ldr	r4, [sp, #0]
 800bf60:	3601      	adds	r6, #1
 800bf62:	4630      	mov	r0, r6
 800bf64:	f7f4 fae6 	bl	8000534 <__aeabi_i2d>
 800bf68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf6c:	f7f4 fb4c 	bl	8000608 <__aeabi_dmul>
 800bf70:	4b76      	ldr	r3, [pc, #472]	@ (800c14c <_dtoa_r+0x5cc>)
 800bf72:	2200      	movs	r2, #0
 800bf74:	f7f4 f992 	bl	800029c <__adddf3>
 800bf78:	4605      	mov	r5, r0
 800bf7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bf7e:	2c00      	cmp	r4, #0
 800bf80:	f040 808d 	bne.w	800c09e <_dtoa_r+0x51e>
 800bf84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf88:	4b71      	ldr	r3, [pc, #452]	@ (800c150 <_dtoa_r+0x5d0>)
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f7f4 f984 	bl	8000298 <__aeabi_dsub>
 800bf90:	4602      	mov	r2, r0
 800bf92:	460b      	mov	r3, r1
 800bf94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf98:	462a      	mov	r2, r5
 800bf9a:	4633      	mov	r3, r6
 800bf9c:	f7f4 fdc4 	bl	8000b28 <__aeabi_dcmpgt>
 800bfa0:	2800      	cmp	r0, #0
 800bfa2:	f040 828b 	bne.w	800c4bc <_dtoa_r+0x93c>
 800bfa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfaa:	462a      	mov	r2, r5
 800bfac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bfb0:	f7f4 fd9c 	bl	8000aec <__aeabi_dcmplt>
 800bfb4:	2800      	cmp	r0, #0
 800bfb6:	f040 8128 	bne.w	800c20a <_dtoa_r+0x68a>
 800bfba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bfbe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bfc2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	f2c0 815a 	blt.w	800c27e <_dtoa_r+0x6fe>
 800bfca:	2f0e      	cmp	r7, #14
 800bfcc:	f300 8157 	bgt.w	800c27e <_dtoa_r+0x6fe>
 800bfd0:	4b5a      	ldr	r3, [pc, #360]	@ (800c13c <_dtoa_r+0x5bc>)
 800bfd2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bfd6:	ed93 7b00 	vldr	d7, [r3]
 800bfda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	ed8d 7b00 	vstr	d7, [sp]
 800bfe2:	da03      	bge.n	800bfec <_dtoa_r+0x46c>
 800bfe4:	9b07      	ldr	r3, [sp, #28]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	f340 8101 	ble.w	800c1ee <_dtoa_r+0x66e>
 800bfec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bff0:	4656      	mov	r6, sl
 800bff2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bff6:	4620      	mov	r0, r4
 800bff8:	4629      	mov	r1, r5
 800bffa:	f7f4 fc2f 	bl	800085c <__aeabi_ddiv>
 800bffe:	f7f4 fdb3 	bl	8000b68 <__aeabi_d2iz>
 800c002:	4680      	mov	r8, r0
 800c004:	f7f4 fa96 	bl	8000534 <__aeabi_i2d>
 800c008:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c00c:	f7f4 fafc 	bl	8000608 <__aeabi_dmul>
 800c010:	4602      	mov	r2, r0
 800c012:	460b      	mov	r3, r1
 800c014:	4620      	mov	r0, r4
 800c016:	4629      	mov	r1, r5
 800c018:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c01c:	f7f4 f93c 	bl	8000298 <__aeabi_dsub>
 800c020:	f806 4b01 	strb.w	r4, [r6], #1
 800c024:	9d07      	ldr	r5, [sp, #28]
 800c026:	eba6 040a 	sub.w	r4, r6, sl
 800c02a:	42a5      	cmp	r5, r4
 800c02c:	4602      	mov	r2, r0
 800c02e:	460b      	mov	r3, r1
 800c030:	f040 8117 	bne.w	800c262 <_dtoa_r+0x6e2>
 800c034:	f7f4 f932 	bl	800029c <__adddf3>
 800c038:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c03c:	4604      	mov	r4, r0
 800c03e:	460d      	mov	r5, r1
 800c040:	f7f4 fd72 	bl	8000b28 <__aeabi_dcmpgt>
 800c044:	2800      	cmp	r0, #0
 800c046:	f040 80f9 	bne.w	800c23c <_dtoa_r+0x6bc>
 800c04a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c04e:	4620      	mov	r0, r4
 800c050:	4629      	mov	r1, r5
 800c052:	f7f4 fd41 	bl	8000ad8 <__aeabi_dcmpeq>
 800c056:	b118      	cbz	r0, 800c060 <_dtoa_r+0x4e0>
 800c058:	f018 0f01 	tst.w	r8, #1
 800c05c:	f040 80ee 	bne.w	800c23c <_dtoa_r+0x6bc>
 800c060:	4649      	mov	r1, r9
 800c062:	4658      	mov	r0, fp
 800c064:	f000 fc90 	bl	800c988 <_Bfree>
 800c068:	2300      	movs	r3, #0
 800c06a:	7033      	strb	r3, [r6, #0]
 800c06c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c06e:	3701      	adds	r7, #1
 800c070:	601f      	str	r7, [r3, #0]
 800c072:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c074:	2b00      	cmp	r3, #0
 800c076:	f000 831d 	beq.w	800c6b4 <_dtoa_r+0xb34>
 800c07a:	601e      	str	r6, [r3, #0]
 800c07c:	e31a      	b.n	800c6b4 <_dtoa_r+0xb34>
 800c07e:	07e2      	lsls	r2, r4, #31
 800c080:	d505      	bpl.n	800c08e <_dtoa_r+0x50e>
 800c082:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c086:	f7f4 fabf 	bl	8000608 <__aeabi_dmul>
 800c08a:	3601      	adds	r6, #1
 800c08c:	2301      	movs	r3, #1
 800c08e:	1064      	asrs	r4, r4, #1
 800c090:	3508      	adds	r5, #8
 800c092:	e73f      	b.n	800bf14 <_dtoa_r+0x394>
 800c094:	2602      	movs	r6, #2
 800c096:	e742      	b.n	800bf1e <_dtoa_r+0x39e>
 800c098:	9c07      	ldr	r4, [sp, #28]
 800c09a:	9704      	str	r7, [sp, #16]
 800c09c:	e761      	b.n	800bf62 <_dtoa_r+0x3e2>
 800c09e:	4b27      	ldr	r3, [pc, #156]	@ (800c13c <_dtoa_r+0x5bc>)
 800c0a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c0a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c0a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c0aa:	4454      	add	r4, sl
 800c0ac:	2900      	cmp	r1, #0
 800c0ae:	d053      	beq.n	800c158 <_dtoa_r+0x5d8>
 800c0b0:	4928      	ldr	r1, [pc, #160]	@ (800c154 <_dtoa_r+0x5d4>)
 800c0b2:	2000      	movs	r0, #0
 800c0b4:	f7f4 fbd2 	bl	800085c <__aeabi_ddiv>
 800c0b8:	4633      	mov	r3, r6
 800c0ba:	462a      	mov	r2, r5
 800c0bc:	f7f4 f8ec 	bl	8000298 <__aeabi_dsub>
 800c0c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c0c4:	4656      	mov	r6, sl
 800c0c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0ca:	f7f4 fd4d 	bl	8000b68 <__aeabi_d2iz>
 800c0ce:	4605      	mov	r5, r0
 800c0d0:	f7f4 fa30 	bl	8000534 <__aeabi_i2d>
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	460b      	mov	r3, r1
 800c0d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0dc:	f7f4 f8dc 	bl	8000298 <__aeabi_dsub>
 800c0e0:	3530      	adds	r5, #48	@ 0x30
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c0ea:	f806 5b01 	strb.w	r5, [r6], #1
 800c0ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c0f2:	f7f4 fcfb 	bl	8000aec <__aeabi_dcmplt>
 800c0f6:	2800      	cmp	r0, #0
 800c0f8:	d171      	bne.n	800c1de <_dtoa_r+0x65e>
 800c0fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0fe:	4911      	ldr	r1, [pc, #68]	@ (800c144 <_dtoa_r+0x5c4>)
 800c100:	2000      	movs	r0, #0
 800c102:	f7f4 f8c9 	bl	8000298 <__aeabi_dsub>
 800c106:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c10a:	f7f4 fcef 	bl	8000aec <__aeabi_dcmplt>
 800c10e:	2800      	cmp	r0, #0
 800c110:	f040 8095 	bne.w	800c23e <_dtoa_r+0x6be>
 800c114:	42a6      	cmp	r6, r4
 800c116:	f43f af50 	beq.w	800bfba <_dtoa_r+0x43a>
 800c11a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c11e:	4b0a      	ldr	r3, [pc, #40]	@ (800c148 <_dtoa_r+0x5c8>)
 800c120:	2200      	movs	r2, #0
 800c122:	f7f4 fa71 	bl	8000608 <__aeabi_dmul>
 800c126:	4b08      	ldr	r3, [pc, #32]	@ (800c148 <_dtoa_r+0x5c8>)
 800c128:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c12c:	2200      	movs	r2, #0
 800c12e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c132:	f7f4 fa69 	bl	8000608 <__aeabi_dmul>
 800c136:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c13a:	e7c4      	b.n	800c0c6 <_dtoa_r+0x546>
 800c13c:	0800d858 	.word	0x0800d858
 800c140:	0800d830 	.word	0x0800d830
 800c144:	3ff00000 	.word	0x3ff00000
 800c148:	40240000 	.word	0x40240000
 800c14c:	401c0000 	.word	0x401c0000
 800c150:	40140000 	.word	0x40140000
 800c154:	3fe00000 	.word	0x3fe00000
 800c158:	4631      	mov	r1, r6
 800c15a:	4628      	mov	r0, r5
 800c15c:	f7f4 fa54 	bl	8000608 <__aeabi_dmul>
 800c160:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c164:	9415      	str	r4, [sp, #84]	@ 0x54
 800c166:	4656      	mov	r6, sl
 800c168:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c16c:	f7f4 fcfc 	bl	8000b68 <__aeabi_d2iz>
 800c170:	4605      	mov	r5, r0
 800c172:	f7f4 f9df 	bl	8000534 <__aeabi_i2d>
 800c176:	4602      	mov	r2, r0
 800c178:	460b      	mov	r3, r1
 800c17a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c17e:	f7f4 f88b 	bl	8000298 <__aeabi_dsub>
 800c182:	3530      	adds	r5, #48	@ 0x30
 800c184:	f806 5b01 	strb.w	r5, [r6], #1
 800c188:	4602      	mov	r2, r0
 800c18a:	460b      	mov	r3, r1
 800c18c:	42a6      	cmp	r6, r4
 800c18e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c192:	f04f 0200 	mov.w	r2, #0
 800c196:	d124      	bne.n	800c1e2 <_dtoa_r+0x662>
 800c198:	4bac      	ldr	r3, [pc, #688]	@ (800c44c <_dtoa_r+0x8cc>)
 800c19a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c19e:	f7f4 f87d 	bl	800029c <__adddf3>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1aa:	f7f4 fcbd 	bl	8000b28 <__aeabi_dcmpgt>
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	d145      	bne.n	800c23e <_dtoa_r+0x6be>
 800c1b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c1b6:	49a5      	ldr	r1, [pc, #660]	@ (800c44c <_dtoa_r+0x8cc>)
 800c1b8:	2000      	movs	r0, #0
 800c1ba:	f7f4 f86d 	bl	8000298 <__aeabi_dsub>
 800c1be:	4602      	mov	r2, r0
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1c6:	f7f4 fc91 	bl	8000aec <__aeabi_dcmplt>
 800c1ca:	2800      	cmp	r0, #0
 800c1cc:	f43f aef5 	beq.w	800bfba <_dtoa_r+0x43a>
 800c1d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c1d2:	1e73      	subs	r3, r6, #1
 800c1d4:	9315      	str	r3, [sp, #84]	@ 0x54
 800c1d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c1da:	2b30      	cmp	r3, #48	@ 0x30
 800c1dc:	d0f8      	beq.n	800c1d0 <_dtoa_r+0x650>
 800c1de:	9f04      	ldr	r7, [sp, #16]
 800c1e0:	e73e      	b.n	800c060 <_dtoa_r+0x4e0>
 800c1e2:	4b9b      	ldr	r3, [pc, #620]	@ (800c450 <_dtoa_r+0x8d0>)
 800c1e4:	f7f4 fa10 	bl	8000608 <__aeabi_dmul>
 800c1e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1ec:	e7bc      	b.n	800c168 <_dtoa_r+0x5e8>
 800c1ee:	d10c      	bne.n	800c20a <_dtoa_r+0x68a>
 800c1f0:	4b98      	ldr	r3, [pc, #608]	@ (800c454 <_dtoa_r+0x8d4>)
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1f8:	f7f4 fa06 	bl	8000608 <__aeabi_dmul>
 800c1fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c200:	f7f4 fc88 	bl	8000b14 <__aeabi_dcmpge>
 800c204:	2800      	cmp	r0, #0
 800c206:	f000 8157 	beq.w	800c4b8 <_dtoa_r+0x938>
 800c20a:	2400      	movs	r4, #0
 800c20c:	4625      	mov	r5, r4
 800c20e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c210:	43db      	mvns	r3, r3
 800c212:	9304      	str	r3, [sp, #16]
 800c214:	4656      	mov	r6, sl
 800c216:	2700      	movs	r7, #0
 800c218:	4621      	mov	r1, r4
 800c21a:	4658      	mov	r0, fp
 800c21c:	f000 fbb4 	bl	800c988 <_Bfree>
 800c220:	2d00      	cmp	r5, #0
 800c222:	d0dc      	beq.n	800c1de <_dtoa_r+0x65e>
 800c224:	b12f      	cbz	r7, 800c232 <_dtoa_r+0x6b2>
 800c226:	42af      	cmp	r7, r5
 800c228:	d003      	beq.n	800c232 <_dtoa_r+0x6b2>
 800c22a:	4639      	mov	r1, r7
 800c22c:	4658      	mov	r0, fp
 800c22e:	f000 fbab 	bl	800c988 <_Bfree>
 800c232:	4629      	mov	r1, r5
 800c234:	4658      	mov	r0, fp
 800c236:	f000 fba7 	bl	800c988 <_Bfree>
 800c23a:	e7d0      	b.n	800c1de <_dtoa_r+0x65e>
 800c23c:	9704      	str	r7, [sp, #16]
 800c23e:	4633      	mov	r3, r6
 800c240:	461e      	mov	r6, r3
 800c242:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c246:	2a39      	cmp	r2, #57	@ 0x39
 800c248:	d107      	bne.n	800c25a <_dtoa_r+0x6da>
 800c24a:	459a      	cmp	sl, r3
 800c24c:	d1f8      	bne.n	800c240 <_dtoa_r+0x6c0>
 800c24e:	9a04      	ldr	r2, [sp, #16]
 800c250:	3201      	adds	r2, #1
 800c252:	9204      	str	r2, [sp, #16]
 800c254:	2230      	movs	r2, #48	@ 0x30
 800c256:	f88a 2000 	strb.w	r2, [sl]
 800c25a:	781a      	ldrb	r2, [r3, #0]
 800c25c:	3201      	adds	r2, #1
 800c25e:	701a      	strb	r2, [r3, #0]
 800c260:	e7bd      	b.n	800c1de <_dtoa_r+0x65e>
 800c262:	4b7b      	ldr	r3, [pc, #492]	@ (800c450 <_dtoa_r+0x8d0>)
 800c264:	2200      	movs	r2, #0
 800c266:	f7f4 f9cf 	bl	8000608 <__aeabi_dmul>
 800c26a:	2200      	movs	r2, #0
 800c26c:	2300      	movs	r3, #0
 800c26e:	4604      	mov	r4, r0
 800c270:	460d      	mov	r5, r1
 800c272:	f7f4 fc31 	bl	8000ad8 <__aeabi_dcmpeq>
 800c276:	2800      	cmp	r0, #0
 800c278:	f43f aebb 	beq.w	800bff2 <_dtoa_r+0x472>
 800c27c:	e6f0      	b.n	800c060 <_dtoa_r+0x4e0>
 800c27e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c280:	2a00      	cmp	r2, #0
 800c282:	f000 80db 	beq.w	800c43c <_dtoa_r+0x8bc>
 800c286:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c288:	2a01      	cmp	r2, #1
 800c28a:	f300 80bf 	bgt.w	800c40c <_dtoa_r+0x88c>
 800c28e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c290:	2a00      	cmp	r2, #0
 800c292:	f000 80b7 	beq.w	800c404 <_dtoa_r+0x884>
 800c296:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c29a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c29c:	4646      	mov	r6, r8
 800c29e:	9a08      	ldr	r2, [sp, #32]
 800c2a0:	2101      	movs	r1, #1
 800c2a2:	441a      	add	r2, r3
 800c2a4:	4658      	mov	r0, fp
 800c2a6:	4498      	add	r8, r3
 800c2a8:	9208      	str	r2, [sp, #32]
 800c2aa:	f000 fc21 	bl	800caf0 <__i2b>
 800c2ae:	4605      	mov	r5, r0
 800c2b0:	b15e      	cbz	r6, 800c2ca <_dtoa_r+0x74a>
 800c2b2:	9b08      	ldr	r3, [sp, #32]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	dd08      	ble.n	800c2ca <_dtoa_r+0x74a>
 800c2b8:	42b3      	cmp	r3, r6
 800c2ba:	9a08      	ldr	r2, [sp, #32]
 800c2bc:	bfa8      	it	ge
 800c2be:	4633      	movge	r3, r6
 800c2c0:	eba8 0803 	sub.w	r8, r8, r3
 800c2c4:	1af6      	subs	r6, r6, r3
 800c2c6:	1ad3      	subs	r3, r2, r3
 800c2c8:	9308      	str	r3, [sp, #32]
 800c2ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2cc:	b1f3      	cbz	r3, 800c30c <_dtoa_r+0x78c>
 800c2ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	f000 80b7 	beq.w	800c444 <_dtoa_r+0x8c4>
 800c2d6:	b18c      	cbz	r4, 800c2fc <_dtoa_r+0x77c>
 800c2d8:	4629      	mov	r1, r5
 800c2da:	4622      	mov	r2, r4
 800c2dc:	4658      	mov	r0, fp
 800c2de:	f000 fcc7 	bl	800cc70 <__pow5mult>
 800c2e2:	464a      	mov	r2, r9
 800c2e4:	4601      	mov	r1, r0
 800c2e6:	4605      	mov	r5, r0
 800c2e8:	4658      	mov	r0, fp
 800c2ea:	f000 fc17 	bl	800cb1c <__multiply>
 800c2ee:	4649      	mov	r1, r9
 800c2f0:	9004      	str	r0, [sp, #16]
 800c2f2:	4658      	mov	r0, fp
 800c2f4:	f000 fb48 	bl	800c988 <_Bfree>
 800c2f8:	9b04      	ldr	r3, [sp, #16]
 800c2fa:	4699      	mov	r9, r3
 800c2fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2fe:	1b1a      	subs	r2, r3, r4
 800c300:	d004      	beq.n	800c30c <_dtoa_r+0x78c>
 800c302:	4649      	mov	r1, r9
 800c304:	4658      	mov	r0, fp
 800c306:	f000 fcb3 	bl	800cc70 <__pow5mult>
 800c30a:	4681      	mov	r9, r0
 800c30c:	2101      	movs	r1, #1
 800c30e:	4658      	mov	r0, fp
 800c310:	f000 fbee 	bl	800caf0 <__i2b>
 800c314:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c316:	4604      	mov	r4, r0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	f000 81cf 	beq.w	800c6bc <_dtoa_r+0xb3c>
 800c31e:	461a      	mov	r2, r3
 800c320:	4601      	mov	r1, r0
 800c322:	4658      	mov	r0, fp
 800c324:	f000 fca4 	bl	800cc70 <__pow5mult>
 800c328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	4604      	mov	r4, r0
 800c32e:	f300 8095 	bgt.w	800c45c <_dtoa_r+0x8dc>
 800c332:	9b02      	ldr	r3, [sp, #8]
 800c334:	2b00      	cmp	r3, #0
 800c336:	f040 8087 	bne.w	800c448 <_dtoa_r+0x8c8>
 800c33a:	9b03      	ldr	r3, [sp, #12]
 800c33c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c340:	2b00      	cmp	r3, #0
 800c342:	f040 8089 	bne.w	800c458 <_dtoa_r+0x8d8>
 800c346:	9b03      	ldr	r3, [sp, #12]
 800c348:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c34c:	0d1b      	lsrs	r3, r3, #20
 800c34e:	051b      	lsls	r3, r3, #20
 800c350:	b12b      	cbz	r3, 800c35e <_dtoa_r+0x7de>
 800c352:	9b08      	ldr	r3, [sp, #32]
 800c354:	3301      	adds	r3, #1
 800c356:	9308      	str	r3, [sp, #32]
 800c358:	f108 0801 	add.w	r8, r8, #1
 800c35c:	2301      	movs	r3, #1
 800c35e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c360:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c362:	2b00      	cmp	r3, #0
 800c364:	f000 81b0 	beq.w	800c6c8 <_dtoa_r+0xb48>
 800c368:	6923      	ldr	r3, [r4, #16]
 800c36a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c36e:	6918      	ldr	r0, [r3, #16]
 800c370:	f000 fb72 	bl	800ca58 <__hi0bits>
 800c374:	f1c0 0020 	rsb	r0, r0, #32
 800c378:	9b08      	ldr	r3, [sp, #32]
 800c37a:	4418      	add	r0, r3
 800c37c:	f010 001f 	ands.w	r0, r0, #31
 800c380:	d077      	beq.n	800c472 <_dtoa_r+0x8f2>
 800c382:	f1c0 0320 	rsb	r3, r0, #32
 800c386:	2b04      	cmp	r3, #4
 800c388:	dd6b      	ble.n	800c462 <_dtoa_r+0x8e2>
 800c38a:	9b08      	ldr	r3, [sp, #32]
 800c38c:	f1c0 001c 	rsb	r0, r0, #28
 800c390:	4403      	add	r3, r0
 800c392:	4480      	add	r8, r0
 800c394:	4406      	add	r6, r0
 800c396:	9308      	str	r3, [sp, #32]
 800c398:	f1b8 0f00 	cmp.w	r8, #0
 800c39c:	dd05      	ble.n	800c3aa <_dtoa_r+0x82a>
 800c39e:	4649      	mov	r1, r9
 800c3a0:	4642      	mov	r2, r8
 800c3a2:	4658      	mov	r0, fp
 800c3a4:	f000 fcbe 	bl	800cd24 <__lshift>
 800c3a8:	4681      	mov	r9, r0
 800c3aa:	9b08      	ldr	r3, [sp, #32]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	dd05      	ble.n	800c3bc <_dtoa_r+0x83c>
 800c3b0:	4621      	mov	r1, r4
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	4658      	mov	r0, fp
 800c3b6:	f000 fcb5 	bl	800cd24 <__lshift>
 800c3ba:	4604      	mov	r4, r0
 800c3bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d059      	beq.n	800c476 <_dtoa_r+0x8f6>
 800c3c2:	4621      	mov	r1, r4
 800c3c4:	4648      	mov	r0, r9
 800c3c6:	f000 fd19 	bl	800cdfc <__mcmp>
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	da53      	bge.n	800c476 <_dtoa_r+0x8f6>
 800c3ce:	1e7b      	subs	r3, r7, #1
 800c3d0:	9304      	str	r3, [sp, #16]
 800c3d2:	4649      	mov	r1, r9
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	220a      	movs	r2, #10
 800c3d8:	4658      	mov	r0, fp
 800c3da:	f000 faf7 	bl	800c9cc <__multadd>
 800c3de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3e0:	4681      	mov	r9, r0
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	f000 8172 	beq.w	800c6cc <_dtoa_r+0xb4c>
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	4629      	mov	r1, r5
 800c3ec:	220a      	movs	r2, #10
 800c3ee:	4658      	mov	r0, fp
 800c3f0:	f000 faec 	bl	800c9cc <__multadd>
 800c3f4:	9b00      	ldr	r3, [sp, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	4605      	mov	r5, r0
 800c3fa:	dc67      	bgt.n	800c4cc <_dtoa_r+0x94c>
 800c3fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3fe:	2b02      	cmp	r3, #2
 800c400:	dc41      	bgt.n	800c486 <_dtoa_r+0x906>
 800c402:	e063      	b.n	800c4cc <_dtoa_r+0x94c>
 800c404:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c406:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c40a:	e746      	b.n	800c29a <_dtoa_r+0x71a>
 800c40c:	9b07      	ldr	r3, [sp, #28]
 800c40e:	1e5c      	subs	r4, r3, #1
 800c410:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c412:	42a3      	cmp	r3, r4
 800c414:	bfbf      	itttt	lt
 800c416:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c418:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c41a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c41c:	1ae3      	sublt	r3, r4, r3
 800c41e:	bfb4      	ite	lt
 800c420:	18d2      	addlt	r2, r2, r3
 800c422:	1b1c      	subge	r4, r3, r4
 800c424:	9b07      	ldr	r3, [sp, #28]
 800c426:	bfbc      	itt	lt
 800c428:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c42a:	2400      	movlt	r4, #0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	bfb5      	itete	lt
 800c430:	eba8 0603 	sublt.w	r6, r8, r3
 800c434:	9b07      	ldrge	r3, [sp, #28]
 800c436:	2300      	movlt	r3, #0
 800c438:	4646      	movge	r6, r8
 800c43a:	e730      	b.n	800c29e <_dtoa_r+0x71e>
 800c43c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c43e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c440:	4646      	mov	r6, r8
 800c442:	e735      	b.n	800c2b0 <_dtoa_r+0x730>
 800c444:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c446:	e75c      	b.n	800c302 <_dtoa_r+0x782>
 800c448:	2300      	movs	r3, #0
 800c44a:	e788      	b.n	800c35e <_dtoa_r+0x7de>
 800c44c:	3fe00000 	.word	0x3fe00000
 800c450:	40240000 	.word	0x40240000
 800c454:	40140000 	.word	0x40140000
 800c458:	9b02      	ldr	r3, [sp, #8]
 800c45a:	e780      	b.n	800c35e <_dtoa_r+0x7de>
 800c45c:	2300      	movs	r3, #0
 800c45e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c460:	e782      	b.n	800c368 <_dtoa_r+0x7e8>
 800c462:	d099      	beq.n	800c398 <_dtoa_r+0x818>
 800c464:	9a08      	ldr	r2, [sp, #32]
 800c466:	331c      	adds	r3, #28
 800c468:	441a      	add	r2, r3
 800c46a:	4498      	add	r8, r3
 800c46c:	441e      	add	r6, r3
 800c46e:	9208      	str	r2, [sp, #32]
 800c470:	e792      	b.n	800c398 <_dtoa_r+0x818>
 800c472:	4603      	mov	r3, r0
 800c474:	e7f6      	b.n	800c464 <_dtoa_r+0x8e4>
 800c476:	9b07      	ldr	r3, [sp, #28]
 800c478:	9704      	str	r7, [sp, #16]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	dc20      	bgt.n	800c4c0 <_dtoa_r+0x940>
 800c47e:	9300      	str	r3, [sp, #0]
 800c480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c482:	2b02      	cmp	r3, #2
 800c484:	dd1e      	ble.n	800c4c4 <_dtoa_r+0x944>
 800c486:	9b00      	ldr	r3, [sp, #0]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	f47f aec0 	bne.w	800c20e <_dtoa_r+0x68e>
 800c48e:	4621      	mov	r1, r4
 800c490:	2205      	movs	r2, #5
 800c492:	4658      	mov	r0, fp
 800c494:	f000 fa9a 	bl	800c9cc <__multadd>
 800c498:	4601      	mov	r1, r0
 800c49a:	4604      	mov	r4, r0
 800c49c:	4648      	mov	r0, r9
 800c49e:	f000 fcad 	bl	800cdfc <__mcmp>
 800c4a2:	2800      	cmp	r0, #0
 800c4a4:	f77f aeb3 	ble.w	800c20e <_dtoa_r+0x68e>
 800c4a8:	4656      	mov	r6, sl
 800c4aa:	2331      	movs	r3, #49	@ 0x31
 800c4ac:	f806 3b01 	strb.w	r3, [r6], #1
 800c4b0:	9b04      	ldr	r3, [sp, #16]
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	9304      	str	r3, [sp, #16]
 800c4b6:	e6ae      	b.n	800c216 <_dtoa_r+0x696>
 800c4b8:	9c07      	ldr	r4, [sp, #28]
 800c4ba:	9704      	str	r7, [sp, #16]
 800c4bc:	4625      	mov	r5, r4
 800c4be:	e7f3      	b.n	800c4a8 <_dtoa_r+0x928>
 800c4c0:	9b07      	ldr	r3, [sp, #28]
 800c4c2:	9300      	str	r3, [sp, #0]
 800c4c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	f000 8104 	beq.w	800c6d4 <_dtoa_r+0xb54>
 800c4cc:	2e00      	cmp	r6, #0
 800c4ce:	dd05      	ble.n	800c4dc <_dtoa_r+0x95c>
 800c4d0:	4629      	mov	r1, r5
 800c4d2:	4632      	mov	r2, r6
 800c4d4:	4658      	mov	r0, fp
 800c4d6:	f000 fc25 	bl	800cd24 <__lshift>
 800c4da:	4605      	mov	r5, r0
 800c4dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d05a      	beq.n	800c598 <_dtoa_r+0xa18>
 800c4e2:	6869      	ldr	r1, [r5, #4]
 800c4e4:	4658      	mov	r0, fp
 800c4e6:	f000 fa0f 	bl	800c908 <_Balloc>
 800c4ea:	4606      	mov	r6, r0
 800c4ec:	b928      	cbnz	r0, 800c4fa <_dtoa_r+0x97a>
 800c4ee:	4b84      	ldr	r3, [pc, #528]	@ (800c700 <_dtoa_r+0xb80>)
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c4f6:	f7ff bb5a 	b.w	800bbae <_dtoa_r+0x2e>
 800c4fa:	692a      	ldr	r2, [r5, #16]
 800c4fc:	3202      	adds	r2, #2
 800c4fe:	0092      	lsls	r2, r2, #2
 800c500:	f105 010c 	add.w	r1, r5, #12
 800c504:	300c      	adds	r0, #12
 800c506:	f7ff faa4 	bl	800ba52 <memcpy>
 800c50a:	2201      	movs	r2, #1
 800c50c:	4631      	mov	r1, r6
 800c50e:	4658      	mov	r0, fp
 800c510:	f000 fc08 	bl	800cd24 <__lshift>
 800c514:	f10a 0301 	add.w	r3, sl, #1
 800c518:	9307      	str	r3, [sp, #28]
 800c51a:	9b00      	ldr	r3, [sp, #0]
 800c51c:	4453      	add	r3, sl
 800c51e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c520:	9b02      	ldr	r3, [sp, #8]
 800c522:	f003 0301 	and.w	r3, r3, #1
 800c526:	462f      	mov	r7, r5
 800c528:	930a      	str	r3, [sp, #40]	@ 0x28
 800c52a:	4605      	mov	r5, r0
 800c52c:	9b07      	ldr	r3, [sp, #28]
 800c52e:	4621      	mov	r1, r4
 800c530:	3b01      	subs	r3, #1
 800c532:	4648      	mov	r0, r9
 800c534:	9300      	str	r3, [sp, #0]
 800c536:	f7ff fa9a 	bl	800ba6e <quorem>
 800c53a:	4639      	mov	r1, r7
 800c53c:	9002      	str	r0, [sp, #8]
 800c53e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c542:	4648      	mov	r0, r9
 800c544:	f000 fc5a 	bl	800cdfc <__mcmp>
 800c548:	462a      	mov	r2, r5
 800c54a:	9008      	str	r0, [sp, #32]
 800c54c:	4621      	mov	r1, r4
 800c54e:	4658      	mov	r0, fp
 800c550:	f000 fc70 	bl	800ce34 <__mdiff>
 800c554:	68c2      	ldr	r2, [r0, #12]
 800c556:	4606      	mov	r6, r0
 800c558:	bb02      	cbnz	r2, 800c59c <_dtoa_r+0xa1c>
 800c55a:	4601      	mov	r1, r0
 800c55c:	4648      	mov	r0, r9
 800c55e:	f000 fc4d 	bl	800cdfc <__mcmp>
 800c562:	4602      	mov	r2, r0
 800c564:	4631      	mov	r1, r6
 800c566:	4658      	mov	r0, fp
 800c568:	920e      	str	r2, [sp, #56]	@ 0x38
 800c56a:	f000 fa0d 	bl	800c988 <_Bfree>
 800c56e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c570:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c572:	9e07      	ldr	r6, [sp, #28]
 800c574:	ea43 0102 	orr.w	r1, r3, r2
 800c578:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c57a:	4319      	orrs	r1, r3
 800c57c:	d110      	bne.n	800c5a0 <_dtoa_r+0xa20>
 800c57e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c582:	d029      	beq.n	800c5d8 <_dtoa_r+0xa58>
 800c584:	9b08      	ldr	r3, [sp, #32]
 800c586:	2b00      	cmp	r3, #0
 800c588:	dd02      	ble.n	800c590 <_dtoa_r+0xa10>
 800c58a:	9b02      	ldr	r3, [sp, #8]
 800c58c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c590:	9b00      	ldr	r3, [sp, #0]
 800c592:	f883 8000 	strb.w	r8, [r3]
 800c596:	e63f      	b.n	800c218 <_dtoa_r+0x698>
 800c598:	4628      	mov	r0, r5
 800c59a:	e7bb      	b.n	800c514 <_dtoa_r+0x994>
 800c59c:	2201      	movs	r2, #1
 800c59e:	e7e1      	b.n	800c564 <_dtoa_r+0x9e4>
 800c5a0:	9b08      	ldr	r3, [sp, #32]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	db04      	blt.n	800c5b0 <_dtoa_r+0xa30>
 800c5a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c5a8:	430b      	orrs	r3, r1
 800c5aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c5ac:	430b      	orrs	r3, r1
 800c5ae:	d120      	bne.n	800c5f2 <_dtoa_r+0xa72>
 800c5b0:	2a00      	cmp	r2, #0
 800c5b2:	dded      	ble.n	800c590 <_dtoa_r+0xa10>
 800c5b4:	4649      	mov	r1, r9
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	4658      	mov	r0, fp
 800c5ba:	f000 fbb3 	bl	800cd24 <__lshift>
 800c5be:	4621      	mov	r1, r4
 800c5c0:	4681      	mov	r9, r0
 800c5c2:	f000 fc1b 	bl	800cdfc <__mcmp>
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	dc03      	bgt.n	800c5d2 <_dtoa_r+0xa52>
 800c5ca:	d1e1      	bne.n	800c590 <_dtoa_r+0xa10>
 800c5cc:	f018 0f01 	tst.w	r8, #1
 800c5d0:	d0de      	beq.n	800c590 <_dtoa_r+0xa10>
 800c5d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c5d6:	d1d8      	bne.n	800c58a <_dtoa_r+0xa0a>
 800c5d8:	9a00      	ldr	r2, [sp, #0]
 800c5da:	2339      	movs	r3, #57	@ 0x39
 800c5dc:	7013      	strb	r3, [r2, #0]
 800c5de:	4633      	mov	r3, r6
 800c5e0:	461e      	mov	r6, r3
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c5e8:	2a39      	cmp	r2, #57	@ 0x39
 800c5ea:	d052      	beq.n	800c692 <_dtoa_r+0xb12>
 800c5ec:	3201      	adds	r2, #1
 800c5ee:	701a      	strb	r2, [r3, #0]
 800c5f0:	e612      	b.n	800c218 <_dtoa_r+0x698>
 800c5f2:	2a00      	cmp	r2, #0
 800c5f4:	dd07      	ble.n	800c606 <_dtoa_r+0xa86>
 800c5f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c5fa:	d0ed      	beq.n	800c5d8 <_dtoa_r+0xa58>
 800c5fc:	9a00      	ldr	r2, [sp, #0]
 800c5fe:	f108 0301 	add.w	r3, r8, #1
 800c602:	7013      	strb	r3, [r2, #0]
 800c604:	e608      	b.n	800c218 <_dtoa_r+0x698>
 800c606:	9b07      	ldr	r3, [sp, #28]
 800c608:	9a07      	ldr	r2, [sp, #28]
 800c60a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c60e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c610:	4293      	cmp	r3, r2
 800c612:	d028      	beq.n	800c666 <_dtoa_r+0xae6>
 800c614:	4649      	mov	r1, r9
 800c616:	2300      	movs	r3, #0
 800c618:	220a      	movs	r2, #10
 800c61a:	4658      	mov	r0, fp
 800c61c:	f000 f9d6 	bl	800c9cc <__multadd>
 800c620:	42af      	cmp	r7, r5
 800c622:	4681      	mov	r9, r0
 800c624:	f04f 0300 	mov.w	r3, #0
 800c628:	f04f 020a 	mov.w	r2, #10
 800c62c:	4639      	mov	r1, r7
 800c62e:	4658      	mov	r0, fp
 800c630:	d107      	bne.n	800c642 <_dtoa_r+0xac2>
 800c632:	f000 f9cb 	bl	800c9cc <__multadd>
 800c636:	4607      	mov	r7, r0
 800c638:	4605      	mov	r5, r0
 800c63a:	9b07      	ldr	r3, [sp, #28]
 800c63c:	3301      	adds	r3, #1
 800c63e:	9307      	str	r3, [sp, #28]
 800c640:	e774      	b.n	800c52c <_dtoa_r+0x9ac>
 800c642:	f000 f9c3 	bl	800c9cc <__multadd>
 800c646:	4629      	mov	r1, r5
 800c648:	4607      	mov	r7, r0
 800c64a:	2300      	movs	r3, #0
 800c64c:	220a      	movs	r2, #10
 800c64e:	4658      	mov	r0, fp
 800c650:	f000 f9bc 	bl	800c9cc <__multadd>
 800c654:	4605      	mov	r5, r0
 800c656:	e7f0      	b.n	800c63a <_dtoa_r+0xaba>
 800c658:	9b00      	ldr	r3, [sp, #0]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	bfcc      	ite	gt
 800c65e:	461e      	movgt	r6, r3
 800c660:	2601      	movle	r6, #1
 800c662:	4456      	add	r6, sl
 800c664:	2700      	movs	r7, #0
 800c666:	4649      	mov	r1, r9
 800c668:	2201      	movs	r2, #1
 800c66a:	4658      	mov	r0, fp
 800c66c:	f000 fb5a 	bl	800cd24 <__lshift>
 800c670:	4621      	mov	r1, r4
 800c672:	4681      	mov	r9, r0
 800c674:	f000 fbc2 	bl	800cdfc <__mcmp>
 800c678:	2800      	cmp	r0, #0
 800c67a:	dcb0      	bgt.n	800c5de <_dtoa_r+0xa5e>
 800c67c:	d102      	bne.n	800c684 <_dtoa_r+0xb04>
 800c67e:	f018 0f01 	tst.w	r8, #1
 800c682:	d1ac      	bne.n	800c5de <_dtoa_r+0xa5e>
 800c684:	4633      	mov	r3, r6
 800c686:	461e      	mov	r6, r3
 800c688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c68c:	2a30      	cmp	r2, #48	@ 0x30
 800c68e:	d0fa      	beq.n	800c686 <_dtoa_r+0xb06>
 800c690:	e5c2      	b.n	800c218 <_dtoa_r+0x698>
 800c692:	459a      	cmp	sl, r3
 800c694:	d1a4      	bne.n	800c5e0 <_dtoa_r+0xa60>
 800c696:	9b04      	ldr	r3, [sp, #16]
 800c698:	3301      	adds	r3, #1
 800c69a:	9304      	str	r3, [sp, #16]
 800c69c:	2331      	movs	r3, #49	@ 0x31
 800c69e:	f88a 3000 	strb.w	r3, [sl]
 800c6a2:	e5b9      	b.n	800c218 <_dtoa_r+0x698>
 800c6a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c6a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c704 <_dtoa_r+0xb84>
 800c6aa:	b11b      	cbz	r3, 800c6b4 <_dtoa_r+0xb34>
 800c6ac:	f10a 0308 	add.w	r3, sl, #8
 800c6b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c6b2:	6013      	str	r3, [r2, #0]
 800c6b4:	4650      	mov	r0, sl
 800c6b6:	b019      	add	sp, #100	@ 0x64
 800c6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	f77f ae37 	ble.w	800c332 <_dtoa_r+0x7b2>
 800c6c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6c8:	2001      	movs	r0, #1
 800c6ca:	e655      	b.n	800c378 <_dtoa_r+0x7f8>
 800c6cc:	9b00      	ldr	r3, [sp, #0]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	f77f aed6 	ble.w	800c480 <_dtoa_r+0x900>
 800c6d4:	4656      	mov	r6, sl
 800c6d6:	4621      	mov	r1, r4
 800c6d8:	4648      	mov	r0, r9
 800c6da:	f7ff f9c8 	bl	800ba6e <quorem>
 800c6de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c6e2:	f806 8b01 	strb.w	r8, [r6], #1
 800c6e6:	9b00      	ldr	r3, [sp, #0]
 800c6e8:	eba6 020a 	sub.w	r2, r6, sl
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	ddb3      	ble.n	800c658 <_dtoa_r+0xad8>
 800c6f0:	4649      	mov	r1, r9
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	220a      	movs	r2, #10
 800c6f6:	4658      	mov	r0, fp
 800c6f8:	f000 f968 	bl	800c9cc <__multadd>
 800c6fc:	4681      	mov	r9, r0
 800c6fe:	e7ea      	b.n	800c6d6 <_dtoa_r+0xb56>
 800c700:	0800d7b8 	.word	0x0800d7b8
 800c704:	0800d73c 	.word	0x0800d73c

0800c708 <_free_r>:
 800c708:	b538      	push	{r3, r4, r5, lr}
 800c70a:	4605      	mov	r5, r0
 800c70c:	2900      	cmp	r1, #0
 800c70e:	d041      	beq.n	800c794 <_free_r+0x8c>
 800c710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c714:	1f0c      	subs	r4, r1, #4
 800c716:	2b00      	cmp	r3, #0
 800c718:	bfb8      	it	lt
 800c71a:	18e4      	addlt	r4, r4, r3
 800c71c:	f000 f8e8 	bl	800c8f0 <__malloc_lock>
 800c720:	4a1d      	ldr	r2, [pc, #116]	@ (800c798 <_free_r+0x90>)
 800c722:	6813      	ldr	r3, [r2, #0]
 800c724:	b933      	cbnz	r3, 800c734 <_free_r+0x2c>
 800c726:	6063      	str	r3, [r4, #4]
 800c728:	6014      	str	r4, [r2, #0]
 800c72a:	4628      	mov	r0, r5
 800c72c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c730:	f000 b8e4 	b.w	800c8fc <__malloc_unlock>
 800c734:	42a3      	cmp	r3, r4
 800c736:	d908      	bls.n	800c74a <_free_r+0x42>
 800c738:	6820      	ldr	r0, [r4, #0]
 800c73a:	1821      	adds	r1, r4, r0
 800c73c:	428b      	cmp	r3, r1
 800c73e:	bf01      	itttt	eq
 800c740:	6819      	ldreq	r1, [r3, #0]
 800c742:	685b      	ldreq	r3, [r3, #4]
 800c744:	1809      	addeq	r1, r1, r0
 800c746:	6021      	streq	r1, [r4, #0]
 800c748:	e7ed      	b.n	800c726 <_free_r+0x1e>
 800c74a:	461a      	mov	r2, r3
 800c74c:	685b      	ldr	r3, [r3, #4]
 800c74e:	b10b      	cbz	r3, 800c754 <_free_r+0x4c>
 800c750:	42a3      	cmp	r3, r4
 800c752:	d9fa      	bls.n	800c74a <_free_r+0x42>
 800c754:	6811      	ldr	r1, [r2, #0]
 800c756:	1850      	adds	r0, r2, r1
 800c758:	42a0      	cmp	r0, r4
 800c75a:	d10b      	bne.n	800c774 <_free_r+0x6c>
 800c75c:	6820      	ldr	r0, [r4, #0]
 800c75e:	4401      	add	r1, r0
 800c760:	1850      	adds	r0, r2, r1
 800c762:	4283      	cmp	r3, r0
 800c764:	6011      	str	r1, [r2, #0]
 800c766:	d1e0      	bne.n	800c72a <_free_r+0x22>
 800c768:	6818      	ldr	r0, [r3, #0]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	6053      	str	r3, [r2, #4]
 800c76e:	4408      	add	r0, r1
 800c770:	6010      	str	r0, [r2, #0]
 800c772:	e7da      	b.n	800c72a <_free_r+0x22>
 800c774:	d902      	bls.n	800c77c <_free_r+0x74>
 800c776:	230c      	movs	r3, #12
 800c778:	602b      	str	r3, [r5, #0]
 800c77a:	e7d6      	b.n	800c72a <_free_r+0x22>
 800c77c:	6820      	ldr	r0, [r4, #0]
 800c77e:	1821      	adds	r1, r4, r0
 800c780:	428b      	cmp	r3, r1
 800c782:	bf04      	itt	eq
 800c784:	6819      	ldreq	r1, [r3, #0]
 800c786:	685b      	ldreq	r3, [r3, #4]
 800c788:	6063      	str	r3, [r4, #4]
 800c78a:	bf04      	itt	eq
 800c78c:	1809      	addeq	r1, r1, r0
 800c78e:	6021      	streq	r1, [r4, #0]
 800c790:	6054      	str	r4, [r2, #4]
 800c792:	e7ca      	b.n	800c72a <_free_r+0x22>
 800c794:	bd38      	pop	{r3, r4, r5, pc}
 800c796:	bf00      	nop
 800c798:	200011d4 	.word	0x200011d4

0800c79c <malloc>:
 800c79c:	4b02      	ldr	r3, [pc, #8]	@ (800c7a8 <malloc+0xc>)
 800c79e:	4601      	mov	r1, r0
 800c7a0:	6818      	ldr	r0, [r3, #0]
 800c7a2:	f000 b825 	b.w	800c7f0 <_malloc_r>
 800c7a6:	bf00      	nop
 800c7a8:	20000118 	.word	0x20000118

0800c7ac <sbrk_aligned>:
 800c7ac:	b570      	push	{r4, r5, r6, lr}
 800c7ae:	4e0f      	ldr	r6, [pc, #60]	@ (800c7ec <sbrk_aligned+0x40>)
 800c7b0:	460c      	mov	r4, r1
 800c7b2:	6831      	ldr	r1, [r6, #0]
 800c7b4:	4605      	mov	r5, r0
 800c7b6:	b911      	cbnz	r1, 800c7be <sbrk_aligned+0x12>
 800c7b8:	f000 fd58 	bl	800d26c <_sbrk_r>
 800c7bc:	6030      	str	r0, [r6, #0]
 800c7be:	4621      	mov	r1, r4
 800c7c0:	4628      	mov	r0, r5
 800c7c2:	f000 fd53 	bl	800d26c <_sbrk_r>
 800c7c6:	1c43      	adds	r3, r0, #1
 800c7c8:	d103      	bne.n	800c7d2 <sbrk_aligned+0x26>
 800c7ca:	f04f 34ff 	mov.w	r4, #4294967295
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	bd70      	pop	{r4, r5, r6, pc}
 800c7d2:	1cc4      	adds	r4, r0, #3
 800c7d4:	f024 0403 	bic.w	r4, r4, #3
 800c7d8:	42a0      	cmp	r0, r4
 800c7da:	d0f8      	beq.n	800c7ce <sbrk_aligned+0x22>
 800c7dc:	1a21      	subs	r1, r4, r0
 800c7de:	4628      	mov	r0, r5
 800c7e0:	f000 fd44 	bl	800d26c <_sbrk_r>
 800c7e4:	3001      	adds	r0, #1
 800c7e6:	d1f2      	bne.n	800c7ce <sbrk_aligned+0x22>
 800c7e8:	e7ef      	b.n	800c7ca <sbrk_aligned+0x1e>
 800c7ea:	bf00      	nop
 800c7ec:	200011d0 	.word	0x200011d0

0800c7f0 <_malloc_r>:
 800c7f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7f4:	1ccd      	adds	r5, r1, #3
 800c7f6:	f025 0503 	bic.w	r5, r5, #3
 800c7fa:	3508      	adds	r5, #8
 800c7fc:	2d0c      	cmp	r5, #12
 800c7fe:	bf38      	it	cc
 800c800:	250c      	movcc	r5, #12
 800c802:	2d00      	cmp	r5, #0
 800c804:	4606      	mov	r6, r0
 800c806:	db01      	blt.n	800c80c <_malloc_r+0x1c>
 800c808:	42a9      	cmp	r1, r5
 800c80a:	d904      	bls.n	800c816 <_malloc_r+0x26>
 800c80c:	230c      	movs	r3, #12
 800c80e:	6033      	str	r3, [r6, #0]
 800c810:	2000      	movs	r0, #0
 800c812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c816:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c8ec <_malloc_r+0xfc>
 800c81a:	f000 f869 	bl	800c8f0 <__malloc_lock>
 800c81e:	f8d8 3000 	ldr.w	r3, [r8]
 800c822:	461c      	mov	r4, r3
 800c824:	bb44      	cbnz	r4, 800c878 <_malloc_r+0x88>
 800c826:	4629      	mov	r1, r5
 800c828:	4630      	mov	r0, r6
 800c82a:	f7ff ffbf 	bl	800c7ac <sbrk_aligned>
 800c82e:	1c43      	adds	r3, r0, #1
 800c830:	4604      	mov	r4, r0
 800c832:	d158      	bne.n	800c8e6 <_malloc_r+0xf6>
 800c834:	f8d8 4000 	ldr.w	r4, [r8]
 800c838:	4627      	mov	r7, r4
 800c83a:	2f00      	cmp	r7, #0
 800c83c:	d143      	bne.n	800c8c6 <_malloc_r+0xd6>
 800c83e:	2c00      	cmp	r4, #0
 800c840:	d04b      	beq.n	800c8da <_malloc_r+0xea>
 800c842:	6823      	ldr	r3, [r4, #0]
 800c844:	4639      	mov	r1, r7
 800c846:	4630      	mov	r0, r6
 800c848:	eb04 0903 	add.w	r9, r4, r3
 800c84c:	f000 fd0e 	bl	800d26c <_sbrk_r>
 800c850:	4581      	cmp	r9, r0
 800c852:	d142      	bne.n	800c8da <_malloc_r+0xea>
 800c854:	6821      	ldr	r1, [r4, #0]
 800c856:	1a6d      	subs	r5, r5, r1
 800c858:	4629      	mov	r1, r5
 800c85a:	4630      	mov	r0, r6
 800c85c:	f7ff ffa6 	bl	800c7ac <sbrk_aligned>
 800c860:	3001      	adds	r0, #1
 800c862:	d03a      	beq.n	800c8da <_malloc_r+0xea>
 800c864:	6823      	ldr	r3, [r4, #0]
 800c866:	442b      	add	r3, r5
 800c868:	6023      	str	r3, [r4, #0]
 800c86a:	f8d8 3000 	ldr.w	r3, [r8]
 800c86e:	685a      	ldr	r2, [r3, #4]
 800c870:	bb62      	cbnz	r2, 800c8cc <_malloc_r+0xdc>
 800c872:	f8c8 7000 	str.w	r7, [r8]
 800c876:	e00f      	b.n	800c898 <_malloc_r+0xa8>
 800c878:	6822      	ldr	r2, [r4, #0]
 800c87a:	1b52      	subs	r2, r2, r5
 800c87c:	d420      	bmi.n	800c8c0 <_malloc_r+0xd0>
 800c87e:	2a0b      	cmp	r2, #11
 800c880:	d917      	bls.n	800c8b2 <_malloc_r+0xc2>
 800c882:	1961      	adds	r1, r4, r5
 800c884:	42a3      	cmp	r3, r4
 800c886:	6025      	str	r5, [r4, #0]
 800c888:	bf18      	it	ne
 800c88a:	6059      	strne	r1, [r3, #4]
 800c88c:	6863      	ldr	r3, [r4, #4]
 800c88e:	bf08      	it	eq
 800c890:	f8c8 1000 	streq.w	r1, [r8]
 800c894:	5162      	str	r2, [r4, r5]
 800c896:	604b      	str	r3, [r1, #4]
 800c898:	4630      	mov	r0, r6
 800c89a:	f000 f82f 	bl	800c8fc <__malloc_unlock>
 800c89e:	f104 000b 	add.w	r0, r4, #11
 800c8a2:	1d23      	adds	r3, r4, #4
 800c8a4:	f020 0007 	bic.w	r0, r0, #7
 800c8a8:	1ac2      	subs	r2, r0, r3
 800c8aa:	bf1c      	itt	ne
 800c8ac:	1a1b      	subne	r3, r3, r0
 800c8ae:	50a3      	strne	r3, [r4, r2]
 800c8b0:	e7af      	b.n	800c812 <_malloc_r+0x22>
 800c8b2:	6862      	ldr	r2, [r4, #4]
 800c8b4:	42a3      	cmp	r3, r4
 800c8b6:	bf0c      	ite	eq
 800c8b8:	f8c8 2000 	streq.w	r2, [r8]
 800c8bc:	605a      	strne	r2, [r3, #4]
 800c8be:	e7eb      	b.n	800c898 <_malloc_r+0xa8>
 800c8c0:	4623      	mov	r3, r4
 800c8c2:	6864      	ldr	r4, [r4, #4]
 800c8c4:	e7ae      	b.n	800c824 <_malloc_r+0x34>
 800c8c6:	463c      	mov	r4, r7
 800c8c8:	687f      	ldr	r7, [r7, #4]
 800c8ca:	e7b6      	b.n	800c83a <_malloc_r+0x4a>
 800c8cc:	461a      	mov	r2, r3
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	42a3      	cmp	r3, r4
 800c8d2:	d1fb      	bne.n	800c8cc <_malloc_r+0xdc>
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	6053      	str	r3, [r2, #4]
 800c8d8:	e7de      	b.n	800c898 <_malloc_r+0xa8>
 800c8da:	230c      	movs	r3, #12
 800c8dc:	6033      	str	r3, [r6, #0]
 800c8de:	4630      	mov	r0, r6
 800c8e0:	f000 f80c 	bl	800c8fc <__malloc_unlock>
 800c8e4:	e794      	b.n	800c810 <_malloc_r+0x20>
 800c8e6:	6005      	str	r5, [r0, #0]
 800c8e8:	e7d6      	b.n	800c898 <_malloc_r+0xa8>
 800c8ea:	bf00      	nop
 800c8ec:	200011d4 	.word	0x200011d4

0800c8f0 <__malloc_lock>:
 800c8f0:	4801      	ldr	r0, [pc, #4]	@ (800c8f8 <__malloc_lock+0x8>)
 800c8f2:	f7ff b8ac 	b.w	800ba4e <__retarget_lock_acquire_recursive>
 800c8f6:	bf00      	nop
 800c8f8:	200011cc 	.word	0x200011cc

0800c8fc <__malloc_unlock>:
 800c8fc:	4801      	ldr	r0, [pc, #4]	@ (800c904 <__malloc_unlock+0x8>)
 800c8fe:	f7ff b8a7 	b.w	800ba50 <__retarget_lock_release_recursive>
 800c902:	bf00      	nop
 800c904:	200011cc 	.word	0x200011cc

0800c908 <_Balloc>:
 800c908:	b570      	push	{r4, r5, r6, lr}
 800c90a:	69c6      	ldr	r6, [r0, #28]
 800c90c:	4604      	mov	r4, r0
 800c90e:	460d      	mov	r5, r1
 800c910:	b976      	cbnz	r6, 800c930 <_Balloc+0x28>
 800c912:	2010      	movs	r0, #16
 800c914:	f7ff ff42 	bl	800c79c <malloc>
 800c918:	4602      	mov	r2, r0
 800c91a:	61e0      	str	r0, [r4, #28]
 800c91c:	b920      	cbnz	r0, 800c928 <_Balloc+0x20>
 800c91e:	4b18      	ldr	r3, [pc, #96]	@ (800c980 <_Balloc+0x78>)
 800c920:	4818      	ldr	r0, [pc, #96]	@ (800c984 <_Balloc+0x7c>)
 800c922:	216b      	movs	r1, #107	@ 0x6b
 800c924:	f000 fcb2 	bl	800d28c <__assert_func>
 800c928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c92c:	6006      	str	r6, [r0, #0]
 800c92e:	60c6      	str	r6, [r0, #12]
 800c930:	69e6      	ldr	r6, [r4, #28]
 800c932:	68f3      	ldr	r3, [r6, #12]
 800c934:	b183      	cbz	r3, 800c958 <_Balloc+0x50>
 800c936:	69e3      	ldr	r3, [r4, #28]
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c93e:	b9b8      	cbnz	r0, 800c970 <_Balloc+0x68>
 800c940:	2101      	movs	r1, #1
 800c942:	fa01 f605 	lsl.w	r6, r1, r5
 800c946:	1d72      	adds	r2, r6, #5
 800c948:	0092      	lsls	r2, r2, #2
 800c94a:	4620      	mov	r0, r4
 800c94c:	f000 fcbc 	bl	800d2c8 <_calloc_r>
 800c950:	b160      	cbz	r0, 800c96c <_Balloc+0x64>
 800c952:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c956:	e00e      	b.n	800c976 <_Balloc+0x6e>
 800c958:	2221      	movs	r2, #33	@ 0x21
 800c95a:	2104      	movs	r1, #4
 800c95c:	4620      	mov	r0, r4
 800c95e:	f000 fcb3 	bl	800d2c8 <_calloc_r>
 800c962:	69e3      	ldr	r3, [r4, #28]
 800c964:	60f0      	str	r0, [r6, #12]
 800c966:	68db      	ldr	r3, [r3, #12]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d1e4      	bne.n	800c936 <_Balloc+0x2e>
 800c96c:	2000      	movs	r0, #0
 800c96e:	bd70      	pop	{r4, r5, r6, pc}
 800c970:	6802      	ldr	r2, [r0, #0]
 800c972:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c976:	2300      	movs	r3, #0
 800c978:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c97c:	e7f7      	b.n	800c96e <_Balloc+0x66>
 800c97e:	bf00      	nop
 800c980:	0800d749 	.word	0x0800d749
 800c984:	0800d7c9 	.word	0x0800d7c9

0800c988 <_Bfree>:
 800c988:	b570      	push	{r4, r5, r6, lr}
 800c98a:	69c6      	ldr	r6, [r0, #28]
 800c98c:	4605      	mov	r5, r0
 800c98e:	460c      	mov	r4, r1
 800c990:	b976      	cbnz	r6, 800c9b0 <_Bfree+0x28>
 800c992:	2010      	movs	r0, #16
 800c994:	f7ff ff02 	bl	800c79c <malloc>
 800c998:	4602      	mov	r2, r0
 800c99a:	61e8      	str	r0, [r5, #28]
 800c99c:	b920      	cbnz	r0, 800c9a8 <_Bfree+0x20>
 800c99e:	4b09      	ldr	r3, [pc, #36]	@ (800c9c4 <_Bfree+0x3c>)
 800c9a0:	4809      	ldr	r0, [pc, #36]	@ (800c9c8 <_Bfree+0x40>)
 800c9a2:	218f      	movs	r1, #143	@ 0x8f
 800c9a4:	f000 fc72 	bl	800d28c <__assert_func>
 800c9a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9ac:	6006      	str	r6, [r0, #0]
 800c9ae:	60c6      	str	r6, [r0, #12]
 800c9b0:	b13c      	cbz	r4, 800c9c2 <_Bfree+0x3a>
 800c9b2:	69eb      	ldr	r3, [r5, #28]
 800c9b4:	6862      	ldr	r2, [r4, #4]
 800c9b6:	68db      	ldr	r3, [r3, #12]
 800c9b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c9bc:	6021      	str	r1, [r4, #0]
 800c9be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c9c2:	bd70      	pop	{r4, r5, r6, pc}
 800c9c4:	0800d749 	.word	0x0800d749
 800c9c8:	0800d7c9 	.word	0x0800d7c9

0800c9cc <__multadd>:
 800c9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9d0:	690d      	ldr	r5, [r1, #16]
 800c9d2:	4607      	mov	r7, r0
 800c9d4:	460c      	mov	r4, r1
 800c9d6:	461e      	mov	r6, r3
 800c9d8:	f101 0c14 	add.w	ip, r1, #20
 800c9dc:	2000      	movs	r0, #0
 800c9de:	f8dc 3000 	ldr.w	r3, [ip]
 800c9e2:	b299      	uxth	r1, r3
 800c9e4:	fb02 6101 	mla	r1, r2, r1, r6
 800c9e8:	0c1e      	lsrs	r6, r3, #16
 800c9ea:	0c0b      	lsrs	r3, r1, #16
 800c9ec:	fb02 3306 	mla	r3, r2, r6, r3
 800c9f0:	b289      	uxth	r1, r1
 800c9f2:	3001      	adds	r0, #1
 800c9f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c9f8:	4285      	cmp	r5, r0
 800c9fa:	f84c 1b04 	str.w	r1, [ip], #4
 800c9fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ca02:	dcec      	bgt.n	800c9de <__multadd+0x12>
 800ca04:	b30e      	cbz	r6, 800ca4a <__multadd+0x7e>
 800ca06:	68a3      	ldr	r3, [r4, #8]
 800ca08:	42ab      	cmp	r3, r5
 800ca0a:	dc19      	bgt.n	800ca40 <__multadd+0x74>
 800ca0c:	6861      	ldr	r1, [r4, #4]
 800ca0e:	4638      	mov	r0, r7
 800ca10:	3101      	adds	r1, #1
 800ca12:	f7ff ff79 	bl	800c908 <_Balloc>
 800ca16:	4680      	mov	r8, r0
 800ca18:	b928      	cbnz	r0, 800ca26 <__multadd+0x5a>
 800ca1a:	4602      	mov	r2, r0
 800ca1c:	4b0c      	ldr	r3, [pc, #48]	@ (800ca50 <__multadd+0x84>)
 800ca1e:	480d      	ldr	r0, [pc, #52]	@ (800ca54 <__multadd+0x88>)
 800ca20:	21ba      	movs	r1, #186	@ 0xba
 800ca22:	f000 fc33 	bl	800d28c <__assert_func>
 800ca26:	6922      	ldr	r2, [r4, #16]
 800ca28:	3202      	adds	r2, #2
 800ca2a:	f104 010c 	add.w	r1, r4, #12
 800ca2e:	0092      	lsls	r2, r2, #2
 800ca30:	300c      	adds	r0, #12
 800ca32:	f7ff f80e 	bl	800ba52 <memcpy>
 800ca36:	4621      	mov	r1, r4
 800ca38:	4638      	mov	r0, r7
 800ca3a:	f7ff ffa5 	bl	800c988 <_Bfree>
 800ca3e:	4644      	mov	r4, r8
 800ca40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ca44:	3501      	adds	r5, #1
 800ca46:	615e      	str	r6, [r3, #20]
 800ca48:	6125      	str	r5, [r4, #16]
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca50:	0800d7b8 	.word	0x0800d7b8
 800ca54:	0800d7c9 	.word	0x0800d7c9

0800ca58 <__hi0bits>:
 800ca58:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	bf36      	itet	cc
 800ca60:	0403      	lslcc	r3, r0, #16
 800ca62:	2000      	movcs	r0, #0
 800ca64:	2010      	movcc	r0, #16
 800ca66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ca6a:	bf3c      	itt	cc
 800ca6c:	021b      	lslcc	r3, r3, #8
 800ca6e:	3008      	addcc	r0, #8
 800ca70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ca74:	bf3c      	itt	cc
 800ca76:	011b      	lslcc	r3, r3, #4
 800ca78:	3004      	addcc	r0, #4
 800ca7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca7e:	bf3c      	itt	cc
 800ca80:	009b      	lslcc	r3, r3, #2
 800ca82:	3002      	addcc	r0, #2
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	db05      	blt.n	800ca94 <__hi0bits+0x3c>
 800ca88:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ca8c:	f100 0001 	add.w	r0, r0, #1
 800ca90:	bf08      	it	eq
 800ca92:	2020      	moveq	r0, #32
 800ca94:	4770      	bx	lr

0800ca96 <__lo0bits>:
 800ca96:	6803      	ldr	r3, [r0, #0]
 800ca98:	4602      	mov	r2, r0
 800ca9a:	f013 0007 	ands.w	r0, r3, #7
 800ca9e:	d00b      	beq.n	800cab8 <__lo0bits+0x22>
 800caa0:	07d9      	lsls	r1, r3, #31
 800caa2:	d421      	bmi.n	800cae8 <__lo0bits+0x52>
 800caa4:	0798      	lsls	r0, r3, #30
 800caa6:	bf49      	itett	mi
 800caa8:	085b      	lsrmi	r3, r3, #1
 800caaa:	089b      	lsrpl	r3, r3, #2
 800caac:	2001      	movmi	r0, #1
 800caae:	6013      	strmi	r3, [r2, #0]
 800cab0:	bf5c      	itt	pl
 800cab2:	6013      	strpl	r3, [r2, #0]
 800cab4:	2002      	movpl	r0, #2
 800cab6:	4770      	bx	lr
 800cab8:	b299      	uxth	r1, r3
 800caba:	b909      	cbnz	r1, 800cac0 <__lo0bits+0x2a>
 800cabc:	0c1b      	lsrs	r3, r3, #16
 800cabe:	2010      	movs	r0, #16
 800cac0:	b2d9      	uxtb	r1, r3
 800cac2:	b909      	cbnz	r1, 800cac8 <__lo0bits+0x32>
 800cac4:	3008      	adds	r0, #8
 800cac6:	0a1b      	lsrs	r3, r3, #8
 800cac8:	0719      	lsls	r1, r3, #28
 800caca:	bf04      	itt	eq
 800cacc:	091b      	lsreq	r3, r3, #4
 800cace:	3004      	addeq	r0, #4
 800cad0:	0799      	lsls	r1, r3, #30
 800cad2:	bf04      	itt	eq
 800cad4:	089b      	lsreq	r3, r3, #2
 800cad6:	3002      	addeq	r0, #2
 800cad8:	07d9      	lsls	r1, r3, #31
 800cada:	d403      	bmi.n	800cae4 <__lo0bits+0x4e>
 800cadc:	085b      	lsrs	r3, r3, #1
 800cade:	f100 0001 	add.w	r0, r0, #1
 800cae2:	d003      	beq.n	800caec <__lo0bits+0x56>
 800cae4:	6013      	str	r3, [r2, #0]
 800cae6:	4770      	bx	lr
 800cae8:	2000      	movs	r0, #0
 800caea:	4770      	bx	lr
 800caec:	2020      	movs	r0, #32
 800caee:	4770      	bx	lr

0800caf0 <__i2b>:
 800caf0:	b510      	push	{r4, lr}
 800caf2:	460c      	mov	r4, r1
 800caf4:	2101      	movs	r1, #1
 800caf6:	f7ff ff07 	bl	800c908 <_Balloc>
 800cafa:	4602      	mov	r2, r0
 800cafc:	b928      	cbnz	r0, 800cb0a <__i2b+0x1a>
 800cafe:	4b05      	ldr	r3, [pc, #20]	@ (800cb14 <__i2b+0x24>)
 800cb00:	4805      	ldr	r0, [pc, #20]	@ (800cb18 <__i2b+0x28>)
 800cb02:	f240 1145 	movw	r1, #325	@ 0x145
 800cb06:	f000 fbc1 	bl	800d28c <__assert_func>
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	6144      	str	r4, [r0, #20]
 800cb0e:	6103      	str	r3, [r0, #16]
 800cb10:	bd10      	pop	{r4, pc}
 800cb12:	bf00      	nop
 800cb14:	0800d7b8 	.word	0x0800d7b8
 800cb18:	0800d7c9 	.word	0x0800d7c9

0800cb1c <__multiply>:
 800cb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb20:	4614      	mov	r4, r2
 800cb22:	690a      	ldr	r2, [r1, #16]
 800cb24:	6923      	ldr	r3, [r4, #16]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	bfa8      	it	ge
 800cb2a:	4623      	movge	r3, r4
 800cb2c:	460f      	mov	r7, r1
 800cb2e:	bfa4      	itt	ge
 800cb30:	460c      	movge	r4, r1
 800cb32:	461f      	movge	r7, r3
 800cb34:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cb38:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cb3c:	68a3      	ldr	r3, [r4, #8]
 800cb3e:	6861      	ldr	r1, [r4, #4]
 800cb40:	eb0a 0609 	add.w	r6, sl, r9
 800cb44:	42b3      	cmp	r3, r6
 800cb46:	b085      	sub	sp, #20
 800cb48:	bfb8      	it	lt
 800cb4a:	3101      	addlt	r1, #1
 800cb4c:	f7ff fedc 	bl	800c908 <_Balloc>
 800cb50:	b930      	cbnz	r0, 800cb60 <__multiply+0x44>
 800cb52:	4602      	mov	r2, r0
 800cb54:	4b44      	ldr	r3, [pc, #272]	@ (800cc68 <__multiply+0x14c>)
 800cb56:	4845      	ldr	r0, [pc, #276]	@ (800cc6c <__multiply+0x150>)
 800cb58:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cb5c:	f000 fb96 	bl	800d28c <__assert_func>
 800cb60:	f100 0514 	add.w	r5, r0, #20
 800cb64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cb68:	462b      	mov	r3, r5
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	4543      	cmp	r3, r8
 800cb6e:	d321      	bcc.n	800cbb4 <__multiply+0x98>
 800cb70:	f107 0114 	add.w	r1, r7, #20
 800cb74:	f104 0214 	add.w	r2, r4, #20
 800cb78:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cb7c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cb80:	9302      	str	r3, [sp, #8]
 800cb82:	1b13      	subs	r3, r2, r4
 800cb84:	3b15      	subs	r3, #21
 800cb86:	f023 0303 	bic.w	r3, r3, #3
 800cb8a:	3304      	adds	r3, #4
 800cb8c:	f104 0715 	add.w	r7, r4, #21
 800cb90:	42ba      	cmp	r2, r7
 800cb92:	bf38      	it	cc
 800cb94:	2304      	movcc	r3, #4
 800cb96:	9301      	str	r3, [sp, #4]
 800cb98:	9b02      	ldr	r3, [sp, #8]
 800cb9a:	9103      	str	r1, [sp, #12]
 800cb9c:	428b      	cmp	r3, r1
 800cb9e:	d80c      	bhi.n	800cbba <__multiply+0x9e>
 800cba0:	2e00      	cmp	r6, #0
 800cba2:	dd03      	ble.n	800cbac <__multiply+0x90>
 800cba4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d05b      	beq.n	800cc64 <__multiply+0x148>
 800cbac:	6106      	str	r6, [r0, #16]
 800cbae:	b005      	add	sp, #20
 800cbb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbb4:	f843 2b04 	str.w	r2, [r3], #4
 800cbb8:	e7d8      	b.n	800cb6c <__multiply+0x50>
 800cbba:	f8b1 a000 	ldrh.w	sl, [r1]
 800cbbe:	f1ba 0f00 	cmp.w	sl, #0
 800cbc2:	d024      	beq.n	800cc0e <__multiply+0xf2>
 800cbc4:	f104 0e14 	add.w	lr, r4, #20
 800cbc8:	46a9      	mov	r9, r5
 800cbca:	f04f 0c00 	mov.w	ip, #0
 800cbce:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cbd2:	f8d9 3000 	ldr.w	r3, [r9]
 800cbd6:	fa1f fb87 	uxth.w	fp, r7
 800cbda:	b29b      	uxth	r3, r3
 800cbdc:	fb0a 330b 	mla	r3, sl, fp, r3
 800cbe0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cbe4:	f8d9 7000 	ldr.w	r7, [r9]
 800cbe8:	4463      	add	r3, ip
 800cbea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cbee:	fb0a c70b 	mla	r7, sl, fp, ip
 800cbf2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cbf6:	b29b      	uxth	r3, r3
 800cbf8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cbfc:	4572      	cmp	r2, lr
 800cbfe:	f849 3b04 	str.w	r3, [r9], #4
 800cc02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cc06:	d8e2      	bhi.n	800cbce <__multiply+0xb2>
 800cc08:	9b01      	ldr	r3, [sp, #4]
 800cc0a:	f845 c003 	str.w	ip, [r5, r3]
 800cc0e:	9b03      	ldr	r3, [sp, #12]
 800cc10:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cc14:	3104      	adds	r1, #4
 800cc16:	f1b9 0f00 	cmp.w	r9, #0
 800cc1a:	d021      	beq.n	800cc60 <__multiply+0x144>
 800cc1c:	682b      	ldr	r3, [r5, #0]
 800cc1e:	f104 0c14 	add.w	ip, r4, #20
 800cc22:	46ae      	mov	lr, r5
 800cc24:	f04f 0a00 	mov.w	sl, #0
 800cc28:	f8bc b000 	ldrh.w	fp, [ip]
 800cc2c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cc30:	fb09 770b 	mla	r7, r9, fp, r7
 800cc34:	4457      	add	r7, sl
 800cc36:	b29b      	uxth	r3, r3
 800cc38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cc3c:	f84e 3b04 	str.w	r3, [lr], #4
 800cc40:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cc44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cc48:	f8be 3000 	ldrh.w	r3, [lr]
 800cc4c:	fb09 330a 	mla	r3, r9, sl, r3
 800cc50:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cc54:	4562      	cmp	r2, ip
 800cc56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cc5a:	d8e5      	bhi.n	800cc28 <__multiply+0x10c>
 800cc5c:	9f01      	ldr	r7, [sp, #4]
 800cc5e:	51eb      	str	r3, [r5, r7]
 800cc60:	3504      	adds	r5, #4
 800cc62:	e799      	b.n	800cb98 <__multiply+0x7c>
 800cc64:	3e01      	subs	r6, #1
 800cc66:	e79b      	b.n	800cba0 <__multiply+0x84>
 800cc68:	0800d7b8 	.word	0x0800d7b8
 800cc6c:	0800d7c9 	.word	0x0800d7c9

0800cc70 <__pow5mult>:
 800cc70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc74:	4615      	mov	r5, r2
 800cc76:	f012 0203 	ands.w	r2, r2, #3
 800cc7a:	4607      	mov	r7, r0
 800cc7c:	460e      	mov	r6, r1
 800cc7e:	d007      	beq.n	800cc90 <__pow5mult+0x20>
 800cc80:	4c25      	ldr	r4, [pc, #148]	@ (800cd18 <__pow5mult+0xa8>)
 800cc82:	3a01      	subs	r2, #1
 800cc84:	2300      	movs	r3, #0
 800cc86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cc8a:	f7ff fe9f 	bl	800c9cc <__multadd>
 800cc8e:	4606      	mov	r6, r0
 800cc90:	10ad      	asrs	r5, r5, #2
 800cc92:	d03d      	beq.n	800cd10 <__pow5mult+0xa0>
 800cc94:	69fc      	ldr	r4, [r7, #28]
 800cc96:	b97c      	cbnz	r4, 800ccb8 <__pow5mult+0x48>
 800cc98:	2010      	movs	r0, #16
 800cc9a:	f7ff fd7f 	bl	800c79c <malloc>
 800cc9e:	4602      	mov	r2, r0
 800cca0:	61f8      	str	r0, [r7, #28]
 800cca2:	b928      	cbnz	r0, 800ccb0 <__pow5mult+0x40>
 800cca4:	4b1d      	ldr	r3, [pc, #116]	@ (800cd1c <__pow5mult+0xac>)
 800cca6:	481e      	ldr	r0, [pc, #120]	@ (800cd20 <__pow5mult+0xb0>)
 800cca8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ccac:	f000 faee 	bl	800d28c <__assert_func>
 800ccb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ccb4:	6004      	str	r4, [r0, #0]
 800ccb6:	60c4      	str	r4, [r0, #12]
 800ccb8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ccbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ccc0:	b94c      	cbnz	r4, 800ccd6 <__pow5mult+0x66>
 800ccc2:	f240 2171 	movw	r1, #625	@ 0x271
 800ccc6:	4638      	mov	r0, r7
 800ccc8:	f7ff ff12 	bl	800caf0 <__i2b>
 800cccc:	2300      	movs	r3, #0
 800ccce:	f8c8 0008 	str.w	r0, [r8, #8]
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	6003      	str	r3, [r0, #0]
 800ccd6:	f04f 0900 	mov.w	r9, #0
 800ccda:	07eb      	lsls	r3, r5, #31
 800ccdc:	d50a      	bpl.n	800ccf4 <__pow5mult+0x84>
 800ccde:	4631      	mov	r1, r6
 800cce0:	4622      	mov	r2, r4
 800cce2:	4638      	mov	r0, r7
 800cce4:	f7ff ff1a 	bl	800cb1c <__multiply>
 800cce8:	4631      	mov	r1, r6
 800ccea:	4680      	mov	r8, r0
 800ccec:	4638      	mov	r0, r7
 800ccee:	f7ff fe4b 	bl	800c988 <_Bfree>
 800ccf2:	4646      	mov	r6, r8
 800ccf4:	106d      	asrs	r5, r5, #1
 800ccf6:	d00b      	beq.n	800cd10 <__pow5mult+0xa0>
 800ccf8:	6820      	ldr	r0, [r4, #0]
 800ccfa:	b938      	cbnz	r0, 800cd0c <__pow5mult+0x9c>
 800ccfc:	4622      	mov	r2, r4
 800ccfe:	4621      	mov	r1, r4
 800cd00:	4638      	mov	r0, r7
 800cd02:	f7ff ff0b 	bl	800cb1c <__multiply>
 800cd06:	6020      	str	r0, [r4, #0]
 800cd08:	f8c0 9000 	str.w	r9, [r0]
 800cd0c:	4604      	mov	r4, r0
 800cd0e:	e7e4      	b.n	800ccda <__pow5mult+0x6a>
 800cd10:	4630      	mov	r0, r6
 800cd12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd16:	bf00      	nop
 800cd18:	0800d824 	.word	0x0800d824
 800cd1c:	0800d749 	.word	0x0800d749
 800cd20:	0800d7c9 	.word	0x0800d7c9

0800cd24 <__lshift>:
 800cd24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd28:	460c      	mov	r4, r1
 800cd2a:	6849      	ldr	r1, [r1, #4]
 800cd2c:	6923      	ldr	r3, [r4, #16]
 800cd2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cd32:	68a3      	ldr	r3, [r4, #8]
 800cd34:	4607      	mov	r7, r0
 800cd36:	4691      	mov	r9, r2
 800cd38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cd3c:	f108 0601 	add.w	r6, r8, #1
 800cd40:	42b3      	cmp	r3, r6
 800cd42:	db0b      	blt.n	800cd5c <__lshift+0x38>
 800cd44:	4638      	mov	r0, r7
 800cd46:	f7ff fddf 	bl	800c908 <_Balloc>
 800cd4a:	4605      	mov	r5, r0
 800cd4c:	b948      	cbnz	r0, 800cd62 <__lshift+0x3e>
 800cd4e:	4602      	mov	r2, r0
 800cd50:	4b28      	ldr	r3, [pc, #160]	@ (800cdf4 <__lshift+0xd0>)
 800cd52:	4829      	ldr	r0, [pc, #164]	@ (800cdf8 <__lshift+0xd4>)
 800cd54:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cd58:	f000 fa98 	bl	800d28c <__assert_func>
 800cd5c:	3101      	adds	r1, #1
 800cd5e:	005b      	lsls	r3, r3, #1
 800cd60:	e7ee      	b.n	800cd40 <__lshift+0x1c>
 800cd62:	2300      	movs	r3, #0
 800cd64:	f100 0114 	add.w	r1, r0, #20
 800cd68:	f100 0210 	add.w	r2, r0, #16
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	4553      	cmp	r3, sl
 800cd70:	db33      	blt.n	800cdda <__lshift+0xb6>
 800cd72:	6920      	ldr	r0, [r4, #16]
 800cd74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cd78:	f104 0314 	add.w	r3, r4, #20
 800cd7c:	f019 091f 	ands.w	r9, r9, #31
 800cd80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cd84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cd88:	d02b      	beq.n	800cde2 <__lshift+0xbe>
 800cd8a:	f1c9 0e20 	rsb	lr, r9, #32
 800cd8e:	468a      	mov	sl, r1
 800cd90:	2200      	movs	r2, #0
 800cd92:	6818      	ldr	r0, [r3, #0]
 800cd94:	fa00 f009 	lsl.w	r0, r0, r9
 800cd98:	4310      	orrs	r0, r2
 800cd9a:	f84a 0b04 	str.w	r0, [sl], #4
 800cd9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cda2:	459c      	cmp	ip, r3
 800cda4:	fa22 f20e 	lsr.w	r2, r2, lr
 800cda8:	d8f3      	bhi.n	800cd92 <__lshift+0x6e>
 800cdaa:	ebac 0304 	sub.w	r3, ip, r4
 800cdae:	3b15      	subs	r3, #21
 800cdb0:	f023 0303 	bic.w	r3, r3, #3
 800cdb4:	3304      	adds	r3, #4
 800cdb6:	f104 0015 	add.w	r0, r4, #21
 800cdba:	4584      	cmp	ip, r0
 800cdbc:	bf38      	it	cc
 800cdbe:	2304      	movcc	r3, #4
 800cdc0:	50ca      	str	r2, [r1, r3]
 800cdc2:	b10a      	cbz	r2, 800cdc8 <__lshift+0xa4>
 800cdc4:	f108 0602 	add.w	r6, r8, #2
 800cdc8:	3e01      	subs	r6, #1
 800cdca:	4638      	mov	r0, r7
 800cdcc:	612e      	str	r6, [r5, #16]
 800cdce:	4621      	mov	r1, r4
 800cdd0:	f7ff fdda 	bl	800c988 <_Bfree>
 800cdd4:	4628      	mov	r0, r5
 800cdd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdda:	f842 0f04 	str.w	r0, [r2, #4]!
 800cdde:	3301      	adds	r3, #1
 800cde0:	e7c5      	b.n	800cd6e <__lshift+0x4a>
 800cde2:	3904      	subs	r1, #4
 800cde4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cde8:	f841 2f04 	str.w	r2, [r1, #4]!
 800cdec:	459c      	cmp	ip, r3
 800cdee:	d8f9      	bhi.n	800cde4 <__lshift+0xc0>
 800cdf0:	e7ea      	b.n	800cdc8 <__lshift+0xa4>
 800cdf2:	bf00      	nop
 800cdf4:	0800d7b8 	.word	0x0800d7b8
 800cdf8:	0800d7c9 	.word	0x0800d7c9

0800cdfc <__mcmp>:
 800cdfc:	690a      	ldr	r2, [r1, #16]
 800cdfe:	4603      	mov	r3, r0
 800ce00:	6900      	ldr	r0, [r0, #16]
 800ce02:	1a80      	subs	r0, r0, r2
 800ce04:	b530      	push	{r4, r5, lr}
 800ce06:	d10e      	bne.n	800ce26 <__mcmp+0x2a>
 800ce08:	3314      	adds	r3, #20
 800ce0a:	3114      	adds	r1, #20
 800ce0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ce10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ce14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ce18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ce1c:	4295      	cmp	r5, r2
 800ce1e:	d003      	beq.n	800ce28 <__mcmp+0x2c>
 800ce20:	d205      	bcs.n	800ce2e <__mcmp+0x32>
 800ce22:	f04f 30ff 	mov.w	r0, #4294967295
 800ce26:	bd30      	pop	{r4, r5, pc}
 800ce28:	42a3      	cmp	r3, r4
 800ce2a:	d3f3      	bcc.n	800ce14 <__mcmp+0x18>
 800ce2c:	e7fb      	b.n	800ce26 <__mcmp+0x2a>
 800ce2e:	2001      	movs	r0, #1
 800ce30:	e7f9      	b.n	800ce26 <__mcmp+0x2a>
	...

0800ce34 <__mdiff>:
 800ce34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce38:	4689      	mov	r9, r1
 800ce3a:	4606      	mov	r6, r0
 800ce3c:	4611      	mov	r1, r2
 800ce3e:	4648      	mov	r0, r9
 800ce40:	4614      	mov	r4, r2
 800ce42:	f7ff ffdb 	bl	800cdfc <__mcmp>
 800ce46:	1e05      	subs	r5, r0, #0
 800ce48:	d112      	bne.n	800ce70 <__mdiff+0x3c>
 800ce4a:	4629      	mov	r1, r5
 800ce4c:	4630      	mov	r0, r6
 800ce4e:	f7ff fd5b 	bl	800c908 <_Balloc>
 800ce52:	4602      	mov	r2, r0
 800ce54:	b928      	cbnz	r0, 800ce62 <__mdiff+0x2e>
 800ce56:	4b3f      	ldr	r3, [pc, #252]	@ (800cf54 <__mdiff+0x120>)
 800ce58:	f240 2137 	movw	r1, #567	@ 0x237
 800ce5c:	483e      	ldr	r0, [pc, #248]	@ (800cf58 <__mdiff+0x124>)
 800ce5e:	f000 fa15 	bl	800d28c <__assert_func>
 800ce62:	2301      	movs	r3, #1
 800ce64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ce68:	4610      	mov	r0, r2
 800ce6a:	b003      	add	sp, #12
 800ce6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce70:	bfbc      	itt	lt
 800ce72:	464b      	movlt	r3, r9
 800ce74:	46a1      	movlt	r9, r4
 800ce76:	4630      	mov	r0, r6
 800ce78:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ce7c:	bfba      	itte	lt
 800ce7e:	461c      	movlt	r4, r3
 800ce80:	2501      	movlt	r5, #1
 800ce82:	2500      	movge	r5, #0
 800ce84:	f7ff fd40 	bl	800c908 <_Balloc>
 800ce88:	4602      	mov	r2, r0
 800ce8a:	b918      	cbnz	r0, 800ce94 <__mdiff+0x60>
 800ce8c:	4b31      	ldr	r3, [pc, #196]	@ (800cf54 <__mdiff+0x120>)
 800ce8e:	f240 2145 	movw	r1, #581	@ 0x245
 800ce92:	e7e3      	b.n	800ce5c <__mdiff+0x28>
 800ce94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ce98:	6926      	ldr	r6, [r4, #16]
 800ce9a:	60c5      	str	r5, [r0, #12]
 800ce9c:	f109 0310 	add.w	r3, r9, #16
 800cea0:	f109 0514 	add.w	r5, r9, #20
 800cea4:	f104 0e14 	add.w	lr, r4, #20
 800cea8:	f100 0b14 	add.w	fp, r0, #20
 800ceac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ceb0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ceb4:	9301      	str	r3, [sp, #4]
 800ceb6:	46d9      	mov	r9, fp
 800ceb8:	f04f 0c00 	mov.w	ip, #0
 800cebc:	9b01      	ldr	r3, [sp, #4]
 800cebe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cec2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cec6:	9301      	str	r3, [sp, #4]
 800cec8:	fa1f f38a 	uxth.w	r3, sl
 800cecc:	4619      	mov	r1, r3
 800cece:	b283      	uxth	r3, r0
 800ced0:	1acb      	subs	r3, r1, r3
 800ced2:	0c00      	lsrs	r0, r0, #16
 800ced4:	4463      	add	r3, ip
 800ced6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ceda:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cede:	b29b      	uxth	r3, r3
 800cee0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cee4:	4576      	cmp	r6, lr
 800cee6:	f849 3b04 	str.w	r3, [r9], #4
 800ceea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ceee:	d8e5      	bhi.n	800cebc <__mdiff+0x88>
 800cef0:	1b33      	subs	r3, r6, r4
 800cef2:	3b15      	subs	r3, #21
 800cef4:	f023 0303 	bic.w	r3, r3, #3
 800cef8:	3415      	adds	r4, #21
 800cefa:	3304      	adds	r3, #4
 800cefc:	42a6      	cmp	r6, r4
 800cefe:	bf38      	it	cc
 800cf00:	2304      	movcc	r3, #4
 800cf02:	441d      	add	r5, r3
 800cf04:	445b      	add	r3, fp
 800cf06:	461e      	mov	r6, r3
 800cf08:	462c      	mov	r4, r5
 800cf0a:	4544      	cmp	r4, r8
 800cf0c:	d30e      	bcc.n	800cf2c <__mdiff+0xf8>
 800cf0e:	f108 0103 	add.w	r1, r8, #3
 800cf12:	1b49      	subs	r1, r1, r5
 800cf14:	f021 0103 	bic.w	r1, r1, #3
 800cf18:	3d03      	subs	r5, #3
 800cf1a:	45a8      	cmp	r8, r5
 800cf1c:	bf38      	it	cc
 800cf1e:	2100      	movcc	r1, #0
 800cf20:	440b      	add	r3, r1
 800cf22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cf26:	b191      	cbz	r1, 800cf4e <__mdiff+0x11a>
 800cf28:	6117      	str	r7, [r2, #16]
 800cf2a:	e79d      	b.n	800ce68 <__mdiff+0x34>
 800cf2c:	f854 1b04 	ldr.w	r1, [r4], #4
 800cf30:	46e6      	mov	lr, ip
 800cf32:	0c08      	lsrs	r0, r1, #16
 800cf34:	fa1c fc81 	uxtah	ip, ip, r1
 800cf38:	4471      	add	r1, lr
 800cf3a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cf3e:	b289      	uxth	r1, r1
 800cf40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cf44:	f846 1b04 	str.w	r1, [r6], #4
 800cf48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cf4c:	e7dd      	b.n	800cf0a <__mdiff+0xd6>
 800cf4e:	3f01      	subs	r7, #1
 800cf50:	e7e7      	b.n	800cf22 <__mdiff+0xee>
 800cf52:	bf00      	nop
 800cf54:	0800d7b8 	.word	0x0800d7b8
 800cf58:	0800d7c9 	.word	0x0800d7c9

0800cf5c <__d2b>:
 800cf5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cf60:	460f      	mov	r7, r1
 800cf62:	2101      	movs	r1, #1
 800cf64:	ec59 8b10 	vmov	r8, r9, d0
 800cf68:	4616      	mov	r6, r2
 800cf6a:	f7ff fccd 	bl	800c908 <_Balloc>
 800cf6e:	4604      	mov	r4, r0
 800cf70:	b930      	cbnz	r0, 800cf80 <__d2b+0x24>
 800cf72:	4602      	mov	r2, r0
 800cf74:	4b23      	ldr	r3, [pc, #140]	@ (800d004 <__d2b+0xa8>)
 800cf76:	4824      	ldr	r0, [pc, #144]	@ (800d008 <__d2b+0xac>)
 800cf78:	f240 310f 	movw	r1, #783	@ 0x30f
 800cf7c:	f000 f986 	bl	800d28c <__assert_func>
 800cf80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cf84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cf88:	b10d      	cbz	r5, 800cf8e <__d2b+0x32>
 800cf8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cf8e:	9301      	str	r3, [sp, #4]
 800cf90:	f1b8 0300 	subs.w	r3, r8, #0
 800cf94:	d023      	beq.n	800cfde <__d2b+0x82>
 800cf96:	4668      	mov	r0, sp
 800cf98:	9300      	str	r3, [sp, #0]
 800cf9a:	f7ff fd7c 	bl	800ca96 <__lo0bits>
 800cf9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cfa2:	b1d0      	cbz	r0, 800cfda <__d2b+0x7e>
 800cfa4:	f1c0 0320 	rsb	r3, r0, #32
 800cfa8:	fa02 f303 	lsl.w	r3, r2, r3
 800cfac:	430b      	orrs	r3, r1
 800cfae:	40c2      	lsrs	r2, r0
 800cfb0:	6163      	str	r3, [r4, #20]
 800cfb2:	9201      	str	r2, [sp, #4]
 800cfb4:	9b01      	ldr	r3, [sp, #4]
 800cfb6:	61a3      	str	r3, [r4, #24]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	bf0c      	ite	eq
 800cfbc:	2201      	moveq	r2, #1
 800cfbe:	2202      	movne	r2, #2
 800cfc0:	6122      	str	r2, [r4, #16]
 800cfc2:	b1a5      	cbz	r5, 800cfee <__d2b+0x92>
 800cfc4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cfc8:	4405      	add	r5, r0
 800cfca:	603d      	str	r5, [r7, #0]
 800cfcc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cfd0:	6030      	str	r0, [r6, #0]
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	b003      	add	sp, #12
 800cfd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfda:	6161      	str	r1, [r4, #20]
 800cfdc:	e7ea      	b.n	800cfb4 <__d2b+0x58>
 800cfde:	a801      	add	r0, sp, #4
 800cfe0:	f7ff fd59 	bl	800ca96 <__lo0bits>
 800cfe4:	9b01      	ldr	r3, [sp, #4]
 800cfe6:	6163      	str	r3, [r4, #20]
 800cfe8:	3020      	adds	r0, #32
 800cfea:	2201      	movs	r2, #1
 800cfec:	e7e8      	b.n	800cfc0 <__d2b+0x64>
 800cfee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cff2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cff6:	6038      	str	r0, [r7, #0]
 800cff8:	6918      	ldr	r0, [r3, #16]
 800cffa:	f7ff fd2d 	bl	800ca58 <__hi0bits>
 800cffe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d002:	e7e5      	b.n	800cfd0 <__d2b+0x74>
 800d004:	0800d7b8 	.word	0x0800d7b8
 800d008:	0800d7c9 	.word	0x0800d7c9

0800d00c <__sflush_r>:
 800d00c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d014:	0716      	lsls	r6, r2, #28
 800d016:	4605      	mov	r5, r0
 800d018:	460c      	mov	r4, r1
 800d01a:	d454      	bmi.n	800d0c6 <__sflush_r+0xba>
 800d01c:	684b      	ldr	r3, [r1, #4]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	dc02      	bgt.n	800d028 <__sflush_r+0x1c>
 800d022:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d024:	2b00      	cmp	r3, #0
 800d026:	dd48      	ble.n	800d0ba <__sflush_r+0xae>
 800d028:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d02a:	2e00      	cmp	r6, #0
 800d02c:	d045      	beq.n	800d0ba <__sflush_r+0xae>
 800d02e:	2300      	movs	r3, #0
 800d030:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d034:	682f      	ldr	r7, [r5, #0]
 800d036:	6a21      	ldr	r1, [r4, #32]
 800d038:	602b      	str	r3, [r5, #0]
 800d03a:	d030      	beq.n	800d09e <__sflush_r+0x92>
 800d03c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d03e:	89a3      	ldrh	r3, [r4, #12]
 800d040:	0759      	lsls	r1, r3, #29
 800d042:	d505      	bpl.n	800d050 <__sflush_r+0x44>
 800d044:	6863      	ldr	r3, [r4, #4]
 800d046:	1ad2      	subs	r2, r2, r3
 800d048:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d04a:	b10b      	cbz	r3, 800d050 <__sflush_r+0x44>
 800d04c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d04e:	1ad2      	subs	r2, r2, r3
 800d050:	2300      	movs	r3, #0
 800d052:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d054:	6a21      	ldr	r1, [r4, #32]
 800d056:	4628      	mov	r0, r5
 800d058:	47b0      	blx	r6
 800d05a:	1c43      	adds	r3, r0, #1
 800d05c:	89a3      	ldrh	r3, [r4, #12]
 800d05e:	d106      	bne.n	800d06e <__sflush_r+0x62>
 800d060:	6829      	ldr	r1, [r5, #0]
 800d062:	291d      	cmp	r1, #29
 800d064:	d82b      	bhi.n	800d0be <__sflush_r+0xb2>
 800d066:	4a2a      	ldr	r2, [pc, #168]	@ (800d110 <__sflush_r+0x104>)
 800d068:	410a      	asrs	r2, r1
 800d06a:	07d6      	lsls	r6, r2, #31
 800d06c:	d427      	bmi.n	800d0be <__sflush_r+0xb2>
 800d06e:	2200      	movs	r2, #0
 800d070:	6062      	str	r2, [r4, #4]
 800d072:	04d9      	lsls	r1, r3, #19
 800d074:	6922      	ldr	r2, [r4, #16]
 800d076:	6022      	str	r2, [r4, #0]
 800d078:	d504      	bpl.n	800d084 <__sflush_r+0x78>
 800d07a:	1c42      	adds	r2, r0, #1
 800d07c:	d101      	bne.n	800d082 <__sflush_r+0x76>
 800d07e:	682b      	ldr	r3, [r5, #0]
 800d080:	b903      	cbnz	r3, 800d084 <__sflush_r+0x78>
 800d082:	6560      	str	r0, [r4, #84]	@ 0x54
 800d084:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d086:	602f      	str	r7, [r5, #0]
 800d088:	b1b9      	cbz	r1, 800d0ba <__sflush_r+0xae>
 800d08a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d08e:	4299      	cmp	r1, r3
 800d090:	d002      	beq.n	800d098 <__sflush_r+0x8c>
 800d092:	4628      	mov	r0, r5
 800d094:	f7ff fb38 	bl	800c708 <_free_r>
 800d098:	2300      	movs	r3, #0
 800d09a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d09c:	e00d      	b.n	800d0ba <__sflush_r+0xae>
 800d09e:	2301      	movs	r3, #1
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	47b0      	blx	r6
 800d0a4:	4602      	mov	r2, r0
 800d0a6:	1c50      	adds	r0, r2, #1
 800d0a8:	d1c9      	bne.n	800d03e <__sflush_r+0x32>
 800d0aa:	682b      	ldr	r3, [r5, #0]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d0c6      	beq.n	800d03e <__sflush_r+0x32>
 800d0b0:	2b1d      	cmp	r3, #29
 800d0b2:	d001      	beq.n	800d0b8 <__sflush_r+0xac>
 800d0b4:	2b16      	cmp	r3, #22
 800d0b6:	d11e      	bne.n	800d0f6 <__sflush_r+0xea>
 800d0b8:	602f      	str	r7, [r5, #0]
 800d0ba:	2000      	movs	r0, #0
 800d0bc:	e022      	b.n	800d104 <__sflush_r+0xf8>
 800d0be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0c2:	b21b      	sxth	r3, r3
 800d0c4:	e01b      	b.n	800d0fe <__sflush_r+0xf2>
 800d0c6:	690f      	ldr	r7, [r1, #16]
 800d0c8:	2f00      	cmp	r7, #0
 800d0ca:	d0f6      	beq.n	800d0ba <__sflush_r+0xae>
 800d0cc:	0793      	lsls	r3, r2, #30
 800d0ce:	680e      	ldr	r6, [r1, #0]
 800d0d0:	bf08      	it	eq
 800d0d2:	694b      	ldreq	r3, [r1, #20]
 800d0d4:	600f      	str	r7, [r1, #0]
 800d0d6:	bf18      	it	ne
 800d0d8:	2300      	movne	r3, #0
 800d0da:	eba6 0807 	sub.w	r8, r6, r7
 800d0de:	608b      	str	r3, [r1, #8]
 800d0e0:	f1b8 0f00 	cmp.w	r8, #0
 800d0e4:	dde9      	ble.n	800d0ba <__sflush_r+0xae>
 800d0e6:	6a21      	ldr	r1, [r4, #32]
 800d0e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d0ea:	4643      	mov	r3, r8
 800d0ec:	463a      	mov	r2, r7
 800d0ee:	4628      	mov	r0, r5
 800d0f0:	47b0      	blx	r6
 800d0f2:	2800      	cmp	r0, #0
 800d0f4:	dc08      	bgt.n	800d108 <__sflush_r+0xfc>
 800d0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0fe:	81a3      	strh	r3, [r4, #12]
 800d100:	f04f 30ff 	mov.w	r0, #4294967295
 800d104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d108:	4407      	add	r7, r0
 800d10a:	eba8 0800 	sub.w	r8, r8, r0
 800d10e:	e7e7      	b.n	800d0e0 <__sflush_r+0xd4>
 800d110:	dfbffffe 	.word	0xdfbffffe

0800d114 <_fflush_r>:
 800d114:	b538      	push	{r3, r4, r5, lr}
 800d116:	690b      	ldr	r3, [r1, #16]
 800d118:	4605      	mov	r5, r0
 800d11a:	460c      	mov	r4, r1
 800d11c:	b913      	cbnz	r3, 800d124 <_fflush_r+0x10>
 800d11e:	2500      	movs	r5, #0
 800d120:	4628      	mov	r0, r5
 800d122:	bd38      	pop	{r3, r4, r5, pc}
 800d124:	b118      	cbz	r0, 800d12e <_fflush_r+0x1a>
 800d126:	6a03      	ldr	r3, [r0, #32]
 800d128:	b90b      	cbnz	r3, 800d12e <_fflush_r+0x1a>
 800d12a:	f7fe faa7 	bl	800b67c <__sinit>
 800d12e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d0f3      	beq.n	800d11e <_fflush_r+0xa>
 800d136:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d138:	07d0      	lsls	r0, r2, #31
 800d13a:	d404      	bmi.n	800d146 <_fflush_r+0x32>
 800d13c:	0599      	lsls	r1, r3, #22
 800d13e:	d402      	bmi.n	800d146 <_fflush_r+0x32>
 800d140:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d142:	f7fe fc84 	bl	800ba4e <__retarget_lock_acquire_recursive>
 800d146:	4628      	mov	r0, r5
 800d148:	4621      	mov	r1, r4
 800d14a:	f7ff ff5f 	bl	800d00c <__sflush_r>
 800d14e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d150:	07da      	lsls	r2, r3, #31
 800d152:	4605      	mov	r5, r0
 800d154:	d4e4      	bmi.n	800d120 <_fflush_r+0xc>
 800d156:	89a3      	ldrh	r3, [r4, #12]
 800d158:	059b      	lsls	r3, r3, #22
 800d15a:	d4e1      	bmi.n	800d120 <_fflush_r+0xc>
 800d15c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d15e:	f7fe fc77 	bl	800ba50 <__retarget_lock_release_recursive>
 800d162:	e7dd      	b.n	800d120 <_fflush_r+0xc>

0800d164 <__swhatbuf_r>:
 800d164:	b570      	push	{r4, r5, r6, lr}
 800d166:	460c      	mov	r4, r1
 800d168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d16c:	2900      	cmp	r1, #0
 800d16e:	b096      	sub	sp, #88	@ 0x58
 800d170:	4615      	mov	r5, r2
 800d172:	461e      	mov	r6, r3
 800d174:	da0d      	bge.n	800d192 <__swhatbuf_r+0x2e>
 800d176:	89a3      	ldrh	r3, [r4, #12]
 800d178:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d17c:	f04f 0100 	mov.w	r1, #0
 800d180:	bf14      	ite	ne
 800d182:	2340      	movne	r3, #64	@ 0x40
 800d184:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d188:	2000      	movs	r0, #0
 800d18a:	6031      	str	r1, [r6, #0]
 800d18c:	602b      	str	r3, [r5, #0]
 800d18e:	b016      	add	sp, #88	@ 0x58
 800d190:	bd70      	pop	{r4, r5, r6, pc}
 800d192:	466a      	mov	r2, sp
 800d194:	f000 f848 	bl	800d228 <_fstat_r>
 800d198:	2800      	cmp	r0, #0
 800d19a:	dbec      	blt.n	800d176 <__swhatbuf_r+0x12>
 800d19c:	9901      	ldr	r1, [sp, #4]
 800d19e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d1a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d1a6:	4259      	negs	r1, r3
 800d1a8:	4159      	adcs	r1, r3
 800d1aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d1ae:	e7eb      	b.n	800d188 <__swhatbuf_r+0x24>

0800d1b0 <__smakebuf_r>:
 800d1b0:	898b      	ldrh	r3, [r1, #12]
 800d1b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1b4:	079d      	lsls	r5, r3, #30
 800d1b6:	4606      	mov	r6, r0
 800d1b8:	460c      	mov	r4, r1
 800d1ba:	d507      	bpl.n	800d1cc <__smakebuf_r+0x1c>
 800d1bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d1c0:	6023      	str	r3, [r4, #0]
 800d1c2:	6123      	str	r3, [r4, #16]
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	6163      	str	r3, [r4, #20]
 800d1c8:	b003      	add	sp, #12
 800d1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1cc:	ab01      	add	r3, sp, #4
 800d1ce:	466a      	mov	r2, sp
 800d1d0:	f7ff ffc8 	bl	800d164 <__swhatbuf_r>
 800d1d4:	9f00      	ldr	r7, [sp, #0]
 800d1d6:	4605      	mov	r5, r0
 800d1d8:	4639      	mov	r1, r7
 800d1da:	4630      	mov	r0, r6
 800d1dc:	f7ff fb08 	bl	800c7f0 <_malloc_r>
 800d1e0:	b948      	cbnz	r0, 800d1f6 <__smakebuf_r+0x46>
 800d1e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1e6:	059a      	lsls	r2, r3, #22
 800d1e8:	d4ee      	bmi.n	800d1c8 <__smakebuf_r+0x18>
 800d1ea:	f023 0303 	bic.w	r3, r3, #3
 800d1ee:	f043 0302 	orr.w	r3, r3, #2
 800d1f2:	81a3      	strh	r3, [r4, #12]
 800d1f4:	e7e2      	b.n	800d1bc <__smakebuf_r+0xc>
 800d1f6:	89a3      	ldrh	r3, [r4, #12]
 800d1f8:	6020      	str	r0, [r4, #0]
 800d1fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1fe:	81a3      	strh	r3, [r4, #12]
 800d200:	9b01      	ldr	r3, [sp, #4]
 800d202:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d206:	b15b      	cbz	r3, 800d220 <__smakebuf_r+0x70>
 800d208:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d20c:	4630      	mov	r0, r6
 800d20e:	f000 f81d 	bl	800d24c <_isatty_r>
 800d212:	b128      	cbz	r0, 800d220 <__smakebuf_r+0x70>
 800d214:	89a3      	ldrh	r3, [r4, #12]
 800d216:	f023 0303 	bic.w	r3, r3, #3
 800d21a:	f043 0301 	orr.w	r3, r3, #1
 800d21e:	81a3      	strh	r3, [r4, #12]
 800d220:	89a3      	ldrh	r3, [r4, #12]
 800d222:	431d      	orrs	r5, r3
 800d224:	81a5      	strh	r5, [r4, #12]
 800d226:	e7cf      	b.n	800d1c8 <__smakebuf_r+0x18>

0800d228 <_fstat_r>:
 800d228:	b538      	push	{r3, r4, r5, lr}
 800d22a:	4d07      	ldr	r5, [pc, #28]	@ (800d248 <_fstat_r+0x20>)
 800d22c:	2300      	movs	r3, #0
 800d22e:	4604      	mov	r4, r0
 800d230:	4608      	mov	r0, r1
 800d232:	4611      	mov	r1, r2
 800d234:	602b      	str	r3, [r5, #0]
 800d236:	f7f4 fe83 	bl	8001f40 <_fstat>
 800d23a:	1c43      	adds	r3, r0, #1
 800d23c:	d102      	bne.n	800d244 <_fstat_r+0x1c>
 800d23e:	682b      	ldr	r3, [r5, #0]
 800d240:	b103      	cbz	r3, 800d244 <_fstat_r+0x1c>
 800d242:	6023      	str	r3, [r4, #0]
 800d244:	bd38      	pop	{r3, r4, r5, pc}
 800d246:	bf00      	nop
 800d248:	200011c8 	.word	0x200011c8

0800d24c <_isatty_r>:
 800d24c:	b538      	push	{r3, r4, r5, lr}
 800d24e:	4d06      	ldr	r5, [pc, #24]	@ (800d268 <_isatty_r+0x1c>)
 800d250:	2300      	movs	r3, #0
 800d252:	4604      	mov	r4, r0
 800d254:	4608      	mov	r0, r1
 800d256:	602b      	str	r3, [r5, #0]
 800d258:	f7f4 fe82 	bl	8001f60 <_isatty>
 800d25c:	1c43      	adds	r3, r0, #1
 800d25e:	d102      	bne.n	800d266 <_isatty_r+0x1a>
 800d260:	682b      	ldr	r3, [r5, #0]
 800d262:	b103      	cbz	r3, 800d266 <_isatty_r+0x1a>
 800d264:	6023      	str	r3, [r4, #0]
 800d266:	bd38      	pop	{r3, r4, r5, pc}
 800d268:	200011c8 	.word	0x200011c8

0800d26c <_sbrk_r>:
 800d26c:	b538      	push	{r3, r4, r5, lr}
 800d26e:	4d06      	ldr	r5, [pc, #24]	@ (800d288 <_sbrk_r+0x1c>)
 800d270:	2300      	movs	r3, #0
 800d272:	4604      	mov	r4, r0
 800d274:	4608      	mov	r0, r1
 800d276:	602b      	str	r3, [r5, #0]
 800d278:	f7f4 fe8a 	bl	8001f90 <_sbrk>
 800d27c:	1c43      	adds	r3, r0, #1
 800d27e:	d102      	bne.n	800d286 <_sbrk_r+0x1a>
 800d280:	682b      	ldr	r3, [r5, #0]
 800d282:	b103      	cbz	r3, 800d286 <_sbrk_r+0x1a>
 800d284:	6023      	str	r3, [r4, #0]
 800d286:	bd38      	pop	{r3, r4, r5, pc}
 800d288:	200011c8 	.word	0x200011c8

0800d28c <__assert_func>:
 800d28c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d28e:	4614      	mov	r4, r2
 800d290:	461a      	mov	r2, r3
 800d292:	4b09      	ldr	r3, [pc, #36]	@ (800d2b8 <__assert_func+0x2c>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	4605      	mov	r5, r0
 800d298:	68d8      	ldr	r0, [r3, #12]
 800d29a:	b954      	cbnz	r4, 800d2b2 <__assert_func+0x26>
 800d29c:	4b07      	ldr	r3, [pc, #28]	@ (800d2bc <__assert_func+0x30>)
 800d29e:	461c      	mov	r4, r3
 800d2a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d2a4:	9100      	str	r1, [sp, #0]
 800d2a6:	462b      	mov	r3, r5
 800d2a8:	4905      	ldr	r1, [pc, #20]	@ (800d2c0 <__assert_func+0x34>)
 800d2aa:	f000 f841 	bl	800d330 <fiprintf>
 800d2ae:	f000 f851 	bl	800d354 <abort>
 800d2b2:	4b04      	ldr	r3, [pc, #16]	@ (800d2c4 <__assert_func+0x38>)
 800d2b4:	e7f4      	b.n	800d2a0 <__assert_func+0x14>
 800d2b6:	bf00      	nop
 800d2b8:	20000118 	.word	0x20000118
 800d2bc:	0800d965 	.word	0x0800d965
 800d2c0:	0800d937 	.word	0x0800d937
 800d2c4:	0800d92a 	.word	0x0800d92a

0800d2c8 <_calloc_r>:
 800d2c8:	b570      	push	{r4, r5, r6, lr}
 800d2ca:	fba1 5402 	umull	r5, r4, r1, r2
 800d2ce:	b93c      	cbnz	r4, 800d2e0 <_calloc_r+0x18>
 800d2d0:	4629      	mov	r1, r5
 800d2d2:	f7ff fa8d 	bl	800c7f0 <_malloc_r>
 800d2d6:	4606      	mov	r6, r0
 800d2d8:	b928      	cbnz	r0, 800d2e6 <_calloc_r+0x1e>
 800d2da:	2600      	movs	r6, #0
 800d2dc:	4630      	mov	r0, r6
 800d2de:	bd70      	pop	{r4, r5, r6, pc}
 800d2e0:	220c      	movs	r2, #12
 800d2e2:	6002      	str	r2, [r0, #0]
 800d2e4:	e7f9      	b.n	800d2da <_calloc_r+0x12>
 800d2e6:	462a      	mov	r2, r5
 800d2e8:	4621      	mov	r1, r4
 800d2ea:	f7fe fb33 	bl	800b954 <memset>
 800d2ee:	e7f5      	b.n	800d2dc <_calloc_r+0x14>

0800d2f0 <__ascii_mbtowc>:
 800d2f0:	b082      	sub	sp, #8
 800d2f2:	b901      	cbnz	r1, 800d2f6 <__ascii_mbtowc+0x6>
 800d2f4:	a901      	add	r1, sp, #4
 800d2f6:	b142      	cbz	r2, 800d30a <__ascii_mbtowc+0x1a>
 800d2f8:	b14b      	cbz	r3, 800d30e <__ascii_mbtowc+0x1e>
 800d2fa:	7813      	ldrb	r3, [r2, #0]
 800d2fc:	600b      	str	r3, [r1, #0]
 800d2fe:	7812      	ldrb	r2, [r2, #0]
 800d300:	1e10      	subs	r0, r2, #0
 800d302:	bf18      	it	ne
 800d304:	2001      	movne	r0, #1
 800d306:	b002      	add	sp, #8
 800d308:	4770      	bx	lr
 800d30a:	4610      	mov	r0, r2
 800d30c:	e7fb      	b.n	800d306 <__ascii_mbtowc+0x16>
 800d30e:	f06f 0001 	mvn.w	r0, #1
 800d312:	e7f8      	b.n	800d306 <__ascii_mbtowc+0x16>

0800d314 <__ascii_wctomb>:
 800d314:	4603      	mov	r3, r0
 800d316:	4608      	mov	r0, r1
 800d318:	b141      	cbz	r1, 800d32c <__ascii_wctomb+0x18>
 800d31a:	2aff      	cmp	r2, #255	@ 0xff
 800d31c:	d904      	bls.n	800d328 <__ascii_wctomb+0x14>
 800d31e:	228a      	movs	r2, #138	@ 0x8a
 800d320:	601a      	str	r2, [r3, #0]
 800d322:	f04f 30ff 	mov.w	r0, #4294967295
 800d326:	4770      	bx	lr
 800d328:	700a      	strb	r2, [r1, #0]
 800d32a:	2001      	movs	r0, #1
 800d32c:	4770      	bx	lr
	...

0800d330 <fiprintf>:
 800d330:	b40e      	push	{r1, r2, r3}
 800d332:	b503      	push	{r0, r1, lr}
 800d334:	4601      	mov	r1, r0
 800d336:	ab03      	add	r3, sp, #12
 800d338:	4805      	ldr	r0, [pc, #20]	@ (800d350 <fiprintf+0x20>)
 800d33a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d33e:	6800      	ldr	r0, [r0, #0]
 800d340:	9301      	str	r3, [sp, #4]
 800d342:	f000 f837 	bl	800d3b4 <_vfiprintf_r>
 800d346:	b002      	add	sp, #8
 800d348:	f85d eb04 	ldr.w	lr, [sp], #4
 800d34c:	b003      	add	sp, #12
 800d34e:	4770      	bx	lr
 800d350:	20000118 	.word	0x20000118

0800d354 <abort>:
 800d354:	b508      	push	{r3, lr}
 800d356:	2006      	movs	r0, #6
 800d358:	f000 f96c 	bl	800d634 <raise>
 800d35c:	2001      	movs	r0, #1
 800d35e:	f7f4 fd9f 	bl	8001ea0 <_exit>

0800d362 <__sfputc_r>:
 800d362:	6893      	ldr	r3, [r2, #8]
 800d364:	3b01      	subs	r3, #1
 800d366:	2b00      	cmp	r3, #0
 800d368:	b410      	push	{r4}
 800d36a:	6093      	str	r3, [r2, #8]
 800d36c:	da08      	bge.n	800d380 <__sfputc_r+0x1e>
 800d36e:	6994      	ldr	r4, [r2, #24]
 800d370:	42a3      	cmp	r3, r4
 800d372:	db01      	blt.n	800d378 <__sfputc_r+0x16>
 800d374:	290a      	cmp	r1, #10
 800d376:	d103      	bne.n	800d380 <__sfputc_r+0x1e>
 800d378:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d37c:	f7fe ba55 	b.w	800b82a <__swbuf_r>
 800d380:	6813      	ldr	r3, [r2, #0]
 800d382:	1c58      	adds	r0, r3, #1
 800d384:	6010      	str	r0, [r2, #0]
 800d386:	7019      	strb	r1, [r3, #0]
 800d388:	4608      	mov	r0, r1
 800d38a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d38e:	4770      	bx	lr

0800d390 <__sfputs_r>:
 800d390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d392:	4606      	mov	r6, r0
 800d394:	460f      	mov	r7, r1
 800d396:	4614      	mov	r4, r2
 800d398:	18d5      	adds	r5, r2, r3
 800d39a:	42ac      	cmp	r4, r5
 800d39c:	d101      	bne.n	800d3a2 <__sfputs_r+0x12>
 800d39e:	2000      	movs	r0, #0
 800d3a0:	e007      	b.n	800d3b2 <__sfputs_r+0x22>
 800d3a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3a6:	463a      	mov	r2, r7
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	f7ff ffda 	bl	800d362 <__sfputc_r>
 800d3ae:	1c43      	adds	r3, r0, #1
 800d3b0:	d1f3      	bne.n	800d39a <__sfputs_r+0xa>
 800d3b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d3b4 <_vfiprintf_r>:
 800d3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3b8:	460d      	mov	r5, r1
 800d3ba:	b09d      	sub	sp, #116	@ 0x74
 800d3bc:	4614      	mov	r4, r2
 800d3be:	4698      	mov	r8, r3
 800d3c0:	4606      	mov	r6, r0
 800d3c2:	b118      	cbz	r0, 800d3cc <_vfiprintf_r+0x18>
 800d3c4:	6a03      	ldr	r3, [r0, #32]
 800d3c6:	b90b      	cbnz	r3, 800d3cc <_vfiprintf_r+0x18>
 800d3c8:	f7fe f958 	bl	800b67c <__sinit>
 800d3cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d3ce:	07d9      	lsls	r1, r3, #31
 800d3d0:	d405      	bmi.n	800d3de <_vfiprintf_r+0x2a>
 800d3d2:	89ab      	ldrh	r3, [r5, #12]
 800d3d4:	059a      	lsls	r2, r3, #22
 800d3d6:	d402      	bmi.n	800d3de <_vfiprintf_r+0x2a>
 800d3d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d3da:	f7fe fb38 	bl	800ba4e <__retarget_lock_acquire_recursive>
 800d3de:	89ab      	ldrh	r3, [r5, #12]
 800d3e0:	071b      	lsls	r3, r3, #28
 800d3e2:	d501      	bpl.n	800d3e8 <_vfiprintf_r+0x34>
 800d3e4:	692b      	ldr	r3, [r5, #16]
 800d3e6:	b99b      	cbnz	r3, 800d410 <_vfiprintf_r+0x5c>
 800d3e8:	4629      	mov	r1, r5
 800d3ea:	4630      	mov	r0, r6
 800d3ec:	f7fe fa5c 	bl	800b8a8 <__swsetup_r>
 800d3f0:	b170      	cbz	r0, 800d410 <_vfiprintf_r+0x5c>
 800d3f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d3f4:	07dc      	lsls	r4, r3, #31
 800d3f6:	d504      	bpl.n	800d402 <_vfiprintf_r+0x4e>
 800d3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3fc:	b01d      	add	sp, #116	@ 0x74
 800d3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d402:	89ab      	ldrh	r3, [r5, #12]
 800d404:	0598      	lsls	r0, r3, #22
 800d406:	d4f7      	bmi.n	800d3f8 <_vfiprintf_r+0x44>
 800d408:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d40a:	f7fe fb21 	bl	800ba50 <__retarget_lock_release_recursive>
 800d40e:	e7f3      	b.n	800d3f8 <_vfiprintf_r+0x44>
 800d410:	2300      	movs	r3, #0
 800d412:	9309      	str	r3, [sp, #36]	@ 0x24
 800d414:	2320      	movs	r3, #32
 800d416:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d41a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d41e:	2330      	movs	r3, #48	@ 0x30
 800d420:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d5d0 <_vfiprintf_r+0x21c>
 800d424:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d428:	f04f 0901 	mov.w	r9, #1
 800d42c:	4623      	mov	r3, r4
 800d42e:	469a      	mov	sl, r3
 800d430:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d434:	b10a      	cbz	r2, 800d43a <_vfiprintf_r+0x86>
 800d436:	2a25      	cmp	r2, #37	@ 0x25
 800d438:	d1f9      	bne.n	800d42e <_vfiprintf_r+0x7a>
 800d43a:	ebba 0b04 	subs.w	fp, sl, r4
 800d43e:	d00b      	beq.n	800d458 <_vfiprintf_r+0xa4>
 800d440:	465b      	mov	r3, fp
 800d442:	4622      	mov	r2, r4
 800d444:	4629      	mov	r1, r5
 800d446:	4630      	mov	r0, r6
 800d448:	f7ff ffa2 	bl	800d390 <__sfputs_r>
 800d44c:	3001      	adds	r0, #1
 800d44e:	f000 80a7 	beq.w	800d5a0 <_vfiprintf_r+0x1ec>
 800d452:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d454:	445a      	add	r2, fp
 800d456:	9209      	str	r2, [sp, #36]	@ 0x24
 800d458:	f89a 3000 	ldrb.w	r3, [sl]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	f000 809f 	beq.w	800d5a0 <_vfiprintf_r+0x1ec>
 800d462:	2300      	movs	r3, #0
 800d464:	f04f 32ff 	mov.w	r2, #4294967295
 800d468:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d46c:	f10a 0a01 	add.w	sl, sl, #1
 800d470:	9304      	str	r3, [sp, #16]
 800d472:	9307      	str	r3, [sp, #28]
 800d474:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d478:	931a      	str	r3, [sp, #104]	@ 0x68
 800d47a:	4654      	mov	r4, sl
 800d47c:	2205      	movs	r2, #5
 800d47e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d482:	4853      	ldr	r0, [pc, #332]	@ (800d5d0 <_vfiprintf_r+0x21c>)
 800d484:	f7f2 feac 	bl	80001e0 <memchr>
 800d488:	9a04      	ldr	r2, [sp, #16]
 800d48a:	b9d8      	cbnz	r0, 800d4c4 <_vfiprintf_r+0x110>
 800d48c:	06d1      	lsls	r1, r2, #27
 800d48e:	bf44      	itt	mi
 800d490:	2320      	movmi	r3, #32
 800d492:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d496:	0713      	lsls	r3, r2, #28
 800d498:	bf44      	itt	mi
 800d49a:	232b      	movmi	r3, #43	@ 0x2b
 800d49c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4a0:	f89a 3000 	ldrb.w	r3, [sl]
 800d4a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4a6:	d015      	beq.n	800d4d4 <_vfiprintf_r+0x120>
 800d4a8:	9a07      	ldr	r2, [sp, #28]
 800d4aa:	4654      	mov	r4, sl
 800d4ac:	2000      	movs	r0, #0
 800d4ae:	f04f 0c0a 	mov.w	ip, #10
 800d4b2:	4621      	mov	r1, r4
 800d4b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4b8:	3b30      	subs	r3, #48	@ 0x30
 800d4ba:	2b09      	cmp	r3, #9
 800d4bc:	d94b      	bls.n	800d556 <_vfiprintf_r+0x1a2>
 800d4be:	b1b0      	cbz	r0, 800d4ee <_vfiprintf_r+0x13a>
 800d4c0:	9207      	str	r2, [sp, #28]
 800d4c2:	e014      	b.n	800d4ee <_vfiprintf_r+0x13a>
 800d4c4:	eba0 0308 	sub.w	r3, r0, r8
 800d4c8:	fa09 f303 	lsl.w	r3, r9, r3
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	9304      	str	r3, [sp, #16]
 800d4d0:	46a2      	mov	sl, r4
 800d4d2:	e7d2      	b.n	800d47a <_vfiprintf_r+0xc6>
 800d4d4:	9b03      	ldr	r3, [sp, #12]
 800d4d6:	1d19      	adds	r1, r3, #4
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	9103      	str	r1, [sp, #12]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	bfbb      	ittet	lt
 800d4e0:	425b      	neglt	r3, r3
 800d4e2:	f042 0202 	orrlt.w	r2, r2, #2
 800d4e6:	9307      	strge	r3, [sp, #28]
 800d4e8:	9307      	strlt	r3, [sp, #28]
 800d4ea:	bfb8      	it	lt
 800d4ec:	9204      	strlt	r2, [sp, #16]
 800d4ee:	7823      	ldrb	r3, [r4, #0]
 800d4f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4f2:	d10a      	bne.n	800d50a <_vfiprintf_r+0x156>
 800d4f4:	7863      	ldrb	r3, [r4, #1]
 800d4f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4f8:	d132      	bne.n	800d560 <_vfiprintf_r+0x1ac>
 800d4fa:	9b03      	ldr	r3, [sp, #12]
 800d4fc:	1d1a      	adds	r2, r3, #4
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	9203      	str	r2, [sp, #12]
 800d502:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d506:	3402      	adds	r4, #2
 800d508:	9305      	str	r3, [sp, #20]
 800d50a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d5e0 <_vfiprintf_r+0x22c>
 800d50e:	7821      	ldrb	r1, [r4, #0]
 800d510:	2203      	movs	r2, #3
 800d512:	4650      	mov	r0, sl
 800d514:	f7f2 fe64 	bl	80001e0 <memchr>
 800d518:	b138      	cbz	r0, 800d52a <_vfiprintf_r+0x176>
 800d51a:	9b04      	ldr	r3, [sp, #16]
 800d51c:	eba0 000a 	sub.w	r0, r0, sl
 800d520:	2240      	movs	r2, #64	@ 0x40
 800d522:	4082      	lsls	r2, r0
 800d524:	4313      	orrs	r3, r2
 800d526:	3401      	adds	r4, #1
 800d528:	9304      	str	r3, [sp, #16]
 800d52a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d52e:	4829      	ldr	r0, [pc, #164]	@ (800d5d4 <_vfiprintf_r+0x220>)
 800d530:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d534:	2206      	movs	r2, #6
 800d536:	f7f2 fe53 	bl	80001e0 <memchr>
 800d53a:	2800      	cmp	r0, #0
 800d53c:	d03f      	beq.n	800d5be <_vfiprintf_r+0x20a>
 800d53e:	4b26      	ldr	r3, [pc, #152]	@ (800d5d8 <_vfiprintf_r+0x224>)
 800d540:	bb1b      	cbnz	r3, 800d58a <_vfiprintf_r+0x1d6>
 800d542:	9b03      	ldr	r3, [sp, #12]
 800d544:	3307      	adds	r3, #7
 800d546:	f023 0307 	bic.w	r3, r3, #7
 800d54a:	3308      	adds	r3, #8
 800d54c:	9303      	str	r3, [sp, #12]
 800d54e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d550:	443b      	add	r3, r7
 800d552:	9309      	str	r3, [sp, #36]	@ 0x24
 800d554:	e76a      	b.n	800d42c <_vfiprintf_r+0x78>
 800d556:	fb0c 3202 	mla	r2, ip, r2, r3
 800d55a:	460c      	mov	r4, r1
 800d55c:	2001      	movs	r0, #1
 800d55e:	e7a8      	b.n	800d4b2 <_vfiprintf_r+0xfe>
 800d560:	2300      	movs	r3, #0
 800d562:	3401      	adds	r4, #1
 800d564:	9305      	str	r3, [sp, #20]
 800d566:	4619      	mov	r1, r3
 800d568:	f04f 0c0a 	mov.w	ip, #10
 800d56c:	4620      	mov	r0, r4
 800d56e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d572:	3a30      	subs	r2, #48	@ 0x30
 800d574:	2a09      	cmp	r2, #9
 800d576:	d903      	bls.n	800d580 <_vfiprintf_r+0x1cc>
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d0c6      	beq.n	800d50a <_vfiprintf_r+0x156>
 800d57c:	9105      	str	r1, [sp, #20]
 800d57e:	e7c4      	b.n	800d50a <_vfiprintf_r+0x156>
 800d580:	fb0c 2101 	mla	r1, ip, r1, r2
 800d584:	4604      	mov	r4, r0
 800d586:	2301      	movs	r3, #1
 800d588:	e7f0      	b.n	800d56c <_vfiprintf_r+0x1b8>
 800d58a:	ab03      	add	r3, sp, #12
 800d58c:	9300      	str	r3, [sp, #0]
 800d58e:	462a      	mov	r2, r5
 800d590:	4b12      	ldr	r3, [pc, #72]	@ (800d5dc <_vfiprintf_r+0x228>)
 800d592:	a904      	add	r1, sp, #16
 800d594:	4630      	mov	r0, r6
 800d596:	f7fd fc2d 	bl	800adf4 <_printf_float>
 800d59a:	4607      	mov	r7, r0
 800d59c:	1c78      	adds	r0, r7, #1
 800d59e:	d1d6      	bne.n	800d54e <_vfiprintf_r+0x19a>
 800d5a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5a2:	07d9      	lsls	r1, r3, #31
 800d5a4:	d405      	bmi.n	800d5b2 <_vfiprintf_r+0x1fe>
 800d5a6:	89ab      	ldrh	r3, [r5, #12]
 800d5a8:	059a      	lsls	r2, r3, #22
 800d5aa:	d402      	bmi.n	800d5b2 <_vfiprintf_r+0x1fe>
 800d5ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d5ae:	f7fe fa4f 	bl	800ba50 <__retarget_lock_release_recursive>
 800d5b2:	89ab      	ldrh	r3, [r5, #12]
 800d5b4:	065b      	lsls	r3, r3, #25
 800d5b6:	f53f af1f 	bmi.w	800d3f8 <_vfiprintf_r+0x44>
 800d5ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d5bc:	e71e      	b.n	800d3fc <_vfiprintf_r+0x48>
 800d5be:	ab03      	add	r3, sp, #12
 800d5c0:	9300      	str	r3, [sp, #0]
 800d5c2:	462a      	mov	r2, r5
 800d5c4:	4b05      	ldr	r3, [pc, #20]	@ (800d5dc <_vfiprintf_r+0x228>)
 800d5c6:	a904      	add	r1, sp, #16
 800d5c8:	4630      	mov	r0, r6
 800d5ca:	f7fd feab 	bl	800b324 <_printf_i>
 800d5ce:	e7e4      	b.n	800d59a <_vfiprintf_r+0x1e6>
 800d5d0:	0800da67 	.word	0x0800da67
 800d5d4:	0800da71 	.word	0x0800da71
 800d5d8:	0800adf5 	.word	0x0800adf5
 800d5dc:	0800d391 	.word	0x0800d391
 800d5e0:	0800da6d 	.word	0x0800da6d

0800d5e4 <_raise_r>:
 800d5e4:	291f      	cmp	r1, #31
 800d5e6:	b538      	push	{r3, r4, r5, lr}
 800d5e8:	4605      	mov	r5, r0
 800d5ea:	460c      	mov	r4, r1
 800d5ec:	d904      	bls.n	800d5f8 <_raise_r+0x14>
 800d5ee:	2316      	movs	r3, #22
 800d5f0:	6003      	str	r3, [r0, #0]
 800d5f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5f6:	bd38      	pop	{r3, r4, r5, pc}
 800d5f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d5fa:	b112      	cbz	r2, 800d602 <_raise_r+0x1e>
 800d5fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d600:	b94b      	cbnz	r3, 800d616 <_raise_r+0x32>
 800d602:	4628      	mov	r0, r5
 800d604:	f000 f830 	bl	800d668 <_getpid_r>
 800d608:	4622      	mov	r2, r4
 800d60a:	4601      	mov	r1, r0
 800d60c:	4628      	mov	r0, r5
 800d60e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d612:	f000 b817 	b.w	800d644 <_kill_r>
 800d616:	2b01      	cmp	r3, #1
 800d618:	d00a      	beq.n	800d630 <_raise_r+0x4c>
 800d61a:	1c59      	adds	r1, r3, #1
 800d61c:	d103      	bne.n	800d626 <_raise_r+0x42>
 800d61e:	2316      	movs	r3, #22
 800d620:	6003      	str	r3, [r0, #0]
 800d622:	2001      	movs	r0, #1
 800d624:	e7e7      	b.n	800d5f6 <_raise_r+0x12>
 800d626:	2100      	movs	r1, #0
 800d628:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d62c:	4620      	mov	r0, r4
 800d62e:	4798      	blx	r3
 800d630:	2000      	movs	r0, #0
 800d632:	e7e0      	b.n	800d5f6 <_raise_r+0x12>

0800d634 <raise>:
 800d634:	4b02      	ldr	r3, [pc, #8]	@ (800d640 <raise+0xc>)
 800d636:	4601      	mov	r1, r0
 800d638:	6818      	ldr	r0, [r3, #0]
 800d63a:	f7ff bfd3 	b.w	800d5e4 <_raise_r>
 800d63e:	bf00      	nop
 800d640:	20000118 	.word	0x20000118

0800d644 <_kill_r>:
 800d644:	b538      	push	{r3, r4, r5, lr}
 800d646:	4d07      	ldr	r5, [pc, #28]	@ (800d664 <_kill_r+0x20>)
 800d648:	2300      	movs	r3, #0
 800d64a:	4604      	mov	r4, r0
 800d64c:	4608      	mov	r0, r1
 800d64e:	4611      	mov	r1, r2
 800d650:	602b      	str	r3, [r5, #0]
 800d652:	f7f4 fc15 	bl	8001e80 <_kill>
 800d656:	1c43      	adds	r3, r0, #1
 800d658:	d102      	bne.n	800d660 <_kill_r+0x1c>
 800d65a:	682b      	ldr	r3, [r5, #0]
 800d65c:	b103      	cbz	r3, 800d660 <_kill_r+0x1c>
 800d65e:	6023      	str	r3, [r4, #0]
 800d660:	bd38      	pop	{r3, r4, r5, pc}
 800d662:	bf00      	nop
 800d664:	200011c8 	.word	0x200011c8

0800d668 <_getpid_r>:
 800d668:	f7f4 bc02 	b.w	8001e70 <_getpid>

0800d66c <_init>:
 800d66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d66e:	bf00      	nop
 800d670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d672:	bc08      	pop	{r3}
 800d674:	469e      	mov	lr, r3
 800d676:	4770      	bx	lr

0800d678 <_fini>:
 800d678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d67a:	bf00      	nop
 800d67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d67e:	bc08      	pop	{r3}
 800d680:	469e      	mov	lr, r3
 800d682:	4770      	bx	lr
